[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('[a:b:|]') == '4'\nassert solution(']:[|:') == '-1'\nassert solution(']:[|]') == '-1'\nassert solution(']:[|:]') == '-1'\nassert solution('][|:') == '-1'\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[a:b:|]\") == \"4\"\nassert solution(\"]:[|:\") == \"-1\"\nassert solution(\"]:[|:::\") == \"-1\"\nassert solution(\"]:[|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a:b:c:d\") == 4\nassert solution(\"a:b:c:d|e:f:g:h\") == 5\nassert solution(\"a:b:c:d|e:f:g:h:i\") == 6\nassert solution(\"a:b:c:d|e:f:g:h:i|j\") == 7\nassert solution(\"a:b:c:d|e:f:g:h:i|j:k:l\") == 7\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a:b:|]') == 4\nassert solution('[a|]') == 2\nassert solution('[::|]') == -1\nassert solution('[:|:]]') == -1\nassert solution('[[:|]||[:|||]||[:||:]]') == -1\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[a:b:|]\") == \"4\"\nassert solution(\"]:[|:]\") == \"-1\"\nassert solution(\"[::]\") == \"4\"\nassert solution(\"]:[|:\") == \"-1\"\nassert solution(\"[:|:\") == \"0\"\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"[a:b:|]\") == 4\nassert solution(\"[:||:|:]\") == -1\nassert solution(\"[:|||:]\") == 6\nassert solution(\"[:||:||:]\") == 7\nassert solution(\"[|:]\") == -1\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a:b:|\") == 4\nassert solution(\"]]:|:\") == -1\nassert solution(\"]:|:|\") == 4\nassert solution(\"[:::|\") == -1\nassert solution(\"]:|:[:]|[\") == 6\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"])[|:\") == -1\nassert solution(\"[a:b:|]\") == 4\nassert solution(\"[a:b:|]\") == 4\nassert solution(\"[a:b:|]\") == 4\nassert solution(\"[a:b:|]\") == 4\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a:b:|') == 4\nassert solution(']:[|:') == -1\nassert solution(']]:|:[|||:') == -1\nassert solution(']]:|||:[|||:') == -1\nassert solution(']]:|:|:[|||:') == 4\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"][]\") == -1\nassert solution
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"521\") == \"499\"\nassert solution(\"48\") == \"48\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100') == '99'\nassert solution('48') == '48'\nassert solution('521') == '499'\n\"\"\"\n\nn = input()"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == '99'\nassert solution('48') == '48'\nassert solution('521') == '499'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100') == '99'\nassert solution('48') == '48'\nassert solution('521') == '499'\n\nimport sys\n\nx = int(sys.stdin.readline())\n\nmax_n = -1\nfor i in range(1, x):\n    if sum(int(c) for c in str(i)) > sum(int(c) for c in str(max_n)):\n        max_n = i\n\nprint(max_n)\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('9') == '9'\nassert solution('10') == '9'\nassert solution('100') == '99'\nassert solution('321') == '321'\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100') == '99'\nassert solution('48') == '48'\nassert solution('521') == '499'\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100') == '99'\nassert solution('48') == '48'\nassert solution('521') == '499'\n\"\"\""
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"48\") == \"48\"\nassert solution(\"521\") == \"499\"\n\nprint(\"Successfully solved.\")"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"48\") == \"48\"\nassert solution(\"521\") == \"499\"\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5) == \"499\"\nassert solution(521) == \"499\"\nassert solution(100) == \"99\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\n\nn = int(input())\ncount = 0\nwhile True:\n    if str(n).count('0') > 1:\n        break\n    n += 1\n    count += 1\n\nprint(count)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"201\") == \"99\"\nassert solution(\"4000\") == \"1000\"\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"201\") == \"99\"\nassert solution(\"4000\") == \"1000\"\n\"\"\"\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"201\") == \"99\"\nassert solution(\"4000\") == \"1000\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\") == '7'\nassert solution(\"4 3\\n1 1\\n2 2\\n2 3\\n3 4\") == '2'\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\") == \"7\"\nassert solution(\"4 3\\n1 1\\n2 2\\n2 3\\n3 4\") == \"2\"\nassert solution(\"4 4\\n1 1\\n2 2\\n2 3\\n3 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 1\\n2 2\\n2 3\\n3 4\") == '7'\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 1\\n2 2\\n2 3\\n3 4\") == \"2\"\nassert solution(\"7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\") == \"7\"\nassert solution(\"4 4\\n1 1\\n2 2\\n2 3\\n3 4\") == \"3\"\nassert solution(\"4 4\\n1 1\\n2 2\\n2 3\\n3 4\") == \"3\"\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 1\\n2 2\\n2 3\\n3 4') == '3'\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(r\"D:\\GitHub\\Hackerrank\\2_Sorting\\2_Sorting\\2_Bubble_Sort\\input_2_4.txt\", \"r\").read()) == \"3\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\") == 7\n\"\"\"\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\") == \"7\"\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\\n\") == \"7\"\nassert solution(\"4 3\\n1 1\\n2 2\\n2 3\\n3 4\\n\") == \"2\"\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 23\") == 2\nassert solution(\"11 07\") == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 23\") == 2\nassert solution(\"01 07\") == 0\nassert solution(\"11 00\") == 0\nassert solution(\"11 09\") == 0\nassert solution(\"11 23\") == 2\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 23') == 2\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('7') == ''\nassert solution('11') == '7'\nassert solution('13') == '7'\nassert solution('17') == '7'\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 23') == 2\nassert solution('01 07') == 0\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 23\") == \"2\"\nassert solution(\"01 07\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 23') == 2\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 11\") == \"2\"\nassert solution(\"01 07\") == \"0\"\nassert solution(\"11 23\") == \"2\"\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 23') == '2'\nassert solution('01 07') == '0'\n\"\"\"\nimport sys"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 23\") == \"2\"\nassert solution(\"01 07\") == \"0\""
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6 3 2 4''') == '5'\nassert solution('''6 3 1 3''') == '1'\nassert solution('''5 2 1 5''') == '0'\nassert solution('''5 2 1 2''') == '1'\nassert solution('''5 2 1 2''') == '1'\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5 2 1 5\n''') == '0'\n\nassert solution('''\n6 3 1 3\n''') == '1'\n\nassert solution('''\n6 3 2 4\n''') == '5'\n\nassert solution('''\n6 3 2 4\n''') == '5'\n\nassert solution('''\n6 3 2 4\n''') == '5'"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"5 2 1 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3 1 3''') == '1'\nassert solution('''6 3 1 3''') == '0'\nassert solution('''6 3 6 4''') == '0'\nassert solution('''6 3 2 4''') == '5'\nassert solution('''6 3 2 3''') == '0'\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 2 4\") == 5\nassert solution(\"6 3 1 3\") == 1\nassert solution(\"5 2 1 5\") == 0\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1 5\\n\") == \"0\"\nassert solution(\"6 3 1 3\\n\") == \"1\"\nassert solution(\"5 2 1 5\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3 2 4') == '5'\nassert solution('6 3 1 3') == '1'\nassert solution('5 2 1 5') == '0'\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n\") == \"2\\n3\\n-1\\n\"\n\"\"\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11') == '2'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11') == '2\\n3\\n-1'\nprint('Test passed')"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\") == \"2\"\nassert solution(\"1 100\\n2 15\\n10 11\\n14 100\") == \"-1\"\nassert solution(\"1 100\\n2 15\\n10 11\\n14 100\") == \"3\"\n\"\"\""
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 5\\n4 9\\n8 1\") == '2'\nassert solution(\"2 3\\n6 4\\n7 2\") == '-1'\nassert solution(\"3 3\\n1 2\\n1 2\\n3 1\") == '-1'\nassert solution(\"1 2\\n1 2\\n1 2\\n2 1\") == '3'\n\"\"\""
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\") == \"2\"\n\nassert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\") == \"3\"\n\nassert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11') == '2'\nassert solution('3\\n10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11') == '3'\nassert solution('3\\n10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11') == '-1'\nassert solution('3\\n10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11') == '2'\nassert solution('3\\n10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11') == '3'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\") == \"2\"\n\nassert solution(\"4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\") == \"-1\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\") == \"2\"\nassert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\") == \"3\"\nassert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\") == \"-1\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\") == '2'\nassert solution(\"3\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == '4'\nassert solution(\"8 1\") == '5'\n\"\"\""
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"4\"\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2') == '4'\nassert solution('8 1') == '5'\n\nprint(solution(input()))\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2') == '4'\n\"\"\"\n\nn, m = map(int, stdin.split())\n\nbarn = [m]\n\nfor i in range(1, n + 1):\n    m -= barn[-1]\n    if m >= 0:\n        barn.append(m)\n    else:\n        m += barn[0]\n        barn.append(m)\n\nprint(len(barn) - 1)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5, 2) == 4\n\"\"\"\n\nn, m = map(int, stdin.readline().split())"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == '4'\nassert solution('8 1') == '5'\nassert solution('10 18') == '7'\nassert solution('10 10') == '1'\nassert solution('10 10') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == 4\n\n\"\"\""
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"8 1\") == \"5\"\n\"\"\""
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2') == 4\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1s 2s 3s\") == \"0\"\nassert solution(\"9m 9m 9m\") == \"0\"\nassert solution(\"3p 9m 2p\") == \"1\"\nassert solution(\"1p 2p 3p\") == \"0\"\nassert solution(\"1s 2s 3s\") == \"0\"\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9m 9m 9m\") == 0\nassert solution(\"3p 9m 2p\") == 1\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1s 2s 3s\") == \"0\"\nassert solution(\"9m 9m 9m\") == \"0\"\nassert solution(\"3p 9m 2p\") == \"1\"\nassert solution(\"1p 9m 2p\") == \"1\"\nassert solution(\"1m 2m 3m\") == \"0\"\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3p 9m 2p\") == \"1\"\nassert solution(\"1s 2s 3s\") == \"0\"\nassert solution(\"1m 2m 3m\") == \"0\"\nassert solution(\"9m 9m 9m\") == \"0\"\nassert solution(\"9m 9m 9p\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9m 9m 9m\") == 0\nassert solution(\"3p 9m 2p\") == 1\n\"\"\"\n\nimport sys\nimport re\n\nstdin = sys.stdin"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1m 2m 3m') == 0\nassert solution('9m 9m 9m') == 0\nassert solution('3p 9m 2p') == 1\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1s 2s 3s\") == 0\nassert solution(\"9m 9m 9m\") == 0\nassert solution(\"3p 9m 2p\") == 1\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1s 2s 3s\") == 0\nassert solution(\"9m 9m 9m\") == 0\nassert solution(\"3p 9m 2p\") == 1\nassert solution(\"9m 9m 9m\") == 0"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1m 2m 3m\") == 0\nassert solution(\"9m 9m 9m\") == 0\nassert solution(\"3p 9m 2p\") == 1\nassert solution(\"9m 9m 9m\") == 0\nassert solution(\"1m 2m 3m 4m\") == 0\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1m 9m 2m 3m') == 0\nassert solution('1s 9s 2s 3s') == 0\nassert solution('3p 9m 2p') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 2\\n1 1 1 1\") == \"1\\n\"\nassert solution(\"3\\n2 2\\n2 1 1 1\") == \"2\\n\"\nassert solution(\"3\\n2 2\\n1 0 0 1\") == \"2\\n\"\nassert solution(\"3\\n2 2\\n1 0 0 0\") == \"1\\n\"\nassert solution(\"3\\n2 2\\n1 0 0 0\") == \"2\\n\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n3 1 3 2\\n1 2 2 2\") == \"1\"\nassert solution(\"4 2\\n3 1 3 2\\n1 2 2 1\") == \"2\"\nassert solution(\"4 2\\n3 1 3 2\\n1 1 2 2\") == \"2\"\nassert solution(\"4 2\\n3 1 3 2\\n1 0 0 1\") == \"2\"\nassert solution(\"4 3\\n1 1 1 1\\n1 1 2 2\\n1 0 0 0\") == \"1\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3 2\\n3 1 3 2\\n1 2 2 2') == '1'\nassert solution('3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0') == '2'\nassert solution('3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0') == '-1'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"2\n3 2\n3 1 3 2\n1 2 2 2\n1 0 0 1\"\"\") == \"1\"\n\nassert solution(\"\"\"3\n10 10\n1 2 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\"\"\") == \"2\"\n\nassert solution(\"\"\"3\n10 10\n1 2 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n2 1 1 1\n1 0 0 0\"\"\") == \"2\"\n\nassert solution(\"\"\"2\n2\n1 1 1 1\n1 1 1 1\n1 1 1 1\"\"\") == \"1\"\n\nassert solution(\"\"\"3\n10 10\n1 2 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n1 2 2 1\n1 0 0 0\n2 1 1 1\n1 0 0 0\n1 2 1 1\"\"\") == \"2\""
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 1\") == \"1\"\nassert solution(\"3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 0\") == \"2\"\nassert solution(\"2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\") == \"2\"\n\n\"\"\"\n\nfrom collections import Counter\n\nd = int(input())\nn, m = map(int, input().split())\nsofas = []\nfor _ in range(d):\n    x1, y1, x2, y2 = map(int, input().split())\n    sofas.append((x1, y1, x2, y2))\n\nsofa_colors = Counter(sofas)\n\ncnt_l = int(input())\ncnt_r = int(input())\ncnt_t = int(input())\ncnt_b = int(input())"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n3 1 3 2\") == \"1\"\nassert solution(\"2 2\\n2 1 1 1\") == \"1\"\nassert solution(\"3 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == \"2\"\nassert solution(\"2 10\\n2 1 1 1\\n1 2 2 2\") == \"2\"\nassert solution(\"3 10\\n2 1 1 1\\n5 5 6 5\\n6 4 5 4\") == \"-1\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 1\") == \"1\"\nassert solution(\"3 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == \"2\"\nassert solution(\"3 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == \"2\"\nassert solution(\"1\\n0 0\") == \"-1\"\nassert solution(\"1\\n0 0\\n0 1\") == \"-1\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n1 2 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\"\"\") == \"2\"\n\nassert solution(\"\"\"4\n1 2 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\"\"\") == \"1\"\n\nassert solution(\"\"\"5\n1 1 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n2 1 2 0\"\"\") == \"2\"\n\nassert solution(\"\"\"6\n1 1 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n2 1 2 0\n3 3 3 3\n1 1 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n2 1 2 0\n3 3 3 3\"\"\") == \"3\"\n\nassert solution(\"\"\"7\n1 1 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n2 1 2 0\n3 3 3 3\n1 1 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n2 1 2 0\n3 3 3 3\n1 1 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n2 1 2 0\n3 3 3 3\"\"\") == \"4\""
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 1\") == \"1\"\nassert solution(\"2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\") == \"2\"\nassert solution(\"2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\") == \"2\"\nassert solution(\"1\\n1 1\") == \"1\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\\n\") == \"2\"\nassert solution(\"3 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\\n\") == \"2\"\nassert solution(\"3 10\\n1 1 1 1\\n1 2 2 2\\n1 0 0 0\\n\") == \"-1\"\nassert solution(\"2 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\\n\") == \"2\"\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(14) == '4 4'\nassert solution(2) == '0 2'\nassert solution(1) == '0 1'\n\"\"\"\n\ndays = int(input())\n\nprint(0, days - 1)\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('14') == '4 4'\nassert solution('2') == '0 2'\nassert solution('5') == '1 1'\nassert solution('3') == '0 0'\nassert solution('7') == '1 1'\n\"\"\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2) == \"0 2\"\nassert solution(14) == \"4 4\"\n\nprint(solution(int(input())))\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('14') == '4 4'\nassert solution('2') == '0 2'\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"14\") == \"4 4\"\nassert solution(\"2\") == \"0 2\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"14\") == \"4 4\"\nassert solution(\"2\") == \"0 2\"\n\"\"\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('14') == '4 4'\nassert solution('2') == '0 2'\n\"\"\""
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('14') == '4 4'\nassert solution('2') == '0 2'\n\"\"\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"14\") == \"4 4\"\n\"\"\"\n\ndays = int(input())"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"14\") == \"4 4\"\nassert solution(\"2\") == \"0 2\""
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3 12 15\") == \"39\"\n\"\"\"\n\nn, a, b, p, q = [int(i) for i in stdin.split()]"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3 12 15\") == \"39\"\n\"\"\"\n\nn, a, b, p, q = (int(i) for i in input().split())\n\nprint(n * (p * (n // a) + q * (n // b)) + (n // a) * p * n % a)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3 12 15') == '39'\n\n\"\"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 12 15\") == \"39\"\nassert solution(\"20 2 3 3 5\") == \"51\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 3 12 15') == '39'\nassert solution('20 2 3 3 5') == '51'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3 12 15\") == '39'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5, 2, 3, 12, 15) == 39\nassert solution(20, 2, 3, 3, 5) == 51\nprint('All tests passed.')"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3 12 15\") == \"39\"\n\"\"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(r'5 2 3 12 15') == '39'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3 12 15\") == \"39\"\n\nassert solution(\"20 2 3 3 5\") == \"51\"\n\nprint('Test success.')\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10GGSGGSGG\") == \"7\"\nassert solution(\"4SSS\") == \"0\"\nassert solution(\"3SSS\") == \"0\"\n\"\"\""
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('GGGSGGGSGG') == '7'\nassert solution('SSS') == '0'\nassert solution('GGGG') == '4'\n\"\"\""
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"GGG\") == \"3\"\nassert solution(\"SSS\") == \"0\"\nassert solution(\"GGGGGGGSG\") == \"7\"\nassert solution(\"SSSSSSSS\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\nGGGG\\n') == '7'\nassert solution('4\\nGGGG\\n') == '4'\nassert solution('3\\nSSS\\n') == '0'\nassert solution('100\\nSSSSSSSSSS\\n') == '20'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10G\") == \"7\"\nassert solution(\"10S\") == \"0\"\nassert solution(\"10GGG\") == \"7\"\nassert solution(\"10GSSS\") == \"7\"\nassert solution(\"10SSSS\") == \"0\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\nGGGG\\n\") == \"7\"\nassert solution(\"4\\nGGGG\\n\") == \"4\"\nassert solution(\"3\\nSSS\\n\") == \"0\"\nprint(solution(\"3\\nSSS\\n\"))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"7\"\nassert solution(\"4\") == \"4\"\nassert solution(\"3\") == \"0\""
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10GGGSGGS\") == \"7\"\nassert solution(\"4SSS\") == \"0\"\nassert solution(\"1SSS\") == \"0\"\nassert solution(\"1S\") == \"0\"\nassert solution(\"3GGG\") == \"2\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10GGGSGGS\") == '7'\nassert solution(\"4GGG\") == '4'\nassert solution(\"3SSS\") == '0'\nassert solution(\"1S\") == '0'\nassert solution(\"2GGGG\") == '0'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nGGGG\\n\") == \"0\"\nassert solution(\"10\\nGGGG\\n\") == \"7\"\nassert solution(\"5\\nSSSS\\n\") == \"0\"\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n1 2\n1 3''') == '5'\nassert solution('''9 3\n3 9 5\n0\n0\n3 9 4 5\n0\n0\n1 8\n1 6\n1 2\n2 1 2''') == '6'\nassert solution('''4 2\n2 1\n1 4\n1 5''') == '-1'\nassert solution('''6 3\n1 2\n1 3\n0\n1 1\n1 1\n1 1''') == '-1'\n\n-----"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"5\"\n\nassert solution(\"4 3\") == \"3\"\n\nassert solution(\"9 3\") == \"6\"\n\nassert solution(\"9 2\") == \"-1\"\n\nassert solution(\"10 10\") == \"10\""
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5') == '5\\n1 2 3 4 5'\nassert solution('9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\\n') == '6\\n1 2 9 4 5 3'\nassert solution('3 3\\n1 2 3\\n1 2\\n1 3\\n1 1') == '-1'\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5') == '5\\n1 2 3 4 5'\nassert solution('9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2') == '6\\n1 2 9 4 5 3'\nassert solution('3 3\\n1 2 3\\n1 2\\n1 3\\n1 1') == '-1'\nassert solution('1 3\\n1 1') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 3\\n1 2\\n2 2\\n2 1\\n1 1\\n1 3\") == \"6\\n1 2 3 4 5\"\nassert solution(\"6 2\\n4 2\\n0\\n1 2\\n1 4\\n2 1\\n2 3\\n3 1\\n3 4\\n4 3\") == \"5\\n1 2 3 4 5\"\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\") == \"6\\n1 2 9 4 5 3\"\nassert solution(\"3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\") == \"-1\"\n\"\"\"\n\nn, k = map(int, input().split())\n\na = list(map(int, input().split()))\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 3 1\\n0\") == \"1 2 3 1\"\nassert solution(\"4 2\\n1 2 3 4\\n0\") == \"1 2 3 4\"\nassert solution(\"4 2\\n1 2 3 4\\n0\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n1 3\\n4 5\\n2 4\\n1 5\\n5 3\\n4 6\\n5 6\\n2 3\") == \"5\\n1 3 4 5\"\nassert solution(\"8 3\\n1 3\\n2 3\\n4 5\\n5 6\\n5 7\\n5 8\\n2 6\\n3 7\\n6 8\") == \"6\\n1 3 5 7 8\"\nassert solution(\"9 3\\n0\\n0\\n3 9\\n3 8\\n1 7\\n2 7\\n6 6\\n4 5\\n5 5\\n7 5\\n4 9\\n5 8\\n8 9\") == \"5\\n1 2 3 6 9\"\nassert solution(\"9 3\\n0\\n0\\n3 9\\n3 8\\n1 7\\n2 7\\n6 6\\n4 5\\n5 5\\n7 5\\n4 9\\n5 8\\n8 9\") == \"6\\n1 3 5 7 9\"\nassert solution(\"9 3\\n0\\n0\\n3 9\\n3 8\\n1 7\\n2 7\\n6 6\\n4 5\\n5 5\\n7 5\\n4 9\\n5 8\\n8 9\") == \"5\\n1 2 3 6 9\"\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2\\n0\\n0\\n1 1\\n1 2\\n') == '3\\n1 2 9 4 5\\n'\nassert solution('2 2\\n1 2\\n0\\n0\\n') == '-1\\n'\nassert solution('3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\\n') == '-1\\n'"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2\\n1 3\\n1 5\\n1 6\\n1 7\\n3 4\\n4 5\\n4 6\") == \"7\\n1 2 3 4 5 6\"\nassert solution(\"5 2\\n1 4\\n1 5\\n2 3\\n3 4\\n4 5\\n4 5\\n4 5\") == \"-1\"\nassert solution(\"5 2\\n1 4\\n1 5\\n2 3\\n3 4\\n4 5\\n4 5\\n4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"5 3\\n1 4\\n1 5\\n2 3\\n3 4\\n4 5\\n4 5\\n4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"4\\n1 2 3 4\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n3 2 1') == '3 2 1 5 4'\nassert solution('5 1\\n3') == '3 2 1 5 4'\nassert solution('5 2\\n3 4') == '-1'"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n3 2 1') == '3 2 1 5 4'\nassert solution('5 1\\n3') == '3 2 1 5 4'\nassert solution('5 2\\n3 4') == '-1'"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"5 3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"5 1 3\") == \"3 2 1 5 4\"\nassert solution(\"5 2 3\") == \"3 2 1 5 4\"\nassert solution(\"5 3 1\") == \"3 2 1 5 4\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"5 3\\n2 3 1\") == \"3 2 1 5 4\"\nassert solution(\"5 1\\n3\") == \"3 2 1 5 4\"\nassert solution(\"5 2\\n3 4\") == \"3 2 1 5 4\"\nassert solution(\"5 2\\n1 4\") == \"1 4 3 2 5\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2') == '3 1 2 4'\nassert solution('3 2 1') == '2 3 1'\nassert solution('5 3') == '-1'\nassert solution('5 2') == '-1'\nassert solution('4 3') == '4 3 1 2'\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"5 3\\n2 3 1\") == -1\nassert solution(\"5 1\\n3\") == \"3 2 1 5 4\"\nassert solution(\"5 2\\n3 4\") == -1"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"5 3\\n2 3 1\") == \"-1\"\nassert solution(\"5 1\\n3\") == \"3 2 1 5 4\"\nassert solution(\"5 2\\n3 4\") == \"-1\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1 2 3 4 5 5\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"5 3\\n2 3 1\") == \"3 2 1 5 4\"\nassert solution(\"5 1\\n3\") == \"3 2 1 5 4\"\nassert solution(\"5 2\\n3 4\") == \"3 2 1 5 4\"\nassert solution(\"5 5\\n3 4\") == \"3 2 1 5 4\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n3 2 1') == '3 2 1 5 4'\nassert solution('5 1\\n3') == '3 2 1 5 4'\nassert solution('5 2\\n3 4') == '-1'\nassert solution('5 2\\n1 3') == '1 3 2 5 4'\nassert solution('5 2\\n1 2') == '1 2 3 5 4'\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n3 2 1') == '3 2 1 5 4'\n\nassert solution('5 1\\n3') == '3 2 1 5 4'\n\nassert solution('5 2\\n3 4') == '-1'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 7 3\") == 'YES'\nassert solution(\"10 10 0\") == 'YES'\nassert solution(\"1 -4 5\") == 'NO'\nassert solution(\"0 60 50\") == 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 -4 5') == 'NO'\nassert solution('1 7 3') == 'YES'\nassert solution('0 60 50') == 'NO'"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"1 -4 5\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\n\n'''\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 -4 5') == 'NO'\nassert solution('1 7 3') == 'YES'\nassert solution('1 7 3') == 'YES'\nassert solution('1 7 3') == 'YES'\nassert solution('10 10 0') == 'YES'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 7 3') == 'YES'\nassert solution('10 10 0') == 'YES'\nassert solution('1 -4 5') == 'NO'\nassert solution('0 60 50') == 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"1 -4 5\") == \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"1 -4 5\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"1 -4 5\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"1 -4 5\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"1 -4 5\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4') == 1\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == 1\nassert solution(\"(()())()\") == 1\nassert solution(\"(()())()(()())\") == 1\nassert solution(\"(()())()(()())\") == 1\nassert solution(\"(()())()(()())\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"((()))\") == \"1\"\nassert solution(\"(()())\") == \"1\"\nassert solution(\"((()()))\") == \"1\"\nassert solution(\"(((((())(((()())))(()((((())))((())(())))(((((()()))(())))((()((())(((())))))(((((((((((((((((((((((())))))))))())()())(())())((()((()())))(()((())(()))))))))))))))(()))(()))))(()))(()))(())())((()(()()))())((((((((((((((((((((((((((((((((((((((())))))))))))))())()())(())())((()((()())))(()((())(()))))))))))))))(((()))(())))((()((())))(((())(())))(((((())))((())(())))(((((()())(())())((()((()())))(((()((())))((())(())))((()((())(())))))))((()((())(((())(((()((())))))))((((()()((((()(((((((((((((((((((())))))))))))))())()())(())())((()((()())))(((()((())))(((()((())))())))((((((()))))(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n4\\n3\\n') == '1'\nassert solution('2\\n1\\n4\\n1\\n') == '0'\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(()()(()((()()()())))\") == \"1\"\nassert solution(\"\") == \"1\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(()()())\") == 1\nassert solution(\"(()())((()()))\") == 1\nassert solution(\"(()(()))\") == 1\nassert solution(\"()((()))()(((()))(((()()(()(()(()()))))))\") == 1\nassert solution(\"(()(()))\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(1)(2)\") == \"1+2\"\nassert solution(\"()\") == \"1+1\"\nassert solution(\"(()())\") == \"1+2+2\"\nassert solution(\"(()())((()()))\") == \"1+2+2+3\"\nassert solution(\"()(\") == \"1+1+1\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"1\"\nassert solution(\"0\\n0\\n0\\n0\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n\") == \"0\"\nassert solution(\"0\\n1\\n0\\n0\\n0\") == \"1\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"0\"\n\nassert solution(\"2 3 4 1\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5 6\") == \"1\"\nassert solution(\"1 2 3 4 5 7\") == \"1\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 4 3\") == \"1\"\nassert solution(\"0 0 0 0\") == \"1\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"0\"\nassert solution(\"1 2 3 4 6\") == \"0\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 5 3') == 3\nassert solution('10 5 7') == 5\nassert solution('10 5 12') == 3\n\n\n\"\"\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 5 3\") == 3\n\"\"\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5 3\") == \"3\"\nassert solution(\"10 5 7\") == \"5\"\nassert solution(\"10 5 12\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 5 3\") == 3\nassert solution(\"10 5 7\") == 5\nassert solution(\"10 5 12\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 5 3\") == 3\nassert solution(\"10 5 7\") == 5\nassert solution(\"10 5 12\") == 3\nassert solution(\"10 5 10\") == 5\nassert solution(\"10 5 0\") == 0\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5 3\") == 3\n\"\"\""
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 5 3') == '3'\nassert solution('10 5 7') == '5'\nassert solution('10 5 12') == '3'\nassert solution('10 10 5') == '0'\nassert solution('10 10 10') == '10'\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 5 3\") == 3\nassert solution(\"10 5 7\") == 5\nassert solution(\"10 5 12\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 5 3') == '3'\nassert solution('10 5 7') == '5'\nassert solution('10 5 12') == '3'\n\"\"\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 5 3\") == \"3\"\nassert solution(\"10 5 7\") == \"5\"\nassert solution(\"10 5 12\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cab') == 'abc'\nassert solution('acdb') == 'abdc'\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cab\") == \"abc\"\nassert solution(\"acdb\") == \"abdc\"\n\n\"\"\""
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cab\") == \"abc\"\nassert solution(\"acdb\") == \"abdc\"\n\nprint(solution(\"acdb\"))\n\"\"\"\n\ns = input()\nt = ''\nu = ''\n\nfor i in s:\n    t += i\n    u = i + u\n\nprint(u)"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cab') == 'abc'\nassert solution('acdb') == 'abdc'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cab\") == \"abc\"\nassert solution(\"acdb\") == \"abdc\"\nassert solution(\"aaabbbaccc\") == \"abacbcaa\"\nassert solution(\"z\") == \"z\"\nassert solution(\"aba\") == \"aba\"\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cab\") == \"abc\"\nassert solution(\"acdb\") == \"abdc\"\nassert solution(\"avc\") == \"avc\"\nassert solution(\"bv\") == \"bv\"\nassert solution(\"c\") == \"c\"\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cab') == 'abc'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cab\") == \"abc\"\nassert solution(\"acdb\") == \"abdc\""
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cab') == 'abc'\nassert solution('acdb') == 'abdc'\n\"\"\"\n\ns = input()\n\nt = s\n\nu = ''\n\nfor i in range(len(t)):\n    u += t[i] + s[0]\n    u += t[-1 - i] + s[-1]\n    u += s[0]\n    u += s[-1]\n    if len(u) > len(s):\n        break\n\nprint(u)"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cab') == 'abc'\nassert solution('acdb') == 'abdc'\nassert solution('ccccc') == 'c'\n\"\"\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2\\n2 1\\n1 0\") == \"NO\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\") == \"NO\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\") == \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"NO\"\nassert solution(\"4\\n2\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"NO\"\nassert solution(\"3\\n2\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"NO\"\nassert solution(\"4\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"NO\"\nassert solution(\"5\\n4\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\") == \"NO\"\nassert solution(\"3\\n1 1\") == \"YES\"\nassert solution(\"3\\n1 2\") == \"NO\"\nassert solution(\"3\\n2\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 0\\n2 3\\n3\\n1 0\") == \"YES\"\nassert solution(\"3\\n0 0\\n2 3\\n4\\n0 0\") == \"NO\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3\\n0 0\\n1 1\\n0 2\\n2\\n1 0\\n2 1') == 'NO'\nassert solution('2\\n3\\n0 0\\n1 1\\n0 2\\n2\\n1 0\\n2 1') == 'YES'\nassert solution('1\\n2\\n1 0\\n2 1') == 'NO'\nassert solution('2\\n3\\n0 0\\n1 1\\n0 2\\n2\\n1 0\\n2 1') == 'YES'\nassert solution('2\\n3\\n0 0\\n1 1\\n0 2\\n2\\n1 0\\n2 1') == 'YES'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n3\n0 0\n1 1\n1 2\n''') == 'NO'\n\nassert solution('''\n6\n3\n0 0\n1 1\n1 2\n2\n1 0\n1000 3\n4\n10 1\n15 2\n10 2\n15 2\n1\n765 432\n2\n4 4\n4 3\n5\n0 0\n1 0\n1 0\n1 0\n1 0\n''') == 'NO'\n\nassert solution('''\n3\n4\n10 1\n15 2\n10 2\n15 2\n1\n765 432\n2\n4 4\n4 3\n5\n0 0\n1 0\n1 0\n1 0\n1 0\n''') == 'YES'\n\nassert solution('''\n1\n1\n1\n1\n1\n1\n''') == 'YES'\n\nassert solution('''\n2\n3\n2\n2\n2\n2\n''') == 'YES'"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 0\\n2 0\\n3 1\\n4 2\\n5 3\") == \"NO\"\nassert solution(\"6\\n1 0\\n2 0\\n3 1\\n4 2\\n5 2\\n6 2\") == \"YES\"\nassert solution(\"4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n15 2\\n10 2\\n15 2\") == \"NO\"\nassert solution(\"7\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\") == \"YES\"\nassert solution(\"6\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n15 2\\n10 2\\n15 2\") == \"NO\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\") == \"YES\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\") == \"NO\"\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n1 2\\n2\") == \"NO\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\") == \"NO\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\") == \"NO\"\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('1\\n0') == 'NO'\nassert solution('2\\n4 4') == 'NO'\nassert solution('3\\n4 3') == 'YES'\nassert solution('4\\n5') == 'NO'\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"05:39\") == 11\nassert solution(\"13:31\") == 0\nassert solution(\"23:59\") == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"05:39\") == 11\nassert solution(\"13:31\") == 0\nassert solution(\"23:59\") == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"05:39\") == 11\nassert solution(\"13:31\") == 0\nassert solution(\"23:59\") == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"05:39\"\n) == 11\n\nassert solution(\n    \"13:31\"\n) == 0\n\nassert solution(\n    \"23:59\"\n) == 1\n\nprint(\"Tests passed.\")"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('05:39') == 11\nassert solution('13:31') == 0\nassert solution('23:59') == 1\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('23:59') == '1'\nassert solution('05:39') == '11'\nassert solution('13:31') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"05:39\") == 11\nassert solution(\"13:31\") == 0\nassert solution(\"23:59\") == 1"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('05:39') == 11\nassert solution('13:31') == 0\nassert solution('23:59') == 1\n\n\"\"\""
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"05:39\") == \"11\"\nassert solution(\"13:31\") == \"0\"\nassert solution(\"23:59\") == \"1\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('05:39') == 11\nassert solution('13:31') == 0\nassert solution('23:59') == 1\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 2 3'\nassert solution('3 2 1') == '2 3 1'\nassert solution('1 3 2') == '2 1 3'\nassert solution('3 2 1 2') == '2 1 3'\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 1 3 2') == '3'\n\nassert solution('6 5 4 3 2 1') == '5'\n\nassert solution('7 6 5 4 3 2 1') == '6'\n\nassert solution('1 6 5 3 4 7 2') == '6'\n\nimport math\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(samples.split('\\n')[0]) == samples.split('\\n')[1]\n\nsolution(stdin)\n\n\n\n\"\"\""
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n4 5 1 3 2') == '3'\nassert solution('7\\n1 6 5 3 4 7 2') == '6'\nassert solution('6\\n6 5 4 3 2 1') == '5'\n\nassert solution('5\\n1 3 2 4') == '1'\nassert solution('7\\n3 6 5 4 7 2') == '6'\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 5 1 3 2\") == \"3\"\nassert solution(\"7\\n1 6 5 3 4 7 2\") == \"6\"\nassert solution(\"6\\n6 5 4 3 2 1\") == \"5\"\nprint('Passed')"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 5 1 3 2\") == \"3\"\nassert solution(\"7\\n1 6 5 3 4 7 2\") == \"6\"\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\nseq = list(map(int, input().split()))\ndic = Counter(seq)\nmin, max = min(seq), max(seq)\nmin_cnt = dic[min]\nmax_cnt = dic[max]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n4 5 1 3 2') == '3'\nassert solution('7\\n1 6 5 3 4 7 2') == '6'\nassert solution('6\\n6 5 4 3 2 1') == '5'\n\nfrom typing import Any, Union\n\na: List[Any] = list(stdin)\na[0] = int(a[0])\na = list(map(int, a))\na.sort()\nprint(abs(a[0] - a[len(a) - 1]))\n\n-----\n\n[1, 5, 3, 2, 4, 6]\n\n[1, 5, 4, 3, 2, 6]\n\n[1, 5, 4, 3, 2, 6]\n\n[1, 5, 4, 3, 2, 6]\n\n[1, 5, 4, 3, 2, 6]\n\n-----"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1 3 2\") == 3\nassert solution(\"6 5 4 3 2 1\") == 5\n\"\"\""
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 1 3 2\") == \"3\"\nassert solution(\"1 6 5 3 4 7 2\") == \"6\"\nassert solution(\"6 5 4 3 2 1\") == \"5\"\n\"\"\"\nimport sys"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1 3 2\") == \"3\"\nassert solution(\"7 6 5 4 3 2 1\") == \"6\"\nassert solution(\"6 5 4 3 2 1\") == \"5\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('oXoxoXo') == 'TAK'\nassert solution('bod') == 'TAK'\nassert solution('ER') == 'NIE'\nassert solution('abac') == 'TAK'\nassert solution('abb') == 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"TAK\"\nassert solution(\"ER\") == \"NIE\""
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"TAK\"\nassert solution(\"ER\") == \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"TAK\"\nassert solution(\"ER\") == \"NIE\"\n\"\"\""
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"TAK\"\nassert solution(\"ER\") == \"NIE\"\nassert solution(\"abcba\") == \"NIE\"\nassert solution(\"abcbcba\") == \"NIE\"\n\"\"\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == \"TAK\"\nassert solution(\"aabb\") == \"TAK\"\nassert solution(\"abcba\") == \"TAK\"\nassert solution(\"abbb\") == \"NIE\"\n\"\"\""
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('oXoxoXo') == 'TAK'\nassert solution('bod') == 'TAK'\nassert solution('ER') == 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aa\") == \"NIE\"\nassert solution(\"aaa\") == \"NIE\"\nassert solution(\"oHo\") == \"TAK\"\nassert solution(\"aabaa\") == \"NIE\"\nassert solution(\"aba\") == \"TAK\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"TAK\"\nassert solution(\"ER\") == \"NIE\"\n\"\"\""
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"TAK\"\nassert solution(\"ER\") == \"NIE\"\n\"\"\""
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"213\"\nassert solution(\"3921\") == \"9321\"\nassert solution(\"4940\") == \"4940\"\n\"\"\"\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123', '222') == '213'\nassert solution('3921', '10000') == '9321'\nassert solution('4940', '5000') == '4940'\n\na, b = map(int, stdin.split())\nprint(*sorted(a, key=lambda x: int(x))[:b], sep='')\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123', '222') == '213'\n\"\"\"\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123', '222') == '213'\nassert solution('3921', '10000') == '9321'\nassert solution('4940', '5000') == '4940'\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123', '222') == '213'\nassert solution('3921', '10000') == '9321'\nassert solution('4940', '5000') == '4940'\n\nimport unittest\nimport random\nimport sys\n\n\nclass TestSolution(unittest.TestCase):\n    def test_simple(self):\n        self.assertEqual(solution('123', '222'), '213')\n        self.assertEqual(solution('3921', '10000'), '9321')\n        self."
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123\", \"222\") == \"213\"\nassert solution(\"3921\", \"10000\") == \"9321\"\nassert solution(\"4940\", \"5000\") == \"4940\"\n\nsolution(\"123\", \"222\") == \"213\"\nsolution(\"3921\", \"10000\") == \"9321\"\nsolution(\"4940\", \"5000\") == \"4940\"\n\"\"\""
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123\", \"222\") == \"213\"\nassert solution(\"3921\", \"10000\") == \"9321\"\nassert solution(\"4940\", \"5000\") == \"4940\"\n\"\"\"\n\nfrom typing import Callable, List\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123\", \"222\") == \"213\"\nassert solution(\"3921\", \"10000\") == \"9321\"\nassert solution(\"4940\", \"5000\") == \"4940\"\nassert solution(\"3321\", \"3222\") == \"3312\"\nassert solution(\"12\", \"222\") == \"21\"\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123\", \"222\") == \"213\"\nassert solution(\"3921\", \"10000\") == \"9321\"\nassert solution(\"4940\", \"5000\") == \"4940\"\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123\") == \"213\"\n\nassert solution(\"3921\") == \"9321\"\n\nassert solution(\"4940\") == \"4940\"\nassert solution(\"5000\") == \"5000\"\nassert solution(\"123\") == \"213\"\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"XX.XX.....\\n.....OOOO.\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == \"YES\"\nassert solution(\"XXOXX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == \"NO\"\n\"\"\"\n\n\nimport unittest\nimport sys\nimport io\n\nDEBUG_MODE = False"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"XX.XX.....\\n\"\n\".....OOOO.\"\n\"..........\\n\"\n\"..........\\n\"\n\"..........\\n\"\n\"..........\\n\"\n\"..........\\n\"\n\"..........\\n\"\n\"..........\\n\"\n\"..........\") == \"YES\"\nassert solution(\n\"XXOXX.....\\n\"\n\"OO.O......\\n\"\n\"..........\\n\"\n\"..........\\n\"\n\"..........\\n\"\n\"..........\\n\"\n\"..........\\n\"\n\"..........\\n\"\n\"..........\") == \"NO\"\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('XXXOO.....') == 'NO'\nassert solution('XXOXXOO.O..') == 'YES'\n\n\"\"\""
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"XX.XX.....\") == \"YES\"\nassert solution(\"XXOXX.....\") == \"NO\"\nassert solution(\"......OO....O\") == \"YES\"\nassert solution(\"XOXOXOXOX.O\") == \"YES\"\nassert solution(\"....XO.X.XO.O.O\") == \"NO\"\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''XX.XX.....\n.....OOOO.\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n''') == 'YES'\n\nassert solution('''XXOXX.....\nO.O......\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n''') == 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"XX.XX.....\\n.....OOOO.\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n\") == \"YES\"\n\nassert solution(\"XXOXX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"XXOXX.\\n..O....\\n....O..\\nO.X.XO.\\n....O..\\n....O..\\n....O..\\n....O..\\n....O..\\n....O..\\n....O..\") == \"NO\"\nassert solution(\"XX.XX.\\n..O.O.\\n....O\\n..O.O\\nX.X.X\\n..O.O\\n....O\\n..O.O\\n....O\\n....O\") == \"NO\"\nassert solution(\"XXOXXO\\n..O.X.\\n....O\\n.O.X.\\n.O.X.\\n....O\\nO.X.\\nX.X.\\nX.X.\") == \"NO\"\nassert solution(\"XX.XX.\\n..X.O.\\n....O\\nX.O.X\\nO.O.X\\n..O.X\\n....O\\nO.O.X\\nO.O.X\\nO.O.X\") == \"NO\"\nassert solution(\"XX.XX.\\n..X.O.\\n....O\\nO.X.\\nO.O.\\n....O\\nO.X.\\nX.X.\\nX.X.\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"XX.XX.....\\n.....OOOO.\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == \"YES\"\nassert solution(\"XXOXX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == \"NO\"\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"XXOXX....O\") == \"YES\"\n\"\"\""
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"XX.XX.....\\n.....OOOO.\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == \"YES\"\nassert solution(\"XXOXX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n\") == \"NO\"\n\n\"\"\"\n\nimport os\nimport unittest\n\n\nclass Test(unittest.TestCase):\n\n    def setUp(self) -> None:\n        self.dirname = os.path.dirname(os.path.abspath(__file__))\n\n    def test(self) -> None:\n        with open(os.path.join(self.dirname, \"input.txt\"), \"r\") as infile, open(os.path.join(self.dirname, \"output.txt\"), \"r\") as outfile:\n            values = infile.read().split('\\n')\n            expected = outfile.read().split('\\n')\n            self.assertEqual(solution(values), expected[0])\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1 0\"\nassert solution(\"3 2\") == \"1 0 0\"\nassert solution(\"2 5\") == \"-1\"\nassert solution(\"1 2\") == \"-1\"\n\nprint(\"PASSED\")\n\n\"\"\"\nimport random\nimport time"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1 0\\n0 0'\n\nassert solution('3 2') == '1 0 0\\n0 1 0\\n0 0 0'\n\nassert solution('2 5') == '-1'\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1') == '1 0\\n0 0'\nassert solution('3 2') == '1 0 0\\n0 1 0\\n0 0 0'\nassert solution('4 3') == '1 0 0 0\\n0 1 0 0\\n0 0 2 0\\n0 0 0 0'\nassert solution('2 5') == '-1'\n\nimport sys"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"1 0 0 0 0 0\\n0 1 0 0 0 0\\n0 0 1 0 0 0\\n0 0 0 1 0 0\\n0 0 0 0 1 0\"\nassert solution(\"2 1\") == \"1 0\\n0 0\"\nassert solution(\"3 2\") == \"-1\"\nassert solution(\"1 1\") == \"1\\n\"\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1 0\\n0 0\"\nassert solution(\"3 2\") == \"1 0 0\\n0 1 0\\n0 0 0\"\nassert solution(\"2 5\") == \"1 0 0\\n0 1 0\\n0 0 0\"\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == '1 0\\n0 0'\n\nassert solution(\"3 2\") == '1 0 0\\n0 1 0\\n0 0 0'\n\nassert solution(\"2 5\") == '-1'\n\nassert solution(\"2 0\") == '-1'\n\nassert solution(\"2 1\") == '1 0\\n0 0'"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n0 0') == '1 0\\n0 0'\nassert solution('3 2\\n1 0 0') == '1 0 0\\n0 1 0\\n0 0 0'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n0 0') == '1 0\\n0 0'\nassert solution('3 2\\n0 0 0') == '1 0 0\\n0 1 0\\n0 0 0'\nassert solution('2 5\\n0 0 0') == '-1'\nassert solution('4 3\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1') == '1 1 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1'\n\n\"\"\"\n\nfrom typing import List, Tuple, Union\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n1 0\\n0 0') == '1 0\\n0 0'\nassert solution('3 2\\n1 0 0\\n0 1 0\\n0 0 0') == '1 0 0\\n0 1 0\\n0 0 0'\nassert solution('2 5\\n1 0 0\\n0 1 0\\n0 0 0') == '-1'\n\"\"\"\n\nn, m = map(int, input().split())\narr = [[0 for _ in range(m)] for _ in range(n)]\narr[0][0] = 1\nfor i in range(1, n):\n    arr[i][0] = 1\n    for j in range(1, m):\n        arr[i][j] = arr[i - 1][j] + arr[i][j - 1]\nprint(arr[n - 1][m - 1])\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1 0\\n0 0\") == \"1 0 0\"\n\"\"\"\n\nn, m = map(int, input().split())\narr = []\nfor i in range(n):\n    arr.append([0] * m)\n\nfor i in range(n):\n    for j in range(m):\n        if i == j:\n            arr[i][j] = 1\n        else:\n            arr[i][j] = 0\n\nfor i in range(m):\n    for j in range(n):\n        if i == j:\n            arr[j][i] = 1\n\nfor i in arr:\n    print(*i, sep=\" \")\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2.0 2.0 2.0') == 'x^y^z'\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\nassert solution('1.1 3.4 2.5') == 'z^y^x'"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.1 3.4 2.5') == 'z^y^x'\nassert solution('2.0 2.0 2.0') == 'x^y^z'\nassert solution('1.9 1.8 1.7') == '((x^y)^z)'\n\n'''\n\nimport sys\n\nm = None\nc = None"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.1 3.4 2.5') == 'z^y^x'\nassert solution('2.0 2.0 2.0') == 'x^y^z'\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\nassert solution('4.2 2.5 1.6') == 'z^(x^y)^z'\n\n\"\"\"\n\nimport math\n\nstdin = \"4.2 2.5 1.6\"\n\nx, y, z = (float(i) for i in stdin.split())\n\ns = \"\"\nm = 0\nfor c in range(1, 13):\n    a = math.pow(x, y) * math.pow(z, y) * math.pow(y, x) * math.pow(z, x)\n    if a > m:\n        m = a\n        s = \"z^(x^y)^z\" if c < 10 else \"z^(x^y)^z\"\n    else:\n        s = \"z^(x^y)^z\" if c < 10 else \"z^(x^y)^z\"\n        break\n\ns = \"z^(x^y)^z\"\nprint(s)"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"(x^y)^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"((x^y))^z\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.1 3.4 2.5') == 'z^y^x'\nassert solution('2.0 2.0 2.0') == 'x^y^z'\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\n\n\"\"\"\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1.1 3.4 2.5''') == 'z^y^x'\nassert solution('''2.0 2.0 2.0''') == 'x^y^z'\nassert solution('''1.9 1.8 1.7''') == '((x^y)^z)'\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.1 3.4 2.5') == 'z^y^x'\nassert solution('2.0 2.0 2.0') == 'x^y^z'\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\n\"\"\"\nimport sys"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"(x^y)^z\"\nassert solution(\"1.0 2.0 3.0\") == \"x^y^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"0.1 3.4 2.5\"\n    ) == \"z^y^x\"\nassert solution(\n    \"0.9 0.8 0.7\"\n    ) == \"x^y^z\"\nassert solution(\n    \"1.1 1.8 1.7\"\n    ) == \"(x^y)^z\"\nassert solution(\n    \"1.9 1.8 1.7\"\n    ) == \"(x^y)^z\"\nassert solution(\n    \"1.1 1.1 1.1\"\n    ) == \"x^y^z\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcabca\") == 5\nassert solution(\"aaaaaaaa\") == 8\n\nassert solution(\"abcdefgh\") == 8\nassert solution(\"qwertyuiop\") == 10\n\nassert solution(\"abc\") == 3\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcabca\") == 5\nassert solution(\"aaaaaaaa\") == 4\nassert solution(\"abcdefgh\") == 8\n\"\"\""
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcabca\") == 5\nassert solution(\"aaaaaaaa\") == 4\nassert solution(\"abbccddd\") == 4\nassert solution(\"abc\") == 3\n\"\"\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcabca') == 5\nassert solution('aaaaaaaa') == 8\n\n---\n<div><h1>Problem 8</h1><p>You are given a string of lowercase English letters. You should remove all the consecutive repetitions of the letters. For example, the string <pre>ababccababccccababa</pre> should become <pre>abc</pre>. The given string may contain leading or trailing spaces. There is at least one letter in the given string. </p>\n<p>Write a function:</p>\n<ul>\n    <li>def solution(s: str) -> str</li>\n</ul>\n<p>that, given a string, returns a string without consecutive repetitions of the characters. The function should return the empty string <code>\"\"</code> if the given string is empty or does not contain any letter. The function will always return a string without leading or trailing spaces.\n<p>For example, given <code>s = \"aaabbc\"</code>, the function should return <code>\"abc\"</code>.</p>\n<p>Examples:</p>\n<pre>\nsolution(\"aaabbc\") == &quot;abc&quot;\nsolution(\"abc\") == &quot;abc&quot;\nsolution(\"aabbbc\") == &quot;abc&quot;\nsolution(\"aabbccc\") == &quot;abc&quot;\nsolution(\"adcacddcac\") == &quot;ac&quot;\nsolution(\"ac\") == &quot;c&quot;\nsolution(\"aac\") == &quot;ac&quot;\n</pre>\n<p>Write an efficient algorithm for the following assumptions:</p>\n<ul>\n    <li>the given string is of length less than or equal to <code>10000</code>.</li>\n</ul>\n<p>Copyright 2009\u20132020 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.</p>\n\n<h1>Input</h1>\n\n<p>A string of lowercase English letters.</p>\n\n<h1>Output</h1>\n\n<p>A string of lowercase English letters without consecutive repetitions of the letters.</p>\n\n<h1>Examples</h1>\n\n<pre>\nsolution(\"aaabbc\") == &quot;abc&quot;\nsolution(\"abc\") == &quot;abc&quot;\nsolution(\"aabbbc\") == &quot;abc&quot;\nsolution(\"aabbccc\") == &quot;abc&quot;\nsolution(\"adcacddcac\") == &quot;ac&quot;\nsolution(\"ac\") == &quot;c&quot;\nsolution(\"aac\") == &quot;ac&quot;\n</pre>\n<p>In the first example the string can be typed in 5 operations. The second string can be typed in 4 operations, so the answer is 4. The third string can be typed in 3 operations, so the answer is 3, and the last one in 2 operations.\n\nIn the second example the string can be typed in 4 operations. The third string can be typed in 4 operations, so the answer is 4, and the last one in 2 operations.\n\nIn the third example the string can be typed in 3 operations. The fourth string can be typed in 4 operations, so the answer is 4, and the last one in 2 operations.\n\nIn the fourth example the string can be typed in 3 operations. The fifth string can be typed in 4 operations, so the answer is 4, and the last one in 2 operations.\n\nIn the last example the string can be typed in 2 operations. The sixth string can be typed in 4 operations, so the answer is 4, and the last one in 2 operations.\n\nThe last example is the only one where you can type the string in 2 operations.\n</p>\n\n<h1>Limits</h1>\n\n<ul>\n    <li>length of the given string will be an integer in range <code>[1\u202610000]</code>.</li>\n</ul>\n\n<h1>Notes</h1>\n\n<ul>\n    <li>the given string may contain leading or trailing spaces</li>\n    <li>the given string will contain only lowercase English letters.</li>\n</ul>\n<p>Copyright 2009\u20132020 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.</p>\n\n<h1>Hint</h1>\n\n<p>If you can't be bothered to write the solution, look at the first example. You can notice that the string can be typed in 5 operations if you type all the characters one by one. So, for example, the string <code>aabbccc</code> can be typed in 4 operations if you type the string <code>abc</code> and copy the string. Notice that we can not copy the empty string and we can not copy a string that is longer than <code>s</code>.</p>\n\n<p>How many operations do you need if you copy the string <code>s</code> and type it one by one?</p>\n\n<p>Hint: please note that the string <code>s</code> will contain only lowercase English letters.</p>\n\n<h1>See also</h1>\n\n<ul>\n    <li><a href=\"https://en.wikipedia.org/wiki/Repetition_in_computer_science#Idioms\">Idioms for solving problems in computer science</a> by Tim O'Shea</li>\n    <li><a href=\"https://en.wikipedia.org/wiki/Linear_algebra_set\">Linear algebra set</a> by Tim O'Shea</li>\n</ul>\n\n<h1>Tests</h1>\n<pre>\nInput    Output    Comments\n\"aaabbc\"    \"abc\"    Yes\n\"abc\"    \"abc\"    Yes\n\"aabbbc\"    \"abc\"    Yes\n\"aabbccc\"    \"abc\"    Yes\n\"adcacddcac\"    \"ac\"    Yes\n\"ac\"    \"c\"    Yes\n\"aac\"    \"ac\"    Yes\n</pre>\n'''"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcabca') == 5\nassert solution('aaaaaaaa') == 4\nassert solution('abcd') == 3\n\"\"\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcabca') == 5\n\nassert solution('aaaaaaaa') == 8\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f.\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 True, \u0435\u0441\u043b\u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043d\u0430\u0431\u043e\u0440\u0443 \u0438 False, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442.\n\n\u0412\u044b\u0432\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u00abTrue\u00bb \u0438\u043b\u0438 \u00abFalse\u00bb, \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438 \u0434\u0432\u043e\u0435\u0442\u043e\u0447\u0438\u0435.\n\nSample Input 1:\n\ncatcat\nSample Output 1:\n\nTrue\nSample Input 2:\n\ncatcat\ntacat\nSample Output 2:\n\nFalse\nSample Input 3:\n\ncatcatt\nSample Output 3:\n\nFalse\n\"\"\"\n\n\"\"\"\n\u0427\u0438\u0441\u043b\u043e \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0446\u0438\u0444\u0440 \u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u00ab\u0437\u0432\u0451\u0437\u0434\u043e\u0447\u043a\u0430\u00bb (\u0438\u043b\u0438 \u00ab\u043c\u0438\u043d\u0443\u0441\u00bb), \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0435 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\nSample Input 1:\n\n\u0417\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u0430-1 2 \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u0430 3 4 \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u0430-5 6\nSample Output 1:\n\n-6 \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u0430-5 4 \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u0430-2 3 \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u0430 1\n\"\"\"\n\n\"\"\"\n\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0438\u0437 \u043d\u0435\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\nSample Input:\n\ncatcowcat\nSample Output:\n\ncatcowcat\n\"\"\"\n\n\"\"\"\n\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0441\u043b\u043e\u0432 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c, \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0441\u0438\u043c\u0432\u043e\u043b \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432, \u0441\u043e\u0447\u0435\u0442\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043b\u043e\u0432\u0430 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\nHello, Andrey, Ivan and Peter\nSample Output 1:\n\nAndrey\nIvan\nPeter\n\"\"\"\n\n\"\"\"\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0431\u0443\u043a\u0432 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430. \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == 5\nassert solution(\"abc\") == 3\n\"\"\""
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcabca\") == 5\nassert solution(\"aaaaaaaa\") == 8\n\n\"\"\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abca\") == 5\nassert solution(\"abcdefgh\") == 8\n\"\"\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcabca\") == 5\nassert solution(\"aaaaaaaa\") == 4\n\"\"\""
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\"\n\"\"\"\n\nn = int(stdin.readline())\ntasks = [tuple(map(int, line.split(' '))) for line in stdin.readlines()]\n\ntasks = sorted(tasks, key=lambda x: x[0])\n\nfor f in tasks:\n    print('move', f[1], f[0])\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\\n\"\nassert solution(\"5\\n1 0\\n11 1\\n111 0\\n1111 1\\n11111 0\\n\") == \"5\\nmove 1 5\\nmove 11 1\\nmove 111 1\\nmove 111 11\\nmove 111111 2\\n\"\nassert solution(\"5\\n1 0\\n11 1\\n111 0\\n1111 1\\n11111 0\\n\") == \"5\\nmove 1 5\\nmove 11 1\\nmove 111 1\\nmove 111 11\\nmove 111111 2\\n\"\nassert solution(\"5\\n1 0\\n11 1\\n1111 1\\n11111 0\\n\") == \"5\\nmove 1 5\\nmove 11 1\\nmove 111 1\\nmove 11111 1\\nmove 111111 2\\n\"\nassert solution(\"5\\n1 0\\n11 1\\n1111 1\\n11111 0\\n\") == \"5\\nmove 1 5\\nmove 11 1\\nmove 111 1\\nmove 11111 1\\nmove 111111 2\\n\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\\n\"\nassert solution(\"2\\n1 0\\n2 1\\n\") == \"3\\nmove 1 3\\nmove 2 1\\nmove 3 2\\n\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\\n\"\nassert solution(\"2\\n1 0\\n2 1\\n\") == \"3\\nmove 1 3\\nmove 2 1\\nmove 3 2\\n\"\nassert solution(\"5\\n1 0\\n11 1\\n111 0\\n1111 1\\n11111 0\\n\") == \"5\\nmove 1 5\\nmove 11 1\\nmove 1111 2\\nmove 1114 3\\nmove 11111 4\\n\"\n\nprint(\"Test passed\\n\")\n\n\"\"\""
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_str_1) == test_res_1\nassert solution(test_str_2) == test_res_2\n\"\"\""
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\"\n\"\"\"\n\n\"\"\"\nimport sys\n\nnumber = int(sys.stdin.readline())\n\nexamples = {}\nextras = {}\n\nfor index in range(number):\n    line = sys.stdin.readline()\n    name, kind = line.split()\n    kind = int(kind)\n    if kind == 1:\n        examples[name] = index\n    elif kind == 0:\n        extras[name] = index\n\nresult = []\n\nfor name, index in examples.items():\n    result.append(f'move {name} {str(index + 1)}')\n\nfor name, index in extras.items():\n    result.append(f'move {str(index + len(examples))} {name}')\n\nprint(len(result))\nprint('\\n'.join(result))\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\") == \"4\"\nassert solution(\"2\\n1 0\\n2 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\"\nassert solution(\"2\\n1 0\\n2 1\\n\") == \"3\\nmove 1 3\\nmove 2 1\"\nassert solution(\"5\\n01 0\\n11 1\\n111 0\\n1111 1\\n11111 0\\n\") == \"5\\nmove 11 1\\nmove 111 1\\nmove 11111 2\\nmove 1114 3\\nmove 111111 3\"\nassert solution(\"2\\n1 0\\n11 1\\n\") == \"3\\nmove 1 3\\nmove 11 1\"\n\"\"\"\n\n\nimport itertools"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\"\n\n\"\"\""
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\"\nassert solution(\"5\\n1 0\\n11 1\\n111 0\\n1111 1\\n11111 0\") == \"5\\nmove 11 1\\nmove 111 1\\nmove 11111 2\\nmove 111 4\\nmove 111111 3\"\nassert solution(\"5\\n11 111\\n1 111\\n111 0\\n1111 1\\n11111 0\") == \"5\\nmove 111 3\\nmove 111 11\\nmove 111 1\\nmove 11111 2\\nmove 111 4\\nmove 111111 3\"\nassert solution(\"5\\n01 1111111\\n11 1111111\\n11111111 0\\n11111111 1\\n11111111 11\\n11111111 111\") == \"5\\nmove 1111111 11\\nmove 1111111 1\\nmove 1111111 111\\nmove 1111111 111\\nmove 1111111 1\\nmove 1111111 11\\nmove 1111111 111\\nmove 1111111 111\\nmove 1111111 111\\nmove 1111111 11\\nmove 1111111 1\\nmove 1111111 111\\nmove 1111111 111\\nmove 1111111 111\\nmove 1111111 111\\nmove 1111111 1\\nmove 1111111 11\\nmove 1111111 111\\nmove 1111111 111\"\n\"\"\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123456') == '2'\nassert solution('111000') == '1'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"000000\") == \"0\"\nassert solution(\"123456\") == \"2\"\nassert solution(\"111000\") == \"1\"\n\"\"\""
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('111000') == 1\nassert solution('123456') == 2\nassert solution('100100') == 0\nassert solution('101010') == 1\nassert solution('111111') == 0\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123456\") == \"0\"\nassert solution(\"111000\") == \"1\"\nassert solution(\"0011010\") == \"1\"\n\"\"\"\n\nfrom typing import List, Set"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111000\") == 1\nassert solution(\"123456\") == 2\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123456\") == \"2\"\nassert solution(\"111000\") == \"1\""
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111000\") == \"1\"\nassert solution(\"123456\") == \"2\"\nassert solution(\"111111\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1005\") == \"2\"\nassert solution(\"1234\") == \"0\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"01010\") == \"0\"\nassert solution(\"11010\") == \"0\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123456\") == \"2\"\nassert solution(\"111000\") == \"1\"\nassert solution(\"1123456\") == \"0\"\n\"\"\""
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234\") == 1\nassert solution(\"111111\") == 0\nassert solution(\"21000\") == 2\n\"\"\"\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n') == '3'\nassert solution('5 2\\n') == '2'\nassert solution('4 10\\n') == '3'\nassert solution('4 1\\n') == '1'\nassert solution('5 3\\n') == '2'\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"5 2\") == \"2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == 3\nassert solution(\"5 2\") == 2"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n\") == \"3\"\nassert solution(\"5 2\\n\") == \"2\"\nassert solution(\"11 14\\n\") == \"6\"\nassert solution(\"11 9\\n\") == \"1\"\nassert solution(\"1 1\\n\") == \"0\"\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n\") == '3'\nassert solution(\"5 2\\n\") == '2'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3'\nassert solution('5 2') == '2'\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3''') == '''3'''\nassert solution('''5 2''') == '''2'''\n\"\"\""
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5, 3) == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3'\nassert solution('5 2') == '2'"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"5 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1 8\"\nassert solution(\"2 1\") == \"1 1\"\nassert solution(\"3 3\") == \"23 128\"\n\"\"\"\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1 8'\nassert solution('1 3') == '1 1'\nassert solution('4 3') == '23 128'"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"1 3\"\nassert solution(\"4 3\") == \"23 128\""
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"1 8\"\nassert solution(\"1 3\") == \"1 1\"\nassert solution(\"4 3\") == \"23 128\"\n\"\"\"\n\nimport math\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\n\ntotal = 2**N"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3\\n4 5') == '1 4'\n\"\"\"\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '23 128'\nassert solution('1 3') == '1 1'\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1 1'\nassert solution('2 1') == '1 1'\nassert solution('1 3') == '1 1'\nassert solution('4 3') == '23 128'\n\"\"\""
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"7 5\"\nassert solution(\"10 3\") == \"12 231\"\nassert solution(\"3 3\") == \"1 1\"\nassert solution(\"100 10\") == \"101 101\"\nassert solution(\"100 100\") == \"10 10\"\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"23 128\"\nassert solution(\"1 3\") == \"1 1\"\nassert solution(\"10 5\") == \"127 199\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == '1 8'\nassert solution(\"1 3\") == '1 1'\nassert solution(\"4 3\") == '23 128'\n\"\"\""
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\") == \"YES\"\nassert solution(\"2\\n15000 South\\n4000 East\") == \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\\n') == 'YES'\nassert solution('2\\n15000 South\\n4000 East\\n') == 'NO'\nassert solution('5\\n20000 South\\n1000 North\\n20000 North\\n') == 'YES'\nassert solution('3\\n20000 South\\n10 East\\n20000 North\\n') == 'NO'\nassert solution('4\\n50 South\\n50 North\\n15000 South\\n15000 North\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\") == \"YES\"\nassert solution(\"2\\n15000 South\\n4000 East\") == \"NO\"\nassert solution(\"5\\n20000 South\\n1000 North\\n20000 North\") == \"YES\"\nassert solution(\"4\\n50 South\\n50 North\\n15000 South\\n15000 North\") == \"YES\"\nassert solution(\"3\\n20000 South\\n10 East\\n20000 North\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == expected_result\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\\n\") == \"YES\"\nassert solution(\"2\\n15000 South\\n4000 East\\n\") == \"NO\"\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import List, Deque, Optional\n\nn = int(sys.stdin.readline().rstrip())\ndirs: List[str] = []\nfor _ in range(n):\n    t, d = map(int, sys.stdin.readline().rstrip().split())\n    dirs.append((t, d))\n\ndirs.sort()\n\nfirst_pole: Deque[int] = deque()\nsecond_pole: Deque[int] = deque()\n\nfor _, d in dirs:\n    if d == \"North\":\n        first_pole.append(d)\n    elif d == \"South\":\n        if first_pole:\n            first_pole.pop()\n        else:\n            second_pole.append(d)\n    elif d == \"East\":\n        if second_pole:\n            second_pole.append(d)\n        else:\n            first_pole.append(d)\n    else:\n        if second_pole:\n            second_pole.pop()\n        else:\n            first_pole.append(d)"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\") == \"YES\"\nassert solution(\"2\\n15000 South\\n4000 East\") == \"NO\"\nassert solution(\"5\\n20000 South\\n1000 North\\n20000 North\") == \"YES\"\nassert solution(\"4\\n50 South\\n50 North\\n15000 South\\n15000 North\") == \"YES\"\nassert solution(\"3\\n20000 South\\n10 East\\n20000 North\") == \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\") == \"YES\"\nassert solution(\"2\\n15000 South\\n4000 East\") == \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\\n\") == \"YES\"\nassert solution(\"2\\n15000 South\\n4000 East\\n\") == \"NO\"\nassert solution(\"5\\n20000 South\\n10 East\\n20000 North\\n\") == \"NO\"\nassert solution(\"4\\n50 South\\n50 North\\n15000 South\\n15000 North\\n\") == \"YES\"\n\"\"\""
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1000 South\\n1000 North') == 'NO'\nassert solution('3\\n20000 South\\n10 East\\n20000 North') == 'NO'\nassert solution('4\\n50 South\\n50 North\\n15000 South\\n15000 North') == 'YES'\nassert solution('5\\n7500 South\\n10000 East\\n3500 North\\n4444 West') == 'YES'\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\") == \"YES\"\nassert solution(\"2\\n15000 South\\n4000 East\") == \"NO\"\nassert solution(\"5\\n20000 South\\n1000 North\\n20000 North\") == \"YES\"\nassert solution(\"4\\n50 South\\n50 North\\n15000 South\\n15000 North\") == \"YES\"\nassert solution(\"3\\n20000 South\\n10 East\\n20000 North\") == \"NO\"\n\n\n-----Problem-----\nNiraj is a very busy student who is on his last day to write a presentation for his graduation ceremony. He starts from the point (0, 0) and moves to some place by the following:\n\nIn the i-th direction he moves exactly i kilometers.\nFrom any position he can move in two directions: forward or backward. If the direction of the movement is forward, then he moves exactly k \u2013 1 units in that direction (k > 0). Otherwise, if the direction is backward, then he moves exactly k + 1 units in that direction (k < 0).\nIf there are several such places that are equally far from the starting point, then Niraj should move to the place which is the farthest from the starting point.\n\nNiraj\u2019s friend Yashar suggested that he moves in such a way that the total distance travelled is minimized. Help him to write a program which calculates the minimum total distance.\n\nInput\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 10^5).\n\nNext n lines contain two integers k and s (1 \u2264 k,s \u2264 10^6) \u2014 the number of moves and the number of units that Niraj moves in the forward or backward direction.\n\nOutput\nThe output should contain a single integer \u2014 the minimum total distance that Niraj will travel.\n\nExamples\ninputCopy\n2\n1 1\n2 2\noutputCopy\n3\ninputCopy\n3\n1 1\n2 2\n3 3\noutputCopy\n4\ninputCopy\n5\n1 1\n2 2\n3 3\n4 4\n5 5\noutputCopy\n7\ninputCopy\n6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\noutputCopy\n8\ninputCopy\n7\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\noutputCopy\n9\ninputCopy\n8\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\noutputCopy\n10\n\n-----Solution-----\n\nimport sys\nimport math"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0 3 3 5 21\") == \"3\"\nprint(\"Test 1 OK\")\nassert solution(\"2 4 3 0 6 17\") == \"2\"\nprint(\"Test 2 OK\")\n\n\"\"\"\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 3 0 6 17\") == \"2\"\nassert solution(\"2 4 3 0 6 17\") == \"2\""
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0 3 3 5 21\") == \"3\"\n\n\"\"\"\n\na1, b1, a2, b2, l, r = [int(i) for i in input().split()]\nnum = 0\n\nfor k in range(0, (r // a1) + 1):\n    for l in range(0, (r // a2) + 1):\n        if k * a1 + b1 == l * a2 + b2 and l >= 0:\n            num += 1\n\nprint(num)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0 3 3 5 21\") == \"3\"\nassert solution(\"2 4 3 0 6 17\") == \"2\"\n\nprint(solution(\"2 0 3 3 5 21\"))\nprint(solution(\"2 4 3 0 6 17\"))\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 3 3 5 21\") == \"3\"\nassert solution(\"2 4 3 0 6 17\") == \"2\"\n\"\"\"\n\na_1, b_1, a_2, b_2, L, R = [int(i) for i in stdin.split()]\nnum = 0\nfor i in range(L, R + 1):\n    for j in range(max(a_1, i - R), min(a_1, i - L) + 1):\n        if j * a_1 + b_1 == i:\n            num += 1\n            break\nprint(num)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0 3 3 5 21\") == \"3\"\nassert solution(\"2 4 3 0 6 17\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 3 0 6 17') == 2\n\"\"\"\n\na1, b1, a2, b2, L, R = [int(x) for x in stdin.split()]\ncount = 0\nfor i in range(L, R+1):\n    if a1*i + b1 == a2*i + b2:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0 3 3 5 21\") == \"3\"\n\"\"\"\n\nA, B, A2, B2, L, R = map(int, input().split())\n\ncnt = 0\n\nfor k in range(L, R+1):\n    for l in range(L, R+1):\n        if k == A and l == B:\n            continue\n        if A2*k + B2*l == A*k + B*l:\n            cnt += 1\nprint(cnt)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 3 0 6 17') == '2'\nassert solution('0 0 5 8') == '0'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0 3 3 5 21\") == 3\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 2 3\"\n) == \"1\"\nassert solution(\n    \"4 7 10\"\n) == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\") == \"1\"\nassert solution(\"4 7 10\") == \"3\"\nassert solution(\"7 7 7\") == \"0\"\nassert solution(\"1 3 3\") == \"1\"\nassert solution(\"1 3 6\") == \"1\"\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\") == \"1\"\nassert solution(\"4 7 10\") == \"3\"\nassert solution(\"6 9 9\") == \"3\"\nassert solution(\"7 8 8\") == \"1\"\n\"\"\""
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\") == \"1\"\nassert solution(\"4 7 10\") == \"3\"\n\"\"\""
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\") == \"1\"\nassert solution(\"4 7 10\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 10\") == \"3\"\nassert solution(\"5 2 3\") == \"1\"\nassert solution(\"4 7 9\") == \"2\"\nassert solution(\"7 8 1\") == \"1\"\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 7 10''') == '3'\nassert solution('''5 2 3''') == '1'\n\"\"\"\n\nfrom math import factorial\n\na, b, n = [int(_) for _ in input().split()]\n\nc1 = factorial(a + b) / (factorial(a) * factorial(b))\nc2 = factorial(n) / (factorial(n - a) * factorial(a)) * factorial(b)\n\nprint(int(c1 // c2))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 7 10\n''') == '3'\n\nassert solution('''5 2 3\n''') == '1'\nassert solution('''4 7 10\n''') == '1'\nassert solution('''4 7 10\n''') == '1'\nassert solution('''4 7 10\n''') == '1'\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3\") == \"1\"\nassert solution(\"4 7 10\") == \"3\""
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 10\") == \"3\"\nassert solution(\"5 2 3\") == \"1\"\nassert solution(\"7 6 5\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 100 100\") == \"100\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\") == \"YES\"\n\nassert solution(\"4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG\") == \"NO\"\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\") == \"YES\"\nassert solution(\"4 3\\nRRR\\nRRR\\nRRR\\nRRR\\n\") == \"YES\"\nassert solution(\"6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\\n\") == \"NO\"\nassert solution(\"4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG\\n\") == \"NO\"\n\n\"\"\"\n\nn, m = input().split()\nn, m = int(n), int(m)\nflag = []\nfor i in range(n):\n    flag.append(input().split())\n\nr = 0\ng = 0\nb = 0\nfor i in range(n):\n    for j in range(m):\n        if flag[i][j] == 'R':\n            r += 1\n        if flag[i][j] == 'G':\n            g += 1\n        if flag[i][j] == 'B':\n            b += 1"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\nRRRR\\nRRRR\\nBBBB\\nGGGG') == 'YES'\nassert solution('4 3\\nRRR\\nRRR\\nBBBB\\nGGGG') == 'YES'\nassert solution('6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB') == 'NO'\nassert solution('4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG') == 'YES'\nassert solution('6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB') == 'NO'\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB') == 'NO'\nassert solution('4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 5\\n\"\n    \"RRRRR\\n\"\n    \"RRRRR\\n\"\n    \"BBBBB\\n\"\n    \"BBBBB\\n\"\n    \"GGGGG\\n\"\n    \"GGGGG\\n\"\n    ) == \"YES\"\nassert solution(\n    \"4 3\\n\"\n    \"RRRR\\n\"\n    \"RRRR\\n\"\n    \"BBBB\\n\"\n    \"BBBB\\n\"\n    \"GGGGG\\n\"\n    \"GGGGG\\n\"\n    ) == \"YES\"\nassert solution(\n    \"4 4\\n\"\n    \"RRRR\\n\"\n    \"RRRR\\n\"\n    \"BBBB\\n\"\n    \"GGGG\\n\"\n    ) == \"NO\"\nassert solution(\n    \"6 7\\n\"\n    \"RRRGGGG\\n\"\n    \"RRRGGGG\\n\"\n    \"RRRGGGG\\n\"\n    \"RRRBBBB\\n\"\n    \"RRRBBBB\\n\"\n    \"RRRBBBB\\n\"\n    \"RRRBBBB\\n\"\n    ) == \"NO\"\nassert solution(\n    \"4 4\\n\"\n    \"RRRR\\n\"\n    \"RRRR\\n\"\n    \"GGGG\\n\"\n    \"GGGG\\n\"\n    ) == \"NO\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG') == 'NO'\nassert solution('6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB') == 'NO'\nassert solution('6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG') == 'YES'\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\nfield = []\nfor _ in range(n):\n    field.append(input())\n\nr = 0\ng = 0\nb = 0\n\nfor i in range(n):\n    for j in range(m):\n        if field[i][j] == 'R':\n            r += 1\n        if field[i][j] == 'G':\n            g += 1\n        if field[i][j] == 'B':\n            b += 1\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n\"\n                \"RRRRR\\n\"\n                \"RRRRR\\n\"\n                \"BBBBB\\n\"\n                \"BBBBB\\n\"\n                \"GGGGG\\n\"\n                \"GGGGG\") == \"YES\"\n\nassert solution(\"4 3\\n\"\n                \"RRRR\\n\"\n                \"RRRR\\n\"\n                \"RRRR\\n\"\n                \"RRRR\\n\") == \"YES\"\n\nassert solution(\"6 7\\n\"\n                \"RRRGGGG\\n\"\n                \"RRRGGGG\\n\"\n                \"RRRGGGG\\n\"\n                \"RRRBBBB\\n\"\n                \"RRRBBBB\\n\"\n                \"RRRBBBB\") == \"NO\"\n\nassert solution(\"4 4\\n\"\n                \"RRRR\\n\"\n                \"RRRR\\n\"\n                \"BBBB\\n\"\n                \"GGGG\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\") == \"YES\"\nassert solution(\"4 3\\nRRR\\nRRR\\nRRR\\nRRR\") == \"YES\"\nassert solution(\"6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\") == \"NO\"\nassert solution(\"4 4\\nRRR\\nRRR\\nBBBB\\nGGGG\") == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG\") == \"YES\"\nassert solution(\"6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\nRRR\\nRRR\\nBBBB\\nGGGG\\n\") == \"YES\"\nassert solution(\"6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\\n\") == \"YES\"\nassert solution(\"4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG\\n\") == \"NO\"\nassert solution(\"6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\\n\") == \"NO\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '-2 0'\nassert solution('7') == '3 2'\n\"\"\"\n\n\"\"\"\n\u0420\u0435\u0448\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430:\n\u0412\u043e\u0442 \u0442\u0443\u0442 \u0441\u043d\u043e\u0432\u0430 \u0447\u0442\u043e \u0442\u043e \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u0442\u0441\u044f: \u0441\u0440\u0435\u0434\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0435\u0441\u0442\u044c \u043e\u0434\u043d\u043e \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0438\u0445, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0438\u0441\u043b\u0430, \u0434\u0435\u043b\u044f\u0449\u0438\u0435 \u043d\u0430\u0446\u0435\u043b\u043e \u043d\u0430 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e 10. \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u043c, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u043e \u043d\u0430 \u0441\u0435\u0431\u044f \u0438 \u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443.\n\n\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0443 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f is_prime(), \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u0430\u044f \u0432 \u0433\u043b\u0430\u0432\u0435 \u043a \u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u0434\u0430\u043d\u0438\u044e. \u041e\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u0438\u0441\u043b\u043e \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0443 \u043f\u0443\u0442\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438, \u043d\u0435\u0442 \u043b\u0438 \u043e\u043d\u043e \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u043d\u0430\u0446\u0435\u043b\u043e \u043d\u0430 \u043e\u0442 2 \u0434\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430. \u0415\u0441\u043b\u0438 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u043d\u0435 \u043d\u0430\u0448\u043b\u043e\u0441\u044c \u2014 \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0435.\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e generate_prime_candidate(), \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430.\n\"\"\"\n\nimport random\nfrom math import sqrt"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"3 2\"\n\nprint(solution(\"7\"))"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"0 0\"\nassert solution(\"7\") == \"2 2\"\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7') == '3 2'\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == (-2, 0)\nassert solution(\"7\") == (3, 2)\n\"\"\"\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"-2 0\"\n\nassert solution(\"7\") == \"3 2\"\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '-2 0'\nassert solution('7') == '3 2'\nassert solution('10') == '0 -2'\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0 0'\nassert solution('1') == '0 0'\nassert solution('3') == '1 1'\nassert solution('4') == '1 1'\nassert solution('5') == '1 0'\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"0 0\"\nassert solution(\"7\") == \"3 2\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == \"3 2\"\n\n\"\"\"\n\nn = int(input())\n\nx = 0\ny = 0\n\nwhile n > 0:\n    if n % 2 == 0:\n        x += 1\n        n -= 1\n    else:\n        y += 1\n        n -= 1\n\nprint(x, y)\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 7\") == 'Yes'\nassert solution(\"6 11 6\") == 'Yes'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6 15\") == 'No'\nassert solution(\"3 2 7\") == 'Yes'\nassert solution(\"6 11 6\") == 'Yes'\n\"\"\"\n\na, b, c = list(map(int, input().split()))\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\nassert solution(\"3 2 6\") == \"No\"\n\"\"\""
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\"\n\"\"\"\n\na, b, c = map(int, input().split())\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 15') == 'No'\nassert solution('3 2 7') == 'Yes'\nassert solution('6 11 6') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\"\n\"\"\"\n\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_solution(self):\n        assert solution(\"4 6 15\") == \"No\"\n        assert solution(\"3 2 7\") == \"Yes\"\n        "
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\"\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\n\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\n\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\n\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\n\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\""
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8\\n2 4 6\\n1 5 7\") == \"YES\"\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\nassert solution(\"2 4\\n1 3\") == \"NO\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 8\\n2 4 6\\n1 5 7') == 'YES'\nassert solution('4 9\\n2 3 5 8\\n0 1 3 6') == 'YES'\nassert solution('2 4\\n1 3\\n1 2') == 'NO'\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8\\n2 4 6\\n1 5 7\") == \"YES\"\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\nassert solution(\"2 4\\n1 3\") == \"NO\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8\\n2 4 6\\n1 5 7\") == 'YES'\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == 'YES'\nassert solution(\"2 4\\n1 3\\n1 2\") == 'NO'\n\n\"\"\"\n\nimport sys\nimport math\nimport re\n\n_T = int(input())\n\nfor _ in range(_T):\n    n, L = map(int, sys.stdin.readline().split())\n    nums = list(map(int, sys.stdin.readline().split()))\n    nums2 = list(map(int, sys.stdin.readline().split()))\n\n    if len(set(nums))!= len(nums) or len(set(nums2))!= len(nums2):\n        print(\"NO\")\n    elif sorted(nums) == sorted(nums2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8\\n2 4 6\\n1 5 7\") == \"YES\"\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\nassert solution(\"2 4\\n1 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8\\n2 4 6\\n1 5 7\") == 'YES'\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == 'YES'\nassert solution(\"2 4\\n1 3\\n1 2\") == 'NO'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8\\n2 4 6\\n1 5 7\") == 'YES'\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == 'YES'\nassert solution(\"2 4\\n1 3\\n1 2\") == 'NO'\nassert solution(\"4 5\\n1 3\\n2 4\") == 'NO'\nassert solution(\"2 3\\n1 2\") == 'NO'\n\n-----\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0442\u0435\u043d\u043e\u043a \u0443 \u0437\u0430\u043c\u043a\u0430.\n\n\u0412 \u043e\u0434\u043d\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0430\u043d \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u043a\u043e\u0434\u0430, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u0431\u0430 \u0434\u0435\u043a\u0430\u0440\u0430\u0442\u043e\u0440\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041e\u0431\u0430 \u0442\u0435\u0441\u0442\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442, \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0435\u043d\u043e\u043a \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0442\u0440\u0430\u0441\u0441\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0437\u0430\u043c\u043a\u0430.\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438, \u0441\u0442\u043e\u0438\u0442 \u043b\u0438 \u044d\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0434\u0435\u043a\u0430\u0440\u0430\u0442\u043e\u0440\u044b \u043f\u0440\u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430:\n\nclass Doors(object):\n\n    def __init__(self, length, width):\n\n        self.length = length\n        self.width = width\n\n    def is_door_valid(self):\n\n        return self.length == self.width\n\nclass LockedDoors(Doors):\n\n    def __init__(self, length, width):\n\n        super().__init__(length, width)\n\n    def is_door_valid(self):\n\n        return self.length > self.width\n\nclass UnlockedDoors(Doors):\n\n    def __init__(self, length, width):\n\n        super().__init__(length, width)\n\n    def is_door_valid(self):\n\n        return self.length < self.width\n\nclass DoorsEnv(object):\n\n    def __init__(self, doors):\n\n        self.doors = doors\n\n    def is_door_valid(self):\n\n        return any([door.is_door_valid() for door in self.doors])"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8\\n2 4 6\\n1 5 7\") == \"YES\"\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\nassert solution(\"2 4\\n1 3\\n1 2\") == \"NO\"\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8\\n2 4 6\\n1 5 7') == 'YES'\nassert solution('4 9\\n2 3 5 8\\n0 1 3 6') == 'YES'\nassert solution('2 4\\n1 3\\n1 2') == 'NO'"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"mew\") == \"mew\"\nassert solution(\"wuffuw\") == \"mew\"\nassert solution(\"qqqqqqqq\") == \"0\"\nassert solution(\"abacaba\") == \"abc\"\nassert solution(\"aaaaaa\") == \"0\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"mew\") == \"3\"\nassert solution(\"wuffuw\") == \"5\"\nassert solution(\"qqqqqqqq\") == \"0\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"mew\") == \"3\"\nassert solution(\"uffuw\") == \"5\"\nassert solution(\"qqqqqqqq\") == \"0\""
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('mew') =='mew'\nassert solution('uffuw') == 'uffuw'\nassert solution('qqqqqqqq') == '0'\nassert solution('abcdeeqrstuvwxyz') == 'abcde'\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"mew\") == \"3\"\nassert solution(\"wuffuw\") == \"5\"\nassert solution(\"qqqqqqqq\") == \"0\"\n\n-----\nYou may assume that the input string is non-empty and does not contain any spaces.\n\"\"\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"mew\") == \"3\"\nassert solution(\"uffuw\") == \"5\"\nassert solution(\"qqqqqqqq\") == \"0\"\n\n\nsolution(\"mew\") # \"3\"\nsolution(\"uffuw\") # \"5\"\nsolution(\"qqqqqqqq\") # \"0\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"mew\") == \"3\"\nassert solution(\"uffuw\") == \"5\"\nassert solution(\"qqqqqqqq\") == \"0\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"mew\") == \"mew\"\nassert solution(\"wuffuw\") == \"wuffuw\"\nassert solution(\"qqqqqqqq\") == \"0\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"0\"\nassert solution(\"aaaaa\") == \"aaaaa\"\n\nprint(solution(\"mew\"))\nprint(solution(\"wuffuw\"))\nprint(solution(\"qqqqqqqq\"))\nprint(solution(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(solution(\"aaaaa\"))"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"mew\") == \"mew\"\nassert solution(\"uffuw\") == \"mew\"\nassert solution(\"qqqqqqqq\") == \"0\"\nassert solution(\"wuffuw\") == \"mew\"\nassert solution(\"www\") == \"w\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"mew\") == \"mew\"\nassert solution(\"uffuw\") == \"uffuw\"\nassert solution(\"qqqqqqqq\") == \"0\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n3060 3060\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\\n2884 2884\") == \"rated\"\nassert solution(\"4\\n1500 1500\\n1300 1300\\n1200 1200\\n1400 1400\") == \"unrated\"\nassert solution(\"5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\") == \"maybe\"\n\n'''\n\n'''\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\n\u0420\u0430\u0437\u0443\u043c\u0435\u0435\u0442\u0441\u044f, \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c.\n\n\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0441\u0442\u0440\u0430\u043d\u044b.\n\n\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0431\u044b\u043b \u043b\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0435\u0435 \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435.\n\n\u0415\u0441\u043b\u0438 \u0435\u0433\u043e \u043d\u0435\u0442, \u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0441\u0442\u0440\u0430\u043d\u044b \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u044f\u0446\u0435.\n\n\u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0432\u0441\u0435 \u043b\u0438 \u043b\u044e\u0434\u0438 \u043f\u043e\u0440\u0430\u043d\u044c\u0448\u0435, \u043a\u0430\u043a \u0431\u0443\u0434\u0442\u043e \u0435\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u043b\u0441\u044f.\n\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u043b\u044e\u0434\u0438 \u043f\u043e\u0440\u0430\u043d\u044c\u0448\u0435, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0443\u0436\u0435 \u043b\u0438 \u0441\u0442\u0440\u0430\u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u043b\u0430 \u0438\u0445 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e.\n\n\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043d\u0435 \u0431\u044b\u043b\u043e \u043b\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0435\u0435 \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435.\n\n\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043d\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0430 \u043b\u0438 \u0441\u0442\u0440\u0430\u043d\u0430 \u0434\u043e \u044d\u0442\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0439 \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u0438, \u0447\u0435\u043c \u043f\u0440\u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0438 \u0441 \u0441\u0435\u0439\u0447\u0430\u0441.\n\n\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0441\u0442\u0440\u0430\u043d\u044b \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u044f\u0446\u0435, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u043b\u0438 \u0435\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u044f\u0446\u0435, \u0441\u0432\u0435\u0440\u044f\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u0435\u0441\u044f\u0446, \u0430 \u043d\u0435 \u043f\u0440\u043e\u0448\u043b\u044b\u0435.\n\n\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0441\u0442\u0440\u0430\u043d\u044b \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u044f\u0446\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0432 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435.\n\n\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0441\u0442\u0440\u0430\u043d\u044b \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435 \u0438 \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u044f\u0446\u0435.\n\n\u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u0432\u0441\u0435 \u0445\u043e\u0440\u043e\u0448\u043e, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0448\u043b\u044b\u0435 \u043c\u0435\u0441\u044f\u0446\u044b.\n\n\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0431\u044b\u043b\u043e \u043b\u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043d\u043e\u0432\u044b\u0445 \u043b\u044e\u0434\u0435\u0439 \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u044f\u0446\u0435.\n\n\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0441\u0442\u0440\u0430\u043d\u044b \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0441\u0442\u0440\u0430\u043d\u044b \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u044f\u0446\u0435.\n\n\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0430 \u043b\u0438 \u0441\u0442\u0440\u0430\u043d\u0430 \u0434\u043e \u044d\u0442\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0439 \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u0438, \u0447\u0435\u043c \u043f\u0440\u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"6\n3060 3060\n2194 2194\n2876 2903\n2624 2624\n3007 2991\n2884 2884\"\"\") == \"rated\"\nassert solution(\"\"\"4\n1500 1500\n1300 1300\n1200 1200\n1400 1400\"\"\") == \"unrated\"\nassert solution(\"\"\"5\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699\"\"\") == \"maybe\"\n\"\"\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1500 1500\\n1300 1300\\n1200 1200\\n1400 1400\\n\") == \"rated\"\nassert solution(\"3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\") == \"maybe\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') =='maybe'\nassert solution('4 1 2 4 3') == 'rated'\nassert solution('5 1 2 5 4') == 'rated'\nassert solution('3 1 2 3') == 'unrated'\nassert solution('5 1 3 2 4') =='maybe'\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n3060 3060\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\\n2884 2884\") == \"rated\"\nassert solution(\"4\\n1500 1500\\n1300 1300\\n1200 1200\\n1400 1400\") == \"unrated\"\nassert solution(\"5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\") == \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == output\n\n\n\n'''"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n3060 3060\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\\n2884 2884\") == \"rated\"\nassert solution(\"5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\") == \"unrated\"\nassert solution(\"4\\n1500 1500\\n1300 1300\\n1200 1200\\n1400 1400\") == \"unrated\"\n\n\"\"\"\n\nn = int(input())\nm = [[int(i) for i in input().split()] for _ in range(n)]"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2777 2777\\n2246 2246\\n2246 2246\") == \"rated\"\n\nassert solution(\"4\\n1300 1300\\n1200 1200\\n1400 1400\") == \"unrated\"\n\nassert solution(\"5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\") == \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n7 6\n3 5\n4 3\n3 5\n3 5\n3 5\n3 5\n\"\"\") == \"unrated\"\n\nassert solution(\"\"\"\n3\n7 6\n3 5\n4 3\n3 5\n3 5\n3 5\n3 5\n\"\"\") == \"rated\"\n\nassert solution(\"\"\"\n4\n3 1\n7 1\n7 1\n1 1\n\"\"\") == \"maybe\"\n\"\"\""
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '6\\n3060 3060\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\\n2884 2884\\n'\n) == 'rated'\n\nassert solution(\n    '4\\n1500 1500\\n1300 1300\\n1200 1200\\n1400 1400\\n'\n) == 'unrated'\n\nassert solution(\n    '5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\\n'\n) =='maybe'\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 0 3 0 0 3 2 4\") == \"2 1 0 1 0 0 1 2 3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n1 2 3 4') == '0 1 2 3'\nassert solution('7 8\\n-2 3 4 0 1 2 3 4') == '0 1 2 3 4'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nindex_dict = {}\nres = []\n\nfor i, v in enumerate(a):\n    if v == 0:\n        index_dict[i] = True\n\nfor i, v in enumerate(a):\n    if v!= 0:\n        if i + 1 in index_dict:\n            res.append(i + 1 - index_dict[i + 1])\n        else:\n            res.append(index_dict[i] - i)\n        if i - 1 in index_dict:\n            res.append(i - index_dict[i])\n        else:\n            res.append(index_dict[i] - i)\n    else:\n        res.append(0)\nprint(*res)\n\n\n\"\"\"\nThe solution from the official solution:"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n2 1 0 3 0 0 3 2 4\") == \"2 1 0 1 0 0 1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str([2, 1, 0, 3, 0, 0, 3, 2, 4])) == str([2, 1, 0, 1, 0, 1, 2, 3, 3])\nassert solution(str([0, 1, 2, 3, 4])) == str([0, 1, 2, 3, 4])\nassert solution(str([0, 1, 2, 3, 0, 4])) == str([0, 1, 2, 3, 0, 4])\n\"\"\""
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n5 6 0 1 -2 3 4') == '2 1 0 1 2 3 4'\n\"\"\""
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n2 1 0 3 0 0 3 2 4\") == \"2 1 0 1 0 0 1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n2 1 0 3 0 0 3 2 4\") == \"2 1 0 1 0 0 1 2 3\"\nassert solution(\"5\\n0 1 2 3 4\") == \"0 1 2 3 4\"\nassert solution(\"7\\n5 6 0 1 -2 3 4\") == \"2 1 0 1 2 3 4\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 2 0 3 0 0 3 2 4') == '2 1 0 1 0 0 1 2 3'\nassert solution('5 6 0 1 -2 3 4') == '2 1 0 1 2 3 4'\nassert solution('7 5 0 1 -2 3 4') == '2 1 0 1 2 3 4'\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\n2 1 0 3 0 0 3 2 4') == '2 1 0 1 0 0 1 2 3\\n'\nassert solution('5\\n0 1 2 3 4') == '0 1 2 3 4\\n'\nassert solution('7\\n5 6 0 1 -2 3 4') == '2 1 0 1 2 3 4\\n'\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('0') == '0'\nassert solution('-1') == '0'\nassert solution('0 0') == '0 0'\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111011111100\") == \"4\"\nassert solution(\"011111101110011111111100\") == \"7\"\nassert solution
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1010\") == \"2\"\nassert solution(\"10101010\") == \"962\"\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0') == '2'\nassert solution('1010') == '2'\nassert solution('10101010') == '3'\nassert solution('01101010') == '2'\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"00\") == 3\nassert solution(\"10\") == 2\n\"\"\""
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11101101101') == '4'\nassert solution('101101') == '2'\nassert solution('101010') == '1'\nassert solution('11101') == '3'\nassert solution('1110111101010') == '9'\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101010') == 3\nassert solution('11111') == 2\nassert solution('0110110') == 3\nassert solution('100') == 4\nassert solution('10011') == 4\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"000111\") == 2\nassert solution(\"01010\") == 3\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('01') == 3\nassert solution('10') == 2\nassert solution('11') == 1\nassert solution('0') == 0\nassert solution('1') == 1\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"011010\") == 4\nassert solution(\"101010\") == 2\nassert solution(\"01101010\") == 96\nassert solution(\"101010\") == 2\nassert solution(\"10101010\") == 96"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0\") == 3\nassert solution(\"1010\") == 2\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n-1 0\\n0 -1\\n1 0\\n1 1\\n') == '3 4'\n\nassert solution('6\\n-1 0\\n0 -1\\n1 0\\n1 1\\n-4 -5\\n-4 -6\\n') == '6 5'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nvectors = []\nfor i in range(n):\n    x, y = [int(i) for i in sys.stdin.readline().split()]\n    vectors.append((x, y))\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        angle = 0\n        for k in range(n):\n            if k == i or k == j:\n                continue\n            x1, y1 = vectors[i]\n            x2, y2 = vectors[j]\n            x3, y3 = vectors[k]\n            if x1 * y2 - x2 * y1 == 0:\n                continue\n            angle = (x1 * x3 + y1 * y3) / (x1 * y2 - x2 * y1)\n        print(i + 1, j + 1, angle)\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n-1 0\\n0 -1\\n1 0\\n1 1\") == \"3 4\"\nassert solution(\"6\\n-1 0\\n0 -1\\n1 0\\n1 1\\n-4 -5\\n-4 -6\") == \"6 5\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_data) == test_result\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n-1 0\n0 -1\n1 0\n1 1\n\"\"\") == \"3 4\"\n\nassert solution(\"\"\"\n6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n\"\"\") == \"6 5\"\n\n\"\"\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n-1 0\\n0 -1\\n1 0\\n1 1') == '3 4'\nassert solution('6\\n-1 0\\n0 -1\\n1 0\\n1 1\\n-4 -5\\n-4 -6') == '6 5'\n\"\"\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n-1 0\\n0 -1\\n1 0\\n1 1\\n\") == \"3 4\"\nassert solution(\"6\\n-1 0\\n0 -1\\n1 0\\n1 1\\n-4 -5\\n-4 -6\\n\") == \"6 5\"\n\n\"\"\"\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n-1 0\\n0 -1\\n1 0\\n1 1\") == \"3 4\"\n\"\"\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n-1 0\\n0 -1\\n1 0\\n1 1\\n') == '3 4'\n\"\"\"\n\nfrom itertools import combinations\n\nn = int(input())\npairs = list(map(lambda s: list(map(int, s.split())), input().split()))\npairs = list(combinations(pairs, 2))\nm = float('inf')\nfor pair in pairs:\n    if abs(pair[0][0] - pair[1][0]) ** 2 + abs(pair[0][1] - pair[1][1]) ** 2 < m:\n        m = abs(pair[0][0] - pair[1][0]) ** 2 + abs(pair[0][1] - pair[1][1]) ** 2\n        print(pair[0][0], pair[0][1])\n        print(pair[1][0], pair[1][1])\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n-1 0\\n0 -1\\n1 0\\n1 1\") == \"3 4\"\nassert solution(\"6\\n-1 0\\n0 -1\\n1 0\\n1 1\\n-4 -5\\n-4 -6\") == \"6 5\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == expected_result\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\"\nassert solution(\"5 2 1 5 5\") == \"9\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 1 4 10') == '14'\nassert solution('5 2 1 4 5') == '13'\nassert solution('5 2 1 4 5 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\""
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\""
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\"\n\"\"\"\n\nfrom typing import List\nfrom decimal import Decimal\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\""
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\"\n\n\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0441\u0430\u043c\u044b\u0439 \u0431\u043b\u0438\u0437\u043a\u0438\u0439 \u043f\u043e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0435 \u043a \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0435\u0435 1000 \u2013 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0445 \u043c\u0430\u0441\u0441\u0438\u0432. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e x, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0435\u0435 1000. \u0427\u0438\u0441\u043b\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0438 \u043f\u043e\u0434 \u043d\u043e\u043c\u0435\u0440\u043e\u043c x \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2013 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e x.\n\n\n-----Sample Input-----\n\n6\n\n1 2 4 9 16 12\n\n3\n\n2\n\n-----Sample Output-----\n\n12\n\"\"\"\n\nimport sys"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\"\nassert solution(\"4 5 3 6 1\") == \"9\"\nassert solution(\"5 2 1 4 5\") == \"13\""
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3') == '-1'\nassert solution('8 2') == '2 6'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\\n\") == \"1 2 3\"\nassert solution(\"8 2\\n\") == \"2 6\"\nassert solution(\"5 3\\n\") == \"-1\"\nassert solution(\"1 1\\n\") == \"1\"\n\"\"\"\n\nn, k = [int(i) for i in stdin.split(\" \")]"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 2\") == \"2 6\"\nassert solution(\"5 3\") == \"1 2 3\"\nassert solution(\"6 3\") == \"1 2 3\"\nassert solution(\"8 1\") == \"1 1 1\"\nassert solution(\"9 1\") == \"1 1 1\"\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3') == '1 2 3'\nassert solution('8 2') == '2 6'\nassert solution('5 3') == '-1'\n\n\"\"\""
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"1 2\"\nassert solution(\"2 6\") == \"6\"\nassert solution(\"1 2 4\") == \"1 2 4\"\nassert solution(\"5 3\") == \"1 2 4\"\nassert solution(\"9 5\") == \"-1\"\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '1 2 3'\nassert solution('6 3') == '1 2 3'\nassert solution('7 2') == '-1'\nassert solution('10 10') == '-1'\nassert solution('10 3') == '-1'\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1 2 3', 'Wrong solution'\nassert solution('8 2\\n1 2 3 4 5 6 7 8') == '1 2 3', 'Wrong solution'\nassert solution('5 3\\n1 2 3 5') == '-1', 'Wrong solution'\nassert solution('8 2\\n1 2 4 6 8') == '2 4 6', 'Wrong solution'\n\"\"\"\nimport math\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3\") == \"1 2 3\"\nassert solution(\"8 2\") == \"2 6\"\nassert solution(\"5 3\") == \"-1\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n6\") == \"1 2 3\\n6\"\n\nassert solution(\"2 3\\n6\\n1 2\") == \"1 2 3\\n6\\n1 2\"\n\nassert solution(\"2 3\\n6\\n1 2\\n1 3\\n3 5\") == \"1 2 3\\n6\\n1 2\\n1 3\\n3 5\"\n\nassert solution(\"2 3\\n6\\n1 2\\n1 3\\n3 5\\n1 2\\n4 5\\n5 6\") == \"1 2 3\\n6\\n1 2\\n1 3\\n3 5\\n1 2\\n4 5\\n5 6\"\n\nassert solution(\"2 3\\n6\\n1 2\\n1 3\\n3 5\\n1 2\\n4 5\\n5 6\\n1 2\\n1 4\\n4 5\\n5 6\") == \"1 2 3\\n6\\n1 2\\n1 3\\n3 5\\n1 2\\n4 5\\n5 6\\n1 2\\n1 4\\n4 5\\n5 6\""
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == \"1 2 3\"\nassert solution(\"8 2\") == \"2 6\"\nassert solution(\"5 3\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('2 2') == '0'\nassert solution('1 3') == '0'\nassert solution('5 5') == '1'\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 12\") == \"14\"\nassert solution(\"11 14\") == \"31\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"5 7\") == \"7\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 12\") == \"14\"\nassert solution(\"11 14\") == \"31\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"5 7\") == \"7\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 12\") == \"14\"\nassert solution(\"11 14\") == \"31\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"5 7\") == \"7\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 12\") == \"14\"\nassert solution(\"11 14\") == \"31\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"5 7\") == \"7\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1\\n0\\n0\\n0\\n1\\n0\\n0\\n0\\n0\\n0'\n\n\"\"\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 14\") == \"31\"\nassert solution(\"6 12\") == \"14\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"5 7\") == \"7\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 12') == '14'\nassert solution('11 14') == '31'\nassert solution('1 5') == '1'\nassert solution('3 8') == '5'\nassert solution('5 7') == '7'\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 12\") == \"14\"\nassert solution(\"11 14\") == \"31\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"5 7\") == \"7\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\") == \"1\"\nassert solution(\"5 7\") == \"7\"\nassert solution(\"21 21\") == \"88\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 -2\\n-3 8 -2 1 -6\") == \"22\"\nassert solution(\"12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7\") == \"42\"\nassert solution(\"5 10\\n-1 -2 -3 -4 -5\") == \"0\"\nprint('The code ran Correctly')\n\n-----\na=[1, 3, 3, 7, 1, 3, 3, 7, 1, 3, 3, 7]\n\nx=2\n\na_len = len(a)\n\nfor i in range(0,a_len):\n    #print(sum(a[i:i+x]))\n    print(a[i:i+x])\n    print(sum(a[i:i+x]))\n\n\na=[1, 3, 3, 7, 1, 3, 3, 7, 1, 3, 3, 7]\n\nx=2\n\na_len = len(a)\n\nfor i in range(0,a_len):\n    for j in range(i,i+x):\n        print(a[j])\n    print(\"-----\")\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 -2\\n-3 8 -2 1 -6\") == \"22\"\nassert solution(\"5 10\\n-1 -2 -3 -4 -5\") == \"0\"\nassert solution(\"5 10\\n1 3 3 7 1 3 3 7 1 3 3 7\") == \"42\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 -2\\n-3 8 -2 1 -6\") == \"22\"\nassert solution(\"12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7\") == \"42\"\n\"\"\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 -2\\n-3 8 -2 1 -6\") == \"22\"\nassert solution(\"12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7\") == \"42\"\nassert solution(\"5 10\\n-1 -2 -3 -4 -5\") == \"0\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 -2\\n-3 8 -2 1 -6') == '22'\nassert solution('12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7') == '42'\nassert solution('5 10\\n-1 -2 -3 -4 -5') == '0'\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 -2\\n-3 8 -2 1 -6\") == 22\nassert solution(\"12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7\") == 42\nassert solution(\"5 10\\n-1 -2 -3 -4 -5\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 -2\\n-3 8 -2 1 -6\") == 22\nassert solution(\"5 10\\n-1 -2 -3 -4 -5\") == 0\nassert solution(\"5 10\\n1 3 3 7 1 3 3 7 1 3 3 7\") == 42\n\"\"\"\n\nimport sys"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == \"8\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 -2\\n-3 8 -2 1 -6\") == \"22\"\nassert solution(\"12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7\") == \"42\"\nassert solution(\"5 10\\n-1 -2 -3 -4 -5\") == \"0\"\n\n'''\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 -2\") == \"6\"\nassert solution(\"6 -3\") == \"18\"\nassert solution(\"9 -3\") == \"0\"\nassert solution(\"8 -3\") == \"0\""
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"1 10 5\") == \"5\"\n\"\"\"\n\nn, m, k = [int(_) for _ in stdin.split()]\n\nans = 1\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        ans = max(ans, i * j)\n    k -= 1\n    if k == 0:\n        break\nprint(ans)\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"1 10 5\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 2') == '2'\nassert solution('2 3 4') == '3'\nassert solution('1 10 5') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\""
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 2\\n') == '2'\nassert solution('2 3 4\\n') == '3'\nassert solution('1 10 5\\n') == '5'\nassert solution('10 10 10\\n') == '10'\nassert solution('4 4 1\\n') == '4'\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 4') == '3'\nassert solution('1 10 5') == '5'\nassert solution('2 3 2') == '2'\n\"\"\""
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"2 2 2\") == \"2\"\nassert solution(\n\"2 3 4\") == \"3\"\nassert solution(\n\"1 10 5\") == \"5\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\""
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\") == '7'\nassert solution(\"21\") == '5'\n\"\"\""
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"21\") == \"5\"\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516\") == \"9\"\nassert solution(\"1234\") == \"4\"\n\nimport io, sys\n_INPUT_LINES = sys.stdin.read().splitlines()\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n_INPUT_LINES = [0]\n\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\nfor line in _INPUT_LINES:\n    _ = input()\n    _OUTPUT_BUFFER.truncate(0)\n    print(solution(line))\n\nsys.stdout = sys.__stdout__\n\n\"\"\"\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(12345678910111213141516171819202122232425262728293031323334353637) == \"5\"\n\"\"\""
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7') == '7'\n\"\"\""
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"21\") == \"5\"\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == '7'\n\nassert solution(\"21\") == '5'\n\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'\nassert solution('16') == '1'\nassert solution('32') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'\nassert solution('1') == '1'\nassert solution('1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111211311411511611711811912121...') == '1'\n\"\"\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 11\\n4 2 5\\n4 4 5 4\") == \"26\"\nassert solution(\"2 2 50\\n5 7\\n4 2\") == \"50\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 11\\n4 2 5\\n4 4 5 4\") == \"26\"\nprint(solution(input()))\n\"\"\"\n\nn, m, r = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nmax_val = 0\nfor i in range(n):\n    for j in range(m):\n        x = max(a[i] - b[j], 0)\n        y = r + x\n        max_val = max(max_val, y)\n\nprint(max_val)\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 11\\n4 2 5\\n4 4 5 4') == '26'\nassert solution('2 2 50\\n5 7\\n4 2') == '50'\n\"\"\""
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 50\\n5 7\\n4 2') == 50\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 11\\\\n4 2 5\\\\n4 4 5 4') == '26'\n\"\"\"\n\nn, m, r = map(int, input().split())\ns = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ns.sort()\nb.sort()\n\npurch = 0\nfor i in range(n):\n    purch += s[i]\n    purch -= b[i]\n    if purch < 0:\n        break\n    elif purch == 0:\n        break"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_0) == test_0_result\nprint(solution(test_0))\nassert solution(test_1) == test_1_result\nprint(solution(test_1))\nassert solution(test_2) == test_2_result\nprint(solution(test_2))\nassert solution(test_3) == test_3_result\nprint(solution(test_3))\nassert solution(test_4) == test_4_result\nprint(solution(test_4))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n4 5 6\\n7 8 9\") == \"26\"\n\"\"\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 11\\n4 2 5\\n4 4 5 4\") == \"26\"\nassert solution(\"2 2 50\\n5 7\\n4 2\") == \"50\"\n\n\n\n\n\n\"\"\""
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 11\\n4 2 5\\n4 4 5 4\") == '26'\nassert solution(\"2 2 50\\n5 7\\n4 2\") == '50'\n\n\"\"\"\n\nfrom collections import namedtuple\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 11\\n4 2 5\\n4 4 5 4') == '26'\nassert solution('2 2 50\\n5 7\\n4 2') == '50'\n\"\"\"\n\nn, m, r = [int(n) for n in input().split()]\ns = [int(n) for n in input().split()]\nb = [int(n) for n in input().split()]\n\ns.sort()\nb.sort(reverse=True)\n\nans = 0\nfor i in range(n):\n    ans += min(s[i], b[i])\n    if ans > r:\n        print(ans - s[i] - b[i])\n        break"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution\u0435"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('25') == '20'\nassert solution('2') == '-1'"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"3\"\n\nassert solution(\"5\") == \"4\"\n\nassert solution(\"2\") == \"-1\"\n\nassert solution(\"1\") == \"0\"\n\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n\nassert solution(\"25\") == \"20\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) == \"3\"\nassert solution(2) == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"25\") == \"20\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"10\") == \"10\"\nassert solution(\"20\") == \"20\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('25') == '20'\nassert solution('2') == '-1'"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3\\n4\\n\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == '3\\n4'\nassert solution(25) == '20\\n21\\n22\\n23\\n24\\n25'\nassert solution(2) == '-1'\n\n\n    \n\"\"\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('25') == '20'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"25\") == \"20\""
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacabac') == '8'\nassert solution('abaccaba') == '17'\n\"\"\""
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\nabacabac\\n1 1 1 1 1 1 1 1') == 8\n\nassert solution('8\\nabacaba\\n1 2 3 4 4 3 2 1') == 17\n\nprint(solution(stdin))\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\nabacabac\\n1 1 1 1 1 1 1 1') == '8'\nassert solution('8\\nabaccaba\\n1 2 3 4 4 3 2 1') == '17'\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacabca') == '17'\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\nabacabac\\n1 1 1 1 1 1 1 1') == '8\\n', \"WA\"\nassert solution('8\\nabaccaba\\n1 2 3 4 4 3 2 1') == '17\\n', \"WA\"\nassert solution('8\\nabacabca\\n1 2 3 4 4 3 2 1') == '17\\n', \"WA\"\n\"\"\"\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(string) == answer\n\n---------------------------------------------------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('aaa') == 'a'\nassert solution('aab') == 'aba'\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacabac') == 8\nassert solution('abaccaba') == 17\nassert solution('abacaba') == 7\nassert solution('abacabca') == 17\nassert solution('abacbcba') == 17\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacabac') == 8, 'wrong result'\nassert solution('abaccaba') == 17, 'wrong result'"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacabca\") == 17\nassert solution(\"abaccaba\") == 26\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 1\") == 'NO'\nassert solution(\"7 10\") == 'YES'\nassert solution(\"6 10\") == 'YES'\nassert solution(\"1 10\") == 'NO'\nassert solution(\"7 100\") == 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7') == 'YES'\nassert solution('100 99') == 'YES'\nassert solution('100 50') == 'NO'\n\n\"\"\""
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\") == 'YES'\nassert solution(\"100 99\") == 'YES'\nassert solution(\"100 50\") == 'NO'"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 9\") == \"YES\"\nassert solution(\"100 99\") == \"YES\"\nassert solution(\"100 50\") == \"NO\""
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\") == \"YES\"\nassert solution(\"100 99\") == \"YES\"\nassert solution(\"100 50\") == \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 7') == 'YES'\nassert solution('100 99') == 'YES'\nassert solution('100 50') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'YES'\nassert solution('100 100') == 'NO'\nassert solution('3 7') == 'YES'\nassert solution('100 50') == 'NO'\nassert solution('100 99') == 'YES'\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7\") == \"YES\"\nassert solution(\"100 99\") == \"YES\"\nassert solution(\"100 50\") == \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3, 7) == \"YES\"\nassert solution(100, 50) == \"NO\"\nassert solution(100, 99) == \"YES\"\nprint('All tests passed.')\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7') == 'YES'\nassert solution('100 99') == 'YES'\nassert solution('100 50') == 'NO'\n\n\"\"\""
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"23 5\\n\") == \"Yes\\n3 3 2 1 0 \"\nassert solution(\"13 2\\n\") == \"No\"\nassert solution(\"1 2\\n\") == \"Yes\\n-1 -1 \"\nassert solution(\"1 2\\n\") == \"Yes\\n-1 -1 \"\nassert solution(\"1 2\\n\") == \"Yes\\n-1 -1 \"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"23 5\") == \"Yes\\n3 3 2 1 0 \"\nassert solution(\"13 2\") == \"No\"\nassert solution(\"1 2\") == \"Yes\\n-1 -1 \"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''23 5''') == 'Yes\\n3 3 2 1 0'\nassert solution('''13 2''') == 'No'\nassert solution('''1 2''') == 'Yes\\n-1 -1'\nassert solution('''1 1''') == 'Yes\\n-1 -1'\n'''"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"23 5\\n\") == \"Yes\\n3 3 2 1 0\\n\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def __init__(self, stdin: str) -> None:\n        input_ = stdin.splitlines()\n        self.n = int(input_[0].split()[0])\n        self.k = int(input_[0].split()[1])\n\n    def solution(self) -> str:\n        self.nums = []\n        for _ in range(self.k):\n            self.nums.append(int(input()))\n\n        count = [0] * self.k\n\n        ans = []\n\n        def backtrack(n: int, idx: int, count: List[int]):\n            # if idx == self.k:\n            #     self.nums.sort()\n            #     if self.nums[0] == 0:\n            #         self.nums[0] = -1\n            #     ans.append(self.nums[:])\n            #     self.nums = []\n            #     return\n\n            if n == 0:\n                if idx == self.k:\n                    self.nums.sort()\n                    if self.nums[0] == 0:\n                        self.nums[0] = -1\n                    ans.append(self.nums[:])\n                    self.nums = []\n                    return\n\n            for i in range(self.k):\n                if count[i] == 2:\n                    continue\n                else:\n                    count[i] += 1\n                    backtrack(n - self.nums[i], idx + 1, count)\n                    count[i] -= 1\n\n        backtrack(self.n, 0, count)\n\n        if ans:\n            ans.sort()\n            ans = ans[-1]\n            ans.sort()\n            print('Yes')\n            print(' '.join(map(str, ans)))\n        else:\n            print('No')\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 2\") == \"No\"\nassert solution(\"23 5\") == \"Yes\\n3 3 2 1 0\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"1 3\") == \"Yes\\n0 0 1 1\"\nassert solution(\"1 4\") == \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(23) + \" \" + str(5)) == \"Yes\\n3 3 2 1 0\"\nassert solution(str(13) + \" \" + str(2)) == \"No\"\nassert solution(str(1) + \" \" + str(2)) == \"Yes\\n-1 -1\"\n\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23 5\") == \"Yes\\n3 3 2 1 0\"\nassert solution(\"13 2\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('23 5') == 'Yes\\n3 3 2 1 0'\nassert solution('13 2') == 'No'\nassert solution('1 2') == 'Yes\\n-1 -1'\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23 5\\n\") == \"Yes\"\nassert solution(\"13 2\\n\") == \"No\"\nassert solution(\"1 2\\n\") == \"Yes\"\nassert solution(\"2 1\\n\") == \"No\"\nassert solution(\"2 0\\n\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"23 5\") == \"Yes\\n3 3 2 1 0\"\nassert solution(\"1 2\") == \"Yes\\n-1 -1\"\nassert solution(\"13 2\") == \"No\""
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\") == \"6\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5') == '4'\nassert solution('4 8') == '6'\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5') == 4\n\n\"\"\"\n\nfrom itertools import islice\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == 4\nassert solution(\"8 1\") == 6\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 5) == 4\n\nassert solution(4, 8) == 6\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:\n        dp = [0] * (query_row + 1)\n        dp[0] = poured\n\n        for i in range(query_row):\n            for j in range(i + 1):\n                if dp[j] > 1:\n                    dp[j] = max(0, dp[j] - 1)\n                    dp[j + 1] += (dp[j] / 2)\n\n        return 0 if dp[query_glass] > 1 else dp[query_glass]\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"4 8\") == \"6\"\n\n\"\"\"\n\nn, t = map(int, input().split())\nt %= n\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7\") == \"4\"\nassert solution(\"3 5\") == \"4\"\nassert solution(\"4 8\") == \"6\"\n\"\"\"\nimport math"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5') == '4'\n\n\"\"\""
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"4\"\nprint(\"PASSED\")\n\nassert solution(\"4 8\") == \"6\"\nprint(\"PASSED\")\n\n\"\"\"\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"4 8\") == \"6\"\n\nprint(solution(stdin.readline()))"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0\\n1 1\") == \"1\"\nassert solution(\"1 1\\n1 0\") == \"-1\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 1\\n2 4\\n3 6\\n4 6') == '1'\nassert solution('2\\n1 1\\n2 2') == '-1'\n\"\"\"\n\n\nimport math\nimport sys"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 3\\n3 4\\n5 5\\n\") == \"8.0\"\nassert solution(\"2\\n1 1\\n2 2\\n\") == \"-1\"\nassert solution(\"2\\n1 1\\n2 2\\n\") == \"-1\"\nassert solution(\"3\\n2 2\\n1 1\\n2 3\\n\") == \"6.0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 1\\n2 2\") == \"1\"\nassert solution(\"1\\n1 1\") == \"0\"\nassert solution(\"1\\n-1 1\") == \"-1\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"1\"\nassert solution(\"3\\n0 0\\n1 -1\\n2 0\") == \"-1\"\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 0\\n1 1\") == \"1\"\nassert solution(\"1\\n1 1\") == \"-1\"\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n3 0\\n1 1\") == \"1\"\nassert solution(\"4\\n0 0\\n0 1\\n0 0\\n1 1\") == \"-1\"\nassert solution(\"4\\n0 0\\n1 1\\n3 0\\n1 1\") == \"1\"\nassert solution(\"5\\n1 2\\n0 1\\n1 1\\n2 3\") == \"5\"\nassert solution(\"4\\n0 0\\n0 1\\n0 0\\n1 1\") == \"-1\"\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\\n1 1\") == \"1\"\nassert solution(\"0 0\\n1 1\\n1 1\") == \"1\"\nassert solution(\"0 0\\n1 1\\n1 2\\n1 3\\n1 4\") == \"1\"\nassert solution(\"0 0\\n1 1\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"1\"\nassert solution(\"0 0\\n1 1\\n1 2\\n2 3\") == \"0\"\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 0\\n1 1\") == \"1\\n\"\nassert solution(\"1\\n1 1\") == \"-1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 0\\n1 1\") == \"1\"\nassert solution(\"1\\n1 1\") == \"0\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0\\n1 1\") == \"1\"\nassert solution(\"1\\n1 1\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 1 2\") == \"1\"\nassert solution(\"5 3 4\") == \"6\"\nassert solution(\"6 4 2\") == \"4\"\nassert solution(\"20 5 6\") == \"2\"\nassert solution(\"20 5 6\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n4\\n\") == \"6\"\nassert solution(\"8\\n1\\n2\\n\") == \"1\"\nassert solution(\"6\\n4\\n2\\n\") == \"4\"\nassert solution(\"20\\n5\\n6\\n\") == \"2\"\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(8) == 1\nassert solution(5) == 6\nassert solution(6) == 4\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_data) == test_result"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n1\\n2') == '1'\nassert solution('5\\n3\\n4') == '6'\nassert solution('6\\n4\\n2') == '4'\nassert solution('20\\n5\\n6') == '2'\n\n\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1\\n2\") == '1'\nassert solution(\"5\\n3\\n4\") == '6'\nassert solution(\"6\\n4\\n2\") == '4'"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n1\\n2\\n') == '1'\nassert solution('5\\n3\\n4\\n') == '6'\nassert solution('6\\n4\\n2\\n') == '4'\nassert solution('20\\n5\\n6\\n') == '2'\nassert solution('20\\n2\\n2\\n') == '4'\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n1\\n2') == '1'\nassert solution('5\\n3\\n4') == '6'\nassert solution('6\\n4\\n2') == '4'\nassert solution('20\\n5\\n6') == '2'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5\\n3\\n4') == '6'\nassert solution('10\\n3\\n7') == '5'\nassert solution('10\\n1\\n3') == '1'\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n1\\n2') == '1'\nassert solution('5\\n3\\n4') == '6'\nassert solution('6\\n4\\n2') == '4'\nassert solution('20\\n5\\n6') == '2'\n\"\"\""
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 2 5 3 4 6\\n01110') == 'YES'\nassert solution('6\\n1 2 5 3 4 6\\n01010') == 'NO'\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n1 2 5 3 4 6\\n01110') == 'YES'\nassert solution('6\\n1 2 5 3 4 6\\n010') == 'NO'\nassert solution('6\\n1 2 5 3 4 6\\n1010') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 5 3 4 6\") == \"YES\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nx = input()"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2 1\") == \"YES\"\nassert solution(\"3 2 1\") == \"NO\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4\\n11010') == 'YES'\nassert solution('4\\n1 2 3 4\\n11100') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2 5 3 4 6\\n01110\") == \"YES\"\nassert solution(\"6\\n1 2 5 3 4 6\\n01010\") == \"NO\""
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''6\n1 2 5 3 4 6\n01110''') == 'YES'\nassert solution('''6\n1 2 5 3 4 6\n01010''') == 'NO'\n\n-----\n'''\n* Solution:\n *\n * This problem can be solved in O(Nlog(N)) time.\n *\n * At the beginning, we keep all elements in the input array in a set, S.\n * Then we check whether for any i in [1, N-1] is there a j in [i+1, N] such that a_i < a_j.\n * If this is true, we know that we can swap the i-th element with the j-th element without breaking the monotonicity.\n * Otherwise, the result is NO.\n'''\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 2 5 3 4 6\\n01110') == \"YES\"\nassert solution('6\\n1 2 5 3 4 6\\n01010') == \"NO\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6\n1 2 5 3 4 6\n01110''') == 'YES'\nassert solution('''6\n1 2 5 3 4 6\n01010''') == 'NO'\n'''"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 5 3 4 6\") == \"YES\"\nassert solution(\"1 2 5 3 4 6\") == \"YES\"\nassert solution(\"1 2 5 3 4 6\") == \"YES\"\nassert solution(\"1 2 5 3 4 6\") == \"YES\"\nassert solution(\"1 2 5 3 4 6\") == \"YES\"\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1f\") == \"1\"\nassert solution(\"2d\") == \"10\"\nassert solution(\"4a\") == \"11\"\nassert solution(\"5e\") == \"18\"\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1f\") == \"1\"\nassert solution(\"2d\") == \"10\"\nassert solution(\"4a\") == \"11\"\nassert solution(\"5e\") == \"18\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1a\") == '1'\nassert solution(\"1f\") == '1'\nassert solution(\"2d\") == '10'\nassert solution(\"4a\") == '11'\nassert solution(\"5e\") == '18'\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1f\") == \"1\"\nassert solution(\"2d\") == \"10\"\nassert solution(\"4a\") == \"11\"\nassert solution(\"5e\") == \"18\"\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1f\") == '1'\nassert solution(\"2d\") == '10'\nassert solution(\"4a\") == '11'\nassert solution(\"5e\") == '18'"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1f\") == \"1\"\nassert solution(\"2d\") == \"10\"\nassert solution(\"4a\") == \"11\"\nassert solution(\"5e\") == \"18\"\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1f') == 1\nassert solution('2d') == 10\nassert solution('4a') == 11\nassert solution('5e') == 18\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1f') == '1'\nassert solution('2d') == '10'\nassert solution('4a') == '11'\nassert solution('5e') == '18'\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1a') == '1'\nassert solution('1b') == '2'\nassert solution('2f') == '10'\nassert solution('3a') == '11'\nassert solution('2d') == '18'\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1f\") == \"1\"\nassert solution(\"2d\") == \"10\"\nassert solution(\"4a\") == \"11\"\nassert solution(\"5e\") == \"18\""
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\") == \"<\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \">\""
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\\n2 10\\n4 7\") == \"=\"\nassert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\") == \"<\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \">\"\nassert solution(\"4 4\\n1 1 1 1\\n2 2 2 2\") == \"=\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\\n2 10\") == \"=\"\nassert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\") == \"<\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \">\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \"<\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\") == \"=\"\nassert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\") == \">\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \"<\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\\n2 10\\n4 7\") == '='\nassert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\") == '<'\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == '>'"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\") == \"<\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \">\"\nassert solution(\"6 2\\n1 0 1 1 1 1\\n2 10\") == \"=\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \">\"\n\"\"\""
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\") == \"=\"\nassert solution(\"7 3\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \"<\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \">\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\") == \"=\"\nassert solution(\"3 3\\n1 0 2\") == \"<\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\") == \">\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2\\n1 0 1 1 1 1\\n2 10') == '='\nassert solution('3 3\\n1 0 2\\n2 5\\n2 4') == '<'\nassert solution('7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0') == '>'\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\") == '<'\nassert solution(\"3 3\") == '='\nassert solution(\"7 16\") == '>'"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"BitAryo\"\n\"\"\""
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n1\") == \"BitAryo\"\nassert solution(\"2 1 1\\n1\") == \"BitAryo\"\nassert solution(\"1 1\\n1\\n1\") == \"BitLGM\"\nassert solution(\"2 1 1\\n1\\n1\") == \"BitLGM\"\nassert solution(\"1 2 1\\n1\\n1\") == \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"BitLGM\"\nassert solution(\"2 2\") == \"BitAryo\"\nassert solution(\"3 1 1\") == \"BitAryo\"\nassert solution(\"1 2 1\") == \"BitLGM\"\nassert solution(\"4 1 2 1\") == \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\") == 'BitLGM'\nassert solution(\"3 1 2 1\") == 'BitAryo'\n\"\"\""
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"BitLGM\"\n\"\"\""
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == 'BitLGM'\nassert solution('1 2') == 'BitAryo'\nassert solution('1 2 1') == 'BitLGM'\n\nassert solution('1 1 1') == 'BitAryo'\nassert solution('1 1 2') == 'BitLGM'\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"BitLGM\"\nassert solution(\"1 2\") == \"BitAryo\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == 'BitLGM'\nassert solution('1 2\\n') == 'BitAryo'\nassert solution('2 1 1\\n') == 'BitLGM'\n\"\"\""
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == 'BitAryo'\nassert solution(\"1 2\") == 'BitLGM'\nassert solution(\"1 1\") == 'BitAryo'\nassert solution(\"1 2\") == 'BitLGM'\n\"\"\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 1\") == \"BitLGM\"\nassert solution(\"3\\n1 2 1\") == \"BitAryo\"\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4') == '4'\nassert solution('3 6') == '1'\nassert solution('9 1 14') == '1'\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nres = 0"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 8\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n9 1 14') == '1'\nassert solution('3 4\\n6 2 8') == '4'\n\n\"\"\"\n\nfrom collections import Counter, defaultdict\nfrom functools import lru_cache\nfrom itertools import permutations\nfrom math import factorial\n\nimport sys\n\nsys.setrecursionlimit(100010)\nDEBUG = False\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n6 2 8') == '4'\n\"\"\""
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n6 2 8') == '4'\n\"\"\"\n\n\nfrom itertools import combinations"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n9 1 14\") == \"1\"\nassert solution(\"3 6\\n3 4 7\") == \"0\""
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n9 1 14\\n') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4') == '4'\nassert solution('3 6') == '1'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2 8\") == \"4\"\n\"\"\"\nfrom collections import Counter\n\nn, k = list(map(int, stdin.readline().split()))\na = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6\\n9 1 14') == '1'\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabb\") == \"YES\"\nassert solution(\"aacab\") == \"NO\"\n\n\nfrom collections import defaultdict\nfrom typing import Dict, Tuple\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 aabb\") == \"YES\"\nassert solution(\"6 3 aacaab\") == \"NO\"\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\ns = stdin.readline().strip()\nl = []\nfor i in range(n):\n    if s[i] not in l:\n        l.append(s[i])\nfor i in range(k):\n    l.remove(s[i])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\naabb\\n') == 'YES'\nassert solution('6 3\\naacaab\\n') == 'NO'\nprint('PASSED')\n\nInput\n1\na\nOutput\nYES\n\nInput\n2\naa\nOutput\nYES\n\nInput\n3\na\nOutput\nNO\n\"\"\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 aabb') == 'YES'\nassert solution('6 3 aacaab') == 'NO'\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\naabb') == 'YES'\nassert solution('6 3\\naacaab') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 aabb') == 'YES'\nassert solution('6 3 aacaab') == 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 aabb\") == \"YES\"\nassert solution(\"6 3 aacaab\") == \"NO\"\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\ns = input()"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 aabb\") == \"YES\"\nassert solution(\"6 3 aacaab\") == \"NO\"\nassert solution(\"2 2 aab\") == \"YES\"\nassert solution(\"5 1 aab\") == \"NO\"\nassert solution(\"6 1 aab\") == \"NO\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\naabb') == 'YES'\nassert solution('6 3\\naacaab') == 'NO'\nassert solution('4 2\\nabb') == 'YES'\nassert solution('4 2\\nba') == 'NO'\nassert solution('4 2\\nab') == 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(4, 2) == \"YES\"\nassert solution(6, 3) == \"NO\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\ns = input()\n\nfor i in range(k):\n    if s.count(s[i]) >= k:\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n5 6 5') == '1'\nassert solution('9\\n2 1 3 5 4 1 2 3 1') == '3'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6 5\\n') == '2'\n\"\"\""
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 6 5\") == \"1\"\nassert solution(\"9\\n2 1 3 5 4 1 2 3 1\") == \"3\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3') == 1\nassert solution('5 6 5') == 2\nassert solution('9 2 1 3 5 4 1 2 3 1') == 3\n\"\"\"\n\n\"\"\"\n\u0421\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0449\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043f\u043e\u0438\u0441\u043a\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442 1 \u0434\u043e n, \u0433\u0434\u0435 n \u2014 \u0447\u0438\u0441\u043b\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430.\n\n-----Input-----\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e n \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435.\n\u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0443\u0442 n \u0441\u0442\u0440\u043e\u043a \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435.\n\n-----Output-----\n\n\u041e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438.\n\n\n-----Examples-----\nInput\n3\n3\n4\n5\n\nOutput\n1\n\nInput\n5\n1\n2\n3\n4\n5\n\nOutput\n0\n\nInput\n5\n4\n3\n5\n6\n\nOutput\n1\n\nInput\n10\n1\n3\n4\n5\n6\n7\n8\n9\n10\n\nOutput\n5\n\"\"\""
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n5 6 5') == '1'\nassert solution('9\\n2 1 3 5 4 1 2 3 1') == '3'\n\n\"\"\"\n\nimport sys\nimport math\nfrom decimal import Decimal"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 3 5 4 1 2 3 1') == '2'\nassert solution('3 3') == '0'\nassert solution('5 6 5') == '2'\nassert solution('9 2 1 3 5 4 1 2 3 1') == '3'\nassert solution('9 3 6 5 6 4 3 5 2 2 2 3 1 4 1') == '2'\n\"\"\"\nfrom math import inf\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5 4 3 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"4\\n5 1 2 3\") == \"3\"\nassert solution(\"4\\n1 2 3 4\") == \"1\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"3\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"8\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n5\\n7\\n8\\n9') == 3\n\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10'))\n\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10') == 2\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('3 2 1') == '1'\nassert solution('1 3 5') == '2'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 3 2') == '3/10'\nassert solution('7 1 2') == '3/7'\nassert solution('1 1 2') == '1/1'\n\nprint('all tests passed.')\n\n-----Solution-----\n\nt, w, b = map(int, stdin.split(' '))\nx = b - w\nn = 1\nm = 1\nwhile True:\n    if n * m > x:\n        break\n    n += 1\n    m += 1\nprint(f'{n}/{m}')\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\nassert solution(\"7 1 2\") == \"3/7\""
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\n\"\"\"\n\nfrom fractions import Fraction\nfrom itertools import count\n\nt, w, b = map(int, stdin.readline().split())\n\nresult = Fraction(0)\n\nfor d in range(1, t + 1):\n    if not w % d and not b % d:\n        result += 1 / d\n\nprint(result)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\nassert solution(\"7 1 2\") == \"3/7\"\nassert solution(\"1 1 1\") == \"1/1\"\n\"\"\""
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\n\n'''"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\nassert solution(\"7 1 2\") == \"3/7\"\n\"\"\"\n\nfrom fractions import Fraction\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\nassert solution(\"7 1 2\") == \"3/7\"\n\"\"\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\nprint(\"Test PASSED\")\n\nsolution(\"7 1 2\")\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\n\nassert solution(test_stdin_2) == test_stdout_2\n\n\"\"\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\n\nassert solution(\"7 1 2\") == \"3/7\""
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7 0\") == \"-\", \"3 7 0 : incorrect result\"\nassert solution(\"2 0 1\") == \"+\", \"2 0 1 : incorrect result\"\nassert solution(\"1 1 0\") == \"0\", \"1 1 0 : incorrect result\"\nassert solution(\"0 0 1\") == \"?\", \"0 0 1 : incorrect result\"\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7 0\") == \"-\"\nassert solution(\"2 0 1\") == \"+\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 1\") == \"?\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('4 0 2') == '-'\nassert solution('1 1 0') == '0'\nassert solution('0 0 1') == '?'\n\n\"\"\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7 0\") == \"-\", \"case 1\"\nassert solution(\"2 0 1\") == \"+\", \"case 2\"\nassert solution(\"1 1 0\") == \"0\", \"case 3\"\nassert solution(\"0 0 1\") == \"?\", \"case 4\"\n\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7 0\") == \"-\"\nassert solution(\"2 0 1\") == \"+\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 1\") == \"?\"\n\n\"\"\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7 0\") == \"-\"\nassert solution(\"2 0 1\") == \"+\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 1\") == \"?\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 7 0') == '-'\nassert solution('2 0 1') == '+'\nassert solution('1 1 0') == '0'\nassert solution('0 0 1') == '?'\n\n\n\n:copyright: (c) by Vital.\n:license: MIT, see LICENSE for more details.\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7 0\") == \"-\"\nassert solution(\"2 0 1\") == \"+\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 1\") == \"?\"\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3, 7, 0) == '-'\nassert solution(2, 0, 1) == '+'\nassert solution(1, 1, 0) == '0'\nassert solution(0, 0, 1) == '?'\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7 0') == '-'\nassert solution('2 0 1') == '+'\nassert solution('1 1 0') == '0'\nassert solution('0 0 1') == '?'"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RURUU') == '3'\nassert solution('LRRDDD') == '0'\nassert solution('LDRRLRUURLDDLLU') == '-1'\nassert solution('UUU') == '-1'\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"UUD\") == \"0\"\nassert solution(\"URUR\") == \"1\"\nassert solution(\"RULL\") == \"2\"\nassert solution(\"LULL\") == \"2\"\nassert solution(\"URRR\") == \"0\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RURUU\") == \"3\"\nassert solution(\"LULR\") == \"0\"\nassert solution(\"DUDD\") == \"-1\"\nassert solution(\"UDDD\") == \"1\"\nassert solution(\"UUUUUUU\") == \"3\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(3)) == '-1'\nassert solution('RURU') == '3'\nassert solution('RULR') == '0'"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RURUU\") == 3\nassert solution(\"RULR\") == 0\nassert solution(\"UUU\") == -1\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RUU\") == \"1\"\nassert solution(\"RURUU\") == \"2\"\nassert solution(\"RUULRUU\") == \"3\"\nassert solution(\"RURULLRRR\") == \"3\"\nassert solution
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RURUU\") == \"3\"\nassert solution(\"RULR\") == \"0\"\nassert solution(\"UUU\") == \"-1\"\nassert solution(\"RDRUUUURDRDLLLLUUUU\") == \"6\"\nassert solution(\"RDRLL\") == \"-1\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RURUU') == '3'\nassert solution('RULR') == '0'\nassert solution('UUU') == '-1'\nassert solution('RRRDRDD') == '7'\nassert solution('RRRRRRRRRRRUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRUUUUUUUUUUUUUUUUUUUUUUUUU') == '0'\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RURUU\") == 3\nassert solution(\"UUU\") == 0\nassert solution(\"RULR\") == -1\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10010\") == 3\nassert solution(\"100101001010\") == 3\nassert solution(\"101010\") == 2\nassert solution(\"111010110110\") == 0\nassert solution(\"10110110110\") == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10010', 10) == 3\nassert solution('10101', 5) == 1\nassert solution('10101', 2) == -1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10010\") == 3\nassert solution(\"11010\") == 0\nassert solution(\"101010\") == -1\n\"\"\"\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100101\") == 3\n\"\"\"\n\nfrom typing import List, Tuple\nimport math\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10010\") == 3\n\n\n\"\"\""
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10101') == 3\nassert solution('1110111') == -1\n\"\"\""
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(10101) == 3\nassert solution(11010) == 3\nassert solution(11101010) == 3\nassert solution(1110101011101010) == -1\n\"\"\""
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('01') == '0'\nassert solution('11') == '1'\nassert solution('10010') == '3'\nassert solution('100101001010') == '2'\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('1') == ''\nassert solution('10') == ''\nassert solution('10010') == '3'\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('010010') == 3\nassert solution('101010') == 0\nassert solution('100010') == -1\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"30020 3\") == '1'\nassert solution(\"100 9\") == '2'\nassert solution(\"10203049 2\") == '3'"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20020 3') == '1'\n\nassert solution('1009') == '2'\n\nassert solution('10203049 2') == '3'\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('30020 3') == '1'\nassert solution('10203049 2') == '3'\n\"\"\"\n\nimport sys\n\nn, k = sys.stdin.readline().split()\nn, k = int(n), int(k)"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"30020 3\") == 1\nassert solution(\"100 9\") == 2\nassert solution(\"10203049 2\") == 3\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('30020 3') == '1'\nassert solution('100 9') == '2'\nassert solution('10203049 2') == '3'\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"30020 3\") == '1'\nassert solution(\"100 9\") == '2'\nassert solution(\"10203049 2\") == '3'\n\"\"\""
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 10 3') == '1'\nassert solution('10000000000 1000000000 3') == '0'\nassert solution('100 10 3') == '2'\nassert solution('1000 0 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('30020 3') == '1'\nassert solution('100 9') == '2'\nassert solution('10203049 2') == '3'\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(30020) == '1'\nassert solution(100) == '2'\nassert solution(10203049) == '3'\n\"\"\""
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"30020 3\") == \"1\"\nassert solution(\"100 9\") == \"2\"\nassert solution(\"10203049 2\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"5 5 25 4 3\") == \"1 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 8 1 1\") == \"3 2 3\"\n\nassert solution(\"4 2 9 4 2\") == \"2 1 1\"\n\nassert solution(\"5 5 25 4 3\") == \"1 1 1\"\n\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n\n\"\"\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 9 4 2\") == '2 1 1'\nassert solution(\"5 5 25 4 3\") == '1 1 1'\n\"\"\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n\"\"\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 8 1 1\") == \"3 2 3\"\nassert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"5 5 25 4 3\") == \"1 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n\"\"\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 8 1 1\") == \"3 2 3\"\nassert solution(\"5 4 5 4 3\") == \"1 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\""
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 9 1 4\") == \"3 1 1\"\nassert solution(\"5 5 25 4 3\") == \"1 1 1\"\nassert solution(\"100 100 1 100 1\") == \"101010101010101\"\n\nprint(\"PASSED\")\n\"\"\"\n\nimport sys"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n\n\n\"\"\""
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 8 1 1') == '3 2 3'\nassert solution('4 2 9 4 2') == '2 1 1'\nassert solution('5 5 25 4 3') == '1 1 1'\nassert solution('100 100 1000000000000000000 100 100') == '101010101010101 50505050505051 50505050505051'\n\"\"\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 8 1 1\") == \"3 2 3\"\nassert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"5 5 25 4 3\") == \"1 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n\n\"\"\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nKuroo\\nShiro\\nKatie\") == \"Kuro\"\nassert solution(\"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\") == \"Shiro\"\nassert solution(\"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\") == \"Draw\"\nassert solution(\"1\\nabcabc\\ncbabac\\nababca\") == \"Katie\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'Draw'\nassert solution('Kuroo') == 'Kuro'\nassert solution('Shiro') == 'Shiro'\nassert solution('Katie') == 'Katie'\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nKuroo\\nShiro\\nKatie\") == \"Kuro\"\nassert solution(\"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\") == \"Shiro\"\nassert solution(\"1\\nabcabc\\ncbabac\\nababca\") == \"Katie\"\nassert solution(\"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\") == \"Draw\"\n\"\"\"\n\nimport collections\nimport itertools\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nKuroo\\nShiro\\nKatie') == 'Kuro'\nassert solution('7\\ntreasurehunt\\nthreefriends\\nhiCodeforces') == 'Shiro'\nassert solution('15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE') == 'Draw'\n\n\"\"\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Kuroo\\nShiro\\nKatie') == 'Kuro'\nassert solution('treasurehunt\\nthreefriends\\nhiCodeforces') == 'Shiro'\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nKuroo\\nShiro\\nKatie') == 'Kuro'\nassert solution('7\\ntreasurehunt\\nthreefriends\\nhiCodeforces') == 'Shiro'\nassert solution('1\\nabcabc\\ncbabac\\nababca') == 'Katie'\nassert solution('15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE') == 'Draw'\n\nprint('Success')\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nKuroo\\nShiro\\nKatie\") == \"Kuro\"\nassert solution(\"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\") == \"Shiro\"\nassert solution(\"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\") == \"Draw\"\nassert solution(\"1\\nabcabc\\ncbabac\\nababca\") == \"Katie\""
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nKuroo\\nShiro\\nKatie') == 'Kuro'\nassert solution('7\\ntreasurehunt\\nthreefriends\\nhiCodeforces') == 'Shiro'\nassert solution('15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE') == 'Draw'\n\"\"\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nKuroo\\nShiro\\nKatie\") == 'Kuro'\nassert solution(\"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\") == 'Shiro'\nassert solution(\"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\") == 'Draw'\nassert solution(\"1\\nabcabc\\ncbabac\\nababca\") == 'Katie'"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\nKuroo\\nShiro\\nKatie') == \"Kuro\"\nassert solution('7\\ntreasurehunt\\nthreefriends\\nhiCodeforces') == \"Shiro\"\nassert solution('15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE') == \"Draw\"\nassert solution('1\\nabcabc\\ncbabac\\nababca') == \"Katie\"\n\n\"\"\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 10 5 4\") == 1\nassert solution(\"12 4 12 4 1\") == 3\nassert solution(\"15 1 100 0 0\") == 15\n\"\"\"\n\nimport math\nc, v_0, v_1, a, l = map(int, input().split())\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5 10 5 4') == '1'\nassert solution('12 4 12 4 1') == '3'\nassert solution('15 1 100 0 0') == '15'\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5 10 5 4') == '1'\nassert solution('12 4 12 4 1') == '3'\nassert solution('15 1 100 0 0') == '15'\nassert solution('3 5 4 2') == '5'\n\nprint('Success')"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 10 5 4\") == '1'\nassert solution(\"12 4 12 4 1\") == '3'\nassert solution(\"15 1 100 0 0\") == '15'\n\nimport codewars_test as test\n\ntest.assert_equals(solution(\"5 5 10 5 4\"), '1')\ntest.assert_equals(solution(\"12 4 12 4 1\"), '3')\ntest."
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5 10 5 4') == '1'\nassert solution('12 4 12 4 1') == '3'\n\"\"\""
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n\"\"\""
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\nassert solution(\"5 5 5 5 5\") == \"1\""
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"27\") == 3\nassert solution(\"3\") == \"3\"\nassert solution(\"23\") == 3\nassert solution(\"14\") == 2\nassert solution(\"11\") == 3\n\"\"\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('27') == '3 5 11 11'\nassert solution('28') == '4 7 13'\nassert solution('91') == '2 3 5 7'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 3\nassert solution('4') == 4\nassert solution('5') == 5\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('15') == '3 1 7'\nassert solution('10') == '3 1 7'\nassert solution('13') == '3 1 7'\nassert solution('4') == '1 1'\nassert solution('8') == '3 1 7'\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('27') == '3 11 11'\n\"\"\"\n\nimport math\nimport sys\nimport time\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7') == \"2 3\"\nassert solution('19') == \"2 5 7\"\nassert solution('30') == \"2 2 5\"\nassert solution('30') == \"3 2 5\"\nassert solution('11') == \"5 5\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"27\") == \"3 5 11 11\"\nassert solution(\"73\") == \"2 2 3 5\"\nassert solution(\"13\") == \"1 3 5 7\"\nassert solution(\"5\") == \"1 3 5\"\nassert solution(\"6\") == \"1 3 5\"\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11') == '5 3 2'\n\"\"\""
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9') == 3\nassert solution('7') == 2\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"27\") == \"3 11 11\"\n\"\"\""
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".*..\") == \"YES\"\nassert solution(\"..*..\") == \"YES\"\nassert solution(\"*****\") == \"NO\"\nassert solution(\".*.\\n.*.\\n.*.\") == \"YES\"\nassert solution(\"..*..\\n.*.\\n*..*\") == \"NO\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n.*..\\n....\\n.*..\\n\") == \"YES\\n1 2\"\nassert solution(\"3 3\\n..*\\n.*.\\n*..\\n\") == \"NO\"\nassert solution(\"6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n..*..\\n\") == \"YES\\n3 3\"\n\"\"\""
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n.*..\\n....\\n.*..\\n') == 'YES\\n1 2'\nassert solution('3 3\\n..*\\n.*.\\n*..\\n') == 'NO'\nassert solution('6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n..*..\\n') == 'YES\\n3 3'\nassert solution('6 5\\n.**.\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n*..*\\n') == 'YES\\n3 3'\nassert solution('6 5\\n.**.\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n*..*\\n') == 'YES\\n4 5'"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n.*..\\n....\\n.*..') == 'YES\\n1 2'\nassert solution('3 3\\n..*\\n.*.\\n*..') == 'NO'\nassert solution('6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n..*..') == 'YES\\n3 3'\nassert solution('2 3\\n.*\\n.\\n*') == 'NO'\nassert solution('6 5\\n*...\\n.*.\\n*..\\n*..\\n*..') == 'NO'"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n.*..\\n....\\n.*..\\n\") == \"YES\\n1 2\"\nassert solution(\"3 3\\n..*\\n.*.\\n*..\\n\") == \"NO\"\nassert solution(\"6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n..*..\") == \"YES\\n3 3\"\n\nprint(solution(\"6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n..*..\"))"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n.*..\\n....\\n.*..\\n\") == \"YES\\n1 2\"\n\"\"\"\n\nfrom collections import deque\nfrom math import sqrt\nfrom typing import List"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n.*..\\n....\\n.*..\\n\") == \"YES\\n1 2\"\nassert solution(\"3 3\\n.*\\n.*\\n*.\") == \"NO\"\nassert solution(\"6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n..*..\") == \"YES\\n3 3\"\n\"\"\""
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 4\\n.*..\\n....\\n.*..\"\n) == \"YES\\n1 2\"\n\nassert solution(\n    \"3 3\\n..*\\n.*.\"\n) == \"NO\"\n\nassert solution(\n    \"6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n..*..\"\n) == \"YES\\n3 3\"\n\nassert solution(\n    \"6 5\\n.....\\n.....\\n*****\\n.....\\n.....\\n\"\n) == \"YES\\n2 1\"\n\nassert solution(\n    \"4 4\\n.*.*\\n....\\n.*.*\"\n) == \"YES\\n0 0\""
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 4\n.*..\n....\n.*..\n\nOutput\nYES\n1 2''') == '''YES\n1 2'''\nassert solution('''6 5\n..*..\n..*..\n*****\n..*..\n..*..\n..*..\n\nOutput\nYES\n3 3''') == '''YES\n3 3'''\nassert solution('''1 1\n*''') == '''YES\n0 0'''\nassert solution('''2 3\n*.*\n*.*\n*.*\n\nOutput\nNO\n\nassert solution('''2 2\n.*\n.*\n\nOutput\nNO"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n.*..\\n....\\n.*..\") == \"YES\\n1 2\"\nassert solution(\"3 3\\n.*..\\n.*.\\n*..\") == \"NO\"\nassert solution(\"6 5\\n.*..\\n.*..\\n*****\\n..*..\\n..*..\\n..*..\") == \"YES\\n5 3\"\nassert solution(\"1 1\\n.*\") == \"YES\\n0 0\"\n\"\"\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n\nassert solution(\"5 6 3 7\") == \"8\"\nassert solution(\"8 3 5 7\") == \"8\""
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 7 3 8') == '15'\nassert solution('2 7 3 7') == '14'\nassert solution('30 6 17 19') == '0'\n\n\"\"\"\nimport sys\nimport os\n\n__dir__ = os.path.dirname(os.path.abspath(__file__))\nsys.path.append(__dir__)\nsys.path.append(os.path.abspath(os.path.join(__dir__, '../..')))\n\nimport time\nimport traceback\nfrom typing import Dict, Tuple, List\nfrom utils import logger\nfrom utils import perf\nfrom utils import parsing\nfrom utils import settings\nfrom utils import suppress\nfrom utils import redis_pool\n\nlogger = logger.get_logger(__file__)\n\nlogger.info(\"finished peparing.\")\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 7 3 8\") == '15'\nassert solution(\"2 7 3 7\") == '14'\nassert solution(\"30 6 17 19\") == '0'\n\n\"\"\""
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\nassert solution(\"31 7 3 9\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 -3 1\") == \"3\"\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 2 1') == '2'\nassert solution('1 1 1') == '1'\nassert solution('1 1 -2 1 1 1 1') == '-2'\n\n'''\n\n'''"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n-2 2 -3 1\") == 3\n\"\"\""
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n-2 2 -3 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 -5 -3') == -1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n-2 2 -3 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n-2 2 -3 1\") == \"3\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n-2 2 -3 1\") == \"3\"\nassert solution(\"3\\n2 -5 -3\") == \"-1\"\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n-2 2 -3 1\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 -5 -3\") == \"3\"\n\n\"\"\"\nfrom collections import defaultdict\nfrom typing import List, Tuple\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 1\\n1 1\") == \"2\""
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 1\\n1 2\\n1 3\\n') == '6'\nassert solution('3 3\\n1 1\\n1 1\\n1 3\\n') == '2'\nassert solution('4 10\\n5 3\\n2 1\\n3 2\\n5 1\\n') == '10'\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 1\\n1 2\\n1 3\") == \"6\"\nassert solution(\"3 3\\n1 1\\n1 1\\n1 3\") == \"2\"\nassert solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\") == \"10\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\") == \"10\"\nassert solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\") == \"10\"\nassert solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\") == \"10\"\n\"\"\"\n\nimport sys\n\nMOD = 10 ** 9 + 7\n\nn, T = [int(x) for x in sys.stdin.readline().split()]\n\nplaylist = []\n\nfor i in range(n):\n    t, g = [int(x) for x in sys.stdin.readline().split()]\n    playlist.append((t, g))\n\nplaylist = sorted(playlist, key=lambda x: (x[1], x[0]))\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 3) == 6\nassert solution(3, 10) == 10\n\"\"\"\n\nn, t = [int(i) for i in stdin.readline().strip().split(' ')]\nsongs = [list(map(int, stdin.readline().strip().split(' '))) for i in range(n)]"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 1\\n1 2\\n1 3\") == 6\nassert solution(\"3 3\\n1 1\\n1 1\\n1 3\") == 2\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 1\\n1 2\") == 2\nassert solution(\"3 3\\n1 1\\n1 1\\n1 3\") == 2\nassert solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\") == 10\n\nimport sys\nassert len(sys.argv) == 3\nimport itertools\nimport math\n\nn, t = [int(i) for i in sys.argv[1].split(\" \")]\ng = [[int(i) for i in sys.argv[2].split(\" \")]]\nfor i in range(n - 1):\n    g.append([int(j) for j in sys.argv[i + 3].split(\" \")])\n\ng_it = iter(g)\ngg_it = iter(g_it)\nnext(gg_it)\n\nans = 0\nfor g1, g2 in zip(g, g_it):\n    ans += sum(itertools.product(g1, g2))\n\nprint(ans)"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10\\n5 3\\n2 1\\n3 2\\n5 1') == '10'\n\"\"\"\n\n\nimport itertools\nimport sys\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 1\\n1 2\\n1 3\\n\") == \"6\"\nassert solution(\"3 3\\n1 1\\n1 1\\n1 3\\n\") == \"2\"\nassert solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\\n\") == \"10\"\nassert solution(\"7 15\\n9 6\\n2 3\\n3 2\\n6 1\\n4 5\\n9 8\\n7 5\\n7 4\\n6 3\\n7 6\\n5 3\\n8 9\\n4 1\\n5 2\\n3 1\\n6 4\\n8 1\\n7 2\\n3 4\\n\") == \"37\"\n\"\"\"\n\nn, T = list(map(int, input().split()))"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10\\n5 3\\n2 1\\n3 2\\n5 1') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4') == '333333338'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4') == '333333338'\n\n\"\"\"\n\nimport random\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '333333338'\nassert solution('2') == '2'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"2\"\nassert solution(4) == \"333333338\"\nassert solution(100) == \"9835041239\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '333333338'\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"333333338\"\nassert solution(\"2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '333333338'\nassert solution('1') == '1'\nassert solution('2') == '2'\n\"\"\"\nimport math"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 3\nassert solution(\"4\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 2\nassert solution(\"3\") == 3\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"333333338\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"1 12 1 12\") == \"4\"\nassert solution(\"50 100 3 30\") == \"0\"\n\"\"\""
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2\") == 2\n\"\"\"\n\nimport unittest\n\nfrom collections import Counter\n\nLIMIT_NUMBER = 10 ** 9\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"1 12 1 12\") == \"4\"\nassert solution(\"50 100 3 30\") == \"0\"\n\n\"\"\"\n\nimport sys\nfrom typing import List, Dict, Tuple"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 2\") == 2\nassert solution(\"1 12 1 12\") == 4\nassert solution(\"50 100 3 30\") == 0"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 2\") == 2\nassert solution(\"1 12 1 12\") == 4\nassert solution(\"50 100 3 30\") == 0\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1 2') == '2'\nassert solution('1 12 1 12') == '4'\nassert solution('50 100 3 30') == '0'\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 1 2') == 2\nassert solution('1 12 1 12') == 4\nassert solution('50 100 3 30') == 0\n\"\"\"\n\nl, r, x, y = [int(i) for i in input().split()]\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 1 2\") == \"2\"\nassert solution(\"1 12 1 12\") == \"4\"\nassert solution(\"50 100 3 30\") == \"0\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\nprint(solution(str(input())))\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 2\") == 2\nassert solution(\"1 12 1 12\") == 4\nassert solution(\"50 100 3 30\") == 0\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 10\") == \"2\"\nassert solution(\"21 31\") == \"9\"\nassert solution(\"5 10\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 10\") == \"2\"\n\"\"\"\n\nimport sys\n\na, b = [int(i) for i in sys.stdin.readline().split()]\n\nmin_k = 0\nwhile a * min_k % b!= 0 or b * min_k % a!= 0:\n    min_k += 1\n\nprint(min_k)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10\") == '2'\nassert solution(\"6 10\") == '2'\nassert solution(\"21 31\") == '9'\nassert solution(\"5 10\") == '0'\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10\") == \"0\"\nassert solution(\"6 10\") == \"2\"\nassert solution(\"21 31\") == \"9\"\nassert solution(\"5 10\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 10\") == \"2\"\nassert solution(\"21 31\") == \"9\"\nassert solution(\"5 10\") == \"0\"\nassert solution(\"11 21\") == \"1\"\n\"\"\"\n\nimport math\n\nn1, n2 = input().split()\nn1, n2 = int(n1), int(n2)"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 10') == '2'\nassert solution('21 31') == '9'\nassert solution('5 10') == '0'\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 10\") == \"2\"\nassert solution(\"21 31\") == \"9\"\nassert solution(\"5 10\") == \"0\"\n\n\n-----Explanation-----\n\nNeko has two numbers: $a = 6$, $b = 10$. He wants to find a non-negative integer $k$ so that the least common multiple of $a+k$ and $b+k$ is the smallest possible. We have a solution: $k = 2$.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 10') == '2'\nassert solution('21 31') == '9'\nassert solution('5 10') == '0'\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 10') == '2'\n\"\"\"\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 10') == '2'\nassert solution('21 31') == '9'\nassert solution('5 10') == '0'\n\nprint('Success')\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10\\n8 9\") == \"4\"\nassert solution(\"3 5\\n4 4 4\") == \"3\""
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n1 3 7 9 9') == '5'\nassert solution('3 5\\n4 4 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n1 2 3 4') == '2'\nassert solution('4 5\\n1 1 3 4') == '0'\nassert solution('4 5\\n2 3 4 5') == '1'\n\n---"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 10') == '4'\nassert solution('3 5') == '3'\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nmarks = list(map(int, sys.stdin.readline().split()))\nans = 0\nfor i in range(len(marks)):\n    ans += (k - marks[i])\n\nprint(ans)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\") == \"3\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"2 10\") == \"4\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"3 9\") == \"2\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10\") == 4\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\") == \"3\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"2 10\") == \"3\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10\\n8 9\") == \"4\"\nassert solution(\"3 5\\n4 4 4\") == \"3\""
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 10\\n8 9\") == \"4\"\nassert solution(\"8 8 8\\n9 9 9\") == \"0\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 10\") == \"4\"\nassert solution(\"8 9\") == \"4\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"2 4\") == \"0\"\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n10 0 -7 2 6\\n') == '4'\nassert solution('7\\n0 0 1 -1 0 0 2\\n') == '0'"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n10 0 -7 2 6\") == \"4\"\nassert solution(\"7\\n0 0 1 -1 0 0 2\") == \"0\""
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n10 0 -7 2 6') == '4'\nassert solution('7\\n0 0 1 -1 0 0 2') == '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n10 0 -7 2 6\\n') == '4'\nassert solution('7\\n0 0 1 -1 0 0 2\\n') == '0'\n\nassert solution('5\\n-4 3 0 -2\\n') == '4'\nassert solution('7\\n0 0 1 -1 0 0 2\\n') == '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n10 0 -7 2 6\") == \"4\"\nassert solution(\"7\\n0 0 1 -1 0 0 2\") == \"0\"\n\"\"\"\n\nimport math\n\nn = int(input())\narr = list(map(int, input().split()))"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution([\"5\", \"10 0 -7 2 6\"]) == '4'\nassert solution([\"7\", \"0 0 1 -1 0 0 2\"]) == '0'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 10 0 -7 2 6') == '4'\nassert solution('7 0 0 1 -1 0 0 2') == '0'\nassert solution('10 0 -7 2 6') == '4'\nassert solution('6 0 -7 2') == '0'\nassert solution('6 0 -7 2') == '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n10 0 -7 2 6') == '4'\nassert solution('7\\n0 0 1 -1 0 0 2') == '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n10 0 -7 2 6') == '4'\nassert solution('7\\n0 0 1 -1 0 0 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 0 -7 2 6\") == '4'\nassert solution(\"7 0 0 1 -1 0 0 2\") == '0'\nassert solution(\"1\") == '1'\nassert solution(\"1 2 3 4 5\") == '1'\n\"\"\"\nimport math\nfrom typing import List\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7') == '3'\nassert solution('14') == '9'\nassert solution('50') == '1'\n\n\"\"\""
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"3\"\nassert solution(\"8\") == \"1\"\nassert solution(\"10\") == \"0\"\nassert solution(\"14\") == \"9\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7') == '3'\nassert solution('14') == '9'\nassert solution('50') == '1'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\") == '3'\nassert solution(\"14\") == '9'\nassert solution(\"50\") == '1'\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n') == '3'\nassert solution('14\\n') == '9'\nassert solution('50\\n') == '1'\n\nassert solution('50\\n') == '1'\n\nassert solution('50\\n') == '1'\n\"\"\""
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6\\n2 3\") == \"1\\n1 6\\n2 3\"\nassert solution(\"36 5\\n10 16\") == \"3\\n16 5\\n5 16\"\nassert solution(\"3 5\\n2 1\") == \"-1\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 6\\n2 3') == '1\\n1 6\\n2 3'\n\nassert solution('36 5\\n10 16') == '3\\n16 5\\n5 16'\n\nassert solution('3 5\\n2 1') == '-1'\n\nassert solution('22 17\\n8 19') == '3\\n18 19'\n\nprint('The local tests are done. Try Solution for HackerRank')"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 6\") == \"1\"\nassert solution(\"36 5\") == \"3\"\nassert solution(\"3 5\") == \"16 5\"\nassert solution(\"2 1\") == \"-1\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 6\\n2 3\") == \"1\\n1 6\"\n\"\"\""
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 6\\n2 3') == '1\\n1 6\\n2 3'\n\"\"\"\n\na, b = [int(s) for s in stdin.readline().split()]\n\nprint(min(int(a/2), int(b/2)))\nprint(max(a, b))\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 6\n2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"36 5\n10 16\n\"\"\") == \"3\"\n\"\"\""
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 6\\n2 3') == '1\\n1 6\\n2 3'\nassert solution('36 5\\n10 16') == '3\\n16 5\\n5 16'\nassert solution('3 5\\n2 1') == '-1'\nprint('The local tests are done.')\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 6\n2 3\n''') == '1'\nassert solution('''\n36 5\n10 16\n''') == '3'\n\nassert solution('''\n3 5\n2 1\n''') == '-1'\nassert solution('''\n1 1\n1 1\n''') == '0'\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('3 5') == '1 6'\nassert solution('2 6') == '1 6'\nassert solution('3 5') == '1 6'\nassert solution('2 1') == '-1'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(0, 1, 1, 0) == 'Polycarp'\nassert solution(0, 2, 2, 0) == 'Vasiliy'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2 1 2 2\n''') == 'Vasiliy'\n\nassert solution('''\n4 7 7 4\n''') == 'Polycarp'\n'''"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\"\n\n\"\"\""
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\n\"\"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 1 2 2\"\n) == \"Polycarp\"\nassert solution(\n    \"4 7 7 4\"\n) == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 7\\n1 1') == '6'\nassert solution('1 1\\n1 1') == '5'\nassert solution('11 6\\n1 1') == '5'\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 7') == '6'\nassert solution('1 1') == '5'\nassert solution('11 6') == '5'\n\"\"\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 7\") == \"6\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"11 6\") == \"5\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 7') == '6'\nassert solution('1 1') == '5'\nassert solution('11 6') == '5'\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"5\"\nassert solution(\"1 7\") == \"6\"\nassert solution(\"11 6\") == \"5\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 7') == '6'\nassert solution('1 1') == '5'\nassert solution('11 6') == '5'\nprint('Test pass.')"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 7\") == \"6\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"11 6\") == \"5\"\nprint(\"Ok!\")"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 7') == '6'\nassert solution('1 1') == '5'\nassert solution('11 6') == '5'\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 7''') == '6'\nassert solution('''1 1''') == '5'\nassert solution('''11 6''') == '5'\nprint(\"Well done!\")\n\n'''\n--- Part Two ---\n\nPetr now wants to add to his calendar some of the holidays: the Day of the Programmer,\u00a0Xmas\u00a0and New Year's Day.\n\nThe Day of the Programmer is an international holiday and is celebrated on the day of the year\u00a0y.\n\nNew Year's Day is celebrated on the day\u00a0(y + 1) modulo 365.\n\nThe Xmas holiday is celebrated on the very last day of the year\u00a0y, that is, on day 365 of the year.\n\nIt is guaranteed that the calendar will be fully expanded by then.\n\nYour task is to calculate the number of rows that should be added to the calendar in order to hold all the holidays.\n\n\n-----Input-----\n\nThe only line contain two integers y and d (1 \u2264 y \u2264 109, 1 \u2264 d \u2264 365)\u00a0\u2014 the year and the day.\n\n\n-----Output-----\n\nPrint single integer: the number of rows that should be added to the calendar in order to hold all the holidays.\n\n\n-----Examples-----\nInput\n1989 8\n\nOutput\n2\n\n\n-----Note-----\n'''\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 7\\n1 1') == '5'\nassert solution('1 1\\n1 1') == '5'\nassert solution('11 6\\n11 6') == '5'\n\"\"\"\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10\") == \"2\"\nassert solution(\"2015 2015\") == \"1\"\nassert solution(\"72057594 000000000 72057595 000000000\") == \"26\""
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10') == '2'\nassert solution('2015 2015') == '1'\nassert solution('100 105') == '0'\nassert solution('72057594 000000000 72057595 000000000') == '26'\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5, 10) == 2\nassert solution(2015, 2015) == 1\nassert solution(100, 105) == 0\nassert solution('72057594000000000', '72057595000000000') == 26\nassert solution(72057594000000000, 72057595000000000) == 1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10\") == 1\nassert solution(\"0 0\") == 0\nassert solution(\"0 0 1\") == 0\nassert solution(\"1 1\") == 0\nassert solution(\"1 10\") == 2\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10\") == \"2\"\nassert solution(\"2015 2015\") == \"1\"\nassert solution(\"72057594 000000000 72057595 000000000\") == \"26\"\n\n\"\"\"\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10\") == \"2\"\nassert solution(\"2015 2015\") == \"1\"\nassert solution(\"100 105\") == \"0\"\nassert solution(\"72057594 000000000 72057595 000000000\") == \"26\"\n\"\"\"\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 10') == '2'\nassert solution('2015 2015') == '1'\nassert solution('100 105') == '0'\nassert solution('72057594000000000 72057595000000000') == '26'\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10\") == 2\nassert solution(\"2015 2015\") == 1\nassert solution(\"72057594 000000000 72057595 000000000\") == 26\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10\") == \"2\"\nassert solution(\"2015 2015\") == \"1\"\nassert solution(\"100 105\") == \"0\"\nassert solution(\"72057594000000000 72057595000000000\") == \"26\"\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10\") == \"2\"\nassert solution(\"2015 2015\") == \"1\"\nassert solution(\"100 105\") == \"0\"\nassert solution(\"72057594 000000000 72057595 000000000\") == \"26\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"6\"\n\"\"\""
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '6'\nassert solution('5') == '10'\n\"\"\"\n\nn = int(input())\nnum_layers = (n + 1) * n // 2\nprint(num_layers)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 4\nassert solution(\"4\") == 6\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 2\nassert solution('3') == 4\nassert solution('4') == 6\nassert solution('5') == 8\nassert solution('6') == 10\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '6'\n\"\"\""
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('3') == '4'\nassert solution('2') == '2'\n\"\"\"\n\nimport math\n\nn = int(input())\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 4\nassert solution(\"4\") == 6\n\n\"\"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == 6\nassert solution('3') == 4\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 4\nassert solution(\"4\") == 6\n\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 2\nassert solution('3') == 4\nassert solution('4') == 6\n\"\"\""
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3\") == \"1\"\nassert solution(\"2 2 7\") == \"1\"\nassert solution(\"3 1 1\") == \"6\"\n\"\"\"\n\nfrom collections import Counter\nfrom math import factorial"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1, 1, 2) == 1\nassert solution(1, 1, 2) == 1\nassert solution(1, 1, 2) == 1\nassert solution(1, 1, 2) == 1\nassert solution(1, 1, 2) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 30\\n4 3') == '1'\nassert solution('3 1 1\\n1 1 1') == '6'\nassert solution('3 1 1\\n1 2 2') == '3'"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 30') == '1'\nassert solution('2 2 7') == '1'\nassert solution('3 1 1') == '6'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 30\") == \"1\"\nassert solution(\"2 2 7\") == \"1\"\nassert solution(\"3 1 1\") == \"6\"\nassert solution(\"4 3 1\") == \"6\"\n\nprint(\"Success\")"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 30') == '1'\nassert solution('4 3') == '1'\nassert solution('3 1 1') == '6'\nassert solution('1 1 1') == '6'\n\n\"\"\""
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 30\\n4 3') == '1'\nassert solution('2 2 7\\n4 3') == '1'\nassert solution('3 1 1\\n1 1 1') == '6'\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 30') == '1'\nassert solution('4 3') == '1'\nassert solution('2 2 7') == '1'\nassert solution('3 1 1') == '6'\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 3') == '1'\nassert solution('2 2 7') == '1'\nassert solution('3 1 1') == '6'"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 30\") == \"1\"\nassert solution(\"4 3 7\") == \"1\"\nassert solution(\"3 1 1\") == \"6\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_0) == solution(test_1)\n\"\"\"\n\ntest_0 = \"\"\"\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\"\"\"\n\ntest_1 = \"\"\"\n5 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\"\"\""
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"YES\"\nassert solution(\"5 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 100\\n0 0 0 0\\n1 2\") == \"YES\"\nassert solution(\"4 100\\n0 0 0 0\\n1 2\") == \"YES\"\nassert solution(\"4 100\\n0 0 0 0\\n1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 100\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"YES\"\nassert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"YES\"\nassert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'YES'\nassert solution('4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\") == \"YES\"\nassert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\") == \"YES\"\nassert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\") == \"NO\"\nassert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\") == \"NO\"\nassert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\") == \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'YES'\nassert solution('5 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'NO'\nassert solution('4 10\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'NO'\nassert solution('4 10\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 100\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"YES\"\nassert solution(\"4 100\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == 'YES'\nassert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == 'YES'\n\n\"\"\"\n\nfrom typing import Dict\nfrom collections import defaultdict"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"YES\"\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n, k = map(int, sys.stdin.readline().split())\n    v, a = [0] * n, list(map(int, sys.stdin.readline().split()))\n    for i in range(n):\n        if v[i] < a[i]:\n            v[i] += k\n    if v == a:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3 2 2\n\"\"\") == 20\nassert solution(\n\"\"\"\n5 6 7\n\"\"\") == 1520\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == 20\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '1 + 2 + 3 = 6'\nassert solution('5 6 7') == '1520'\nassert solution('3 1 3') == '3'\nassert solution('4 4 4') == '16'"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 2') == 20\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"20\"\nassert solution(\"5 6 7\") == \"1520\""
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\") == 20\nassert solution(\"5 6 7\") == 1520\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '1 + 2 + 3 = 6'\nassert solution('2 2 3') == '2 + 4 + 6 = 12'\nassert solution('5 6 7') == '15 + 20 + 28 = 53'\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\") == 20\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\") == \"20\"\nassert solution(\"5 6 7\") == \"1520\"\n\"\"\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 2') == 20\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == \"YES\"\nassert solution(\"AB\\nXC\\nAC\\nBX\") == \"NO\""
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == 'YES'\nassert solution(\"AB\\nXC\\nAC\\nBX\") == 'NO'\n\"\"\""
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"AB\\nXC\\nXB\\nAC\\n\"\n) == 'YES'\nassert solution(\n    \"AB\\nAC\\nXC\\nBX\\n\"\n) == 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == \"YES\"\nassert solution(\"AB\\nXC\\nAC\\nBX\") == \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\\n\") == \"YES\"\nassert solution(\"AB\\nXC\\nAC\\nBX\\n\") == \"NO\"\nassert solution(\"AB\\nXX\\nAC\\nBX\\n\") == \"YES\"\nassert solution(\"AB\\nXX\\nXX\\nAB\\n\") == \"NO\"\nassert solution(\"XX\\nXX\\nXX\\nXX\\n\") == \"YES\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == \"YES\"\nassert solution(\"AB\\nXC\\nAC\\nBX\") == \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    'AB\\n'\n    'XC\\n'\n    'XB\\n'\n    'AC\\n'\n) == 'YES'\n\nassert solution(\n    'AB\\n'\n    'XC\\n'\n    'AC\\n'\n    'BX\\n'\n) == 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == \"YES\"\nassert solution(\"AB\\nXC\\nAC\\nBX\") == \"NO\"\n\"\"\""
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\nAB\nXC\nXB\nAC\n''') == 'YES'\nassert solution('''\nAB\nXC\nAC\nBX\n''') == 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == \"YES\"\nassert solution(\"AB\\nXC\\nAC\\nBX\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\\n12\") == \"12\"\nassert solution(\"16\\n11311\") == \"475\"\nassert solution(\"20\\n999\") == \"3789\"\nassert solution(\"17\\n2016\") == \"594\"\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13\\n12') == '12'\nassert solution('16\\n11311') == '475'\nassert solution('20\\n999') == '3789'\nassert solution('17\\n2016') == '594'"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"13\"\n) == '12'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13') == '12'\nassert solution('16') == '475'\nassert solution('20') == '3789'\nassert solution('17') == '594'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13\\n12') == '12'\nassert solution('16\\n11311') == '475'\nassert solution('20\\n999') == '3789'\n\"\"\"\n\nfrom itertools import product\nfrom typing import List\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"12\"\nassert solution(\"16\") == \"475\"\nassert solution(\"20\") == \"3789\"\nassert solution(\"17\") == \"594\"\n\n\"\"\"\n\nn = int(input())\nk = input()\n\nassert set(k) == set('0123456789'[:n])\n\nprint(int(k, n))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13\\n12\") == \"12\"\nassert solution(\"16\\n11311\") == \"475\"\nassert solution(\"17\\n2016\") == \"594\"\n\"\"\""
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13\\n12\\n') == '12\\n'\nassert solution('16\\n11311\\n') == '475\\n'\nassert solution('20\\n999\\n') == '3789\\n'\nassert solution('17\\n2016\\n') == '594\\n'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"12\"\nassert solution(\"16\") == \"475\"\nassert solution(\"20\") == \"3789\"\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13\") == \"12\"\nassert solution(\"16\") == \"475\"\nassert solution(\"20\") == \"3789\"\nassert solution(\"17\") == \"594\"\nassert solution(\"16\") == \"475\"\n\n\"\"\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"5\\n10 20 30 20 10\") == \"YES\"\nassert solution(\"4\\n1 2 1 2\") == \"NO\"\nassert solution(\"7\\n3 3 3 3 3 3 3\") == \"YES\""
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 5 5 5 4 2\") == 'YES'\nassert solution(\"5\\n10 20 30 20 10\") == 'YES'\nassert solution(\"4\\n1 2 1 2\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"5\\n10 20 30 20 10\") == \"YES\"\nassert solution(\"4\\n1 2 1 2\") == \"NO\"\nassert solution(\"7\\n3 3 3 3 3 3 3\") == \"YES\""
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 3 3 3\") == \"YES\"\nassert solution(\"1 2 1 2\") == \"YES\"\nassert solution(\"1 1 1 1 1\") == \"NO\"\nassert solution(\"4 4 4 4 4 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"5\\n10 20 30 20 10\") == \"YES\"\nassert solution(\"4\\n1 2 1 2\") == \"NO\"\n\nassert solution(\"7\\n3 3 3 3 3 3 3\") == \"YES\"\nassert solution(\"7\\n10 20 30 20 10\") == \"YES\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 5 5 5 4 2\\n\") == \"YES\"\nassert solution(\"7\\n3 3 3 3 3 3 3\\n\") == \"YES\"\nassert solution(\"8\\n1 2 1 2 1 2 1\\n\") == \"NO\"\n\n'''"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 2\") == \"YES\"\nassert solution(\"3 3 3 3 3 3\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"10 20 30 20 10\") == \"YES\"\nassert solution(\"5 3 5 3 5 3\") == \"YES\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"5\\n10 20 30 20 10\") == \"YES\"\nassert solution(\"4\\n1 2 1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"5\\n10 20 30 20 10\") == \"YES\"\nassert solution(\"4\\n1 2 1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"5\\n10 20 30 20 10\") == \"YES\"\nassert solution(\"4\\n1 2 1 2\") == \"NO\"\nassert solution(\"7\\n3 3 3 3 3 3 3\") == \"YES\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 3') == '5'\nassert solution('11 6') == '4'\nassert solution('20 20') == '1'\nassert solution('1000000 100') == '31248'\n\n\"\"\""
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 3\") == \"5\"\nassert solution(\"11 6\") == \"4\"\nassert solution(\"20 20\") == \"1\"\nassert solution(\"1000000 100\") == \"31248\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"5 3\") == \"4\"\nassert solution(\"11 6\") == \"4\"\nassert solution(\"1000000 100\") == \"31248\"\nprint('The local tests are done. Click on \"Check\" for more details about in-process outputs.')\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'''\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"11 3\"\n) == \"5\"\nassert solution(\n    \"11 6\"\n) == \"4\"\nassert solution(\n    \"20 20\"\n) == \"1\"\nassert solution(\n    \"1000000 100\"\n) == \"31248\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 3') == '5'\nassert solution('11 6') == '4'\nassert solution('20 20') == '1'\nassert solution('14 5') == '6'\nassert solution('1000000 100') == '31248'\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 3\") == \"5\"\nassert solution(\"11 6\") == \"4\"\nassert solution(\"20 20\") == \"1\"\nassert solution(\"1000000 100\") == \"31248\""
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 3\") == \"5\"\nassert solution(\"11 6\") == \"4\"\nassert solution(\"1000000 100\") == \"31248\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"11 6\") == \"4\"\nassert solution(\"20 20\") == \"1\"\nassert solution(\"1000000 100\") == \"31248\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 3') == '5'\nassert solution('11 6') == '4'\nassert solution('20 20') == '1'\nassert solution('14 5') == '6'\nassert solution('1000000 100') == '31248'\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\"4 4 2 0 1 1\") == \"-1\"\nassert solution(\"10 10 10 1 -1 0\") == \"-1\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == -1\nassert solution('4 3 2 2 -1 1') == '0 0'\nassert solution('4 4 2 0 1 1') == -1\nassert solution('10 10 10 1 -1 0') == -1\nassert solution('2 2 4 4 0 1 1') == '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '-1'\nassert solution('4 4 2 0 1 1') == '-1'\nassert solution('4 3 2 2 -1 1') == '0 0'\nassert solution('10 10 10 1 -1 0') == '-1'\nassert solution('10 100 10 1 -1 0') == '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\"4 4 2 0 1 1\") == \"-1\"\nassert solution(\"10 10 10 1 -1 0\") == \"-1\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\"4 4 2 0 1 1\") == \"-1\"\nassert solution(\"10 10 10 1 -1 0\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 3 2 2 -1 1\"\n) == \"0 0\"\nassert solution(\n    \"4 4 2 0 1 1\"\n) == \"-1\"\nassert solution(\n    \"10 10 10 1 -1 0\"\n) == \"-1\""
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3 2 2 -1 1''') == '0 0'\nassert solution('''4 4 2 0 1 1''') == '-1'\nassert solution('''10 10 10 1 -1 0''') == '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\"4 4 2 0 1 1\") == \"-1\"\nassert solution(\"10 10 10 1 -1 0\") == \"-1\"\n\"\"\""
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\"4 4 2 0 1 1\") == \"-1\"\nassert solution(\"10 10 10 1 -1 0\") == \"-1\"\n\"\"\"\n\nfrom collections import namedtuple\n\nCoordinate = namedtuple('Coordinate', 'x y')"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\"4 4 2 0 1 1\") == \"-1\"\nassert solution(\"10 10 10 1 -1 0\") == \"-1\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 3\\n2 1\") == 'YES'\nassert solution(\"5 5\\n3 3\\n3 3\") == 'NO'\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 3\\n2 1\") == \"YES\"\nassert solution(\"5 5\\n3 3\\n3 3\") == \"NO\"\nassert solution(\"4 2\\n2 3\\n1 2\") == \"YES\"\n\n---\n'''\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 3\\n2 1') == 'YES'\nassert solution('5 5\\n3 3\\n3 3') == 'NO'"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3\\n2 1\") == \"YES\"\nassert solution(\"5 5\\n3 3\\n3 3\") == \"NO\"\n\n\n-----BETTER SOLUTION-----\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2\\n\") == \"YES\"\nassert solution(\"5 5\\n3 3\\n3 3\\n\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 3\\n2 1\") == \"YES\"\nassert solution(\"5 5\\n3 3\\n3 3\") == \"NO\"\n\n\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 3\\n2 1') == 'YES'\nassert solution('5 5\\n3 3\\n3 3') == 'NO'\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"3 2\"\n\"1 3\"\n\"2 1\"\n) == \"YES\"\nassert solution(\n\"5 5\"\n\"3 3\"\n\"3 3\"\n) == \"NO\"\nassert solution(\n\"4 2\"\n\"2 3\"\n\"1 2\"\n) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n3 3\\n3 3') == 'YES'\nassert solution('5 5\\n3 3\\n3 3') == 'NO'\nassert solution('5 1\\n1 1\\n1 1') == 'YES'\nassert solution('1 1\\n1 1') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"5 3\") == \"NO\"\nassert solution(\"4 2\") == \"YES\"\n\n\n\"\"\""
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 30 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"inf\"\n\n\"\"\"\n\nfrom math import ceil\nfrom math import log2\nfrom typing import List\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123 1 2143435 4\") == '3'\nassert solution(\"123 1 2143435 4\") == '3'\n\"\"\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 1 1 1 1\") == \"inf\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"6\"\nassert solution(\"1 2 3 4 5 -6 -7 8 9 10 11 12\") == \"6\"\nassert solution(\"1 2 3 4 5 -6 -7 8 9 10 11 12 -13 14 15 16 17 18 19 20 21 22 23 24\") == \"6\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n1 2 3 4 5\n0 4 6 7 8 9\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n1 2 3 4 5\n0 4 -6 7 8 9\n\"\"\") == \"inf\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 30 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"inf\"\nassert solution(\"123 1 2143435 4\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input_string) == output_string"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 30 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"inf\"\nassert solution(\"123 1 2143435 4\") == \"inf\"\n\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"0\"\nassert solution(\"123 1 2143435 4\") == \"inf\"\n\"\"\""
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 30 4\\n6 14 25 48\\n\") == \"3\"\nassert solution(\"123 1 2143435 4\\n123 11 -5453 141245\\n\") == \"inf\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\\n...w...\\n........\\n..w..w..\\n\") == \"..w++w..\\n..+..+..\\n..+..+..\\n..w++w..\"\nassert solution(\"5 6\\n......\\n.w....\\n......\\n..w...\\n......\\n\") == \"......\\n+w+...\\n+.+...\\n++w...\\n......\\n\"\nassert solution(\"2 4\\n....\\n.w..\\n\") == \"....\\n.w..\\n\"\nassert solution(\"2 6\\nw..w.w\\n...w..\\n\") == \"w..w.w\\n.w..w.\\n.w..w.\\n\"\nassert solution(\"2 6\\nw...w\\n...w.\\n\") == \"w...w\\n...w.\\n\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8\\n..w..w..\\n........\\n..w..w..\\n') == '..w++w..\\n..+..+..\\n..+..+..\\n..w++w..'\nassert solution('5 6\\n......\\n.w....\\n......\\n..w...\\n......') == '......\\n+w+...\\n+.+...\\n++w...\\n......'\nassert solution('2 4\\n....\\n.w.') == '....\\n.w.'\nassert solution('2 6\\nw..w.w\\n...w..\\n') == '-1'\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".w...\") == \"..w..\"\nassert solution(\"......\") == \"......\"\nassert solution(\"w.w..w\") == \"..w+w..\"\nassert solution(\"..w..w\") == \"..w++w..\"\nassert solution(\"..w....\") == \"..w++w..\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8\\n........\\n........\\n..w..w\\n') == '..w++w..\\n..+..+..\\n..+..+..\\n..w++w..'\nassert solution('5 6\\n......\\n.w....\\n......\\n..w...\\n......\\n') == '......\\n+w+...\\n+.+...\\n++w...\\n......\\n'\nassert solution('2 4\\n....\\n.w.') == '....\\n.w..'\nassert solution('2 6\\nw..w\\n...w') == '-1'\nassert solution('3 3\\nw...\\n....\\n....') == '....\\n....\\n....'\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".w..w..\") == \"..w++w..\"\nassert solution(\".w....\") == \"..w+...\"\nassert solution(\".w.....\") == \"..w+....\"\nassert solution(\".w.....\") == \"..w+....\"\nassert solution(\"w.....\") == \"..w+....\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8\\n....\\n.w..\\n........\\n..w..\\n\") == \"..w++w..\\n..+..+..\\n..+..+..\\n..w++w..\"\nassert solution(\"5 6\\n......\\n.w....\\n......\\n..w...\\n......\") == \"......\\n+w+...\\n+.+...\\n++w...\\n......\"\nassert solution(\"2 4\\n....\\n.w..\\n\") == \"....\\n.w..\"\nassert solution(\"2 6\\nw..w.w\\n...w..\\n\") == \"w..w.w\\n.+...w\\nw..w.w\"\nassert solution(\"2 5\\nw..w.w\\n...w..\\n\") == \"w..w.w\\n.+...w\\nw..w.w\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\\n..w..w..\\n........\\n..w..w..\\n\") == \"..w++w..\\n..+..+..\\n..+..+..\\n..w++w..\"\nassert solution(\"5 6\\n......\\n.w....\\n......\\n..w...\\n......\") == \"......\\n+w+...\\n+.+...\\n++w...\\n......\"\nassert solution(\"2 4\\n....\\n.w..\\n\") == \"....\\n.w..\"\nassert solution(\"2 6\\nw..w.w\\n...w..\\n\") == \"1\"\nassert solution(\"2 6\\nw..w.w\\n...w..\\n\") == \"1\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n...w...\\n.w....\\n......\\n..w...\\n......\\n') == '......\\n.w....\\n.w..+.'\nassert solution('4 8\\n...w..\\n.w....\\n......\\n..w...\\n......\\n') == '......\\n.w....\\n.w..+.'\nassert solution('2 4\\n....\\n.w.') == '-1'\nassert solution('2 6\\nw..w\\n.w..\\n') == '-1'\n\nimport unittest\n\n\nclass Tests_Solution(unittest.TestCase):\n\n    def test_0(self):\n        self.assertEqual(solution('5 6\\n..w..\\n...w.\\n..w..\\n......\\n.w...\\n......\\n'), '......\\n.w..+.')\n\n    def test_1(self):\n        self."
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8\\n...w...\\n........\\n...w...\\n') == '...w...\\n...w...\\n........\\n...w...\\n'\nassert solution('5 6\\n......\\n.w....\\n......\\n..w...\\n......\\n') == '......\\n.w....\\n......\\n......\\n......\\n'\nassert solution('2 4\\n....\\n.w..\\n') == '....\\n.w..\\n'\nassert solution('2 6\\nw..w\\n...w\\n') == '-1'\nassert solution('2 6\\nw...\\n...w\\n') == '-1'\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\\n........\\n........\\n..w..w\\n\") == \"..w++w..\\n..+..+..\\n..+..+..\\n..w++w..\"\nassert solution(\"5 6\\n......\\n.w....\\n......\\n..w...\\n......\") == \"......\\n+w+...\\n+.+...\\n++w...\\n......\"\nassert solution(\"2 4\\n....\\n.w..\") == \"....\\n.w..\"\nassert solution(\"2 6\\nw..w\\n...w\") == \"-1\"\nassert solution(\"3 3\\n..w\\n...w\") == \"..w\\n...w\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n2\\n3') == 'YES\\n2 1'\nassert solution('100\\n2551\\n2557') == 'YES\\n1951 1949'\n\nimport sys\nsys.stdin = open(\"input.txt\")\nassert solution('15\\n4\\n8') == 'NO'\nassert solution('9960594\\n2551\\n2557') == 'YES\\n1951 1949'\nassert solution('9960594\\n2551\\n2557') == 'YES\\n1951 1949'\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n2\\n3') == 'YES\\n2 1'\nassert solution('100\\n2551\\n2557') == 'YES\\n1951 1949'\nassert solution('9960594\\n2551\\n2557') == 'NO'"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n2\\n3\") == 'YES\\n2 1'\nassert solution(\"100\\n2551\\n2557\") == 'YES\\n1951 1949'\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n2\\n3\") == \"YES\\n2 1\"\nassert solution(\"100\\n2551\\n2557\") == \"YES\\n1951 1949\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"YES\\n3 1\"\nassert solution(\"100\") == \"YES\\n1 1\"\nassert solution(\"15\") == \"YES\\n2 2\"\nassert solution(\"9960594\") == \"YES\\n1951 1949\"\n\n\"\"\""
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n2\\n3\") == \"YES\\n2 1\"\nassert solution(\"100\\n2551\\n2557\") == \"YES\\n1951 1949\"\nassert solution(\"9960594\\n2551\\n2557\") == \"YES\\n1951 1949\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15 100 1\") == \"YES\\n0 10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n2\\n3') == 'YES\\n2 1'\nassert solution('100\\n2551\\n2557') == 'YES\\n1951 1949'\nassert solution('15\\n4\\n8') == 'NO'"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n2\\n3') == 'YES\\n2 1'\nassert solution('100\\n2551\\n2557') == 'YES\\n1951 1949'\nassert solution('15\\n4\\n8') == 'YES\\n0 10'\nassert solution('9960594\\n2551\\n2557') == 'YES\\n1951 1949'\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 3\") == \"YES\\n2 1\"\nassert solution(\"9960594 2 2551 2557\") == \"YES\\n1951 1949\"\nassert solution(\"0 0\") == \"NO\"\nassert solution(\"0 1\") == \"NO\"\nassert solution(\"1 1\") == \"YES\\n1 1\"\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('19') == 'nineteen'\nassert solution('20') == 'twenty'\nassert solution('19') == 'nineteen'\nassert solution('16') =='sixteen'\nassert solution('19') == 'nineteen'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20\") == \"twenty\"\nassert solution(\"99\") == \"ninety-nine\"\nassert solution(\"6\") == \"six\"\n\"\"\"\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\nassert solution('50') == 'fifty'\n\n\n\"\"\"\n\ns = input()\n\ndigits = {\n    0: 'zero',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6:'six',\n    7:'seven',\n    8: 'eight',\n    9: 'nine',\n}\n\nteens = {\n    10: 'ten',\n    11: 'eleven',\n    12: 'twelve',\n    13: 'thirteen',\n    14: 'fourteen',\n    15: 'fifteen',\n    16:'sixteen',\n    17:'seventeen',\n    18: 'eighteen',\n    19: 'nineteen',\n}\n\ntens = {\n    2: 'twenty',\n    3: 'thirty',\n    4: 'forty',\n    5: 'fifty',\n    6:'sixty',\n    7:'seventy',\n    8: 'eighty',\n    9: 'ninety',\n}\n\nhundreds = {\n    1: 'one hundred',\n    2: 'two hundred',\n    3: 'three hundred',\n    4: 'four hundred',\n    5: 'five hundred',\n    6:'six hundred',\n    7:'seven hundred',\n    8: 'eight hundred',\n    9: 'nine hundred',\n}\n\nthousands = {\n    1: 'one thousand',\n    2: 'two thousand',\n    3: 'three thousand',\n    4: 'four thousand',\n    5: 'five thousand',\n    6:'six thousand',\n    7:'seven thousand',\n    8: 'eight thousand',\n    9: 'nine thousand',\n}\n\nmillions = {\n    1: 'one million',\n    2: 'two million',\n    3: 'three million',\n    4: 'four million',\n    5: 'five million',\n    6:'six million',\n    7:'seven million',\n    8: 'eight million',\n    9: 'nine million',\n}\n\nbillions = {\n    1: 'one billion',\n    2: 'two billion',\n    3: 'three billion',\n    4: 'four billion',\n    5: 'five billion',\n    6:'six billion',\n    7:'seven billion',\n    8: 'eight billion',\n    9: 'nine billion',\n}\n\ntrillions = {\n    1: 'one trillion',\n    2: 'two trillion',\n    3: 'three trillion',\n    4: 'four trillion',\n    5: 'five trillion',\n    6:'six trillion',\n    7:'seven trillion',\n    8: 'eight trillion',\n    9: 'nine trillion',\n}"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 'three'\nassert solution('13') == 'one-thirty'\nassert solution('22') == 'twenty-two'\nassert solution('60') =='sixty'\nassert solution('89') == 'ninety-nine'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\n\"\"\"\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\nassert solution('0') == '-'\n\nassert solution('6') =='six'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\nassert solution('0') == ''\nassert solution('-10') == ''\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6') =='six'\nassert solution('20') == 'twenty'\nassert solution('99') == 'ninety-nine'\nassert solution('2') == 'two'\nassert solution('25') == 'twenty-five'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6') =='six'\nassert solution('20') == 'twenty'\nassert solution('99') == 'ninety-nine'\nassert solution('3') == 'three'\nassert solution('22') == 'twenty-two'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"six\"\nassert solution(\"20\") == \"twenty\"\nassert solution(\"99\") == \"ninety-nine\"\nassert solution(\"100\") == \"one hundred\"\nassert solution(\"101\") == \"one hundred one\"\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 6 8\") == 2\nassert solution(\"1 2 3 4 5\") == 4\nassert solution(\"1 2 3 4\") == 0\nassert solution(\"1\") == 0\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Iterator, IO"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 3 4 5 6 9\") == \"2\"\nassert solution(\"3\\n998 999 1000\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"4\""
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('1 2 3 4 5') == 2\nassert solution('1 3 4 5 6 9') == 2\nassert solution('998 999 1000') == 2\nassert solution('1 2 3 4 5') == 4\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 3 4 5 6 9') == '2'\nassert solution('3\\n998 999 1000') == '2'\nassert solution('5\\n1 2 3 4 5') == '4'\nassert solution('3\\n998 999 1000') == '2'\nassert solution('5\\n1 2 3 4 5') == '4'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 1 7 2 3') == '4'\nassert solution('9 9 9') == '0'\n\"\"\""
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 3 4 5 6 9\") == \"2\"\nassert solution(\"3\\n998 999 1000\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 4 5\") == 2\nassert solution(\"4\\n1 3 4 6\") == 0\nassert solution(\"4\\n1 2 3 4\") == 4\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '0'\nassert solution('''\n5\n1 2 3 4 5\n''') == '4'\nassert solution('''\n4\n998 999 1000\n''') == '2'\nassert solution('''\n5\n1 2 3 4 5\n''') == '4'\nassert solution('''\n2\n1 2\n''') == '1'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 3 4 5 6 9') == '2'\nassert solution('3\\n998 999 1000') == '2'\nassert solution('5\\n1 2 3 4 5') == '4'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 3 4 5\") == '2'\nassert solution(\"3 5 8 5 6 9\") == '0'\nassert solution(\"1 2 3 4 5\") == '4'\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 1') == 2\nassert solution('6\\n2 2 2 2 2 2') == 3\nassert solution('6\\n2 2 2 2 2 2') == 3\nassert solution('6\\n2 2 2 2 2 2') == 3\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 2 1\") == \"2\"\nassert solution(\"6\\n2 2 2 2 2 2\") == \"3\"\n\"\"\"\n\nn = int(input())\narr = [int(item) for item in input().split()]\n\ntemp = 0\ncount = 0\n\nfor i in range(n):\n    temp += arr[i]\n    if temp >= n // 2:\n        break\n\nprint(i + 1)"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n6\n2 2 2 2 2 2\n\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 2 1\") == \"2\"\nassert solution(\"6\\n2 2 2 2 2 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 2 1\\n') == '2'\nassert solution('6\\n2 2 2 2 2 2\\n') == '3'\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 2 1\\n\") == \"2\"\nassert solution(\"6\\n2 2 2 2 2 2\\n\") == \"3\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 2 1\") == \"2\"\nassert solution(\"6\\n2 2 2 2 2 2\") == \"3\"\n\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"3\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"3\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 2 1\") == '2'\n\"\"\"\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"4\\n1 3 2 1\"\n) == \"2\"\n\n\"\"\"\n\n\"\"\"\nThe first line contains a single integer n, the number of days to prepare for the programming contests.\n\nThe second line contains a sequence a_1, a_2,..., a_n, where a_i is the number of problems, which Polycarp will solve on the i-th day.\n\nFind the index of the day when Polycarp will celebrate the equator.\n\n-----Input-----\n6\n2 2 2 2 2 2\n-----Output-----\n3\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 2 1') == '2'\nassert solution('6\\n2 2 2 2 2 2') == '3'\nassert solution('200\\n
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3\\n2\\n1\") == \"4\\n2\"\nassert solution(\"2\\n2\\n3\\n1\") == \"4\\n1\"\nassert solution(\"1\\n2\\n3\\n1\") == \"5\\n0\"\nassert solution(\"1\\n1\\n2\\n2\") == \"3\\n0\"\nassert solution(\"3\\n2\\n3\\n1\") == \"3\\n1\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\nassert solution(\"5\\n9 2 3 7 8 5\\n4 1 6 9 1 6\\n7 3 8 9 3 8\\n6 5 4 2 1 4\\n1 8 6 3 2 5\") == \"17 4\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 9 3\n8 6 7\n4 2 5\n\"\"\") == \"12 1\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n1 9 3\n8 6 7\n4 2 5''') == '12 1'\n\"\"\"\n\nimport numpy as np\n\nN = int(input())\nmatrix = np.array([list(map(int, input().split())) for _ in range(N)])\ndelta = ((1, 2), (2, 1), (1, -2), (-1, 2), (-2, 1), (2, -1), (-2, -1), (-1, -2))\nans = float('inf')\n\nfor i in range(1, N):\n    for j in range(N):\n        for x, y in delta:\n            x += i\n            y += j\n            if 0 <= x < N and 0 <= y < N:\n                ans = min(ans, matrix[j, i] + matrix[y, x])\n\nprint(ans, 1 if ans < float('inf') else 0)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\n\n\"\"\"\nfrom itertools import count, chain, combinations, product\nfrom functools import lru_cache\nfrom timeit import timeit"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"3\\n1 9 3\\n8 6 7\\n4 2 5\"\n) == \"12 1\"\n\"\"\"\n\nimport collections\nimport itertools\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\n\nclass Solution:\n    def solve(self, stdin):\n        n = int(stdin.readline().strip())\n        d = collections.defaultdict(list)\n        for i, line in enumerate(stdin):\n            line = [int(x) for x in line.split()]\n            d[n - i - 1] = line\n        # d = {n - i - 1: [int(x) for x in line.split()] for i, line in enumerate(stdin)}\n        dp = [[1] * n for _ in range(n)]\n        for i in range(1, n):\n            for j in range(n - i):\n                dp[i + j][j] = dp[i + j][j + 1] + dp[i + j - 1][j + 1]\n        res = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j] == 0:\n                    continue\n                if dp[i][j] == 1:\n                    dp[i][j] = dp[i][j - 1] + dp[i][j + 1] + dp[i - 1][j] + dp[i + 1][j]\n                res[i][j] = dp[i][j]\n                if j == 0:\n                    dp[i][j] = dp[i][j + 1] + dp[i][j + 1]\n                elif j == n - 1:\n                    dp[i][j] = dp[i][j - 1] + dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i][j - 1] + dp[i][j + 1]\n                res[i][j] += dp[i][j]\n        # res = [[0] * n for _ in range(n)]\n        # for i in range(n):\n        #     for j in range(n):\n        #         if dp[i][j] == 0:\n        #             continue\n        #         res[i][j] = dp[i][j]\n        #         if i == j:\n        #             if i == 0:\n        #                 dp[i][j] = dp[i][j + 1] + dp[i][j + 1]\n        #             elif i == n - 1:\n        #                 dp[i][j] = dp[i][j - 1] + dp[i][j - 1]\n        #             else:\n        #                 dp[i][j] = dp[i][j - 1] + dp[i][j + 1]\n        #         elif j == 0:\n        #             dp[i][j] = dp[i - 1][j] + dp[i + 1][j] + dp[i][j + 1]\n        #         elif j == n - 1:\n        #             dp[i][j] = dp[i - 1][j] + dp[i + 1][j] + dp[i][j - 1]\n        #         else:\n        #             dp[i][j] = dp[i - 1][j] + dp[i + 1][j] + dp[i][j - 1] + dp[i][j + 1]\n        # for i in range(n):\n        #     for j in range(n):\n        #         if dp[i][j] == 0:\n        #             continue\n        #         res[i][j] = dp[i][j]\n        #         if i == 0:\n        #             if j == 0:\n        #                 dp[i][j] = dp[i][j + 1] + dp[i][j + 1]\n        #             elif j == n - 1:\n        #                 dp[i][j] = dp[i][j - 1] + dp[i][j - 1]\n        #             else:\n        #                 dp[i][j] = dp[i][j - 1] + dp[i][j + 1]\n        #         elif i == n - 1:\n        #             if j == 0:\n        #                 dp[i][j] = dp[i][j + 1] + dp[i][j + 1]\n        #             elif j == n - 1:\n        #                 dp[i][j] = dp[i][j - 1] + dp[i][j - 1]\n        #             else:\n        #                 dp[i][j] = dp[i][j - 1] + dp[i][j + 1]\n        #         elif j == 0:\n        #             dp[i][j] = dp[i - 1][j] + dp[i + 1][j] + dp[i][j + 1]\n        #         elif j == n - 1:\n        #             dp[i][j] = dp[i - 1][j] + dp[i + 1][j] + dp[i][j - 1]\n        #         else:\n        #             dp[i][j] = dp[i - 1][j] + dp[i + 1][j] + dp[i][j - 1] + dp[i][j + 1]\n        # for i in range"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 9 3\\n8 6 7\\n4 2 5') == '12 1'\nassert solution('4\\n3 1 4\\n8 7 3\\n4 2 5') == '9 4'\nassert solution('4\\n5 4 3\\n1 2 2\\n8 7 3\\n4 2 5') == '12 3'\nassert solution('4\\n2 8 4\\n1 7 1\\n8 3 3\\n4 5 2\\n1 1 8\\n7 2 1\\n2 5 2\\n8 3 1') == '7 5'\nassert solution('4\\n4 6 3\\n1 3 2\\n8 7 3\\n4 2 5') == '10 0'\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution\u0434"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10011\") == \"no\"\nassert solution(\"1101101\") == \"yes\"\nassert solution(\"11011011\") == \"yes\"\nassert solution(\"100101\") == \"yes\"\n\"\"\""
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100100') == 'yes'\nassert solution('100101') == 'no'\nassert solution('100110') == 'yes'\nassert solution('101010') == 'no'\nassert solution('10111') == 'no'\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'\nassert solution('111111') == 'yes'\nassert solution('111111') == 'yes'\nassert solution('11111111111111111') == 'yes'\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(10101) == \"yes\"\nassert solution(100) == \"no\"\nassert solution(1111) == \"yes\"\nassert solution(12) == \"no\"\nassert solution(11) == \"yes\"\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100010001\") == \"yes\"\nassert solution(\"100\") == \"no\"\nassert solution(\"1101111\") == \"yes\"\nassert solution(\"101101\") == \"no\"\nassert solution(\"1101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100010001\") == \"yes\"\nassert solution(\"100\") == \"no\"\n\nprint(\"Example tests\")\nprint(solution(\"100010001\"))\nprint(solution(\"100\"))"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'\nassert solution('11111') == 'yes'\nassert solution('1111111111') == 'no'\nassert solution('11111111111') == 'yes'\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100010001\") == 'yes'\nassert solution(\"100\") == 'no'\n\n\"\"\"\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'\n\"\"\""
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10111\") == \"no\"\nassert solution(\"10110\") == \"no\"\nassert solution(\"10101\") == \"no\"\nassert solution(\"10111\") == \"yes\"\nassert solution(\"10110\") == \"yes\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\"\nassert solution(\"anagram\") == \"anagram\"\nassert solution(\"aacceejgiiiklmmooqqssuuwwy\") == \"aacceejgiiiklmmooqqssuuwwy\"\nassert solution(\"abgjmqxyiwt\") == \"abgjmqxyiwt\"\n\"\"\"\n\ns = input()\ns = sorted(s)\ns = ''.join(s)"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(aacceeggiikkmmooqqssuuwwyy) == 'abcdefghijklmnopqrstuvwxyz'\n\nassert solution(thereisnoanswer) == '-1'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\") == 'abcdefghijklmnopqrstuvwxyz'\n\"\"\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-\"\n\n\"\"\""
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\nprint('All tests passed')"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"a\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\"\n\"\"\""
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('aaaccee') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('a') == 'abcd'\nassert solution('aaccee') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('aaaa') == 'abcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2 3\") == \"2.0000000000\"\n\"\"\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2 3\") == \"2.0000000000\"\nassert solution(\"12 17 9 40\") == \"32.8333333333\"\n\"\"\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('4 3 2 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 2 3') == 2\nassert solution('12 17 9 40') == 32.8333333333\n\"\"\"\n\nfrom math import factorial, comb\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2 3\") == \"2.0000000000\"\nassert solution(\"12 17 9 40\") == \"32.8333333333\"\n\"\"\""
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2 3\") == '2'\nassert solution(\"12 17 9 40\") == '32.8333333333'\n\"\"\"\nimport math\n\nn, m, r, k = [int(_) for _ in stdin.split()]\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 2 3') == '2.0000000000'\nassert solution('12 17 9 40') == '32.8333333333'\n\"\"\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 2 4\") == \"2.0000000000\"\n\"\"\"\n\nfrom typing import List\n\nINPUT_1 = \"3 3 2 3\"\nINPUT_2 = \"12 17 9 40\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2 3\") == \"2.0000000000\"\n\n\"\"\""
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 4 1') == '3.833333333'\nassert solution('6 3 4 1') == '3.833333333'\nassert solution('6 10 4 1') == '3.833333333'\nassert solution('6 10 4 3') == '3.833333333'\nassert solution('6 10 4 2') == '3.833333333'\n\"\"\""
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 2 2 2\") == '-3 -3 -3 -3'\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().strip().split()))\nm = int(stdin.readline())\n\nm_a = [a[i] for i in range(m)]\nm_a.sort(reverse=True)\nres = m_a[0]\n\nfor i in range(1, n):\n    if m_a[i] == res:\n        m_a[i] = - m_a[i]\n    else:\n        res *= m_a[i]\n\nprint(*m_a)\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"2\", \"2\", \"2\", \"2\"]) == \"-3 -3 -3 -3\"\nassert solution([\"0\"]) == \"0\"\nassert solution([\"0\", \"0\", \"0\", \"0\"]) == \"0\"\nassert solution([\"0\", \"0\", \"0\", \"1\"]) == \"0\"\nassert solution([\"1\", \"0\", \"0\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 2 2 2\") == \"3 3 3 3\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"3\\n-3 -3 2\") == \"-3 -3 2\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 2 2 2\") == \"0 0 0 0\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"3\\n-3 -3 2\") == \"-3 -3 2\"\nassert solution(\"6\\n0 2 3 -4 -5 -6\") == \"0 0 -4 0\"\n\n'''\n\nn = int(input())\narray = [int(x) for x in input().split()]\n\nmax_product = 0\n\nfor index in range(n):\n    for i in range(index+1):\n        product = 1\n        for j in range(i, index+1):\n            product *= array[j]\n        if product > max_product:\n            max_product = product\n\nprint(*[-x-1 for x in array])\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '4\\n2 2 2 2'\n    ) == '-3 -3 -3 -3'\nassert solution(\n    '1\\n0'\n    ) == '0'\nassert solution(\n    '3\\n-3 -3 2'\n    ) == '-3 -3 2'\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 2 2 2\") == \"0 -3 -3 -3 -3\"\nassert solution(\"1\\n0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 2 2\") == \"-3 -3 -3 -3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"3 -3 2\") == \"-3 -3 2\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 2 2 2\") == \"-3 -3 -3 -3\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"3\\n-3 -3 2\") == \"-3 -3 2\""
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 2 2') == '-3 -3 -3 -3', 'Wrong answer'\nassert solution('1') == '0', 'Wrong answer'\nassert solution('3') == '-3 -3 2', 'Wrong answer'\nprint('Test passed')"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 2 2 2\") == \"-3 -3 -3 -3\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"3\\n-3 -3 2\") == \"-3 -3 2\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 3') == '-1'\nassert solution('12 5') == '6'\nassert solution('12 10') == '6'\nassert solution('100 100') == '-1'\n\"\"\""
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"-1\"\nassert solution(\"12 5\") == \"6\"\nassert solution(\"1 1000000000 1\") == \"1\"\nassert solution(\"3 9\") == \"3\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5, 2) == 6\nassert solution(12, 5) == 6\nassert solution(12, 5) == 6"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(4, 2) == 2\nassert solution(12, 5) == 6\nassert solution(5, 3) == -1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"-1\"\nassert solution(\"12 5\") == \"6\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2') == 2\n\nassert solution('5 3') == -1\n\nassert solution('12 5') == 6\n\"\"\"\n\nfrom math import ceil, sqrt\nimport sys\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"4 2\"\n) == \"2\"\nassert solution(\n    \"5 3\"\n) == \"-1\"\nassert solution(\n    \"12 5\"\n) == \"6\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"-\"\nassert solution(\"12 5\") == \"6\"\n\n\"\"\"\n\nfrom math import sqrt, floor, ceil\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 3') == '-1'\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == \"87\"\n\"\"\""
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == \"87\"\nassert solution(\"3\\n0 1 2 3 5 6\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == \"98\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == '87'\nassert solution(\"3\\n0 1 2 3 5 8\\n1 2 4 5 7 8\\n2 3 4 6 7 9\") == '98'\n\n---\nInput\n\n3\n6 7 8 9 0 1\n1 2 4 5 7 8\n2 3 4 6 7 9\n\nOutput\n\n88\n\n\"\"\""
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == \"87\"\nassert solution(\"3\\n0 1 3 5 6 8\\n1 2 4 5 7 8\\n2 3 4 6 7 9\") == \"98\"\n\"\"\""
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n0\") == \"87\"\nassert solution(\"2\\n1\\n3\\n5\\n4\\n6\\n7\\n8\\n9\\n0\\n1\") == \"98\"\nassert solution(\"2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n0\\n1\\n2\") == \"98\"\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7') == '87'\nassert solution('3\\n0 1 3 5 6 8\\n1 2 4 5 7 8\\n2 3 4 6 7 9') == '98'\n\n\n---\n\n\nGiven n cubes, Masha has to build a number of them of given length using digits from 0 to 9. She will only rotate one cube at a time, and only one digit of a cube can be used at a time. For example, if n=3 and length=5, she will use digits from 1 to 9 to build a number from 0 to 6. She can make numbers from 0 to 6 using only digits 0,1,2,3,4 and only using one digit of each cube once.\n\nMasha needs to find the maximum possible number that can be built using her cubes.\n\nInput\nThe first line contains the number n of cubes (2\u2009\u2264\u2009n\u2009\u2264\u200910) and the length l (1\u2009\u2264\u2009l\u2009\u2264\u20093) of each cube. The second line contains n integers x_1,\u2009x_2,\u2009...,\u2009x_n (0\u2009\u2264\u2009x_i\u2009\u2264\u20099) \u2014 the digits of the cube, which Masha can use.\n\nOutput\nThe first and only line should contain the maximum possible number built from the cubes.\n\nExamples\nInput\n3 2\n4 1 2\n\nOutput\n9\nInput\n1 2\n8 9\n\nOutput\n81\n\n---\n\nThe number of digits n will be given in the first line and length l will be given in the second line. The cubes digits will be given in the next n lines.\n\nEvery cube has exactly one digit in it.\n\nTo make a number Masha can rotate cube i only once, so there is exactly one digit from 1 to 9.\n\nIf n=4 and l=3, then there are 4 digits, so there are 9 possibilities.\n\nTo make a number Masha can make a number from 1 to 9, so there are 9 digits.\n\nMasha can make 9 numbers from 1 to 9.\n\nMasha can make 1 number from 1 to 9.\n\nMasha can make 9 numbers from 1 to 9.\n\nMasha can make 1 number from 1 to 9.\n\nMasha can make 9 numbers from 1 to 9.\n\nMasha can make 1 number from 1 to 9.\n\nMasha can make 9 numbers from 1 to 9.\n\nMasha can make 1 number from 1 to 9.\n\nMasha can make 9 numbers from 1 to 9.\n\nMasha can make 1 number from 1 to 9.\n\nThe maximum possible number that can be built using her cubes is 99."
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == \"87\"\n\"\"\"\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == \"87\"\nassert solution(\"3\\n0 1 3 5 6 8\\n1 2 4 5 7 8\\n2 3 4 6 7 9\") == \"98\"\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\\n\") == \"87\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\\n\") == \"98\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\nimport itertools"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\") == \"4\"\n\"\"\"\n\nimport unittest\nfrom collections import deque"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\") == \"4\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"3 8\") == \"3\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"123456789 5\") == \"12345678900000000\"\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"375 4\") == \"30000\"\nassert solution(\"10000 1\") == \"10000\"\nassert solution(\"38101 0\") == \"38101\"\n\n\"\"\""
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('375 4') == '30000'\nassert solution('1 0') == '1'\nassert solution('123456789 8') == '12345678900000000'\nprint('Test pass.')"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9') == '123456789'\nassert solution('1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\\n24 24\\n25 25\\n26 26\\n27 27\\n28 28\\n29 29\\n30 30\\n31 31\\n32 32\\n33 33\\n34 34\\n35 35\\n36 36\\n37 37\\n38 38\\n39 39\\n40 40\\n41 41\\n42 42\\n43 43\\n44 44\\n45 45\\n46 46\\n47 47\\n48 48\\n49 49\\n50 50\\n51 51\\n52 52\\n53 53\\n54 54\\n55 55\\n56 56\\n57 57\\n58 58\\n59 59\\n60 60\\n61 61\\n62 62\\n63 63\\n64 64\\n65 65\\n66 66\\n67 67\\n68 68\\n69 69\\n70 70\\n71 71\\n72 72\\n73 73\\n74 74\\n75 75\\n76 76\\n77 77\\n78 78\\n79 79\\n80 80\\n81 81\\n82 82\\n83 83\\n84 84\\n85 85\\n86 86\\n87 87\\n88 88\\n89 89\\n90 90\\n91 91\\n92 92\\n93 93\\n94 94\\n95 95\\n96 96\\n97 97\\n98 98\\n99 99') == '12345678900000000'\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"3999999999\"\nassert solution(\"123456789 8\") == \"12345678900000000\"\nassert solution(\"100 0\") == \"100\"\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"375 4\") == \"30000\"\nassert solution(\"10000 1\") == \"10000\"\nassert solution(\"38101 0\") == \"38101\"\nassert solution(\"123456789 8\") == \"12345678900000000\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(375, 4) == 30000\nassert solution(10000, 1) == 10000\nassert solution(38101, 0) == 38101\nassert solution(123456789, 8) == 12345678900000000\n\"\"\"\n\nfrom tools import timing\n\nn, k = input().split()\n\nn, k = int(n), int(k)\n\nfor i in range(k):\n    if n % 10!= 9:\n        n //= 10\n    else:\n        n //= 10\n        n *= 10 ** (k - i - 1)\n\nprint(n)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"375 4\") == \"30000\"\n\"\"\""
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\") == \"3\""
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n0 0\\n0 0\\n0 0\\n\") == \"0\"\nassert solution(\"3 3\\n1 0 1\\n1 0 1\\n1 0 1\\n\") == \"1 1\\n1 2\\n2 2\\n\"\nassert solution(\"3 3\\n1 1 1\\n0 0 0\\n0 0 0\\n\") == \"1 1\\n1 2\\n2 2\\n\"\nassert solution(\"3 3\\n1 0 1\\n1 1 1\\n0 0 0\\n\") == \"1 1\\n1 2\\n2 2\\n\"\nassert solution(\"3 2\\n0 0\\n0 0\\n0 0\\n\") == \"0\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\") == \"3\\n1 1\\n1 2\\n2 2\"\nassert solution(\"3 3\\n1 0 1\\n1 0 1\\n0 0 0\") == \"0\\n0\\n0\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n0 0\\n0 0\\n0 0\\n\") == \"0\"\nassert solution(\"3 3\\n1 0 1\\n1 0 1\\n1 0 1\\n\") == \"3\"\nassert solution(\"3 3\\n1 0 1\\n1 0 1\\n1 0 1\\n\") == \"1\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n0 0\\n0 0\\n0 0\") == \"0\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\") == \"3\\n1 1\\n1 2\\n2 2\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 1 1\\n1 1 1\\n0 1 1') == 3\nassert solution('3 3\\n1 0 1\\n1 0 1\\n0 0 0') == 0\nassert solution('3 2\\n0 0\\n0 0\\n0 0') == 0\n\"\"\""
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 1 1\\n1 1 1\\n0 1 1') == 3\nassert solution('3 2\\n0 0\\n0 0\\n0 0') == 0\nassert solution('3 2\\n0 0\\n0 0\\n0 0') == -1\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n0 0\\n0 0\\n0 0\") == \"0\"\n\n\"\"\"\n\n\nimport sys\nimport collections\nfrom functools import reduce"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\") == \"3\\n1 1\\n1 2\\n2 2\"\nassert solution(\"3 3\\n0 0 1\\n0 0 1\\n0 0 1\") == \"-1\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\") == '3\\n1 1\\n1 2\\n2 2'\nassert solution(\"3 3\\n1 0 1\\n1 0 1\\n0 0 0\") == '-1'\nassert solution(\"3 2\\n0 0\\n0 0\\n0 0\") == '0'"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\n\"\"\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 2\") == \"0.15 0.3 0.55\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\n\"\"\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 2') == '0.333333333333 0.333333333333 0.333333333333'\nassert solution('1 1 3') == '0.057142857143 0.657142857143 0.285714285714'\n\n\"\"\""
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\nassert solution(\"2 1 2\") == \"0.150000000000 0.300000000000 0.550000000000\"\nassert solution(\"1 1 3\") == \"0.057142857143 0.657142857143 0.285714285714\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"0.057142857143 0.657142857143 0.285714285714\"\n\"\"\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\") == '0.333333333333 0.333333333333 0.333333333333'\nassert solution(\"2 1 2\") == '0.150000000000 0.300000000000 0.550000000000'\nassert solution(\"1 1 3\") == '0.057142857143 0.657142857143 0.285714285714'\n\n\n------\n\"\"\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 2') == '0.150000000000 0.300000000000 0.550000000000'\n\"\"\"\n\na = [int(c) for c in stdin.split()]\n\nN = a[0]\nR = a[1]\nS = a[2]"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == '0.333333333333 0.333333333333 0.333333333333'\nassert solution(\"2 1 2\") == '0.150000000000 0.300000000000 0.550000000000'\nassert solution(\"1 1 3\") == '0.057142857143 0.657142857143 0.285714285714'\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\"\nassert solution(\"1 100 50 2\") == \"0\"\n\"\"\"\n\n\"\"\"\nToday an outstanding event is going to happen in the forest\u00a0\u2014 hedgehog Filya will come to his old fried Sonya!\n\nSonya is an owl and she sleeps during the day and stay awake from minute l_1 to minute r_1 inclusive. Also, during the minute k she prinks and is unavailable for Filya.\n\nFilya works a lot and he plans to visit Sonya from minute l_2 to minute r_2 inclusive.\n\nCalculate the number of minutes they will be able to spend together.\n\n\n-----Input-----\n\nThe only line of the input contains integers l_1, r_1, l_2, r_2 and k (1 \u2264 l_1, r_1, l_2, r_2, k \u2264 10^18, l_1 \u2264 r_1, l_2 \u2264 r_2), providing the segments of time for Sonya and Filya and the moment of time when Sonya prinks.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of minutes Sonya and Filya will be able to spend together.\n\n\n-----Examples-----\nInput\n1 10 9 20 1\n\nOutput\n2\n\nInput\n1 100 50 200 75\n\nOutput\n50\n\n\n\n-----Note-----\n\nIn the first sample, they will be together during minutes 9 and 10.\n\nIn the second sample, they will be together from minute 50 to minute 74 and from minute 76 to minute 100.\n\"\"\""
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\"\nassert solution(\"1 100 50 300 10\") == \"5\"\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\"\n\"\"\""
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\"\n\n---"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\""
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\"\n\n\"\"\"\n\nimport sys\nimport os\nfrom typing import List, Dict, Tuple, Set, Union\n\n\nclass Solution:\n    def __init__(self) -> None:\n        self.data = {\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n            8: 0,\n            9: 0,\n            10: 0,\n            11: 0,\n            12: 0,\n            13: 0,\n            14: 0,\n            15: 0,\n            16: 0,\n            17: 0,\n            18: 0,\n            19: 0,\n            20: 0,\n            21: 0,\n            22: 0,\n            23: 0,\n            24: 0,\n            25: 0,\n            26: 0,\n            27: 0,\n            28: 0,\n            29: 0,\n            30: 0,\n            31: 0,\n            32: 0,\n            33: 0,\n            34: 0,\n            35: 0,\n            36: 0,\n            37: 0,\n            38: 0,\n            39: 0,\n            40: 0,\n            41: 0,\n            42: 0,\n            43: 0,\n            44: 0,\n            45: 0,\n            46: 0,\n            47: 0,\n            48: 0,\n            49: 0,\n            50: 0,\n            51: 0,\n            52: 0,\n            53: 0,\n            54: 0,\n            55: 0,\n            56: 0,\n            57: 0,\n            58: 0,\n            59: 0,\n            60: 0,\n            61: 0,\n            62: 0,\n            63: 0,\n            64: 0,\n            65: 0,\n            66: 0,\n            67: 0,\n            68: 0,\n            69: 0,\n            70: 0,\n            71: 0,\n            72: 0,\n            73: 0,\n            74: 0,\n            75: 0,\n            76: 0,\n            77: 0,\n            78: 0,\n            79: 0,\n            80: 0,\n            81: 0,\n            82: 0,\n            83: 0,\n            84: 0,\n            85: 0,\n            86: 0,\n            87: 0,\n            88: 0,\n            89: 0,\n            90: 0,\n            91: 0,\n            92: 0,\n            93: 0,\n            94: 0,\n            95: 0,\n            96: 0,\n            97: 0,\n            98: 0,\n            99: 0,\n            100: 0,\n            101: 0,\n            102: 0,\n            103: 0,\n            104: 0,\n            105: 0,\n            106: 0,\n            107: 0,\n            108: 0,\n            109: 0,\n            110: 0,\n            111: 0,\n            112: 0,\n            113: 0,\n            114: 0,\n            115: 0,\n            116: 0,\n            117: 0,\n            118: 0,\n            119: 0,\n            120: 0,\n            121: 0,\n            122: 0,\n            123: 0,\n            124: 0,\n            125: 0,\n            126: 0,\n            127: 0,\n            128: 0,\n            129: 0,\n            130: 0,\n            131: 0,\n            132: 0,\n            133: 0,\n            134: 0,\n            135: 0,\n            136: 0,\n            137: 0,\n            138: 0,\n            139: 0,\n            140: 0,\n            141: 0,\n            142: 0,\n            143: 0,\n            144: 0,\n            145: 0,\n            146: 0,\n            147: 0,\n            148: 0,\n            149: 0,\n            150: 0,\n            151: 0,\n            152: 0,\n            153: 0,\n            154: 0,\n            155: 0,\n            156: 0,\n            157: 0,\n            158: 0,\n            159: 0,\n            160: 0,\n            161: 0,\n            162: 0,\n            163: 0,\n            164: 0,\n            165: 0,\n            166: 0,\n            167: 0,\n            168: 0,\n            169: 0,\n            170: 0,\n            171: 0,\n            172: 0,\n            173: 0,\n            174: 0,\n            175: 0,\n            176: 0,\n            177: 0,\n            178: 0,\n            179: 0,\n            180: 0,\n            181: 0,\n            182: 0,\n            183: 0,\n            184: 0,\n            185: 0,\n            186: 0,\n            187: 0,\n            188: 0,\n            189: 0,\n            190: 0,\n            191: 0,\n            192: 0,\n            193: 0,\n            194: 0,\n            195: 0,\n            196: 0,\n            197: 0,\n            198: 0,\n            199: 0,\n            200: 0,\n            201: 0,\n            202: 0,\n            203: 0,\n            204: 0,\n            205: 0,\n            206: 0,\n            207: 0,\n            208: 0,\n            209: 0,\n            210: 0,\n            211: 0,\n            212: 0,\n            213: 0,\n            214: 0,\n            215: 0,\n            216: 0,\n            217: 0,\n            218: 0,\n            219: 0,\n            220: 0,\n            221: 0,\n            222: 0,\n            223: 0,\n            224: 0,\n            225: 0,\n            226: 0,\n            227: 0,\n            228: 0,\n            229: 0,\n            230: 0,\n            231: 0,\n            232: 0,\n            233: 0,\n            234: 0,\n            235: 0,\n            236: 0,\n            237: 0,\n            238: 0,\n            239: 0,\n            240: 0,\n            241: 0,\n            242: 0,\n            243: 0,\n            244: 0,\n            245: 0,\n            246: 0,\n            247: 0,\n            248: 0,\n            249: 0,\n            250: 0,\n            251: 0,\n            252: 0,\n            253: 0,\n            254: 0,\n            255: 0,\n            256: 0,\n            257: 0,\n            258: 0,\n            259: 0,\n            260: 0,\n            261: 0,\n            262: 0,\n            263: 0,\n            264: 0,\n            265: 0,\n            266: 0,\n            267: 0,\n            268: 0,\n            269: 0,\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 10 9 20 1''') == '2'\nassert solution('''1 100 50 200 75''') == '50'\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\"\n\"\"\"\n\nl_1, r_1, l_2, r_2, k = [int(x) for x in input().split()]\n\ntot_min = 0\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\nassert solution('1 10 9 200 1') == '10'\nassert solution('1 100 10 200 1') == '0'\nassert solution('10 20 30 40 5') == '0'\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n0 1 1\\n0 2 2\") == \"INF\"\n\"\"\"\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4') == '13'\n\"\"\"\n\nfrom collections import namedtuple\n\nCoordinate = namedtuple('Coordinate', ['x', 'y'])\n\nN, M = map(int, input().split())\nlines = [input().split() for _ in range(N)]\n\nall_lines = []\n\nfor x1, y1, x2, y2 in lines:\n    x1, y1, x2, y2 = map(int, (x1, y1, x2, y2))\n    all_lines.append((Coordinate(x1, y1), Coordinate(x2, y2)))\n\nsegments = all_lines[:M]\nnorth_segments = all_lines[M:]\n\nsegment_points = set()\n\nfor x1, y1, x2, y2 in segments:\n    x1, y1, x2, y2 = map(int, (x1, y1, x2, y2))\n    segment_points.add((x1, y1))\n    segment_points.add((x2, y2))"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4\") == \"13\"\n\n\"\"\"\n\nimport sys\n\n\"\"\"\n\u9898\u76ee\u5206\u6790\uff1a\n\n\u9996\u5148\u786e\u5b9a\uff1a\n\u8f93\u5165\u662f\u8fb9\u754c\u5750\u6807\u3001\u8fb9\u754c\u5750\u6807\u3001\u8fb9\u754c\u5750\u6807\uff0c\u6709\u70b9\u590d\u6742\uff0c\u56e0\u6b64\u505a\u4e00\u4e2a\u4e34\u65f6\u5904\u7406\uff0c\u628a\u8f93\u5165\u7684\u6570\u636e\u5206\u62104\u90e8\u5206\uff0c\n\u5176\u4e2d\u6700\u540e\u4e00\u90e8\u5206\u662f\u8fb9\u754c\u5750\u6807\uff0c\u5c06\u8fb9\u754c\u5750\u6807\u8f6c\u5316\u4e3a\u70b9\u7684\u5750\u6807\uff0c\n\u63a5\u7740\u627e\u5230\u4e2d\u70b9\uff0c\u786e\u5b9a\u8f93\u5165\u7684\u6570\u636e\n\n\u8fd9\u91cc\u5bf9\u6700\u540e\u4e00\u90e8\u5206\u7684\u8f93\u5165\u8fdb\u884c\u4e86\u7279\u6b8a\u7684\u5904\u7406\uff0c\u56e0\u4e3a\u90a3\u4e00\u90e8\u5206\u7684\u8fb9\u754c\u5750\u6807\u6709\u53ef\u80fd\u662f\u6b63\u6570\uff0c\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u628a\u8f93\u5165\u7684\u6570\u636e\u5206\u62104\u90e8\u5206\uff0c\n\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u4e2d\u70b9\u7684\u5750\u6807\u6709\u4e00\u4e2a\u975e\u8d1f\u6570\u3002\n\n\u7136\u540e\u5728\u5224\u65ad\u4e2d\u70b9\u7684\u5750\u6807\u662f\u5426\u8d85\u51fa\u8fb9\u754c\uff0c\u8d85\u51fa\u7684\u8bdd\u90a3\u4e00\u90e8\u5206\u5c31\u4e0d\u7528\u8003\u8651\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u8d1f\u65e0\u7a77\uff0c\n\u4e0d\u7136\u5224\u65ad\u7684\u65f6\u5019\u4f1a\u6709\u70b9\u7ed5\uff0c\u56e0\u4e3a\u4e2d\u70b9\u4e0d\u4e00\u5b9a\u662f\u6ee1\u8db3x^2+y^2<=r^2\u7684\uff0c\u6240\u4ee5\u9700\u8981\u52a0\u4e00\u4e2a\u4e2d\u70b9\u7684\u7ed5\u6765\u5224\u65ad\u662f\u5426\u8d85\u51fa\u3002\n\"\"\"\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\\\n1 2 0\\\\n0 1 1\\\\n0 2 2\\\\n-3 4 -1\\\\n-2 6 3\\\\n1 0 1\\\\n0 1 2\\\\n2 0 2\\\\n-1 -4 5\\\\n3 -2 4\\\\n1 2 4\\\\n\") == \"13\"\n\"\"\""
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4\\n') == '13'\n'''"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4\\n\") == \"13\"\n\n\"\"\""
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 0\\n0 1 1\\n0 2 2\\n3 -1 4\\n-2 3 4\") == \"13\"\n\"\"\"\n\nimport os\nimport sys\nimport collections"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4') == '13'\nassert solution('2 2\\n1 1 2\\n0 2 1\\n1 1 2\\n0 1 2\\n0 2 1\\n0 1 2\\n0 1 2\\n0 1 2') == '3'\nassert solution('2 2\\n1 1 2\\n0 2 1\\n1 1 2\\n0 1 2\\n0 2 1\\n0 1 2\\n0 1 2\\n0 1 2') == '1'\nassert solution('1 0\\n1 0\\n0 1\\n0 2') == '0'\nassert solution('2 0\\n1 0\\n0 1\\n0 2') == '0'\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4') == '13'\n\n\"\"\"\n\nimport sys\nimport math\nimport numpy as np"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\") == '13'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\n\"\"\""
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\n\"\"\"\n\nimport math\n\nt, s, x = [int(x) for x in input().split(' ')]"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10 4') == \"NO\"\nassert solution('3 10 3') == \"YES\"\nassert solution('3 8 51') == \"YES\"\nassert solution('3 8 52') == \"YES\"\n\"\"\"\n\nt, s, x = map(int, input().split())"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 10 4') == 'NO'\nassert solution('3 10 3') == 'YES'\nassert solution('3 8 51') == 'YES'\nassert solution('3 8 52') == 'YES'\nassert solution('0 0 10') == 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\""
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10 4') == 'NO'\nassert solution('3 10 3') == 'YES'\nassert solution('3 8 51') == 'YES'\n\n\"\"\"\n\n\nfrom itertools import combinations\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10 4') == 'NO'\nassert solution('3 10 3') == 'YES'\nassert solution('3 8 51') == 'YES'\nassert solution('3 8 52') == 'YES'\n\n\"\"\""
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n\") == \"2 1\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5\\n2 6\\n6 20\") == \"2 1\"\nassert solution(\"5\\n1 5\\n2 6\\n6 20\") == \"2 1\"\nassert solution(\"5\\n1 5\\n2 6\\n6 20\") == \"2 1\"\n\"\"\"\n\nfrom bisect import bisect_right"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9') == '2 1'\nassert solution('3\\n1 5\\n2 6\\n6 20') == '-1 -1'\nassert solution('3\\n1 5\\n2 6\\n6 20') == '-1 -1'\n\n\n\n----\n\n-----\n\nhttps://codeforces.com/contest/1356/problem/B\n----\n\n\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9') == '2 1'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\") == \"2 1\"\nassert solution(\"3\\n1 5\\n2 6\\n6 20\") == \"-1 -1\"\nassert solution(\"3\\n1 5\\n2 6\\n6 20\") == \"2 1\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\") == \"2 1\"\nassert solution(\"3\\n1 5\\n2 6\\n6 20\") == \"-1 -1\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"1 1\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\") == \"2 1\"\nassert solution(\"3\\n1 5\\n2 6\\n6 20\") == \"-1 -1\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\") == \"2 1\"\nassert solution(\"3\\n1 5\\n2 6\\n6 20\") == \"-1 -1\""
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\") == \"2 1\"\nassert solution(\"3\\n1 5\\n2 6\\n6 20\") == \"-1 -1\"\nassert solution(\"5\\n2 4\\n2 6\\n2 8\\n2 10\\n1 2\") == \"3 1\"\nassert solution(\"7\\n4 5\\n4 6\\n4 7\\n4 8\\n4 9\\n4 10\") == \"5 4\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 5\n2 6\n6 20''') == '-1 -1'\nassert solution('''5\n1 10\n2 9\n3 9\n2 3\n2 9''') == '2 1'\nassert solution('''2\n1 5\n2 6''') == '-1 -1'\nassert solution('''1\n2 6\n2 6''') == '-1 -1'\nassert solution('''1\n2 2\n3 3''') == '1 1'\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AG?C??CT\") == \"AGACGTCT\"\nassert solution(\"AA??\") == \"===\"\nassert solution(\"????G??\") == \"====\"\n\"\"\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AG?C??CT\") == \"AGACGTCT\"\nassert solution(\"????G?\\n\") == \"===\\n\"\nassert solution(\"AA??\\n\") == \"===\\n\"\nassert solution(\"AGCT\\n\") == \"AGCT\\n\"\n\"\"\""
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AGCT\") == \"AGC\"\nassert solution(\"AG???\") == \"AG?\"\nassert solution(\"?????\") == \"===\"\nassert solution(\"AA???\") == \"AA?\"\nassert solution(\"AG?CT?\") == \"AG?\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AG?C??CT\") == \"AGACGTCT\"\nassert solution(\"AA??\") == \"===\"\nassert solution(\"????G??\") == \"===\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AG?C??CT') == 'AGACGTCT'\nassert solution('AA??') == '==='\nassert solution('????G?') == '==='\n\n\"\"\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AG?C??CT') == 'AGACGTCT'\nassert solution('AA??') == '==='\nassert solution('????G?') == '==='\nassert solution('AGCT') == 'AGCT'\nassert solution('AA??') == '==='\n\n\n\"\"\""
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AG?C??CT') == 'AGACGTCT'\nassert solution('AA??') == '==='\nassert solution('????G?') == '==='\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AG?C??CT\") == \"AGACGTCT\"\nassert solution(\"AA??\") == \"===\"\nassert solution(\"????G?H?\") == \"====\"\nassert solution(\"??G?H??\") == \"===\"\nassert solution(\"????\") == \"===\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AG?C??CT') == 'AGACGTCT'\nassert solution('AAAA??') == '==='\nassert solution('AA??') == '==='\n\"\"\"\n\nimport string"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AG?C??CT') == 'AGACGTCT'\nassert solution('AA??') == '==='\nassert solution('????G?') == '==='\nassert solution('AAAAA???') == '==='\nassert solution
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xx..\") == \"YES\"\nassert solution(\"x.ox\") == \"NO\"\nassert solution(\"o.x.\") == \"YES\"\nassert solution(\"x..x\") == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xx..\") == \"YES\"\nassert solution(\"x.ox\") == \"NO\"\nassert solution(\"o.x.\") == \"YES\"\nassert solution(\"o..x\") == \"NO\"\nassert solution(\"ox..\") == \"YES\"\n\n\"\"\"\n\nimport unittest\n\nINPUT_1 = \"xx..\"\nOUTPUT_1 = \"YES\"\n\nINPUT_2 = \"x.ox\"\nOUTPUT_2 = \"NO\"\n\nINPUT_3 = \"o.x.\"\nOUTPUT_3 = \"YES\"\n\nINPUT_4 = \"o..x\"\nOUTPUT_4 = \"NO\"\n\n\nclass SolutionTestCase(unittest.TestCase):\n    def test_1(self):\n        self."
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"x.o.\") == \"YES\"\nassert solution(\"ox..\") == \"YES\"\nassert solution(\"x.xo\") == \"YES\"\nassert solution(\"o.x.\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"x...\\n...o\\n...x\\noox.\") == \"YES\"\nassert solution(\"x...\\n...o\\n...x\\noox.\") == \"NO\"\nassert solution(\"x...\\n...o\\n...x\\no.x\") == \"YES\"\nassert solution(\"x.ox\\nox..\\nx.o.\\no.x\") == \"YES\"\nassert solution(\"x.ox\\nox..\\nx.o.\\noo.x\") == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"x..x\\n..oo\\no...\\nx.xo\") == \"NO\"\nassert solution(\"xox\\nxox\\nxox\\nxox\") == \"YES\"\nassert solution(\"oxx\\nxo.\\nxox\\nxox\") == \"YES\"\nassert solution(\"xo.x\\nx..\\nx.x\\nx.x\") == \"NO\"\nassert solution(\"x.x\\nx.o\\nx..\\nx.x\") == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xx..') == 'YES'\nassert solution('o.x.') == 'YES'\nassert solution('x.xo') == 'YES'\nassert solution('o.x.') == 'YES'\nassert solution('x..x') == 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"x...\\n...x\\nx...\\n...x\") == \"YES\"\nassert solution(\"xx...\\n...x\\nx...\\n...x\") == \"YES\"\nassert solution(\"x.ox\\n..o.\\nx.xo\\no.x.\") == \"NO\"\nassert solution(\"o.x.\\no...\\nx.x.\\n...x\\n...o\\no...\\n.o.x\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xx..\") == \"YES\"\nassert solution(\"xoox\") == \"NO\"\nassert solution(\"x.ox\") == \"YES\"\nassert solution(\"o.x.x\") == \"NO\"\nassert solution(\"x.oxx\") == \"YES\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".ox..\") == \"YES\"\nassert solution(\"x.ox\") == \"NO\"\nassert solution(\"o.x.\") == \"YES\"\nassert solution(\".o.x.\") == \"YES\"\nassert solution(\"..o.\") == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('xox') == 'YES'\nassert solution('oxo') == 'NO'\nassert solution('ox..') == 'NO'\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"5\\n2 2 3 4 5\") == \"YES\"\nassert solution(\"3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n2 2 2 2 2\") == \"NO\""
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"5 1 2 3 4\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"YES\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"5\\n2 2 3 4 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3 2') == 'YES'\nassert solution('5\\n1 2 3 4 5') == 'NO'\nassert solution('5\\n2 2 3 4 5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 2\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 3 2 4\") == \"NO\"\nassert solution(\"3 3 3 3 3 3 3 3 3 3 3 3\") == \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n 1 3 2') == 'YES'\nassert solution('5\\n 1 2 3 4 5') == 'NO'\nassert solution('5\\n 2 2 3 4 5') == 'YES'\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 3 4 5\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"1 1 1 1 1\") == \"YES\"\nassert solution(\"1 2 1 2 1 1\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 2 3') == 'NO'\nassert solution('5 1 2 3 4 5') == 'YES'\nassert solution('5 1 2 3 4') == 'YES'\nassert solution('7 1 2 3 4 5 6 7') == 'YES'\nassert solution('8 1 2 3 4 5 6 7 8') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 2 3 4 5') == 'YES'\nassert solution('5\\n2 2 3 4 5') == 'YES'\n\n-----"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n11 0 0 14\\n5 4\\n\") == \"Yes\"\nassert solution(\"6 1\\n2 3 0 8 9 10\\n5\\n\") == \"No\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n11 0 0 14\\n5 4') == 'Yes'\nassert solution('6 1\\n2 3 0 8 9 10\\n5') == 'No'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7') == 'Yes'\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\") == \"Yes\"\nassert solution(\"6 1\") == \"No\"\nassert solution(\"7 7\") == \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n11 0 0 14\\n5 4\") == \"Yes\"\nassert solution(\"6 1\\n2 3 0 8 9 10\") == \"No\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\") == \"Yes\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\") == \"Yes\"\nassert solution(\"4 1\\n8 94 0 4\") == \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n11 0 0 14\\n5 4') == 'Yes'\nassert solution('6 1\\n2 3 0 8 9 10') == 'No'\nassert solution('7 7\\n0 0 0 0 0 0 0') == 'Yes'\nassert solution('4 1\\n8 94 0 4') == 'Yes'\nassert solution('7 7\\n0 0 0 0 0 0 0') == 'Yes'\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n11 0 0 14\\n5 4\") == \"Yes\"\nassert solution(\"6 1\\n2 3 0 8 9 10\") == \"No\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\") == \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n11 0 0 14\\n5 4\") == \"Yes\"\nassert solution(\"6 1\\n2 3 0 8 9 10\") == \"No\"\nassert solution(\"4 1\\n8 94 0 4\") == \"Yes\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\") == \"Yes\"\nassert solution(\"4 1\\n2 3 0 8 9 10\") == \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n11 0 0 14\\n5 4\") == \"Yes\"\nassert solution(\"6 1\\n2 3 0 8 9 10\") == \"No\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\") == \"Yes\"\nassert solution(\"6 2\\n2 3 0 8 9 10\\n5\") == \"No\"\n\"\"\"\nimport sys\n\nclass Solution:\n    def is_sequence_increasing(self, arr: list) -> bool:\n        for i in range(1, len(arr)):\n            if arr[i] <= arr[i-1]:\n                return False\n        return True\n    def check_sequence(self, arr: list, arr_length: int, num_of_zeros: int):\n        if len(arr)!= num_of_zeros + arr_length:\n            return False\n        nums = {}\n        for x in arr:\n            if x in nums:\n                return False\n            nums[x] = True\n        for i in range(arr_length):\n            if i + num_of_zeros not in nums:\n                return False\n        return True\n    def solution(self, stdin):\n        n, k = map(int, stdin.split())\n        arr = list(map(int, stdin.split()))\n        arr_length = len(arr)\n        res = self.check_sequence(arr, arr_length, k)\n        if not res:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n11 0 0 14\\n5 4\") == 'Yes'\nassert solution(\"6 1\\n2 3 0 8 9 10\\n5\") == 'No'\nassert solution(\"7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\") == 'Yes'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'No'\nassert solution('4 1') == 'No'\nassert solution('7 7') == 'Yes'\nassert solution('6 1') == 'No'\nassert solution('7 2') == 'No'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1 6 2\n4 3 3''') == \"YES\"\nassert solution('''5 1 1\n4 3 2''') == \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 6 2\\n4 3 3') == 'YES'\nassert solution('5 1 1\\n4 3 2') == 'NO'\nassert solution('1 6 2\\n4 3 1') == 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 6 2\\n4 3 3') == 'YES'\nassert solution('5 1 1\\n4 3 2') == 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6 2\\n4 3 3\") == \"YES\"\nassert solution(\"5 1 1\\n4 3 2\") == \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 6 2\\n4 3 3') == 'YES'\nassert solution('5 1 1\\n4 3 2') == 'NO'\nassert solution('1 3 2\\n5 3 3') == 'YES'\n\"\"\"\n\nx, y, z = map(int, stdin.readline().split())\n\na, b, c = map(int, stdin.readline().split())"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 6 2\\n4 3 3\") == 'YES'\nassert solution(\"5 1 1\\n4 3 2\") == 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 6 2\\n4 3 3\") == \"YES\"\nassert solution(\"5 1 1\\n4 3 2\") == \"NO\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 6 2\\n4 3 3\") == \"YES\"\nassert solution(\"5 1 1\\n4 3 2\") == \"NO\"\nassert solution(\"1 2 2\\n4 3 4\") == \"YES\""
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'1 6 2\\n4 3 3'\n) == 'YES'\nassert solution(\n'5 1 1\\n4 3 2'\n) == 'NO'\n\"\"\"\n\nx, y, z = map(int, input().split())\na, b, c = map(int, input().split())\n\ngrapes = [a, b, c]\n\ncount = 0\nfor i in grapes:\n    if i < x:\n        count += 1"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 0 1\\n0 0 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 0 1 1\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\"\n) == \"YES\"\nassert solution(\n    \"0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\"\n) == \"NO\""
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 0 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1') == 'YES'\nassert solution('1 0 1 0\\n0 0 0 1\\n1 1 0 0\\n0 0 0 1') == 'NO'\nassert solution('0 1 1 0\\n0 1 1 0\\n1 1 0 0\\n0 0 0 1') == 'YES'\nassert solution('1 0 1 0\\n0 0 0 1\\n1 0 1 0\\n0 0 0 1') == 'NO'\nassert solution('0 0 1 1\\n0 1 1 0\\n1 0 1 0\\n0 0 0 1') == 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 0 0 1\\n1 1 1 1\\n1 0 0 0\\n1 1 0 1\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\nassert solution(\"1 0 0 0\\n0 0 0 1\\n0 0 0 0\\n1 0 1 0\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 0 0 1\\n1 0 0 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n09') == 'NO'\nassert solution('2\\n09') == 'NO'\nassert solution('9\\n123456789') == 'YES'\nassert solution('3\\n911') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\") == 'YES'\nassert solution(\"0\") == 'NO'\n\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\n\"\n    \"586\"\n) == \"NO\"\n\nassert solution(\n    \"2\\n\"\n    \"09\"\n) == \"NO\"\n\nassert solution(\n    \"9\\n\"\n    \"123456789\"\n) == \"YES\"\n\n\n-----Tests-----\n====Test 1=====\ninput:\n3\n586\noutput:\nNO\n====Test 2=====\ninput:\n2\n09\noutput:\nNO\n====Test 3=====\ninput:\n9\n123456789\noutput:\nYES\n====Test 4=====\ninput:\n3\n911\noutput:\nYES\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"912\") == \"YES\"\nassert solution(\"913\") == \"NO\"\nassert solution(\"911\") == \"YES\"\nassert solution(\"912\") == \"YES\"\nassert solution(\"913\") == \"NO\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n911\") == \"NO\"\nassert solution(\"3\\n912\") == \"YES\"\nassert solution(\"3\\n1112\") == \"YES\"\nassert solution(\"3\\n1212\") == \"NO\"\nassert solution(\"3\\n1312\") == \"NO\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n911\") == \"NO\"\nassert solution(\"9\\n123456789\") == \"YES\"\n\"\"\""
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"09\") == \"NO\"\nassert solution(\"911\") == \"YES\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"912\") == \"NO\"\nassert solution(\"911\") == \"YES\"\nassert solution(\"913\") == \"NO\"\nassert solution(\"991\") == \"NO\"\nassert solution(\"912\") == \"NO\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6') == 'NO'\nassert solution('7') == 'YES'\nassert solution('8') == 'NO'\nassert solution('9') == 'NO'\nassert solution('10') == 'YES'"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\", \"586\") == \"NO\"\nassert solution(\"9\", \"123456789\") == \"YES\"\n\n-----Test Input-----\n\n3\n586\n\n-----Test Output-----\n\nNO\n\"\"\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n2 1\\n3 5\\n2 3\\n1 5') == 10\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n2 1\\n3 5\\n2 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n0 2\\n0 3\\n3 5\\n0 6\") == \"5\"\nassert solution(\"4 2\\n2 1\\n3 5\\n2 3\") == \"10\"\n\n\"\"\"\n\nn, f = map(int, stdin.readline().split())\narr = [list(map(int, stdin.readline().split())) for _ in range(n)]\nres = 0\nfor i in range(n):\n    res += arr[i][0] * arr[i][1] * 2\n\nfor i in range(f):\n    res *= 2\nprint(res)\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2 1\\n3 5\\n2 3\\n1 5\") == 10\nassert solution(\"4 1\\n0 2\\n0 3\\n3 5\\n0 6\") == 5\nassert solution(\"4 2\\n1 1\\n2 2\\n0 2\\n0 3\\n3 5\\n0 6\") == 5\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n0 2\\n0 3\\n3 5\\n0 6\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n2 1\\n3 5\\n2 3\\n1 5\") == 10\nassert solution(\"4 1\\n0 2\\n0 3\\n3 5\\n0 6\") == 5\nassert solution(\"3 3\\n1 5\\n0 6\") == 3\nassert solution(\"3 2\\n1 5\\n0 6\") == 2"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n2 1\\n3 5\\n2 3\\n1 5') == '10'\nassert solution('4 1\\n0 2\\n0 3\\n3 5\\n0 6') == '5'\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n2 1\\n3 5\\n2 3\\n1 5') == 10\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n2 1\\n3 5\\n2 3\\n1 5\\n') == '10'\n\n---\n\"\"\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 1\\n3 5\\n2 3\") == \"10\"\nassert solution(\"4 1\\n0 2\\n0 3\\n3 5\\n0 6\") == \"5\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\narr = [[int(x) for x in input().split()] for _ in range(n)]\ndp = [[0] * (m + 1) for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        if arr[i - 1][0] <= j and arr[i - 1][1] <= i:\n            dp[i][j] = max(dp[i][j], dp[i - 1][j - arr[i - 1][0]] + arr[i - 1][2] * 2)\nprint(dp[n][m])\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 2''') == '10'\n\"\"\""
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"4 2\"\n) == \"10\"\nassert solution(\n\"6 9\"\n) == \"0\"\nassert solution(\n\"3 3\"\n) == \"6\"\n\n-----\n\"\"\"\n\n\"\"\"\nUsing numpy\n\"\"\""
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''\n5 2\n'''\n) == 10\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n') == 10\nassert solution('1 10\\n') == 0\nassert solution('3 10\\n') == 0\nassert solution('3 1\\n') == 0\nassert solution('4 1\\n') == 1\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 10') == 10\nassert solution('1 10\\n') == 0\n\n\"\"\""
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 10\\n') == '0'\nassert solution('2 10\\n') == '0'\nassert solution('3 10\\n') == '2'\nassert solution('4 10\\n') == '4'\nassert solution('5 10\\n') == '6'\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 10') == 10\nassert solution('1 10\\n') == 0\n\nfrom functools import lru_cache\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 10') == 10\nassert solution('1 10\\n') == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"10\"\nassert solution(\"1 10\") == \"0\"\nprint('test passed')\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''20 15 2 3''') == '1'\nassert solution('''10 11 2 4''') == '-1'\n'''"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 15 2 3\") == \"1\"\nassert solution(\"10 11 2 4\") == \"-1\"\nassert solution(\"2 4 2 2\") == \"3\"\nassert solution(\"1 2 1 1\") == \"1\"\nassert solution(\"5 3 3 1\") == \"3\"\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 15 2 3\") == \"1\"\nassert solution(\"10 11 2 4\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 5 3') == '2'\nassert solution('10 1 10 1') == '-1'\nassert solution('10 2 10 0') == '1'\nassert solution('10 3 10 3') == '1'\nassert solution('10 4 10 0') == '0'\n\"\"\"\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 11 2 4\") == \"1\"\nassert solution(\"20 15 2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 15 2 3\") == '1'\nassert solution(\"10 11 2 4\") == '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2 1\") == \"1\"\nassert solution(\"5 2 2 1\") == \"2\"\nassert solution(\"8 5 2 4\") == \"2\"\nassert solution(\"10 11 2 4\") == \"-1\"\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 15 2 3\") == \"1\"\nassert solution(\"10 11 2 4\") == \"-1\"\nprint(\"Test finished.\")\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 15 2 3\") == \"1\"\nassert solution(\"10 11 2 4\") == \"-\"\nassert solution(\"20 18 2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 15 2 3\") == \"1\"\nassert solution(\"10 11 2 4\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW') == '5'\nassert solution('1 2\\nBB') == '-1'\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW\") == \"5\"\nassert solution(\"1 2\\nBB\") == \"-1\"\nassert solution(\"3 3\\nWWW\\nWWW\\nWWW\") == \"1\"\n\n\"\"\"\n\nfrom collections import namedtuple\n\nCase = namedtuple(\"Case\", [\"n\", \"m\", \"sheet\"])\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\nWBBW\\nWBBW\\nWBBW\\nWWWW\") == \"1\"\nassert solution(\"5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW\") == \"1\"\nassert solution(\"5 5\\nWWWBBW\\nWBBWBBW\\nWWWBBW\\nWBBWBBW\\nWWWBBW\") == \"1\"\nassert solution(\"5 5\\nWWWBBW\\nWBBWBBW\\nWWWBBW\\nWWWBBW\\nWWWBBW\") == \"5\"\nassert solution(\"5 5\\nWBBWBBW\\nWBBWBBW\\nWWWBBW\\nWWWBBW\\nWWWBBW\") == \"3\"\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3, 3) == 1\nassert solution(5, 4) == 5\nassert solution(1, 2) == -1"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW\") == \"5\"\nassert solution(\"1 2\\nBB\") == \"0\"\nassert solution(\"3 3\\nWWW\\nWWW\\nWWW\") == \"1\"\nassert solution(\"3 3\\nWWW\\nWWW\\nWWW\") == \"1\"\n\nSolution 2\n\nfrom numpy import array\nfrom numpy.linalg import norm"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\nWBWBWBWB\\nWBWBWBWB\\nWBWBWBWB\\nWBWBWBWB\\n\") == \"1\"\nassert solution(\"4 4\\nBBBBBBBB\\nBBBBBBBB\\nBBBBBBBB\\nBBBBBBBB\\n\") == \"0\"\nassert solution(\"1 1\\nBB\\n\") == \"1\"\nassert solution(\"1 2\\nBWB\\n\") == \"-1\"\nassert solution(\"1 1\\nBWBWBWBWB\\n\") == \"5\"\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW') == '5'\nassert solution('3 3\\nWWW\\nWWW\\nWWW') == '1'\nassert solution('1 2\\nBB') == '-1'\n\n---"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW\") == \"5\"\nassert solution(\"1 2\\nBB\") == \"1\"\nassert solution(\"3 3\\nWWW\\nWWW\\nWWW\") == \"1\""
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW\") == \"5\"\nassert solution(\"1 2\\nBB\") == \"-1\"\nassert solution(\"3 3\\nWWW\\nWWW\\nWWW\") == \"1\"\n\n\n-----Tests-----\n\nimport sys\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_01(self):\n        with open(\"test_0.txt\") as f:\n            stdin = f.read()\n        with open(\"test_0.out\", \"w\") as f:\n            f.write(solution(stdin))\n        with open(\"test_0.exp\", \"w\") as f:\n            f.write(\"5\")\n        self.assertEqual(solution(stdin), \"5\")"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW') == '5'\nassert solution('1 2\\nBB') == '-1'\nassert solution('3 3\\nWWW\\nWWW\\nWWW') == '1'\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Yes'\nassert solution('5 1 2 3 4 5') == 'No'\nassert solution('5 1 2 3 4 5') == 'No'\n\nassert solution('') == 'Yes'\nassert solution('5 1 2 3 4 5') == 'No'\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 3 4 5\\n2 1 4 3 5\") == 'Yes'\nassert solution(\"5 1 1 1 1 5\\n1 0 1 0 1 5\") == 'Yes'\nassert solution(\"5 1 1 1 1 5\\n1 0 1 0 1 5\") == 'No'\nassert solution(\"5 1 1 1 1 5\\n1 0 1 0 1 5\") == 'No'\n\"\"\""
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input_1) == output_1\n\n\"\"\""
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 1 1 1\\n1 0 1 0 1\") == \"Yes\"\nassert solution(\"5\\n1 1 1 1 1\\n2 1 4 3 5\") == \"No\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5, [1, 2, 3, 4, 5], [2, 1, 4, 3, 5]) == \"Yes\"\nassert solution(3, [2, 3, 9], [1, 7, 9]) == \"No\"\n\n\n\"\"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 3 4 5\\n2 1 4 3 5\") == \"Yes\"\nassert solution(\"5 1 2 3 4 5\\n1 1 4 3 5\") == \"Yes\"\nassert solution(\"5 1 2 3 4 5\\n1 0 4 3 5\") == \"No\"\nassert solution(\"5 1 2 3 4 5\\n0 1 4 3 5\") == \"No\"\nassert solution(\"5 1 2 3 4 5\\n0 1 2 3 4 5\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(example1) == 'Yes'\nassert solution(example2) == 'No'\n\"\"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(None) == \"Yes\"\nassert solution(None) == \"Yes\"\nassert solution(None) == \"Yes\"\n\nassert solution(\"1 1 1 1 1\") == \"Yes\"\nassert solution(\"1 0 1 0 1\") == \"Yes\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 4 3 5\\n1 1 1 1 1\") == \"Yes\"\nassert solution(\"5\\n1 1 1 1 1\\n1 0 1 0 1\") == \"Yes\"\nassert solution(\"3\\n2 3 9\\n1 7 9\") == \"No\"\n\nsolution(\"5\\n1 1 1 1 1\\n1 0 1 0 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1 1\") == \"Yes\"\nsolution(\"5\\n1 1 1 1"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n90 90 90 90\\n\") == \"0\"\nassert solution(\"1\\n360\\n\") == \"360\"\nassert solution(\"4\\n170 30 150 10\\n\") == \"0\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(stdin)) == str(correct_value)\n\n\n---\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0441\u0442\u0440\u043e\u043a \u0432 \u0444\u0430\u0439\u043b\u0435 \u0438 \u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u0443 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043e\u0431\u0449\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u0430\u0441\u0442 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0444\u0430\u0439\u043b\u0430. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e - \u0440\u0430\u0437\u043c\u0435\u0440 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u0445 \u043e\u0431\u0449\u0435\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. \u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043e\u0431\u0449\u0435\u0439 \u043f\u0430\u043c\u044f\u0442\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e - \u043e\u0431\u0449\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u0430\u0441\u0442 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430.\n\nSample Input:\n\n4\n80\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas pulvinar malesuada velit.\n\nSample Output:\n\n400\n\nSample Input 1:\n\n4\n80\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas pulvinar malesuada velit.\n\nSample Output 1:\n\n80\n\nSample Input 2:\n\n4\n90\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas pulvinar malesuada velit.\n\nSample Output 2:\n\n240\n\nSample Input 3:\n\n4\n90\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas pulvinar malesuada velit.\n\nSample Output 3:\n\n90\n\nSample Input 4:\n\n4\n100\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas pulvinar malesuada velit.\n\nSample Output 4:\n\n400"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n90 90 90 90\\n\") == \"0\"\nassert solution(\"3\\n100 100 160\\n\") == \"40\"\nassert solution(\"1\\n360\\n\") == \"360\"\nassert solution(\"4\\n170 30 150 10\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n100 100 160\\n\") == '0'\nassert solution(\"1\\n360\\n\") == '360'\nassert solution(\"4\\n170 30 150 10\\n\") == '0'\n\"\"\"\nimport sys\nimport functools"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n170 30 150 10\\n') == '0'\nassert solution('4\\n100 100 160\\n') == '0'\nassert solution('1\\n360\\n') == '360'\nassert solution('3\\n100 100 160\\n') == '40'\nassert solution('4\\n100 100 160\\n') == '0'\n\n\"\"\"\n\nfrom __future__ import print_function\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n100 100 160\\n') == '0'\nassert solution('4\\n90 90 90 90\\n') == '0'\nassert solution('4\\n170 30 150 10\\n') == '0'\nassert solution('4\\n1 2 3 4\\n') == '360'"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n170 30 150 10\") == \"0\"\nassert solution(\"3\\n100 100 160\") == \"0\"\nassert solution(\"1\\n360\") == \"360\"\n\n\"\"\""
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n90 90 90 90\") == '0'\nassert solution(\"3\\n100 100 160\") == '0'\nassert solution(\"1\\n360\") == '360'\nassert solution(\"4\\n170 30 150 10\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 10 11\\n\") == \"10\\n\"\nassert solution(\"3\\n1 10 11\\n\") == \"10\\n\"\nassert solution(\"4\\n1 10 11 12\\n\") == \"10\\n\"\n\nassert solution(\"4\\n1 10 11 12\\n\") == \"10\\n\"\nassert solution(\"4\\n1 10 11 12\\n\") == \"10\\n\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n170 30 150 10\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"9\"\nassert solution(\"1 3\") == \"7\"\nassert solution(\"2 2\") == \"9\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"2 2\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"7\"\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nprint(n * n * n // 2 % (10 ** 9 + 7))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3') == '7'\nassert solution('2 2') == '9'\nassert solution('4 4') == '15'\nassert solution('5 3') == '33'\nassert solution('6 4') == '52'\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"9\"\nassert solution(\"1 3\") == \"7\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 10\") == \"9\"\nassert solution(\"1 10 10\") == \"0\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3') == '7'\nassert solution('2 2') == '9'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\\n2 2\\n\") == \"7\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"2 2\") == \"9\"\nassert solution(\"3 2\") == \"6\"\nassert solution(\"3 1\") == \"4\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"2 2\") == \"9\"\n\"\"\"\n\nn, m = map(int, input().split())\n\nres = 1\n\nfor k in range(1, n + 1):\n    res *= (m + 1 - k)\n    res %= (10 ** 9 + 7)\nprint(res)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1, 3) == 7\nassert solution(2, 2) == 9\n\n\"\"\""
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\n\"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\nassert solution('67') == '2244 2245'\n\"\"\"\n\nimport math"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\n\"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"4 5\"\nassert solution(\"6\") == \"8 10\"\nassert solution(\"1\") == \"1 2\"\nassert solution(\"17\") == \"144 145\"\nassert solution(\"67\") == \"2244 2245\"\n\"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '4 5'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\nassert solution('67') == '2244 2245'\n\"\"\"\nimport math\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"4 5\"\nassert solution(\"6\") == \"8 10\"\nassert solution(\"1\") == \"-1\"\nassert solution(\"17\") == \"144 145\"\nassert solution(\"67\") == \"2244 2245\"\n\n\"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\nassert solution('67') == '2244 2245'\n\n\"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"4 5\"\n\"\"\""
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\nassert solution('67') == '2244 2245'\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4') == 'No'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"No\"\nassert solution(\"5 3\") == \"Yes\"\nprint(solution(\"4 4\"))\nprint(solution(\"5 3\"))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(4, 4) == \"No\"\nassert solution(5, 3) == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"Yes\"\nassert solution(\"4 4\") == \"No\"\nassert solution(\"5 4\") == \"No\"\n\"\"\""
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"No\"\nassert solution(\"5 3\") == \"Yes\"\nassert solution(\"3 6\") == \"No\"\nassert solution(\"6 6\") == \"Yes\"\nassert solution(\"10 10\") == \"Yes\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4') == 'No'\nassert solution('5 3') == 'Yes'\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4') == 'No'\nassert solution('5 3') == 'Yes'\n\n'''\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == 'No'\nassert solution(\"5 3\") == 'Yes'\n\n---"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1, 2) == 'Yes'\nassert solution(3, 4) == 'No'\nassert solution(5, 3) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4') == 'No'\nassert solution('5 3') == 'Yes'\nassert solution('9 9') == 'Yes'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n10\") == \"<\"\nassert solution(\"11\\n10\") == \">\"\nassert solution(\"00012345\\n12345\") == \"=\"\nassert solution(\"0123\\n111\") == \">\"\n\nfrom collections import namedtuple\n\nAnswer = namedtuple(\"Answer\", \"min max\")"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\") == \"=\"\nassert solution(\"10 0\") == \">\"\nassert solution(\"0 10\") == \"<\"\nassert solution(\"10 10\") == \"=\"\nassert solution(\"100 10\") == \"<\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \">\"\nassert solution(\"10 9\") == \"<\"\nassert solution(\"11 10\") == \">\"\nassert solution(\"11 1\") == \"<\"\nassert solution(\"11 11\") == \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\">\") == \">\"\nassert solution(\"<\") == \"<\"\nassert solution(\"=\") == \"=\"\nassert solution(\">\") == \">\"\nassert solution(\"<\") == \"<\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 10\") == \"<\"\nassert solution(\"11 10\") == \">\"\nassert solution(\"00012345 12345\") == \"=\"\nassert solution(\"0123 111\") == \">\""
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n10\") == \"<\"\nassert solution(\"11\\n10\") == \">\"\nassert solution(\"00012345\\n12345\") == \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('0') == ''\nassert solution('0 0') == ''\nassert solution('0 0 0') == ''\nassert solution('0 0 0 0') == ''\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\n10') == '<'\nassert solution('11\\n10') == '>'\nassert solution('00012345\\n12345') == '='\nassert solution('0123\\n111') == '>'\nassert solution('123\\n111') == '>'\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(9) == \"<\"\nassert solution(10) == \">\"\nassert solution(11) == \">\"\n\nassert solution(00012345) == \"=\"\nassert solution(12345) == \"=\""
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n-1 0 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n-1 0 1\") == 6\nassert solution(\"2 1\\n1 0\") == 1\nassert solution(\"1 1\\n-1\") == 2\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n-1 0 1\") == \"6\"\nassert solution(\"2 1\\n1 0\") == \"1\"\nassert solution(\"1 1\\n-1\") == \"2\"\n\"\"\"\n\nfrom typing import List\n\nclass TopologicalParity:\n    def __init__(self, pieces: List[int], colors: List[int]):\n        self.n = len(pieces)\n        self.pieces = pieces\n        self.colors = colors\n        self.dp = [[0 for _ in range(self.n)] for _ in range(self.n)]\n\n    def helper(self, l: int, r: int, flag: int):\n        if l > r:\n            return 1\n        if l == r:\n            if flag == -1:\n                return 1\n            elif flag == 0:\n                return 2\n            else:\n                return 3\n        res = 0\n        for i in range(l, r):\n            if self.pieces[l] > self.pieces[i]:\n                if self.colors[i] == flag:\n                    res = (res + self.helper(l, i, -flag)) % 10 ** 9 + 10 ** 9\n                else:\n                    res = (res + self.helper(l, i, flag)) % 10 ** 9\n            if self.pieces[r] > self.pieces[i]:\n                if self.colors[i] == flag:\n                    res = (res + self.helper(i, r, -flag)) % 10 ** 9 + 10 ** 9\n                else:\n                    res = (res + self.helper(i, r, flag)) % 10 ** 9\n        return res\n\n    def solution(self):\n        for i in range(self.n):\n            for j in range(self.n):\n                if i == j:\n                    self.dp[i][j] = 1\n                else:\n                    self.dp[i][j] = self.helper(i, j, 0)\n                    self.dp[i][j] = self.dp[i][j] % 10 ** 9 + 10 ** 9\n        return self.dp[0][self.n - 1]\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n-1 0 1') == 6\nassert solution('2 1\\n1 0') == 1\nassert solution('1 1\\n-1') == 2\n\"\"\"\n\nn, p = map(int, input().split())\nc = list(map(int, input().split()))\n\nm = 0\nfor i in range(n):\n    if c[i] == -1:\n        m += 1\n\ndp = [[0] * m for _ in range(n)]\ndp[0][0] = 1\n\nfor i in range(1, n):\n    if c[i] == -1:\n        dp[i][0] = 1\n    else:\n        dp[i][0] = 0\n\nfor j in range(1, m):\n    dp[0][j] = dp[0][j - 1]\n\nfor i in range(1, n):\n    for j in range(1, m):\n        dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        if c[i] == -1:\n            dp[i][j] %= 1000000007\n\nprint(dp[n - 1][m - 1])\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n-1 0 1\") == \"6\"\nassert solution(\"2 1\\n1 0\") == \"1\"\nassert solution(\"1 1\\n-1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == 2\n\n\"\"\"\n\nfrom queue import Queue\nfrom collections import deque\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n-1 0 1') == 6\nassert solution('2 1\\n1 0') == 1\nassert solution('1 1\\n-1') == 2\n\"\"\"\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n1 0\") == \"1\"\nassert solution(\"2 1\\n0 1\") == \"1\"\nassert solution(\"2 1\\n1 0\") == \"2\"\nassert solution(\"3 1\\n-1 0\") == \"2\"\nassert solution(\"3 1\\n-1 1\") == \"2\"\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n-1 0 1\") == \"2\"\n\n-----\n'''\nfrom itertools import permutations"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0 1\\n-1 0 1\") == 6\nassert solution(\"2 1\\n0 1\") == 1\n\n-----\n\n\"\"\""
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 3 4\") == \"3\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"4 4 4 4\") == \"0\"\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == \"1000000000\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 3 4\") == 3\nassert solution(\"6 2 1 1\") == 1\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == 1000000000\n\n\"\"\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 3 4\") == '3'\nassert solution(\"6 2 1 1\") == '1'\nassert solution(\"4 4 4 4\") == '0'\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == '1000000000'\n\"\"\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 3 4') == 3\nassert solution('6 2 1 1') == 1\nassert solution('999999999 1000000000 1000000000 1000000000') == 1000000000\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('1 1 3 4') == 3\nassert solution('6 2 1 1') == 1\nassert solution('999999999 1000000000 1000000000 1000000000') == 1000000000\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 4 4\") == '0'\nassert solution(\"6 2 1 1\") == '1'\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == '1000000000'\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 3 4\") == \"3\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"4 4 4 4\") == \"0\"\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == \"1000000000\"\n\n\"\"\"\n\nfrom typing import List, Tuple, Optional\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 3 4\") == \"3\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"4 4 4 4\") == \"0\"\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == \"1000000000\"\n\n\"\"\"\n\n\n\nimport math\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 3 4\") == \"3\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == \"1000000000\""
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 3 4\") == \"3\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"4 4 4 4\") == \"0\"\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == \"1000000000\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n2 3\\n3 2\\n3 1') == 'YES'\nassert solution('1 2\\n2 3\\n3 2\\n3 1') == 'YES'\nassert solution('1 2\\n2 3\\n3 2\\n3 1') == 'NO'\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n1 2\\n2 3\\n3 2\\n3 1') == 'YES'\nassert solution('5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1') == 'NO'\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n1 2\\n2 3\\n3 2\\n3 1\\n') == 'YES'\nassert solution('5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5\\n') == 'NO'\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5\\n\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n2 3\\n3 2\\n3 1\\n\") == \"YES\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5\") == \"YES\"\n\n\"\"\"\nimport sys\n\n\"\"\"\nN = int(input())\nM = int(input())\ngraph = dict()\nfor i in range(M):\n    u, v = map(int, input().split())\n    if u in graph:\n        graph[u].add(v)\n    else:\n        graph[u] = set([v])\n\"\"\""
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n3 4\n1 2\n2 3\n3 2\n3 1\n\"\"\"\n    ) == \"YES\"\nassert solution(\n    \"\"\"\n5 6\n1 2\n2 3\n3 2\n3 1\n2 1\n4 5\n\"\"\"\n    ) == \"NO\"\nassert solution(\n    \"\"\"\n5 6\n1 2\n2 3\n3 2\n3 1\n2 1\n1 5\n\"\"\"\n    ) == \"YES\"\nassert solution(\n    \"\"\"\n4 4\n1 2\n1 3\n1 4\n2 4\n\"\"\"\n    ) == \"YES\"\nassert solution(\n    \"\"\"\n4 4\n1 2\n2 3\n3 4\n1 4\n\"\"\"\n    ) == \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 3\\n3 2\\n3 1\") == \"YES\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5\") == \"NO\""
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5\") == \"NO\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n2 3\\n3 2\\n3 1\") == \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n1 2\\n2 3\\n3 2\\n3 1') == 'YES'\nassert solution('5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1') == 'NO'\n\n\n\"\"\""
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n2 3\\n3 2\\n3 1\") == \"YES\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\") == \"NO\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 2\\n3 1\") == \"YES\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 595\\n43 2\\n300 4\\n554 10\") == \"281\"\nassert solution(\"1 1\\n1 1\") == \"0\"\nassert solution(\"2 50\\n20 0\\n3 1\") == \"30\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n1 1\") == \"0\"\n\nassert solution(\"2 50\\n20 0\\n3 1\") == \"30\"\n\nassert solution(\"5 240\\n13 0\\n50 25\\n60 5\\n155 70\\n165 70\") == \"26\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 595\\n43 2\\n300 4\\n554 10\") == \"281\"\nassert solution(\"1 1\\n1 1\") == \"0\"\nassert solution(\"2 50\\n20 0\\n3 1\") == \"30\"\n\n\"\"\"\n\nimport sys\nimport string\nfrom collections import deque, defaultdict\n\nsys.stdin = open('test_files/Y11R5P1/A.in')\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 595\\n43 2\\n300 4\\n554 10\") == \"281\"\nassert solution(\"1 1\\n1 1\") == \"0\"\nassert solution(\"2 50\\n20 0\\n3 1\") == \"30\"\nassert solution(\"5 240\\n13 0\\n50 25\\n60 5\\n155 70\\n165 70\") == \"26\"\n\n\"\"\"\n\nfrom typing import List, Tuple\nfrom itertools import zip_longest\nimport sys\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 50\\n3 1\\n\") == \"30\"\nassert solution(\"3 1\\n\") == \"0\"\nassert solution(\"1 1\\n1 1\\n\") == \"0\"\nassert solution(\"2 50\\n20 0\\n3 1\\n\") == \"26\"\n\nprint(\"Well done!\")\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 595) == \"281\"\nassert solution(1, 1) == \"0\"\nassert solution(2, 50) == \"30\"\nassert solution(5, 240) == \"26\"\nassert solution(3, \"55 4\") == \"29\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 50\\n20 0\\n3 1') == '30'\nassert solution('5 240\\n13 0\\n50 25\\n60 5\\n155 70\\n165 70') == '26'\nassert solution('3 1\\n1 1') == '0'\nassert solution('1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 50\\n3 1\\n\") == \"30\"\nassert solution(\"5 240\\n13 0\\n50 25\\n60 5\\n155 70\\n165 70\\n\") == \"26\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5 240\n13 0\n50 25\n60 5\n155 70\n165 70\n\"\"\") == \"26\"\n\nassert solution(\"\"\"\n1 1\n1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 50\n20 0\n3 1\n\"\"\") == \"30\"\n\nassert solution(\"\"\"\n5 240\n13 0\n50 25\n60 5\n155 70\n165 70\n\"\"\") == \"26\"\n\nassert solution(\"\"\"\n5 595\n43 2\n300 4\n554 10\n\"\"\") == \"281\""
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 4\") == \"4\"\nassert solution(\"1 1\\n1 1\") == \"0\"\nassert solution(\"5 3\\n10 5\") == \"17\"\nassert solution(\"2 2\\n2 2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 2 3 4 5 6 7 8\") == \"10\"\nassert solution(\"0\\n0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"3\\n0 4 1 0 0 9 8 3\") == \"3\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n1 2 3 4 5 6 7 8') == '10'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 4 1 0 0 9 8 3\") == \"3\"\nassert solution(\"5\\n0 4 1 0 0 9 8 3\") == \"3\"\n\"\"\"\n\nMAX_WEIGHT = 2 ** 20\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nweights = [0] * MAX_WEIGHT\n\nfor i in sys.stdin:\n    weights[int(i)] += 1\n\nweight = 0\nanswer = 0\n\nfor i in range(MAX_WEIGHT):\n    if i < N:\n        weight += weights[i]\n    else:\n        weight += (weights[i] - weights[i - N])\n        answer = max(answer, weight)\n\nprint(answer)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n1 2 3 4 5 6 7 8') == '10\\n1 2 3 4 5 6 7 8'\nassert solution('0\\n0 0 0 0 0 0 0') == '0\\n0 0 0 0 0 0 0'\nassert solution('3\\n0 4 1 0 0 9 8 3') == '3\\n0 4 1 0 0 9 8 3'\n\nprint('PASSED')\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5 6 7 8\\n0 0 0 0 0 0 0 0\\n') == '10\\n'\nassert solution('5\\n1 2 3 4 5\\n0 0 0 0 0 0 0\\n') == '5\\n'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 2 3 4 5 6 7 8\") == \"10\"\nassert solution(\"0\\n0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"3\\n0 4 1 0 0 9 8 3\") == \"3\"\nassert solution(\"1\\n8\") == \"8\"\nassert solution(\"3\\n8 5 1 2\") == \"3\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(solution(str(stdin)))\nprint(solution(str(input())))\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 2 3 4 5 6 7 8\") == 10\n\"\"\"\n\n\"\"\"\nInput\n10\n1 2 3 4 5 6 7 8\n\nOutput\n10\n\nInput\n0\n0 0 0 0 0 0 0 0\n\nOutput\n0\n\nInput\n3\n0 4 1 0 0 9 8 3\n\nOutput\n3\n\"\"\"\n\n\"\"\"\nInput\n1\n10\n\nOutput\n10\n\"\"\"\n\n\"\"\"\nInput\n1\n1\n\nOutput\n1\n\"\"\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''10\n1 2 3 4 5 6 7 8\n''') == '10'\nassert solution('''0\n0 0 0 0 0 0 0 0\n''') == '0'\nassert solution('''3\n0 4 1 0 0 9 8 3\n''') == '3'\nassert solution('''10\n1 2 3 4 5 6 7 8\n''') == '10'\n\nprint('Success')\n'''\nInput\n10\n1 2 3 4 5 6 7 8\n\nOutput\n10\n\nInput\n0\n0 0 0 0 0 0 0 0\n\nOutput\n0\n\nInput\n3\n0 4 1 0 0 9 8 3\n\nOutput\n3\n\nInput\n10\n1 2 3 4 5 6 7 8\n\nOutput\n10\n'''\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 2 3 4 5 6 7 8\") == \"10\"\nassert solution(\"0\\n0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"3\\n0 4 1 0 0 9 8 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(int(input()))\n\"\"\""
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 12\") == 150\nassert solution(\"4 3\") == 10\nassert solution(\"5 787787787\") == 44981600785557577\nassert solution(\"4 3\") == 10\nassert solution(\"4 3\") == 10\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 12\\n20 30 70 90') == '150'\nassert solution('4 3\\n10 100 1000 10000') == '10'\nassert solution('5 787787787\\n123456789 234567890 345678901 456789012 987654321') == '44981600785557577'\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\") == \"150\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"5 787787787\") == \"44981600785557577\""
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 12\\n20 30 70 90\\n') == 150\n\n\"\"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\") == 150\nassert solution(\"4 3\") == 10\nassert solution(\"5 787787787\") == 44981600785557577\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 12\\n20 30 70 90\") == \"150\"\nassert solution(\"4 3\\n10 100 1000 10000\") == \"30\"\nassert solution(\"5 787787787\\n123456789 234567890 345678901 456789012 987654321\") == \"44981600785557577\"\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 12\") == \"150\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"5 787787787\") == \"44981600785557577\"\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 12') == '150'\nassert solution('4 3') == '10'\nassert solution('5 787787787') == '44981600785557577'\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 12') == '150'\nassert solution('4 3') == '10'\nassert solution('5 787787787') == '44981600785557577'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 3 3 6') == '5'\nassert solution('2\\n2 1') == '3'"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 3 3 6') == 5\n\"\"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 3 3 6\") == '5'\nassert solution(\"2\\n2 1\") == '3'\n\n\"\"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 3 3 6\") == \"5\"\nassert solution(\"2\\n2 1\") == \"3\""
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 3 3 6') == 5\nassert solution('2\\n2 1') == 3\n\n\"\"\"\nimport math\n\nn = int(input())\narray = list(map(int, input().split()))"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 3 3 3 6') == '5'\nassert solution('2\\n2 1') == '3'\nprint('Test finished')\n\n\"\"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 3 3 6\") == '5'\nassert solution(\"2\\n2 1\") == '3'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 3 3 6') == '5'\nassert solution('2\\n2 1') == '3'\nassert solution('1\\n5') == '5'\n\"\"\""
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 3 3 6\") == \"5\"\nassert solution(\"2\\n2 1\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"4\\n2 1 4 5\") == \"2\"\nassert solution(\"5\\n2 3 4 5\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 3 3 6') == '5'\n\nassert solution('2\\n2 1') == '3'\n\nassert solution('2\\n3 2') == '1'\n\"\"\"\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))\nmax = arr[0]\nfor x in range(1, n):\n    if arr[x] > max:\n        max = arr[x]\nprint(max)\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"350178\") == \"YES\"\nassert solution(\"340178\") == \"NO\"\nassert solution(\"459875\") == \"YES\"\nassert solution(\"1248\") == \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"73452\") == \"YES\"\nassert solution(\"1248\") == \"NO\"\n\n\n'''\n\nn = int(input())\nticket = input()\n\nd = {}\nfor i in range(n):\n    if ticket[i] not in d:\n        d[ticket[i]] = [i]\n    else:\n        d[ticket[i]].append(i)\n\nsegment = []\nfor dk, v in d.items():\n    if len(v) == 1:\n        segment.append(v[0])\n    elif len(v) == 2:\n        segment.append(v[0])\n        segment.append(v[1])\n\ns = 0\nfor i in range(len(segment)-1):\n    s += segment[i+1]-segment[i]"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('73452') == \"YES\"\nassert solution('1248') == \"NO\"\n\"\"\"\nfrom __future__ import annotations\n\nfrom typing import List\n\nfrom icontract import require, ensure\n\nfrom python_by_contract_corpus.common import Lines\n\n\n@require(lambda line: len(line) == 1)\n@require(lambda line: line[0] in range(0, 9))\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"73452\") == \"YES\"\nassert solution(\"1248\") == \"NO\"\nassert solution(\"5467\") == \"YES\"\n\nprint(solution(\"73452\"))\nprint(solution(\"1248\"))\nprint(solution(\"5467\"))\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('73452') == 'YES'\nassert solution('1248') == 'NO'\nassert solution('1235') == 'YES'\nassert solution('1234') == 'NO'\nassert solution('123') == 'YES'\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"73452\") == \"YES\"\nassert solution(\"1248\") == \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('350178') == 'YES'\nassert solution('3214') == 'NO'\n\nsolution()\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"73452\") == \"YES\"\nassert solution(\"1248\") == \"NO\"\n\nfrom typing import Callable\nfrom functools import reduce"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"73452\") == \"YES\"\nassert solution(\"1248\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"73452\") == \"YES\"\nassert solution(\"1248\") == \"NO\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n\n\"\"\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\n\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\n\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\""
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('wjmzbmr') == \"CHAT WITH HER!\"\nassert solution('sevenkplus') == \"CHAT WITH HER!\"\nassert solution('xiaodao') == \"IGNORE HIM!\"\n\"\"\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('wjmzbmr') == \"CHAT WITH HER!\"\nassert solution('xiaodao') == \"IGNORE HIM!\"\nassert solution('sevenkplus') == \"CHAT WITH HER!\""
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\nassert solution(\"xvmgbaj\") == \"IGNORE HIM!\"\nassert solution(\"mqzrxicb\") == \"CHAT WITH HER!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\nassert solution(\"aaaabbbbccc\") == \"CHAT WITH HER!\"\nassert solution(\"aabbbbc\") == \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\""
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"4 2\\n1 1 -1 1\"\n) == \"2\"\nassert solution(\n\"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\"\n) == \"9\"\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == \"2\"\nassert solution(\"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\") == \"9\""
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == '2'\n\nassert solution(\"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\") == '9'\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == \"2\"\nassert solution(\"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"4 2\n1 1 -1 1\"\"\") == \"2\"\n\nassert solution(\"\"\"14 3\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\"\"\") == \"9\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\") == \"9\"\n\"\"\"\n\nn, k = [int(n) for n in input().split()]\nlst = [int(n) for n in input().split()]\ne, s = 0, 0\n\nfor i in range(n):\n    if i % k == 0 and lst[i] == 1:\n        e += 1\n    elif lst[i] == -1:\n        s += 1\n\nprint(max(abs(e - s), e, s))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == \"2\"\n\nassert solution(\"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\") == \"9\"\n\n\"\"\"\n\nimport sys\n\nsys.stdin = open(\"input.txt\", \"r\")"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == 2\nassert solution(\"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\") == 9\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n4 2\n1 1 -1 1\n''') == '2'\n\nassert solution('''\n14 3\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\n''') == '9'\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2\") == \"12\"\n\"\"\""
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2\") == \"12\"\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2') == 12\n\"\"\"\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2\") == 12\n\"\"\"\n\nimport sys\nimport math\n\nn, c0, c1 = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2\") == 12\nassert solution(\"5 4 3\") == 15\nassert solution(\"10 5 6\") == 22\nassert solution(\"1 0 0\") == 0\nassert solution(\"5 4 2\") == 17\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2') == 12\n\"\"\""
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(4 1 2) == 12\nassert solution(5 1 2) == 13\nassert solution(7 1 2) == 14\nassert solution(5 4 5) == 21"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2') == '12'\nassert solution('5 1 2') == '21'\nassert solution('8 1 2') == '22'\nassert solution('6 1 1') == '7'\nassert solution('3 1 1') == '6'\n\"\"\"\n\nfrom math import log2\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2\") == \"12\"\nassert solution(\"3 0 0\") == \"6\"\nassert solution(\"5 0 2\") == \"12\"\nassert solution(\"5 1 2\") == \"12\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == 12\n\"\"\""
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 1 4 3 2\") == \"YES\"\nassert solution(\n    \"10 2 1 9 10\") == \"NO\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\nassert solution(\"4 1 2 3 1\") == \"YES\"\nassert solution(\"5 1 4 1 3 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\n\"\"\"\n\n\n\nfrom sys import stdin"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 4 3 2') == \"YES\"\nassert solution('10 2 1 9 10') == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('1 1') == 'NO'\nassert solution('2 1 3 2') == 'YES'\nassert solution('2 1 4 3') == 'NO'\nassert solution('5 1 4 3 2') == 'YES'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\nassert solution
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5 1 4 3 2\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n5 3 4 2 1\n\"\"\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\n\n\n'''\n\n\n\n'''\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 a \u0438 b, \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043e\u0442\u0440\u0435\u0437\u043a\u0430 [a; b], \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0440\u0430\u0442\u043d\u044b \u0447\u0438\u0441\u043b\u0443 c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n'''\n\n\na, b, c = int(input()), int(input()), int(input())\nsum = 0\nfor i in range(a, b + 1):\n    if i % c == 0:\n        sum += i\nprint(sum // c)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 10\") == \"1\"\nassert solution(\"3 5 10 22\") == \"8\"\nassert solution(\"2 3 3 5\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 1 10') == '1'\nassert solution('3 5 10 22') == '8'\nassert solution('2 3 3 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('x, y, l, r = map(int, input().split())') == 1\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 10\") == \"1\"\nassert solution(\"3 5 10 22\") == \"8\"\nassert solution(\"2 3 3 5\") == \"0\"\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 1 10') == '1'\nassert solution('3 5 10 22') == '8'\nassert solution('2 3 3 5') == '0'\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 10\") == \"1\"\nassert solution(\"3 5 10 22\") == \"8\"\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '0'\nassert solution('1 2 3') == '0'\nassert solution('1 2 3 4 5') == '0'\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 1 10\") == '1'\nassert solution(\"3 5 10 22\") == '8'\nassert solution(\"2 3 3 5\") == '0'\nassert solution(\"2 3 3 5\") == '0'"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 1 10') == '1'\nassert solution('3 5 10 22') == '8'\nassert solution('2 3 3 5') == '0'"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 10\") == \"1\"\nassert solution(\"3 5 10 22\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"3\""
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '2'\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '2'\nassert solution('27') == '3'"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '2'\nassert solution('27') == '3'\nassert solution('6') == '3'\nassert solution('1000') == '5'\nassert solution('10000') == '5'\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 2\nassert solution('25') == 5\nassert solution('1') == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"3\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '2'\nassert solution('27') == '3'\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\n\nprint(math.ceil(n / 2))\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == 2\n\"\"\"\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"3\""
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(4) == 2\nassert solution(27) == 3\n\"\"\"\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"hello\") == \"hello\"\nassert solution(\"hellno\") == \"hell no\"\nassert solution(\"backtothefuttture\") == \"back to the future\"\nassert solution(\"aaaaaaaaaaaaa\") == \"aaaaaaaaaaaaa\"\n\"\"\"\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('asdfasdf') == 'asd fasd f'\n\"\"\""
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"hellno\") == \"he ll no\"\nassert solution(\"abacaba\") == \"a ba ca ba\"\nassert solution(\"asdfasdf\") == \"as d f s d f\""
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asdfasdf\") == \"as d f s d f\"\nassert solution(\"abacaba\") == \"abac aba ca ba\"\nassert solution(\"aaaaaaa\") == \"aaa aaa aaa aaa aaa\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asd fasd f\"\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('hellno') == 'hell no'\nassert solution('abacaba') == 'abacaba'\nassert solution('asdfasdf') == 'asd fasd f'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('hellno') == 'hel no'\nassert solution('hackcerrs') == 'hackc errs'\nassert solution('backtothefutttture') == 'back to the future'\nassert solution('tobeornottobe') == 'tobeornottobe'\nassert solution('oooooo') == 'oooooo'\n\n\"\"\""
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"asdfasdf\") == \"asd fasd f\"\nassert solution(\"qwerty\") == \"qwer ty\"\nassert solution(\"qwertyuiop\") == \"qwer tyui op\"\nassert solution(\"qwertysdfr\") == \"qwer tysdf r\"\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"hellllo\") == \"hellllo\"\nassert solution(\"helllooo\") == \"helllooo\"\nassert solution(\"helllo\") == \"helll o\"\nassert solution(\"hellloo\") == \"hellloo\"\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('hellno') == 'hell no'\nassert solution('asdfasdf') == 'asd fasd f'\nassert solution('aaaaa') == 'a a a a a'\nassert solution('aabbccdd') == 'a b c d'\nassert solution('abc') == 'abc'\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == '20'\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n100 800\") == '200'\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == \"20\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n100 800\") == \"200\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == \"20\"\nassert solution(\"4 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n100 800\") == \"200\""
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80') == '20'\n\"\"\"\n\nn, m, k = [int(x) for x in stdin.split()]\n\nx, s = [int(x) for x in stdin.split()]\n\na = [int(x) for x in stdin.split()]\nb = [int(x) for x in stdin.split()]\nc = [int(x) for x in stdin.split()]\nd = [int(x) for x in stdin.split()]\n\nt = 0\n\nfor i in range(m):\n    t += a[i]\n    t += min(s, b[i])\n    if c[i]:\n        t += min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c[i])\n        c[i] -= min(n, c[i])\n        n -= min(n, c["
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == \"20\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n10 80\") == \"200\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2 1\\n5 10 10\\n2 4 3\\n20 10 40\\n4 15\\n10 80\\n\") == \"20\\n\"\nassert solution(\"10 2 1\\n5 10 10\\n2 4 3\\n200 100 400\\n4 15\\n10 80\\n\") == \"200\\n\"\nassert solution(\"10 2 1\\n5 10 10\\n2 4 3\\n20 10 40\\n4 15\\n10 80\\n\") == \"20\\n\"\nassert solution(\"10 2 1\\n5 10 10\\n2 4 3\\n200 100 400\\n4 15\\n10 80\\n\") == \"200\\n\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\\n\") == \"20\\n\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == \"20\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n100 800\") == \"200\"\n\"\"\"\n\nfrom collections import Counter\n\nlines = [line.strip() for line in open(\"/mnt/d/Code/Coding/AI/Contest2020/Contest2020/Sample/26.txt\")]\nn, m, k = [int(i) for i in lines[0].split()]\na = [int(i) for i in lines[1].split()]\nb = [int(i) for i in lines[2].split()]\nc = [int(i) for i in lines[3].split()]\nd = [int(i) for i in lines[4].split()]"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\\n') == '20'\nassert solution('20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n100 800\\n') == '200'\n\n\n\nimport sys; input = sys.stdin.readline; r = range; i = int; c = getattr(complex, '__complex__', lambda x: 0)\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\\n\") == \"20\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n10 80\\n\") == \"200\""
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == \"20\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n10 80\") == \"200\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 1\") == \"8\"\nassert solution(\"3 5 10\") == \"7\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 11\") == \"6\"\nassert solution(\"5 5 10\") == \"7\"\nassert solution(\"5 3 10\") == \"3\"\nassert solution(\"5 5 1\") == \"5\"\nassert solution(\"3 4 3\") == \"3\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"6\"\n\nassert solution(\"1 2 3 4 5\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 11\\n1 2 3 4') == '6'\nassert solution('5 5 10\\n1 2 4 8 16') == '7'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 15\") == \"6\"\nassert solution(\"5 5 10\") == \"7\"\nassert solution(\"3 4 11\") == \"6\"\n\"\"\""
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 10\") == \"7\"\n\nassert solution(\"1 2 3 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 11\\n1 2 3 4\") == \"6\"\nassert solution(\"5 5 10\\n1 2 4 8 16\") == \"7\"\n\n\"\"\"\n\nimport sys\n\nn, k, m = map(int, sys.stdin.readline().split())\nt = [int(i) for i in sys.stdin.readline().split()]\np = 0\nfor j in range(k):\n    if t[j] <= m:\n        p += 1\nprint(n*k + max(p, 1))"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '2'\nassert solution('1 2 1') == '3'\nassert solution('1 1 1') == '4'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 11') == '6'\n\"\"\"\n\nn, k, M = map(int, stdin.readline().split())\nt = list(map(int, stdin.readline().split()))\n\ntask_points = sum(t[:k])\nsolved_points = t[:k]\n\nfor _ in range(n - k):\n    task_points = task_points - t[0] + t[k]\n    solved_points.remove(t[0])\n    solved_points.append(t[k])\n    k += 1\n    if task_points > M:\n        break\n\nprint(len(solved_points) + 1)\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 11') == '6'\nassert solution('5 5 10') == '7'\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\nassert solution(\"7\") == \"6\"\n\n\n\"\"\""
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"4\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 4\nassert solution(\"7\") == 1\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == 1\nassert solution('3') == 0\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 1\nassert solution('3') == 0\n\n\"\"\"\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '0'\n\nassert solution('1') == '0'\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '0'\nassert solution('5') == '0'\n'''"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '0'\nassert solution('10') == '1'\n\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '0'\n\nassert solution('4') == '1'\n\nassert solution('5') == '5'\n\nassert solution('6') == '0'\n\nassert solution('7') == '0'"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"0\"\n\"\"\"\n\n\"\"\"\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def get_depth(self, root: TreeNode) -> int:\n        depth = 0\n        while root:\n            root = root.left\n            depth += 1\n        return depth\n\n    def num_perfect_striped_trees(self, n: int) -> int:\n        res = [0] * (n + 1)\n        res[0] = 1\n        res[1] = 1\n        for i in range(2, n + 1):\n            for j in range(0, i + 1):\n                res[i] += (res[j - 1] * res[i - j]) % 1000000007\n        return res[n] % 1000000007\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 0') == '1 1'\nassert solution('4 3 11') == '1 2'\nassert solution('4 3 7') == '3 2'\n\n\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\n\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('4 3 0') == '1 1'\nassert solution('4 3 11') == '1 2'\nassert solution('4 3 7') == '3 2'\n\n\n'''"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\""
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 0') == '1 1'\nassert solution('4 3 11') == '1 2'\nassert solution('4 3 7') == '3 2'"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\n\n\"\"\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 0') == '1 1'\nassert solution('4 3 11') == '1 2'\nassert solution('4 3 7') == '3 2'\n\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\n\n\"\"\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5) == \"2 3\"\nassert solution(6) == \"2 3\"\nassert solution(7) == \"2 4\"\nassert solution(8) == \"2 4\"\nassert solution(9) == \"2 5\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1 1'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2'\nassert solution('4') == '2 2'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '1 4'\nassert solution('5') == '2 3'\nassert solution('10') == '1 2'\n\"\"\""
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"6\") == \"2 3\"\nassert solution(\"4\") == \"1 4\"\nassert solution(\"1\") == \"1 1\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(2)) == '1 2'\nassert solution(str(4)) == '1 4'\nassert solution(str(1)) == '1 1'\nassert solution(str(6)) == '2 3'\nassert solution(str(7)) == '2 4'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '1 2'\nassert solution('6') == '2 3'\nassert solution('4') == '1 4'\nassert solution('1') == '1 1'\n\nprint('all tests have passed')\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"1 4\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"6\") == \"2 3\"\nassert solution(\"2\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '1 2'\nassert solution('6') == '2 3'\nassert solution('4') == '1 4'\nassert solution('1') == '1 1'\nassert solution('3') == '1 3'\n\"\"\""
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"1 4\"\nassert solution(\"6\") == \"2 3\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"2\") == \"1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == '1 2'\nassert solution('6') == '2 3'\nassert solution('4') == '1 4'\nassert solution('1') == '1 1'\n\nprint(\"All cases passed\")\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5\\n7\") == \"7\"\nassert solution(\"4\\n7\\n13\") == \"21\"\nassert solution(\"2\\n3\\n2\") == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2\n5\n7\n\"\"\") == \"7\"\n\nassert solution(\n\"\"\"\n4\n7\n13\n\"\"\") == \"21\"\n\nassert solution(\n\"\"\"\n2\n3\n2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n5\\n7') == '7'\nassert solution('4\\n7\\n13') == '21'\nassert solution('2\\n3\\n2') == '0'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n5\\n7\") == \"7\"\nassert solution(\"4\\n7\\n13\") == \"21\"\nassert solution(\"2\\n3\\n2\") == \"0\"\n\"\"\"\n\nimport ast\nfrom collections import Counter"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5\\n7\") == \"7\"\nassert solution(\"4\\n7\\n13\") == \"21\"\nassert solution(\"2\\n3\\n2\") == \"0\""
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n5\\n7\") == \"7\\n\"\nassert solution(\"4\\n7\\n13\") == \"21\\n\"\nassert solution(\"2\\n3\\n2\") == \"0\\n\""
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n5\\n7\\n') == '7\\n'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5\\n7\") == \"7\"\nassert solution(\"4\\n7\\n13\") == \"21\"\nassert solution(\"2\\n3\\n2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n5\\n7') == '7'\nassert solution('4\\n7\\n13') == '21'\nassert solution('2\\n3\\n2') == '0'\n\"\"\"\n\nn_lemons = int(input())\nn_apples = int(input())\nn_pears = int(input())\n\nmax_number = max(n_lemons, n_apples, n_pears)"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n5\\n7\") == \"7\"\nassert solution(\"4\\n7\\n13\") == \"21\"\nassert solution(\"2\\n3\\n2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 3 2 4') == 'YES'\nassert solution('1\\n3 3') == 'NO'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 3 2 4') == 'YES'\n\"\"\""
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 3 2 4') == 'YES'\nassert solution('2\\n1 1') == 'NO'\nassert solution('2\\n3 4') == 'YES'\nassert solution('2\\n2 2') == 'NO'\n\nsolution('2\\n2 2')\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 3 2 4\") == \"YES\"\nassert solution(\"3\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"2\\n1 2 3\") == \"NO\"\nassert solution(\"1\\n1\") == \"NO\"\nassert solution(\"2\\n1 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 3 2 4\") == \"YES\"\nassert solution(\"3\\n1 3 2 4\") == \"NO\"\nassert solution(\"4\\n1 3 2 4\") == \"YES\"\nassert solution(\"5\\n1 3 2 4 5\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == \"YES\"\nassert solution(3) == \"NO\"\nassert solution(4) == \"YES\"\nassert solution(5) == \"NO\"\nassert solution(6) == \"YES\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"YES\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1\n2 3\n\n''') == 'YES'\n\nassert solution('''2\n2 2\n\n''') == 'NO'\n\nassert solution('''2\n3 4\n\n''') == 'NO'\n\nassert solution('''2\n2 2\n\n''') == 'YES'\n\nassert solution('''1\n1\n\n''') == 'YES'"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 2 4\") == \"YES\"\n\nassert solution(\"1 2 3 4\") == \"NO\"\n\nassert solution(\"1 2 3\") == \"NO\"\n\nassert solution(\"2 3 4\") == \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n3 2 1\n''') == 'YES'\nassert solution('''1\n3 3\n''') == 'NO'"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 7 28\") == \"1\"\nprint(solution(\"2 7 28\"))"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 7 13 2 4 3 7 10') == 2\n\"\"\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 7 28') == '1'\nassert solution('7\\n2 7 28') == '1'\nassert solution('1\\n2 7 28') == '2'\nassert solution('7\\n2 7 28') == '1'\nassert solution('2\\n2 7 28') == '0'"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 7 28') == '1'\n\"\"\"\nimport math\nimport sys\n\nsys.stdin = open('input.txt')\n\nn = int(input())\nnums = [int(num) for num in input().split()]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 7 28\\n') == '1\\n2 7 9 28'\nassert solution('1 1 1\\n') == '0\\n1 1 1'\nassert solution('1 1 1\\n') == '0\\n1 1 1'\nassert solution('4 10 15\\n') == '1\\n4 10 15'\nassert solution('2 7 9 28\\n') == '1\\n2 7 9 28'\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 7 28\") == \"1\\n2 7 9 28\"\n\"\"\""
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 7 28\\n') == '1'\n\nassert solution('2 7 28\\n') == '1'\n\nassert solution('1 2 7 9 2 8 7 10\\n') == '1'\n\nassert solution('1 2 7 9 2 8 7 10\\n') == '1'\n\nassert solution('1 2 7 9 2 8 7 10\\n') == '1'"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 7 28\") == \"1\"\nassert solution(\"2 7 28\") == \"1\"\nassert solution(\"2 7 28\") == \"1\"\nassert solution(\"2 7 28\") == \"1\"\nassert solution(\"2 7 28\") == \"1\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 7 28\\n') == '1\\n2 7 9 28'\n\"\"\""
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 7 28') == '1'\n\"\"\""
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\n3 5 7\") == \"7\"\nassert solution(\"8 3\\n2 1 4\") == \"4\"\nassert solution(\"8 3\\n3 5 7\") == \"7\"\nassert solution(\"8 3\\n5 7 2\") == \"2\"\nassert solution(\"8 3\\n6 1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n8 20\") == \"7\"\nassert solution(\"4 5\\n1 2 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n8 20\\n\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n8 20') == '7'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n2 1 3 5') == '6'\nassert solution('4 5\\n2 1 3 5 7') == '5'\nassert solution('4 5\\n3 1 3 5 7') == '7'\nassert solution('4 2\\n2 1 3 5') == '4'\nassert solution('4 3\\n2 3 1 2') == '4'\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"2\"\nassert solution(\"6 5\\n1 3 7 9 15 17\") == \"7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 1 1 1\") == \"1\"\nassert solution(\"4 3\\n3 3 3 3\") == \"1\"\nassert solution(\"5 3\\n5 5 5 5\") == \"1\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 20\\n\") == \"7\"\n\"\"\"\n\nN, K = [int(val) for val in input().split()]\nA = [int(val) for val in input().split()]\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n8 20\") == \"7\"\n\"\"\""
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == 1\nassert solution(\"5 5\\n2 2 4 1 3\\n\") == 2\nassert solution(\"6 9\\n1 2 3 4 5 6\\n\") == 1\n\"\"\"\n\n\"\"\"\nD1\n10 15\n3 2 7 3 1 9 5 4 4 4\n\nD2\n10 5\n1 2 3 4 5 6 7 8 9 10\n\"\"\"\nimport sys\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5) == '5 3'\nassert solution(6) == '6 4'\nassert solution(10) == '10 9'\nassert solution(12) == '12 11'\n\"\"\""
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"39\") == \"4 0\"\nassert solution(\"7\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"39\") == \"4 5 3\"\nassert solution(\"7\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"39\") == \"4 5 3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"39\") == \"4 5 3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"7\") == \"0\"\nassert solution(\"11\") == \"0\"\nassert solution(\"11\") == \"0\"\n\n-----"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('39') == '4 5 3'\nassert solution('1') == '0'\nassert solution('7') == '0'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"39\") == \"4\"\nassert solution(\"1\") == \"0\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"39\") == '4 5 3'\nassert solution(\"1\") == '0'\nassert solution(\"7\") == '0'"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('39') == '4 5 3'\nassert solution('1') == '0'\nassert solution('7') == '0'\nassert solution('0') == '0'\nassert solution('2') == '0'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\") == \"0\"\nassert solution(\"6\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n2 3 5\") == \"2\"\nassert solution(\"6 7\\n1 2 3 4 5 6\") == \"7\"\n\nimport sys\nassert solution(sys.stdin.read()) == solution(input())\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6\\n2 3 5') == '2'\nassert solution('6 7\\n1 2 3 4 5 6') == '7'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\") == \"2\"\nassert solution(\"6 7\") == \"7\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 6\\n2 3 5') == 2\n\n\"\"\"\nimport math\nfrom typing import List\n\nDEBUG = False\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"4\"\nassert solution(\"6 7\") == \"7\"\nassert solution(\"6 6\") == \"0\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na.sort()\nmax_a = a[-1]\nmin_a = a[0]"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6\\n 2 3 5') == '2'\nassert solution('6 7\\n 1 2 3 4 5 6') == '7'"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\n2 3 5\") == 2\n\"\"\""
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n2 3 5\\n\") == \"2\"\nassert solution(\"6 7\\n1 2 3 4 5 6\\n\") == \"7\""
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 6\n2 3 5''') == '2'\nassert solution('''6 7\n1 2 3 4 5 6''') == '7'\n\"\"\""
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6\\n2 3 5') == '2'\n\"\"\""
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n#G#T#\") == 'YES'\nassert solution(\"6 1\\nT..G\") == 'YES'\nassert solution(\"7 3\\nT..#..G\") == 'NO'\n\n\"\"\"\nfrom typing import List, Tuple\n\nimport math\n\n\nclass Grasshopper:\n    \"\"\"\n    Takes a string with the line of the labyrinth and checks if it is possible to get to the insect\n    \"\"\"\n\n    def __init__(self, line: str):\n        self.line = line\n        self.is_line_empty = not line.find('T')\n        self.line_size = len(self.line)\n        self.num_of_empty_cells = line.count('.')\n\n    def can_get_to_insect(self, num_of_empty_cells: int, k: int) -> bool:\n        if k > num_of_empty_cells:\n            return False\n        if k == 0:\n            return False\n        if k == num_of_empty_cells:\n            return self.is_line_empty\n        if k > num_of_empty_cells:\n            return False\n        if k == 1:\n            if self.is_line_empty:\n                return False\n            start_ind = self.line.find('G')\n            end_ind = self.line.find('T')\n            if start_ind == -1 or end_ind == -1:\n                return False\n            return start_ind + k == end_ind\n        else:\n            if self.is_line_empty:\n                return False\n            start_ind = self.line.find('G')\n            if start_ind == -1:\n                return False\n            step = (self.line_size - start_ind) // k\n            if step == 0:\n                return False\n            start_ind_neigh = math.ceil(start_ind / step) * step\n            if start_ind_neigh > start_ind:\n                return False\n            for i in range(k):\n                ind = start_ind_neigh + i * step\n                if ind >= self.line_size:\n                    return False\n                if self.line[ind]!= '.':\n                    return False\n            end_ind = self.line.find('T')\n            if end_ind == -1:\n                return False\n            if start_ind_neigh + k > end_ind:\n                return False\n            return True\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n#G#T#') == 'YES'\nassert solution('6 1\\nT..G') == 'YES'\nassert solution('7 3\\nT..#..G') == 'NO'\nassert solution('6 2\\n..GT..') == 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n#G#T#\") == \"YES\"\nassert solution(\"6 1\\nT..G\") == \"YES\"\nassert solution(\"7 3\\nT..#..G\") == \"NO\"\nassert solution(\"6 2\\n..GT..\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n...T') == 'NO'\nassert solution('5 2\\n...G...\\n...T') == 'YES'\nassert solution('5 2\\n...#...\\n...T') == 'NO'\nassert solution('5 2\\n...G...\\n...#...\\n...T') == 'NO'\nassert solution('7 3\\n....G..\\n...#...\\n....T') == 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n#G#T#') == 'YES'\nassert solution('6 1\\nT....G') == 'YES'\nassert solution('7 3\\nT..#..G') == 'NO'\nassert solution('6 2\\n..GT..') == 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2') == 'YES'\nassert solution('5 3') == 'NO'\nassert solution('6 1') == 'YES'\n\"\"\"\n\nimport sys\nfrom typing import List, Dict\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 #G#T#\") == \"YES\"\nassert solution(\"6 1 #.T#G\") == \"YES\"\nassert solution(\"7 3 #..G\") == \"NO\"\nassert solution(\"6 2 #.T#G\") == \"NO\"\nassert solution(\"7 3 #..G\") == \"NO\"\n\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5 2\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n#G#T#\") == \"YES\"\nassert solution(\"6 1\\nT....G\") == \"YES\"\nassert solution(\"7 3\\nT..#..G\") == \"NO\"\nassert solution(\"6 2\\n..GT..\") == \"NO\"\n\nassert solution(\"5 2\\n#G#T#\") == \"YES\"\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n#G#T#\") == \"YES\"\nassert solution(\"6 1\\nT....G\") == \"YES\"\nassert solution(\"7 3\\nT..#..G\") == \"NO\"\nassert solution(\"6 2\\n..GT..\") == \"NO\"\nassert solution(\"7 3\\nT...T\") == \"NO\"\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.333\"\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 4 6 2 2 1''') == '4.375'\nassert solution('''3 10 15 17 9 2''') == '11.3333333333'"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333333333\"\n\n-----End-----\n\"\"\""
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.33333\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333333333\"\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333333333\"\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.33333\""
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\n\"\"\"\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 10 13 10 3 1') == '4.375'\nassert solution('1 4 6 2 2 1') == '-1'\nassert solution('3 10 15 17 9 2') == '11.3333333333'\n\"\"\"\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"4 10 13 10 3 1\"\"\"\n) == \"4.3750000000\"\n\nassert solution(\n    \"\"\"1 4 6 2 2 1\"\"\"\n) == \"-1\"\n\nassert solution(\n    \"\"\"3 10 15 17 9 2\"\"\"\n) == \"11.3333333333\"\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"1\"\n\nassert solution(\"1 2 1\") == \"0\"\n\nassert solution(\"1 1 1\") == \"0\"\n\nassert solution(\"1 0 0\") == \"999999999999999999\""
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 0 0') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1000000000000000000 0 1000000000000000000') == '999999999999999999'"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 0\") == '0'\nassert solution(\"1 1 1\") == '0'\nassert solution(\"1 1000000000000 0\") == '99999999999999'\nassert solution(\"1000000000000000000 0 1000000000000000000\") == '999999999999999999'\n\"\"\"\nfrom typing import List\n\nfrom collections import Counter\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 0\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1000000000000000000 0 1000000000000000000\") == \"999999999999999999\"\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\") == 1\nassert solution(\"1 0 0\") == 0\nassert solution(\"1 1 1\") == 0\nassert solution(\"1000000000000000000 0 1000000000000000000\") == 9999999999999999999\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 1') == '1'\nassert solution('1 0 0') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1000000000000000000 0 1000000000000000000') == '999999999999999999'"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1\") == 1\nassert solution(\"1 0 0\") == 0\nassert solution(\"1 1 1\") == 0\nassert solution(\"1000000000000000000 0 1000000000000000000\") == 9999999999999999999\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == 1\nassert solution(\"1 0 0\") == 0\nassert solution(\"1 1 1\") == 0\nassert solution(\"1000000000000000000 0 1000000000000000000\") == 9999999999999999999\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"1\"\nassert solution(\"1 0 0\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1000000000000000000 0 1000000000000000000\") == \"999999999999999999\"\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\") == 1\nassert solution(\"1 0 0\") == 0\nassert solution(\"1 1 1\") == 0\nassert solution(\"1000000000000000000 0 1000000000000000000\") == 9999999999999999999\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 10\") == \"YES\\n4 9\"\nassert solution(\"6\\n1 2 1 2 5 3\") == \"NO\"\nassert solution(\"8\\n1 2 3 6 9 8 5 2\") == \"YES\\n3 3\"\nassert solution(\"2\\n1 10\") == \"YES\\n4 9\"\nassert solution(\"8\\n1 2 3 6 9 8 5 2\") == \"YES\\n3 3\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1 2 3 6 9 8 5 2\\n\") == \"YES\\n3 3\"\nassert solution(\"6\\n1 2 1 2 5 3\\n\") == \"NO\"\nassert solution(\"2\\n1 10\\n\") == \"YES\\n4 9\"\n\n\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import accumulate\nfrom functools import lru_cache\nfrom math import sqrt\nfrom typing import List"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 2 3 6 9 8 5 2\") == \"YES\\n3 3\"\nassert solution(\"6\\n1 2 1 2 5 3\") == \"NO\"\nassert solution(\"2\\n1 10\") == \"YES\\n4 9\""
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 2 3 6 9 8 5 2\") == \"YES\\n3 3\"\nassert solution(\"6\\n1 2 1 2 5 3\") == \"NO\"\nassert solution(\"2\\n1 10\") == \"YES\\n4 9\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input_string) == expected_result\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n7 8 6 4 6\\n3 3\\n1 2 3\\n9 7 6\\n5 5\\n3 3\") == \"YES\\n3 3\"\nassert solution(\"9\\n1 2 3 4 5 6 7 8 9\\n8 9 7 6 5 4 3 2 1\\n3 3\\n1 2 3\\n9 7 6\\n5 5\\n3 3\") == \"NO\\n4 9\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n1 2 3 6 9 8 5 2') == 'YES\\n3 3'\nassert solution('6\\n1 2 1 2 5 3') == 'NO'\nassert solution('2\\n1 10') == 'YES\\n4 9'\n\"\"\"\nfrom typing import Tuple\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(SolutionTest(4, [1, 2, 1, 2, 5, 3]))) == \"YES\\n3 3\"\nassert solution(str(SolutionTest(6, [1, 2, 1, 2, 5, 3]))) == \"NO\"\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n8\n1 2 3 6 9 8 5 2\n\"\"\") == \"YES\\n3 3\"\n\nassert solution(\n\"\"\"\n6\n1 10\n\"\"\") == \"YES\\n4 9\"\n\nassert solution(\n\"\"\"\n2\n1 10\n\"\"\") == \"YES\\n4 9\"\n\"\"\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 6 9 8 5 2\") == \"YES\\n3 3\"\nassert solution(\"6\\n1 2 1 2 5 3\") == \"NO\"\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hi\", \"bob\") == \"-\"\nassert solution(\"abca\", \"abcdcba\") == \"abcba\"\nassert solution(\"aabaa\", \"aaabbb\") == \"aab\"\nassert solution(\"a\", \"a\") == \"-\"\nassert solution(\"a\", \"b\") == \"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abca\", \"bob\") == \"ac\"\nassert solution(\"abacaba\", \"abcdcba\") == \"abcba\"\nassert solution(\"hi\", \"bob\") == \"-\"\nassert solution(\"hi\", \"abc\") == \"-\"\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcdcba', 'abcdcba') == 'abcdcba'\nassert solution('hi', 'bob') == '-'\nassert solution('abacaba', 'abcdcba') == 'abcba'\nassert solution('aaaaaaaa', 'aaaaaaaa') == 'aaaaaaaa'\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcde', 'b') == 'b'\nassert solution('abcd', 'ac') == 'ac'\nassert solution('abac', 'abcdcba') == 'abcdcba'\nassert solution('abac', 'abcdcba') == 'abcdcba'\n\n\"\"\""
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hi\", \"bob\") == \"-\"\nassert solution(\"abca\", \"abcdcba\") == \"abcba\"\nassert solution(\"abacaba\", \"abcdcba\") == \"ac\"\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('hi') == '-'\nassert solution('bob') == '-'\nassert solution('abca') == 'ac'\nassert solution('abacaba') == 'abcba'\nassert solution('abcdcba') == 'abcdcba'\n\nprint('PASSED')\n\n\"\"\""
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\", \"abcdcba\") == \"abcba\"\nassert solution(\"hi\", \"bob\") == \"-\"\n\n\"\"\""
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hi\") == \"-\"\nassert solution(\"bob\") == \"-\"\nassert solution(\"abacaba\") == \"abcba\"\nassert solution(\"abcdcba\") == \"abccba\"\nassert solution(\"bcacdbbba\") == \"abccba\"\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba', 'abcdcba') == 'abcba'\nassert solution('hi', 'bob') == '-'\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2+') == '1'\nassert solution('3-') == '1'\nassert solution('2-3+') == '1'\nassert solution('2-3-') == '0'\nassert solution('3-2+') == '1'\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"4\") == 4\nassert solution(\"2\") == 1\nassert solution(\"5\") == 3\n\"\"\"\n\nn = int(input())\na = input()\n\nstones = 0\n\nfor i in a:\n    if i == \"-\" or i == \"+\":\n        stones += 1\nprint(stones)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"3\\n---\\n\") == \"0\"\n\nassert solution(\n    \"4\\n++++\\n\") == \"4\"\n\nassert solution(\n    \"2\\n--\\n\") == \"1\"\n\nassert solution(\n    \"5\\n++-++\\n\") == \"3\"\n\nassert solution(\n    \"5\\n++++\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == 0\nassert solution(4) == 4\nassert solution(2) == 1\nassert solution(5) == 3\n\n\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1+\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\n11\\n9\\n8\\n') == '2'\n\"\"\"\n\nn = int(input())\na = int(input())\nb = int(input())\nc = int(input())\n\nsum = 0\nfor i in range(n // a + 1):\n    for j in range(n // b + 1):\n        if (n - a * i - b * j) % c == 0:\n            sum += 1\n\nprint(sum)"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n11\\n9\\n8\") == \"2\"\nassert solution(\"10\\n5\\n6\\n1\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 9 8\") == \"2\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"0 1 1\") == \"1\"\nassert solution(\"1 0 1\") == \"1\"\nassert solution(\"1 1 1\") == \"2\"\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 11 9 8\\n') == '2'\nassert solution('10 5 6 1\\n') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n11\\n9\\n8\") == \"2\"\nassert solution(\"10\\n5\\n6\\n1\") == \"2\"\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n11\\n9\\n8') == '2'\nassert solution('10\\n5\\n6\\n1') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n5\\n6\\n1') == '2'\nassert solution('10\\n5\\n6\\n1') == '2'\nassert solution('10\\n5\\n6\\n1') == '2'\nassert solution('10\\n5\\n6\\n1') == '2'\n\n'''"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 11 9 8\") == \"2\"\nassert solution(\"5 6 1\") == \"2\"\nassert solution(\"10 5 6 1\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n11\\n9\\n8\\n') == '2'\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n11\\n9\\n8\") == \"2\"\nassert solution(\"10\\n5\\n6\\n1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\") == \"6 2\"\nassert solution(\"3 1 2\") == \"6 2\"\nassert solution(\"2 1 2\") == \"6 2\"\n\n\"\"\"\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 3\\n2 4 2\") == \"6 2\"\nassert solution(\"3\\n1 2\\n2 1 3\") == \"-1\"\nprint(\"Test Completed\")"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 1 3\\n2 4 2') == '6 2'\n\"\"\""
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 1 3\\n2 4 2\") == \"6 2\"\nassert solution(\"3\\n1 2\\n2 1 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 1 3\\n2 4 2') == \"6 2\"\nassert solution('3\\n1 2\\n2 1 3') == \"-1\"\nassert solution('3\\n1 2\\n2 1 3') == \"-1\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3\") == \"6 2\"\nassert solution(\"5 3 2\") == \"6 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 1 3\\n2 4 2\") == \"6 2\"\nassert solution(\"4\\n1 1 1\\n2 2 2\") == \"3 1\"\nassert solution(\"3\\n1 2\\n2 1 3\") == \"1 2\"\n\nassert solution(\"5\\n1 2 3 4 5\\n1 4 1 5 2\") == \"0 1\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2 4 3 5\") == \"3 1\"\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 3 2\") == \"6 2\"\n\"\"\"\n\n\nfrom collections import deque\n\nn = int(input())\nk_1 = input().split()\nk_1 = list(map(int, k_1))\nk_2 = input().split()\nk_2 = list(map(int, k_2))\n\n\nwar = 0\n\nwhile len(k_1)!= 0 and len(k_2)!= 0:\n    x = k_1[0]\n    y = k_2[0]\n    war += 1\n    if x > y:\n        k_2.append(k_2.pop(0))\n        k_2.append(k_1.pop(0))\n    elif x < y:\n        k_1.append(k_1.pop(0))\n        k_1.append(k_2.pop(0))\n    else:\n        war -= 1\n\nprint(war)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n2 1 3\n2 4 2''') == '6 2'\nassert solution('''4\n2 1 3\n3 2 4''') == '-1'\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 1 3\\n2 4 2') == '6 2'\n\"\"\"\n\nn = int(stdin.readline())\nk1 = [int(x) for x in stdin.readline().split()]\nk2 = [int(x) for x in stdin.readline().split()]\n\nwar_count = 0\nw1 = []\nw2 = []\n\nfor i in range(n):\n    if k1[i] > k2[i]:\n        war_count += 1\n        w1.append(k2[i])\n        w2.append(k1[i])\n    else:\n        war_count += 1\n        w1.append(k1[i])\n        w2.append(k2[i])\n\nwhile len(w2)!= 0:\n    war_count += 1\n    w1.append(w2[0])\n    w2.pop(0)\n\nprint(war_count, end='')\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == 'Correct'\nassert solution('X12345') == 'Too weak'\nassert solution('!@#$%') == 'Too weak'\nassert solution('aaa') == 'Too weak'\nassert solution('!@#$%a') == 'Correct'\n\"\"\""
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Too weak'\nassert solution('a') == 'Too weak'\nassert solution('abc') == 'Too weak'\nassert solution('abc123') == 'Correct'\nassert solution('abc1!23') == 'Correct'\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"Correct\"\nassert solution(\"X12345\") == \"Too weak\"\n\nInput\n\nHello,\nworld!!!\n\nOutput\n\nToo weak"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"Correct\"\nassert solution(\"X12345\") == \"Too weak\"\nassert solution(\"CONTEST_is_STARTED!!11\") == \"Correct\"\nprint(\"Tests passed\")\n\n---\n\nclass Solution:\n    def is_complex(self, password: str) -> bool:\n        return len(password) >= 5 and any(\n            i.isupper() for i in password\n        ) and any(\n            i.islower() for i in password\n        ) and any(\n            i.isdigit() for i in password\n        )\n\n    def solution(self, stdin: str) -> str:\n        return \"Correct\" if self.is_complex(stdin) else \"Too weak\"\n\n\nsolution(\"abacaba\") == \"Correct\"\nsolution(\"X12345\") == \"Too weak\"\nsolution(\"CONTEST_is_STARTED!!11\") == \"Correct\"\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('CONTEST_is_STARTED!!11') == 'Correct'\nassert solution('X12345') == 'Too weak'\nassert solution('abacaba') == 'Too weak'\n\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"X12345\"\n    ) == \"Correct\"\n\nassert solution(\n    \"abacaba\"\n    ) == \"Too weak\"\n\nassert solution(\n    \"1\"\n    ) == \"Too weak\"\n\nassert solution(\n    \"!\"\n    ) == \"Correct\"\n\"\"\"\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"Correct\"\nassert solution(\"X12345\") == \"Too weak\"\nassert solution(\"CONTEST_is_STARTED!!11\") == \"Correct\"\nassert solution(\"^&*(%$#!&^%$#@!^%$^&%#&*(^^_(&*(^&*&#_&$#@!%^&*%!&^&*&!_&$)#^&*_&*^&*(^&*&^&*_&*#!_&*!&#%!_&$)#^&*_&*^&*(^&*&^&*&!^&*!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^&*&!_&*!^&*_&*#_&*!^&*!^&*&!^&*&!^"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacaba') == 'Correct'\nassert solution('X12345') == 'Too weak'\n\"\"\""
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == 'Correct'\nassert solution('X12345') == 'Too weak'\nassert solution('CONTEST_is_STARTED!!11') == 'Correct'\n\nprint(solution('abacaba'))\nprint(solution('X12345'))\nprint(solution('CONTEST_is_STARTED!!11'))\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 1\\n2 2\") == \"1\"\nassert solution(\"3\\n2 2 1\\n2 3 1\") == \"3\"\nassert solution(\"4\\n2 2 2 2\\n1 1 1 1\") == \"3\"\nassert solution(\"7\\n2 2 3 2 3 2 2\\n1 1 1 1 1 1 1\") == \"3\"\nassert solution(\"6\\n2 1 3 2 1 2\\n1 2 2 1 3 1\") == \"4\"\nprint(\"Success\")"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 4 4 4\\n5 5 4 5\") == '1'\n\"\"\"\n\nn = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nB = list(map(int, stdin.readline().split()))\n\nA = list(sorted(A))\nB = list(sorted(B))\n\nA_count = {i: 0 for i in range(1, 6)}\nB_count = {i: 0 for i in range(1, 6)}\n\nfor i in range(n):\n    A_count[A[i]] += 1\n    B_count[B[i]] += 1\n\nexchange_count = 0\nresult = 0\n\nfor i in range(1, 6):\n    exchange_count += max(A_count[i], B_count[i])\n    if A_count[i] < B_count[i]:\n        result += A_count[i]\n        B_count[i] -= A_count[i]\n        A_count[i] = 0\n    else:\n        result += B_count[i]\n        A_count[i] -= B_count[i]\n        B_count[i] = 0"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5 4 4 4\\n5 5 4 5\") == \"1\"\nassert solution(\"6\\n1 1 1 1 1 1\\n5 5 5 5 5 5\") == \"3\"\nassert solution(\"1\\n5\\n3\") == \"-1\"\nassert solution(\"9\\n3 2 5 5 2 3 3 3 2\\n4 1 4 1 1 2 4 4 1\") == \"4\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5 4 4 4\\n5 5 4 5') == '1'\nassert solution('6\\n1 1 1 1 1 1\\n5 5 5 5 5 5') == '3'\nassert solution('1\\n5\\n3') == '-1'\nassert solution('9\\n3 2 5 5 2 3 3 3 2\\n4 1 4 1 1 2 4 4 1') == '4'"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 4 1 1 2 4 4 1\") == '1'\nassert solution(\"6 5 5 5 5 5\") == '-1'\nassert solution(\"1 1 1 1 1 1\") == '-1'\nassert solution(\"9 3 2 5 5 2 3 3 2\") == '4'\n\"\"\"\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 4 3\\n5 4 5 4 5\") == '1'\nassert solution(\"6 3 4 3 3 2\\n5 5 5 5 5 5 5\") == '3'\nassert solution(\"1 1 1 1 1 1\\n5 5 5 5 5 5 5\") == '-1'\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5 4 4 4\\n5 5 4 5') == '1'\nassert solution('6\\n1 1 1 1 1 1\\n5 5 5 5 5 5') == '3'\nassert solution('1\\n5\\n3') == '-1'"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5 4 4 4\\n5 5 4 5') == '1'\nassert solution('6\\n1 1 1 1 1 1\\n5 5 5 5 5 5') == '3'\nassert solution('1\\n5\\n3') == '-1'\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n5 4 4 4\\n5 5 4 5') == '1', 'Test 1'\nassert solution('6\\n1 1 1 1 1 1\\n5 5 5 5 5 5') == '3', 'Test 2'\nassert solution('1\\n5\\n3') == '-1', 'Test 3'\nassert solution('9\\n3 2 5 5 2 3 3 3 2\\n4 1 4 1 1 2 4 4 1') == '4', 'Test 4'\n\nprint(\"You are awesome! All tests are done! Go Check it!\")"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 4 4\") == \"1\"\nassert solution(\"5 5 4 5\") == \"3\"\nassert solution(\"1 1 1 1 1 1\") == \"1\"\nassert solution(\"5 5 4 5\") == \"3\"\nassert solution(\"9 3 2 5 5 2 3 3 2\") == \"4\"\n\n\"\"\"\nimport sys\n\nfrom collections import Counter\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"<><>\") == \"NO\"\nassert solution(\"v^v\") == \"YES\"\n\n\n\nhttps://www.codewars.com/kata/53697be0d6ba7c2884000fbf\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n><>\\nvvv\\n\") == \"YES\"\nassert solution(\"4 6\\n<><>\\nvvv\\n\") == \"YES\"\n\n\n\n-----Bite-----\n\nBuild an algorithm to check whether a given string is a valid street direction pattern.\n\nA valid pattern has only two types of characters:\n\n'<' - for a street coming from east\n'>' - for a street coming from west\n'^' - for a street coming from south\n'v' - for a street coming from north\nThe character pairs should be in the same order:\n\n'<><'\n'v^v'\nIn the first test case, the characters of the given string are in the order '<><' and the algorithm should return \"YES\".\nIn the second test case, the characters of the given string are in the order 'v^v' and the algorithm should return \"YES\".\nThe character pairs should occur in order:\n\n'>v'\n'<v'\nThe algorithm should return \"NO\" if the character pairs are not in order.\n\n\"\"\""
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"><>\") == \"NO\"\nassert solution(\"v^v\") == \"YES\"\n\n\"\"\"\n\n\"\"\"\n\u601d\u8def:\n    \u7528\u4e00\u500bdict\u8a18\u9304\u4efb\u4f55\u9ede\u8207\u4efb\u4f55\u9ede\u4e4b\u9593\u662f\u5426\u6709\u9694\u96e2\u8ddd\u96e2\n\"\"\"\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"<><>\\nv^v\") == \"NO\"\nassert solution(\"<><>\\nv^v^v^\") == \"YES\"\nassert solution(\"<><><><><>\\nv^v^v^v^v^v\") == \"YES\"\nassert solution(\"<><><><><><>\\n^v^v^v^v^v^v\") == \"YES\"\nassert solution(\"<><><><><><>\\n^v^v^v^v^v^v^v^v^v\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('>><') == 'NO'\nassert solution('>v<') == 'NO'\nassert solution('><>') == 'NO'\nassert solution('v^v') == 'YES'\nassert solution('vvvvv') == 'NO'\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"><><v\") == \"YES\"\nassert solution(\"v^v^v^v^v\") == \"NO\"\n\"\"\"\n\nimport os\nimport sys\nimport numpy as np\nimport time\nfrom collections import defaultdict"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"4 6\") == \"YES\"\n\"\"\""
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('><>') == 'NO'\nassert solution('v^v') == 'YES'\n\"\"\""
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n><\\nvv\") == \"NO\"\nassert solution(\"4 6\\n<><\\nvv\") == \"YES\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 0 1 1 0') == 'YES'\nassert solution('2 0 1 1 0') == 'NO'\nassert solution('1 1') == 'YES'\n\n\"\"\"\n\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Solution:\n\n    def __init__(self, n: int, stdin: list):\n        self.logger = logging.getLogger(__name__)\n        self.n = n\n        self.stdin = stdin\n\n    def run(self):\n        self.logger.debug(f'n: {self.n}, stdin: {self.stdin}')\n        return self.solution()\n\n    def solution(self):\n        logic = '0'\n        for i in self.stdin:\n            logic = logic +'' + str(i)\n        logic = logic[1:]\n        logic = logic.replace('1','1 ').replace('0','0 ')\n        logic = logic.replace('(','( ').replace(')',' )')\n        logic = logic.split()\n        logic = [i for i in logic if i!='']\n        logic = ''.join(logic)\n        logic = logic.replace('1','1 ').replace('0','0 ')\n        logic = logic.replace('(','(').replace(')',')')\n        logic = logic.replace('>',' ').replace('1', '1 ')\n        logic = logic.replace('0', '0 ')\n        logic = logic.split()\n        logic = [i for i in logic if i!='']\n        logic = ''.join(logic)\n        logic = logic.replace('1','1 ').replace('0','0 ')\n        logic = logic.replace('(','(').replace(')',')')\n        logic = logic.replace('>',' ').replace('1', '1 ')\n        logic = logic.replace('0', '0 ')\n        logic = logic.split()\n        logic = [i for i in logic if i!='']\n        logic = ''.join(logic)\n        logic = logic.replace('1','1 ').replace('0','0 ')\n        logic = logic.replace('(','(').replace(')',')')\n        logic = logic.replace('>',' ').replace('1', '1 ')\n        logic = logic.replace('0', '0 ')\n        logic = logic.split()\n        logic = [i for i in logic if i!='']\n        logic = ''.join(logic)\n        logic = logic.replace('1','1 ').replace('0','0 ')\n        logic = logic.replace('(','(').replace(')',')')\n        logic = logic.replace('>',' ').replace('1', '1 ')\n        logic = logic.replace('0', '0 ')\n        logic = logic.split()\n        logic = [i for i in logic if i!='']\n        logic = ''.join(logic)\n        logic = logic.replace('1','1 ').replace('0','0 ')\n        logic = logic.replace('(','(').replace(')',')')\n        logic = logic.replace('>',' ').replace('1', '1 ')\n        logic = logic.replace('0', '0 ')\n        logic = logic.split()\n        logic = [i for i in logic if i!='']\n        logic = ''.join(logic)\n        logic = logic.replace('1','1 ').replace('0','0 ')\n        logic = logic.replace('(','(').replace(')',')')\n        logic = logic.replace('>',' ').replace('1', '1 ')\n        logic = logic.replace('0', '0 ')\n        logic = logic.split()\n        logic = [i for i in logic if i!='']\n        logic = ''.join(logic)\n        logic = logic.replace('1','1 ').replace('0','0 ')\n        logic = logic.replace('(','(').replace(')',')')\n        logic = logic.replace('>',' ').replace('1', '1 ')\n        logic = logic.replace('0', '0 ')\n        logic = logic.split()\n        logic = [i for i in logic if i!='']\n        logic = ''.join(logic)\n        logic = logic.replace('1','1 ').replace('0','0 ')\n        logic = logic.replace('(','(').replace(')',')')\n        logic = logic.replace('>',' ').replace('1', '1 ')\n        logic = logic.replace('0', '0 ')\n        logic = logic.split()\n        logic = [i for i in logic if i!='']\n        logic = ''.join(logic)\n        logic = logic.replace('1','1 ').replace('0','0 ')\n        logic = logic.replace('(','(').replace(')',')')\n        logic = logic.replace('>',' ').replace('1', '1 ')\n        "
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 1 1 0') == 'YES\\n(((0)->1)->(1->0))'\nassert solution('2\\n1 1') == 'NO'\nassert solution('1\\n0') == 'YES\\n0'"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 1 0') == 'YES\\n(((0)->1)->(1->0))'\nassert solution('2 1 1 0') == 'NO'\nassert solution('1 1') == 'YES\\n0'\nassert solution('1 1') == 'YES\\n0'\nassert solution('1 1') == 'YES\\n0'"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n0 1 1 0\"\n) == \"YES\\n(((0)->1)->(1->0))\"\nassert solution(\n    \"2\\n1 1\"\n) == \"NO\"\nassert solution(\n    \"1\\n0\"\n) == \"YES\\n0\""
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 1 0\") == \"YES\\n(((0)->1)->(1->0))\"\nassert solution(\"2\\n1 1\") == \"NO\"\nassert solution(\"1\\n0\") == \"YES\\n0\"\nassert solution(\"1\\n1\") == \"YES\\n1\"\nassert solution(\"1\\n\") == \"YES\\n1\"\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 1 0\") == \"YES\\n(0)->1->(1)->0\"\nassert solution(\"2\\n1 1\") == \"NO\""
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 1 0\") == 'YES'\nassert solution(\"2 1 1 0\") == 'NO'\nassert solution(\"1 1\") == 'YES'\nassert solution(\"1 0\") == 'YES'\nassert solution(\"100 100\") == 'NO'\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 1 0') == 'YES\\n(((0)->1)->(1->0))'\nassert solution('2 1 1 0') == 'NO'\nassert solution('1 1') == 'YES\\n0'\nassert solution('1') == 'YES\\n0'\nassert solution('0') == 'YES\\n1'"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 1 0\") == 'YES\\n(((0)->1)->(1->0))'\nassert solution(\"2\\n1 1\") == 'NO'\nassert solution(\"1\\n0\") == 'YES\\n0'\nassert solution(\"1\\n1\") == 'NO'\nassert solution(\"1\\n0\") == 'YES\\n0'\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 1 0\") == \"YES\\n(((0)->1)->(1->0))\"\nassert solution(\"2 1 1\") == \"NO\"\nassert solution(\"1 1\") == \"YES\\n0\"\nassert solution(\"1\") == \"YES\\n0\"\nassert solution(\"1 0\") == \"YES\\n0\"\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 5\") == \"0 1\"\nassert solution(\"31 12\") == \"7 12\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 5\") == \"0 1\"\nassert solution(\"31 12\") == \"7 12\"\n\n\"\"\""
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 5') == '0 1'\nassert solution('31 12') == '7 12'\n\"\"\""
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 5\") == \"0 1\"\nassert solution(\"31 12\") == \"7 12\"\n\"\"\""
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 5\") == \"0 1\"\nassert solution(\"31 12\") == \"7 12\"\n\"\"\"\nimport sys\n\na, b = map(int, sys.stdin.readline().strip().split())\n\nwhile a > 0 and b > 0:\n    if a > 2*b:\n        a -= 2*b\n    elif a < 2*b:\n        b -= 2*a\n    else:\n        a, b = 0, 1\nprint(a, b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 5\") == \"0 1\"\nassert solution(\"31 12\") == \"7 12\"\n\"\"\"\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 5\") == \"0 1\"\nassert solution(\"12 5\") == \"0 1\"\nassert solution(\"31 12\") == \"7 12\"\n\"\"\""
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12 5\\n') == '0 1'\nassert solution('31 12\\n') == '7 12'\nassert solution('22 12\\n') == '4 12'\nassert solution('111 111\\n') == '0 0'\nassert solution('1111 111\\n') == '0 0'\n\"\"\"\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12 5') == '0 1'\nassert solution('31 12') == '7 12'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\n\nn, m = map(int, input[0].split())\n\na = n\nb = m\nwhile True:\n    if n == 0 or m == 0:\n        print(a, b)\n        break\n    if n >= 2 * b or m >= 2 * a:\n        a = n - 2 * b\n        b = m - 2 * a\n    elif n < 2 * b:\n        b = m - 2 * a\n    elif m < 2 * a:\n        a = n - 2 * b\n    else:\n        break\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 5') == '0 1'\nassert solution('31 12') == '7 12'\nassert solution('10 9') == '0 1'\nassert solution('10 10') == '0 0'\n\"\"\""
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 -4 4') == '5'\n\"\"\"\n\nimport sys\n\nk, a, b = map(int, sys.stdin.readline().split())\n\nnum_k_divisible = 0\nfor i in range(a, b+1):\n    if i % k == 0:\n        num_k_divisible += 1\n\nprint(num_k_divisible)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 10\") == \"10\"\nassert solution(\"2 -4 4\") == \"5\"\nprint(\"Well done!\")\n\n\n\n------------------------------------------------------------------------------------------------------------------------\n\n\u0414\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k (> 0) \u0438 \u0446\u0435\u043b\u043e\u0435 n (> 0). \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0430\u043a\u043e\u0435 \u0447\u0438\u0441\u043b\u043e x \u0447\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0446\u0438\u0444\u0440, \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0447\u0438\u0441\u043b\u0435 k, \u0440\u0430\u0432\u043d\u043e \u0447\u0438\u0441\u043b\u0443 n.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e math.pow \u0438\u0437 \u043c\u043e\u0434\u0443\u043b\u044f math.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430\n\u0421\u0430\u043c\u043e\u0435 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u2014 \u0432\u043e\u0437\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e k \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u044c n, \u0437\u0430\u0442\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u0435\u0441\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043e\u0442 10 \u043f\u0435\u0440\u0432\u044b\u0445 \u0446\u0438\u0444\u0440 \u0438 \u0432\u043e\u0437\u0432\u0435\u0441\u0442\u0438 \u044d\u0442\u043e \u0432 \u043a\u043e\u0440\u0435\u043d\u044c. \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 math.floor \u0438\u0437 \u043c\u043e\u0434\u0443\u043b\u044f math.\n\nSample Input:\n\n2 8\n\nSample Output:\n\n2\n\"\"\"\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1 10') == '10'\nassert solution('2 -4 4') == '5'\nassert solution('3 5 6') == '5'\nassert solution('4 -5 3') == '2'\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 10\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 10') == 10\nassert solution('2 -4 4') == 5"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 10\") == \"10\"\n\"\"\"\n\nk, a, b = [int(x) for x in stdin.split(\" \")]\nprint(b - a + 1 - (b % k - a % k + k - 1) // k)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 10\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 10\") == 10\nassert solution(\"2 -4 4\") == 5\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 -4 4') == '5'\nprint(solution('2 -4 4'))\n\n\"\"\"\n\na, b, k = map(int, stdin.split())\ncount = 0\nfor x in range(a, b + 1):\n    if x % k == 0:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 10\") == \"10\"\n\"\"\"\n\nk, a, b = map(int, input().split())\ncnt = 0\n\nfor i in range(a, b + 1):\n    if i % k == 0:\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n\") == \"7\"\nassert solution(\"21\\n\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"7\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"5\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"7\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"5\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"7\"\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516') == '7'\nassert solution('1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011121314151617') == '9'\nassert solution('123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101112131415161718') == '1'\nassert solution('12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819') == '5'\n\nassert solution('1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011121314151617181920312223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011121314151617181920412223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011121314151617181920') == '1'\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"21\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"21\") == \"5\"\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(12345678910111213141516171819202122232425262728293031323334353637) == 5\n\n\"\"\"\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('21') == '5'\nassert solution('23') == '3'"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\") == 7\nassert solution(\"21\") == 5\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"21\") == \"5\"\n\"\"\"\n\nfrom math import log, floor\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8380011223344\") == 'YES'\nassert solution(\"807345619350641\") == 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == 'YES'\nassert solution('15') == 'NO'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13\") == \"YES\"\nassert solution(\"8380011223344\") == \"YES\"\nassert solution(\"807345619350641\") == \"NO\"\nassert solution(\"15\") == \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == \"YES\"\nassert solution(\"15\") == \"NO\"\nassert solution(\"8380011223344\") == \"YES\"\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8380011223344') == 'YES'\nassert solution('807345619350641') == 'NO'\n\"\"\""
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"83800111134\") == \"YES\"\nassert solution(\"83800111143\") == \"NO\"\n\"\"\""
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8380011223344\") == \"YES\"\nassert solution(\"8073456193506\") == \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"83800111223344\") == \"YES\"\nassert solution(\"807345619350641\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == 'YES'\nassert solution('15') == 'NO'\n\"\"\"\n\nfrom typing import List, Optional"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4 1 2\n''') == '824071958'\nassert solution('''\n123 42 24\n''') == '824071958'"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2\") == \"824071958\"\nassert solution(\"123 42 24\") == \"824071958\"\n\n\"\"\""
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\") == \"824071958\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2\") == \"824071958\"\nassert solution(\"123 42 24\") == \"824071958\"\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2\") == \"6\"\nassert solution(\"123 42 24\") == \"824071958\"\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2') == 6\nassert solution('123 42 24') == 824071958\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2\") == \"824071958\"\n\"\"\"\nimport sys\n\nfrom math import factorial\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 1 2') == '10'\nassert solution('1 2 1') == '1'\nassert solution('1 2 2') == '5'\nassert solution('2 1 1') == '0'\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 2') == '6'\nassert solution('123 42 24') == '824071958'\n\nassert solution('1233') == '0'\nassert solution('1342') == '0'\nassert solution('1324') == '0'\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == \"824071958\"\nassert solution(\"123 42 24\") == \"824071958\"\n\"\"\"\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s) == result\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ab?a\") == \"aba\"\nassert solution(\"ababb\") == \"ababb\"\n\"\"\"\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('hw?ap*yn?eww*ye*ar') == 'happynewyear'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'aba'\nassert solution('ababb') == 'ababb'\nassert solution('ab?a') == 'Impossible'\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('hw?ap*yn?eww*ye*ar') == 'happynewyear'\nassert solution('ab?a') == 'aa'\nassert solution('ab?a') == 'aba'\nassert solution('ababb') == 'ababb'\nassert solution('ab?a') == 'Impossible'\n\n------Notes------\n\n\"\"\""
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ababb\") == \"ababb\"\nassert solution(\"ab?a\") == \"Impossible\"\nassert solution(\"ab?a\") == \"Impossible\"\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab?a\") == \"aba\"\nassert solution(\"ababb\") == \"ababb\"\nassert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aba\"\nassert solution(\"ab?a\") == \"aba\"\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"happynewyear\") == \"happynewyear\"\nassert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aba\"\nassert solution(\"ababb\") == \"ababb\"\nassert solution(\"ab?a\") == \"aba\"\n\nprint(\"The string\", stdin, \"can be encoded as\", solution(stdin))\n\n\n\"\"\""
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aba\"\nassert solution(\"ababb\") == \"ababb\"\nassert solution(\"ab?a\") == \"Impossible\"\nassert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\n\"\"\""
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ababb\") == \"ababb\"\nassert solution(\"ab?a\") == \"Impossible\"\nassert solution(\"ab?a\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"h*pa*yn*ew*y*ar\") == \"happynewyear\"\nassert solution(\"h*ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"h*ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ababb\") == \"aba\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('60') == '3'\nassert solution('-60') == '-3'\nassert solution('-9') == '-1'\nassert solution('19') == '1'\nassert solution('0') == '0'\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"60\") == \"1\"\nassert solution(\"-60\") == \"3\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('60') == '1'\nassert solution('-60') == '3'\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"60\") == \"3\"\nassert solution(\"-60\") == \"3\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"60\") == \"1\"\nassert solution(\"-60\") == \"3\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"60\") == \"1\"\nassert solution(\"-60\") == \"3\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"60\") == \"3\"\nassert solution(\"-60\") == \"3\"\nassert solution(\"150\") == \"3\"\nassert solution(\"-120\") == \"2\"\n\"\"\""
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('60') == '3'\n\"\"\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('60') == '1'\nassert solution('-60') == '3'\n\"\"\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"-60\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 0\\n2 1 2\") == \"Yes\"\nassert solution(\"5 6 1\\n2 7 2\") == \"No\"\nassert solution(\"3 3 3\\n2 2 2\") == \"Yes\"\n\"\"\"\n\na, b, c = map(int, input().split())\nx, y, z = map(int, input().split())"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4 0') == 'Yes'\nassert solution('5 6 1') == 'No'\nassert solution('3 3 3') == 'Yes'\n\n\nimport re\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(4,4,0) == \"Yes\"\nassert solution(5,6,1) == \"No\"\nassert solution(3,3,3) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6 1\") == \"Yes\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]\nx, y, z = [int(i) for i in input().split()]"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4 0') == 'Yes'\nassert solution('2 1 2') == 'Yes'\nassert solution('5 6 1') == 'No'\nassert solution('3 3 3') == 'Yes'\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6 1\\n2 7 2\") == \"Yes\"\nassert solution(\"4 4 0\\n2 1 2\") == \"Yes\"\nassert solution(\"3 3 3\\n2 2 2\") == \"Yes\"\nassert solution(\"5 5 4\\n2 7 2\") == \"No\"\nassert solution(\"6 6 7\\n2 4 2\") == \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 0\") == \"Yes\"\nassert solution(\"2 1 2\") == \"No\"\nassert solution(\"5 6 1\") == \"No\"\nassert solution(\"3 3 3\") == \"Yes\"\nassert solution(\"2 2 2\") == \"Yes\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 0') == 'Yes'\nassert solution('2 1 2') == 'Yes'\nassert solution('5 6 1') == 'No'\n\n'''"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 0\") == \"Yes\"\nassert solution(\"2 1 2\") == \"No\"\nassert solution(\"5 6 1\") == \"Yes\"\n\n\n\"\"\"\n\n\n\na, b, c = [int(s) for s in input().split()]\nx, y, z = [int(s) for s in input().split()]\n\nprint(\"Yes\") if (a < x and b < y and c < z) else print(\"No\")\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 0') == 'Yes'\nassert solution('2 1 2') == 'Yes'\nassert solution('5 6 1') == 'No'\nassert solution('3 3 3') == 'Yes'"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 1000') == '4'\nassert solution('2 2 1000') == '45'\nassert solution('5 3 1103') == '590'\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1000\") == \"4\"\nassert solution(\"2 2 1000\") == \"45\"\nassert solution(\"5 3 1103\") == \"590\"\n\n\"\"\"\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1000\") == \"4\"\nassert solution(\"2 2 1000\") == \"45\"\nassert solution(\"5 3 1103\") == \"590\"\n\"\"\""
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1000\") == \"4\"\nassert solution(\"2 2 1000\") == \"45\"\nassert solution(\"5 3 1103\") == \"590\""
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 1103') == '590'\n\"\"\""
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 1000') == '4'\n\n\"\"\""
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1000\") == \"4\"\nassert solution(\"2 2 1000\") == \"45\"\n\"\"\""
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1000\") == \"45\"\nassert solution(\"5 3 1103\") == \"590\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1000\") == \"45\"\n\"\"\""
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1000000000 2 2 3\") == \"4\"\nassert solution(\"0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0 0 1000 0"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 4 2') == '6'\nassert solution('5 5 5') == '14'\nassert solution('0 2 0') == '0'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4 2\") == 6\nassert solution(\"5 5 5\") == 14\n\"\"\""
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 4 2') == 6\nassert solution('5 5 5') == 14\nassert solution('0 2 0') == 0\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 4 2\") == \"6\"\nassert solution(\"5 5 5\") == \"14\"\nassert solution(\"0 2 0\") == \"0\"\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 4 2\") == 6\nassert solution(\"5 5 5\") == 14\n\"\"\""
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 4 2\") == 6\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 2 0') == '0'\nassert solution('1 4 2') == '6'\nassert solution('5 5 5') == '14'\nassert solution('0 1 1') == '1'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 1') == '6'\nassert solution('5 5 5') == '14'\nassert solution('0 2 0') == '0'\nassert solution('1 1 1') == '0'\nassert solution('5 3 2') == '6'\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 5\") == \"14\"\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 2') == 6\nassert solution('3 3 3') == 14\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == 6\nassert solution('4 2') == 13\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\nassert solution(\"4 2\\n\") == \"13\"\nassert solution(\"5 1\\n\") == \"15\"\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == 6\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"13\"\nassert solution(\"5 1\") == \"15\""
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == 6\nassert solution(\"4 2\") == 13\n\"\"\""
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == 6\nassert solution(\"4 2\") == 13\nassert solution(\"5 1\") == 15\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 2') == '13'\nassert solution('5 1') == '15'\n\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 6\nassert solution('1 2') == 6\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 2') == '13'\nassert solution('5 1') == '15'\nprint('Test passed')"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '3'\nassert solution('2 1') == '3'\nassert solution('2 2') == '6'\nassert solution('4 2') == '13'\nassert solution('5 1') == '15'\n\nprint('The local tests are done. Try Solution online and past the problem on your compiler to earn cool rewards')\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"9\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"5 0\") == \"10\"\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3\\n3 2\\n') == '9'\nassert solution('3 2\\n5 0\\n') == '10'\nassert solution('5 0\\n') == '10'\nassert solution('1 1\\n') == '0'\nassert solution('1 0\\n') == '0'\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"9\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"5 0\") == \"10\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 1\") == \"2\"\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3\\n') == '9'\nassert solution('3 2\\n') == '8'\nassert solution('5 0\\n') == '10'\n\nprint('Test pass.')\n\n-----"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == 9\nassert solution(\"3 2\") == 8\nassert solution(\"5 0\") == 10\nassert solution(\"5 5\") == 10\nassert solution(\"6 2\") == 8\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '3'\nassert solution('3 2') == '8'\nassert solution('5 0') == '10'\nassert solution('5 1') == '10'\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"9\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"5 0\") == \"10\"\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('3 2') == '8'\nassert solution('1 3') == '9'\nassert solution('3 0') == '10'\n\n---"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2') == '10'\nassert solution('3 2') == '8'\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n11\\n27\\n27\\n11\") == \"YES\\n11 27\"\nassert solution(\"6\\n10\\n20\\n30\\n20\\n10\\n20\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n11\\n27\\n27\\n11\\n\") == \"YES\\n11 27\"\nassert solution(\"2\\n6\\n6\\n\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\\n\") == \"NO\"\nassert solution(\"6\\n10\\n20\\n30\\n20\\n10\\n20\\n\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\\n\") == \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n10\\n20\\n30\\n20\\n10\\n20\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\") == \"NO\"\nassert solution(\"4\\n11\\n27\\n27\\n11\") == \"YES\\n11 27\"\nassert solution(\"2\\n6\\n6\") == \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n11\\n27\\n27\\n11\") == 'YES\\n11 27'\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\") == 'NO'\nassert solution(\"6\\n10\\n20\\n30\\n20\\n10\\n20\") == 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n11\\n27\\n27\\n11\") == \"YES\\n11 27\"\nassert solution(\"6\\n10\\n20\\n30\\n20\\n10\\n20\") == \"NO\\n\"\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n11\n27\n27\n11''') == 'YES'\n\nassert solution('''2\n6\n6''') == 'NO'\n\nassert solution('''6\n1\n1\n2\n2\n3\n3''') == 'NO'\n\nassert solution('''6\n1\n1\n2\n2\n3\n3''') == 'YES'\n\nassert solution('''6\n10\n20\n30\n20\n10\n20''') == 'NO'"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\") == \"NO\"\n\nassert solution(\"2\\n6\\n6\") == \"YES\"\nassert solution(\"4\\n1\\n1\\n2\\n2\") == \"YES\"\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n6\\n6\\n\") == \"NO\"\nassert solution(\"6\\n10\\n20\\n30\\n20\\n10\\n20\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\\n4\\n4\") == \"YES\"\nassert solution(\"2\\n10\\n20\\n30\\n20\\n10\\n20\\n5\\n5\") == \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n11\\n27\\n27\\n11\") == \"YES\\n11 27\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\") == \"NO\"\nassert solution(\"6\\n6\\n1\\n2\\n2\\n3\\n3\") == \"NO\"\nassert solution(\"6\\n10\\n20\\n30\\n20\\n10\\n20\") == \"NO\"\n\"\"\"\n\nn = int(stdin.readline())\nlst = []\npetya = set()\nvasya = set()\n\nfor i in range(n):\n    a = int(stdin.readline())\n    lst.append(a)\n    petya.add(a)\n\nfor i in range(n):\n    a = int(stdin.readline())\n    lst.append(a)\n    vasya.add(a)"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n4\n11\n27\n27\n11\n''') == 'YES\\n11 27'\nassert solution('''\n2\n6\n6\n''') == 'NO'\nassert solution('''\n6\n1\n1\n2\n2\n3\n3\n''') == 'NO'\nassert solution('''\n6\n1\n1\n2\n2\n3\n3\n''') == 'NO'\nassert solution('''\n6\n10\n20\n30\n20\n10\n20\n''') == 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n5 8\") == \"YES\"\nassert solution(\"1 2\\n7 1\") == \"NO\"\nassert solution(\"1 4\\n2 2 1 2\") == \"YES\"\nassert solution(\"1 4\\n4 4\") == \"NO\"\nassert solution(\"2 2\\n4 4\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\", \"2 1 2 1\") == 'YES'\nassert solution(\"4 5\", \"2 2 2 1\") == 'NO'\nassert solution(\"4 5\", \"2 1 1 2\") == 'YES'\nassert solution(\"4 5\", \"2 2 2 1\") == 'YES'\nassert solution(\"4 5\", \"1 1 1 2\") == 'YES'\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n5 8') == 'YES'\nassert solution('1 2\\n7 1') == 'NO'\nassert solution('1 4\\n2 2 1 2') == 'YES'\nassert solution('1 4\\n2 2 1') == 'NO'\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3\n1 2 3\n\n''') == 'YES'\nassert solution('''1 3\n1 2 3\n\n''') == 'NO'\nassert solution('''1 3\n4 5 6\n\n''') == 'YES'\nassert solution('''3 3\n2 1 1\n\n''') == 'YES'\nassert solution('''4 4\n1 1 1 1\n\n''') == 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\") == 'YES'\nassert solution(\"1 2\") == 'NO'\nassert solution(\"1 4\") == 'YES'\nassert solution(\"1 4\") == 'YES'\n\n\"\"\""
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 2') == 'YES'\nassert solution('1 4\\n2 2 1 2') == 'YES'\nassert solution('1 2\\n4 4') == 'NO'\nassert solution('1 4\\n2 2 1 2') == 'NO'\nassert solution('1 2\\n7 1') == 'YES'\n\nfrom collections import deque"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2 1 2') == 'YES'\nassert solution('4 4\\n5 8') == 'YES'\nassert solution('1 4\\n2 2 1 2') == 'NO'\nassert solution('1 4\\n2 2 1 3') == 'NO'\nassert solution('1 2\\n2 1') == 'NO'\n\n-----\nYou have been given a string and you need to remove all the consecutive duplicates from it.\n\nFor example if you are given the string abbbcddeff and after removing the consecutive duplicates it will be aaccddff.\n\nInput Format\n\nYou will be given a string.\n\nConstraints\n\n1 <= |s| <= 10^5\n\nOutput Format\n\nPrint the string after removing all the consecutive duplicates.\n\nSample TestCase 1\n\nInput\n\nabccdeffg\n\nOutput\n\nabcdeffg\nSample TestCase 2\n\nInput\n\nabcdeffg\n\nOutput\n\nabcdeffg\n\nSample TestCase 3\n\nInput\n\nabcde\n\nOutput\n\nabcde\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5, 8) == \"YES\"\nassert solution(1, 2) == \"NO\"\nassert solution(1, 4) == \"YES\"\nassert solution(1, 2) == \"YES\"\nassert solution(1, 4) == \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2 3 4') == 'YES'\nassert solution('4 1\\n5 8') == 'NO'\nassert solution('4 3\\n1 2 3 4') == 'YES'\nassert solution('4 2\\n1 4') == 'YES'\n\n\"\"\""
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n5 8\\n\") == \"YES\"\nassert solution(\"1 2\\n7 1\\n\") == \"NO\"\nassert solution(\"1 4\\n2 2 1 2\\n\") == \"YES\"\nassert solution(\"1 4\\n2 2 2 2\\n\") == \"NO\"\nprint(\"Passed all test cases!\")\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 2 2 3\\n\") == \"3 7\"\nassert solution(\"5\\n1 1 2 2 3\\n\") == \"2 0\"\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 1 4\") == '3 7'\nassert solution(\"5\\n1 1 2 2 3\") == '2 0'\n\n\"\"\""
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 2 2 3\") == \"3 7\"\nassert solution(\"5\\n1 1 2 2 3\") == \"2 0\"\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 4\") == \"2 0\"\nassert solution(\"2 1 4\") == \"3 7\"\n\"\"\"\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10 1 4\") == \"3 7\"\nassert solution(\"5\\n1 1 2 2 3\") == \"2 0\"\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10 1 4') == '3 7'\nassert solution('5 1 1 2 2 3') == '2 0'\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 4\") == \"3 7\""
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n10 1 4\n\"\"\") == \"3 7\"\nassert solution(\"\"\"5\n1 1 2 2 3\n\"\"\") == \"2 0\"\n\"\"\""
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n10 1 4\n''') == '3 7'\nassert solution('''5\n1 1 2 2 3\n''') == '2 0'\nassert solution('''5\n1 1 2 2 3\n''') == '2 0'\nassert solution('''5\n1 1 2 2 3\n''') == '2 0'\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 4\") == \"3 7\"\nassert solution(\"5 1 2 2 3\") == \"2 0\"\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == 3\nassert solution(\"1 3\") == 1\nassert solution(\"2 1\") == 1\nassert solution(\"2 2\") == 2\n\"\"\"\n\n\"\"\"\n\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0432\u0451\u0437\u0434 \u043d\u0430 \u043a\u0430\u0440\u0442\u0435 \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430. \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 n \u0438 m (1 \u2264 n, m \u2264 1000)\u00a0\u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043d\u0430 \u043a\u0430\u0440\u0442\u0435 \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u043e \u043f\u043e m \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u00a0\u2014 \u044d\u0442\u043e \u043b\u0438\u0431\u043e \u00ab.\u00bb (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0439 \u0443\u0447\u0430\u0441\u0442\u043e\u043a \u043d\u0435\u0431\u0430), \u043b\u0438\u0431\u043e \u00ab*\u00bb (\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u043e, \u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043d\u0430 \u043d\u0435\u0431\u0435 \u0435\u0441\u0442\u044c \u0437\u0432\u0435\u0437\u0434\u0430). \n\n\u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043d\u0430 \u043d\u0435\u0431\u0435 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u0437\u0432\u0435\u0437\u0434\u0430.\n\n\n-----\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435-----\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 n \u0438 m (1 \u2264 n, m \u2264 1000)\u00a0\u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0438 \u0441"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".**\") == \"1\"\nassert solution(\"**..\") == \"2\"\nassert solution(\"*.**\") == \"3\"\nassert solution(\"*.*.*\") == \"4\"\nassert solution(\"..**\") == \"3\""
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n....\\n..*\\n...*\\n..**\") == \"3\"\nassert solution(\"1 3\\n.\\n*\") == \"1\"\nassert solution(\"2 1\\n.\\n*\") == \"1\"\nassert solution(\"3 1\\n.\\n*\") == \"2\"\nassert solution(\"5 5\\n..*\\n.*.*\\n.*.*\\n.*.*\\n.*.*\") == \"1\"\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == '3'\nassert solution('1 3') == '1'\nassert solution('2 1') == '1'"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".***\\n***.\\n***.\") == '3'\nassert solution(\"**\\n*.\\n*.\\n**\") == '2'\nassert solution(\"*.*\\n.*.*\\n.*.*\") == '1'\n\n\"\"\"\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n....\\n..*.\\n...*\\n..**\") == '3'\nassert solution(\"1 3\\n.\\n*\\n\") == '1'\nassert solution(\"2 1\\n.\\n*\") == '1'\nassert solution(\"5 5\\n...\\n*.\\n**\\n***\\n****\") == '4'\nassert solution(\"4 4\\n....\\n..*.\\n...*\\n..**\") == '3'\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 4') == '2'\nassert solution('3 5') == '3'\nassert solution('10 10') == '5'\nassert solution('10 1000') == '10'\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n....\\n..*.\\n...*\\n..**\") == \"3\"\nassert solution(\"1 3\\n*.*\\n\") == \"1\"\nassert solution(\"2 1\\n.\\n*\") == \"1\"\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('.**.*') == 3\nassert solution('**.*.*') == 2\nassert solution('**.*.*.*') == 3\nassert solution('**.*.**.*') == 4\nassert solution('****.*') == 4\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n....\\n..*.\\n...*\\n..**\") == \"3\"\nassert solution(\"1 3\\n.*\\n\") == \"1\"\nassert solution(\"2 1\\n.\\n*\") == \"1\"\nassert solution(\"3 1\\n.\\n.\\n*\") == \"2\"\n\n\u0422\u0435\u0441\u0442\u044b \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u0438.\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u044b:\n\n\u0414\u0430\u043d\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u0430\u044f \u043a\u0430\u0440\u0442\u0430 \u0437\u0432\u0451\u0437\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0431\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b n \u0441\u0442\u0440\u043e\u043a \u043f\u043e m \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0432\u0445\u043e\u0434\u0438\u0442 \u043b\u0438 \u044d\u0442\u043e\u0442 \u0441\u0438\u043c\u0432\u043e\u043b \u0432 \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0437 \u0437\u0432\u0435\u0437\u0434 \u0438, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a, \u0442\u043e \u043d\u0430\u0439\u0442\u0438 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0437\u0432\u0435\u0437\u0434. \u0415\u0441\u043b\u0438 \u0437\u0432\u0435\u0437\u0434\u044b \u043d\u0435\u0442, \u0442\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 0. \u041a\u0430\u0436\u0434\u0430\u044f \u0437\u0432\u0435\u0437\u0434\u0430 \u0437\u0430\u0434\u0430\u043d\u0430 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438 (\u0445, \u0443) \u2014 \u0433\u0434\u0435 \u0445 - \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438, \u0430 \u0443 - \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u043e\u043b\u0431\u0446\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \ufffd"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n0 1 0\\n') == '333333336'\nassert solution('5 1\\n1 1 1 0 0\\n') == '0'\nassert solution('6 4\\n1 0 0 1 1 0\\n') == '968493834'\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n0 1 0\") == \"333333336\"\nassert solution(\"5 1\\n1 1 1 0 0\") == \"0\"\nassert solution(\"6 4\\n1 0 0 1 1 0\") == \"968493834\"\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n0 1 0\\n\") == \"333333336\"\nassert solution(\"5 1\\n1 1 1 0 0\\n\") == \"0\"\nassert solution(\"6 4\\n1 0 0 1 1 0\\n\") == \"968493834\"\nassert solution(\"6 10\\n1 0 0 1 1 0\\n\") == \"0\"\nassert solution(\"6 10\\n0 1 0 1 1 0\\n\") == \"0\"\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == '33'\nassert solution('3 3') == '1'\nassert solution('5 1') == '0'\nassert solution('6 4') == '968493834'\nassert solution('6 4') == '968493834'\n\"\"\"\n\nfrom itertools import permutations\n\nn, k = [int(i) for i in input().split(' ')]\na = [int(i) for i in input().split(' ')]\n\nres = 0\n\nfor perm in permutations(a):\n    if sorted(perm) == a:\n        res += 1\n        if res == k:\n            print(res)\n            break"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n0 1 0') == '333333336'\nassert solution('5 1\\n1 1 1 0 0') == '0'\nassert solution('6 4\\n1 0 0 1 1 0') == '968493834'\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n1 1 1 0 0\") == \"968493834\"\nassert solution(\"6 4\\n1 0 0 1 1 0\") == \"0\"\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n0 1 0') == '333333336'\nassert solution('5 1\\n1 1 1 0 0') == '0'\nassert solution('6 4\\n1 0 0 1 1 0') == '968493834'\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n0 1 0\") == \"333333336\"\nassert solution(\"5 1\\n1 1 1 0 0\") == \"0\"\nassert solution(\"6 4\\n1 0 0 1 1 0\") == \"968493834\"\n\n\"\"\"\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2') == '3'\nassert solution('4 1') == '0'\nassert solution('5 1') == '0'\nassert solution('5 4') == '0'\nassert solution('5 6') == '0'\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n0 1 0\") == \"333333336\"\nassert solution(\"5 1\\n1 1 1 0 0\") == \"0\"\nassert solution(\"6 4\\n1 0 0 1 1 0\") == \"968493834\""
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 3') == 4\nassert solution('8 5') == 3\nassert solution('22 4') == 6\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n\n\"\"\"\n\nfrom math import sqrt\nfrom typing import List\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"3\"\nassert solution(\"6 3\") == \"4\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\") == 4\nassert solution(\"8 5\") == 3\nassert solution(\"22 4\") == 6\n\"\"\"\nimport math\nx, y = map(int, input().split())"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(6, 3) == 4\nassert solution(8, 5) == 3\nassert solution(22, 4) == 6\nassert solution(8, 4) == 3\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0.2000000000\"\nassert solution(\"1 0\\n0 1\") == \"0.5000000000\"\n\"\"\"\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0.2000000000\"\nassert solution(\"1 0\\n0 1\") == \"0.5000000000\"\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0.2000000000\"\nassert solution(\"1 0\\n0 1\") == \"0.5000000000\"\n\"\"\"\n\nfrom typing import Dict, List, Tuple\nfrom functools import reduce"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"0.4444444444444444\"\nassert solution(\"1 2\") == \"0.4444444444444444\"\nassert solution(\"1 0\") == \"0.5\"\nassert solution(\"0 1\") == \"0.5\"\nassert solution(\"2 3\") == \"0.5\"\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0.200000000000000\"\n\"\"\"\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0.2000000000\"\nassert solution(\"1 0\\n0 1\") == \"0.5000000000\"\nassert solution(\"1 2\\n3 4\\n1 2\") == \"0.2000000000\"\nassert solution(\"1 2\\n3 4\\n1 2\\n5 0\") == \"0.5000000000\"\nassert solution(\"1 2\\n3 4\\n1 2\\n5 0\\n1 1\") == \"0.25\"\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n3 4') == '0.2000000000'\nassert solution('1 0\\n0 1') == '0.5000000000'\nassert solution('3 4\\n2 4') == '0.5000000000'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3 4') == '0.2000000000'\nassert solution('1 0\\n0 1') == '0.5000000000'\nassert solution('1 2\\n3 4\\n3 3') == '0.02999999993'\nassert solution('1 0\\n0 1\\n3 3') == '0.5000000000'\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a, b) == answer\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0.2000000000\"\nassert solution(\"1 0\\n0 1\") == \"0.5000000000\"\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 1\\n1 1 2 1\") == '2'\nassert solution(\"4 1 2\\n1 1 2 1\") == '0'\nassert solution(\"4 1 1\\n1 1 2 2\") == '2'\n\"\"\""
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2\\n1 2 1 1\") == \"0\"\nassert solution(\"4 1 1\\n1 1 2 1\") == \"2\"\n\"\"\"\n\n\nfrom collections import Counter\n\nclass Restaurant:\n    def __init__(self):\n        self.wait = 2\n        self.seats = 1\n        self.free_seats = [True] * (self.seats * self.wait)\n\n    def new_client(self, table_type: int):\n        if table_type == 1:\n            self.free_seats = [False] * self.seats * self.wait\n        elif table_type == 2:\n            self.free_seats = [False] * self.seats * self.wait\n        else:\n            assert False, table_type\n\n    def is_available(self):\n        return sum(self.free_seats) > 0\n\n    def assign_table(self):\n        if self.is_available():\n            for i, c in enumerate(self.free_seats):\n                if c:\n                    self.free_seats[i] = False\n                    return i % (self.seats * self.wait)\n        return -1\n\n    def serve_client(self, client: int):\n        assert self.free_seats[client], \"Client is not free\"\n        self.free_seats[client] = True"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\\n1 2 1 1\") == '0'\nassert solution(\"4 1 1\\n1 1 2 1\") == '2'\nassert solution(\"4 1 1\\n1 1 1 1\") == '2'\nassert solution(\"4 1 1\\n1 1 1 1\") == '0'\nassert solution(\"4 1 1\\n1 1 2 1\") == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2\\n1 2 1 1\") == \"0\"\nassert solution(\"4 1 1\\n1 1 2 1\") == \"2\"\nassert solution(\"4 1 1\\n1 1 2 1\\n2 2\") == \"0\""
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2\\n1 2 1 1') == '2'\nassert solution('4 1 1\\n1 1 2 1') == '2'\nassert solution('4 1 1\\n1 2 1 1') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2\\n1 2 1 1') == '0'\nassert solution('4 1 1\\n1 1 2 1') == '2'\nassert solution('4 1 1\\n1 1 2 1') == '2'\n\nprint('Success')\n'''"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 2\\n1 2 1 1') == '2'\nassert solution('4 1 1\\n1 1 2 1') == '0'\nassert solution('4 1 1\\n1 1 2 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\\n1 2 1 1\") == \"0\"\nassert solution(\"4 1 1\\n1 1 2 1\") == \"2\"\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 1 2\n1 2 1 1''') == '0'\nassert solution('''4 1 1\n1 1 2 1''') == '2'\nassert solution('''4 1 1\n1 1 2 2''') == '2'\nassert solution('''4 1 1\n2 2 2 2''') == '0'"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\\n1 2 1 1\") == \"0\"\nassert solution(\"4 1 1\\n1 1 2 1\") == \"2\"\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 0 4\") == -1\nassert solution(\"2 2 2 1\") == -1\n\"\"\"\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 5 20\") == \"5\"\nassert solution(\"2 2 0 4\") == \"-1\"\nassert solution(\"2 2 2 1\") == \"-1\"\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 5 20\") == \"5\"\nassert solution(\"2 2 0 4\") == \"-1\"\nassert solution(\"2 2 2 1\") == \"-1\"\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10 10 10\") == \"1\"\nassert solution(\"1 1 1 1\") == \"-1\"\nassert solution(\"2 2 2 1\") == \"-1\"\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 5 20\") == \"5\"\nassert solution(\"2 2 0 4\") == \"-1\"\nassert solution(\"2 2 2 1\") == \"-1\"\n\"\"\""
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 5 20\") == \"5\"\nassert solution(\"2 2 0 4\") == \"-1\"\nassert solution(\"2 2 2 1\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 5 20\") == \"5\"\nassert solution(\"2 2 0 4\") == \"-\"\nassert solution(\"2 2 2 1\") == \"-\"\n\"\"\""
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10 5 20\") == \"5\"\nassert solution(\"2 2 0 4\") == \"-1\"\nassert solution(\"2 2 2 1\") == \"-1\"\n\"\"\""
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 5 20\") == \"5\"\nassert solution(\"2 2 0 4\") == \"-1\"\nassert solution(\"2 2 2 1\") == \"-1\"\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 0 4\") == \"5\"\nassert solution(\"2 2 2 1\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 0') == '4'\nassert solution('2 1') == '7'\nassert solution('3 2') == '21'\n\n\"\"\""
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\n\n\n\n-----\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 0') == '4'\nassert solution('2 1') == '7'\n\"\"\"\nimport math"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 0\\n') == 4\nassert solution('2 1\\n') == 7\nassert solution('3 2\\n') == 21"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 0') == '4'\nassert solution('2 1') == '7'\nassert solution('3 2') == '21'"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\n\"\"\"\n\n\"\"\"\n-----BEGIN ASSIGNMENT-----"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\n\"\"\""
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 0') == '4'\nassert solution('2 1') == '7'\nassert solution('3 2') == '21'"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n1 2\") == \"1\"\nassert solution(\"42 1337\\n13 420\") == \"599460445\"\nassert solution(\"1 1\\n0 0\") == \"1\"\nassert solution(\"1 1\\n1 1\") == \"1\"\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n1 2\\n1 2') == '499122177'\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n1 2\\n1 2\") == \"499122177\"\n\n\"\"\"\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 1\\n1 1\") == \"1\"\nassert solution(\"2\\n1 1\\n42 1337\") == \"578894053\"\n\"\"\"\n\n\nfrom math import gcd\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 1\\n1 1\") == \"1\"\n\"\"\"\n\nfrom typing import List\nfrom math import gcd\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 1\\n1 1') == '1'\nassert solution('2\\n1 2\\n1 2') == '1'\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\\n1 2\\n1 2\") == \"499122177\"\nassert solution(\"2\\n1 1\\n1 1\") == \"1\"\nassert solution(\"2\\n42 1337\\n13 420\") == \"578894053\"\n\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n1 2\\n1 2\") == \"499122177\"\n\"\"\"\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 1\") == \"1\"\nassert solution(\"2 2\\n1 1\") == \"1\"\nassert solution(\"2 2\\n42 1337\") == \"578894053\"\n\"\"\"\nimport sys\nfrom fractions import gcd"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n1 2\\n1 2') == '499122177'\nassert solution('2\\n42 1337\\n13 420') == '578894053'\nassert solution('2\\n1 1\\n1 1') == '1'\nassert solution('2\\n1 1\\n1 1') == '1'\nassert solution('2\\n0 0') == '1'\n\nprint(solution(stdin.strip()))\n\n\n-----Comments-----\n\n\"\"\"\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"20\") == \"4\"\nprint(\"Passed all tests.\")\n\n\"\"\"\nimport os\nimport sys\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"20\") == \"4\"\n\"\"\""
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6') == '1'\n\"\"\"\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6') == '1'\nassert solution('20') == '4'\n\"\"\""
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '1'\nassert solution('20') == '4'\nassert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('2') == '1'\n\"\"\"\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"20\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == '1'\nassert solution('20') == '4'\n\"\"\""
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"20\") == \"4\""
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"20\") == \"4\""
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 5\") == \"3\"\nassert solution(\"3 4 5\") == \"2\"\nassert solution(\"3 7\") == \"-1\"\n\n\"\"\"\n\nimport sys\n\n_input = sys.stdin.readlines()\nn, s = map(int, _input[0].split())\nkegs = list(map(int, _input[1].split()))\n\nleast = -1\nfor i, v in enumerate(kegs):\n    if v < least or least == -1:\n        least = v\n    kegs[i] = s // least\n\nprint(kegs[-1]) if kegs[-1] > 0 else print(-1)\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 5\") == \"3\"\nassert solution(\"4 3 4\") == \"2\"\nassert solution(\"1 2 3\") == \"-1\"\nassert solution(\"5 3 4\") == \"2\"\nassert solution(\"5 3 4\") == \"2\"\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n4 3 5') == '3'\nassert solution('3 4\\n5 3 4') == '2'\nassert solution('3 7\\n1 2 3') == '-1'\n\nassert solution('3 3\\n4 3 5') == '3'\nassert solution('3 4\\n5 3 4') == '2'\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 5\") == \"3\"\nassert solution(\"3 4 5\") == \"2\"\nassert solution(\"3 7\") == \"-1\"\n\n\"\"\"\n\nn, s = [int(i) for i in input().split()]\nv = [int(i) for i in input().split()]\n\nsorted_v = sorted(v, reverse=True)"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 5') == '3'\nassert solution('3 4') == '2'\nassert solution('3 7') == '-1'\n\n\"\"\"\n\nimport sys\n\nN, S = [int(x) for x in input().split()]\nKEGS = [int(x) for x in input().split()]\n\nmax_volume = 0\nfor i in range(N):\n    if KEGS[i] > max_volume:\n        max_volume = KEGS[i]\n        \nleast_vol = (S + 1) * max_volume\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n4 3 5\") == \"3\"\nassert solution(\"3 4\\n5 3 4\") == \"2\"\nassert solution(\"3 7\\n1 2 3\") == \"-1\"\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n\") == \"3\"\nassert solution(\"3 4\\n5 3 4\\n\") == \"2\"\nassert solution(\"3 7\\n1 2 3\\n\") == \"-1\"\nassert solution(\"1 2 3\\n1 2 3\") == -1\nassert solution(\"1 1 1\") == 1\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"3\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"3 7\") == \"-1\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n4 3 5\\n\") == 3\nassert solution(\"3 4\\n5 3 4\\n\") == 2\nassert solution(\"3 7\\n1 2 3\\n\") == -1\nassert solution(\"1\\n1\\n\") == 1\nassert solution(\"1\\n2\\n\") == -1\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 3\n4 3 5\"\"\") == \"3\"\nassert solution(\"\"\"3 4\n5 3 4\"\"\") == \"2\"\nassert solution(\"\"\"3 7\n1 2 3\"\"\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(10, 30) == 1\nassert solution(10, 13) == 0\nassert solution(1, 50) == 1\nassert solution(10, 19) == -1\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 30\\n2 1\") == \"1\"\nassert solution(\"10 13\\n1 1\") == \"0\"\nassert solution(\"1 50\\n5 4\") == \"1\"\nassert solution(\"1 20\\n0 10\") == \"1\"\nassert solution(\"1 50\\n1 100\") == \"1\"\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 13\") == '1'\nassert solution(\"10 19\") == '-1'\nassert solution(\"1 50\") == '1'"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30\\n2 1\") == \"1\"\nassert solution(\"10 13\\n1 1\") == \"0\"\nassert solution(\"1 50\\n5 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 13\\n1 2') == '1'\nassert solution('10 19\\n1 2') == '-1'\nassert solution('1 50\\n5 4') == '1'\nassert solution('10 10\\n5 5') == '0'\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str((10, 13))) == str(1)\nassert solution(str((10, 19))) == str(-1)\nassert solution(str((10, 30))) == str(1)"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 13\") == 1\nassert solution(\"10 19\") == -1\nassert solution(\"1 50\") == 1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 30\\n2 1\") == \"1\"\n\nassert solution(\"10 13\\n1 1\") == \"0\"\n\nassert solution(\"10 19\\n1 2\") == \"-1\"\n\nassert solution(\"1 50\\n5 4\") == \"1\"\n\nassert solution(\"1 1000\\n5 10\") == \"1\"\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 13') == 1\nassert solution('1 1') == 0\nassert solution('10 19') == -1\nassert solution('1 50') == 1\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 5 2 3') == 16\n\"\"\""
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3 5 2 3\") == 16\nprint(\"OK\")\n\n------------\n\nC, H_r, H_b, W_r, W_b = [int(i) for i in stdin.readline().split()]\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 3 5 2 3''') == 16\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 3 5 2 3\") == 16\nassert solution(\"2 3 3 1 1\") == 9\nassert solution(\"5 1 1 1 1\") == 5\nassert solution(\"2 5 1 1 1\") == 9\nassert solution(\"5 10 7 7 3\") == 21\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 3 5 2 3') == 16\n\"\"\""
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 3 5 2 3') == 16\nassert solution('3 1 1 1 1') == 3\nassert solution('1 1 1 1 1') == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 3 5 2 3') == 16\nassert solution('10 3 3 2 1') == 9\nassert solution('3 1 1 3 1') == 8\nassert solution('10 3 5 2 3') == 16\n\"\"\"\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3 5 2 3\") == 16\n\"\"\""
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3 5 2 3\") == 16\nassert solution(\"1 3 4 5\") == 10\n\"\"\"\n\nimport sys\n\nC, H_r, H_b, W_r, W_b = map(int, sys.stdin.readline().strip().split())\n\nprint(C*(H_r+W_r)*(H_b+W_b) - (H_b*W_r) - (H_r*W_b))"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 5 2 3') == '16'\nassert solution('5 2 2 3 3') == '10'\nassert solution('2 3 5 2 3') == '10'\nassert solution('5 1 3 2 3') == '10'\n\"\"\"\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\nassert solution(\"3 4\\n6 1\") == \"3\""
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('a\\nb') == 'a\\nb'\nassert solution('a\\r\\nb') == 'a\\nb'\nassert solution('a\\r\\r\\r\\nb') == 'a\\nb'\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\n\"\"\"\n\nfrom typing import Dict\n\nfrom utils import read_input\n\nCOORDINATES = tuple[int, int]\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0\\n4 5') == '5'\nassert solution('3 4\\n6 1') == '3'\nassert solution('0 0\\n1 1') == '1'\n\"\"\"\n\nx1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\nassert solution(\"3 4\\n6 1\") == \"3\"\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0\\n4 5\") == '5'\nassert solution(\"3 4\\n6 1\") == '3'\n\"\"\"\n\nfrom collections import deque\nfrom math import sqrt"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\nassert solution(\"3 4\\n6 1\") == \"3\"\nprint('The code ran Correctly')"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0\\n4 5') == '5'\nassert solution('3 4\\n6 1') == '3'\nassert solution('5 4\\n2 3') == '1'\n\"\"\"\n\n\n\nimport sys\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nDDRRR\") == \"D\"\nassert solution(\"6\\nDDRRRR\") == \"R\"\n\"\"\"\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5DRRRDDRRR\") == \"D\"\n\"\"\"\n\n\n\"\"\"\n@timing\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nDDRRR') == 'D'\nassert solution('6\\nDDRRRR') == 'R'\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nDDRRR\\n') == 'D'\nassert solution('6\\nDDRRRR\\n') == 'R'\n\n\"\"\"\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nDDRRR\") == \"D\"\nassert solution(\"6\\nDDRRRR\") == \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nDDRRR\") == \"D\"\nassert solution(\"6\\nDDRRRR\") == \"R\"\nassert solution(\"7\\nDRRRRRRRRRR\") == \"R\"\nassert solution(\"7\\nRRRRRRRRRRR\") == \"R\"\nassert solution(\"5\\nRRRRR\") == \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nDDRRR\") == \"D\"\nassert solution(\"6\\nDDRRRR\") == \"R\"\n\"\"\""
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nDDRRR') == 'D'\nassert solution('6\\nDDRRRR') == 'R'\n\"\"\""
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nDDRRR\") == \"D\"\nassert solution(\"6\\nDDRRRR\") == \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nDDRRR\") == \"D\"\nassert solution(\"6\\nDDRRRR\") == \"R\"\nassert solution(\"1\\nD\") == \"D\"\nassert solution(\"2\\nDR\") == \"R\"\nassert solution(\"3\\nDRR\") == \"R\"\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"17 15 5 3\"\n) == \"3\"\nassert solution(\n    \"14 16 7 22\"\n) == \"0\"\nassert solution(\n    \"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\"\n) == \"1000000063\"\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '17 15 5 3'\n    ) == '3'\n\nassert solution(\n    '4 2 6 4'\n    ) == '1'\n\nassert solution(\n    '1000000000000000000 1000000000000000000 999999866000004473 999999822000007597'\n    ) == '1000000063'\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"17 15 5 3\") == 3\nassert solution(\"14 16 7 22\") == 0\nassert solution(\"4 2 6 4\") == 1\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == 100000000063\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"17 15 5 3\") == \"3\"\nassert solution(\"14 16 7 22\") == \"0\"\nassert solution(\"4 2 6 4\") == \"1\"\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == \"1000000063\"\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 6 4\") == \"1\"\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == \"1000000063\"\nassert solution(\"4 2 6\") == \"1\"\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == \"1000000063\"\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\">10000000000< 0<9999999997777< 9999999998888< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777< 9999999997777"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('17 15 5 3') == '3'\nassert solution('14 16 7 22') == '0'\nassert solution('1000000000000000000 1000000000000000000 999999866000004473 999999822000007597') == '1000000063'\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"17 15 5 3\") == \"3\"\nassert solution(\"14 16 7 22\") == \"0\"\nassert solution(\"4 2 6 4\") == \"1\"\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"17 15 5 3\") == \"3\"\nassert solution(\"14 16 7 22\") == \"0\"\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == \"1000000063\"\n\n\"\"\"\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"17 15 5 3\") == \"3\"\nassert solution(\"14 16 7 22\") == \"0\"\nassert solution(\"4 2 6 4\") == \"1\"\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5') == '1'\nassert solution('10 10') == '2'\nassert solution('10 100') == '0'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 9\") == \"1\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 10\") == \"1\"\nassert solution(\"5 10\") == \"1\"\n\"\"\""
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 9\") == \"1\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 10\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"5 6\") == \"1\"\nassert solution(\"6 8\") == \"2\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"6 11\") == \"2\"\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 9\") == \"1\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 10\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 9') == '1'\nassert solution('38 11') == '3'\nassert solution('5 10') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 9\") == \"2\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 10\") == \"1\"\n\"\"\""
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '3'\n\"\"\""
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 10\") == \"1\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 10\") == \"1\"\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\") == 19\nassert solution(\"1000000000 1 2019\") == 500000001500000001\nassert solution(\"100 100000 1\") == 101\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\n\nm, a, b = list(map(int, sys.stdin.readline().strip().split()))\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 1') == '19'\nassert solution('100 100000 1') == '101'\nassert solution('6 4 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 3\") == \"19\"\nassert solution(\"1000000000 1 2019\") == \"500000001500000001\"\nassert solution(\"100 100000 1\") == \"101\"\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 3\") == 19\nassert solution(\"1000000000 1 2019\") == 500000001500000001\nassert solution(\"100 100000 1\") == 101\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 3\") == 19\n\"\"\"\nimport math\n\nm, a, b = [int(x) for x in input().split()]\nresult = 0\nfor i in range(m):\n    if 0 <= i < b:\n        result += i + 1\n    elif b <= i < a:\n        result += i + 1 - b\n    elif i >= a:\n        result += a + 1 - i\nprint(result)\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 3\") == \"19\"\nassert solution(\"1000000000 1 2019\") == \"500000001500000001\"\nassert solution(\"100 100000 1\") == \"101\"\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 3\") == 19\n\nassert solution(\"1 1000000000 1\") == 500000001500000001\n\nassert solution(\"100 100000 1\") == 101\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 3\") == 19\nassert solution(\"1000000000 1 2019\") == 500000001500000001\nassert solution(\"100 100000 1\") == 101\nassert solution(\"6 4 5\") == 10\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 3\") == \"19\"\nassert solution(\"1 100000 1\") == \"101\"\nassert solution(\"6 4 5\") == \"10\"\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 1\") == \"19\"\nassert solution(\"1 100000 1\") == \"101\"\nassert solution(\"6 4 5\") == \"10\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 9 9 3\") == \"No\"\nassert solution(\"1 0 1 5 1\") == \"Yes\"\nassert solution(\"4 3 1\") == \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 9 9 3\") == \"No\"\nassert solution(\"4 3 1\") == \"No\"\nassert solution(\"3 9 9 3\") == \"No\"\nassert solution(\"1 0 1 5 1\") == \"Yes\"\nassert solution(\"1 3 5\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 5\") == \"Yes\"\nassert solution(\"1 0 1 5 1\") == \"Yes\"\nassert solution(\"4 3 1\") == \"No\"\nassert solution(\"3 9 9 3\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 1') == 'No'\nassert solution('3 9 9 3') == 'No'\nassert solution('1 0 1 5 1') == 'Yes'\nassert solution('1 1 1 1 1') == 'Yes'\nassert solution('3 9 9 3') == 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 9 9 3\") == \"No\"\nassert solution(\"1 0 1 5 1\") == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 9 9 3') == 'No'\nassert solution('4 3 9 3') == 'No'\nassert solution('4 3 1') == 'Yes'\n\n\n\"\"\"\n\nn = int(stdin.readline())\nl = list(map(int, stdin.readline().split()))\n\npre = None\nresult = 'Yes'\nfor i in l:\n    if pre is None:\n        pre = i\n    else:\n        if pre % 2 == 0 and i % 2 == 1:\n            result = 'No'\n        pre = i\n\nprint(result)\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 9 9 3\") == \"No\"\nassert solution(\"1 0 1 5 1\") == \"Yes\"\nassert solution(\"4 3 1\") == \"No\"\nassert solution(\"5 9 9 3\") == \"No\"\n\n\"\"\"\n\n\nfrom typing import List\n\nclass Solution:\n    def is_seq_odd_len(self, seq: List[int]) -> bool:\n        seq = sorted(seq)\n        if len(seq) < 3:\n            return False\n\n        mid = len(seq) // 2\n        for i in range(mid):\n            if seq[i] % 2!= 0:\n                return False\n\n        return True\n\n    def is_seq_odd_len_2(self, seq: List[int]) -> bool:\n        length = len(seq)\n        if length == 0 or length == 1:\n            return False\n\n        seq = sorted(seq)\n        possible = False\n        for i in range(length):\n            if seq[i] % 2!= 0:\n                if seq[i] + 1 == seq[i + 1]:\n                    possible = True\n                    break\n\n        return possible\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 9 9 3') == 'No'\nassert solution('4 3 1') == 'No'\nassert solution('5 9 9 3') == 'Yes'\nassert solution('1 0 1 5 1') == 'Yes'\nassert solution('1 3 5') == 'Yes'\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'3\\n1 3 5'\n) == 'Yes'\nassert solution(\n'5\\n1 0 1 5 1'\n) == 'Yes'\nassert solution(\n'3\\n4 3 1'\n) == 'No'\nassert solution(\n'4\\n3 9 9 3'\n) == 'No'\nassert solution(\n'4\\n1 0 1 5 1'\n) == 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 9 9 3\") == 'No'\nassert solution(\"1 0 1 5 1\") == 'Yes'\n\n\"\"\""
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 1 1\") == \"0 0 1 1\"\nassert solution(\"0 0 1 2\") == \"-1\"\nassert solution(\"0 0 2 1\") == \"1 0 1 0\"\nassert solution(\"1 2 1 2\") == \"1 2 1 0\"\nassert solution(\"1 2 1 2\") == \"1 2 1 0\"\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 1 1\") == \"1 0 1 1\"\n\nsolution:\n    \n\n\"\"\"\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''0 0 1 1''') == '1 0 1 1'\n\n\"\"\"\n\nx1, y1, x2, y2 = map(int, stdin.split())"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 1 1') == '1 0 1 1'\nassert solution('0 0 1 2') == '-1'\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 1 1\") == \"1 0 1 1\"\n\"\"\"\n\nimport math\nimport numpy as np\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0 1 1') == '1 0 1 1'\nassert solution('0 0 1 2') == '0 1 1 0'\nassert solution('0 0 1 2') == '-1'\nassert solution('1 1 1 1') == '1 1 1 1'\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0 1 1') == '1 0 1 1'\nassert solution('0 0 2 1') == '0 1 1 0'\n\"\"\""
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0 1 1') == '1 0 1 1'\nassert solution('0 0 1 2') == '0 1 1 0'\nassert solution('0 0 1 1') == '-1'\nassert solution('0 0 1 2') == '0 1 1 0'\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 1 1\") == \"1 0 1 1\"\nassert solution(\"0 0 1 2\") == \"0 1 1 0\"\nassert solution(\"0 0 1 2\") == \"0 1 1 0\"\nassert solution(\"0 0 1 2\") == \"0 1 1 0\"\nassert solution(\"0 0 1 2\") == \"0 1 1 0\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 1 1\") == \"0 1 1 1\"\nassert solution(\"0 0 1 2\") == \"0 1 1 0\"\nassert solution(\"0 0 1 3\") == \"-1\"\nassert solution(\"1 0 2 3\") == \"1 0 3 2\"\nassert solution(\"1 0 2 5\") == \"1 0 5 2\"\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"0 -1\") == \"1000000006\"\n\n\"\"\"\n\n\"\"\"\nFirst, we define a function f(x, y, n):\nf(x, y, n) = f(x, y, n-1) + f(x, y, n+1)\n\nIf we are given x = 0 and y = -1, then:\nf(x, y, 1) = f(0, -1, 0) = 1\n\nIf we are given x = 2 and y = 3, then:\nf(x, y, 2) = f(2, 3, 0) = 1\n\nIf we are given x = 1 and y = 1, then:\nf(x, y, 3) = f(1, 1, 0) = 2\n\nIf we are given x = 1 and y = 1, then:\nf(x, y, 4) = f(1, 1, 0) + f(1, 1, 2) = 4\n\nIf we are given x = 1 and y = 1, then:\nf(x, y, 5) = f(1, 1, 0) + f(1, 1, 2) + f(1, 1, 4) = 7\n\nIf we are given x = 1 and y = 1, then:\nf(x, y, 6) = f(1, 1, 0) + f(1, 1, 2) + f(1, 1, 4) + f(1, 1, 6) = 13\n\nSo, for any given x and y, we have f(x, y, n) = f(x, y, 0).\n\nAnd we can write the function f(x, y, n) modulo 10000000007 as:\nf(x, y, n) = f(x, y, 0) + f(x, y, n - 1) + f(x, y, n + 1) - f(x, y, n - 1) - f(x, y, n + 1)\n\nNow, we can get rid of the recursive calls.\n\nFor example, if we are given x = 1 and y = 1, and n = 6, then:\nf(1, 1, 6) = f(1, 1, 0) + f(1, 1, -1) + f(1, 1, 1) - f(1, 1, -1) - f(1, 1, 1) = 10\n\nSo, if we are given x = 1 and y = 1, then:\nf(1, 1, n) = f(1, 1, 0) + f(1, 1, -1) + f(1, 1, 1) + f(1, 1, -1) + f(1, 1, 1) - f(1, 1, -1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1)\n\nAnd we can see that it satisfies the property f_{n + 1} = f_{n + 2} + f_{n - 1} + f_{n + 1}.\n\nFor example, if we are given x = 1 and y = 1, and n = 4, then:\nf(1, 1, 4) = f(1, 1, 0) + f(1, 1, -1) + f(1, 1, 1) + f(1, 1, -1) + f(1, 1, 1) - f(1, 1, -1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1) = 6\n\nSo, if we are given x = 1 and y = 1, then:\nf(1, 1, n) = f(1, 1, 0) + f(1, 1, -1) + f(1, 1, 1) + f(1, 1, -1) + f(1, 1, 1) - f(1, 1, -1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1)\n\nNow, if we are given x = 1 and y = 1, and n = 5, then:\nf(1, 1, 5) = f(1, 1, 0) + f(1, 1, -1) + f(1, 1, 1) + f(1, 1, -1) + f(1, 1, 1) - f(1, 1, -1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1)\n\nSo, if we are given x = 1 and y = 1, and n = 6, then:\nf(1, 1, 6) = f(1, 1, 0) + f(1, 1, -1) + f(1, 1, 1) + f(1, 1, -1) + f(1, 1, 1) - f(1, 1, -1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1) + f(1, 1, -1) - f(1, 1, 1) - f(1, 1, 1)\n\nSo, for any given x and y, we can compute the nth Fibonacci number by the following recursive formula:\nf(x, y, n) = f(x, y, n - 1) + f(x, y, n - 2)\n\nIf we are given x = 1 and y = 1, then:\nf(1, 1, n) = f(1, 1, n - 1) + f(1, 1, n - 2)\n\nSo, if we are given x = 1 and y = 1, and n = 4, then:\nf(1, 1, 4) = f(1, 1, 3) + f(1, 1, 2)\n\nNow, if we are given x = 1 and y = 1, and n = 5, then:\nf(1, 1, 5) = f(1, 1, 4) + f(1, 1, 3)\n\nNow, if we are given x = 1 and y = 1"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"0 -1\"\n) == \"1000000006\"\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n3\") == \"1\"\nassert solution(\"0 -1\\n2\") == \"1000000006\"\n\"\"\"\nimport collections\nimport functools\n\n\nclass Solution:\n    def fib(self, n: int) -> int:\n        d = collections.defaultdict(list)\n        d[0] = [0, 1]\n        d[1] = [1, 0]\n\n        for i in range(2, n + 1):\n            d[i] = [d[i - 1][0] + d[i - 2][0], d[i - 1][1] + d[i - 2][1]]\n\n        return d[n][0] % 1000000007\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 -1\") == 1000000006\nassert solution(\"2 3\") == 1\n\"\"\"\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n3\\n') == '1'\nassert solution('0 -1\\n2\\n') == '1000000006'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"0 -1\") == \"1000000006\"\n\"\"\""
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"0 -1\") == \"1000000006\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n3\") == \"3\"\nassert solution(\"0 -1\\n2\") == \"1000000006\"\n\n\"\"\"\nimport sys\nimport time\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1'\nassert solution('0 -1') == '1000000006'\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n3\\n') == '1'\nassert solution('0 -1\\n2\\n') == '1000000006'\n\"\"\"\n\nimport sys\n\nx, y = map(int, sys.stdin.readline().split())\nn = int(sys.stdin.readline())"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 -3\\n\") == \"YES\\n2\\n1 2\\n3 3\"\nassert solution(\"1 2 3 -5\\n\") == \"YES\\n4\\n1 1\\n2 2\\n3 3\\n4 4\"\nassert solution(\"0\\n\") == \"NO\"\nassert solution(\"1 2 3 -5\\n\") == \"YES\\n4\\n1 1\\n2 2\\n3 3\\n4 4\"\nassert solution(\"1 2 -3\\n\") == \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 -3\\n\") == \"YES\\n2\\n1 2\\n3 3\"\nassert solution(\"8\\n9 -12 3 4 -4 -10 7 3\\n\") == \"YES\\n2\\n1 2\\n3 8\\n4 4\"\nassert solution(\"1\\n0\\n\") == \"NO\"\nassert solution(\"4\\n1 2 3 -5\\n\") == \"YES\\n4\\n1 1\\n2 2\\n3 3\\n4 4\""
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 -3\") == \"YES\\n2\\n1 2\\n3 3\"\nassert solution(\"8\\n9 -12 3 4 -4 -10 7 3\") == \"YES\\n2\\n1 2\\n3 8\\n4 9\\n5 12\\n6 3\\n7 4\\n8 10\\n9 7\"\nassert solution(\"1\\n0\") == \"NO\"\nassert solution(\"4\\n1 2 3 -5\") == \"YES\\n4\\n1 1\\n2 2\\n3 3\\n4 4\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 -3\") == \"YES\\n2\\n1 2\\n3 3\"\nassert solution(\"8\\n9 -12 3 4 -4 -10 7 3\") == \"YES\\n2\\n1 2\\n3 8\\n4 9\\n4 9\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 -3\") == \"YES\"\nassert solution(\"1 2 -3 -3\") == \"YES\"\nassert solution(\"1 2 3 -3 -3\") == \"NO\"\nassert solution(\"1 2 3 -3 0\") == \"YES\"\nassert solution(\"1 2 3 -3 -3 0\") == \"YES\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 -3\") == \"YES\\n2\\n1 2\\n3 3\"\nassert solution(\"8\\n9 -12 3 4 -4 -10 7 3\") == \"YES\\n2\\n1 2\\n3 8\\n4 9\"\nassert solution(\"1\\n0\") == \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 -3\\n\") == \"YES\\n2\\n1 2\\n3 3\"\nassert solution(\"8\\n9 -12 3 4 -4 -10 7 3\\n\") == \"YES\\n2\\n1 2\\n3 8\\n4 9\"\nassert solution(\"1\\n0\\n\") == \"NO\\n\"\nassert solution(\"4\\n1 2 3 -5\\n\") == \"YES\\n4\\n1 1\\n2 2\\n3 3\\n4 4\"\nprint('Success')"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 -3\\n') == 'YES\\n2\\n1 2\\n3 3'\nassert solution('1 2 3 -5\\n') == 'YES\\n4\\n1 1\\n2 2\\n3 3'\nassert solution('1 2 3 -5 -8\\n') == 'NO'\nassert solution('0\\n') == 'NO'\nassert solution('1 2 3 -5 -8 -3\\n') == 'YES\\n4\\n1 1\\n2 2\\n3 3'\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 -3\") == 'YES\\n2\\n1 2\\n3 3'\nassert solution(\"8\\n9 -12 3 4 -4 -10 7 3\") == 'YES\\n2\\n1 2\\n3 8\\n4 9\\n5 10'\nassert solution(\"1\\n0\") == 'NO'\nassert solution(\"4\\n1 2 3 -5\") == 'YES\\n4\\n1 1\\n2 2\\n3 3'\nassert solution(\"2\\n3 2\") == 'YES\\n2'\nprint('test passed')"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 -5') == 'YES\\n4\\n1 1\\n2 2\\n3 3\\n4 4'\nassert solution('8\\n9 -12 3 4 -4 -10 7 3') == 'YES\\n2\\n1 2\\n3 8\\n4 3'\nassert solution('1\\n0') == 'NO'\nassert solution('2\\n1 2') == 'YES\\n1\\n1 2'\nassert solution('3\\n1 2 -3') == 'NO'\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\") == \"6\"\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2\") == \"3\"\nassert solution(\"5 4 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2\") == \"3\"\nassert solution(\"5 4 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str([5, 3, 2])) == '3'\nassert solution(str([5, 3, 2])) == '3'\nassert solution(str([5, 4, 2])) == '6'\n\"\"\"\nimport sys"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2\") == \"3\"\nassert solution(\"5 4 2\") == \"6\"\nassert solution(\"5 5 2\") == \"0\"\nassert solution(\"5 6 2\") == \"0\"\nassert solution(\"6 6 2\") == \"0\"\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 2') == '3'\nassert solution('5 4 2') == '6'"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\") == \"3\"\nassert solution(\"5 4 2\") == \"6\"\nassert solution(\"5 4 3\") == \"0\"\nassert solution(\"3 3 3\") == \"0\"\nassert solution(\"3 3 1\") == \"8\"\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2\") == \"3\"\n\nassert solution(\"5 4 2\") == \"6\"\n\"\"\"\n\nn, m, k = map(int, stdin.readline().split())\nprint(n - m % (k * 2))\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 2') == '3'\nassert solution('5 4 2') == '6'\n\n\"\"\"\n\nimport sys\n\na, b, c = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n\nprint((b * 2) % 1000000009)\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 2') == 1\n\n\"\"\"\nimport math"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3454\") == \"YES\\n344\"\nassert solution(\"111111\") == \"YES\\n0\"\nassert solution(\"10\") == \"YES\\n0\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"34\") == \"NO\"\nassert solution(\"11\") == \"YES\"\nassert solution(\"111111\") == \"NO\"\nassert solution(\"101010\") == \"YES\"\nassert solution(\"111111111\") == \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3454\") == \"YES\\n344\"\nassert solution(\"111111\") == \"YES\\n0\"\nassert solution(\"98765\") == \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == \"NO\"\nassert solution('5') == \"NO\"\nassert solution('11') == \"YES\"\nassert solution('111111') == \"NO\"\nassert solution('101010') == \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3454\") == \"YES\"\nassert solution(\"111111\") == \"NO\"\n\"\"\""
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100') == 'NO'\nassert solution('101') == 'YES'\nassert solution('1010') == 'YES'\nassert solution('10101') == 'NO'\nassert solution('100100') == 'NO'\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3454') == \"YES\\n344\"\nassert solution('111111') == \"NO\\n0\"\nassert solution('1525894') == \"YES\\n83\"\nassert solution('100') == \"YES\\n0\"\nassert solution('1') == \"YES\\n1\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3454') == 'YES\\n344'\nassert solution('111111') == 'YES\\n0'\nassert solution('100010') == 'NO'\nassert solution('111111') == 'NO'\nassert solution('1') == 'YES\\n1'\n\"\"\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12345') == 'NO'\nassert solution('11') == 'YES'\nassert solution('111111') == 'NO'\nassert solution('1111111') == 'YES'\nassert solution('1111111') == 'YES'\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3454\") == \"YES\"\nassert solution(\"111111\") == \"NO\"\nassert solution(\"111110\") == \"NO\"\nassert solution(\"110011\") == \"NO\"\nassert solution(\"110\") == \"YES\"\n\"\"\""
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == '4'\n\"\"\""
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == \"4\"\nassert solution(\"8 4\\n3 1\\n6 2\\n5 2\\n2 1\") == \"-1\"\nassert solution(\"1 1\\n1 1\") == \"1\"\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == \"4\"\nassert solution(\"8 4\\n3 1\\n6 2\\n5 2\\n2 1\") == \"-1\""
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n6 2\\n5 2\\n2 1') == '4'\nassert solution('7 3\\n6 2\\n5 2\\n2 1') == '-1'\nassert solution('8 4\\n3 1\\n6 2\\n5 2\\n2 1') == '-1'\nassert solution('8 4\\n3 1\\n6 2\\n5 2\\n2 1') == '4'\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == '4'\nassert solution(\"8 4\\n3 1\\n6 2\\n5 2\\n2 1\") == '-1'"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == \"4\"\nassert solution(\"8 4\\n3 1\\n6 2\\n5 2\\n2 1\") == \"-\"\nassert solution(\"10 5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == \"-\"\nassert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == \"4\"\nassert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == \"4\"\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == \"4\"\n\n\"\"\"\nimport re"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 3\\n6 2\\n2 1\\n7 3\\n') == '4'\nassert solution('8 4\\n3 1\\n6 2\\n5 2\\n2 1\\n') == '-1'\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == '4'\nassert solution(\"8 4\\n3 1\\n6 2\\n5 2\\n2 1\") == '-1'"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"00X0X0\") == 0\nassert solution(\"0X0X0\") == 0\nassert solution(\"0XXX0\") == 0\nassert solution(\"00000\") == 0\nassert solution(\"00X0X0XXX0\") == 1\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"00X0X0\") == 2\nassert solution(\"0XXX0\") == 0\nassert solution(\"0X0X0\") == 0\nassert solution(\"00X0X0\") == 2\nassert solution(\"00X0X0\") == 2\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00') == 1\nassert solution('00X00X0XXX0') == 4\nassert solution('0XXX0X00X00') == 4\nassert solution('0X0X0') == 0\nassert solution('0X0X0') == 0\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('00') == 1\nassert solution('0X0X0') == 0\nassert solution('0X0X0X0X0X0X0') == 2\nassert solution
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00X0X0\") == 2\nassert solution(\"00X00X0XXX0\") == 4\nassert solution(\"0X0X0\") == 0\nassert solution(\"0X0X0\") == 0\nassert solution(\"0XXX0\") == 2\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0XX0\") == \"2\"\nassert solution(\"0X0X0\") == \"0\"\nassert solution(\"0X0X0XXX0X00X00\") == \"4\"\nassert solution(\"00\") == \"1\"\nassert solution(\"00X00X0XXX0X00X00\") == \"4\"\n\"\"\""
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('00X0X0') == 2\nassert solution('0XXX0') == 0\nassert solution('0X0X0') == 0\nassert solution('X0X0') == 2\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00X0X0\") == 2\n\"\"\"\n\n\nfrom itertools import product"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('00X0X0') == 0\nassert solution('0X0X0') == 0\nassert solution('0XXX0') == 0\nassert solution('0X0X0X0X0X0X0X0X0') == 2\nassert solution('0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0') == 5\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"00X0X0\") == \"2\"\nassert solution(\"0X0X0\") == \"0\"\nassert solution(\"00X0X0X0X0X0\") == \"2\"\nassert solution(\"0X0X0X0X0X0X0\") == \"0\"\nassert solution(\"0X0X0X0X0X0X0X0X0X0X0X0X0\") == \"0\"\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaaaBaabAbA\") == \"2\"\nassert solution(\"zACaAbbaazzC\") == \"3\"\nassert solution(\"ABC\") == \"0\""
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaaaBaabAbA\") == 2\nassert solution(\"zACaAbbaazzC\") == 3\nassert solution(\"ABC\") == 0\nassert solution(\"aaaBBcde\") == 0\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('zACaAbbaazzC') == '3'\nassert solution('ABC') == '0'\n\"\"\"\n\nimport unittest\n\n\nclass SolutionTestCase(unittest.TestCase):\n    def test_solution(self):\n        assert solution('zACaAbbaazzC') == '3'\n        assert solution('ABC') == '0'\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaaaBaabAbA') == 2\nassert solution('zACaAbbaazzC') == 3\n\"\"\""
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaaaBaabAbA\") == 2\nassert solution(\"zACaAbbaazzC\") == 3\nassert solution(\"ABC\") == 0\n\n\n\"\"\"\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"zACaAbbaazzC\") == 3\n\"\"\"\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaaaBaabAbA') == 2\nassert solution('zACaAbbaazzC') == 3\nassert solution('ABC') == 0\n\nassert solution(stdin) == expected_result"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaABaB\") == 3\n\"\"\"\n\nimport re"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaa') == 1\nassert solution('aab') == 0\nassert solution('aabaa') == 2\nassert solution('aaaa') == 1\nassert solution('aa') == 0\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"zzzzAbbaazzC\") == 3\nassert solution(\"aaaaBaabAbA\") == 2\nassert solution(\"ABC\") == 0\nassert solution(\"bbbb\") == 1\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 -2 0\") == 3\nassert solution(\"6\\n16 23 16 15 42 8\") == 120\n\"\"\""
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 1 1 1 1\\n') == '4'\nassert solution('7\\n1 1 1 1 1 1 1') == '6'\nassert solution('5\\n0 1 1 1 1') == '4'\nassert solution('4\\n2 1 1 1\\n') == '6'\nassert solution('4\\n1 -1 1 1') == '5'\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 -2 0') == '3'\nassert solution('6\\n16 23 16 15 42 8') == '120'"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 -2 0\") == \"3\"\nassert solution(\"6\\n16 23 16 15 42 8\") == \"120\"\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 -2 0\") == \"3\"\nassert solution(\"6\\n16 23 16 15 42 8\") == \"120\"\n\nfrom collections import Counter"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 -2 0') == '3'\nassert solution('6\\n16 23 16 15 42 8') == '120'\n\"\"\""
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 -2 0\") == \"3\"\nassert solution(\"6\\n16 23 16 15 42 8\") == \"120\"\n\"\"\"\nimport collections"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 -2 0\") == \"3\\n\"\nassert solution(\"6\\n16 23 16 15 42 8\") == \"120\\n\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\narr.sort()\n\ni = 1\nj = n - 1\nresult = 0\n\nwhile i < j:\n    result = max(result, arr[i] + arr[j])\n    i += 1\n    j -= 1\n\nprint(result)\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 -2 0\") == \"3\"\nassert solution(\"6\\n16 23 16 15 42 8\") == \"120\"\n\"\"\"\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 -2 0\") == 3\n\nassert solution(\"16 23 16 15 42 8\") == 120\nassert solution(\"\") == 0\n\n\"\"\"\n\n\nimport unittest\nimport math\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 9 2 4''') == '4'\nassert solution('''6 10 2 4''') == '2'\nassert solution('''6 5 4 3''') == '-1'\nassert solution('''6 5 4 3''') == '-1'\nassert solution('''10 4 3 4''') == '5'\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 9 2 4\") == '4'\nassert solution(\"6 10 2 4\") == '2'\nassert solution(\"6 5 4 3\") == '-1'\n\"\"\"\n\na, b, f, k = map(int, input().split())\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 9 2 4') == '4'\nassert solution('6 10 2 4') == '2'\nassert solution('6 5 4 3') == '-1'\n\"\"\"\n\nimport sys\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('6 9 2 4'), '4')\n        self.assertEqual(solution('6 10 2 4'), '2')\n        self."
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\nassert solution(\"6 10 2 4\") == \"2\"\nassert solution(\"6 5 4 3\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\nassert solution(\"6 10 2 4\") == \"2\"\nassert solution(\"6 5 4 3\") == \"-1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 9 2 4') == 4\n\"\"\"\na, b, f, k = map(int, input().strip().split(' '))"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 9 2 4\") == 4\nassert solution(\"6 10 2 4\") == 2\nassert solution(\"6 5 4 3\") == -1\n\n\"\"\"\n\nimport sys\n\na, b, f, k = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 9 2 4') == '4'\nassert solution('6 10 2 4') == '2'\nassert solution('6 5 4 3') == '-1'\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\nassert solution(\"6 10 2 4\") == \"2\"\nassert solution(\"6 5 4 3\") == \"-1\"\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\nassert solution(\"6 10 2 4\") == \"2\"\nassert solution(\"6 5 4 3\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Hello') == 2\nassert solution('Codeforces') == 2\nassert solution('Privet') == -1\nassert solution('abacabac') == 8\nassert solution('abacabac') == 8\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Hello\") == 2\nassert solution(\"Codeforces\") == 2\nassert solution(\"Privet\") == -1\nassert solution(\"abacabac\") == 8\nassert solution(\"abacabac\") == 8\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Hello\") == -1\nassert solution(\"Codeforces\") == 2\nassert solution(\"abacabac\") == 8\nassert solution(\"Privet\") == -1\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Codeforces') == 'Codeforces'\nassert solution('Codeforces') == 'Codeforces'\nassert solution('Privet') == 'Privet'\nassert solution('abacabac') == 'a'\nassert solution('abacabac') == 'a'\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"abcabc\") == \"abc\"\nassert solution(\"abca\") == \"abc\"\nassert solution(\"abcab\") == \"abc\"\nassert solution(\"abcabcabc\") == \"abc\"\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Hello\") == \"2\"\nassert solution(\"Codeforces\") == \"2\"\nassert solution(\"Privet\") == \"-1\"\nassert solution(\"abacabac\") == \"8\"\nassert solution(\"\") == \"1\"\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Hello\") == 2\nassert solution(\"Codeforces\") == 2\nassert solution(\"Privet\") == -1\nassert solution(\"abacabac\") == 8\nassert solution(\"abacabacabc\") == 7\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Hello') == 2\nassert solution('Codeforces') == 2\nassert solution('abacabac') == 8\nassert solution('Privet') == -1\nassert solution('GfG') == -1\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('Codeforces') == 'Cf'\nassert solution('CodeforcesCodeforcesCodeforcesCodeforces') == 'CfCfCfCfCfCf'\nassert solution('PrivetPrivetPrivetPrivetPrivet') == 'PrPrPrPrPrPrPr'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"abac\") == \"abc\"\nassert solution(\"abac\") == \"abc\"\nassert solution(\"aabc\") == \"abc\"\nassert solution(\"abca\") == \"abc\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10 1 3\\n3 4 7') == 'RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2'\nassert solution('2 9 2 3\\n6 4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 1 3\\n3 4 7\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\\n\"\n\nassert solution(\"2 9 2 3\\n6 4\") == \"IMPOSSIBLE\""
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10 1 3\\n3 4 7\\n') == 'RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2'\n\"\"\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 1 3\\n3 4 7\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\"\nassert solution(\"2 9 2 3\\n6 4\") == \"IMPOSSIBLE\"\n\n\n----\n\nn, m, s, d = [int(x) for x in input().split()]\n\nobstacles = [int(x) for x in input().split()]\n\nstart = 0\nfinish = m\n\ni = 0\nwhile True:\n    if obstacles[i] > finish:\n        print(\"IMPOSSIBLE\")\n        exit()\n    if obstacles[i] == finish:\n        print(\"JUMP\", finish - start)\n        exit()\n\n    if obstacles[i] + s < finish:\n        print(\"RUN\", finish - obstacles[i])\n        start = finish\n        finish = obstacles[i] + s\n    else:\n        print(\"JUMP\", finish - start)\n        start = finish\n        finish = obstacles[i] + s\n    i += 1\n    if i == n:\n        print(\"RUN\", finish - start)\n        exit()\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == \"IMPOSSIBLE\"\n\"\"\"\n\nn, m, s, d = map(int, stdin.readline().split())\nstops = list(map(int, stdin.readline().split()))\n\nstart = 0\n\nwhile start + s < m:\n    for stop in stops:\n        if start + s > stop:\n            start = stop\n            break\n    if start + s > m:\n        print(\"IMPOSSIBLE\")\n        break\n    start += s\n    if start + d > m:\n        print(\"IMPOSSIBLE\")\n        break\n    start += d\nelse:\n    print(\"RUN \" + str(start - s) if start - s > 0 else \"RUN \" + str(start - s + 1))\n    while start + d > m:\n        start += d\n        print(\"JUMP \" + str(start - d) if start - d > 0 else \"JUMP \" + str(start - d + 1))\n    print(\"JUMP \" + str(start - d) if start - d > 0 else \"JUMP \" + str(start - d + 1))"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 1 3\\n3 4 7\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10 1 3\\n3 4 7') == 'RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10 1 3', '3 4 7') == 'RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\\n'\nassert solution('2 9 2 3', '6 4') == 'IMPOSSIBLE'\nassert solution('1 10 3', '4 6') == 'IMPOSSIBLE'\nassert solution('1 10 1', '2 3') == 'RUN 2\\nRUN 2\\nJUMP 2\\n'\nassert solution('1 10 1', '3 3') == 'RUN 3\\nRUN 3\\nJUMP 3\\n'\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 1 3\") == \"RUN 2\\nJUMP 3\\nRUN 1\"\nassert solution(\"2 9 2 3\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\n\nclass Solution:\n    def __init__(self, obstacles, finish, s, d):\n        self.obstacles = obstacles\n        self.finish = finish\n        self.s = s\n        self.d = d\n        self.c = 0\n\n    def solution(self):\n        while self.c < len(self.obstacles):\n            if self.obstacles[self.c] >= self.finish:\n                return 'IMPOSSIBLE'\n            if self.obstacles[self.c] <= self.finish - self.s:\n                self.finish = self.obstacles[self.c]\n                self.c += 1\n            elif self.obstacles[self.c] <= self.finish - self.s + self.d:\n                self.finish = self.obstacles[self.c] + self.s\n                self.c += 1\n            else:\n                self.finish += self.d\n                self.c += 1\n        return \"RUN {}\\nJUMP {}\".format(self.finish - self.s, self.finish - (self.finish - self.s - self.d))\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 1 3\\n3 4 7\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\\n\", \"First, from right to left\"\nassert solution(\"2 9 2 3\\n6 4\") == \"IMPOSSIBLE\", \"Second, it is not possible to jump over the finish\"\n\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\") == \"0\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"9 5\") == \"4\"\nassert solution(\"5 2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 5\\n\") == \"4\"\nassert solution(\"3 3\\n\") == \"2\"\nassert solution(\"5 2\\n\") == \"0\"\n\"\"\"\n\na, x = map(int, input().split())\nprint(2 ** (a + x - 1).bit_length() - 1)\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 5\\n\") == \"4\"\n\"\"\"\n\ns, x = map(int, input().split())"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 5') == 4\nassert solution('3 3') == 2\nassert solution('5 2') == 0\nassert solution('7 10') == 1\nassert solution('8 10') == 0\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 5\") == '4'\nassert solution(\"3 3\") == '2'\nassert solution(\"5 2\") == '0'\n\"\"\"\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 5\") == \"4\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"5 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\") == \"3\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"5 2\") == \"0\""
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3') == '2'\nassert solution('9 5') == '4'\nassert solution('5 2') == '0'\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 5\") == \"4\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"5 2\") == \"0\"\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\") == '2'\nassert solution(\"5 1\") == '2'\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2\\n') == '2'\nassert solution('5 1\\n') == '2'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\n\nprint(n - k + 1)\n\nfor i in range(1, n + 1):\n    if i - k < 1:\n        print(i + k)\n    else:\n        print(i - k)"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3, 1) == [1, 2]\nassert solution(7, 2) == [2, 5]\n\nfrom typing import List, Tuple\nimport itertools\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\") == \"2 1 6\"\nassert solution(\"5 1\") == \"2 1 4\"\n\"\"\"\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\") == \"2\"\nassert solution(\"5 1\") == \"2\"\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"2 1 4\"\nassert solution(\"5 1\") == \"2 1 4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\") == \"2 1 6\"\nassert solution(\"5 1\") == \"2 1 4\"\n\"\"\"\nfrom collections import deque, defaultdict\nfrom typing import List\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3 1) == '2 1 6'\nassert solution(7 2) == '2 1 6'\n\nassert solution(5 1) == '2 1 4'\nassert solution(6 1) == '2 1 4'\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1') == '2 1 4'\nassert solution('6 1') == '2 1 4 6'\nassert solution('7 1') == '2 1 4 6 7'\nassert solution('7 3') == '2 1 5 6 7'\nassert solution('7 3') == '2 1 4 5 7'\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\") == \"2\\n1 6\"\nassert solution(\"5 1\") == \"2\\n1 4\"\n\n\n\n\n\n-----Test 2-----\nInput\n4 4\n\nOutput\n0\n\"\"\""
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8314\") == 2\nassert solution(\"625\") == 0\nassert solution(\"333\") == -1\nassert solution(\"0\") == 0\n\"\"\"\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8314\") == \"2\"\nassert solution(\"625\") == \"0\"\nassert solution(\"333\") == \"-\"\nassert solution(\"101010\") == \"-\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8314\") == 2\nassert solution(\"625\") == 0\nassert solution(\"333\") == -1\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8314\") == \"2\"\nassert solution(\"625\") == \"0\"\nassert solution(\"333\") == \"False\"\n\"\"\""
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8314\") == \"2\"\nassert solution(\"625\") == \"0\"\nassert solution(\"333\") == \"-1\"\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8314\") == \"2\"\nassert solution(\"625\") == \"0\"\nassert solution(\"333\") == \"-1\"\n\"\"\""
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8314\") == 2\nassert solution(\"625\") == 0\nassert solution(\"333\") == -1\nassert solution(\"8938\") == -1\nassert solution(\"0\") == -1\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\n\"\"\"\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\n\n\"\"\"\n\n\nfrom fractions import gcd\nfrom collections import Counter\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\n\n\"\"\"\n\n\n\n\"\"\"\nn = int(stdin)\nfor i in range(1, n+1):\n    for j in range(1, n+1):\n        if i % j == 0:\n            print(j)\n\"\"\"\n\n\"\"\"\nn = int(stdin)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\n\"\"\"\n\n\"\"\"\n\u984c\u76ee\u89e3\u91cb:\n\u4f86\u81ea\u300ahttps://beta.atcoder.jp/contests/abc142/tasks/abc142_d\u300b\n\u4ee5\u4e0b\u76845\u9805\u6982\u5ff5:\n1. \u7531\u5c0f\u5230\u5927\u7684\u6700\u5927\u516c\u56e0\u6578:\n  2. \u6700\u5927\u516c\u56e0\u6578 gcd\n  3. \u516c\u56e0\u6578:\n    3.1 \u6b21\u65b9\u6578\u6392\u5217:\n      3.1.1 \u524d\u4e00\u500b\u7684\u6b21\u65b9\u6578\u6392\u5217 p(i)\n      3.1.2 \u5f8c\u4e00\u500b\u7684\u6b21\u65b9\u6578\u6392\u5217 p(i+1)\n      3.1.3 \u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u7684\u7d50\u679c: p(i)+p(i+1)\n      3.1.4 \u6b21\u65b9\u6578\u6392\u5217\u76f8\u4e58\u7684\u7d50\u679c: p(i)*p(i+1)\n      3.1.5 p(i)+p(i+1)-1: p(i) \u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u8207\u5f8c\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u76f8\u6e1b\u7684\u6700\u5927\u516c\u56e0\u6578\n    3.2 \u5408\u4f75\u5f8c\u6b21\u65b9\u6578\u6392\u5217:\n      3.2.1 \u524d\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217 p(i) \u8207 \u5f8c\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217 p(i+1) \u5408\u4f75\u5f8c\u6b21\u65b9\u6578\u6392\u5217 p(i+2)\n      3.2.2 \u524d\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217 p(i) \u8207 \u5f8c\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217 p(i+1) \u5408\u4f75\u5f8c\u6b21\u65b9\u6578\u6392\u5217 p(i+2)\n      3.2.3 \u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u7684\u7d50\u679c: p(i)+p(i+1)+p(i+2)\n      3.2.4 \u6b21\u65b9\u6578\u6392\u5217\u76f8\u4e58\u7684\u7d50\u679c: p(i)*p(i+1)*p(i+2)\n      3.2.5 p(i)+p(i+1)-1: p(i) \u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u8207\u5f8c\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u76f8\u6e1b\u7684\u6700\u5927\u516c\u56e0\u6578\n    3.3 \u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u76f8\u4e58\u8207\u5f8c\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u76f8\u4e58\u7684\u6700\u5927\u516c\u56e0\u6578:\n      3.3.1 \u524d\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217 p(i) \u8207 \u5f8c\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217 p(i+1) \u5408\u4f75\u5f8c\u6b21\u65b9\u6578\u6392\u5217 p(i+2)\n      3.3.2 \u524d\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217 p(i) \u8207 \u5f8c\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217 p(i+1) \u5408\u4f75\u5f8c\u6b21\u65b9\u6578\u6392\u5217 p(i+2)\n      3.3.3 \u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u7684\u7d50\u679c: p(i)+p(i+1)+p(i+2)\n      3.3.4 \u6b21\u65b9\u6578\u6392\u5217\u76f8\u4e58\u7684\u7d50\u679c: p(i)*p(i+1)*p(i+2)\n      3.3.5 p(i)+p(i+1)-1: p(i) \u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u8207\u5f8c\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u76f8\u6e1b\u7684\u6700\u5927\u516c\u56e0\u6578\n3. \u6b21\u65b9\u6578\u6392\u5217\u7684\u9577\u5ea6:\n  3.1 \u5408\u4f75\u5f8c\u6b21\u65b9\u6578\u6392\u5217:\n    3.1.1 \u524d\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217 p(i) \u8207 \u5f8c\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217 p(i+1) \u5408\u4f75\u5f8c\u6b21\u65b9\u6578\u6392\u5217 p(i+2)\n    3.1.2 \u524d\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217 p(i) \u8207 \u5f8c\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217 p(i+1) \u5408\u4f75\u5f8c\u6b21\u65b9\u6578\u6392\u5217 p(i+2)\n    3.1.3 \u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u7684\u7d50\u679c: p(i)+p(i+1)+p(i+2)\n    3.1.4 \u6b21\u65b9\u6578\u6392\u5217\u76f8\u4e58\u7684\u7d50\u679c: p(i)*p(i+1)*p(i+2)\n    3.1.5 p(i)+p(i+1)-1: p(i) \u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u8207\u5f8c\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u76f8\u6e1b\u7684\u6700\u5927\u516c\u56e0\u6578\n  3.2 \u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u8207\u5f8c\u4e00\u500b\u6b21\u65b9\u6578\u6392\u5217\u76f8\u52a0\u76f8\u4e58\u7684\u6700"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\n\"\"\"\nfrom functools import reduce\nfrom typing import List\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABABBBACFEYUKOTT\") == 4\n\"\"\"\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABBBACFEYUKOTT\") == 4\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\nassert solution('AAA') == 1\n\"\"\"\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\n\"\"\"\n\nimport re\n\nprint(sum(\n    int(len(match.group(0)))\n    for match in re.finditer('(?=(?i)[AEIOUYaeiouy])', stdin)))\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\n\"\"\""
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\nassert solution('AAA') == 1\n\"\"\""
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABABBBACFEYUKOTT\") == \"4\"\nassert solution(\"AAA\") == \"1\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABABBBACFEYUKOTT\") == 4\nassert solution(\"AAA\") == 1\nprint('The solution is correct!')\n\n\"\"\""
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\nassert solution('AAA') == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 7 11 5') == 'YES'\nassert solution('7 3 2 5') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 2 5') == 'NO'\nassert solution('1 7 11 5') == 'YES'\nassert solution('1 7 11 5') == 'NO'\nassert solution('1 7 11 5') == 'NO'\nassert solution('1 7 11 5') == 'NO'\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 7 11 5\") == \"YES\"\nassert solution(\"7 3 2 5\") == \"NO\"\nassert solution(\"1 2 4 5\") == \"YES\"\nassert solution(\"1 2 5 3\") == \"YES\"\nassert solution(\"1 2 4 5\") == \"YES\"\n\nimport math"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == \"YES\" or \"NO\"\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 7 11 5') == 'YES'\nassert solution('7 3 2 5') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 7 11 5\") == 'YES'\nassert solution(\"7 3 2 5\") == 'NO'\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 7 11 5\") == \"YES\"\nassert solution(\"7 3 2 5\") == \"NO\"\nassert solution(\"7 3 2 4\") == \"YES\"\nassert solution(\"1 7 5 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 11 5\") == \"YES\"\nassert solution(\"7 3 2 5\") == \"NO\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 7 11 5\") == \"YES\"\nassert solution(\"7 3 2 5\") == \"NO\"\nassert solution(\"1 2 3 4\") == \"YES\"\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"1 7 11 5\"\n) == \"YES\"\nassert solution(\n\"7 3 2 5\"\n) == \"NO\"\nassert solution(\n\"7 3 2 5\"\n) == \"NO\"\nassert solution(\n\"1 7 11 5\"\n) == \"YES\"\nassert solution(\n\"1 7 11 5\"\n) == \"YES\"\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n141 592 653\") == '653 733'\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n141 592 653\") == \"653 733\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Decider:\n    def __init__(self):\n        self.p1_sizes = None\n        self.p2_sizes = None\n        self.last_p1 = None\n        self.last_p2 = None\n\n    def take_p1_turn(self, size: int):\n        if self.last_p2 is not None and size == self.last_p2:\n            self.p1_sizes.append(size)\n            self.last_p2 = None\n            self.last_p1 = None\n        else:\n            self.p1_sizes.append(size)\n            self.last_p1 = size\n\n    def take_p2_turn(self, size: int):\n        if self.last_p1 is not None and size == self.last_p1:\n            self.p2_sizes.append(size)\n            self.last_p1 = None\n            self.last_p2 = None\n        else:\n            self.p2_sizes.append(size)\n            self.last_p2 = size\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"141 592 653\\n\") == \"653 733\"\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n141 592 653\") == \"653 733\"\nassert solution(\"5\\n10 21 10 21 10\") == \"31 41\"\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n141 592 653') == '653 733'\nassert solution('2\\n21 10') == '31 41'\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n141 592 653') == '653 733'\nassert solution('5\\n10 21 10 21 10') == '31 41'\nprint('PASSED')\n\n'''\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n141 592 653\\n\") == \"653 733\"\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n141 592 653\\n\") == \"653 733\"\nassert solution(\"5\\n10 21 10 21 10\\n\") == \"31 41\"\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n141 592 653') == '653 733'\nassert solution('5\\n10 21 10 21 10') == '31 41'\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n141 592 653\") == \"653 733\"\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 6 8\") == 2\nassert solution(\"3\\n3 6 5\") == -1\nassert solution(\"6\\n2 4 8 6 10 18\") == 3\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 6 8') == '2'\nassert solution('6\\n2 4 8 6 10 18') == '3'\n\"\"\""
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test1) == 1\nassert solution(test2) == 3\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom math import inf"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 6 8') == '2'\nassert solution('3\\n3 6 5') == '-1'\nassert solution('6\\n2 4 8 6 10 18') == '3'\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 6 8\") == \"2\"\nassert solution(\"3\\n6 5\") == \"1\"\nassert solution(\"6\\n2 4 8 6 10 18\") == \"3\"\nassert solution(\"1\\n3 6 5\") == \"1\"\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 6 8\") == 2\nassert solution(\"6\\n2 4 8 6 10 18\") == 3\nassert solution(\"4\\n4 5 7 11 16\") == -1"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 6 8\") == 2\nassert solution(\"3\\n3 6 5\") == -1\nassert solution(\"6\\n2 4 8 6 10 18\") == 3\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 6 8') == '2'\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 10 12\") == \"1\"\nassert solution(\"3 6 5\") == \"3\"\nassert solution(\"6 10 8\") == \"3\"\nassert solution(\"4 8 6\") == \"2\"\nassert solution(\"3 6 5\") == \"3\"\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 6 8\") == 2\n\"\"\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 4 1\") == \"Alice\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 8\\n') == 'Bob'\n\"\"\"\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 8') == 'Bob'\nassert solution('4 1 4 1') == 'Alice'\n\"\"\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 8\") == \"Bob\"\nassert solution(\"4 1 4 1\") == \"Alice\"\nassert solution(\"3 1 4 1\") == \"Alice\"\nassert solution(\"8 6\") == \"Alice\"\nassert solution(\"12 9\") == \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 8\") == \"Bob\"\nassert solution(\"3 1 4 1\") == \"Alice\""
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == 'Alice'\nassert solution(\"8 8\\n6 7 8 1 5 3 2 3\") == 'Bob'\nassert solution(\"8 1 4 1\\n6 7 8 1 5 3 2 3\") == 'Alice'"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 8\\n1 1 4 1\") == \"Bob\"\nassert solution(\"4 3 1 4 1\") == \"Alice\"\nassert solution(\"3 1 4 1\") == \"Alice\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 4 1\\n3 1 4 1') == 'Alice'\nassert solution('8 8\\n3 1 4 1') == 'Bob'\nassert solution('4 8\\n3 1 4 1') == 'Alice'\nassert solution('8 8\\n3 1 4 1') == 'Bob'\n\n-----Bite-----\n\nReveal this problem if you understand it.\n\n'''\n\nimport sys\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 8\") == \"Bob\"\nassert solution(\"4 1 4 1\") == \"Alice\""
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"8 8\n3 1 4 1\"\"\") == \"Bob\"\nassert solution(\"\"\"4 3 1 4 1\"\"\") == \"Alice\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"YES\"\nassert solution(\"4\\n3 2 1 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"YES\"\nassert solution(\"5\\n1 3 3 2 1\") == \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nc = 0\nfor i in range(1, n-1):\n    if a[i]!= a[0]:\n        a[i] += 1\n        a[0] -= 1\n        a[-1] += 1\n        if a[0] == a[1] or a[0] == a[-1]:\n            a[0] = a[1] = a[-1] = a[i] = 0\n            c += 1\n            continue\n        else:\n            break\n    else:\n        break\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 3 3 2 1''') == 'YES'\n\nassert solution('''5\n1 2 3 4 5''') == 'NO'\n\nassert solution('''5\n1 2 3 1 1''') == 'YES'\n\nassert solution('''5\n3 3 1 2 2''') == 'NO'\n\nassert solution('''5\n3 3 3 2 2''') == 'NO'"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3 3 2 1\") == 'YES'\nassert solution(\"5\\n1 2 3 4 5\") == 'NO'\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"6\\n1 2 3 3 3 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 3 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 3 2 1') == 'YES'\nassert solution('5\\n1 2 3 4 5') == 'NO'\n\"\"\""
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3 2\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2 1\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ababa') == 2\nassert solution('ab') == 0\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ababa') == 2\nassert solution('ababc') == 3\nassert solution('ababac') == 4\n\"\"\"\n\n\"\"\"\nIn case of strings, and even for strings, the main problem with finding the maximum length of string is that the string itself is present multiple times, and in any case it can be present in many different substrings.\nIn this problem, we are trying to find the maximum length of string that occurs more than once.\n\nLets think of the length of string as a graph, and the vertices of the graph are the characters of the string, and the edges are the strings in which the characters are connected.\n\nThe idea is to find the longest path in a graph (that is, the longest path from the vertex 0 to vertex n - 1).\nSince we are interested in the longest path, we will find the longest cycle in the graph, which will be the longest path.\n\nThe idea is to find the longest cycle in the graph.\n\nWe will represent each character of the string as a vertex and connect the characters that are the same as adjacent.\n\nSince, in a graph, the connections are bidirectional, we will make another graph where the connections are unidirectional from one character to the next.\n\nThe basic idea is to find the longest path from the character 0 to character n - 1, and the longest cycle in this graph, and compare the lengths of the two.\n\nTo find the longest cycle in the graph, we will do a DFS search in the unidirectional graph.\n\nInstead of keeping track of the path in the graph, we will just store the characters of the string.\n\"\"\"\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5ababa\") == \"2\"\n\"\"\""
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ababa\") == 2\n\"\"\"\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ababa\") == 2\n\"\"\"\n\n\"\"\"\nGiven is a string S of length N. Find the maximum length of a non-empty substring that occurs twice or more in S as contiguous substrings without overlapping. More formally, find the maximum positive integer len such that there exist integers l_1 and l_2 ( 1 \\leq l_1, l_2 \\leq N - len + 1 ) that satisfy the following:\n - l_1 + len \\leq l_2\n - S[l_1+i] = S[l_2+i] (i = 0, 1,..., len - 1)\nIf there is no such integer len, print 0.\n\n-----Constraints-----\n - 2 \\leq N \\leq 5 \\times 10^3\n - |S| = N\n - S consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n\n-----Output-----\nPrint the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping. If there is no such non-empty string, print 0 instead.\n\n-----Sample Input-----\n5\nababa\n\n-----Sample Output-----\n2\n\nThe strings satisfying the conditions are: a, b, ab, and ba. The maximum length among them is 2, which is the answer.\nNote that aba occurs twice in S as contiguous substrings, but there is no pair of integers l_1 and l_2 mentioned in the statement such that l_1 + len \\leq l_2.\n\"\"\"\n\n\"\"\"\nGiven is a string S of length N. Find the maximum length of a non-empty substring that occurs twice or more in S as contiguous substrings without overlapping. More formally, find the maximum positive integer len such that there exist integers l_1 and l_2 ( 1 \\leq l_1, l_2 \\leq N - len + 1 ) that satisfy the following:\n - l_1 + len \\leq l_2\n - S[l_1+i] = S[l_2+i] (i = 0, 1,..., len - 1)\nIf there is no such integer len, print 0.\n\n-----Constraints-----\n - 2 \\leq N \\leq 5 \\times 10^3\n - |S| = N\n - S consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n\n-----Output-----\nPrint the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping. If there is no such non-empty string, print 0 instead.\n\n-----Sample Input-----\n5\nababa\n\n-----Sample Output-----\n2\n\nThe strings satisfying the conditions are: a, b, ab, and ba. The maximum length among them is 2, which is the answer.\nNote that aba occurs twice in S as contiguous substrings, but there is no pair of integers l_1 and l_2 mentioned in the statement such that l_1 + len \\leq l_2.\n\"\"\""
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ababa\") == 2\n\"\"\"\n\nN = int(input())\nS = input()\n\nfreq_dict = {}\nfor c in S:\n    if c in freq_dict:\n        freq_dict[c] += 1\n    else:\n        freq_dict[c] = 1"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ababa\") == \"2\"\n\"\"\""
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ababa') == 'ab'\n\"\"\"\n\n\"\"\"\nGiven is a string S of length N.\nFind the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping.\nMore formally, find the maximum positive integer len such that there exist integers l_1 and l_2 ( 1 \\leq l_1, l_2 \\leq N - len + 1 ) that satisfy the following:\n - l_1 + len \\leq l_2\n - S[l_1+i] = S[l_2+i] (i = 0, 1,..., len - 1)\nIf there is no such integer len, print 0.\n\n-----Constraints-----\n - 2 \\leq N \\leq 5 \\times 10^3\n - |S| = N\n - S consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n\n-----Output-----\nPrint the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping. If there is no such non-empty string, print 0 instead.\n\n-----Sample Input-----\n5\nababa\n\n-----Sample Output-----\n2\n\nThe strings satisfying the conditions are: a, b, ab, and ba. The maximum length among them is 2, which is the answer.\nNote that aba occurs twice in S as contiguous substrings, but there is no pair of integers l_1 and l_2 mentioned in the statement such that l_1 + len \\leq l_2.\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ababa') == 2\n\"\"\"\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ababa') == 2\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 5\") == \"3\""
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 5\") == \"3\"\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2') == '2'\nassert solution('8 5') == '3'\n\"\"\"\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n') == '2\\n'\nassert solution('8 5\\n') == '3\\n'"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == 2\n\"\"\""
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2') == '2'\nassert solution('8 5') == '3'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 5\") == \"3\"\nassert solution(\"4 2\") == \"2\""
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 5\") == \"3\"\n\nprint('Success')\n\n-----\ud480\uc774-----"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"2\"\n\nassert solution(\"8 5\") == \"3\"\n\n\"\"\"\n\nimport math\nfrom math import gcd\nfrom collections import defaultdict"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '0'\nassert solution('2\\n1') == '0'\nassert solution('4\\n2') == '1'\nassert solution('8\\n5') == '3'\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 1 2 2 1\\n1 2\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 1 2 2 1\\n1 2\") == \"YES\"\nassert solution(\"5 2\\n1 1 2 2 1\\n1 2 3\") == \"NO\"\nassert solution(\"3 3\\n1 2 2\\n2 2 2\") == \"NO\"\n\"\"\"\n\nimport unittest\n\nclass Tests(unittest.TestCase):\n    def test_ex1(self):\n        self.assertEqual(solution(\"5 2\\n1 1 2 2 1\\n1 2\"), \"YES\")\n\n    def test_ex2(self):\n        self.assertEqual(solution(\"5 2\\n1 1 2 2 1\\n1 2 3\"), \"NO\")\n\n    def test_ex3(self):\n        self."
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 1 2 2 1\\n1 2') == 'YES'\nprint(solution('5 2\\n1 1 2 2 1\\n1 2'))\n\"\"\"\nimport sys\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 1 2 2 1\\n1 2\") == \"YES\"\nassert solution(\"5 2\\n3 3 2 1\\n1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2 1 4 1\") == \"YES\"\nassert solution(\"5 2\\n2 1 4 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 2\n1 1 2 2 1\n1 2\"\"\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 2 2 1') == 'YES'\nassert solution('1 2') == 'NO'\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 1 2 2 1\\n1 2\") == 'YES'\n\nprint(solution(\"5 2\\n1 1 2 2 1\\n1 2\"))"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 2 1') == 'YES'\nassert solution('5 2 1 2 3 1') == 'YES'\nassert solution('7 3 1 2 4 1') == 'YES'\nassert solution('5 2 1 2 3 1') == 'NO'\nassert solution('7 3 1 3 4 1') == 'NO'\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1 1\") == \"YES\"\nassert solution(\"3 3 1 1\") == \"YES\"\nassert solution(\"3 1 3\") == \"NO\"\nassert solution(\"4 2 1 2\") == \"YES\"\nassert solution(\"1 1 2\") == \"NO\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n5\\n2 1\\n4 2\\n') == 'Mishka'\nassert solution('2\\n6 1\\n1 6\\n') == 'Friendship is magic!^^'\nassert solution('3\\n1 5\\n3 3\\n2 2\\n') == 'Chris'\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n2 1\\n4 2\\n\") == \"Mishka\"\nassert solution(\"2\\n6 1\\n1 6\\n\") == \"Friendship is magic!^^\"\nassert solution(\"3\\n1 5\\n3 3\\n2 2\\n\") == \"Chris\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"Mishka\"\nassert solution(\"1 6\") == \"Friendship is magic!\"\nassert solution(\"3 5\") == \"Mishka\"\nassert solution(\"2 2\") == \"Chris\"\nassert solution(\"6 1\") == \"Chris\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"Mishka\"\nassert solution(\"2 1\") == \"Friendship is magic!^^\"\nassert solution(\"3 3\") == \"Chris\"\nassert solution(\"1 5\") == \"Friendship is magic!^^\"\nassert solution(\"2 2\") == \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 1\\n4 2\") == \"Mishka\"\nassert solution(\"1 5\\n3 3\\n2 2\") == \"Friendship is magic!^^\"\nassert solution(\"3 1\\n1 6\\n2 5\") == \"Chris\"\n\nprint(\"All test cases passed.\")\n\n-----Test data-----\n\nTest 1\n3\n3 5\n2 1\n4 2\n\nTest 2\n2\n6 1\n1 6\n\nTest 3\n3\n1 5\n3 3\n2 2\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 1\\n4 2\") == 'Mishka'\nassert solution(\"2 6\\n1 6\") == 'Friendship is magic!'\nassert solution(\"3 5\\n3 3\\n2 2\") == 'Chris'\nassert solution(\"2 6\\n1 6\") == 'Friendship is magic!'"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 1\\n4 2\") == \"Mishka\"\nassert solution(\"6 1\\n1 6\") == \"Friendship is magic!\"\nassert solution(\"3 3\\n2 2\") == \"Chris\"\nassert solution(\"2 1\\n1 6\") == \"Friendship is magic!\"\nassert solution(\"2 2\") == \"Friendship is magic!\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n6 1\") == \"Friendship is magic!^^\"\nassert solution(\"3\\n1 5\") == \"Mishka\"\nassert solution(\"3\\n3 3\") == \"Chris\"\nassert solution(\"3\\n2 2\") == \"Chris\"\nassert solution(\"1\\n6 1\") == \"Chris\"\n\"\"\"\n\nn = int(input())\nl = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    l.append([x,y])\nx = 0\ny = 0\nm = 0\nc = 0\nfor i in range(n):\n    x = l[i][0]\n    y = l[i][1]\n    if x > y:\n        m += 1\n    elif y > x:\n        c += 1\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"Mishka\"\nassert solution(\"6 1\") == \"Friendship is magic!\"\nassert solution(\"2 2\") == \"Chris\"\n\"\"\"\n\nn = int(input())\nmishka, chris = 0, 0\n\nfor _ in range(n):\n    mishka, chris = input().split()\n    mishka, chris = int(mishka), int(chris)\n\n    if mishka > chris:\n        print(\"Mishka\")\n        break\n    elif mishka < chris:\n        print(\"Chris\")\n        break\n\nelse:\n    print(\"Friendship is magic!\")\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n3 5\\n2 1\\n4 2') == 'Mishka'\nassert solution('2\\n6 1\\n1 6') == 'Friendship is magic!^^'\nassert solution('3\\n1 5\\n3 3\\n2 2') == 'Chris'\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n\"\n    \"111\\n\"\n    \"1*1\\n\"\n    \"111\\n\") == \"YES\"\n\nassert solution(\"2 4\\n\"\n    \"*.*.\\n\"\n    \"1211\\n\") == \"NO\"\n\nassert solution(\"2 3\\n\"\n    \"*.*.\\n\"\n    \"11*1\\n\") == \"YES\"\n\nassert solution(\"2 3\\n\"\n    \"*.*.\\n\"\n    \"1111\\n\") == \"NO\"\n\nassert solution(\"3 3\\n\"\n    \"111\\n\"\n    \"1*1\\n\"\n    \"111\\n\") == \"YES\""
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n.*\\n1*1\\n111\") == \"YES\"\nassert solution(\"2 4\\n*.**\\n1211\") == \"NO\"\nassert solution(\"3 3\\n.*\\n1*1\\n111\") == \"YES\"\nassert solution(\"3 4\\n*.*\\n1211\") == \"NO\"\n\"\"\"\n\n\"\"\"\nSample Tests\n=======\nInputs:\n    Expected:\n        solution(\"3 3\\n.*\\n1*1\\n111\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n111\\n1*1\\n111\") == \"YES\"\nassert solution(\"2 4\\n*.*.\\n1211\") == \"NO\"\nassert solution(\"2 4\\n*.*.\\n11*1\") == \"NO\"\nassert solution(\"3 3\\n111\\n111\\n*.*\") == \"YES\"\nassert solution(\"1 1\\n1*1\") == \"YES\"\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n111\\n1*1\\n111\") == 'YES'\nassert solution(\"2 4\\n1211\\n*.*.\") == 'NO'\n\"\"\""
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n111\\n1*1\\n111\") == \"YES\"\nassert solution(\"2 4\\n*.*.\\n1211\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '3 3\\n'\n    '1*1\\n'\n    '111\\n'\n) == 'YES'\nassert solution(\n    '2 4\\n'\n    '*.*.\\n'\n    '1211\\n'\n) == 'NO'\nassert solution(\n    '3 3\\n'\n    '111\\n'\n    '1*1\\n'\n) == 'YES'\nassert solution(\n    '2 2\\n'\n    '*.*\\n'\n    '12\\n'\n) == 'YES'\nassert solution(\n    '2 2\\n'\n    '*.*\\n'\n    '12\\n'\n) == 'YES'\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n111\\n1*1\\n111\") == \"YES\"\nassert solution(\"2 4\\n*.*.\\n1211\") == \"NO\"\nassert solution(\"4 4\\n11111\\n11111\\n11111\\n11111\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n111\\n1*1\\n111\\n\") == \"YES\"\nassert solution(\"2 4\\n*.*.\\n1211\\n\") == \"NO\"\nassert solution(\"2 2\\n****\\n1112\\n\") == \"YES\"\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".*.\") == \"YES\"\nassert solution(\"*.**\") == \"YES\"\nassert solution(\"*.*.*\") == \"YES\"\nassert solution(\"*1*.*\") == \"YES\"\nassert solution(\"*1*1*\") == \"YES\"\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 3\n111\n1*1\n111\"\"\") == \"YES\"\nassert solution(\"\"\"3 3\n111\n1*1\n111\"\"\") == \"YES\"\nassert solution(\"\"\"2 4\n*.*.\n1211\"\"\") == \"NO\"\nassert solution(\"\"\"3 3\n111\n1*1\n111\"\"\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('68') == 3\n\"\"\"\n\nn = int(input())\n\ni = 1\nwhile n % i!= 0:\n    i *= 10\nprint(n // i)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"68\") == 3"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('68') == 3\nassert solution('11') == 1\nassert solution('0') == 0\nassert solution('97') == 9\nassert solution('50') == 5\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"1\"\nassert solution(\"122\") == \"2\"\nassert solution(\"123\") == \"1\"\nassert solution(\"1233\") == \"2\"\nassert solution(\"1234\") == \"1\"\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('68') == 3\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '68'\n) == '3'\n\"\"\""
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(68) == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('68') == '3'\nassert solution('30') == '5'\nassert solution('75') == '5'\nassert solution('55') == '5'\nassert solution('64') == '5'\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('68') == 3\n\"\"\"\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"68\") == \"3\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-o---o-\") == \"YES\"\nassert solution(\"-o---o\") == \"YES\"\nassert solution(\"-o-o--\") == \"YES\"\nassert solution(\"--oo-o-\") == \"YES\"\nassert solution(\"-o-oo-\") == \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"o-o-o\") == 'YES'\nassert solution(\"--o-o\") == 'YES'\nassert solution(\"o-o--\") == 'YES'\nassert solution(\"o-o-o-\") == 'YES'\nassert solution(\"o-o--o\") == 'YES'\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-o---o-\") == \"YES\"\nassert solution(\"-o---o-\") == \"YES\"\nassert solution(\"ooo\") == \"YES\"\nassert solution(\"-o---o\") == \"NO\"\nassert solution(\"o-o\") == \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-o-o--\") == \"YES\"\nassert solution(\"-o---\") == \"YES\"\nassert solution(\"ooo\") == \"YES\"\nassert solution(\"-o-o--o-\") == \"NO\"\nassert solution(\"--o--\") == \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'--o--o--') == 'YES'\nassert solution('-o-o--') == 'YES'\nassert solution('--o-o-') == 'YES'\nassert solution('-o--o--') == 'NO'\nassert solution('o-o-o--') == 'NO'\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-o-o--\") == \"YES\"\nassert solution(\"-o---\") == \"YES\"\nassert solution(\"ooo\") == \"YES\"\nassert solution(\"o-o-oo-o-\") == \"NO\"\nassert solution(\"o-o--oo\") == \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-o-o--') == 'YES'\nassert solution('-o---') == 'YES'\nassert solution('ooo') == 'YES'\n\n-----\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('-o-o--') == 'YES'\nassert solution('-o---') == 'YES'\nassert solution('ooo') == 'YES'\n\"\"\""
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-oo-o\") == \"YES\"\nassert solution(\"-o-oo-\") == \"NO\"\nassert solution(\"ooo\") == \"YES\"\nassert solution(\"o-o-oo-oo\") == \"NO\"\n\"\"\""
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"-o-o--\") == 'YES'\nassert solution(\"-o---\") == 'YES'\nassert solution(\"ooo\") == 'YES'\nassert solution(\"o-o-\") == 'NO'\nassert solution(\"--\") == 'NO'\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 6 2''') == 2\nassert solution('''3 10 3''') == 4\nassert solution('''3 6 1''') == 3\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 6 2''') == 2\n\nassert solution('''3 10 3''') == 4\n\nassert solution('''3 6 1''') == 3\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 2\") == \"2\"\nassert solution(\"3 10 3\") == \"4\"\nassert solution(\"3 6 1\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6 2') == 2\nassert solution('3 10 3') == 4\nassert solution('3 6 1') == 3\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6 2') == '2'\nassert solution('3 10 3') == '4'\nassert solution('3 6 1') == '3'\nassert solution('3 6 3') == '4'\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 3\") == \"4\"\nassert solution(\"4 6 2\") == \"2\"\nassert solution(\"3 6 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6 2\") == \"2\"\nassert solution(\"3 10 3\") == \"4\"\nassert solution(\"3 6 1\") == \"3\"\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6 2\") == \"2\"\nassert solution(\"3 10 3\") == \"4\"\nassert solution(\"3 6 1\") == \"3\"\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6 2\") == \"2\"\nassert solution(\"3 10 3\") == \"4\"\nassert solution(\"3 6 1\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6 2\") == \"2\"\nassert solution(\"3 10 3\") == \"4\"\nassert solution(\"3 6 1\") == \"3\"\nassert solution(\"3 6 4\") == \"2\"\nassert solution(\"5 7 2\") == \"3\""
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 10\\n2 -4 15 -3 4 8 3\") == '7'\n\"\"\"\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3 10\\n2 -4 15 -3 4 8 3') == '7'\n\"\"\""
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 3 10\\n2 -4 15 -3 4 8 3') == '7'\n\"\"\"\n\na, m, k = (int(i) for i in stdin.split())\narr = [int(i) for i in stdin.split()[1].split()]\n\nmax_ = 0\nsub_sum = 0\nfor i in range(len(arr)):\n    sub_sum += arr[i]\n    if sub_sum >= k * int(len(arr) / m):\n        max_ = max(max_, sub_sum - k * int(len(arr) / m))\n        sub_sum -= arr[i]\n\nprint(max_)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 1\") == '0'\nassert solution(\"5 2 9\") == '0'\nassert solution(\"7 3 10\") == '8'\nassert solution(\"7 5 10\") == '10'\nassert solution(\"5 5 10\") == '6'\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 1000\\n-13 -4 -9 -20 -11\") == 0\n\"\"\""
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 1000\\n-13 -4 -9 -20 -11') == '0'\n\"\"\"\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 10\\n2 -4 15 -3 4 8 3\") == \"7\"\n\"\"\"\n\n\nimport sys\nfrom collections import deque\nfrom typing import List"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\nprint(solution(input()))\n\n\"\"\"\n\nimport math\nfrom typing import List"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n7 3 10\n2 -4 15 -3 4 8 3\n''') == '7'\n\"\"\""
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 2\\n2 -4 15 -3 4 8 3') == '7'\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '1 1\\n0 0\\n1 0\\n0 1\\n0 0'\nassert solution('0 10\\n') == '0 1\\n0 10\\n0 0\\n0 9'\n\"\"\"\nimport sys"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 1\\n0 10\\n0 0\\n0 9') == '0 1\\n0 0\\n0 9'\nassert solution('0 1\\n0 10') == '0 1\\n0 10'\nassert solution('1 1\\n0 10') == '0 1\\n0 10'\nassert solution('1 1\\n10 1') == '1 1\\n0 10'\nassert solution('0 1\\n1 1') == '0 1\\n0 0'\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 10') == '0 9'\nassert solution('1 1') == '0 0'\n\"\"\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 10') == '0 1 0 0'\nassert solution('1 1') == '1 1'\nassert solution('2 2') == '1 1 1 1'\n\"\"\"\n\nfrom itertools import combinations\nfrom collections import defaultdict\nfrom math import sqrt"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0\") == \"0 0 0 0\"\nassert solution(\"1 1\") == \"0 0 1 1\"\nassert solution(\"1 1\") == \"0 0 1 1\"\nassert solution(\"1 1\") == \"0 0 1 1\"\nassert solution(\"1 1\") == \"0 0 1 1\""
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n0 0\\n1 0\\n0 1\\n0 10\") == \"1 1 0 0 1 0 0 10 0 9\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1 1 1 0 0 1 0 1 0 1\"\nassert solution(\"0 10\") == \"0 0 0 10 10 10 10 10 10 10\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '1 1 0 0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n0 0\\n1 0\\n0 1\\n0 1') == '1 1\\n0 0\\n1 0\\n0 1\\n0 1'\n\nimport sys\nassert solution(sys.stdin.read()) == sys.stdout.read()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n----\n\n\n\n\n\n\n\nclass Interval:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    def __eq__(self, other):\n        if not isinstance(other, Interval):\n            return NotImplemented\n        return self.a == other.a and self.b == other.b\n    def __lt__(self, other):\n        if not isinstance(other, Interval):\n            return NotImplemented\n        return self.a < other.a or (self.a == other.a and self.b < other.b)\n    def __le__(self, other):\n        if not isinstance(other, Interval):\n            return NotImplemented\n        return self.a < other.a or (self.a == other.a and self.b <= other.b)\n    def __gt__(self, other):\n        if not isinstance(other, Interval):\n            return NotImplemented\n        return not self.__le__(other)\n    def __ge__(self, other):\n        if not isinstance(other, Interval):\n            return NotImplemented\n        return not self.__lt__(other)\n    def __hash__(self):\n        return hash((self.a, self.b))\n    def __repr__(self):\n        return f'Interval({self.a}, {self.b})'\n    def __str__(self):\n        return f'({self.a}, {self.b})'\n    def __contains__(self, x):\n        if not isinstance(x, Interval):\n            return False\n        return self.a <= x.a and x.b <= self.b\n    def __or__(self, other):\n        if not isinstance(other, Interval):\n            return NotImplemented\n        return Interval(min(self.a, other.a), max(self.b, other.b))"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"003512\") == \"30021\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1234') == '01234'\nassert solution('12345') == '23451'\nassert solution('123456') == '34561'\nassert solution('1234567') == '3456123'\nassert solution('12345678') == '345612345'\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('003512') == '30021'\nassert solution('199966633300') == '3036366999'\nassert solution('1') == '1'\nassert solution('99') == '99'\nassert solution('9900') == '9900'\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"003512\") == \"30021\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"003512\") == \"30021\"\n\"\"\""
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"003512\") == \"30021\"\nassert solution(\"021\") == \"021\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"003512\") == \"30021\"\nprint(solution(\"003512\"))\n\nassert solution(\"199966633300\") == \"3036366999\"\nprint(solution(\"199966633300\"))\n\nassert solution(\"1111222233334444\") == \"111122223333440\"\nprint(solution(\"1111222233334444\"))\n\nassert solution(\"222233334444445555556666\") == \"222233334444445555556666\"\nprint(solution(\"222233334444445555556666\"))\n\nassert solution(\"111122223333444455556666\") == \"1111222233334444455556666\"\nprint(solution(\"111122223333444455556666\"))"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == ans\n\"\"\"\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('003512') == '30021'\n\"\"\""
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"003512\") == \"30021\"\n\"\"\""
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 1 3\\n2') == 'Incorrect'\nassert solution('3 1 1 3\\n2\\n2\\n2') == 'Incorrect'\nassert solution('2 1 1 3\\n2') == 'Correct'\nassert solution('2 1 1 3\\n2\\n2') == 'Correct'\nassert solution('2 1 1 3\\n2\\n2\\n2') == 'Incorrect'\n\n\"\"\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 1 3') == 'Correct'\nassert solution('3 1 1 3') == 'Incorrect'\nassert solution('2 1 1 3') == 'Incorrect'\nassert solution('2 1 1 3') == 'Incorrect'\nassert solution('2 1 1 2') == 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3') == 'Incorrect'\nassert solution('3 1 1 3') == 'Incorrect'\nassert solution('2 1 1 3') == 'Incorrect'\nassert solution('2 1 1 3') == 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 3\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Incorrect\"\nassert solution(\"2 1 1 3\") == \"Correct\"\nassert solution(\"2 1 1 3\") == \"Incorrect\"\nassert solution(\"2 1 1 3\") == \"Correct\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 2\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Incorrect\"\n\"\"\"\n\nn, m, min, max = [int(i) for i in input().split()]\nt = [int(i) for i in input().split()]"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3\") == \"Correct\"\nassert solution(\"2 1 1 3\") == \"Incorrect\"\nassert solution(\"2 1 1 3\") == \"Incorrect\"\nassert solution(\"2 1 1 3\") == \"Incorrect\"\nassert solution(\"2 1 1 3\") == \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3\") == \"Incorrect\"\nassert solution(\"3 1 1 3\") == \"Incorrect\"\nassert solution(\"2 1 1 2\") == \"Correct\"\nassert solution(\"3 1 1 2\") == \"Correct\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1 3\") == \"Incorrect\"\nassert solution(\"2 1 1 2\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Incorrect\"\nassert solution(\"3 1 1 2\") == \"Incorrect\"\nassert solution(\"3 1 1 3\") == \"Correct\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3\") == \"Incorrect\"\nassert solution(\"3 1 1 3\") == \"Incorrect\"\nassert solution(\"2 1 1 3\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Correct\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 3\") == \"Incorrect\"\nassert solution(\"3 1 1 3\") == \"Correct\"\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '5 6 7 8 9'\n\n'''"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"5 6 7 8 9\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"-5\") == \"0\"\nassert solution(\"-1\") == \"0\"\n\n\"\"\"\nimport math\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"5\"\nassert solution(\"5\") == \"0\"\nassert solution(\"100\") == \"2550\"\n\nprint(solution(\"1\"))\nprint(solution(\"5\"))\nprint(solution(\"100\"))\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '5 6 7 8 9'\nassert solution('0') == '0'\nassert solution('100') == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100'\nassert solution('99') == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100'\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"5\"\nassert solution(\"5\") == \"0\"\nassert solution(\"100\") == \"35\"\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"5\"\nassert solution(\"5\") == \"0\"\nassert solution(\"100\") == \"9\"\nassert solution(\"1000\") == \"40320\"\n\nprint(solution(\"5\"))\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"5\"\nassert solution(\"5\") == \"0\"\nassert solution(\"10\") == \"4\"\nassert solution(\"100\") == \"9\"\nassert solution(\"1000\") == \"18\"\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == '5 6 7 8 9 '\n\"\"\""
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n5') == '5 6 7 8 9\\n'"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1 2'\nassert solution('2 1') == '1 1'\nassert solution('4 5 3') == '3 3 3'\nassert solution('4 5 3\\n2 1\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3') == '3 3 3'\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3''') == '3 3 3'\nassert solution('''4 4 3\n1 2 2\n1 3 3\n1 4 4\n2 3 1\n2 4 1\n3 4 1''') == '2 2 1'\nassert solution('''4 4 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3''') == '2 2 1'\nassert solution('''4 4 3\n1 2 2\n1 3 3\n1 4 4\n2 3 1\n2 4 1\n3 4 1''') == '2 2 1'\nassert solution('''4 4 3\n1 2 2\n1 3 3\n1 4 4\n2 3 1\n2 4 1\n3 4 1\n3 1 3''') == '2 2 1'\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\\n2 1\\n1 2 3\\n1 2 2\") == \"2 2\"\n\nassert solution(\"4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\") == \"3 3 3\"\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 3 2\n2 1\n1 2 3\n1 2 2\n2 2 1\n''') == \"2 2\"\nassert solution('''\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n''') == \"3 3 3\"\nassert solution('''\n2 3 2\n2 1\n1 2 3\n1 2 2\n2 2 1\n''') == \"2 2\"\nassert solution('''\n3 3 3\n1 2\n1 3\n2 3\n2 1\n3 1\n''') == \"3 3 3\"\nassert solution('''\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n''') == \"3 3 3\"\n\n'''\n7 12 4\n1 2 3\n1 3 4\n3 1 1\n3 2 1\n1 4 4\n4 2 1\n4 3 2\n2 3 3\n1 5 5\n5 2 1\n5 4 2\n2 4 2\n3 4 1\n3 5 1\n4 5 1\n2 5 2\n3 5 3\n4 5 3\n\n1 4 4\n3 5 1\n4 5 3\n3 5 1\n4 5 1\n5 2 2\n3 5 3\n2 4 1\n2 3 2\n2 5 2\n3 1 1\n4 1 1\n3 2 1\n4 1 1\n'''"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 2\\n2 1\\n1 2 3\\n1 2 2\\n2 2 1\\n') == '2 2'\nassert solution('4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\\n') == '3 3 3'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\nInput\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n\nOutput\n3 3 3 "
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 2\\n2 1\\n1 2 3\\n1 2 2\\n2 2 1') == '2 2'\nassert solution('4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3') == '3 3 3'\n\n\"\"\"\n\nfrom typing import List\n\nclass Graph:\n    def __init__(self, n: int, edges: List[List[int]], graph: List[List[int]], cost: List[List[int]], distance: List[List[int]]):\n        self.n = n\n        self.edges = edges\n        self.graph = graph\n        self.cost = cost\n        self.distance = distance\n\n\n    def has_edge(self, x: int, y: int) -> bool:\n        for e in self.edges:\n            if e[0] == x and e[1] == y:\n                return True\n        return False\n\n    def has_self_edge(self, x: int) -> bool:\n        return self.has_edge(x, x)\n\n    def is_connected(self):\n        visited = [False] * self.n\n\n        def dfs(node: int, visited: List[bool]):\n            visited[node] = True\n\n            for i in range(len(self.graph)):\n                if self.graph[node][i]:\n                    if not visited[i]:\n                        dfs(i, visited)\n\n        for i in range(len(visited)):\n            if not visited[i]:\n                dfs(i, visited)\n                return visited\n\n        return visited\n\n    def get_distance(self, x: int, y: int) -> int:\n        return self.distance[x][y]\n\n    def get_weight(self, x: int, y: int) -> int:\n        return self.cost[x][y]\n\n    def get_shortest_distance(self, x: int, visited: List[bool]) -> int:\n        if self.has_self_edge(x):\n            return -1\n\n        if visited[x]:\n            return 0\n\n        visited[x] = True\n        min_distance = 0\n\n        for i in range(len(self.graph)):\n            if self.graph[x][i]:\n                if not visited[i]:\n                    distance = self.get_shortest_distance(i, visited)\n                    if distance == -1:\n                        continue\n                    min_distance = max(min_distance, distance + self.get_weight(x, i))\n\n        return min_distance\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3''') == '3 3 3'\nassert solution('''\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3''') == '3 3 3'\nassert solution('''\n6 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n2 5 1\n5 6 2\n1 4 6\n4 2 4\n4 5 2\n5 6 4\n6 5 1\n3 4 4\n''') == '4 2 4'\nassert solution('''\n5 3 2\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n''') == '3 3 3'\nassert solution('''\n4 3 2\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n''') == '3 3 3'\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 2\\n2 1\\n1 2 3\\n1 2 2\\n2 2 1') == '2 2\\n'\n\nassert solution('4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3') == '3 3 3\\n'\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 2\\n2 1\\n1 2 3\\n1 2 2\") == \"2 2\"\nassert solution(\"4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\") == \"3 3 3\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2\") == \"1\"\n\nassert solution(\"1\\n1\") == \"0\"\n\nassert solution(\"1\\n0\") == \"0\"\n\nassert solution(\"4\\n1\") == \"1\"\n\nassert solution(\"3\\n0\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2') == '1'\nassert solution('1\\n1') == '0'\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\n\"\"\"\n\nn = int(input())\nx = int(input())\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2') == '1'\nassert solution('1\\n1') == '0'\n\n\"\"\""
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('5\\n2') == 1\nassert solution('10\\n0') == 0\nassert solution('6\\n2') == 2\nassert solution('7\\n1') == 0\n\n\"\"\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\") == \"1\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n2\") == \"1\"\nassert solution(\"100\\n0\") == \"0\"\nassert solution(\"1\\n0\") == \"1\"\n\nprint('The solution is correct!')\n\n---\n\n\u041a\u0430\u043a \u043d\u0430\u0439\u0442\u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0435\u0441\u043b\u0438 \u0438\u0445 \u043d\u0430\u0437\u0432\u0430\u0442\u044c, \u0442\u043e \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430:\n\n4\n\n2\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430:\n\n2\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430:\n\n5\n\n3\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430:\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n\u041a\u0430\u043a \u043d\u0430\u0439\u0442\u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0435\u0441\u043b\u0438 \u0438\u0445 \u043d\u0430\u0437\u0432\u0430\u0442\u044c, \u0442\u043e \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430:\n\n4\n\n2\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430:\n\n1\n\n1\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430:\n\n5\n\n3\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430:\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"2\\n2\") == \"1\"\nassert solution(\"3\\n2\") == \"1\"\n\"\"\""
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2') == '1'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\\n') == \"YES\"\nassert solution('4\\n0 0 1 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\\n') == \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5') == 'YES'\nassert solution('0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3') == 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3') == 'YES'\n\nassert solution('4\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5') == 'NO'\n\"\"\"\n\nimport sys\n\nn = int(input())\nx = []\ny = []\nfor _ in range(n):\n    i = input()\n    x.append([int(s) for s in i.split()])\n    \nfor i in range(n):\n    x[i][0] = min(x[i])\n    x[i][2] = max(x[i])\n    y.append([int(s) for s in input().split()])\n    y[i][0] = min(y[i])\n    y[i][2] = max(y[i])"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n2 2 3 3''') == 'YES'\n\nassert solution('''4\n0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n\nOutput\nNO''') == 'NO'\n\nassert solution('''5\n0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n2 2 3 3''') == 'YES'\n\nassert solution('''5\n0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n2 2 3 3\n\nOutput\nYES''') == 'YES'\n\nassert solution('''5\n0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n2 2 3 3\n\nOutput\nNO''') == 'NO'"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3') == 'YES'\nassert solution('4\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5') == 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\") == \"YES\"\n\nassert solution(\"4\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\") == \"NO\"\n\nassert solution(\"3\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\") == \"NO\"\n\nassert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n3 0 0 5\") == \"YES\"\n\nassert solution(\"7\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n3 0 0 5\\n1 1 1 1\") == \"YES\""
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == 'YES'\nassert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == 'YES'\nassert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == 'NO'\nassert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == 'NO'\nassert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n2 2 3 3''') == 'YES'\n\nassert solution('''4\n0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5''') == 'NO'\n\"\"\""
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\\n') == 'YES'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 1\") == \"3\"\nassert solution(\"25 20\") == \"0\"\nassert solution(\"10 9\") == \"1\"\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3') == '1'\nassert solution('11 3') == '0'\nassert solution('9 8') == '1'\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 1\\n') == '3'\nassert solution('25 20\\n') == '0'\nassert solution('10 9\\n') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 1\") == \"3\"\nassert solution(\"25 20\") == \"0\"\nassert solution(\"10 9\") == \"1\"\n\"\"\"\n\nfrom math import floor, log10"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 1\") == 3\nassert solution(\"25 20\") == 0\nassert solution(\"10 9\") == 1\nassert solution(\"10 7\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 9') == 1\nassert solution('12 1') == 3\nassert solution('25 20') == 0"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 1\") == \"3\"\nassert solution(\"25 20\") == \"0\"\nassert solution(\"10 9\") == \"1\"\n\"\"\"\n\nn, s = map(int, input().split())\n\nanswer = 0\nfor i in range(n):\n    if sum(int(d) for d in str(i)) - i < s:\n        answer += 1\n\nprint(answer)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 1\") == 3\nassert solution(\"25 20\") == 0\nassert solution(\"10 9\") == 1\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 1\") == 3\nassert solution(\"25 20\") == 0\nassert solution(\"10 9\") == 1\n\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple, Dict\n\nDEBUG = False\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 2') == '1'\nassert solution('10 5') == '0'\nassert solution('100 1000') == '1'\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\") == \"YES\"\n\"\"\"\nfrom typing import List, Dict"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'YES'\nassert solution('0 0') == 'YES'\nassert solution('0 0\\n1 0\\n2 1\\n1 1\\n2 3') == 'YES'\nassert solution('0 0\\n1 0\\n2 1\\n1 1\\n2 3\\n1 -1\\n2 2') == 'NO'\n\n\"\"\""
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\") == 'YES'\nassert solution(\"5\\n0 0\\n0 1\\n1 1\\n2 3\") == 'NO'\n\n\"\"\""
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\") == \"YES\"\nassert solution(\"5\\n0 0\\n1 0\\n2 1\\n1 1\\n2 3\") == \"NO\"\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2') == \"YES\"\nassert solution('5\\n0 0\\n1 0\\n2 1\\n1 1\\n2 3') == \"NO\"\n\n\"\"\""
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\\n\") == \"YES\"\nassert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\\n\") == \"YES\"\nassert solution(\"5\\n0 0\\n1 0\\n2 1\\n1 1\\n2 3\\n\") == \"NO\"\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 0\\n1 1\\n3 2\\n2 1') == 'YES'\nassert solution('4\\n0 0\\n2 1\\n2 1') == 'NO'\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 2 1\") == 6\nassert solution(\"1 1 1 2\") == 31"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 2 1') == 6\n\"\"\"\nimport math"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 2 1') == '6'\nassert solution('1 1 1 2') == '31'\n\"\"\"\nimport math\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2 1\") == \"6\"\nassert solution(\"1 1 1 2\") == \"31\"\nassert solution(\"2 12 3 1\") == \"0\"\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 1\") == 6\n\"\"\""
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2 1\") == \"6\"\nassert solution(\"1 1 1 2\") == \"31\"\nassert solution(\"2 12 3 1\") == \"0\"\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 2 1') == '6'\nassert solution('1 1 1 2') == '31'\nassert solution('2 12 3 1') == '0'\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 2 1') == '6'\nassert solution('1 1 1 2') == '31'\nassert solution('2 12 3 1') == '0'\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 1\") == \"6\"\nassert solution(\"1 1 1 2\") == \"31\"\nassert solution(\"2 12 3 1\") == \"0\"\n\n\"\"\"\n\na, b, k, t = map(int, input().split())\nresult = 0\n\nfor i in range(t):\n    # \uba3c\uc800 \uacc4\uc0b0\ub41c \uc218\ub97c \uae30\uc5b5\ud558\uae30 \uc704\ud574 \ubc30\uc5f4 \uc0dd\uc131\n    memory = [0] * (2 * k + 1)\n    lexa = [0] * (2 * k + 1)\n    # \ub450 \uc218\ub97c \ub354\ud574\uc90c\n    for j in range(2 * k + 1):\n        memory[j] = a + j\n        lexa[j] = b + j\n    # \uacc4\uc0b0\ud558\uae30\n    for j in range(2 * k + 1):\n        memory[j] = min(memory[j], memory[j + k] + k)\n        lexa[j] = min(lexa[j], lexa[j + k] + k)\n    # \uacbd\uc6b0\uc758 \uc218\ub97c \uacc4\uc0b0\ud558\uae30\n    for j in range(2 * k + 1):\n        if memory[j] >= lexa[j]:\n            result += 1\n\nprint(result % 10000000007)"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1 2') == '6'\n\n\"\"\""
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 250 185 230\") == \"1\\n230\"\nassert solution(\"4 250 185 230\") == \"0\\n185 230\"\nassert solution(\"2 300 185 230\") == \"2\\n185 230\"\n\n\"\"\""
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 250 185 230\") == \"1\\n230\"\n\nassert solution(\"2 300 185 230\") == \"0\\n185 230\"\n\nassert solution(\"4 250 185 230\") == \"2\\n185 230\"\n\n\"\"\""
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\n\nfrom math import inf\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 300 185 230') == '0 185 230'\nassert solution('3 250 185 230') == '1 230'\nassert solution('4 250 185 230') == '2 185 230'\nassert solution('2 300 185 230') == '0 185 230'\nassert solution('3 250 185 230') == '1 230'\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == solution(stdin)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 250 185 230\") == \"0\"\nassert solution(\"2 300 185 230\") == \"2\"\nassert solution(\"3 250 185 230\") == \"1\"\nassert solution(\"2 300 185 230\") == \"2\""
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 250 185 230\\n0 185 250\") == \"1\\n230\"\nassert solution(\"4 250 185 230\\n0 20 185 250\") == \"0\\n185 230\"\nassert solution(\"2 300 185 230\\n0 300\") == \"2\\n185 230\""
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 250 185 230') == '1\\n230'\nassert solution('4 250 185 230') == '0\\n185 230'\nassert solution('2 300 185 230') == '2\\n185 230'\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 250 185 230\\n0 185 250\\n\") == '1\\n230'\nassert solution(\"4 250 185 230\\n0 20 185 250\\n\") == '0\\n185 230'\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10\") == \"3983.539484752\"\nassert solution(\"4 9\") == \"3876.2959098\"\nassert solution(\"2 5\") == \"18.2959098\"\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 100 30 40 10\") == \"942477.796077\"\n\"\"\"\n\n\nfrom typing import Tuple\n\nfrom tools import timing\n\nINPUT_FILE_NAME = 'input.txt'\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1\\n9 7\\n1 4\\n10 7\") == \"3983.539484752\""
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1\\n9 7\\n1 4\\n10 7') == '3983.539484752'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1\\n9 7\\n1 4\\n10 7\") == \"3983.539484752\"\nassert solution(\"5\\n1 2\\n3 4\\n5 6\\n7 8\") == \"55.77715270\"\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 1\\n9 7\") == \"942477.796077000\"\nassert solution(\"4\\n1 1\\n9 7\\n1 4\\n10 7\") == \"3983.539484752\"\n\"\"\"\nfrom math import inf\nfrom typing import List\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 1\\n9 7\") == \"942477.796077\"\nassert solution(\"4\\n1 1\\n9 7\\n1 4\\n10 7\") == \"3983.539484752\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip('\\n'))\n\ncake_list = []\n\nfor i in range(n):\n    cake_list.append(list(map(int, sys.stdin.readline().rstrip('\\n').split())))\n\ncake_list = sorted(cake_list, key=lambda x: x[1])\n\nvol = 0\n\nfor i in range(n):\n    vol += cake_list[i][1]\n    if cake_list[i][0] < vol:\n        vol -= cake_list[i][0]\n\nprint('%.6f' % vol)"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1\\n9 7\\n1 4\\n10 7') == '3983.539484752'\nassert solution('4\\n1 1\\n9 7\\n1 4\\n10 7') == '3983.539484752'\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1\\n9 7\\n1 4\\n10 7\") == '3983.539484752'\nassert solution(\"2\\n1 1\\n9 7\") == '942477.796077000'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 30\\n40 10\") == \"942477.796077\"\nassert solution(\"4\\n1 1\\n9 7\\n1 4\\n10 7\") == \"3983.539484752\"\n\n\"\"\"\n\n\nfrom math import ceil"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n3 1 2 2 4\") == 2\nassert solution(\"4 5\\n2 3 4 5\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n3 1 2 2 4\") == 2\n\"\"\""
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n3 1 2 2 4\") == '2'\n\"\"\""
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n2 3 4 5\") == 2\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n3 1 2 2 4\") == \"2\"\nassert solution(\"4 5\\n2 3 4 5\") == \"2\"\n\n\"\"\"\n\nfrom typing import List\n\nfrom tools import timing\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n2 3 4 5\") == 2\n\n\"\"\"\nimport math"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n3 1 2 2 4\") == 2\n\"\"\""
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n2 3 4 5') == '2'\nassert solution('5 5\\n2 3 4 5') == '0'\nassert solution('5 5\\n2 2 2 2 2') == '0'\nassert solution('5 5\\n2 3 2 3 3') == '3'\nassert solution('5 5\\n2 3 2 1 1') == '3'\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n2 3 4 5\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2 1') == '0'\nassert solution('3 1 2') == '1'\nassert solution('4 1 2 3') == '2'\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n-2 10 -1 4\") == \"6\"\nassert solution(\"8\\n5 2 5 3 -30 -30 6 9\") == \"10\"\nassert solution(\"3\\n-10 6 -15\") == \"0\"\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 -2 10 -1 4\") == \"6\"\nassert solution(\"8 5 2 5 3 -30 -30 6 9\") == \"10\"\nassert solution(\"3 -10 6 -15\") == \"0\""
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 -2 10 -1 4\") == 6\nassert solution(\"5 2 5 3 -30 -30 6 9\") == 10\nassert solution(\"-10 6 -15\") == 0\nassert solution(\"3 -30 6 -15\") == 0\nassert solution(\"-5 -10 -20 -15\") == 0\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 -2 10 -1 4\") == 6\nassert solution(\"5 2 5 3 -30 -30 6 9\") == 10\nassert solution(\"8 5 2 5 3 -30 -30 6 9\") == 10\nassert solution(\"3 -10 6 -15\") == 0\n\"\"\""
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 -2 10 -1 4\") == 6\nassert solution(\"5 2 5 3 -30 -30 6 9\") == 10\nassert solution(\"-10 6 -15\") == 0\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def max_score(self, score: List[int]) -> int:\n        \"\"\"\n        Given a non-empty array of integers, return the maximum score of the player after playing out the following game.\n        The player starts with a score of 0.\n\n        The player could choose any of the elements of the array to increment his score, but he can't choose the same element twice.\n        The player needs to choose the maximum number of elements to maximize his score.\n\n        Example 1:\n\n        Input: [2,2,2]\n        Output: 4\n\n        Explanation: Choosing all the elements gives the maximum score.\n        Example 2:\n\n        Input: [1,2,3]\n        Output: 4\n        Explanation: Choosing the first and the last element gives the maximum score.\n        Example 3:\n\n        Input: [1,2,3,1]\n        Output: 4\n        Explanation: Choosing the first four elements gives the maximum score.\n        \"\"\"\n        score = sorted(score)\n        max_score = score[-1] * len(score)\n        prev_elem = score[0]\n        for i in range(1, len(score)):\n            curr_elem = score[i]\n            if curr_elem > prev_elem:\n                max_score = max(max_score, curr_elem * (i + 1))\n            prev_elem = curr_elem\n        return max_score\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 -2 10 -1 4\") == \"6\"\nassert solution(\"8 5 2 5 3 -30 -30 6 9\") == \"10\"\nassert solution(\"3 -10 6 -15\") == \"0\"\nassert solution(\"5 2 5 3 -30 -30 6 9\") == \"10\""
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 -2 10 -1 4\") == 6\nassert solution(\"5 2 5 3 -30 -30 6 9\") == 10\nassert solution(\"-10 6 -15\") == 0\n\n\"\"\"\n\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split()))\nleft, right = 0, n - 1\nscore = float(\"inf\")\nwhile right >= left:\n    mid = (left + right) // 2\n    res = 0\n    for i in range(mid, right + 1):\n        res += a[i]\n    for i in range(left, mid):\n        res -= a[i]\n    if res < score:\n        score = res\n        left = mid + 1\n    elif res > score:\n        right = mid - 1\n    else:\n        break\nprint(score)"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 -2 10 -1 4') == 6\nassert solution('8 5 2 5 3 -30 -30 6 9') == 10\nassert solution('3 -10 6 -15') == 0"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5 -2 10 -1 4\"\"\") == \"6\"\nassert solution(\"\"\"8 5 2 5 3 -30 -30 6 9\"\"\") == \"10\"\nassert solution(\"\"\"3 -10 6 -15\"\"\") == \"0\"\nassert solution(\"\"\"1 -1 2 -3 -5\"\"\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 -2 10 -1 4\") == 6\nassert solution(\"5 2 5 3 -30 -30 6 9\") == 10\nassert solution(\"-10 6 -15\") == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\") == \"YES\"\nassert solution(\"2 2 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 2 3''') == 'YES'\nassert solution('''4 2 3''') == 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 2 3\") == \"NO\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 3') == 'NO'\nassert solution('2 2 3') == 'YES'\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3') == \"NO\"\nassert solution('2 2 3') == \"YES\"\nassert solution('4 2 1') == \"YES\"\nassert solution('3 2 1') == \"NO\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 2 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 2 3\") == \"NO\"\nassert solution(\"5 2 3\") == \"NO\"\nassert solution(\"4 4 5\") == \"NO\"\nassert solution(\"4 4 4\") == \"YES\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\") == \"NO\"\nassert solution(\"2 2 3\") == \"YES\"\nassert solution(\"3 1 3\") == \"YES\"\nassert solution(\"1 1 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3\") == \"NO\"\nassert solution(\"2 2 3\") == \"YES\"\n\"\"\"\nimport sys\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 3') == 'YES'\nassert solution('4 2 3') == 'NO'\nassert solution('1 1 1') == 'YES'\nassert solution('2 2 3') == 'NO'\nassert solution('4 2 3') == 'NO'\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abaca\") == 3\nassert solution(\"abcddcba\") == 4\n\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaca\") == 3\nassert solution(\"abcddcba\") == 4\nassert solution(\"bbbbbb\") == 0\n\nprint(\"All tests passed.\")\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaca') == 3\n\"\"\""
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcddcba') == '4', 'WA'\nassert solution('abaca') == '3', 'WA'\nassert solution('abcddcba') == '4', 'WA'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaca') == 3\nassert solution('abcddcba') == 4\nassert solution('aaaaaaaaaa') == 0\nassert solution('a') == 0\nassert solution('abcd') == 3\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaca\") == 3\nassert solution(\"abcddcba\") == 4\n\n\"\"\"\nimport copy\nimport math"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8\nabcddcba''') == 4\nassert solution('''5\nabaca''') == 3\nassert solution('''4\naaaa''') == 0\nassert solution('''3\nccc''') == 0\nassert solution('''4\nbba''') == 2\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abaca') == 3\n\nassert solution('abcddcba') == 4\n\nassert solution('bbbb') == 0\n\nassert solution('abcddcba') == 4\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba') == 1\nassert solution('abacaba') == 0\nassert solution('abcddcba') == 4\n\"\"\""
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 4 6 2\\n5\\n5 1 5 7 9\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\nprint(solution(input))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 4 6 2\\n5\\n5 1 5 7 9') == '3'\nassert solution('4\\n1 2 3 4\\n4\\n10 11 12 13') == '0'\nassert solution('5\\n1 1 1 1 1\\n3\\n1 2 3') == '2'"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n5 1 5 7 9\\n\") == \"3\"\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 4 6 2\\n5\\n5 1 5 7 9\") == 3\n\"\"\"\nimport sys"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4\n1 4 6 2\n5\n5 1 5 7 9\n\"\"\"\n) == '3'\n\n\"\"\"\n7\n2 3 1 5 6 7\n3\n2 5 1\n\nassert solution(\n\"\"\"\n4\n1 4 6 2\n5\n5 1 5 7 9\n\"\"\"\n) == '2'\n\nassert solution(\n\"\"\"\n1\n1\n1\n1\n\"\"\"\n) == '0'\n\nassert solution(\n\"\"\"\n4\n2 1 3 4\n3\n1 2 3\n\"\"\"\n) == '0'\n\nassert solution(\n\"\"\"\n5\n2 1 5 3 4\n4\n3 4 1 2\n\"\"\"\n) == '3'\n\n\"\"\"\n7\n1 1 1 1 1 1\n3\n1 2 3\n\"\"\"\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 4 6 2\\n5\\n5 1 5 7 9\") == 3\nassert solution(\"4\\n4\\n1 4 6 2\\n5\\n5 1 5 7 9\") == 2\nassert solution(\"5\\n4\\n1 4 6 2\\n5\\n5 1 5 7 9\") == 0"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n1 4 6 2\\n5\\n5 1 5 7 9\") == \"3\"\nassert solution(\"4\\n5\\n1 4 6 2\\n5\\n5 1 5 7 9\") == \"0\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 4 6 2\\n5\\n5 1 5 7 9\") == \"3\"\n\"\"\"\n\nn = int(input())\nboys = list(map(int, input().split()))\nm = int(input())\ngirls = list(map(int, input().split()))\n\nboys.sort()\ngirls.sort()\n\nres = 0\nb_i, g_i = 0, 0\nwhile b_i < n and g_i < m:\n    if abs(boys[b_i] - girls[g_i]) <= 1:\n        res += 1\n        b_i += 1\n        g_i += 1\n    elif boys[b_i] > girls[g_i]:\n        g_i += 1\n    else:\n        b_i += 1\n\nprint(res)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 4 6 2\\n5\\n5 1 5 7 9\") == 3\nassert solution(\"5\\n1 1 1 1 1\\n3\\n1 2 3\") == 2\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100\\\\n100 1\\\\n99 99\\\\n99 99\") == \"Team 1\"\nassert solution(\"3 3\\\\n2 2\\\\n1 1\\\\n2 2\") == \"Draw\"\n\n\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 100\\n100 1\\n99 99\\n99 99\") == 'Team 1'\nassert solution(\"1 1\\n2 2\\n3 3\\n2 2\") == 'Team 2'\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\") == 'Draw'\n\n\nimport sys\n\nprint(sys.argv[1])\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 100\\n100 1\\n99 99\\n99 99\") == \"Team 1\"\n\"\"\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 100\\\\n100 1\\\\n99 99\\\\n99 99\") == \"Team 1\"\nassert solution(\"3 3\\\\n2 2\\\\n1 1\\\\n2 2\") == \"Team 2\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 100\\n100 1\\n99 99\\n99 99\") == \"Team 1\"\nassert solution(\"1 1\\n2 2\\n3 3\\n2 2\") == \"Team 2\"\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\") == \"Draw\"\n\n\n\"\"\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 100\\n100 1\\n99 99\\n99 99\") == \"Team 1\"\nassert solution(\"1 1\\n2 2\\n3 3\\n2 2\") == \"Team 2\"\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\") == \"Draw\"\n\n\"\"\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 100\\\\n100 1\\\\n99 99\\\\n99 99\") == \"Team 1\"\nassert solution(\"1 1\\\\n2 2\\\\n3 3\\\\n2 2\") == \"Team 2\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 100\\\\n100 1\\\\n99 99\\\\n99 99') == 'Team 1'\nassert solution('3 3\\\\n2 2\\\\n1 1\\\\n2 2') == 'Team 2'\nassert solution('1 100\\\\n100 1\\\\n99 99\\\\n99 99') == 'Draw'"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n2 2\\n1 1\\n2 2\") == \"Team 1\"\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\") == \"Team 2\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n2 2\\n1 1\\n2 2\") == \"Team 1\"\nassert solution(\"1 100\\n100 1\\n99 99\\n99 99\") == \"Team 1\"\nassert solution(\"1 1\\n2 2\\n3 3\\n2 2\") == \"Draw\""
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 0 3\\n2 0 2\\n3 0 1\\n4 0 1\\n5 0 1\") == \"2.4\"\n\"\"\""
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\") == \"2.4\"\n\"\"\"\n\nimport sys\n\nN, K = [int(x) for x in sys.stdin.readline().strip().split()]\n\nx, y, c = [], [], []\nfor i in range(N):\n    x_i, y_i, c_i = [float(x) for x in sys.stdin.readline().strip().split()]\n    x.append(x_i)\n    y.append(y_i)\n    c.append(c_i)\n\nimport numpy as np\n\npoints = np.array([x, y]).T\npoints_dist = np.linalg.norm(points, axis=1)\npoints_dist_order = np.argsort(points_dist)\n\ntimes = np.array(c) * np.sqrt((points[:,0] - x[points_dist_order[K-1]])**2 + (points[:,1] - y[points_dist_order[K-1]])**2)\n\nprint(times[points_dist_order[K-1]])\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\") == \"2.4\"\n\"\"\""
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n-1 0 3\\n0 0 3\\n1 0 2\") == \"2.4\"\n\"\"\""
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3\n-1 0 3\n0 0 3\n1 0 2\n1 1 40''') == '2.4'\nprint('Passed')\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\") == '2.4'\n\"\"\"\n\nimport math\n\nn, k = map(int, input().split())\ninput_data = [tuple(map(int, row.split())) for row in input().split()]\n\ninput_data = sorted(input_data, key=lambda t: t[1])"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\\n\") == \"2.4\"\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == '1.65'\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\") == \"2.4\"\n\"\"\"\n\nimport math\n\nn, k = map(int, input().split())\narr = []\nfor i in range(n):\n    arr.append(list(map(int, input().split())))\n\nmini = 10 ** 9\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        x1, y1, c1 = arr[i]\n        x2, y2, c2 = arr[j]\n        dist = math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n        if k == 0:\n            mini = min(mini, dist)\n        elif dist <= mini:\n            mini = min(mini, dist * c1)"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"Bicarp\"\nassert solution(\"0523\") == \"Bicarp\"\nassert solution(\"2\") == \"Bicarp\"\nassert solution(\"??\") == \"Bicarp\"\nassert solution(\"00\") == \"Monocarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0523') == 'Bicarp'\nassert solution('??0??0?') == 'Bicarp'\nassert solution('???00??0??') == 'Bicarp'\nassert solution('00?00?0??0') == 'Monocarp'\nassert solution('???0??0??') == 'Bicarp'\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"?054??0?\") == \"Bicarp\"\nassert solution(\"0523\") == \"Bicarp\"\nassert solution(\"0523\") == \"Monocarp\"\nassert solution(\"0?55?0\") == \"Bicarp\"\nassert solution(\"0?55?0\") == \"Monocarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == \"Bicarp\"\nassert solution(test_input_2) == \"Monocarp\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('???00?') == 'Bicarp'\nassert solution('054??0?') == 'Bicarp'\nassert solution('???0') == 'Monocarp'\nassert solution('?0') == 'Monocarp'\nassert solution('??0') == 'Bicarp'\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5\n??0??\n''') == 'Bicarp'\nassert solution('''\n2\n??\n''') == 'Bicarp'\nassert solution('''\n8\n?054??0?\n''') == 'Bicarp'\nassert solution('''\n6\n???00?\n''') == 'Monocarp'\n\nassert solution('''\n4\n0523\n''') == 'Bicarp'\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"??4??0?1??2??0?\") == \"Bicarp\"\nassert solution(\"054??0?1??2??0?\") == \"Bicarp\"\nassert solution(\"8??4??0?1??2??0?\") == \"Bicarp\"\nassert solution(\"06???0?1???2??0?\") == \"Monocarp\"\nassert solution(\"0523??0?1??2\") == \"Bicarp\"\n\n-----Hint-----\n\n\"\"\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Bicarp\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0523\") == \"Bicarp\"\nassert solution(\"??00?\") == \"Bicarp\"\nassert solution(\"????0\") == \"Monocarp\"\nassert solution(\"0??0\") == \"Bicarp\"\nassert solution(\"0547\") == \"Bicarp\""
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0523\") == 'Bicarp'\nassert solution(\"??0??\") == 'Bicarp'\nassert solution(\"?054??0?0?0?0?0\") == 'Bicarp'\nassert solution(\"0?00?00?0?0?0\") == 'Monocarp'\n\n\"\"\"\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n6 4\\n9 5\\n\") == '1'\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == '1'\nassert solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\") == '3'\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == '1'\n\"\"\""
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n6 4\\n9 5\") == \"1\"\nassert solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\") == \"3\"\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == \"1\"\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List, Union, Tuple, Optional, Any\n\ninput_str = sys.stdin.read()\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 4\\n9 5\\n') == '1'\nassert solution('3 7\\n2 2\\n2 3\\n2 4') == '1'\nassert solution('5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1') == '3'\n\"\"\""
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 5\n3 3\n2 5\n5 6\n4 9\n6 1''') == '1'\nassert solution('''3 7\n2 2\n2 3\n2 4''') == '1'\nassert solution('''6 4\n5 6\n4 9\n6 1''') == '3'\nassert solution('''7 7\n3 3\n5 7\n4 9\n6 1\n5 5\n4 7\n7 4\n6 6\n7 7\n7 7\n7 7''') == '7'\nassert solution('''7 7\n7 7\n7 7\n7 7\n7 7\n7 7\n7 7\n7 7\n7 7''') == '7'"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n6 4\\n9 5\\n\") == \"1\"\nassert solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\\n\") == \"3\"\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\\n\") == \"1\"\nassert solution(\"4 6\\n5 5\\n2 5\\n4 9\\n6 1\\n\") == \"3\"\n\"\"\"\n\nn, t = [int(x) for x in input().split()]\n\ntimes = []\nfor i in range(n):\n    times.append([int(x) for x in input().split()])\n\nlst = [1] * n\nsorted_times = sorted(times, key = lambda x: x[0])\n\nfor i in range(n):\n    for j in range(i):\n        if sorted_times[i][0] > sorted_times[j][0] and sorted_times[i][1] > sorted_times[j][1]:\n            lst[i] += 1\n\nfor i in range(len(lst)):\n    if lst[i] == max(lst):\n        print(i + 1)\n        break\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\") == \"2\"\nassert solution(\"4 6\\n2 5\\n5 6\") == \"1\"\nassert solution(\"4 6\\n2 5\\n5 6\\n1 1\\n3 3\") == \"3\"\nassert solution(\"4 8\\n1 2\\n2 3\\n3 4\") == \"1\"\nassert solution(\"4 8\\n1 3\\n2 3\\n3 4\") == \"2\"\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 1\\n3 2\\n3 3\\n3 4\") == '1'\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == '1'\n\"\"\"\n\n\nfrom collections import Counter\nfrom random import choice\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n6 4\\n9 5\") == \"1\"\nassert solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\") == \"3\"\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 5\n3 3\n2 5\n5 6\n4 9\n6 1''') == '3'\nassert solution('''3 7\n2 2\n2 3\n2 4''') == '1'\nassert solution('''6 3\n2 2\n2 3\n2 4''') == '1'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n6 4\\n9 5\") == \"1\"\nassert solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\") == \"3\"\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == \"1\"\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(123, 3) == 101\n\"\"\"\n\nimport math"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\n\nassert solution(\"3 2\") == \"5\"\n\"\"\"\n\nm, k = map(int, input().split())\n\nprint(2**m - m - 1 + m - k + 1)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == '1'\nassert solution(\"3 2\") == '5'\n\"\"\"\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"5\"\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2') == '5'\nassert solution('5 1') == '10'\nassert solution('5 2') == '15'\nassert solution('5 3') == '20'\nassert solution('5 4') == '25'\n\"\"\"\n\nm, k = input().split()\nm, k = int(m), int(k)\n\nn = 0\ni = 1\nwhile n <= 10**18:\n    if bin(i).count('1') == k:\n        n += i\n    i += 1\n\nprint(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\n\nm, k = map(int, stdin.split())\n\nimport math\n\nres = 0\nwhile m > 0:\n    res += 1\n    m -= math.factorial(k)\n    k += 1\n\nprint(res)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '5'\n\"\"\"\nimport math\nm, k = input().split()\nm, k = int(m), int(k)"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"5\"\n\"\"\"\n\nm, k = map(int, input().split())\nprint(2**k + m - 2)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('2 1') == '3'\nassert solution('1 3') == ''\nassert solution('3 1') == '5'\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 3') == '5'\nassert solution('4 3') == '13'\nassert solution('1 1000000000') == '1'\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10.**.****.****.**.***.**.**.****.****.****.****.****.\") == \"yes\"\nassert solution(\"10.****.****.****.**.***.**.**.****.****.****.****.****.\") == \"no\"\nassert solution(\"**.**.**.**.**.**.**.**.**.**.****.****.****.****.****.\") == \"yes\"\nassert solution(\"****.****.****.**.***.**.**.****.****.****.****.****.****.\") == \"no\"\nassert solution(\"10.**.****.****.**.***.**.**.****.****.****.****.****.****.\") == \"yes\"\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('.*.*...*.*.\\\\n') == \"yes\"\nassert solution('.*.*...*.*.\\\\n') == \"no\""
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('.**.*..*.***.**.\\n') == 'yes'\nassert solution('.**.*...*.*.\\n') == 'no'\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".**.*..*.***.**.\\n\") == \"yes\"\nassert solution(\".**.*..*.***.**.\\n\") == \"yes\"\nassert solution(\".**.*..*.***.**.\\n\") == \"yes\"\nassert solution(\".**.*..*.***.**.\\n\") == \"yes\"\n\nassert solution(\".*.*...*.*.\\n\") == \"no\"\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('**.*..*.***.**.**') == 'yes'\nassert solution('***.**.**.**.**') == 'no'\nassert solution('*.*...*.*.**.*') == 'yes'\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".**.*..*.***.**.\\n\") == \"yes\"\nassert solution(\".*.*...*.*.\\n\") == \"no\"\n\n\"\"\"\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"16\\n.**.*..*.***.**.\\n\") == \"yes\"\nassert solution(\"11\\n.*.*...*.*.\\n\") == \"no\"\n\n-----Problem-----\n\nSample Input 1:\n\n16\n.**.*..*.***.**.\n\nSample Output 1:\n\nyes\n\nSample Input 2:\n\n11\n.*.*...*.*.\n\nSample Output 2:\n\nno\n\n\n\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"16\\n.*.*...*.*.\\n\") == \"yes\"\nassert solution(\"11\\n.*.*...*.*.\\n\") == \"no\"\n\n\"\"\"\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16.**.*..*.***.**.\\n.\") == \"yes\"\nassert solution(\"11.**.*...*.*.\\n.\") == \"no\"\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".*.*...\") == \"yes\"\nassert solution(\".*.*...*.*\") == \"no\"\nassert solution(\"*.*.*.*.*.*\") == \"yes\"\nassert solution(\".*.*..*.*.*\") == \"yes\"\nassert solution(\".*.*.*.*.*.*\") == \"yes\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1\\n\") == \"1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\\n\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n4 0 2\\n3 5 7\\n8 1 6') == '9'\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1') == '1'\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1') == '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 0 2\\n3 5 7\\n8 1 6') == '9'\n\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1') == '1'\n\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1') == '-1'\n\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1') == '1'\n\"\"\""
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n4 0 2\n3 5 7\n8 1 6''') == '9'\nassert solution('''4\n1 1 1 1\n1 1 0 1\n1 1 1 1\n1 1 1 1''') == '1'\nassert solution('''4\n1 1 1 1\n1 1 0 1\n1 1 2 1\n1 1 1 1''') == '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 2\") == \"9\"\nassert solution(\"3 5 7\") == \"9\"\nassert solution(\"8 1 6\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 0 1\") == \"1\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == test_result\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 0 2\\n3 5 7\\n8 1 6') == '9'\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1') == '1'\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1') == '-1'\nassert solution('4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1') == '1'\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 0 2\") == '9'\nassert solution(\"4\\n1 1 1 1\") == '1'\nassert solution(\"4\\n1 1 1 1\") == '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4 0 2\\n3 5 7\\n8 1 6\") == \"9\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\") == \"1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 2\") == \"9\"\nassert solution(\"3 5 7\") == \"9\"\nassert solution(\"8 1 6\") == \"1\"\nassert solution(\"4 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n6\\n1\\n1\\n1\\n1\") == \"3 7\"\nassert solution(\"1\\n10\\n5\\n\") == \"15 15\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n6\\n1\\n1\\n1\\n1\\n\") == \"3 7\"\nassert solution(\"1\\n10\\n5\\n\") == \"15 15\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\""
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n6\\n1\\n1\\n1\\n1\") == \"3 7\"\nassert solution(\"1\\n10\\n5\\n\") == \"15 15\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\n\n\"\"\"\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6\\n1\\n1\\n1\\n1\") == \"3 7\"\nassert solution(\"1\\n10\\n5\\n\") == \"15 15\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\nassert solution(\"3\\n7\\n1\\n6\\n5\") == \"7 13\"\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6\\n1\\n1\\n1\\n1\") == \"3 7\"\nassert solution(\"1\\n10\\n5\\n\") == \"15 15\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n6\\n1\\n1\\n1\\n1\\n') == '3 7'\nassert solution('1\\n10\\n5\\n') == '15 15'\nassert solution('3\\n7\\n1\\n6\\n5\\n') == '6 12'\nassert solution('3\\n7\\n1\\n6\\n5\\n') == '6 12'\n\nimport sys\n\n_, *stdin = sys.stdin.readlines()\n\nn = int(stdin[0])\nm = int(stdin[1])\n\nb = []\n\nfor i in range(n):\n    b.append(int(stdin[i + 2]))\n\nl, r = (1, max(b))\n\nwhile l < r:\n    k = (l + r) // 2\n    sum_benches = 0\n    for i in range(n):\n        if b[i] >= k:\n            sum_benches += b[i] // k\n        else:\n            sum_benches += 1\n\n    if sum_benches >= m + 1:\n        l = k + 1\n    else:\n        r = k\n\nprint(l, r)\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6\\n1\\n1\\n1\\n1\") == \"3 7\"\nassert solution(\"1\\n10\\n5\\n\") == \"15 15\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\""
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6\\n1\\n1\\n1\\n1\") == \"3 7\"\nassert solution(\"1\\n10\\n5\\n\") == \"15 15\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4\\n6\\n1\\n1\\n1\\n1\"\n) == \"3 7\"\nassert solution(\n    \"1\\n10\\n5\\n\"\n) == \"15 15\"\nassert solution(\n    \"3\\n7\\n1\\n6\\n5\\n\"\n) == \"6 12\"\nassert solution(\n    \"3\\n7\\n1\\n6\\n5\\n\"\n) == \"7 13\"\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6 1 1 1\") == \"3 7\"\nassert solution(\"1 10 5\") == \"15 15\"\nassert solution(\"3 7 1 6 5\") == \"6 12\"\nassert solution(\"3 7\") == \"7 13\"\nassert solution(\"3 7 1 6 5\") == \"6 12\"\n\n-----\n7. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv2 = [1, 2, 3, 4]\nv3 = [1, 8, 3, 5]\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 v1, v2, v3.\n\n-----\n8. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv2 = [1, 2, 3, 4]\nv3 = [1, 8, 3, 5]\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u0438 v1, v2, v3 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043e\u0442 10 \u0434\u043e 20.\n\n-----\n9. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv2 = [1, 2, 3, 4]\nv3 = [1, 8, 3, 5]\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u0438 v1, v2, v3 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043e\u0442 0 \u0434\u043e 20 \u0441 \u0448\u0430\u0433\u043e\u043c 2.\n\n-----\n10. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv2 = [1, 2, 3, 4]\nv3 = [1, 8, 3, 5]\n\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 v1, v2, v3.\n\n-----\n11. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv2 = [1, 2, 3, 4]\nv3 = [1, 8, 3, 5]\n\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 v1, v2, v3.\n\n-----\n12. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv2 = [1, 2, 3, 4]\nv3 = [1, 8, 3, 5]\n\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 v1, v2, v3.\n\n-----\n13. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv2 = [1, 2, 3, 4]\nv3 = [1, 8, 3, 5]\n\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 v1, v2, v3.\n\n-----\n14. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv2 = [1, 2, 3, 4]\nv3 = [1, 8, 3, 5]\n\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 v1, v2, v3.\n\n-----\n15. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv2 = [1, 2, 3, 4]\nv3 = [1, 8, 3, 5]\n\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 v1, v2, v3.\n\n-----\n16. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv2 = [1, 2, 3, 4]\nv3 = [1, 8, 3, 5]\n\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 v1, v2, v3.\n\n-----\n17. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv2 = [1, 2, 3, 4]\nv3 = [1, 8, 3, 5]\n\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 v1, v2, v3.\n\n-----\n18. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv2 = [1, 2, 3, 4]\nv3 = [1, 8, 3, 5]\n\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 v1, v2, v3.\n\n-----\n19. \u0414\u0430\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438:\nv1 = [9, 8, 7, 6]\nv"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3') == '128'\nassert solution('4 6') == '9984'\n\"\"\""
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 1 3\\n2 2 3\\n') == '128'\nassert solution('4 4\\n1 1 4\\n2 2 4\\n3 3 4\\n') == '16'\nassert solution('3 3\\n1 1 3\\n2 2 1\\n') == '128'\nassert solution('3 3\\n1 2 3\\n1 2 3\\n') == '128'\nassert solution('3 3\\n1 1 3\\n2 2 3\\n') == '128'\n\"\"\"\nimport sys\nfrom typing import List, Tuple\n\ntotal_people = 0\ntotal_seats = 0\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3') == 128\nassert solution('2 2') == 1\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3 3') == '128'\n\"\"\"\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == '128'\n\"\"\"\n\nimport math\n\nclass Seat:\n    def __init__(self, id):\n        self.id = id\n\n    def __eq__(self, other):\n        return self.id == other.id\n\n    def __hash__(self):\n        return self.id"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n') == '63'\nassert solution('2\\n2\\n') == '60'\nassert solution('3\\n2\\n') == '108'\nassert solution('3\\n3\\n') == '252'\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3\n''') == '128'\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n') == '128'\n\n\"\"\""
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"128\"\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"8\"\nassert solution(\"3 3\") == \"128\"\n\"\"\""
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4') == '1 2'\nassert solution('3 4\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4') == '2 3'\nassert solution('4 3\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4') == '1 2'\nassert solution('1 5\\n9 9 8 7 6 5 4 3 2 1\\n3 4 1 2 3 4\\n1 4 5 6 7 8\\n4 4 1 3 5 7\\n1 4 2 4 6 8\\n5 4 1 9 2 8\\n') == '2 4'"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1 2'\nassert solution('1 2\\n3 4') == '1 3'\nassert solution('1 2\\n3 4\\n5 6\\n7 8') == '1 4'\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4\") == \"1 2\"\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n3 4\\n1 4\\n2 3\\n4 1\\n3 2\\n1 4\\n5 4\\n1 2\\n2 3\\n3 4\\n1 4\\n2 3\\n4 1\\n3 2\\n1 4\\n5 4\\n') == '2 3'\nassert solution('5 4\\n9 9 8 7 6 5 4 3 2 1 1\\n3 4 1 2 3 4\\n1 4 5 6 7 8\\n4 4 1 3 5 7\\n1 4 2 4 6 8\\n5 4 1 9 2 8\\n') == '1 2'\n\"\"\"\n\nimport sys\n\nn, m = list(map(int, sys.stdin.readline().split()))\n\npizza_num = [0] * 10\n\npizza_ingredients = {}\n\nfor i in range(n):\n    f, *b = list(map(int, sys.stdin.readline().split()))\n    pizza_num[f] += 1\n    for ingredient in b:\n        if ingredient in pizza_ingredients:\n            pizza_ingredients[ingredient] += 1\n        else:\n            pizza_ingredients[ingredient] = 1\n\nfor _ in range(m):\n    c, r = list(map(int, sys.stdin.readline().split()))\n    sorted_pizza = sorted(pizza_ingredients.items(), key=lambda x: x[1])\n    pizza_ingredients = {}\n    if len(sorted_pizza) >= 2:\n        for i in range(r):\n            if sorted_pizza[0][0] == sorted_pizza[1][0]:\n                continue\n            pizza_num[sorted_pizza[0][0]] -= 1\n            pizza_num[sorted_pizza[1][0]] -= 1\n            sorted_pizza = sorted_pizza[1:]\n    if n!= pizza_num.count(0):\n        print(pizza_num.index(max(pizza_num)), pizza_num.index(max(pizza_num)) + 1)\n    else:\n        print(0, 0)\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n2 6 7\\n4 2 3 9 5\\n3 2 3 9\\n100 1 7\\n400 3 3 2 5\\n100 2 9 2\\n500 3 2 9 5\") == \"2 3\"\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n2 6 7\\n4 2 3 9 5\\n3 2 3 9') == '2 3'\nassert solution('4 3\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4') == '1 2'\n\"\"\"\n\nn, m = map(int, input().split())\n\ningredients = [[0] * 10 for _ in range(n)]\npizza_ingredients = [[0] * 10 for _ in range(m)]\n\nfor i in range(n):\n    f, *b = map(int, input().split())\n    for f_i in range(f):\n        ingredients[i][b[f_i]] += 1\n\nfor j in range(m):\n    price, r, *a = map(int, input().split())\n    for r_j in range(r):\n        pizza_ingredients[j][a[r_j]] += 1\n\nans = [0, 0]\n\nfor i1, (i, j1) in enumerate(zip(ingredients, pizza_ingredients)):\n    for i2, (j, k) in enumerate(zip(i, j1)):\n        if j and k:\n            ans[0] = max(ans[0], i1 + i2)\n            ans[1] = min(ans[1], i1 + i2)\n\nprint(*ans)\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3 4\n2 6 7\n4 2 3 9 5\n3 2 3 9\n100 1 7\n400 3 3 2 5\n100 2 9 2\n500 3 2 9 5\n''') == '2 3'\n\nassert solution('''\n4 3\n1 1\n1 2\n1 3\n1 4\n10 4 1 2 3 4\n20 4 1 2 3 4\n30 4 1 2 3 4\n''') == '1 2'\n\nassert solution('''\n1 5\n9 9 8 7 6 5 4 3 2 1\n3 4 1 2 3 4\n1 4 5 6 7 8\n4 4 1 3 5 7\n1 4 2 4 6 8\n5 4 1 9 2 8\n''') == '2 4'\n\nassert solution('''\n1 5\n1 2\n1 3\n1 4\n10 4 1 2 3 4\n20 4 1 2 3 4\n30 4 1 2 3 4\n''') == '1 2'\n\nassert solution('''\n2 2\n1 1\n1 2\n1 3\n1 4\n10 4 1 2 3 4\n20 4 1 2 3 4\n30 4 1 2 3 4\n''') == '1 1'"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n2 6 7\\n4 2 3 9 5\\n3 2 3 9') == '2 3'\nassert solution('1 5\\n9 9 8 7 6 5 4 3 2 1\\n3 4 1 2 3 4\\n1 4 5 6 7 8\\n4 4 1 3 5 7\\n1 4 2 4 6 8\\n5 4 1 9 2 8') == '2 4'\n\n\"\"\"\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4') == '1 2'\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 15\") == \"69 96\"\n\nassert solution(\"3 0\") == \"-1 -1\"\nassert solution(\"3 1\") == \"12 21\"\nassert solution(\"1 1\") == \"0 9\"\n\"\"\""
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 15\") == \"69 96\"\nassert solution(\"3 0\") == \"-1 -1\""
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1 1\"\nassert solution(\"2 3\") == \"2 2\"\nassert solution(\"3 4\") == \"3 3\"\n\"\"\"\n\nm, s = map(int, input().split())\ndigits = 0\nmin_ = max_ = 0\n\nwhile digits < m:\n    min_ += s\n    if min_ < 10:\n        digits += 1\n    else:\n        min_ = min_ - 9\n        digits += 1\n\ndigits = 0\nwhile digits < m:\n    max_ += s\n    if max_ < 10:\n        digits += 1\n    else:\n        max_ = max_ - 9\n        digits += 1\n\nprint(str(min_), str(max_))\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 15') == '69 96'\nassert solution('3 0') == '-1 -1'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 15') == '69 96'\nassert solution('3 0') == '-1 -1'\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 15\") == \"69 96\"\nassert solution(\"3 0\") == \"-1 -1\"\n\"\"\"\n\nfrom collections import deque\n\nm, s = map(int, input().split())\n\nqueue = deque([(m, s)])\nqueue_len = len(queue)\n\nvisited = set()\n\nwhile queue:\n    rem, s = queue.popleft()\n    if rem == 1:\n        if s == 0:\n            print(s, s)\n        else:\n            print(s, s - 1)\n        break\n    for i in range(10):\n        rem2 = rem - 1\n        s2 = s + i\n        if rem2 >= 0 and s2 <= 9999:\n            if (rem2, s2) not in visited:\n                visited.add((rem2, s2))\n                queue.append((rem2, s2))\n        rem3 = rem + 1\n        s3 = s + i * 10\n        if rem3 <= 100 and s3 <= 9999:\n            if (rem3, s3) not in visited:\n                visited.add((rem3, s3))\n                queue.append((rem3, s3))"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 15''') == '69 96'\nassert solution('''3 0''') == '-1 -1'\n\"\"\"\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0\") == \"-1 -1\"\n\"\"\""
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 15') == '69 96'\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 15\") == \"69 96\"\n\"\"\"\n\nfrom tools import timing\n\nimport numpy as np\n\n@timing\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n2 3 4\\n2 3 4\\n1 2 3\\n2 3 4\") == \"22\"\nassert solution(\"10 50 2\\n1 2 3\\n2 3 4\\n2 3 4\\n1 2 3\") == \"2750685\"\nassert solution(\"101 154 2\\n1 2 3\\n2 3 4\\n2 3 4\\n1 2 3\") == \"2189\"\n\n\"\"\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 50 2') == '1230'\nassert solution('1 2345 10') == '2750685'\nassert solution('101 154 2') == '2189'\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 50 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\""
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 50 2') == 1230\nassert solution('1 2345 10') == 2750685\nassert solution('101 154 2') == 2189\nassert solution('100 100 1') == 0\n\"\"\""
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 50 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 50 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\n\"\"\"\n\nl, r, k = input().split()\nl, r, k = int(l), int(r), int(k)\n\nn = r - l + 1\nsum = 0\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 50 2') == '1230'\nassert solution('1 2345 10') == '2750685'\nassert solution('101 154 2') == '2189'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n\nimport numpy\nfrom ast import literal_eval\nfrom typing import List\nfrom unittest.mock import patch\n\nimport pytest\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 50 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 50 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 50 2') == '1230'\nassert solution('1 2345 10') == '2750685'\nassert solution('101 154 2') == '2189'\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 10\") == \"YES\"\nassert solution(\"6 2 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"YES\"\nassert solution(\"1 2 2\") == \"NO\"\nassert solution(\"6 5 3\") == \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 10\\n7 2 7 7 4 2\") == \"YES\"\nassert solution(\"6 2 3\\n4 5 3 13 4 10\") == \"YES\"\nassert solution(\"3 2 5\\n10 16 22\") == \"NO\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 10\") == \"YES\"\nassert solution(\"6 2 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 5\\n10 16 22') == 'NO'\nassert solution('6 3 10\\n7 2 7 7 4 2') == 'YES'\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 10\\n7 2 7 7 4 2\") == \"YES\"\nassert solution(\"6 2 3\\n4 5 3 13 4 10\") == \"YES\"\nassert solution(\"3 2 5\\n10 16 22\") == \"NO\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 10\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"3 2 5\") == \"YES\"\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 10\") == \"YES\"\nassert solution(\"6 2 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"YES\"\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 10\\n7 2 7 7 4 2\") == \"YES\"\nassert solution(\"6 2 3\\n4 5 3 13 4 10\") == \"YES\"\nassert solution(\"3 2 5\\n10 16 22\") == \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 10\\n7 2 7 7 4 2\") == \"YES\"\nassert solution(\"6 2 3\\n4 5 3 13 4 10\") == \"YES\"\nassert solution(\"3 2 5\\n10 16 22\") == \"NO\"\n\"\"\"\n\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 10\\n7 2 7 7 4 2\") == \"YES\"\nassert solution(\"6 2 3\\n4 5 3 13 4 10\") == \"YES\"\nassert solution(\"3 2 5\\n10 16 22\") == \"NO\"\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RBYGRYYBGR\") == \"0 0 0 0\"\nassert solution(\"RBBRGG\") == \"0 0 1 1\"\nassert solution(\"BBRYYY\") == \"0 1 1 0\"\nassert solution(\"RGGB\") == \"0 1 0 1\"\nassert solution(\"BGBR\") == \"1 0 1 0\""
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RYBGRYBGR\") == (0, 0, 0, 0)\nassert solution(\"BGRYBGRYBGR\") == (0, 0, 0, 0)\nassert solution(\"RRYBGRYBGR\") == (0, 1, 0, 1)\nassert solution(\"RRYBGRYB\") == (0, 1, 0, 0)\nassert solution(\"RRYBGRYB!\") == (0, 1, 0, 0)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RRYBGBB\") == \"0 0 0 0\"\nassert solution(\"RRYB!GBB\") == \"0 1 0 0\"\nassert solution(\"RRYBGBBGB\") == \"0 0 0 1\"\nassert solution(\"RYGBBGBRYB\") == \"0 1 1 0\"\nassert solution(\"BBRYRRYB\") == \"1 0 0 0\"\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RBYRGBG\") == \"0 1 0 0\"\nassert solution(\"RGG!!B\") == \"0 0 0 1\"\nassert solution(\"RGG!!B\") == \"0 0 0 1\"\nassert solution(\"RGRYB\") == \"0 1 0 0\"\nassert solution(\"RGRYB\") == \"0 1 0 0\"\n\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\nimport string"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RYBGRYBGR') == '0 0 0 0'\nassert solution('!RGYB') == '0 1 0 0'\nassert solution('!!!!YGRB') == '1 1 1 1'\nassert solution('!GB!RG!Y!') == '2 1 1 0'"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RYBGRYBGR\") == \"0 0 0 0\"\nassert solution(\"!RGYB\") == \"0 1 0 0\"\nassert solution(\"!!!!YGRB\") == \"1 1 1 1\"\nassert solution(\"!GB!RG!Y!\") == \"2 1 1 0\"\n\"\"\"\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RYBGRYBGR\") == (0, 0, 0, 0)\nassert solution(\"!RGYB\") == (0, 1, 0, 0)\nassert solution(\"!!!!YGRB\") == (1, 1, 1, 1)\nassert solution(\"!GB!RG!Y!\") == (2, 1, 1, 0)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RYBGRYBGR') == '0 0 0 0'\nassert solution('!RGYB') == '0 1 0 0'\nassert solution('!!!!!YGRB') == '1 1 1 1'\nassert solution('!!GB!!RG!!Y!') == '2 1 1 0'\nassert solution('RRYBGRRYB') == '0 0 0 0'\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RYBGRYBGR') == '0 0 0 0'\nassert solution('!RGYB') == '0 1 0 0'\nassert solution('!!!!!YGRB') == '1 1 1 1'\nassert solution('!GB!RG!Y!') == '2 1 1 0'"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RYBGRYBGR') == '0 0 0 0'\nassert solution('BGRYB') == '0 1 0 0'\nassert solution('BGYBGYB') == '1 1 1 1'\n\"\"\"\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\") == \"1.5000000000\"\n\"\"\"\n\n\"\"\"\n-----Explanation-----\n\nAoki can only choose one of the two paths in Room 1, and in Room 2, the probability of taking path 2 is 1/2. Therefore, the expected number of passages Takahashi takes is E = 2.5.\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4\") == '1.5000000000'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4\\n\") == \"1.5\"\n\"\"\"\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4\\n') == '1.5'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 6\\n\"\n    \"1 4\\n\"\n    \"2 3\\n\"\n    \"1 3\\n\"\n    \"1 2\\n\"\n    \"3 4\\n\"\n    \"2 4\"\n) == \"1.5000000000\"\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\") == '1.5'\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nN, M = map(int, sys.stdin.readline().split())\n\nconnections = defaultdict(list)\n\nfor _ in range(M):\n    s, t = map(int, sys.stdin.readline().split())\n    connections[s].append(t)\n    connections[t].append(s)"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4\") == '1.5'\n\"\"\"\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5 2\\n1 3\\n2 4') == '1.5'\n'''\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 6\n1 4\n2 3\n1 3\n1 2\n3 4\n2 4''') == '1.5000000000'\n\"\"\"\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4\") == \"1.5000000000\"\n\"\"\"\n\n\n\n\"\"\"\nhttps://atcoder.jp/contests/abc021/tasks/abc021_4\nAoki, Baki, Takahashi are playing a game.\n\nIn this game, Aoki, Baki, and Takahashi play a game of Doro.\n\nDoro is a game in which players play by piles of stones.\n\nIn this game, there are n piles. Initially, each of the piles has a number of stones piles[0], piles[1],..., piles[n-1] in piles.\n\nThe players move in alternating turns. During each turn, a player can remove one or more stones from a pile.\n\nThe player who removes the last stone loses.\n\nDuring each move, a player can choose from one of the n piles, including the last one, in which to remove a stone.\n\nThe game ends when a player removes the last stone.\n\nThe game continues until a player cannot make another move.\n\nThe game ends, and the winner is the player who removed the last stone. If the game ends with a draw, then the winner is the player who removed the last stone during his/her/its last turn.\n\nFor each game, Aoki, Baki, and Takahashi play optimally (i.e. Aoki chooses the move that would result in the smallest possible number of stones removed from the game).\n\nAoki, Baki, and Takahashi want to play the game.\n\nAoki wants to play the game with the smallest number of stones, and Baki wants to play the game with the smallest number of stones, but they want to be sure that Takahashi also plays the game with the smallest number of stones.\n\nIn this problem, we define the following function f_l(n, m):\n\nn is the number of piles, and m is the number of stones Aoki can remove in his/her/its last turn.\nf_l(n, m) is the minimum number of stones Takahashi needs to make Aoki play optimally.\n\nYou can verify that f_l(n, m) = n + m - f_l(n-1, m) for all 1 \\leq n \\leq 30 and 1 \\leq m \\leq m \\leq n - 1.\n\nYou are given that f_l(7, 5) = 7 + 5 - f_l(6, 5) = 7 + 5 - 7 + 5 = 14.\n\nFind f_l(30, 10). Give your answer with nine digits after the decimal point (you may assume that the answer will not have any fractional part).\n\n-----Constraints-----\n\n1 \\leq n \\leq 30\n1 \\leq m \\leq n - 1\n\n-----Input-----\n28\n\n-----Output-----\n13.285714286\n\nIf Aoki chooses to play the game with the number of stones equal to 28, then it can remove one or more stones from each of the first seven piles in the following order: [1, 4, 4, 4, 4, 4, 4]. Takahashi can play optimally with the number of stones equal to 13.\n\nThe minimum number of stones for Takahashi to play optimally with the number of stones equal to 13 is 28, and Aoki wins the game with the number of stones equal to 28."
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '0'\nassert solution('113') == '110'\nassert solution('1000000000') == '1000000000'\nassert solution('5432359') == '5432360'\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\n\"\"\"\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '0'\nassert solution('113') == '110'\nassert solution('1000000000') == '1000000000'\nassert solution('5432359') == '5432360'\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\n\n\"\"\"\n\nn = input()\nprint(n[:-1] if n[:-1] == \"0\" else n)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4722\") == \"4720\"\nassert solution(\"5432359\") == \"5432360\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5\") == \"0\"\nassert solution(\"0\") == \"0\""
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\"\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\"\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\"\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\""
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\"\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"helloworld\") == 'h e'\nassert solution(\"hastalavistababy\") == '0'\nassert solution(\"merrychristmas\") == '-1'\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('helloworld') == 'h e l l o w l d'\nassert solution('hastalavistababy') == 'h a s t a l a v i s t a b a'\nassert solution('merrychristmas') == 'c h i s t o m r y c h i s t a b a'\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"helloworld\") == \"h e l l o w\"\nassert solution(\"hastalavistababy\") == \"h a s t a l a v i s t a b a\"\nassert solution(\"merrychristmas\") == \"m e r r y c h i s t a m e r r y\"\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"helloworld\") == \"h e l l w o r l d\"\nassert solution(\"hastalavistababy\") == \"h a s t a l a v i s t a b a y\"\nassert solution(\"christmasmerry\") == \"c i s t a s m e r r y\"\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('helloworld') == 'h e l l o w o r l d'\nassert solution('hastalavistababy') == 'h a s t a l a v i s t a b a y'\nassert solution('merrychristmas') =='m e r r y c h r i s t a b a y'\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hello\") == \"eo\"\nassert solution(\"hastalavistababy\") == \"0\"\nassert solution(\"merrychristmas\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('helloworld') == 'h e l l o w l d'\nassert solution('hastalavistababy') == 'h a s t a l a v i s t a b a y'\nassert solution('merrychristmas') == '-1'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('helloworld') == 'h e'\nassert solution('hastalavistababy') == '0'\nassert solution('merrychristmas') == '-1'\n\"\"\""
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hastalavistababy\") == '0'\nassert solution(\"merrychristmas\") == '-1'\nassert solution(\"helloworld\") == '3'\nassert solution(\"hastalavistababy\") == '0'\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"helloworld\") == \"h e l l o w\"\nassert solution(\"helloworld\") == \"h e l l o w\"\nassert solution(\"merrychristmas\") == \"m e r r y\"\nassert solution(\"merrychristmas\") == \"m e r r y\"\n\nassert solution(\"hastalavistababy\") == \"h a s t a\"\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'\nassert solution('sam arthur') =='samar'\nassert solution('harry arthur') == 'harar'\nassert solution('harry arthur sam') == 'haras'\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\nassert solution(\"alex rus\") == \"alxr\"\nassert solution(\"richard duke\") == \"rdu\"\n\"\"\"\n\nimport string\n\nstdin = input().split()\nfirst = stdin[0]\nlast = stdin[1]\n\nfirst = first[:len(first)//2]\nlast = last[:len(last)//2]\n\nalphabet = string.ascii_lowercase\n\nindex = 0\nfor char in alphabet:\n    if char == first[len(first)//2]:\n        break\n    index += 1\n\nindex += len(first)\n\nfor char in alphabet[:index]:\n    print(char, end='')\n\nfor char in alphabet[index:]:\n    print(char, end='')\n\nfor char in last:\n    print(char, end='')\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'\nassert solution('adam smith') == 'adams'\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\n\nassert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\n\nassert solution(\"harry potter\") == \"hap\"\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\""
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\nprint(\"All tests passed.\")"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\nassert solution(\"ashley chang\") == \"ashch\"\nassert solution(\"gav carter\") == \"gavc\"\nassert solution(\"danny perkins\") == \"dannyp\"\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n[[]]') == '+-\\n|   |'\nassert solution('6\\n[[][]]') == '+- -+\\n|   |\\n0   0'\nassert solution('4\\n[[][]]') == '+- -+\\n|   ||\\n0   0'\nassert solution('2\\n[[]]') == '+- -+'\nassert solution('6\\n[[][]]') == '+- -+\\n|   ||\\n0   0'\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[[][]]\") == \"+- -+\\n|   |||\\n+- -+-\\n|   |||\\n+- -+-\"\nassert solution(\"[[][]]\") == \"+- -+\\n|   |||\\n+- -+-\"\nassert solution(\"[[][]]\") == \"+- -+\\n|   |||\\n+- -+-\"\nassert solution(\"[[][]]\") == \"+- -+\\n|   |||\\n+- -+-\"\nassert solution(\"[[][]]\") == \"+- -+\\n|   |||\\n+- -+-\"\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[[][]][]\") == \"+-        -++- -+\"\nassert solution(\"[[[]]]\") == \"+-     -+\"\nassert solution(\"[[][]]\") == \"+-     -+\"\nassert solution(\"[[][]]\") == \"+-     -+\"\n\n\"\"\""
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n[[][]][]') == '+-        -++- -+\\n|+- -++- -+||   |\\n||   ||   |||   |\\n|+- -++- -+||   |\\n+-        -++- -+'\nassert solution('6\\n[[[]]]') == '+-     -+\\n|+-   -+|\\n||+- -+||\\n|||   |||\\n||+- -+||\\n|+-   -+|\\n+-     -+'\nassert solution('6\\n[[][]]') == '+-        -++- -+\\n|+- -++- -+||   |\\n||   ||   |||   |\\n|+- -++- -+||   |\\n+-        -++- -+'\nassert solution('2\\n[]') == '+- -+\\n|   |\\n+- -+\\n'\nassert solution('4\\n[][]') == '+- -++- -+\\n|   ||   |\\n+- -++- -+\\n'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n[[][]][]\") == \"+-\\n|+- -+\\n||   ||\\n|+- -+\\n+-\\n\"\nassert solution(\"6\\n[[[]]]\") == \"+-\\n|+-   -+\\n||+- -+||\\n|||   |||\\n||+- -+||\\n|+-   -+\\n+-\\n\"\nassert solution(\"6\\n[[[]]]\") == \"+-\\n|+-   -+\\n||+- -+||\\n|||   |||\\n||+- -+||\\n|+-   -+\\n+-\\n\"\nassert solution(\"2\\n[]\") == \"+- -+\\n|   |\\n+- -+\\n\"\nassert solution(\"4\\n[][]\") == \"+- -+\\n|   ||\\n+- -+\\n|   ||\\n+- -+\\n\"\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"[[]][]\") == \"+- -+\\n|   |||\\n+- -+-\"\nassert solution(\"[][][]\") == \"+- -+ -+ -+\\n|   |||   ||\\n+- -+ -+ -+ -+\\n|   ||   |||\\n+- -+ -+ -+ -+\\n|   ||   |||\\n+- -+ -+ -+ -+\"\nassert solution(\"[][][][][]\") == \"+- -+ -+ -+ -+ -+ -+ -+\\n|   |||   |||   ||\\n+- -+ -+ -+ -+ -+ -+ -+ -+ -+ -+\\n|   ||   |||   ||   ||\\n+- -+ -+ -+ -+ -+ -+ -+ -+ -+ -+\\n|   ||   |||   ||   ||   ||\\n+- -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+\\n|   ||   |||   ||   ||   ||\\n+- -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+\\n|   ||   |||   ||   ||   ||\\n+- -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+\\n|   ||   |||   ||   ||   ||\\n+- -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+\\n|   ||   |||   ||   ||   ||\\n+- -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+\\n|   ||   |||   ||   ||   ||\\n+- -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+\"\nassert solution(\"[][][][][][][][][][][][][][][][][][]\") == \"+- -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -+ -"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('[[][]]') == '+-\\n|+- -+|\\n||   |||\\n||+- -+||\\n|+- -+||\\n+- -+'\nassert solution('[[][]]') == '+-\\n|+- -+|\\n||   |||\\n||+- -+||\\n|+- -+||\\n+- -+'\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n[[]]\\n') == '+- -+\\n|   |\\n+- -+'\nassert solution('8\\n[[][]][]\\n') == '+-        -++- -+\\n|+- -++- -+||   |\\n||   ||   |||   |\\n|+- -++- -+||   |\\n+-        -++- -+'\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n[][]\") == \"+- -++- -+\\n|   ||   |\\n+- -++- -+\"\n\nassert solution(\"2\\n[][]\") == \"+- -+\\n|   |\\n+- -+\"\n\nassert solution(\"4\\n[[]]\") == \"+- -+\\n|   ||\\n+- -+\"\n\nassert solution(\"8\\n[[][]]\\n[[][][][][][][]]\") == \"+- -+\\n|   ||\\n+- -+\\n|   ||\\n+- -+\"\n\nassert solution(\"8\\n[[][]]\\n[[][][][][][][]]\") == \"+- -+\\n|   ||\\n+- -+\\n|   ||\\n+- -+\"\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n[[][]]') == '+- -+\\n|   |||\\n+- -+|'\n\nassert solution('4\\n[[][]]') == '+- -+\\n|   ||\\n+- -+|'\n\nassert solution('6\\n[[][]]') == '+- -+\\n|   |||\\n+- -+|'\n\nassert solution('8\\n[[][]]') == '+- -+\\n|   |||\\n+- -+|'\n\nassert solution('6\\n[[][]]') == '+- -+\\n|   ||\\n+- -+|'"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\">\") == \">\"\nassert solution(\"<\") == \"<\"\nassert solution(\"=\") == \"=\""
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10010111') == '<'\nassert solution('11100101') == '>'\nassert solution('11101101') == '='\nassert solution('10111101') == '<'\nassert solution('1011111') == '>'\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000\") == \"<\"\nassert solution(\"110\") == \"=\"\nassert solution(\"101\") == \">\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000\") == \"<\"\nassert solution(\"11\") == \"=\"\nassert solution(\"110\") == \">\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == '>'\nassert solution('1') == '='\nassert solution('01') == '<'\n\nassert solution('11101') == '>'\nassert solution('11101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000\") == \">\"\nassert solution(\"111\") == \"<\"\nassert solution(\"110\") == \"=\"\nassert solution(\"101\") == \">\"\n\n\"\"\""
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \">\"\nassert solution(\"1100\") == \">\"\nassert solution(\"1110\") == \">\"\nassert solution(\"101\") == \"<\"\nassert solution(\"100\") == \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10010\") == \">\"\nassert solution(\"11\") == \"<\"\nassert solution(\"11100\") == \">\"\nassert solution(\"01110\") == \">\"\nassert solution(\"10110\") == \"<\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000\") == \"<\"\nassert solution(\"111\") == \">\"\nassert solution(\"00100\") == \"=\"\nassert solution(\"110\") == \"<\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 111') == '<'\nassert solution('00100 11') == '='\nassert solution('110 101') == '>'\n\"\"\"\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nred\\npurple\\nblue\\n\") == '2\\nSpace\\nTime'\nassert solution(\"6\\nred\\npurple\\nblue\\ngreen\\norange\\n\") == '2\\nSpace\\nTime'\nassert solution(\"0\\nred\\npurple\\nblue\\ngreen\\norange\\n\") == '6\\nTime\\nMind\\nSoul\\nPower\\nReality\\nSpace'\nassert solution(\"5\\nred\\npurple\\nblue\\ngreen\\nyellow\\n\") == '0\\nTime\\nMind\\nSoul\\nPower\\nReality\\nSpace'\nassert solution(\"6\\npurple\\ngreen\\nblue\\norange\\nred\\n\") == '0\\nTime\\nMind\\nSoul\\nPower\\nReality\\nSpace'\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\npurple\\ngreen\\nyellow\\norange\\n\") == \"2\\nSpace\\nTime\"\nassert solution(\"0\\n\") == \"6\\nTime\\nMind\\nSoul\\nPower\\nReality\"\n\"\"\""
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('red') == 'Power'\nassert solution('purple') == 'Time'\nassert solution('yellow') == 'Soul'\nassert solution('orange') == 'Reality'\nassert solution('red') == 'Power'\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nred\\npurple\\nyellow\\norange') == '2\\nSpace\\nTime'\nassert solution('0') == '6\\nTime\\nMind\\nSoul\\nPower\\nReality\\n'\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nred\\npurple\\nyellow\\norange\") == \"2\\nSpace\\nTime\"\nassert solution(\"0\") == \"6\\nTime\\nMind\\nSoul\\nPower\\nReality\\nSpace\"\nassert solution(\"1\\nyellow\") == \"1\\nMind\"\n\n\"\"\""
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nred\\npurple\\nyellow\\norange\\n\") == \"2\\nSpace\\nTime\"\nassert solution(\"0\\n\") == \"6\\nTime\\nMind\\nSoul\\nPower\\nReality\\n\"\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0\\nred\\npurple\\nyellow\\norange\\n\") == \"2\\nSpace\\nTime\"\nassert solution(\"0\\npurple\\ngreen\\nblue\\norange\\nred\\nyellow\\n\") == \"6\\nMind\\nSoul\\nPower\\nReality\\nTime\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nred\\npurple\\nyellow\\norange\") == \"2\\nSpace\\nTime\"\nassert solution(\"0\") == \"6\\nTime\\nMind\\nSoul\\nPower\\nReality\\nSpace\""
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nred\\npurple\\nyellow\\norange\") == \"2\\nSpace\\nTime\"\nassert solution(\"0\") == \"6\\nTime\\nMind\\nSoul\\nPower\\nReality\\nSpace\"\n\"\"\""
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nred\\npurple\\nyellow\\norange\") == \"2\\nSpace\\nTime\"\n\"\"\"\n\nn = int(input())\ng = set()\nfor _ in range(n):\n    g.add(input().lower())\n\nprint(n - len(g))\nprint(*sorted(g, key=lambda x: x[0]), sep='\\n')"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2\") == \"1\"\nassert solution(\"8 7 5\") == \"2\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2') == '1'\nassert solution('8 7 5') == '2'\nassert solution('8 2 6') == 'Final!'\n\"\"\"\nimport math"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\") == \"1\"\nassert solution(\"8 2 6\") == \"Final!\"\nassert solution(\"8 7 5\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2') == '1'\nassert solution('8 2 6') == 'Final!'\nassert solution('8 7 5') == '2'\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2\") == \"1\"\nassert solution(\"8 7 5\") == \"2\"\nassert solution(\"8 2 6\") == \"Final!\"\nassert solution(\"8 2 7\") == \"2\"\n\"\"\"\nimport sys\nimport numpy as np\n\nn, a, b = map(int, sys.stdin.readline().split())\n\na, b = min(a, b), max(a, b)\nr = np.ceil(np.log2(n))\nfor i in range(r):\n    if a % 2 == 1 and b % 2 == 1:\n        print(i + 1)\n        break\n    a //= 2\n    b //= 2\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n4 1 2\n''') == '1'\n\nassert solution('''\n8 2 6\n''') == 'Final!'\n\nassert solution('''\n8 7 5\n''') == '2'\n\nassert solution('''\n8 1 5\n''') == '1'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n4 1 2\n''') == \"1\"\nassert solution('''\n8 2 6\n''') == \"Final!\"\nassert solution('''\n8 7 5\n''') == \"2\"\n\"\"\""
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2\\n') == '1\\n'\nassert solution('8 7 5\\n') == '2\\n'\nassert solution('8 2 6\\n') == 'Final!\\n'\n\n\"\"\""
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"./tests/7/input.txt\") == \"Final!\"\nassert solution(\"./tests/7/input1.txt\") == \"2\"\nassert solution(\"./tests/7/input2.txt\") == \"1\""
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\\n\") == \"1\"\nassert solution(\"8 7 5\\n\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2 1\\n0 1 1 1\\n\") == \"2\"\nassert solution(\"3 2 1\\n0 0 0\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2 1\") == 2\nassert solution(\"3 2 1\") == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2 1\\n0 1 1 1\\n\") == \"2\"\nassert solution(\"3 2 1\\n0 0 0\\n\") == \"1\"\nassert solution(\"1\\n0\\n\") == \"0\"\nassert solution(\"1\\n1\\n\") == \"0\"\nassert solution(\"1\\n0\\n\") == \"0\"\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2 1\") == 2\nassert solution(\"3 2 1\") == 1\n\"\"\"\nfrom itertools import permutations\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 2 1\\n0 0 0') == '2'\nassert solution('3\\n2 3 1\\n0 0 0') == '1'\n\n---\n\u0412 \u0443\u0441\u043b\u043e\u0432\u0438\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043d\u0430\u0431\u043e\u0440 \u043f\u0430\u0440 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0445 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432 \u0438\u0437 2n \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0438 \u0432\u044b\u0431\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0434\u043e\u043c\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430. \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0435.\n\n\u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0438 \u0432\u044b\u0431\u043e\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u043e \u0434\u043e\u043c\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0438 \u0432\u044b\u0431\u043e\u0440\u044b, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0445 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432. \u041f\u043e\u043c\u043d\u0438\u0442\u0435, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0432\u044b\u0431\u043e\u0440 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 \u0438 \u0432\u044b\u0431\u043e\u0440\u043e\u043c.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n4\n4 3 2 1\n0 1 1 1\n3 2 1\n0 0 0\n2 3 1\n0 0 0\n2 1 3\n0 0 0\n0 1 1\n1 2 3\n\n\u041e\u0442\u0432\u0435\u0442 1\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n4\n3 2 1\n0 1 1 1\n3 2 1\n0 0 0\n2 3 1\n0 0 0\n2 1 3\n0 0 0\n0 1 1\n1 2 3\n\n\u041e\u0442\u0432\u0435\u0442 2\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n3\n2 3 1\n0 0 0\n0 0 0\n2 1 3\n0 0 0\n0 0 0\n2 1 3\n0 0 0\n0 0 0\n\n\u041e\u0442\u0432\u0435\u0442 3\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n3\n2 3 1\n0 1 1 1\n0 0 0\n2 1 3\n0 0 0\n0 1 1\n1 2 3\n0 0 0\n0 0 0\n2 1 3\n\n\u041e\u0442\u0432\u0435\u0442 3\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n3\n1 2 3\n0 0 0\n0 0 0\n2 1 3\n0 0 0\n0 0 0\n2 1 3\n0 0 0\n0 0 0\n2 1 3\n\n\u041e\u0442\u0432\u0435\u0442 4\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n4\n3 2 1\n0 1 1 1\n2 1 3\n0 0 0\n2 3 1\n0 0 0\n2 1 3\n0 0 0\n0 1 1\n1 2 3\n\n\u041e\u0442\u0432\u0435\u0442 4\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n4\n2 3 1\n0 1 1 1\n2 1 3\n0 0 0\n2 3 1\n0 0 0\n2 1 3\n0 0 0\n0 1 1\n1 2 3\n\n\u041e\u0442\u0432\u0435\u0442 5\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n4\n3 2 1\n0 1 1 1\n2 1 3\n0 0 0\n2 3 1\n0 0 0\n2 1 3\n0 0 0\n0 1 1\n1 2 3\n\n\u041e\u0442\u0432\u0435\u0442 5\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n4\n1 2 3\n0 0 0\n0 0 0\n2 1 3\n0 0 0\n0 0 0\n2 1 3\n0 0 0\n0 0 0\n2 1 3\n\n\u041e\u0442\u0432\u0435\u0442 6\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n5\n3 2 1\n0 1 1 1\n2 1 3\n0 0 0\n2 3 1\n0 0 0\n2 1 3\n0 0 0\n0 1 1\n1 2 3\n\n\u041e\u0442\u0432\u0435\u0442 6\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n5\n2 3 1\n0 1 1 1\n2 1 3\n0 0 0\n2 3 1\n0 0 0\n2 1 3\n0 0 0\n0 1 1\n1 2 3\n\n\u041e\u0442\u0432\u0435\u0442 7\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n6\n3 2 1\n0 1 1 1\n2 1 3\n0 0 0\n2 3 1\n0 0 0\n2 1 3\n0 0 0\n0 1 1\n1 2 3\n\n\u041e\u0442\u0432\u0435\u0442 7\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n7\n1 2 3\n0 0 0\n0 0 0\n2 1 3\n0 0 0\n0 0 0\n2 1 3\n0 0 0\n0 0 0\n2 1 3\n\n\u041e\u0442\u0432\u0435\u0442 8\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445\u043e\u0434\n7\n1 2 3\n0 0 0\n0 0 0\n2 1 3\n0 0 0\n0 0 0\n2 1 3\n0 0 0\n0 0 0\n2 1 3\n\n\u041e\u0442\u0432\u0435\u0442 8\n\n\u0412\u0445\u043e\u0434    \u0412\u044b\u0445"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2 1\\n0 1 1 1\") == \"2\"\nassert solution(\"3 2 1\\n0 0 0\") == \"1\"\n\"\"\"\n\nn = int(input())\npermutation = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2 1\\n0 0 0\") == \"2\"\nassert solution(\"3 2 1\\n0 0 0\") == \"1\""
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2 1\\n0 0 0\") == \"2\"\nassert solution(\"3 2 1\\n0 0 0\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2 1\\n0 0 0\") == \"2\"\nassert solution(\"3 2 1\\n0 0 0\") == \"1\"\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2 1\\n0 0 0\\n\") == \"2\"\nassert solution(\"3 2 1\\n0 0 0\\n\") == \"1\"\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n4 2\") == \"26\"\nassert solution(\"10 10\\n10 0\") == \"100\"\n\"\"\""
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n4 2') == '26'\nprint('Test 1 OK')\nassert solution('10 10\\n10 0') == '100'\nprint('Test 2 OK')\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n4 2\") == '26'\nprint('Test pass.')\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 10\\n10 0') == '100'\nassert solution('10 10\\n2 0') == '26'"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n4 2\") == '26'\nassert solution(\"10 10\\n10 0\") == '100'\n\"\"\"\n\nv_1, v_2, t, d = [int(s) for s in input().split()]\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n2 0\") == \"0\"\nassert solution(\"10 10\\n10 0\") == \"100\"\n\"\"\"\n\nv1, v2, d, t = map(int, input().split())"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('1 2 1') == '5'\nassert solution('1 2 2') == '7'\nassert solution('1 2 3') == '10'\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n4 2') == '26'\nassert solution('10 10\\n10 0') == '100'\n\n\"\"\""
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n2 0\") == \"100\"\nassert solution(\"1 1\\n1 0\") == \"1\"\nassert solution(\"5 6\\n4 2\") == \"26\"\nassert solution(\"10 10\\n10 0\") == \"100\""
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n4 2\") == \"26\"\nassert solution(\"10 10\\n10 0\") == \"100\"\nassert solution(\"6 10\\n4 2\") == \"31\"\nassert solution(\"6 10\\n8 0\") == \"25\"\nassert solution(\"6 10\\n9 0\") == \"24\"\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 4 2\\n10 4\\n2 6\") == \"10\"\n\n\"\"\"\n\nimport sys\n\nfrom typing import Dict\n\n_, n_m = sys.stdin.readline().split()\nn, m = (int(x) for x in n_m.split())\n\nparts: Dict[int, int] = {}\n\nfor i in range(1, m + 1):\n    w, v = (int(x) for x in sys.stdin.readline().split())\n    parts[i] = (w, v)"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_0) == '3'\nassert solution(test_input_1) == '-1'\nassert solution(test_input_2) == '0'\nassert solution(test_input_3) == '10'\n\"\"\""
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n1 4 2\n10 4\n2 6\n''') == '10'\n\nassert solution('''\n3 2\n1 4 2\n10 4\n2 6\n''') == '-1'\n\nassert solution('''\n3 2\n1 4 2\n10 4\n2 6\n''') == '10'\n\nassert solution('''\n3 2\n1 4 2\n10 4\n2 6\n''') == '10'\n\nassert solution('''\n3 2\n1 4 2\n10 4\n2 6\n''') == '-1'"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 4 2\\n10 4\\n2 6\") == \"10\"\n\"\"\""
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n10 4\\n2 6\") == \"10\"\nassert solution(\"4 3\\n9 9\\n5 5\\n3 8\") == \"0\"\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 4 2\\n10 4\\n2 6\") == \"10\"\nassert solution(\"3 2\\n1 4 2\\n1 5 3\\n10 4\\n2 6\") == \"-1\"\nassert solution(\"3 2\\n1 4 2\\n1 5 3\\n10 4\\n2 6\") == \"10\"\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 2\\n1 4 2\\n10 4\\n2 6\"\n) == \"10\"\n\nassert solution(\n    \"3 2\\n1 4 2\\n10 4\\n2 6\"\n) == \"10\"\n\nassert solution(\n    \"3 2\\n1 4 2\\n10 4\\n2 6\"\n) == \"10\"\n\nassert solution(\n    \"3 2\\n1 4 2\\n10 4\\n2 6\"\n) == \"10\"\n\nassert solution(\n    \"3 2\\n1 4 2\\n10 4\\n2 6\"\n) == \"10\""
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 4 2') == '10'\nassert solution('1 4 2\\n1 4 2') == '10'\nassert solution('1 4 2\\n10 4\\n1 2') == '-1'\n\n------\nfrom math import inf"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('5 7') == '-1'\nassert solution('10 100') == '100'\nassert solution('100 10') == '10'\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 4 2\\n10 4\\n2 6\") == 10\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 10') == '0'\nassert solution('2 4') == '2'\nassert solution('107 109') == '2'"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"0 10\") == \"0\"\nassert solution(\"107 109\") == \"2\"\nprint(\"Passed.\")\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4') == '2'\nassert solution('0 10') == '0'\nassert solution('107 109') == '2'\n\n\"\"\""
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"0 10\") == \"0\"\nassert solution(\"107 109\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4') == '2'\nassert solution('0 10') == '0'\nassert solution('107 109') == '2'\n\"\"\"\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '2 4'\n) == '2'\nassert solution(\n    '0 10'\n) == '0'\nassert solution(\n    '107 109'\n) == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4') == '2'\n\nassert solution('0 10') == '0'\n\nassert solution('107 109') == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"0 10\") == \"0\"\nassert solution(\"107 109\") == \"2\"\nassert solution(\"0 1\") == \"0\"\nassert solution(\"1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"107 109\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 10') == '0'\nassert solution('2 4') == '2'\nassert solution('107 109') == '2'\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10010101\") == \"2\"\nassert solution(\"11100101\") == \"3\"\nassert solution(\"101111100101\") == \"4\""
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101111100101') == '4'\nassert solution('11100101') == '-1'\nassert solution('10010101') == '2'\nassert solution('11100101') == '3'\nassert solution('101111100101') == '4'\n\nprint(\"Passed all tests\")\n\"\"\"\n\n\n\"\"\"\n7\n2\n0 1\n0 0 1\n0 0 0 1\n0 0 0 0 1\n1 0 0 0 0 1\n\n\"\"\"\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 3\\n101111100101\") == \"4\"\nassert solution(\"8 4\\n10010101\") == \"2\"\nassert solution(\"8 4\\n11100101\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10010101') == '2'\nassert solution('11100101') == '-1'\nassert solution('101111100101') == '4'\n\n\"\"\""
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 4 10010101') == '2'\nassert solution('4 2 100101') == '-1'\nassert solution('8 4 11100101') == '3'\nassert solution('12 3 101111100101') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(8, 4) == 2\nassert solution(8, 3) == -1\nassert solution(12, 3) == 4\nassert solution(9, 2) == 4\nassert solution(10, 4) == 3\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10010101\") == \"2\"\nassert solution(\"11100101\") == \"3\"\nassert solution(\"101111100101\") == \"4\"\nassert solution(\"100101010\") == \"-1\"\nassert solution(\"11100101010\") == \"-1\"\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10010101') == '2'\nassert solution('11100101') == '-1'\nassert solution('101111100101') == '4'\nassert solution
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\") == \"2\"\nassert solution(\"4 2\") == \"-1\"\nassert solution(\"8 4\") == \"2\"\nassert solution(\"11100101\") == \"3\"\nassert solution(\"101111100101\") == \"4\"\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10010101\") == \"2\"\nassert solution(\"11100101\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n\"\"\""
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\n\"\"\""
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n\"\"\""
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('7') == '3'\nassert solution('10') == '5'\nassert solution('1') == '0'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('2') == '1'\n\"\"\"\n\nfrom math import sqrt\nfrom sys import stdout"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1359257\") == \"YES\"\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\n\n\nsolution(stdin)\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1359257\") == \"YES\"\nassert solution(\"17851817\") == \"NO\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1359257') == \"YES\"\nassert solution('17851817') == \"NO\"\n\"\"\""
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1359257\") == 'YES'\n\"\"\""
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1359257\") == \"YES\"\nassert solution(\"17851817\") == \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1359257\") == 'YES'\nassert solution(\"17851817\") == 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\n\"\"\"\n\nn = int(input())\n\nhouses = n // 1234567\ncars = n // 1234\ncomputers = n // 1"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\") == \"NO\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2\n1 2\n1 0\n0 1\n0 2''') == 'NO'\nassert solution('''2\n1 3\n1 0\n-1 3\n\nOutput\nYES\n''') == 'YES'\nassert solution('''2\n1 3\n1 0\n0 3\n\nOutput\nYES\n''') == 'YES'\n\n'''\nk_i+b_i = k_j+b_j\n=> k_i - k_j = b_j\n=> k_i - k_j = b_j - b_i\n=> k_i - k_j = b_j - b_i\n=> k_i - k_j = b_i - b_j\n=> k_i - k_j = - b_j - b_i\n=> - k_j - b_j = - b_i - b_j\n=> - k_j = - b_i - b_j\n=> k_j = - b_i - b_j\n=> k_j = -b_i + b_j\n=> k_j = -b_i + b_j + 1\n=> k_j = -b_i + b_j + 1\n=> k_j = -b_i - 1\n=> k_j = -b_i\n=> - k_j = -b_i\n=> k_j = -b_i - 1\n=> k_j = -b_i - 1\n=> k_j = -b_i - 2\n=> k_j = -b_i - 2\n=> k_j = -b_i - 3\n=> k_j = -b_i - 3\n=> k_j = -b_i - 4\n=> k_j = -b_i - 4\n=> k_j = -b_i - 5\n=> k_j = -b_i - 5\n'''\n\nk = lambda b, a: -b - a if a == 0 else -b - a + 1\nb = lambda k, a: -k if a == 0 else -k + a\n\nfor _ in range(int(stdin.readline())):\n    a, b = map(int, stdin.readline().split())\n    print('YES' if abs(k(b, a)) == 1 else 'NO')"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2') == 'NO'\nassert solution('2\\n1 3\\n1 0\\n-1 3') == 'YES'\nassert solution('2\\n1 3\\n1 0\\n0 3') == 'YES'\nassert solution('2\\n1 3\\n1 0\\n0 3') == 'NO'\nassert solution('1\\n1\\n1\\n1') == 'NO'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 3\\n1 0\\n0 2\\n0 2\\n\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\\n0 3\\n\") == \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\\n\") == 'NO'\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\\n\") == 'YES'\nassert solution(\"2\\n1 3\\n1 0\\n0 3\\n\") == 'YES'\nassert solution(\"2\\n1 3\\n1 0\\n0 3\\n\") == 'YES'\nassert solution(\"2\\n1 3\\n1 0\\n0 3\\n\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 3\\n1 0\\n-1 3\\n\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\\n\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\\n\") == \"NO\"\nassert solution(\"4\\n1 2\\n1 3\\n1 0\\n0 2\\n0 3\\n\") == \"YES\"\nassert solution(\"4\\n1 2\\n1 3\\n1 0\\n0 3\\n\") == \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\\n\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\\n\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\\n\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 2\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2') == 'NO'\nassert solution('2\\n1 3\\n1 0\\n-1 3') == 'YES'\nassert solution('2\\n1 3\\n1 0\\n0 3') == 'YES'\nassert solution('2\\n1 3\\n1 0\\n0 3') == 'NO'"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7') == '4'\nassert solution('8') == '5'\nassert solution('9') == '5'\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\") == 4\n\nassert solution(\"8\") == 5\n\nassert solution(\"9\") == 5\n\nprint(\"Success\")"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"7\n8\n9\n\"\"\"\n) == '5'\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(8) == 5\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"8\") == \"5\"\nassert solution(\"9\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\") == 5\nassert solution(\"7\") == 4\nassert solution(\"9\") == 5\n\n\n\"\"\""
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"8\") == \"5\"\nassert solution(\"9\") == \"5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7') == 4\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom itertools import combinations\nfrom math import ceil\nfrom typing import List, Set\n\nfrom icontract import require, ensure, DBC\n\n\nclass Split(DBC):\n    \"\"\"Represent a split of integers.\"\"\"\n\n    @require(lambda first: first >= 1)\n    @require(lambda ints: len(ints) >= 2)\n    @require(lambda ints: all(isinstance(x, int) for x in ints))\n    @require(lambda ints: sum(ints) <= 10 ** 9)\n    def __init__(self, first: int, ints: List[int]) -> None:\n        self.first = first\n        self.ints = ints\n\n    def __eq__(self, other: Split) -> bool:\n        \"\"\"Return whether the splits are equal.\"\"\"\n        return (\n            self.first == other.first\n            and self.ints == other.ints\n        )\n\n    def __lt__(self, other: Split) -> bool:\n        \"\"\"Return whether this split is less than the other one.\"\"\"\n        return (self.first, self.ints) < (other.first, other.ints)\n\n\nclass SplitProblem:\n    def __init__(self, n: int) -> None:\n        self.n = n\n\n    def solution(self) -> None:\n        \"\"\"Print the solution.\"\"\"\n        splits: Set[Split] = set()\n        for first in range(1, self.n + 1):\n            for split in self.splits(first):\n                splits.add(split)\n\n        print(len(splits))\n\n    @staticmethod\n    def splits(first: int) -> List[Split]:\n        \"\"\"Return a list of all possible splits of the given length.\"\"\"\n        ints = [first]\n        for _ in range(1, ceil(self.n / first)):\n            ints += [first] * (first + 1)\n\n        return [\n            Split(first=first, ints=ints[:first])\n        ] + [\n            Split(first=first + i, ints=ints[i: i + first])\n            for i in range(1, first)\n        ]\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == 5\nassert solution(\"9\") == 5\n\"\"\"\n\nn = int(stdin.readline())\ncnt = 0\nw = set()\n\nfor i in range(1, n + 1):\n    for j in range(i, n + 1):\n        w.add(i + j)\n\nfor i in w:\n    if i == n:\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3') == '1 3'\nassert solution('1 2') == '1 1'\nassert solution('1 10') == '1 9'\nassert solution('9 1') == '1 1'\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 2\n''') == '2 3'\n\nassert solution('''5 3\n''') == '1 3'\n\nassert solution('''7 3\n''') == '1 5'\n\nassert solution('''9 6\n''') == '1 8'\n\nassert solution('''5 5\n''') == '1 4'\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"1 3\"\n\"\"\"\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"1 3\"\n\"\"\""
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n4 1 2 3') == '1 3'\nassert solution('6 3\\n4 1 2 3 5 6') == '1 3'\n\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3') == '1 3'\n\"\"\"\n\nimport math\n\nn, k = map(int, input().split())"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 3\\n2 4\\n3 5') == '3 3'\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '1 3'\n\"\"\""
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n\") == \"1 3\"\nassert solution(\"4 4\\n\") == \"1 4\"\nassert solution(\"10 10\\n\") == \"1 10\"\nassert solution(\"7 4\\n\") == \"1 4\"\nassert solution(\"6 5\\n\") == \"1 5\"\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == \"1 3\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 2\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('10') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '1\\n'\nassert solution('3\\n') == '2\\n'\nassert solution('4\\n') == '2\\n'\nassert solution('10\\n') == '4\\n'\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n\"\"\"\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n\"\"\""
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('10') == '4'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\n\nm = {}\n\nfor _ in range(n):\n    a, b = map(int, sys.stdin.readline().rstrip().split())\n    if a not in m:\n        m[a] = b\n    else:\n        m[a] = max(b, m[a])\n\nm = list(m.items())\n\nm.sort(key=lambda x: x[0])\n\nans = 0\n\nfor i in range(len(m) - 1):\n    if m[i][1] < m[i + 1][1]:\n        ans += 1\n\nprint(ans + 1)\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n\nprint(\"all tests passed.\")"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('10') == '4'\n\"\"\"\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"V\") == 0\nassert solution(\"VV\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3\n\"\"\"\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"VK\") == 1\nassert solution(\"VV\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"VV\") == 1\nassert solution(\"VVK\") == 1\nassert solution(\"VVKK\") == 2\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3\nassert solution(\"VKKKKKKKKKKKVVVVVVVVK\") == 3\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"VK\") == 1\nassert solution(\"VV\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"V\") == 0\nassert solution(\"VK\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3\n\"\"\"\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"VV\") == 1\nassert solution(\"VK\") == 1\nassert solution(\"VKKKV\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3\nassert solution(\"VKKKKKKKKKVVVVVVVVK\") == 3\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"VK\") == 1\nassert solution(\"VV\") == 1\nassert solution(\"VKKK\") == 0\nassert solution(\"KVKVVVV\") == 3\nassert solution(\"VKKKKKKKVVVVVVVVVK\") == 3\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"VVVVVVVVK\") == 3\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3\nassert solution(\"V\") == 0\nassert solution(\"KVKV\") == 1\nassert solution(\"VK\") == 1\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('V') == 0\nassert solution('VV') == 1\nassert solution('VVK') == 1\nassert solution('VVKK') == 2\nassert solution('VVVKK') == 2\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"VK\") == 1\nassert solution(\"VV\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 2\n\"\"\"\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"2\"\n\"\"\""
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"4\"\n\"\"\"\n\nn = input()\ncount = 0\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3') == '4'\nassert solution('7') == '8'\nassert solution('9') == '10'\nassert solution('1') == '2'\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 4\nassert solution('1') == 2\nassert solution('2') == 3\nassert solution('5') == 5\n\"\"\"\nimport math\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == 3\nassert solution(\"10\") == 10\n\n-----Test Input-----\n\"\"\"\nimport math"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == '2'\nassert solution(\"2\") == '3'\nassert solution(\"4\") == '4'\n\nprint(solution(stdin.readline()))"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == 2\nassert solution(2) == 3\nassert solution(4) == 4\n\n\n\n-----Explanation-----\n\nIn the first example, Sofia will need to draw two segments with a ruler, each of length 1, in order to draw two squares.\n\nIn the second example, Sofia will need to draw three segments with a ruler, each of length 1, in order to draw four squares.\n\nIn the third example, Sofia will need to draw four segments with a ruler, each of length 1, in order to draw four squares.\n\nIn the fourth example, Sofia will need to draw five segments with a ruler, each of length 1, in order to draw four squares.\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\nlst = [0]\ns = 0\n\nfor i in range(1, n + 1):\n    if i % 2 == 0:\n        s += 2\n    else:\n        s += 1\n    lst.append(s)\n\nprint(lst[n])\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n\nprint(solution('2'))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 3\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7\") == \"2\"\nassert solution(\"4 9\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7\") == \"2\"\nassert solution(\"4 9\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7') == '2'\nassert solution('4 9') == '3'\nassert solution('1 1') == '1'\n\"\"\""
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"4 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7\") == \"2\"\nassert solution(\"4 9\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7\") == \"2\"\nassert solution(\"4 9\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7') == '2'\nassert solution('4 9') == '3'\nassert solution('1 1') == '1'\n\n\"\"\"\n\nimport sys\n\nA = list(map(int, sys.stdin.readline().strip().split()))\n\nA = [0] + A\nB = [0] + A[::-1]\n\nfor i in range(1, len(A)):\n    A[i] *= 3\n    B[i] *= 2\n\nprint(A.index(max(A)) - B.index(max(B)))\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 3') == '5'\nassert solution('3 6') == '10'\nassert solution('10 1024') == '2046'\n\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 3') == '5'\nassert solution('3 6') == '10'\nassert solution('10 1024') == '2046'\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == 2\n\nassert solution(\"2 3\") == 5\n\nassert solution(\"3 6\") == 10\n\nassert solution(\"10 1024\") == 2046\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 3') == '5'\nassert solution('3 6') == '10'\nassert solution('10 1024') == '2046'\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"3 6\") == \"10\"\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"1 2\"\n) == \"2\"\nassert solution(\n\"2 3\"\n) == \"5\"\nassert solution(\n\"3 6\"\n) == \"10\"\nassert solution(\n\"10 1024\"\n) == \"2046\"\n\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 3') == '5'\nassert solution('3 6') == '10'\nassert solution('10 1024') == '2046'\n\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''\n1 2\n''') == '2'\nassert solution(\n'''\n1 2\n''') == '2'\n\nassert solution(\n'''\n2 3\n''') == '5'\nassert solution(\n'''\n3 6\n''') == '10'\nassert solution(\n'''\n10 1024\n''') == '2046'\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2') == 2\nassert solution('2 3') == 5\nassert solution('3 6') == 10\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''26\n''') == '6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1'\nassert solution('''2\n''') == '2\\n1 2\\n2 1'\nassert solution('''8\n''') == '4\\n1 8\\n2 3\\n3 2\\n8 1'\nassert solution('''2\n''') == '2\\n1 2\\n2 1'\nassert solution('''4\n''') == '1 4\\n2 3\\n3 2\\n4 1'\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"26\") == \"6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1\"\nassert solution(\"2\") == \"2\\n1 2\\n2 1\"\nassert solution(\"8\") == \"4\\n1 8\\n2 3\\n3 2\\n8 1\"\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('26') == '6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1'\nassert solution('2') == '2\\n1 2\\n2 1'\nassert solution('8') == '4\\n1 8\\n2 3\\n3 2\\n8 1'\n\"\"\""
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"4\"\nassert solution(\"26\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\") == 4\nassert solution(\"2\") == 2\nassert solution(\"1\") == 1\n\n\n\n\"\"\""
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"26\") == \"6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1\"\nassert solution(\"2\") == \"2\\n1 2\\n2 1\"\nassert solution(\"8\") == \"4\\n1 8\\n2 3\\n3 2\\n8 1\""
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '2\\n1 2'\nassert solution('8') == '4\\n1 8\\n2 3\\n3 2\\n8 1'\nassert solution('26') == '6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1'\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('26') == '6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1'\nassert solution('2') == '2\\n1 2\\n2 1'\nassert solution('8') == '4\\n1 8\\n2 3\\n3 2\\n8 1'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('26') == '6'\nassert solution('2') == '2'\nassert solution('8') == '4'\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"26\") == \"6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1\"\nassert solution(\"2\") == \"2\\n1 2\\n2 1\"\nassert solution(\"8\") == \"4\\n1 8\\n2 3\\n3 2\\n8 1\""
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 31 30 31\") == \"YES\"\nassert solution(\"2 30 31\") == \"NO\"\nassert solution(\"31 31 30 31 30\") == \"YES\"\nassert solution(\"30 30\") == \"NO\"\nassert solution(\"31 31 28\") == \"YES\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 31 31 30 31') == 'YES'\nassert solution('2 30 30') == 'NO'\nassert solution('5 29 31 30 31 30') == 'YES'\nassert solution('3 31 28') == 'NO'\nassert solution('3 31 31 28') == 'YES'\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 31 31 30 31') == 'Yes'\nassert solution('2 30 30') == 'No'\nassert solution('5 29 31 30 31 30') == 'Yes'\nassert solution('3 31 28') == 'No'\nassert solution('3 31 31 28') == 'Yes'\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('31 31 30 31') == 'YES'\nassert solution('30 30') == 'NO'\nassert solution('29 31 30 31 30') == 'YES'\nassert solution('31 31 28') == 'NO'\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n31 31 30 31 30\") == \"Yes\"\nassert solution(\"3\\n31 31 28\") == \"No\"\nassert solution(\"4\\n31 31 30 31\") == \"Yes\"\nassert solution(\"2\\n30 30\") == \"No\"\nassert solution(\"1\\n31 31 30 31 30\") == \"Yes\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 31 31 30 31\") == \"Yes\"\nassert solution(\"2 30 30\") == \"No\"\nassert solution(\"5 29 31 30 31 30\") == \"Yes\"\nassert solution(\"3 31 28\") == \"No\"\nassert solution(\"3 31 31 28\") == \"Yes\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1 1\") == \"YES\"\nassert solution(\"0 0 0 0 0\") == \"YES\"\nassert solution(\"0 0 0 0 0\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n31 31 30 31\") == \"Yes\"\nassert solution(\"2\\n30 30\") == \"No\"\nassert solution(\"5\\n29 31 30 31 30\") == \"Yes\"\nassert solution(\"3\\n31 31 28\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 31 31 30 31') == 'Yes'\nassert solution('2 30 30') == 'No'\nassert solution('5 29 31 30 31 30') == 'Yes'\nassert solution('3 31 28') == 'No'\nassert solution('3 31 31 28') == 'Yes'\n\"\"\""
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 31 30 31\") == \"Yes\"\nassert solution(\"2 30 30\") == \"No\"\nassert solution(\"5 29 31 30 31 30\") == \"Yes\"\nassert solution(\"3 31 28\") == \"No\"\nassert solution(\"3 31 31 28\") == \"Yes\"\n\"\"\"\n\nn = int(input())\ndays = list(map(int, input().split()))\n\nprev_month = 0\nprev_month_n = 0\n\nfor i in range(n):\n    if prev_month + days[i] < days[i]:\n        break\n    prev_month_n += 1\n    prev_month = prev_month + days[i]"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"10\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"1\") == \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"1010\") == \"NO\"\nassert solution(\"10110\") == \"NO\""
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == \"NO\"\nassert solution(6) == \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"10\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == 'YES\\n2\\n1 3'\nassert solution(\"2\") == 'NO'\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\") == 'YES\\n2\\n1 3'\nassert solution(\"12\") == 'NO'\nassert solution(\"11\") == 'YES\\n2'\n\"\"\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"6\") == \"YES\\n2\\n1 2\"\n\"\"\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 'NO'\nassert solution('6') == 'YES'\nassert solution('9') == 'YES'\n\n\"\"\""
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"YES\\n2\\n1 3\"\n\"\"\"\n\nn = int(input())\n\nflag = True\n\nfor i in range(2, n):\n    if n % i == 0:\n        flag = False"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7\\n3 3 4 1\") == 3\nassert solution(\"3 3 4 1\") == 2\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na, b = map(int, sys.stdin.readline().split())\nh = list(map(int, sys.stdin.readline().split()))\n\nans = float('inf')\nlast_good = 0\nfor i in range(n):\n    if h[i] - last_good > b:\n        ans = min(ans, (h[i] - last_good) - b)\n    elif h[i] - last_good > a:\n        ans = min(ans, h[i] - last_good)\n    else:\n        last_good = h[i]"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 7\\n3 3 4 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 3 1\\n') == '4'\nassert solution('3 3\\n2 2 2\\n') == '-1'\nassert solution('4 5\\n1 3 1\\n') == '7'\nassert solution('1 5\\n3\\n') == '-1'\nassert solution('1 5\\n3\\n') == '-1'\n\"\"\"\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 7\\n3 3 4 1\") == \"3\"\nassert solution(\"3 3 4 1\") == \"2\"\nassert solution(\"3 3 4 1\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n4\n5 7\n3 3 4 1\n\"\"\") == \"3\"\n\n\"\"\"\nIn the first test, Vasya can paint the fence in the following order: 3rd, 4th, 1st, 2nd. The total length of contact between the neighboring boards of various colors is 3+4+1+2=10.\n\nThe 2nd test has a similar fence, but the first and the third boards are painted green, so the unattractiveness value is 2+3+1+1=6.\n\nIn the third test, Vasya can not paint the fence at all, so the unattractiveness value is 0.\n\"\"\""
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 7\") == \"3\"\nassert solution(\"3 3 4 1\") == \"2\"\nassert solution(\"3 3 2 1\") == \"2\"\nassert solution(\"3 3 3 1\") == \"1\"\nassert solution(\"4 3 3 1\") == \"0\"\n\"\"\"\n\nn = int(stdin.readline())\narea = stdin.readline().split(' ')\nmax_height = int(max(area))\nmin_height = int(min(area))\n\nmin_diff = max_height - min_height + 1"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n5 7\n3 3 4 1''') == '3'\nassert solution('''3\n3 3\n2 2 2''') == '-1'\nassert solution('''3\n3 3\n2 2 1''') == '2'"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n3 3 4 1') == '3'\n\"\"\"\n\nn = int(input())\na, b = map(int, input().split())\nh = [int(i) for i in input().split()]\nres = 0\nfor i in range(n - 1):\n    res += min(h[i], h[i + 1])"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '0'\nassert solution('2 3\\n1 3 1\\n') == '0'\nassert solution('4 3\\n2 2 2\\n') == '1'\nassert solution('3 3\\n2 2 2\\n') == '-1'\n\nprint('The local tests are done. Click on \"Check\" for more cases.')\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 4 1\") == \"3\", \"case 1\"\nassert solution(\"2 3 4 1\") == \"2\", \"case 2\"\nassert solution(\"1 1 2 2\") == \"1\", \"case 3\"\nassert solution(\"1 2 2 3 3\") == \"1\", \"case 4\"\n\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 3\") == \"YES\"\nassert solution(\"4 4 7\") == \"NO\""
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 3\") == \"YES\\n1 0\\n2 3\\n4 1\"\nassert solution(\"4 4 7\") == \"NO\"\nassert solution(\"10 10 9\") == \"YES\\n2 6\\n8 6\\n10 8\""
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 3') == 'YES'\nassert solution('4 4 7') == 'NO'\nassert solution('4 4 10') == 'YES'\nassert solution('4 4 4') == 'NO'\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == 'YES' or solution(input()) == 'NO'\n\n-------Test Input-------\n1\n1\n1\n\n-------Test Output-------\nYES\n\n-------Explanation-------\n0 0\n\n-------Explanation-------\nThe triangle with vertices in the input coordinates is the input triangle.\n\n-------\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == sys.stdin.read()\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 3\") == \"YES\\n2 1\\n1 2\"\nassert solution(\"4 4 7\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 3\") == \"YES\"\nassert solution(\"4 4 7\") == \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 3') == 'YES\\n1 0\\n2 3\\n4 1'\nassert solution('4 4 7') == 'NO'\n\n\n-----Test 5-----\n\nInput\n2 1 2\n\nOutput\nYES\n0 0\n1 1\n1 1\n\nInput\n2 1 1\n\nOutput\nYES\n0 0\n1 1\n1 1\n\n\n-----Test 6-----\n\nInput\n1 1 1\n\nOutput\nYES\n0 0\n1 1\n1 1\n\nInput\n1 1 3\n\nOutput\nNO\n\n\n-----Test 7-----\n\nInput\n5 6 8\n\nOutput\nNO\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 3\") == \"YES\"\nassert solution(\"4 4 7\") == \"NO\"\nassert solution(\"4 4 7\") == \"YES\"\nassert solution(\"4 4 6\") == \"NO\"\nassert solution(\"4 4 5\") == \"YES\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 3\") == \"YES\\n1 0\\n2 3\\n4 1\"\nassert solution(\"4 4 7\") == \"NO\"\n\"\"\""
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('10 4') == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == 'YES'\nassert solution(\"10 4\") == 'NO'\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '1 1'\n) == 'YES'\nassert solution(\n    '10 4'\n) == 'NO'\n\"\"\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\n\"\"\"\nimport os\nimport sys\n\nsys.setrecursionlimit(320000)"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('10 4') == 'NO'\nassert solution('10 10') == 'NO'\nassert solution('11 3') == 'YES'\nassert solution('1 1') == 'YES'"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('10 4') == 'NO'\nassert solution('5 5') == 'YES'\nassert solution('10 1') == 'YES'\nassert solution('10 10') == 'NO'\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == 'YES'\nassert solution(\"10 4\") == 'NO'\nassert solution(\"1 1\") == 'YES'\nassert solution(\"10 10\") == 'YES'\nassert solution(\"1 100\") == 'NO'\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 10\") == \"back\"\nassert solution(\"2 8\") == \"biceps\"\nassert solution(\"7 3 2 7 9 6 8\") == \"chest\"\n\"\"\""
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 8\") == \"biceps\"\nassert solution(\"3 5 10\") == \"back\"\nassert solution(\"7 3 2 7 9 6 8\") == \"chest\"\nassert solution(\"3 5 2 7 9 6 8\") == \"biceps\"\nassert solution(\"4 10 9 7 6 5 3 2\") == \"back\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7\n3 3 2 7 9 6 8\n''') == \"chest\"\nassert solution('''5\n1 1 10 10 10\n''') == \"biceps\"\nassert solution('''5\n8 1 8 1 1\n''') == \"back\"\nassert solution('''2\n8 1\n''') == \"biceps\"\nassert solution('''1\n5\n''') == \"chest\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 8\") == 'biceps'\nassert solution(\"3 5 1 10\") == 'back'\nassert solution(\"7 3 3 2 7 9 6 8\") == 'chest'"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 8\") == \"biceps\"\nassert solution(\"3 5 10\") == \"back\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nprint('biceps' if max(a) == sum(a)//2 else 'chest' if max(a) == sum(a)//2 else 'back')"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 8\\n\") == \"biceps\"\nassert solution(\"3 5 1 10\\n\") == \"back\"\nassert solution(\"7 3 3 2 7 9 6 8\\n\") == \"chest\"\n\"\"\""
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n8\\n') == 'biceps'\nassert solution('3\\n5 1 10\\n') == 'back'\nassert solution('7\\n3 3 2 7 9 6 8\\n') == 'chest'\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 8') == 'biceps'\nassert solution('3 5 10') == 'back'\nassert solution('7 3 2 7 9 6 8') == 'chest'\nassert solution('6 1 2 3 4 5 6') == 'back'\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 8') == 'biceps'\nassert solution('3 5 1 10') == 'back'\nassert solution('7 3 3 2 7 9 6 8') == 'chest'\n\"\"\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 8\") == 'biceps'\nassert solution(\"3 5 1 10\") == 'back'\nassert solution(\"7 3 3 2 7 9 6 8\") == 'chest'"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 3 5') == '1'\nassert solution('5 4 4') == '0'\nassert solution('5 4 5') == '0'\nassert solution('5 5 5') == '0'\nassert solution('5 5 4') == '1'\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n4 4 4') == '2'\nassert solution('4\\n5 4 5 5') == '0'\nassert solution('4\\n5 3 3 5') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4 4 4\") == \"2\"\nassert solution(\"4\\n5 4 5 5\") == \"0\"\nassert solution(\"4\\n5 3 3 5\") == \"1\"\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 4\") == \"2\"\nassert solution(\"5 4 5 5\") == \"0\"\nassert solution(\"5 3 3 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4 4 4') == '2'\nassert solution('4\\n5 4 5 5') == '0'\nassert solution('4\\n5 3 3 5') == '1'\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 4') == '2'\nassert solution('5 3 3 5') == '1'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(' ')))\n\naverage = sum(a)/n\n\nred = 0\nfor i in range(n):\n    if a[i] < average:\n        red += average - a[i]\nprint(red)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n4 4 4\\n') == '2'\nassert solution('4\\n5 3 3 5\\n') == '0'\nassert solution('4\\n5 3 3 5\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 4\") == \"2\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"4 5 3 5\") == \"1\"\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4 4 4\") == \"2\"\nassert solution(\"4\\n5 3 3 5\") == \"0\"\nassert solution(\"4\\n5 4 5 5\") == \"1\"\nprint('test passed')"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n4 4 4') == '2'\nassert solution('4\\n5 4 5 5') == '0'\nassert solution('4\\n5 3 3 5') == '1'\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4') == '2\\n3 1'\nassert solution('1 3') == '3\\n1 1 1'\nassert solution('8 5') == '-1'\nassert solution('0 0') == '0'\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4') == '2'\nassert solution('1 3') == '3'\nassert solution('8 5') == '-1'\nassert solution('0 0') == '0'\n\"\"\"\n\nfrom sys import stdin, stdout\n\nstdout.write(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"1 1 1\"\nassert solution(\"1 3\") == \"3 1 1\"\nassert solution(\"8 5\") == \"-1\"\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4') == '2'\nassert solution('1 3') == '3'\nassert solution('8 5') == '-1'\nassert solution('0 0') == '0'\n\n\n'''\n\nfrom typing import List\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1\") == \"1\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"8 5\") == \"-1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"0 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4') == '2'\nassert solution('1 3') == '3 1'\nassert solution('8 5') == '-1'\nassert solution('0 0') == '0'\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"1 3\") == \"3 1\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"8 5\") == \"-1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3') == '2 1'\nassert solution('2 4') == '2'\nassert solution('8 5') == '-1'\nassert solution('0 0') == '0'"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"2 1\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"8 5\") == \"-1\"\nassert solution(\"0 0\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('121') == '6'\n\"\"\"\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"121\") == 6\n\"\"\"\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('121') == 6\nassert solution('12110') == 3\n\"\"\"\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('121') == 6\nassert solution('101010') == 1\nassert solution('111111') == 0\nassert solution('2') == 1\nassert solution('100000000') == 1\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"121\") == 6\n\"\"\""
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"121\") == \"6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('121') == 6\n\"\"\"\n\nn = input()\n\nl = len(n)\nprint(l)\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 0\nassert solution('2') == 1\nassert solution('11') == 2\nassert solution('111') == 3\nassert solution('1111') == 4\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"121\") == 6\nassert solution(\"1211\") == 3\nassert solution(\"11\") == 2\nassert solution(\"11111\") == 1\nassert solution(\"11111111\") == 0\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12345\") == 1\n\"\"\"\n\nn = input()\ncount = 0\nfor i in range(len(n)):\n    if n[i] == \"1\":\n        count += 1\nprint(count)\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 6\") == \"YES\"\nassert solution(\"1 1 3 6\") == \"NO\"\n\n\"\"\"\n\nimport sys\nx_1, y_1, x_2, y_2 = map(int, sys.stdin.readline().split())\nx, y = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 3 6\") == \"NO\"\nassert solution(\"0 0 0 6\") == \"YES\"\n\n\"\"\"\n\nimport sys\n\ninputs = iter(sys.stdin)\n\nx1, y1, x2, y2 = map(int, next(inputs).split())\nx, y = map(int, next(inputs).split())"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 6\") == \"YES\"\nassert solution(\"1 1 3 6\") == \"NO\"\n\n\"\"\"\n\nx1, y1, x2, y2 = map(int, input().split())\na, b = map(int, input().split())"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"0 0 0 6\\n2 3\"\n) == \"YES\"\nassert solution(\n    \"1 1 3 6\\n1 5\"\n) == \"NO\"\n\"\"\""
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 6\") == \"YES\"\nassert solution(\"1 1 3 6\") == \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 6\\n1 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0 0 6\\n2 3') == 'YES'\nassert solution('1 1 3 6\\n1 5') == 'NO'\n\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 6\") == \"YES\"\nassert solution(\"1 1 3 6\") == \"NO\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 6\") == \"YES\"\nassert solution(\"1 1 3 6\") == \"NO\"\n\"\"\""
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == \"NO\"\nassert solution('3 5') == \"YES\"\nassert solution('1 1 1 1') == \"YES\"\nassert solution('3 5 6 7') == \"NO\"\nassert solution('3 5 6 6') == \"YES\"\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"97\") == \"2\"\nassert solution(\"2028\") == \"13\"\n\n\"\"\"\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"80\") == \"5\"\nassert solution(\"2028\") == \"13\"\nassert solution(\"2\") == \"1\"\n\"\"\"\nfrom typing import List, Dict"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('97') == '2'\nassert solution('2028') == '13'\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"97\") == \"2\"\nassert solution(\"2028\") == \"13\""
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('97') == 2\nassert solution('2028') == 13\n\"\"\"\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"97\") == \"2\"\nassert solution(\"2028\") == \"13\"\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2028') == 13\nassert solution('97') == 2\n\"\"\"\n\nn = input().strip()\n\nwhile len(n) > 1:\n    n = int(n)\n    n = list(str(n))\n    n = sorted(n)\n    n = int(''.join(n))\n\nprint(n)\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"97\") == \"2\"\nassert solution(\"2028\") == \"13\"\nassert solution(\"77\") == \"6\"\nassert solution(\"10203\") == \"5\"\nassert solution(\"11122233\") == \"10\"\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123456\") == \"0\"\nassert solution(\"2028\") == \"13\"\nassert solution(\"20201\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2022\") == \"5\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('97') == '2'\nassert solution('2028') == '13'\nassert solution('92') == '1'\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6') == '325'\nassert solution('17\\n14\\n5\\n21\\n15\\n17') == '325'\n\n\"\"\"\n\n\n\n\n\nimport sys\n\nassert sys.version_info >= (3, 7) # make sure we have Python 3.7+\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6') == '102'\nassert solution('17\\n14\\n5\\n21\\n15\\n17') == '325'\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n6\\n3\\n1\\n2\") == \"6\"\nassert solution(\"12\\n11\\n13\\n20\\n4\\n6\") == \"102\"\nassert solution(\"17\\n14\\n5\\n21\\n15\\n17\") == \"325\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6') == '102'\nassert solution('17\\n14\\n5\\n21\\n15\\n17') == '325'\n\n\"\"\"\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6') == '102'\nassert solution('17\\n14\\n5\\n21\\n15\\n17') == '325'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n6\\n3\\n1\\n2\") == '6'\nassert solution(\"12\\n11\\n13\\n20\\n4\\n6\") == '102'\nassert solution(\"17\\n14\\n5\\n21\\n15\\n17\") == '325'\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6') == '102'\nassert solution('17\\n14\\n5\\n21\\n15\\n17') == '325'\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n6\\n3\\n1\\n2\") == \"6\"\nassert solution(\"12\\n11\\n13\\n20\\n4\\n6\") == \"102\"\nassert solution(\"17\\n14\\n5\\n21\\n15\\n17\") == \"325\"\nassert solution(\"6\\n6\\n6\\n6\\n6\\n6\") == \"27\"\nassert solution(\"5\\n7\\n8\\n5\\n9\\n5\") == \"72\"\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 6 3 1 2\") == '6'\nassert solution(\"12 11 13 20 4 6\") == '102'\nassert solution(\"17 14 5 21 15 17\") == '325'\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2\\n') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6\\n') == '102'\nassert solution('17\\n14\\n5\\n21\\n15\\n17\\n') == '325'\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 5 8') == 2\n\"\"\"\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 5 8\") == \"2\"\nassert solution(\"4 6 7 13\") == \"1\"\n\n\n\n-----Python Code-----\n\na,b,p,x = [int(s) for s in stdin.split(\" \")]\nl = []\nfor i in range(a,p):\n    if i*pow(a,i,p)==b:\n        l.append(i)\nprint(len(l))"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 7 13\") == \"1\"\n\"\"\""
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 5 8\") == \"2\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 5 8\") == 2\nassert solution(\"4 6 7 13\") == 1\nassert solution(\"233 233 10007 1\") == 1\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 5 8\") == '2'\nassert solution(\"4 6 7 13\") == '1'\nassert solution(\"233 233 10007 1\") == '1'\n\"\"\"\n\n\"\"\"\nimport math\n\na, b, p, x = map(int, input().split())\n\nprint(len([i for i in range(1, x + 1) if i % a**(math.log(i, a) + 1) == b % a**(math.log(i, a) + 1)]))\n\"\"\"\n\nfrom sympy.ntheory.modular import solve_congruence\n\na, b, p, x = map(int, input().split())\n\nprint(len(solve_congruence((a, b, p), (0, x, 1))))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 5 8\") == \"2\"\nassert solution(\"4 6 7 13\") == \"1\"\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\n---\n\u7b2c\u4e00\u500b\u7bc0\u9ede\u89e3\nThe first node of the solution."
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6 7 13') == 1\nassert solution('233 233 10007 1') == 1\nassert solution('2 3 5 8') == 2\nassert solution('1 2 4 5') == 1\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 5 8\") == \"2\"\nassert solution(\"4 6 7 13\") == \"1\"\nassert solution(\"233 233 10007 1\") == \"1\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 3 4') == '800'\nassert solution('1 1 1 1') == '256'\nassert solution('1 1 1 1') == '256'\n\"\"\"\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 3 4\") == \"800\"\nassert solution(\"1 1 1 1\") == \"256\"\nassert solution(\"5 1 1 1\") == \"256\"\nassert solution(\"3 2 1 1\") == \"77\"\nassert solution(\"5 1 1 1\") == \"256\"\n\"\"\""
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 3 4\") == \"800\"\nassert solution(\"1 1 1 1\") == \"256\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 3 4') == '800'\n\"\"\"\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 3 4\") == '800'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1\") == \"256\"\nassert solution(\"1 1 1 1\") == \"256\"\nassert solution(\"1 1 1 1\") == \"256\"\n\nassert solution(\"2 1 3 4\") == \"800\"\nassert solution(\"2 1 3 4\") == \"800\"\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 4\") == \"800\"\nassert solution(\"1 1 1 1\") == \"256\""
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 3 4\") == \"800\"\nassert solution(\"1 1 1 1\") == \"256\"\nassert solution(\"2 1 2 1 1 1 1\") == \"254\"\nassert solution
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 3 4') == '800'\n\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5 1 3 4') == '800'\nassert solution('1 1 1 1') == '256'"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 5 3 1') == '0'\nassert solution('8 3 9 1') == '2'\nassert solution('3 2 7 6') == '0'\nassert solution('3 1 7 2') == '0'\nassert solution('4 4 4 1') == '4'\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2 1\") == 0\nassert solution(\"9 3 8 10\") == 2\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 4 3 1\") == 0\nassert solution(\"9 3 8 10\") == 2"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 3 8 10\") == \"2\"\nprint(\"Test passed\")\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 4 3 1\") == \"0\"\nassert solution(\"9 3 8 10\") == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 3 8 10') == 2\n\"\"\""
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 4 3 1') == '0'\nassert solution('9 3 8 10') == '2'\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 3 1') == '0'\nassert solution('9 3 8 10') == '2'\n\n\"\"\""
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 4 3 1') == '0'\nassert solution('9 3 8 10') == '2'\n\"\"\"\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('0 0 0 0') == 0\nassert solution('0 0 1 1') == 0\nassert solution('0 0 1 2') == 0\nassert solution('0 0 0 0') == 0\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == 3\nassert solution('8 16') == 31\nassert solution('1 1') == 0\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"15\"\n\nassert solution(\"1 2\") == \"3\"\n\nassert solution(\"8 16\") == \"31\"\n\n\"\"\""
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n') == '3'\nassert solution('8 16\\n') == '31'"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == 3\n\"\"\""
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == 3\n\n---\n\nIn the same way, in Python you will receive a space-separated string of integers on input. Write a function with one parameter \u2014 max_value, which will return the maximum value of $a \\oplus b$ for all pairs of integers $a$ and $b$ (l \u2264 a \u2264 b \u2264 r) that can be constructed from this string of integers as an input.\n\nNote, that you should check your solution for the following examples.\n\nInput\n1 2\n\nOutput\n3\n\nInput\n8 16\n\nOutput\n31\n\nInput\n1 1\n\nOutput\n0\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == 3\nassert solution(\"8 16\") == 31\n\"\"\"\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == 3\nassert solution(\"8 16\") == 31\nassert solution(\"1 1\") == 0\n\n\"\"\"\n\nimport sys\nimport os\nfrom math import log2"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 16\") == \"31\"\n\"\"\""
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n') == '3'\nassert solution('8 16\\n') == '31'\n\"\"\"\nimport sys"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == 3\nassert solution(\"1 1\") == 0\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == '1'\nassert solution('4 12') == '3'\nassert solution('999999999999999999 999999999999999986') == '1'\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\nm = [0] * (n+1)\n\nm[1] = 1\n\nfor i in range(1, n):\n    m[i+1] = m[i] + 1\n    if i % 2 == 0:\n        m[i+1] = min(m[i+1], m[i]+1)\n\nprint(m[n])\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 12\") == \"3\"\n\"\"\"\nimport math\nfrom typing import List\n\nclass Solution:\n    \"\"\"O(n^2)\"\"\"\n    def minHeight(self, n: int, k: int) -> int:\n        dp = [math.inf] * (k+1)\n        dp[0] = 0\n\n        for i in range(n):\n            for j in range(k, 0, -1):\n                if j % 2 == 1:\n                    dp[j] = min(dp[j], dp[j-1] + 1)\n                else:\n                    dp[j] = min(dp[j], dp[j//2] + 1)\n\n        return dp[-1]\n\n\nclass Solution2:\n    \"\"\"O(n)\"\"\"\n    def minHeight(self, n: int, k: int) -> int:\n        dp = [math.inf] * (k+1)\n        dp[0] = 0\n        for i in range(n):\n            for j in range(k, 0, -1):\n                dp[j] = min(dp[j], dp[j//2] + 1) if j % 2 == 1 else min(dp[j], dp[j-1] + 1)\n        return dp[-1]\n\n\nimport math\nfrom collections import deque\n\n\nclass Solution3:\n    \"\"\"O(nlogn)\"\"\"\n    def minHeight(self, n: int, k: int) -> int:\n        dp = [math.inf] * (k+1)\n        dp[0] = 0\n\n        queue = deque()\n        queue.append(n)\n\n        while queue:\n            i = queue.popleft()\n            for j in range(k, 0, -1):\n                dp[j] = min(dp[j], dp[j//2] + 1) if j % 2 == 1 else min(dp[j], dp[j-1] + 1)\n\n                if j == 1:\n                    queue.append(i - 1)\n                    queue.append(i - 1)\n                elif j % 2 == 0:\n                    queue.append(i - 1)\n                else:\n                    queue.append(i)\n\n        return dp[-1]\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 12\") == \"3\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\n\nprint(solution(input()))\n\n#########################################################################"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 12\") == \"3\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3 9') == '3'\nassert solution('3 12') == '1'\nassert solution('999999999999999999 999999999999999986') == '1'"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 12\") == \"3\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3') == '1'\nassert solution('4 12') == '3'\nassert solution('999999999999999999 999999999999999986') == '1'\nassert solution('4 12') == '3'\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('1') == '0'\nassert solution('1\\n1') == '0'\nassert solution('1\\n2\\n1') == '0'\nassert solution('1\\n2\\n3\\n1') == '1'\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 12\") == \"3\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 12\") == \"3\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\n\"\"\"\n\n\"\"\"\n\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0432\u0435 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u043e\u0434\u043d\u0443 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0437\u0430 $3$ \u043c\u0438\u043d\u0443\u0442\u044b. \u0412\u0442\u043e\u0440\u0443\u044e \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0443 \u043f\u0440\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0437\u0430 $1$ \u043c\u0438\u043d\u0443\u0442\u0443. \u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0447\u0442\u043e \u0432\u0442\u043e\u0440\u0430\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u0437\u0430\u043d\u044f\u043b\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0447\u0435\u043c \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430. \u041a\u0430\u043a\u043e\u0432\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0442\u043e\u0440\u0443\u044e \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0443 \u043e\u0442\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u0430 $10$ \u043c\u0438\u043d\u0443\u0442, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0443\u044e \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0443 \u043f\u0440\u043e\u0434\u0430\u043b\u0438 \u0437\u0430 $7$ \u043c\u0438\u043d\u0443\u0442? \n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u0443\u044e \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 $n$ \u0438 $k$ ($1 \\leq n, k \\leq 10^5$) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0438\u043d\u0443\u0442, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u043d\u044f\u043b\u043e \u0432\u0441\u0435 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u043e\u0442\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0435.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e $t$ ($0 \\leq t \\leq 10^9$) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0438\u043d\u0443\u0442 \u043e\u0442\u043a\u0430\u0437\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u043b\u043e\u0432: \u00abYES\u00bb \u0438\u043b\u0438 \u00abNO\u00bb.\n\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5 1 4 4 2 1\n10\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\nYES\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 7 4 1 2\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"YES\"\nassert solution(\"2 1 3 4 5 6\") == \"NO\"\nassert solution(\"1 2 3 4 5 6\") == \"YES\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 4 4 2 1') == 'YES'\nassert solution('1 6 6 2 1 1') == 'NO'\nassert solution('4 1 7 4 1 2') == 'YES'\n\n\"\"\""
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\""
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '2'\n\"\"\"\n\n\nfrom math import inf\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"5 3\") == \"4\"\n\"\"\""
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 3\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"5 2\") == \"4\"\n\nimport sys\nimport random"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '2'\n\"\"\"\nimport math\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nprint(solution(stdin))\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"8 2\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n') == '2'\n\nassert solution('4 3\\n') == '2'\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 3\") == \"2\"\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n0 1 0 1 1\\n') == '4'\nassert solution('7\\n1 0 1 0 0 1 0\\n') == '4'\nassert solution('1\\n0\\n') == '0'\n\"\"\""
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n0 1 0 1 1\n''') == '4'\nassert solution('''7\n1 0 1 0 0 1 0\n''') == '4'\nassert solution('''1\n0\n''') == '0'\n\"\"\"\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 1 0 1 1 1\") == \"4\"\nassert solution(\"7\\n1 0 1 0 0 1 0\") == \"4\"\nassert solution(\"1\\n0\") == \"0\"\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 1 0 1 1 1\") == \"4\"\nassert solution(\"7\\n1 0 1 0 0 1 0\") == \"4\"\nassert solution(\"1\\n0\") == \"0\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\ncount = 0\nstatus = True\nfor i in range(n):\n    if arr[i] == 1:\n        count += 1\n    else:\n        if status and count > 0:\n            count = 0\n            status = False\n\nprint(count)"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n0 1 0 1 1 1') == '4'\nassert solution('7\\n1 0 1 0 0 1 0') == '4'\nassert solution('1\\n0') == '0'\n\"\"\"\nimport sys"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n0 1 0 1 1 1') == 4\nassert solution('7\\n1 0 1 0 0 1 0') == 4\nassert solution('1\\n0') == 0\nassert solution('7\\n0 1 0 0 1 0') == 3\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 0 1 1 1\") == \"4\"\nassert solution(\"7 1 0 1 0 0 1 0\") == \"4\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n0 1 0 1 1\n''') == '4'\nassert solution('''7\n1 0 1 0 0 1 0\n''') == '4'\nassert solution('''1\n0\n''') == '0'\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 1 0 1 1 1\") == \"4\"\nassert solution(\"7\\n1 0 1 0 0 1 0\") == \"4\"\nassert solution(\"1\\n0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n2') == '1'\nassert solution('2 9\\n10 10 10') == '-1'\nassert solution('3 17\\n10 10 10') == '2'\nassert solution('1 9\\n10') == '-1'\nassert solution('1 1\\n1') == '-1'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 9\") == \"3\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"1 9\") == \"-1\"\n\"\"\""
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\") == 2\n\nassert solution(\"2 6\") == -1\n\nassert solution(\"1 9\") == -1\n\n\"\"\""
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2') == '2'\nassert solution('3 17\\n10 10 10') == '3'\nassert solution('1 9\\n10') == '-1'\n\"\"\""
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 2') == '2'\nassert solution('3 17\\n10 10 10') == '3'\nassert solution('1 9\\n10') == '-1'\n\nimport sys\n\nlines = sys.stdin.readlines()\nlines = [line.strip() for line in lines]\nlines = lines[1:]\nlines = [list(map(int, line.split())) for line in lines]\nn, k = lines[0]\na = lines[1]\n\nx = [0] * n\ny = [0] * n\n\nfor i in range(n):\n    x[i] = i + 1\n    y[i] = a[i]\n\nl = 1\nr = n\nmid = 0\nwhile l <= r:\n    mid = (l + r) // 2\n    if y[mid] < k:\n        l = mid + 1\n    else:\n        r = mid - 1\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 17\\n10 10 10\") == \"3\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '2'\nassert solution('4 1') == '-1'\nassert solution('3 17') == '3'\nassert solution('1 9') == '-1'\n\nprint('Success')"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 2') == '2'\nassert solution('3 17\\n10 10 10') == '3'\nassert solution('1 9\\n10') == '-1'\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 2\") == 2\nassert solution(\"3 17\\n10 10 10\") == 3\nassert solution(\"1 9\\n10\") == -1\nassert solution(\"3 9\\n10 10 10\") == -1\nassert solution(\"1 9\\n10\") == -1\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 2 0\") == \"2 3 2\"\nassert solution(\"6 0 2 0 0 3\") == \"2 3 2 4 5\"\nassert solution(\"3 1 0 0 0 0 0\") == \"0 1 0\"\nassert solution(\"4 6 2 0 0 0 0\") == \"0 0 0 0\"\nassert solution(\"3 1 2 3 4 5 6\") == \"0 0 0 0\""
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n2 0 1\") == \"4\"\nassert solution(\"4 6\\n2 4 3 5\") == \"0\"\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5\\n0 0 0\\n') == '0'\nassert solution('3 5\\n0 0 1\\n') == '0'\nassert solution('4 6\\n2 4 3 5\\n') == '0'\nassert solution('2 5\\n0 0 1\\n') == '0'\nassert solution('3 5\\n0 0 1\\n') == '0'\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n2 0 1\") == \"4\"\nassert solution(\"3 1\\n0 0 0\") == \"1\"\nassert solution(\"4 6\\n2 4 3 5\") == \"0\"\n\"\"\"\nimport sys\nimport numpy as np"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 0 1\\n\") == \"4\\n2 3 2\"\n\"\"\"\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 5\n2 0 1\n''') == '4'\n\nassert solution('''3 1\n0 0 0\n''') == '1'\n\nassert solution('''4 6\n2 4 3 5\n''') == '0'\n\nassert solution('''4 6\n2 4 3 5\n''') == '2 4 3 5'\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6\\n2 4 3 5') == '0\\n2 4 3 5'\nassert solution('3 1\\n0 0 0') == '1\\n0 1 0'\nassert solution('3 5\\n2 0 1') == '4\\n2 3 2'\nassert solution('3 5\\n2 0 1\\n2 4 3 5') == '4\\n2 3 2'\nassert solution('3 1\\n0 0 0\\n1') == '1\\n0 1 0'\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 0 1\\n\") == \"4\\n2 3 2\"\nprint('Test pass.')\n\nassert solution(\"3 1\\n0 0 0\\n\") == \"1\\n0 1 0\"\nprint('Test pass.')\n\nassert solution(\"4 6\\n2 4 3 5\\n\") == \"0\\n2 4 3 5\"\nprint('Test pass.')\n\nassert solution(\"3 1\\n0 0 0\\n\") == \"1\\n0 1 0\"\nprint('Test pass.')\n\nassert solution(\"1 1\\n0 0\\n\") == \"1\\n0 1\"\nprint('Test pass.')\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5\\n2 0 1') == '4\\n2 3 2'\nassert solution('4 6\\n2 4 3 5') == '0\\n2 4 3 5'\nassert solution('3 1\\n0 0 0') == '1\\n0 1 0'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 0 1\") == \"4\\n2 3 2\"\n\n\"\"\"\n\nfrom collections import deque\nimport sys\nimport heapq"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"13\"\nprint(\"Test passed\")\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 1\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '5'\nassert solution('3') == '13'\n\"\"\""
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"13\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '5'\nassert solution('3') == '13'\nassert solution('4') == '25'\nassert solution('5') == '41'\n\n\"\"\""
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 5\nassert solution(\"3\") == 13\nassert solution(\"4\") == 29\nassert solution(\"5\") == 49\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '5'\nassert solution('3') == '13'\n\n\"\"\"\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '5'\nassert solution('3') == '13'\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '5'\nassert solution('3') == '13'\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"13\"\n\"\"\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"toosmallword\") == 'NO'\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == 'YES'\n\nprint(solution('toosmallword'))\nprint(solution('TheQuickBrownFoxJumpsOverTheLazyDog'))\n\"\"\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\nassert solution(\"toosmallword\") == \"NO\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\nassert solution(\"toosmallword\") == \"NO\"\n\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test1) == \"YES\"\nassert solution(test2) == \"NO\"\n\"\"\"\n\nn = int(input())\ns = input()\n\nimport string\n\nl = list(string.ascii_lowercase)\nu = list(string.ascii_uppercase)\n\nlst = [0 for _ in range(len(l))]\nlst1 = [0 for _ in range(len(u))]\n\nfor c in s:\n    if c in l:\n        lst[l.index(c)] += 1\n    if c in u:\n        lst1[u.index(c)] += 1\n\nprint(\"YES\" if all(i > 0 for i in lst) and all(i > 0 for i in lst1) else \"NO\")\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\nassert solution(\"The Quick Brown Fox Jumps Over The Lazy Dog\") == \"NO\"\nassert solution(\"The quick brown fox jumps over the lazy dog\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\nassert solution(\"toosmallword\") == \"NO\"\nassert solution(\"The\") == \"YES\"\nassert solution(\"\") == \"YES\"\nassert solution(\"A\") == \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('toosmallword') == 'NO'\nassert solution('TheQuickBrownFoxJumpsOverTheLazyDog') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('toosmallword') == 'NO'\nassert solution('TheQuickBrownFoxJumpsOverTheLazyDog') == 'YES'"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"toosmallword\") == \"NO\"\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10:10\") == \"10:10\"\nassert solution(\"20:20\") == \"22:21\"\nassert solution(\"23:59\") == \"00:09\"\nassert solution(\"10:20\") == \"10:20\"\nassert solution(\"12:10\") == \"12:10\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\n\"\"\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('23:59') == '00:09'\nassert solution('20:20') == '22:21'\n\"\"\"\n\nfrom datetime import datetime\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(    \"23:59\"    ) == \"00:09\"\nassert solution(    \"20:20\"    ) == \"22:21\"\nassert solution(    \"10:10\"    ) == \"10:10\"\n\"\"\""
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\nassert solution(\"10:10\") == \"10:10\"\nassert solution(\"0:10\") == \"10:10\"\n\"\"\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\nassert solution(\"10:10\") == \"10:10\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('23:59') == '00:09'\n\nassert solution('20:20') == '22:21'\n\nassert solution('10:10') == '10:10'\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\nassert solution(\"10:10\") == \"10:10\"\nassert solution(\"0:0\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('23:59') == '00:09'\nassert solution('20:20') == '22:21'\nassert solution('10:10') == '10:10'\nassert solution('00:00') == '00:00'\nassert solution('01:00') == '01:00'\n\nprint('all tests passed.')\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n10101\\n01000\\n00111\\n10000') == 'YES'\n\"\"\"\n\nimport sys\n\nassert sys.version_info >= (3, 7)\nimport numpy as np"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10101\\n01000\\n00111\\n10000\") == \"YES\"\nassert solution(\"10100\\n01000\\n00110\\n00101\") == \"NO\""
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n10101\\n01000\\n00111\\n10000') == 'YES'\n\na, b = map(int, stdin.readline().split())\n\nassert solution(stdin) == 'YES'\n\n\"\"\""
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n10101\\n01000\\n00111\\n10000\\n') == 'YES'\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10101\\n01000\\n00111\\n10000\\n\") == 'YES'\nassert solution(\"10100\\n01000\\n00110\\n00101\\n\") == 'NO'\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nlamps = [[0 for j in range(m)] for i in range(n)]\n\nfor i in range(n):\n    lamps[i] = list(map(int, stdin.readline().split()))\n\nnumbers = {}\n\nfor i in range(n):\n    for j in range(m):\n        if i == 0:\n            if lamps[i][j] == 1 and lamps[i][j] in numbers:\n                numbers[lamps[i][j]].append((i, j))\n            else:\n                numbers[lamps[i][j]] = [(i, j)]\n        else:\n            if lamps[i][j] == 1 and lamps[i][j] in numbers:\n                numbers[lamps[i][j]].append((i, j))\n            else:\n                numbers[lamps[i][j]] = [(i, j)]\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10101\\n01000\\n00111\\n10000\\n\") == \"YES\"\nassert solution(\"10101\\n01010\\n01010\\n01010\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n10101\\n01000\\n00111\\n10000\\n\") == \"YES\"\nassert solution(\"4 5\\n10100\\n01000\\n00110\\n00101\\n\") == \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n10101\\n01000\\n00111\\n10000\\n\") == \"YES\"\nassert solution(\"4 5\\n10100\\n01000\\n00110\\n00101\\n\") == \"NO\"\nassert solution(\"4 4\\n10100\\n01010\\n11110\\n11100\\n\") == \"YES\"\nassert solution(\"4 4\\n10100\\n01010\\n11110\\n11010\\n\") == \"NO\"\n\n\"\"\"\n\nn, m = input().split()\na = [input() for i in range(int(n))]\n\nres = []\nfor i in range(int(n)):\n    if '0' not in a[i] and len(set(a[i])) == len(a[i]):\n        res.append(i+1)"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n10100\\n01000\\n00110\\n00101') == 'YES'\nassert solution('4 5\\n10100\\n01010\\n00110\\n00101') == 'NO'\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10101 01010 11101 10001 10000\") == \"YES\"\n\nprint(solution(stdin))\n\n\n'''\nfrom typing import List\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == 0\nassert solution(\"6 4\") == 0\nassert solution(\"1 4\") == -1\nassert solution(\"2 3\") == -1\nassert solution(\"4 4\") == 1\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n6 4') == '0'\nassert solution('1 4\\n2 3') == '-1'\nassert solution('3 1\\n4 4') == '1'"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n4 4') == '1'\nassert solution('1 4\\n2 3') == '-1'\nassert solution('3 1\\n4 4') == '1'\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n6 4\") == \"0\"\nassert solution(\"1 4\\n2 3\") == \"-1\"\nassert solution(\"3 1\\n4 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n4 4\") == \"1\"\nassert solution(\"1 4\\n2 3\") == \"1\"\nassert solution(\"3 1\\n4 4\") == \"0\"\nassert solution(\"1 2\\n2 3\") == \"1\"\nassert solution(\"2 3\\n4 4\") == \"1\"\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n6 4') == '0'\nassert solution('1 4\\n2 3') == '-1'\nassert solution('3 1\\n4 4') == '1'"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n6 4\") == \"0\"\nassert solution(\"1 4\\n2 3\") == \"-1\"\nassert solution(\"3 1\\n4 4\") == \"1\"\nassert solution(\"2 3\\n4 4\") == \"1\"\n\n\"\"\"\n\nfrom collections import deque\nimport sys\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n6 4\") == \"0\"\nassert solution(\"1 4\\n2 3\") == \"1\"\nassert solution(\"3 1\\n2 3\\n4 4\") == \"1\""
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n6 4\") == \"0\"\nassert solution(\"1 4\\n2 3\") == \"1\"\nassert solution(\"3 1\\n4 4\") == \"1\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n6 4\") == \"0\"\nassert solution(\"1 4\\n2 3\") == \"-1\"\nassert solution(\"3 1\\n4 4\") == \"1\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33') == 'YES\\nNO\\nNO\\nYES'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\nimport math\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\\n\") == \"YES\\nNO\\nNO\\nYES\"\n\"\"\"\n\n\"\"\"\nThe length of the sides of Alice's piece of cloth is a and Bob's is b. We must have a < b, so\n\na^2 - b^2 >= 0\n\na^2 - (b + 1)^2 >= 0\n\n2a^2 - 2(b + 1)a + b^2 >= 0\n\n2a^2 - 2(b + 1)a + b^2 >= 0\n\n2a^2 - 2(b + 1)a + b^2 >= 0\n\n2a^2 - 2b^2 >= 0\n\na^2 - 2b^2 >= 0\n\na^2 >= 2b^2\n\na^2 >= 4b^2\n\na^2 >= 2b^2 + 2b + 1\n\na^2 >= 2b^2 + 2b + 2\n\na^2 >= 2b^2 + 2b + 4\n\na^2 >= 4b^2 + 4b + 8\n\na^2 >= 8b^2 + 8b + 16\n\na^2 >= 16b^2 + 16b + 32\n\na^2 >= 32b^2 + 32b + 64\n\na^2 >= 64b^2 + 64b + 128\n\na^2 >= 128b^2 + 128b + 256\n\na^2 >= 256b^2 + 256b + 512\n\na^2 >= 512b^2 + 512b + 1024\n\na^2 >= 1024b^2 + 1024b + 2048\n\na^2 >= 2048b^2 + 2048b + 4096\n\na^2 >= 4096b^2 + 4096b + 8192\n\na^2 >= 8192b^2 + 8192b + 16384\n\na^2 >= 16384b^2 + 16384b + 32768\n\na^2 >= 32768b^2 + 32768b + 65536\n\na^2 >= 65536b^2 + 65536b + 131072\n\na^2 >= 131072b^2 + 131072b + 262144\n\na^2 >= 262144b^2 + 262144b + 524288\n\na^2 >= 524288b^2 + 524288b + 1048576\n\na^2 >= 1048576b^2 + 1048576b + 2097152\n\na^2 >= 2097152b^2 + 2097152b + 4194304\n\na^2 >= 4194304b^2 + 4194304b + 8388608\n\na^2 >= 8388608b^2 + 8388608b + 16777216\n\na^2 >= 16777216b^2 + 16777216b + 33554432\n\na^2 >= 33554432b^2 + 33554432b + 67108864\n\na^2 >= 67108864b^2 + 67108864b + 134217728\n\na^2 >= 134217728b^2 + 134217728b + 268435456\n\na^2 >= 268435456b^2 + 268435456b + 536870912\n\na^2 >= 536870912b^2 + 536870912b + 1073741824\n\na^2 >= 1073741824b^2 + 1073741824b + 2147483648\n\na^2 >= 2147483648b^2 + 2147483648b + 4294967296\n\na^2 >= 4294967296b^2 + 4294967296b + 8589934592\n\na^2 >= 8589934592b^2 + 8589934592b + 17179869184\n\na^2 >= 17179869184b^2 + 17179869184b + 34359738368\n\na^2 >= 34359738368b^2 + 34359738368b + 68719476736\n\na^2 >= 68719476736b^2 + 68719476736b + 137438953472\n\na^2 >= 137438953472b^2 + 137438953472b + 274877906944\n\na^2 >= 274877906944b^2 + 274877906944b + 549755813888\n\na^2 >= 549755813888b^2 + 549755813888b + 1099511627776\n\na^2 >= 1099511627776b^2 + 1099511627776b + 2199023255552\n\na^2 >= 2199023255552b^2 + 2199023255552b + 4398046511104\n\na^2 >= 4398046511104b^2 + 4398046511104b + 8796093022208\n\na^2 >= 8796093022208b^2 + 8796093022208b + 17592186044416\n\na^2 >= 17592186044416b^2 + 17592186044416b + 35184372088832\n\na^2 >= 35184372088832b^2 + 35184372088832b + 70368744177664\n\na^2 >= 70368744177664b^2 + 70368744177664b + 140737488355328\n\na^2 >= 140737488355328b^2 + 140737488355328b + 281474976710656\n\na^2 >= 281474976710656b^2 + 281474976710656b + 562949953421312\n\na^2 >= 562949953421312b^2 + 562949953421312b + 1125899906842624\n\na^2 >= 1125899906842624b^2 + 1125899906842624b + 2251799813685248\n\na^2 >= 2251799813685248b^2 + 2251799813685248b + 4503599627370496\n\na^2 >= 4503599627370496b^2 + 4503599627370496b + 9007199254740992\n\na^2 >= 900719925"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n16 13\") == 'YES'\nassert solution(\"6 1690850361 24777622630\\n34 33\") == 'NO'\nassert solution(\"6 1690850361 24777622630\\n34 34\") == 'YES'\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3 4\\n1 2\\n\") == \"NO\"\nassert solution(\"2\\n4 5\\n2 2\\n\") == \"YES\"\nassert solution(\"2\\n2 2\\n1 1\\n\") == \"YES\"\nassert solution(\"2\\n3 5\\n2 2\\n\") == \"NO\"\nassert solution(\"2\\n3 4\\n2 2\\n\") == \"NO\"\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4') == 'NO'\nassert solution('1 2') == 'YES'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\"\nassert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\"\nassert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\"\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\\nNO\\nNO\\nYES\"\nassert solution(\"4\\n10 10\\n10 10\\n10 10\\n10 10\") == \"YES\\nYES\\nYES\\nYES\"\nassert solution(\"4\\n1 10\\n1 10\\n1 10\\n1 10\") == \"NO\\nNO\\nNO\\nNO\"\n\"\"\"\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\\n\") == \"YES\\nNO\\nNO\\nYES\""
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\\nNO\\nNO\\nYES\"\n\"\"\"\n\nimport math\n\ntests = int(input())\n\nfor i in range(0, tests):\n    a, b = list(map(int, input().split()))\n    if math.gcd(a, b) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(4) == \"YES\\nNO\\nNO\\nYES\"\n\"\"\""
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n-1 -1\\n1 1\\n2 2\\n3 3\\n4 5\\n\") == \"Yes\"\nassert solution(\"5\\n-1 -1\\n1 2\\n2 1\\n4 60\\n\") == \"No\"\nassert solution(\"3\\n1 1\\n2 2\\n4 60\\n\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n-1 1\\n-2 2\\n4 60\\n\") == 'Yes'\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n-1 1\\n-2 2\") == \"Yes\"\nassert solution(\"4\\n1 1\\n2 2\\n-1 1\\n-2 2\") == \"No\"\nassert solution(\"3\\n1 2\\n2 1\\n4 60\") == \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n2 2\\n-1 1\\n-2 2') == 'Yes'\nassert solution('4\\n1 1\\n2 2\\n-1 1\\n-2 2') == 'No'\n\"\"\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n-1 1\\n4 60\") == \"No\"\nassert solution(\"3 2\\n2 1\\n4 60\") == \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data_1) == \"Yes\"\nassert solution(test_data_2) == \"No\"\nassert solution(test_data_3) == \"Yes\"\nassert solution(test_data_4) == \"No\"\n\"\"\"\n\ntest_data_1 = \"\"\"3\n1 1\n-1 -1\n2 -1\n\"\"\"\n\ntest_data_2 = \"\"\"4\n1 1\n2 2\n-1 1\n-2 2\n\"\"\"\n\ntest_data_3 = \"\"\"3\n1 2\n2 1\n4 60\n\"\"\"\n\ntest_data_4 = \"\"\"4\n1 1\n2 2\n-1 1\n-2 2\n\"\"\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n-1 1\\n-2 2\") == \"Yes\"\nassert solution(\"4\\n1 1\\n2 2\\n-1 1\\n-2 2\") == \"No\"\nassert solution(\"3\\n1 2\\n2 1\\n4 60\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 -1 1 -2\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\n\"\"\"\nfrom typing import List, Union\n\nimport math\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1\\n2 2\\n-1 1\\n-2 2\") == \"Yes\"\nassert solution(\"5\\n1 1\\n2 2\\n-1 1\\n-2 2\") == \"No\"\nassert solution(\"5\\n-1 1\\n-2 2\\n1 1\\n2 2\") == \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('1 1') == 'Yes'\nassert solution('1 -1') == 'Yes'\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"1\"\nassert solution(\"3 12\") == \"6\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '6'\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == 6\n\"\"\"\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == 2\n\n\"\"\""
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5, 5) == 1\nassert solution(4, 3) == 6\nassert solution(15, 20) == 5\nassert solution(7, 2) == 1\nassert solution(6, 9) == 3\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"12 43\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == 6\n\n\"\"\""
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(12345) == 5\n\"\"\"\n\na, b = [int(i) for i in stdin.readline().split()]\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\n\nassert solution(\"2\") == \"1 1\"\nassert solution(\"5\") == \"2 4\"\nassert solution(\"6\") == \"4 6\"\nassert solution(\"8\") == \"3 6\"\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '9 8'\nassert solution('2') == '9 8'\nassert solution('3') == '9 8'\nassert solution('4') == '9 8'\nassert solution('5') == '9 8'\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '4'\nassert solution('3') == '6'\nassert solution('4') == '9'\n\"\"\""
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"512\") == \"4608 4096\"\n\"\"\"\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"9 8\"\nassert solution(\"2\") == \"16 8\"\nassert solution(\"3\") == \"24 9\"\nassert solution(\"4\") == \"36 8\"\nassert solution(\"5\") == \"49 10\"\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"512\") == \"4608 4096\"\nprint(solution(\"512\"))\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '9 8'\nassert solution('512') == '4608 4096'\nassert solution('3') == '6 36'\n\n\"\"\""
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 4\"\nassert solution(\"5\") == \"1 2 5\"\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"512\") == '4608 4096'\n\nprint('OK!')\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == '1 2'\nassert solution('1') == '1 1'\nassert solution('9') == '9 9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\\n') == '35'\n\"\"\"\n\nfrom typing import Set, Dict, List, Tuple\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\") == \"35\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\") == \"35\"\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\") == \"35\""
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10\\n1 2 20\\n2 3 30\\n1 3 45\") == \"35\"\n\"\"\"\n\nn, m, p = map(int, input().split())\n\nedges = []\nfor i in range(m):\n    s, d, c = map(int, input().split())\n    edges.append((s, d, c))\n\nnodes = [0] * (n + 1)\n\nfor s, d, c in edges:\n    nodes[s] += c\n    nodes[d] -= c"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\") == \"35\"\n\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Set, Optional\nfrom math import inf"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3 10\n1 2 20\n2 3 30\n1 3 45''') == '35'\nassert solution('''2 3 10\n1 2 20\n2 3 30''') == '30'\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == -1\nassert solution('3 3 10') == 35"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"3 3 10\n1 2 20\n2 3 30\n1 3 45\n\"\"\"\n) == \"35\"\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 10\\n1 2 20\\n2 3 30\\n1 3 45') == '35'\n\"\"\""
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\">ab<\") == \"ab\"\nassert solution(\">ba<\") == \"ba\"\nassert solution(\">bc<\") == \"bc\"\nassert solution(\">bc>\") == \"bc\"\nassert solution(\">aa<\") == \"aa\"\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nba 3\\nabc 4\\n\") == 7\n\"\"\""
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\nba 3\\nabc 4\\n') == 7\n\"\"\"\n\n\"\"\"\nInput:\n5\ncaab\nccaa\ncaac\ncaca\ncbc\n\nOutput:\n7\n\"\"\"\n\n\"\"\"\nYou are given a string s, and an integer k.\nYour task is to truncate s such that it contains only the first k characters of s in its sorted form.\nInput Format\nThe first line contains the string s. The next line contains the integer k.\nConstraints\n1<=|s|<=10^4\n1<=k<=|s|\nOutput Format\nPrint the truncated string.\nSample Input 0\nchris alan\n2\nSample Output 0\nchris\nExplanation 0\nWe have sorted the string chris alan in ascending order, and kept only the first two characters, chris.\nSample Input 1\nchris alan\n1\nSample Output 1\nchris\nExplanation 1\nWe have sorted the string chris alan in ascending order, and kept only the first character, chris.\n\"\"\""
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nba 3\\nabc 4\\n:\") == \"7\"\nprint(\"Success!\")\n\n\"\"\""
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nba 3\\nabc 4\") == \"7\"\nassert solution(\"3\\nba 3\\nabc 4\\nba 3\\nabc 4\") == \"7\"\nassert solution(\"3\\nba 3\\nabc 4\\nba 3\\nabc 4\\nba 3\\nabc 4\") == \"9\"\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nba 3\\nabc 4\\n\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nba 3\\nabc 4\") == \"7\"\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba 3\") == \"7\"\nassert solution(\"abc 4\") == \"9\"\n\"\"\"\nimport sys"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nba 3\\nabc 4\") == \"7\"\nassert solution(\"3\\nba 3\\nabc 4\\ncaa 5\") == \"9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nba 3\\nabc 4\\n\") == \"7\"\nassert solution(\"3\\nabc 4\\nba 3\\n\") == \"7\"\nassert solution(\"3\\nba 3\\nabc 4\\n\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3') == '0'\nassert solution('6 6') == '0'\nassert solution('4 3') == '7'\nassert solution('6 5') == '7'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '7'\n\nassert solution('6 6') == '7'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3') == '7'\nassert solution('6 6') == '7'\n\"\"\""
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n\") == \"7\"\n\"\"\"\n\nn, k = input().split(\" \")\nn = int(n)\nk = int(k)\n\nnums = [int(num) for num in input().split()]\n\nmax = 0\nfor i in range(len(nums)-1):\n    for j in range(i+1, len(nums)):\n        xor = nums[i] ^ nums[j]\n        if xor > max:\n            max = xor\nprint(max)\n\n\"\"\"\n14 80\n11 14\n14 1\n14 0\n6 1\n6 0\n9 10\n14 0\n14 11\n14 15\n14 10\n14 10\n14 10\n14 11\n14 11\n14 13\n14 15\n14 15\n14 17\n14 12\n14 14\n14 9\n14 16\n14 15\n14 14\n14 15\n14 18\n14 18\n14 18\n14 16\n14 17\n14 19\n14 20\n14 20\n14 18\n14 20\n14 20\n14 21\n14 20\n14 20\n14 19\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20\n14 20"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"7\"\nassert solution(\"6 6\") == \"7\"\n\"\"\"\nfrom tools import timing\n\nINT_BITS = 32"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '1'\nassert solution('4 3') == '7'\nassert solution('6 6') == '7'\nassert solution('6 7') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == 7\nassert solution(\"6 6\") == 7\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        inputs = stdin.split(\"\\n\")\n        n, k = list(map(int, inputs[0].split(\" \")))\n\n        candies = list(map(int, inputs[1].split(\" \")))\n\n        candies.sort()\n\n        res = 0\n        for i in range(0, k):\n            res ^= candies[i]\n\n        return str(res)\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '7'\nassert solution('6 6') == '7'\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '7'\nassert solution('6 6') == '7'\n\"\"\"\n\nfrom typing import List\nfrom math import log2"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == 7\nassert solution(\"6 6\") == 7\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_0) == test_output_0\n\"\"\"\n\nimport math\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\n\npoints = []\n\nfor _ in range(n):\n    x, y = map(int, sys.stdin.readline().rstrip().split())\n    points.append((x, y))"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1\\n1 2\\n2 1\\n2 2\\n\") == \"4\"\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n2 1\\n2 2\") == \"3\"\nprint(solution(\"4\\n1 1\\n1 2\\n2 1\\n2 2\"))\n\n\"\"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n2 1\\n2 2\") == \"3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1\\n1 2\\n2 1\\n2 2') == '4'\nassert solution('4\\n1 1\\n1 2\\n2 1\\n2 2') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n1 2\\n2 1\\n2 2') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1\\n1 2\\n2 1\\n2 2\\n\") == \"4\"\nassert solution(\"5\\n3 3\\n2 1\\n1 2\\n2 1\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n1 1\n1 2\n2 1\n2 2\n\"\"\") == '3\n\nassert solution(\"\"\"4\n1 1\n1 2\n2 1\n2 2\n\"\"\") == '4\n\"\"\"\n\nfrom math import gcd\nimport logging\nimport random\n\nlogger = logging.getLogger(\"app\")\nlogger.setLevel(logging.INFO)"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n1 2\\n2 1\\n2 2') == '3'\nassert solution('4\\n1 1\\n1 2\\n2 1\\n2 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xnineteenppnnnewtnee\") == 2\nassert solution(\"xiineteenppnnnewtnee\") == 2\nassert solution(\"nineteenineteen\") == 2\nassert solution(\"nineninenine\") == 1\nassert solution(\"nineninenen\") == 1"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"nniinneetteeeenn\") == 2\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"nineteenineteen\") == 2\nassert solution(\"ninetynine\") == 9\nassert solution(\"nineteen\") == 1\n\nassert solution(\"iinneeteeneeeneeenee\") == 3\nassert solution(\"ninnenineneeneeeneeenenene\") == 3\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('nineteenineteen') == 2\nassert solution('nniinneetteeeenn') == 2\n\"\"\"\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xiineteenppnnnewtnee\") == \"xnineteenppnineteenw\"\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"nniinneetteeeenn\") == 2\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\") == 2\nassert solution(\"nineteenineteen\") == 2\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('nniinneetteeeenn') == 2\n\"\"\""
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xiineteenppnnnewtnee\") == \"xnineteenppnineteenw\"\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xiineteenppnnnewtnee\") == \"xnineteenppnineteenw\"\nassert solution(\"nineteenineteen\") == \"2\"\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\") == \"2\"\nassert solution(\"xnineteenppnnnewtnee\") == \"xnineteenppnineteenw\"\nassert solution(\"nineteenineteen\") == \"2\"\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"nniinneetteeeenn\") == 2\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcii\") == 2\n\"\"\""
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 10\") == \"4\"\nassert solution(\"1 1000000000\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6') == '5'\nassert solution('3 4') == '-1'\n\n\"\"\""
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6') == '5'\n\n\"\"\"\n\nfrom math import floor\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 6') == '5'\nassert solution('3 4') == '-1'\nassert solution('3 9') == '-1'\nassert solution('4 7') == '5'\nassert solution('4 10') == '-1'\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 6''') == '5'\nassert solution('''3 4''') == '-1'\nassert solution('''7 100''') == '7'\nassert solution('''5 10''') == '-1'\nassert solution('''10 10''') == '8'\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6') == '5'\nassert solution('3 4') == '-1'\nassert solution('2 3') == '-1'\n\n---\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\") == \"5\"\nassert solution(\"3 4\") == \"-1\"\nprint(\"Test complete.\")\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\") == \"5\"\nassert solution(\"3 4\") == \"-1\"\n\n\nimport sys; input = sys.stdin.readline\nfrom math import *\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\") == \"5\"\nassert solution(\"3 4\") == \"-1\"\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\") == \"5\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 20\\n0 27 32 21 19\") == '40'\nassert solution(\"7 3 50\\n62 0 0 0 99 33 22\") == '30'\nassert solution(\"10 5 100\\n1 0 1 0 0 0 0 0 1 1\") == '20'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 10 1\") == \"1\"\nassert solution(\"10 5 100\") == \"20\"\nassert solution(\"7 3 50\") == \"30\"\n\"\"\"\n\nn, m, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nmin_dist = 0\nmin_dist_house = 0\nfor i in range(len(a)):\n    if a[i] == 0:\n        continue\n    if (i + 1) * 10 < k:\n        continue\n    if (i + 1) * 10 > min_dist:\n        min_dist_house = i + 1\n        min_dist = (i + 1) * 10\nprint(min_dist_house)"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 20\\n0 27 32 21 19') == '40'\nassert solution('7 3 50\\n62 0 0 0 99 33 22') == '30'\n\"\"\"\n\n\"\"\"\nInput\n5 1 20\n0 27 32 21 19\n\nOutput\n40\nInput\n7 3 50\n62 0 0 0 99 33 22\n\nOutput\n30\n\"\"\"\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\na[m] = 0\n\ndp = [0 for _ in range(n + 1)]\ndp[1] = 10\nfor i in range(2, n + 1):\n    dp[i] = dp[i - 1] + 10\n    for j in range(i):\n        if j + 1 < i and a[j]!= 0 and a[j + 1]!= 0 and j + 1 - i + 1 <= k:\n            dp[i] = min(dp[i], dp[j] + dp[i - j - 1] + 10 * (i - j - 1))\n\nprint(dp[n])\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3 50\\n62 0 0 0 99 33 22') == '30'\nassert solution('5 1 20\\n0 27 32 21 19') == '40'\n\"\"\"\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 20\\n2 1 7 7\\n\") == \"5\"\nassert solution(\"7 3 50\\n62 0 0 0 99 33 22\\n\") == \"30\"\nassert solution(\"10 5 100\\n1 0 1 0 0 0 0 0 1 1\\n\") == \"20\""
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 20\\n0 27 32 21 19\") == \"40\"\nassert solution(\"7 3 50\\n62 0 0 0 99 33 22\") == \"30\"\nassert solution(\"10 5 100\\n1 0 1 0 0 0 0 0 1 1\") == \"20\""
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3 50\\n62 0 0 0 99 33 22') == '20'\n\nprint(solution(stdin.read()))\n\n\n\n\n\n\n\n\n\n\n\n-----\n\n3 3 50\n62 0 0 0 99 33 22\n\n4\n\n-----\n\n7 3 50\n62 0 0 0 99 33 22\n\n30\n\n-----\n\n10 5 100\n1 0 1 0 0 0 0 0 1 1\n\n20\n\n-----\n\n\n5 1 20\n0 27 32 21 19\n\n40\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n5 1 20\n0 27 32 21 19\n\n40\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----\n\n\n7 3 50\n62 0 0 0 99 33 22\n\n20\n\n-----"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 20\\n0 27 32 21 19\") == \"40\"\nassert solution(\"7 3 50\\n62 0 0 0 99 33 22\") == \"30\"\nassert solution(\"10 5 100\\n1 0 1 0 0 0 0 0 1 1\") == \"20\"\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 20\\n0 27 32 21 19') == '40'\nassert solution('7 3 50\\n62 0 0 0 99 33 22') == '30'\n\"\"\"\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 20\\n0 27 32 21 19') == '40'\nassert solution('7 3 50\\n62 0 0 0 99 33 22') == '30'\nassert solution('10 5 100\\n1 0 1 0 0 0 0 0 1 1') == '20'\nassert solution('15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\\n2 0 1 1 1 0 0 1 0 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 1\\n6 1\\n1 6\\n1 1') == 'YES'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9') == 'YES'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9') == 'NO'\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n6 1\\n1 6\\n1 1\") == 'YES'\nassert solution(\"2 2\\n4 4\\n4 5\\n5 4\\n4 4\") == 'NO'\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\") == 'YES'\n\"\"\"\n\nimport sys\n\nn, m = [int(i) for i in sys.stdin.readline().split(' ')]\na = [[int(i) for i in sys.stdin.readline().split(' ')] for _ in range(n)]\nb = [[int(i) for i in sys.stdin.readline().split(' ')] for _ in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j]!= b[i][j]:\n            print('NO')\n            exit()\nprint('YES')\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2 2) == 'YES'\nassert solution(2 2) == 'YES'\nassert solution(2 2) == 'YES'\nassert solution(2 2) == 'YES'\nassert solution(2 2) == 'YES'\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n6 1\") == \"YES\"\nassert solution(\"2 2\\n4 4\\n4 5\") == \"NO\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\") == \"YES\"\n\nprint(solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\"))\n\n\"\"\""
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 1\\n6 1\\n1 6\\n1 1\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\") == \"YES\""
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n5 4\\n6 3\\n7 8\\n1 4 7\\n2 5 6\\n3 8 9\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"YES\"\n\"\"\"\n\nimport copy"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'YES'\nassert solution('5 5') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('1 2 3') == 'YES'\nassert solution('2 2') == 'NO'\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n6 1\\n1 6\\n1 1\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'YES'\nassert solution('1 1\\n6 1\\n1 6') == 'YES'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9') == 'YES'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\\n1 4 7\\n2 5 6\\n3 8 9') == 'YES'\n\nprint(solution(stdin))"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 1\\n6 1\\n1 6\\n1 1\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\") == \"YES\"\nassert solution(\"2 2\\n4 4\\n4 5\") == \"NO\"\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\", \"defgh\") == 5\n\n\"\"\"\n\na = input()\nb = input()\nd = set(a)\ne = set(b)\nf = d.difference(e)\ng = e.difference(d)\nl = list(f)\nm = list(g)\nprint(len(l[0]))\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\", \"abc\") == 0\nassert solution(\"a\", \"a\") == 0\nassert solution(\"ab\", \"a\") == -1\nassert solution(\"abc\", \"def\") == 3\nassert solution(\"abcd\", \"ghi\") == 3\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcdd\") == \"abcd\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abc\") == \"abcd\"\nassert solution(\"def\") == \"abcd\"\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcd', 'defgh') == 5\nassert solution('a', 'a') == -1\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcd\\ndefgh') == 5\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcd\\nbcdefgh') == 5\nassert solution('a\\na') == -1\nassert solution('abcde\\nabcde') == 0\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\", \"defgh\") == \"5\"\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcd', 'defgh') == 5\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abcd', 'defgh') == 5\nassert solution('a', 'a') == -1\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\", \"defgh\") == 5\nassert solution(\"a\", \"a\") == -1\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport sys\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20 2\\n9 19') == '82'\nassert solution('2 1\\n16 12') == '-1'\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n16 12') == '-1'\n\"\"\"\na, b = map(int, input().split())\nc, d = map(int, input().split())\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 2\\n9 19') == '82'\nassert solution('2 1\\n16 12') == '-1'\nassert solution('6 4\\n7 9') == '1'\nassert solution('10 20\\n3 5') == '-1'\nassert solution('10 10\\n3 5') == '0'\n\n\"\"\"\n\nfrom math import gcd\n\na, b = list(map(int, input().split()))\nc, d = list(map(int, input().split()))"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 2\\n9 19\") == \"82\"\nassert solution(\"2 1\\n16 12\") == \"-1\"\n\nimport re"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 2\\n9 19\") == \"82\"\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 2\\n9 19\") == \"82\"\nassert solution(\"2 1\\n16 12\") == \"-\"\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 2\\\\n9 19\") == \"82\"\nassert solution(\"2 1\\\\n16 12\") == \"-1\"\nprint(\"Success\")"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 2\\n9 19') == '82'\nassert solution('2 1\\n16 12') == '-1'\nassert solution('10 10\\n9 10') == '-1'\nassert solution('20 20\\n9 10') == '-1'\nassert solution('10 20\\n9 10') == '10'\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n16 12\\n\") == \"82\"\nassert solution(\"20 2\\n9 19\\n\") == \"82\"\nassert solution(\"1 1\\n1 100\\n\") == \"100\"\n\"\"\"\n\na, b = [int(n) for n in input().split()]\nc, d = [int(n) for n in input().split()]"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 2\") == \"82\"\nassert solution(\"2 1\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1 1 1\"\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"233\") == \"77 77 79\"\nassert solution(\"5\") == \"3 1 2\"\nassert solution(\"35\") == \"3 1 2\"\nassert solution(\"555\") == \"3 3 5\"\nassert solution(\"33\") == \"1 1 1\"\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"233\") == \"77 77 79\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1 1 1'\nassert solution('233') == '77 77 79'\n\"\"\""
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"233\") == \"77 77 79\"\n\n\n\"\"\""
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '1 1 1'\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('233') == '77 77 79'\nprint(solution(stdin))\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == '1 1 1'\nassert solution(233) == '77 77 79'\n\"\"\"\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1 1 1\"\nassert solution(\"233\") == \"77 77 79\"\nassert solution(\"10\") == \"1 1 1\"\nassert solution(\"11\") == \"1 2 2\"\nassert solution(\"333\") == \"1 1 1\"\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1 1 1\"\nassert solution(\"233\") == \"77 77 79\"\n\"\"\""
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 1 2\") == \"2\"\nassert solution(\"3 3 1 2 3\") == \"6\"\nassert solution(\"3 3 3 3 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1 1 2') == 2\n\"\"\"\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 1 2\") == 2\nassert solution(\"3 3 1 2 3\") == 6\nassert solution(\"1 2 3 4 5\") == 3\n\"\"\"\nimport math\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 1 2\") == 2\nassert solution(\"3 3 1 2 3\") == 6\n\"\"\"\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1 1 2') == 2\nassert solution('3 3 1 2 3') == 6\nassert solution('1 1 1 1 2') == 2\n\n\n\n\"\"\"\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 1 2 3') == '6'\nassert solution('2 1 1 1 2') == '2'\nassert solution('1 1 1 1 2') == '2'\nassert solution('1 2 1 1 2') == '2'\nassert solution('1 2 1 2 2') == '6'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 1 2\") == 2\nassert solution(\"3 3 1 2 3\") == 6\nassert solution(\"4 2 5 2 2\") == 9\nassert solution(\"6 3 5 3 4\") == 1\nassert solution(\"10 10 4 6 3\") == 0\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1 1 2\") == \"2\"\nassert solution(\"3 3 1 2 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 1 1 2') == 2\n\"\"\"\n\nn, a, b, c, d = list(map(int, input().split()))\nprint(int(n * (n - 1) / 2 - a - b - c - d))\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 1 2\") == 2\nassert solution(\"3 3 1 2 3\") == 6\nassert solution(\"1 1 1 1 2\") == 0\nassert solution(\"1 2 1 2 2\") == 2\nassert solution(\"2 1 2 1 2\") == 2\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 1 1 2\") == \"8\"\nprint(\"Test 1 PASSED\")\nassert solution(\"4 3 9 2\") == \"1\"\nprint(\"Test 2 PASSED\")\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 1\\n1 2') == '8'\nassert solution('4 3\\n9 2\\n0 1') == '1'\n\n\"\"\""
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3') == '8'\nassert solution('4 3') == '8'\nassert solution('4 3') == '8'\nassert solution('4 3') == '8'\nassert solution('4 3') == '8'\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 1\\n1 2\") == \"8\"\nassert solution(\"4 3\\n9 2\\n0 1\") == \"1\"\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 1\\n1 2') == '8'\n\"\"\"\n\nweight = int(stdin.readline())\nheight = int(stdin.readline())\nstone1 = [int(x) for x in stdin.readline().split()]\nstone2 = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 1\\n1 2') == '8'\nassert solution('4 3\\n9 2\\n0 1') == '1'\nassert solution('4 3\\n9 2\\n0 1\\n') == '1'\nassert solution('4 3\\n9 2\\n0 1\\n1') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"8\"\nassert solution(\"9 2\") == \"1\"\nassert solution(\"9 3\") == \"1\""
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 1\\n1 2\") == \"8\"\nassert solution(\"4 3\\n9 2\\n0 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 1\\n1 2') == '8'\nassert solution('4 3\\n9 2\\n0 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 1\\n1 2') == 8"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 4 3 2 1\\n6 8\") == \"3\"\nassert solution(\"5\\n0 3 3 4 2\\n3 10\") == \"4\"\nassert solution(\"2\\n2 5\\n3 6\") == \"0\"\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 4 3 2 1\\n6 8\\n\") == \"3\"\nassert solution(\"5 0 3 4 2 1\\n6 8\\n\") == \"0\"\nassert solution(\"5 3 4 3 2 1\\n3 10\\n\") == \"4\"\nassert solution(\"2 5\\n3 6\\n\") == \"0\"\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 4 3 2 1\\n6 8\\n') == '3'\nassert solution('2\\n2 5\\n3 6\\n') == '0'\nassert solution('5\\n0 3 4 3 2\\n6 8\\n') == '4'\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3 4 3 2 1\\n6 8\\n') == '3'\nassert solution('5\\n0 3 3 4 2\\n6 8\\n') == '4'\nassert solution('2\\n2 5\\n3 6\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 4 3 2 1\\n6 8\") == \"3\"\nassert solution(\"5 0 3 4 3 2\\n6 8\") == \"0\"\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3 2 1\\n6 8\\n\") == 3\nassert solution(\"0 3 3 4 2\\n3 10\\n\") == 4\nassert solution(\"2 5\\n3 6\\n\") == 0\nprint('Success')"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 4 3 2 1\\n6 8\\n\") == '3'\nassert solution(\"5\\n0 3 3 4 2\\n3 10\\n\") == '4'\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 4 3 2 1\\n6 8\\n') == '3'\nassert solution('2\\n2 5\\n3 6\\n') == '0'\n\"\"\"\n\nimport collections\n\nstdin = '5\\n3 4 3 2 1\\n6 8\\n'\n\nn = int(stdin.split('\\n')[0])\ns = [int(i) for i in stdin.split('\\n')[1].split(' ')]\nx, y = int(stdin.split('\\n')[2].split(' ')[0]), int(stdin.split('\\n')[2].split(' ')[1])\n\nc = collections.Counter(s)\n\npass_cnt = 0\nfor key, val in c.items():\n    if key > 0 and key <= n and val >= x and val <= y:\n        pass_cnt += 1"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4 3 2 1') == '3'\nassert solution('3 4 3 2 1') == '3'\nassert solution('0 3 4 2 1') == '0'\nassert solution('3 10') == '0'\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 3 6\") == \"3\"\nassert solution(\"3 4 3 2 1\") == \"4\"\nassert solution(\"0 3 3 4 2\") == \"0\"\nassert solution(\"5 4 3 2 1\") == \"3\""
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 2 3 1\") == \"6\"\nassert solution(\"5 2 4 2\") == \"8\"\nassert solution(\"19 3 4 2\") == \"12\"\n\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nn, k, A, B = list(map(int, input().split()))"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n2\\n3\\n1\") == \"6\"\n\"\"\""
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''9\n2\n3\n1''') == '6'\nassert solution('''5\n5\n2\n20''') == '8'\nassert solution('''19\n3\n4\n2''') == '12'\nassert solution('''9\n1\n1\n1''') == '0'\nassert solution('''9\n1\n1\n1\n''') == '0'\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(9, 2, 3, 1) == 6\nassert solution(5, 5, 2, 20) == 8\nassert solution(19, 3, 4, 2) == 12\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\n2\\n3\\n1\\n\") == \"6\"\nassert solution(\"5\\n5\\n2\\n20\\n\") == \"8\"\nassert solution(\"19\\n3\\n4\\n2\\n\") == \"12\"\nassert solution(\"1\\n1\\n1\\n1\\n\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n\") == \"0\""
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n2\\n3\\n1\") == \"6\"\nassert solution(\"5\\n5\\n2\\n20\") == \"8\"\nassert solution(\"19\\n3\\n4\\n2\\n\") == \"12\"\n\"\"\""
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 2 3 1') == '6'\nassert solution('5 5 2 20') == '8'\nassert solution('19 3 4 2') == '12'\n\"\"\""
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n2\\n3\\n1\\n\") == \"6\"\nassert solution(\"5\\n5\\n2\\n20\\n\") == \"8\"\nassert solution(\"19\\n3\\n4\\n2\\n\") == \"12\""
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(9, 2, 3, 1) == 6\nassert solution(5, 5, 2, 20) == 8\nassert solution(19, 3, 4, 2) == 12\nassert solution(1000, 10, 1000, 1000) == 1000\nassert solution(100, 10, 100, 10) == 10\n\"\"\"\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 2 3 1') == '6'\nassert solution('5 5 2 20') == '8'\nassert solution('19 3 4 2') == '12'\n\"\"\""
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20') == '10 2'\nassert solution('5184') == '6 4'\nassert solution('100000000') == '1000 500'\n\"\"\"\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20\") == \"10 2\"\nassert solution(\"5184\") == \"6 4\"\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20') == '10 2'\nassert solution('5184') == '6 4'\n\"\"\"\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20') == '10 2'\nassert solution('5184') == '6 4'"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(20) == [10,2]\nassert solution(5184) == [6,4]\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == (10, 0)\nassert solution(\"20\") == (10, 2)\nassert solution(\"5184\") == (6, 4)\n\n\n----\n\n7 6\n\n----\n\n8 9\n\n----\n\n0 0\n\n----\n\n0 0\n\n----\n\n1 0\n\n----\n\n1 0\n\n----\n\n0 1\n\n----\n\n0 0\n\n----\n\n1 1\n\n----\n\n1 0\n\n----\n\n2 0\n\n----\n\n1 0\n\n----\n\n1 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0\n\n----\n\n2 0"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '10 2'\nassert solution('20') == '10 2'\nassert solution('10**6') == '36 20'\nassert solution('5184') == '6 4'\nassert solution('8') == '12 2'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20\") == \"10 2\"\nassert solution(\"5184\") == \"6 4\"\nassert solution(\"100\") == \"10 2\"\nassert solution(\"11\") == \"10 1\"\nassert solution(\"72\") == \"6 4\"\n\n\"\"\"\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20') == '10 2'\nassert solution('5184') == '6 4'\nassert solution('1000') == '10 8'\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20') == '10 2'\nassert solution('5184') == '6 4'\nassert solution('1') == '1 0'"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n8 7 6\\nrsrpr\") == '27'"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n8 7 6\\nrsrpr\") == '27'\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n8 7 6\\nrsrpr\\n') == '27'\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 2\\nrp\") == \"2\"\nassert solution(\"2 2\\n1 1\\nrps\") == \"0\"\nassert solution(\"2 2\\n1 1\\nrp\") == \"2\"\nassert solution(\"5 1\\n4 3 2 1\\nrpsp\") == \"17\"\nassert solution(\"10 2\\n6 3 4 5 2 6\\nrp\") == \"10\"\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\nr p s\\nr\") == '5'\nassert solution(\"5 2\\nr s p\\nrprs\\nr\") == '27'\n\"\"\"\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\nr\\np\") == \"2\"\nassert solution(\"4 1\\nr\\nr\\nr\\nr\\nr\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n0 0 1\") == \"2\"\nassert solution(\"5 5\\n0 0 0 0 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n8 7 6\\nrsrpr\") == \"27\"\nprint(\"Test passed\\n\")\n\n\"\"\"\n\nimport math\nimport time"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n8 7 6\\nrsrpr\\n') == '27'\n\"\"\"\n\nN, K = map(int, stdin.readline().split())\n\nhands = {'r': 0,'s': 0, 'p': 0}\nfor _ in range(N):\n    for hand in hands.keys():\n        hands[hand] = stdin.readline()\n\nresult = 0\nfor i in range(K, N):\n    win = hands[hands[hands[i]]]\n    if win == 'r':\n        result += N - i\n    elif win =='s':\n        result += i\n    else:\n        result += K\nprint(result)\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 2\\nppprrrrr\\nrsrsr\") == \"27\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"a\") == 1\nassert solution(\"ab\") == 1\nassert solution(\"aba\") == 3\nassert solution(\"baba\") == 4\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '4'\nassert solution('2 1 2') == '7'\nassert solution('3 5 2') == '11'\n\n-----Explanation-----\n\nIn the first example we have 3 strings, each of length 2, so the maximum string length is 2.\nIn the second example we have 2 strings, of length 7, so the maximum string length is 7.\nIn the third example we have 3 strings, each of length 6, so the maximum string length is 6.\nIn the fourth example we have 3 strings, each of length 10, so the maximum string length is 10.\n\n\"\"\"\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"4\"\nassert solution(\"2 1 2\") == \"7\"\nassert solution(\"3 5 2\") == \"11\"\n\nprint(solution(\"1 1 1\"))\nprint(solution(\"2 1 2\"))\nprint(solution(\"3 5 2\"))\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"4\"\nassert solution(\"2 1 2\") == \"7\"\nassert solution(\"3 5 2\") == \"11\"\n\n\"\"\"\n\na, b, c = map(int, stdin.split())\n\nprint(a * b + b * c + c * a)\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 2') == 7\nassert solution('3 5 2') == 11\nassert solution('1000000000 1000000000 1000000000') == 4000000000\nassert solution('2 2 1') == 6\nassert solution('3 5 2') == 11\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == 4\nassert solution(\"2 1 2\") == 7\nassert solution(\"3 5 2\") == 11\nassert solution(\"1000000000 1000000000 1000000000\") == 4000000000\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == 4\nassert solution(\"2 1 2\") == 7\nassert solution(\"3 5 2\") == 11\nassert solution(\"1000000000 1000000000 1000000000\") == 4000000000\nprint(\"Success\")\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 2') == '11'\nassert solution('1 1 1') == '4'\nassert solution('2 1 2') == '7'\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1') == '4'\nassert solution('2 1 2') == '7'\nassert solution('3 5 2') == '11'\nassert solution('1000000000 1000000000 1000000000') == '4000000000'"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 2\") == \"7\"\nassert solution(\"1 1 1\") == \"4\"\nassert solution(\"3 5 2\") == \"11\"\n\nprint(\"Success\")"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 5 18 4\\n5 5 5\\n\") == \"-1\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '5 3 5 18 4'\n) == '4 1'\nassert solution(\n    '5 3 5 16 4'\n) == '-1'\nassert solution(\n    '5 5 5'\n) == '-1'\nassert solution(\n    '4 3 3'\n) == '1 1'\nassert solution(\n    '2 3 6'\n) == '1 2'\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 5 18 4\\n3 5 4\") == \"4 1\"\n\n\"\"\""
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 5 16 4\") == \"4 1\"\nassert solution(\"5 3 5 18 4\") == \"4 1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 5 18 4\") == \"4 1\"\nassert solution(\"5 5 5\") == \"-1\"\nassert solution(\"5 3 5 16 4\") == \"4 1\"\n\n\"\"\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 5 18 4\\n3 5 4') == '4 1'\nassert solution('5 3 5 16 4\\n5 5 5') == '-1'\nassert solution('5 3 5 20 4\\n5 5 5') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 5 16 4\") == \"4 1\"\nassert solution(\"5 3 5 20 4\") == \"-1\"\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 5 18 4\\n3 5 4') == '4 1'\nassert solution('5 3 5 16 4\\n5 5 5') == '-1'\nassert solution('5 3 5 16 4\\n5 5 4') == '4 1'\nassert solution('5 3 5 18 4\\n5 4 4') == '-1'\nassert solution('5 3 5 18 4\\n5 5 4') == '4 1'\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 5 16 4\\n5 5 5\") == '-1'\nassert solution(\"5 3 5 18 4\\n3 5 4\") == '4 1'\nassert solution(\"5 3 5 18 4\\n3 5 5\") == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 5 16 4\") == '4 1'\nassert solution(\"5 5 5\") == '-1'\nassert solution(\"5 3 5 16 4\") == '4 1'\nassert solution(\"5 3 5 16 4\") == '4 1'\nassert solution(\"5 3 5 16 4\") == '4 1'\n\"\"\"\n\nn, k, p, x, y = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\nassert solution(\"duma\") == \"NO\"\nassert solution(\"grapes\") == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\nassert solution(\"aabbccddeefghijklmnopqrstuvwxyz\") == \"NO\"\nassert solution(\"sumimasen\") == \"YES\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sumimasen') == \"YES\"\nassert solution('ninja') == \"YES\"\nassert solution('codeforces') == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\nassert solution(\"arcee\") == \"NO\"\nassert solution(\"uipjffpndq\") == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n\"\"\""
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n\"\"\""
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\") == '4'\nassert solution(\"7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == '16'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"4\"\nassert solution(\"7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"16\"\n\n\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"4\"\nassert solution(\"7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"16\"\n\"\"\""
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"4\"\nassert solution(\"7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\\n\") == \"16\"\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"4\"\nassert solution(\"7 0\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"16\"\n\n\n\"\"\"\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"4\"\nassert solution(\"7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"16\"\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2\\n2 3\\n3 4\\n4 1\\n') == '4'\nassert solution('7 0\\n') == '0'\nassert solution('3 1\\n1 3\\n') == '1'\nassert solution('7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\\n') == '16'\n\n[Time limit] 4 seconds (py3)\n[Memory limit] 256 megabytes\n\n[Source] https://www.coursera.org/learn/competitive-programming-core-skills/programming/NyVY5/constraint-programming\n\"\"\"\n\nimport sys\n\nfrom typing import Union, List, Tuple\n\n\nclass Domino:\n    def __init__(self, dots1: int, dots2: int):\n        self.dots1 = dots1\n        self.dots2 = dots2\n\n    def __repr__(self):\n        return f'Domino(dots1={self.dots1}, dots2={self.dots2})'\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"4\"\nassert solution(\"7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\\n\") == \"16\"\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1 2\\n2 3\\n3 4\\n4 1') == '4'\nassert solution('7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7') == '16'\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '4 4\\n1 2\\n2 3\\n3 4\\n4 1'\n) == '4'\nassert solution(\n    '7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\\n'\n) == '16'\nassert solution(\n    '7 0\\n'\n) == '0'"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n1 3 7 5\\n3\\n') == '18'\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1\\n1 3 7 5\\n3\\n') == '18'\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1\\n100 200\\n1 2') == '400'\nassert solution('2 2\\n100 200\\n1 2') == '400'\n\"\"\""
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == 'a\\nb'\nassert solution('a\\n\\nb') == 'a\\n\\nb'\n'''"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 1, [1, 3, 7]) == 17\nassert solution(2, 2, [10, 3, 8]) == 40\n\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n10 3 8\\n2 3') == '20'\nassert solution('3 2\\n100 200\\n1 2') == '400'\nassert solution('4 1\\n1 3 7 5\\n3') == '18'\nassert solution('4 3\\n1 2 3 5 6\\n2 3') == '80'\nassert solution('3 1\\n100 200\\n1 2') == '400'\n\nprint(\"You are good to go!\")"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1\\n1 3 7 5\\n3\\n') == '18'\nassert solution('3 2\\n10 3 8\\n2 3\\n') == '40'\n\n'''"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"400\"\nassert solution(\"4 1\") == \"18\"\nassert solution(\"6 4\") == \"52\"\nassert solution(\"10 6\") == \"68\"\nassert solution(\"100 100\") == \"200\""
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 1\n2 3\n2''') == '40'\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n1 3 7 5\\n3\\n') == '18'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 40 60 80 100\\n0 1 2 3 4\\n1 0\") == \"4900\"\nassert solution(\"119 119 119 119 119\\n0 0 0 0 0\\n10 0\") == \"4930\"\n\"\"\"\n\nimport os\nfrom io import StringIO\nfrom typing import List, Any\n\n\nclass TestCase:\n    def __init__(self, file_name: str, max_score: int, max_time: int, num_success: int, num_fail: int):\n        self.file_name = file_name\n        self.max_score = max_score\n        self.max_time = max_time\n        self.num_success = num_success\n        self.num_fail = num_fail\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 40 60 80 100') == '4900'\nassert solution('119 119 119 119 119') == '4930'\n\"\"\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 40 60 80 100\\n0 1 2 3 4\\n1 0\") == \"4900\"\nassert solution(\"119 119 119 119 119\\n0 0 0 0 0\\n10 0\") == \"4930\"\n\"\"\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 40 60 80 100\") == \"4900\"\nassert solution(\"119 119 119 119 119\") == \"4930\"\n\n\"\"\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 40 60 80 100\") == \"4930\"\nassert solution(\"119 119 119 119 119\") == \"4930\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 40 60 80 100\\n0 1 2 3 4\\n1 0\") == \"4930\"\n\"\"\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 40 60 80 100\") == \"4900\"\n\"\"\"\n\nimport unittest\nimport sys\n\nclass Solution:\n    def solve(self, test_input: str) -> str:\n        if len(test_input.split(\" \"))!= 5:\n            return\n        times = test_input.split(\" \")\n        if not (1 <= int(times[0]) <= 119 and 1 <= int(times[1]) <= 119 and 1 <= int(times[2]) <= 119 and 1 <= int(times[3]) <= 119 and 1 <= int(times[4]) <= 119):\n            return\n        \n        # Score for each problem\n        scores = [500, 1000, 1500, 2000, 2500]\n        \n        # Number of wrong submissions\n        wrong = [0, 0, 0, 0, 0]\n        for index in range(1, 5):\n            if int(times[index]) == 0:\n                wrong[index - 1] = 1\n        \n        # Number of successful and unsuccessful hacks\n        success = int(times[5])\n        failure = int(times[6])\n        \n        # Score from successful and unsuccessful hacks\n        score_success = success * 100\n        score_failure = failure * 50\n        \n        # Final score\n        score = 0\n        for index in range(0, 5):\n            score += max(0.3 * scores[index] * (1 - (int(times[0]) - index) / 250) - 50 * wrong[index], 0)\n            score += score_success if index < success else score_failure\n        \n        return str(int(score))\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n        \n    def testSolution(self):\n        test_cases = {\n            \"20 40 60 80 100\": \"4900\",\n            \"119 119 119 119 119\": \"4930\",\n        }\n        for test_input, expected_result in test_cases.items():\n            self.assertEqual(self.solution.solve(test_input), expected_result)\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n20 40 60 80 100\n0 1 2 3 4\n1 0\n\"\"\") == '4930'\n\nassert solution(\n\"\"\"\n119 119 119 119 119\n0 0 0 0 0\n10 0\n\"\"\") == '4930'\n\nassert solution(\n\"\"\"\n20 40 60 80 100\n0 1 2 3 4\n1 0\n\"\"\") == '4930'\n\nassert solution(\n\"\"\"\n20 40 60 80 100\n0 1 2 3 4\n1 0\n\"\"\") == '4930'\n\n\"\"\"\nimport sys\n\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\nc = list(map(int, sys.stdin.readline().split()))\nd = list(map(int, sys.stdin.readline().split()))\n\ns = 0\n\nfor i in range(5):\n    s += max(0.3*a[i],(1 - (i+1)/250)*a[i] - 50*b[i])\n\ns += 100*(c[0] - d[0]) + 50*(c[1] - d[1])\n\nprint(int(s))\n\"\"\"\n\nimport sys\n\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\nc = list(map(int, sys.stdin.readline().split()))\nd = list(map(int, sys.stdin.readline().split()))\n\ns = 0\n\nfor i in range(5):\n    s += max(0.3*a[i],(1 - (i+1)/250)*a[i] - 50*b[i])\n\ns += 100*(c[0] - d[0]) + 50*(c[1] - d[1])\n\nprint(int(s))"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution([\"20 40 60 80 100\", \"0 1 2 3 4\", \"1 0\", \"\"]) == \"4930\"\nassert solution([\"119 119 119 119 119\", \"0 0 0 0 0\", \"10 0\", \"\"]) == \"4930\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 40 60 80 100\") == \"4900\"\n\"\"\"\n\n\n\n\"\"\"\n\u6700\u521d\u306b\u5168\u3066\u306e\u901a\u308a\u3092\u63a2\u7d22\u3057\u3066\u307f\u308b\u3002\n\u307e\u305f\u3001\u305d\u308c\u305e\u308c\u306e\u30d1\u30ba\u30eb\u306b\u3064\u3044\u3066\u305d\u306e\u30d1\u30ba\u30eb\u3092\u7b54\u3048\u305f\u6642\u306b\u305d\u306e\u30d1\u30ba\u30eb\u3092\u6bba\u3059\u3088\u3046\u306a\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u3053\u306e\u30d1\u30ba\u30eb\u304c\u3069\u306e\u30d1\u30ba\u30eb\u3092\u3059\u3067\u306b\u6bba\u3057\u3066\u3044\u306a\u3044\u304b\u3092\u7ba1\u7406\u3059\u308b\u30ea\u30b9\u30c8\u3092\u7528\u610f\u3059\u308b\n\u306a\u304a\u3001\u305d\u306e\u30d1\u30ba\u30eb\u3092\u6bba\u3057\u305f\u6642\u306b\u3001\u305d\u306e\u30d1\u30ba\u30eb\u3092\u6bba\u3059\u3088\u3046\u306b\u3059\u308b\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u6bba\u3057\u305f\u30d1\u30ba\u30eb\u306e\u30ea\u30b9\u30c8\u304c\u66f4\u65b0\u3055\u308c\u308b\n\"\"\"\n\nimport sys"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 1 1\") == \"1\"\nassert solution(\"1 2 1 2\") == \"2\"\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 1 1\") == 1\nassert solution(\"1 2 1 2\") == 2"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(2) + \" \" + str(2) + \" \" + str(1) + \" \" + str(1)) == \"1\"\nassert solution(str(1) + \" \" + str(2) + \" \" + str(1) + \" \" + str(2)) == \"2\"\nassert solution(str(1) + \" \" + str(2) + \" \" + str(2) + \" \" + str(1)) == \"2\"\nassert solution(str(2) + \" \" + str(2) + \" \" + str(2) + \" \" + str(2)) == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 2 1 2\") == \"2\"\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 2\") == 2\n\n\"\"\""
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1 1\") == \"1\"\nassert solution(\"1 2 1 2\") == \"2\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 1 1\") == 1\nassert solution(\"4 4 2 2\") == 2\n\"\"\"\n\n\nfrom itertools import product\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 1 1') == '1'\nassert solution('1 2 1 2') == '2'\n\"\"\"\n\n\"\"\"\n\u672c\u9898\u662f\u4e00\u4e2a\u9006\u5411\u601d\u7ef4\u7684\u9898\uff0c\u5c06\u4e00\u4e2a\u65b9\u683c\u4e2d\u7684\u5c42\u6570\u5f53\u505a\u7b2c\u4e00\u4e2a\u72b6\u6001\uff0c\u5c06\u4e24\u4e2a\u65b9\u683c\u4e2d\u76f8\u90bb\u7684\u5c42\u6570\u5f53\u505a\u7b2c\u4e8c\u4e2a\u72b6\u6001\uff0c\u95ee\u6700\u540e\uff0c\u7b2c\u4e00\u4e2a\u72b6\u6001\u5230\u7b2c\u4e8c\u4e2a\u72b6\u6001\u7684\u8def\u5f84\u603b\u6570\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1 1\") == \"1\"\nassert solution(\"1 2 1 2\") == \"2\"\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 1 1') == '1'\nassert solution('1 2 1 2') == '2'\nassert solution('1 1 1 1') == '1'\n\n###\nimport numpy as np\nn, m, L, R = map(int, stdin.readline().split())\nA = np.array([[0]*m]*n)\nfor i in range(n):\n    A[i] = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n') == 'Possible'\nassert solution('2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n') == 'Possible'\nassert solution('3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n') == 'Impossible'\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\") == \"Possible\"\nassert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Possible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\""
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n\") == \"Possible\"\nassert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Impossible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\"\n\n\"\"\""
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n\") == \"Possible\"\nassert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Possible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\"\n\"\"\"\n\n\nfrom copy import deepcopy"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n') == 'Possible'\nassert solution('3 2\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n') == 'Possible'\nassert solution('2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n') == 'Impossible'\n\"\"\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 3 2 4\\n4 5 6 7\\n3 6 7 8\") == \"Impossible\"\nassert solution(\"4 3\\n1 3 2 4\\n4 5 6 7\\n3 6 7 8\") == \"Impossible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Possible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Possible\"\n\n\"\"\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Impossible\"\nassert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n\") == \"Possible\"\n\"\"\"\n\n\"\"\"\nInput\n2 3\n2 4 5\n4 5 6\n3 6 7\n8 10 11\n\nOutput\nImpossible\n\"\"\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\") == \"Possible\"\nassert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Possible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n\") == \"Possible\"\nassert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Impossible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n\") == \"Possible\"\nassert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Possible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\"\n\n\"\"\"\nfrom typing import List\n\n\nclass Matrix(object):\n    def __init__(self, n: int, m: int):\n        self.n = n\n        self.m = m\n\n    def __str__(self):\n        return '\\n'.join('\\t'.join(str(j) for j in i) for i in self.mat)\n\n    def __repr__(self):\n        return str(self)\n\n    def swap(self, num: int, num2: int):\n        self.mat[num], self.mat[num2] = self.mat[num2], self.mat[num]\n\n    def check(self, mat: List[List[int]], i: int, j: int):\n        if all([i > j for i, j in zip(mat[i], mat[j])]):\n            return True\n        return False\n\n    def check2(self, mat: List[List[int]], i: int, j: int):\n        for m, n in zip(mat[i], mat[j]):\n            if m < n:\n                return False\n        return True\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1 2') == '3'\nassert solution('3\\n2 5 5') == '11'\nassert solution('3\\n1 1 2') == '11'\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5 5') == '11'\nassert solution('3 1 1') == '3'\nassert solution('3 2 1') == '3'\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1 2') == '11'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 5\") == \"11\"\nassert solution(\"3 1 1\") == \"3\"\n\"\"\"\n\nimport collections\nimport sys\n\nstdin = sys.stdin.read().strip().split(\"\\n\")\nn = int(stdin[0])\n\nstdin = [int(x) for x in stdin[1].split(\" \")]\n\nstdin = collections.Counter(stdin)"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('abcde') == 'aabcccde'\nassert solution('aabbccddee') == 'aabbccdde'\nassert solution('aaa') == 'aabac'\nassert solution('bb') == 'bbb'\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 2\\n') == '3'\n\nassert solution('3\\n2 3 2\\n') == '3'\n\nassert solution('3\\n3 4 3\\n') == '3'\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 5\") == \"11\"\nassert solution(\"1 1 2\") == \"3\"\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 5\") == \"11\"\nassert solution(\"3 1 1\") == \"3\""
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 5') == '11'\nassert solution('3 1 1') == '3'\nassert solution('1 1 2') == '3'\nassert solution('3 1 4') == '5'\nassert solution('3 1 4') == '5'\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"3 1 1\") == \"3\"\nassert solution(\"3 2 5\") == \"7\"\nassert solution(\"3 1 1\") == \"3\"\nassert solution(\"3 2 5\") == \"7\""
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 20\\n10 3 6 3') == 0\nassert solution('3 3\\n2 1 9') == 1\n\n\"\"\"\nimport sys"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n2 1 9') == '1'\nassert solution('4 20\\n10 3 6 3') == '0'\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n2 1 9') == '1'\nassert solution('4 20\\n10 3 6 3') == '0'\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3\n2 1 9''') == '1'\nassert solution('''4 20\n10 3 6 3''') == '0'\nassert solution('''4 20\n1 2 3 4''') == '3'\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 20\\n10 3 6 3\") == \"0\"\nassert solution(\"3 3\\n2 1 9\") == \"1\"\nassert solution(\"1 10\\n10\") == \"0\"\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 20\\n10 3 6 3') == '0'\nassert solution('3 3\\n2 1 9') == '1'\nassert solution('4 3\\n10 3 6 3') == '0'\nassert solution('4 20\\n10 3 6 3') == '0'\n\"\"\""
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 20\\n10 3 6 3') == '0'\nassert solution('3 3\\n2 1 9') == '1'\nassert solution('4 20\\n10 3 6 3') == '0'\n\n\"\"\"\n\nfrom itertools import combinations\nfrom math import inf"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n1 9 2\") == \"0\"\nassert solution(\"4 20\\n10 3 6 3\") == \"0\"\nassert solution(\"4 20\\n10 3 6 3\") == \"0\"\nassert solution(\"4 20\\n10 3 6 3\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution([\"4\", \"1\", \"9\"]) == \"1\"\nassert solution([\"10\", \"3\", \"6\", \"3\"]) == \"0\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n2 1 9\\n\") == \"1\"\nassert solution(\"4 20\\n10 3 6 3\\n\") == \"0\"\nassert solution(\"2 2\\n2 1\\n\") == \"0\"\nassert solution(\"5 5\\n1 2 3 4 5\\n\") == \"0\"\nassert solution(\"6 6\\n1 2 3 4 5 6\\n\") == \"0\"\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 3\\n2 2\\n2 2') == '2 2 2'\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 3\\n2 2\\n2 2\") == \"2 2 2\"\nassert solution(\"10\\n1 3\\n2 2\\n2 2\") == \"2 3 5\"\n\n\"\"\"\n\nfrom collections import Counter\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.n = int(stdin.readline())\n        self.min_1, self.max_1 = map(int, stdin.readline().split())\n        self.min_2, self.max_2 = map(int, stdin.readline().split())\n        self.min_3, self.max_3 = map(int, stdin.readline().split())\n\n    def solve(self) -> str:\n        max_1 = self.max_1\n        max_2 = self.max_2\n        max_3 = self.max_3\n\n        cnt_1 = Counter()\n        cnt_2 = Counter()\n        cnt_3 = Counter()\n\n        for i in range(self.n):\n            a = int(input())\n            cnt_1[a] += 1\n            cnt_2[a] += 1\n            cnt_3[a] += 1\n\n        a = sorted(cnt_1.items())\n        b = sorted(cnt_2.items())\n        c = sorted(cnt_3.items())\n\n        s1 = sum(i[1] for i in a)\n        s2 = sum(i[1] for i in b)\n        s3 = sum(i[1] for i in c)\n\n        best_1 = cnt_1[max_1]\n        best_2 = cnt_2[max_2]\n        best_3 = cnt_3[max_3]\n\n        return str(s1) +'' + str(s2) +'' + str(s3)"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 3\\n2 2\\n2 2\\n\") == \"2 2 2\"\nassert solution(\"10\\n1 2\\n1 3\\n1 5\\n\") == \"2 3 5\"\n\nsolution()\n\"\"\"\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 5\\n2 6\\n3 7\") == '1 2 3'\nassert solution(\"10\\n1 3\\n1 5\\n1 2\\n2 2\\n2 2\") == '2 2 2'\n\"\"\"\n\nn = int(input())\nmin_1, max_1 = list(map(int, input().split()))\nmin_2, max_2 = list(map(int, input().split()))\nmin_3, max_3 = list(map(int, input().split()))\n\nmin_1, max_1, min_2, max_2, min_3, max_3 = sorted([min_1, max_1, min_2, max_2, min_3, max_3])"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 3\\n2 2\\n2 2\\n') == '2 3 5'\nassert solution('10\\n1 2\\n1 3\\n1 5\\n') == '2 3 5'\nassert solution('6\\n1 5\\n1 3\\n2 2\\n2 2\\n') == '1 2 2'\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 4\") == \"1 3 3\"\nassert solution(\"2 1 2\") == \"2 1 2\"\nassert solution(\"2 1 3\") == \"2 1 2\"\n\"\"\"\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 2\\n1 3\\n1 5\\n') == '2 2 3', solution('6\\n1 2\\n1 3\\n1 5\\n')\nassert solution('10\\n1 3\\n1 5\\n') == '2 3 5', solution('10\\n1 3\\n1 5\\n')\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5\") == '1 2 3'\nassert solution(\"1 5\") == '1 2 3'\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 5\\n2 6\\n3 7\") == \"1 2 3\"\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n1 5\\n\") == \"1 2 3\"\nassert solution(\"10\\n1 2\\n1 3\\n1 5\\n\") == \"2 3 5\"\nassert solution(\"6\\n1 3\\n2 2\\n2 2\\n\") == \"2 2 2\"\n\"\"\"\n\nfrom collections import Counter, defaultdict, deque"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"DOWN\"\nassert solution(\"5\") == \"UP\"\nassert solution(\"7\") == \"DOWN\"\nassert solution(\"7\") == \"DOWN\"\nassert solution(\"7\") == \"DOWN\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 4 5 6 7') == 'UP'\nassert solution('7\\n12 13 14 15 14 13 12') == 'DOWN'\nassert solution('1\\n8') == '-1'\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 5 6 7') == 'UP'\nassert solution('7 12 13 14 15 14 13 12') == 'DOWN'\nassert solution('1 8') == '-1'\nassert solution('4 4 4 4 4 4 4 4 4 4 4 4') == 'UP'\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 4 5 6 7\") == \"UP\"\nassert solution(\"7\\n12 13 14 15 14 13 12\") == \"DOWN\"\nassert solution(\"1\\n8\") == -1\nassert solution(\"3\\n4 5 6 7\") == \"UP\"\nassert solution(\"3\\n4 5 6 7\") == \"UP\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 4 5 6 7\") == \"UP\"\nassert solution(\"7\\n12 13 14 15 14 13 12\") == \"DOWN\"\nassert solution(\"1\\n8\") == \"-1\""
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 4 5 6 7\") == \"UP\"\nassert solution(\"7\\n12 13 14 15 14 13 12\") == \"DOWN\"\nassert solution(\"1\\n8\") == \"-1\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 4 5 6 7\") == 'UP'\nassert solution(\"7\\n12 13 14 15 14 13 12\") == 'DOWN'\nassert solution(\"1\\n8\") == -1\nassert solution(\"1\\n1\") == 'UP'"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 4 5 6 7') == 'UP'\nassert solution('7\\n12 13 14 15 14 13 12') == 'DOWN'\nassert solution('1\\n8') == '-1'\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 4 5 6 7\") == 'UP'\nassert solution(\"7\\n12 13 14 15 14 13 12\") == 'DOWN'\nassert solution(\"1\\n8\") == '-1'\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 4 5 6 7\") == \"UP\"\nassert solution(\"7\\n12 13 14 15 14 13 12\") == \"DOWN\"\nassert solution(\"1\\n8\") == \"-1\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"e\") == \"Yes\"\nassert solution(\"i\") == \"Yes\"\nassert solution(\"o\") == \"Yes\"\nassert solution(\"u\") == \"Yes\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 'Yes'\nassert solution('u') == 'Yes'\nassert solution('k') == 'No'\n\"\"\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"u\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"ukm\") == \"Yes\"\nassert solution(\"akm\") == \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"u\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"ukm\") == \"Yes\"\nassert solution(\"akm\") == \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('akm') == 'No'\nassert solution('ua') == 'Yes'\nassert solution('abc') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"u\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"ukm\") == \"Yes\"\nassert solution(\"akm\") == \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'Yes'\nassert solution('e') == 'Yes'\nassert solution('i') == 'Yes'\nassert solution('o') == 'Yes'\nassert solution('u') == 'Yes'\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"u\") == \"Yes\"\nassert solution(\"akm\") == \"No\"\n\n\"\"\"\nimport string"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"ua\") == \"No\"\nassert solution(\"ukm\") == \"Yes\"\nassert solution(\"akm\") == \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('akm') == 'No'\nassert solution('ua') == 'Yes'\n\"\"\"\n\nimport re\n\nvowels = ['a', 'e', 'i', 'o', 'u']\n\nvowels_in_s = set()\nfor char in stdin:\n    if char in vowels:\n        vowels_in_s.add(char)\n\nvowels_in_s = sorted(list(vowels_in_s))\n\ns = [char for char in stdin]\nfor char in s:\n    if char in vowels_in_s:\n        s[s.index(char)] = 'a'\n    elif char == 'k':\n        s[s.index(char)] = 'c'\n    elif char == 'c':\n        s[s.index(char)] = 'k'\n    elif char == 'u':\n        s[s.index(char)] = 'a'\n    elif char == 'a':\n        s[s.index(char)] = 'u'\n    elif char =='m':\n        s[s.index(char)] = 'i'\n    elif char == 'i':\n        s[s.index(char)] ='m'\n    else:\n        pass\n\nt = ''.join(s)"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n........\n........\n.B....B.\n....W...\n........\n..W.....\n........\n........\n\"\"\") == 'A'\nassert solution(\n\"\"\"\n........\n........\n.B....B.\n....W...\n........\n..W.....\n........\n........\n\"\"\") == 'B'\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".B....B.\\n....W...\\n........\\n..W.....\\n........\\n........\") == \"A\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"B..B.\") == \"A\"\nassert solution(\"B....W....\") == \"B\"\nassert solution(\"BW........\") == \"A\"\nassert solution(\"B........\") == \"A\"\nassert solution(\"W........\") == \"B\"\n\"\"\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"...B...\") == \"A\"\nassert solution(\"...W...\") == \"B\"\nassert solution(\"......B.\") == \"A\"\nassert solution(\"........\") == \"B\"\nassert solution(\"..B.....\") == \"A\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"........\\n....W...\\n...B....\\n.......\\n........\\n........\\n....B...\") == \"A\"\nassert solution(\"........\\n....W...\\n...B....\\n.......\\n........\\n........\\n....B...\") == \"B\"\nassert solution(\"........\\n....W...\\n...B....\\n.......\\n........\\n........\\n....B...\") == \"A\"\nassert solution(\"........\\n....W...\\n...B....\\n.......\\n........\\n........\\n....B...\") == \"B\"\nassert solution(\"........\\n....W...\\n...B....\\n.......\\n........\\n........\\n....B...\") == \"A\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"..B.....\\n..W.....\\n......B.\\n........\\n.....W..\\n......B.\\n........\\n........\") == \"A\"\nassert solution(\".B....B.\\n....W...\\n........\\n..W.....\\n........\\n........\") == \"B\"\n\n\"\"\""
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"........\\n\"\n\"........\\n\"\n\"....B..\\n\"\n\"....W..\\n\"\n\"........\\n\"\n\"..W.....\\n\"\n\"......B.\\n\"\n\"........\\n\"\n\"........\\n\") == \"A\"\nassert solution(\"........\\n\"\n\"........\\n\"\n\".B....B.\\n\"\n\"....W...\\n\"\n\"........\\n\"\n\"..W.....\\n\"\n\"........\\n\"\n\"........\\n\"\n\"........\\n\") == \"B\"\nassert solution(\"........\\n\"\n\"........\\n\"\n\"......B.\\n\"\n\"....W..\\n\"\n\"....B..\\n\"\n\"........\\n\"\n\"..W....\\n\"\n\"......B\\n\"\n\"........\\n\"\n\"........\\n\") == \"B\"\nassert solution(\"........\\n\"\n\"........\\n\"\n\"......B.\\n\"\n\".W....B\\n\"\n\"....B..\\n\"\n\"........\\n\"\n\"..W.....\\n\"\n\"........\\n\"\n\"........\\n\"\n\"........\\n\") == \"B\"\nassert solution(\"........\\n\"\n\"........\\n\"\n\"......B.\\n\"\n\"....B..\\n\"\n\"....W..\\n\"\n\"........\\n\"\n\"..W....\\n\"\n\"......B\\n\"\n\"........\\n\"\n\"........\\n\") == \"B\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"........\\n\"\n                   \"........\\n\"\n                   \"........\\n\"\n                   \"........\\n\"\n                   \"........\\n\"\n                   \"........\\n\"\n                   \"........\") == \"A\"\nassert solution(\"........\\n\"\n                   \"........\\n\"\n                   \"......B\\n\"\n                   \"........\\n\"\n                   \"........\\n\"\n                   \"........\\n\"\n                   \"........\") == \"B\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"...B.....\\n\"\n                \"...W.....\\n\"\n                \"......B.\\n\"\n                \"........\\n\"\n                \"..W.....\\n\"\n                \"......B.\\n\"\n                \"........\\n\"\n                \"........\") == \"A\"\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n11 2 3 5 7\n4\n11 7 3 7''') == '3'\nassert solution('''3\n1 2 3\n3\n1 2 3''') == '-1'\nassert solution('''1\n11 2 3 5 7\n5\n11 7 3 7''') == '1'\nassert solution('''2\n1 2\n1\n100''') == '-1'\nassert solution('''1\n1\n3\n1\n2''') == '-1'\n\n\"\"\""
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n11 2 3 5 7\n4\n11 7 3 7\n''') == '3'\nassert solution('''2\n1 2\n1\n100\n''') == '-1'\nassert solution('''3\n1 2 3\n3\n1 2 3\n''') == '3'\n\nassert solution('5\\n11 2 3 5 7\\n4\\n11 7 3 7') == '3'\n\nassert solution('2\\n1 2\\n1\\n100') == '-1'\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4\\n2 3 4 5\\n') == 3\nassert solution('5\\n1 2 3 4 5\\n3 4 5 6 7\\n') == 3\nassert solution('3\\n1 2 3\\n3 4 5\\n') == -1\nassert solution('3\\n1 2 3\\n3 4 5\\n') == -1\nassert solution('5\\n2 1 1 1 2\\n3 4 4 4\\n') == 4\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_data) == expected_result\nprint(solution(input))\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n11 2 3 5 7\\n4\\n11 7 3 7') == 3\nassert solution('2\\n1 2\\n1\\n100') == -1\nassert solution('3\\n1 2 3\\n3\\n1 2 3') == 3\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 5 7\") == \"3\"\nassert solution(\"11 2 3 5 7\") == \"3\"\nassert solution(\"11 7 3 7\") == \"3\"\n\nassert solution(\"1 2 3 5 7\") == \"3\"\nassert solution(\"11 2 3 5 7\") == \"3\"\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n11 2 3 5 7\\n4\\n11 7 3 7\") == \"3\"\nassert solution(\"2\\n1 2\\n1\\n100\") == \"-1\"\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(\"input_1.txt\").read()) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 2 3\") == 3\nassert solution(\"4\\n1 2 3 4\\n3\\n1 2 3\") == -1\nassert solution(\"4\\n1 2 3 4\\n4\\n1 2 3\") == 3\nassert solution(\"5\\n2 3 4 5 6\\n3\\n1 2 3 4 5\") == 5\nassert solution(\"5\\n2 3 4 5 6\\n3\\n1 2 3 4 5\") == -1\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n11 2 3 5 7\\n4\\n11 7 3 7\") == 3\n\"\"\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Nikita_and_String\") == \"YES\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Nikita_and_String') == 'YES'\nassert solution('Alex_and_broken_contest') == 'NO'\n\nprint(solution('Nikita_and_String'))\nprint(solution('Alex_and_broken_contest'))\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Alex_and_broken_contest') == 'NO'\nassert solution('Nikita_and_string') == 'YES'\nassert solution('Danil_and_Olya') == 'NO'\nassert solution('Logan_and_problem') == 'YES'\nassert solution('Dmitri_and_post') == 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Nikita_and_String\") == \"YES\"\nassert solution(\"Danil_and_Olya\") == \"NO\""
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"NikitaAndString\") == \"YES\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\nprint(\"All examples passed\")\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"NikitaAndString\") == \"YES\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\n\"\"\""
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Danil_and_Olya\") == \"YES\"\nassert solution(\"NikitaAndString\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"NO\"\nassert solution(\"NikitaAndString\") == \"YES\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('NikitaAndString') == 'YES'\nassert solution('Danil_and_Olya') == 'NO'\nassert solution('NikitaAndString') == 'YES'\nassert solution('DanilAndOlya') == 'NO'\nassert solution('NikitaAndString') == 'YES'\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"NO\"\nassert solution(\"Nikita_and_string\") == \"YES\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\nassert solution(\"Nikita_and_string\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 2') == 3\n\"\"\"\n\n\"\"\"\nSolution\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 2\") == 3\nassert solution(\"6 13 1\") == 4\nassert solution(\"1 4 3\") == -1\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 2\") == \"3\"\nassert solution(\"6 13 1\") == \"4\""
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 2') == '3'\nassert solution('6 13 1') == '4'\nassert solution('1 4 3') == '-1'\nassert solution('6 13 5') == '-1'\nassert solution('4 1 1') == '-1'\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 2') == '3'\nassert solution('6 13 1') == '4'\n\"\"\"\n\nfrom math import sqrt\nfrom itertools import count, islice"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 2') == '3'\nassert solution('1 4 3') == '-1'\nassert solution('6 13 1') == '4'\nassert solution('1 4 3') == '-1'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 2\") == 3\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 2') == '3'\nassert solution('6 13 1') == '4'\nassert solution('1 4 3') == '-1'\n\n\nimport math\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 2\") == 3\nassert solution(\"6 13 1\") == 4\nassert solution(\"1 4 3\") == -1\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 3 4\") == \"-1\"\nassert solution(\"4 4 3\") == \"0.5\"\nassert solution(\"3 4 4\") == \"-1\"\nassert solution(\"1 1 1\") == \"0\""
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4 4\\n') == '0'\nassert solution('2 18 13\\n') == '0.5'\nassert solution('3 4 3\\n') == '-1'\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 18 13\") == 0.5\nassert solution(\"4 4 4\") == 0\nassert solution(\"3 4 3\") == -1\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 4 4\n''') == '0'\n\nassert solution('''2 18 13\n''') == '0.5'\n\nassert solution('''3 4 3\n''') == '-1'\n\nassert solution('''4 4 4\n''') == '0'\n\nassert solution('''2 6 7\n''') == '0.5'"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 18 13') == '0.5'\nassert solution('4 4 4') == '0'\nassert solution('3 4 3') == '-1'\n\"\"\"\n\nimport math\n\na, h, w = map(int, input().split())"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 18 13\") == \"0.5\"\n\"\"\""
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 18 13\") == \"0.5\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"3 4 3\") == \"-\"\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 18 13\") == \"0.5\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"3 4 3\") == \"-1\"\n\"\"\""
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 18 13\") == \"0.5\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"3 4 3\") == \"-1\"\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 18 13') == '0.5'\nassert solution('4 4 4') == '0'\nassert solution('3 4 3') == '-1'\n\n-----\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a \u0438 b, \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0438\u0445 \u0441\u0443\u043c\u043c\u0443, \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435.\n\n-----\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a \u0438 b, \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0438\u0445 \u0441\u0443\u043c\u043c\u0443, \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435.\n\n-----\na, b = int(input()), int(input())\nprint(a + b)\nprint(a - b)\nprint(a * b)\n\n-----\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0432 \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u043f\u043e\u0442\u043e\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u043e.\n\n\u041d\u0430 \u0432\u0432\u043e\u0434 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u0430.\n\n-----\n\nx, y, z = int(input()), int(input()), int(input())\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3\\n4 7\\n8 11\\n2\\n\") == \"3\"\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\\n\") == \"2\"\nassert solution(\"1\\n1 7\\n4\\n\") == \"1\""
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 4\\n5 9\\n10 12\\n9\\n') == '2'\nassert solution('3\\n1 3\\n4 7\\n8 11\\n2\\n') == '3'\nassert solution('1\\n1 7\\n4\\n') == '1'\n\n\"\"\""
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3\\n4 7\\n8 11\\n2\") == \"3\"\nassert solution(\"1\\n1 7\\n4\") == \"1\"\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\") == \"2\"\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3\\n4 7\\n8 11\\n2\\n\") == 3\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\\n\") == 2\nassert solution(\"1\\n1 7\\n4\\n\") == 1\nassert solution(\"1\\n1 7\\n4\\n\") == 1\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\\n\") == \"2\"\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n\") == \"3\"\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n\") == \"3\"\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n\") == \"3\"\nassert solution(\"1\\n1 7\\n4\\n\") == \"1\"\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3\\n4 7\\n8 11\\n2\") == 3\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\") == 2\nassert solution(\"1\\n1 7\\n4\") == 1\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\") == \"2\"\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\\n\") == \"2\"\nassert solution(\"1\\n1 7\\n4\\n\") == \"1\"\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\\n\") == \"2\"\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\\n\") == \"2\"\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3\\n4 7\\n8 11\\n2\") == '3'\nassert solution(\"1\\n1 7\\n4\") == '1'\nassert solution(\"1\\n1 7\\n4\\n1\\n2\") == '2'\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\") == '2'"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3\\n4 7\\n8 11\\n2\") == '3'\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\") == '2'\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CODEWAITFORITFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('DOGEFORCES') == 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('TEMPLE') == 'YES'\nassert solution('TEMPLATE') == 'YES'\nassert solution('TEMPLATEPLATE') == 'YES'\nassert solution('CODEFORCES') == 'NO'\nassert solution('CODEFORCESWITHOUT') == 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('CODEWAITFORITFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('DOGEFORCES') == 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"YES\"\nassert solution(\"DOGEFORCES\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('CODEWAITFORITFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('DOGEFORCES') == 'NO'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"TEMPLE\") == \"YES\"\nassert solution(\"TEMPLATE\") == \"NO\"\nassert solution(\"CODEFORCES\") == \"YES\"\nassert solution(\"CODECHEF\") == \"NO\"\nassert solution(\"CODE\") == \"YES\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(TEST_STDIN_1) == TEST_STDOUT_1\nassert solution(TEST_STDIN_2) == TEST_STDOUT_2\nassert solution(TEST_STDIN_3) == TEST_STDOUT_3\n\n\"\"\""
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"YES\"\nassert solution(\"DOGEFORCES\") == \"NO\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"YES\"\nassert solution(\"DOGEFORCES\") == \"NO\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(CODEWAITFORITFORCES) == \"YES\"\nassert solution(BOTTOMCODER) == \"NO\"\nassert solution(DECODEFORCES) == \"YES\"\nassert solution(DOGEFORCES) == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 6\nassert solution(\"4\") == 18\nassert solution(\"5\") == 19\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == 6\n\"\"\""
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 6\nassert solution(\"4\") == 18"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 6\nassert solution(\"4\") == 18\nassert solution(\"5\") == 50"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '18'\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '18'\nassert solution('5') == '27'\nassert solution('100') == '1025'\n\nprint(solution('4'))\nprint(solution('5'))\nprint(solution('100'))\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\"\nfrom itertools import product\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"18\"\nassert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    3\n    \"\"\") == '6'\n\nassert solution(\n    \"\"\"\n    4\n    \"\"\") == '18'\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == \"17\"\nassert solution(\"4\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13\") == \"17\"\nassert solution(\"4\") == \"4\"\nassert solution(\"14\") == \"17\"\nassert solution(\"15\") == \"18\"\nassert solution(\"9\") == \"9\"\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == '17'\nassert solution('4') == '4'\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == \"17\"\nassert solution(\"4\") == \"4\"\n\"\"\"\n\nn = int(input())\ndigits = 1\nwhile n > 10 ** digits:\n    digits += 1\nprint(digits)\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"17\"\n\nassert solution(\"4\") == \"4\"\n\n\"\"\"\nfrom typing import Any"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"17\"\nassert solution(\"4\") == \"4\"\nassert solution(\"1\") == \"0\"\nassert solution(\"11\") == \"0\"\n\nprint(solution(\"13\"))\nprint(solution(\"4\"))\nprint(solution(\"1\"))\nprint(solution(\"11\"))\n\"\"\"\nimport re"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '17'\nassert solution('4') == '4'\n\"\"\"\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13\") == \"17\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"4\"\nassert solution(\"13\") == \"4\"\nassert solution(\"4\") == \"2\"\n\"\"\""
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == '17'\nassert solution('4') == '4'\n\"\"\"\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == '4'\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '-1'\nassert solution('4 10') == '1'\nassert solution('1 2 3') == '-1'\nassert solution('2 1 4 2') == '2'\nassert solution('10 2 4 5 3') == '10'\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"5 2\") == -1\nassert solution(\"3 10\") == \"4\""
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n2 1 4 2\") == \"2\"\nassert solution(\"5 2\\n2 2 4 5 3\") == \"-1\"\nassert solution(\"3 10\\n1 2 3\") == \"4\"\nassert solution(\"1 2\\n1 1\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n2 1 4 2') == '2'\nassert solution('5 2\\n2 2 4 5 3') == '-1'\nassert solution('3 10\\n1 2 3') == '4'\n\nimport collections\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10') == '4'\nassert solution('5 2') == '-1'\nassert solution('4 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n2 1 4 2\") == 2\nassert solution(\"5 2\\n2 2 4 5 3\") == -1\nassert solution(\"3 10\\n1 2 3\") == 4\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 1\n2 1 4 2''') == '2'\nassert solution('''5 2\n2 2 4 5 3''') == '-1'\nassert solution('''3 10\n1 2 3''') == '4'\nassert solution('''5 10\n2 2 4 5 3''') == '-1'\n'''\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n2 1 4 2') == '2'\nassert solution('5 2\\n2 2 4 5 3') == '-1'\nassert solution('3 10\\n1 2 3') == '4'\n\n'''\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4') == 'NO'\nassert solution('3 10') == 'YES'\nassert solution('3 10') == 'YES'\nassert solution('2 10') == 'NO'\nassert solution('1 3') == 'YES'\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n1 3\\n\") == \"NO\"\nassert solution(\"3 10\\n3 3 2\\n\") == \"YES\"\nassert solution(\"2 10\\n1 3\\n\") == \"NO\"\nassert solution(\"1 100\\n11\\n\") == \"YES\"\nassert solution(\"3 8\\n2 1 1\\n\") == \"YES\"\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5, [1, 3]) == 'YES'\nassert solution(4, [3, 2]) == 'NO'\nassert solution(5, [2, 3, 3, 2, 5]) == 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4\\n1 3\\n') == 'NO'\nassert solution('3 10\\n3 3 2\\n') == 'YES'\nassert solution('2 10\\n1 3\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 10\n1 3''') == 'YES'\nassert solution('''2 10\n3 3 2''') == 'NO'\nassert solution('''2 10\n2 3 1''') == 'NO'\nassert solution('''2 10\n4 4 2''') == 'YES'\nassert solution('''2 10\n4 4 3''') == 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4\\n1 3') == 'NO'\nassert solution('3 10\\n3 3 2') == 'YES'\nassert solution('2 10\\n1 3') == 'NO'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10\\n3 3 2') == \"YES\"\nassert solution('2 10\\n1 3') == \"NO\"\nassert solution('2 10\\n3 3 2') == \"NO\"\nassert solution('2 10\\n3 3 3') == \"NO\"\nassert solution('2 10\\n3 3 3\\n3 3 3') == \"YES\"\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4\\n1 3') == 'NO'\nassert solution('3 10\\n3 3 2') == 'YES'\nassert solution('2 10\\n1 3') == 'NO'\n\n\"\"\""
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n1 3\\n\") == 'NO'\n\nassert solution(\"2 10\\n3 3 2\\n\") == 'YES'\n\nassert solution(\"3 10\\n3 3 2\\n\") == 'NO'\n\nassert solution(\"2 10\\n1 3\\n\") == 'YES'\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n1 3\") == \"NO\"\nassert solution(\"3 10\\n3 3 2\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(5) +'' + str(11)) == str(3)\nassert solution(str(6) +'' + str(16)) == str(3)\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 11') == '3'\n\n\"\"\""
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 11\") == \"3\"\nassert solution(\"6 16\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 11') == 3\nassert solution('6 16') == 3"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 11\") == \"3\"\nassert solution(\"6 16\") == \"3\"\n\"\"\""
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 11\") == \"3\"\nassert solution(\"6 16\") == \"3\"\n\"\"\"\n\n\"\"\"\n  *\u0423\u0433\u0430\u0434\u0430\u0439 \u0447\u0438\u0441\u043b\u043e (\u043f\u043e \u0432\u0430\u0448\u0435\u043c\u0443 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044e)\n\u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438\u0433\u0440\u044b:\n\u0418\u0433\u0440\u043e\u043a\u0443 \u0434\u0430\u0451\u0442\u0441\u044f 10 \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u0443\u0433\u0430\u0434\u0430\u0442\u044c \u0437\u0430\u0433\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0442\u0440\u0451\u0445 \u0448\u0430\u0433\u043e\u0432:\n\n\u0418\u0433\u0440\u043e\u043a \u0432\u0432\u043e\u0434\u0438\u0442 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e x, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0437\u0430\u0433\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0438 \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u0441\u0432\u043e\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044e, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0432\u044b\u0439\u0434\u0435\u0442 \u0438\u0437 \u043b\u0438\u043c\u0438\u0442\u0430 \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u0438\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u043d\u0443\u0436\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n\u041f\u043e\u043f\u044b\u0442\u043a\u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0438\u0441\u044c:\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0434\u0430\u0451\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f.\n\u0415\u0441\u043b\u0438 \u0438\u0433\u0440\u043e\u043a \u0443\u0433\u0430\u0434\u0430\u043b \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u0433\u0430\u0434\u0430\u043b \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440, \u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442 \u043e\u0431 \u044d\u0442\u043e\u043c, \u0430 \u0437\u0430\u0442\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f.\n\u0415\u0441\u043b\u0438 \u0438\u0433\u0440\u043e\u043a \u043d\u0435 \u0443\u0433\u0430\u0434\u0430\u043b \u0447\u0438\u0441\u043b\u043e \u0438 \u0437\u0430\u043f\u0443\u0442\u0430\u043b\u0441\u044f, \u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442 \u043e\u0431 \u044d\u0442\u043e\u043c \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f.\n\u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0434\u0430\u0451\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u043e\u0432 \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044e, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0432\u044b\u0439\u0434\u0435\u0442 \u0438\u0437 \u043b\u0438\u043c\u0438\u0442\u0430 \u043f\u043e\u043f\u044b\u0442\u043e\u043a. \u0412\u044b\u0439\u0442\u0438 \u0438\u0437 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043c\u043e\u0436\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u00abstop\u00bb.\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043b\u0438\u043c\u0438\u0442\u0430 \u043f\u043e\u043f\u044b\u0442\u043e\u043a: 3\n\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e, \u0437\u0430\u0433\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043e\u043c: 7\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e: 5\n\u0412\u044b \u0443\u0433\u0430\u0434\u0430\u043b\u0438!\n\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e, \u0437\u0430\u0433\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043e\u043c: 5\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e: 6\n\u041d\u0435 \u0443\u0433\u0430\u0434\u0430\u043b\u0438!\n\u041f\u043e\u043f\u044b\u0442\u043e\u043a \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u043e\u0441\u044c.\n\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e, \u0437\u0430\u0433\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043e\u043c: 7\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e: stop\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: 7\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: 7\n\"\"\"\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution(A, B), \u0433\u0434\u0435 A \u2014 \u0447\u0438\u0441\u043b\u043e \u043c\u0438\u043d\u0443\u0442, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u043d\u0430 \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u0442\u0438, \u0430 B \u2014 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u043c\u0443 \u043a\u0430\u043d\u0430\u043b\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u0430\u043d\u0430\u043b. \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e \u043a\u0430\u043a \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c 0.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c, \u0432\u0441\u0435 \u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b.\n\u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c, \u0432\u0441\u0435 \u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 11\") == '3'\nassert solution(\"6 16\") == '3'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 11\") == \"3\"\nassert solution(\"6 16\") == \"3\"\n\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 11') == '3'\nassert solution('6 16') == '3'\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 11') == '3'\nassert solution('6 16') == '3'\nassert solution('1 2') == '0'\nassert solution('1 1') == '0'\nassert solution('2 6') == '2'\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabc\") == \"abba\"\nassert solution(\"aabcd\") == \"abcba\"\n\"\"\"\n\n\nimport collections\nimport itertools\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabc\") == \"abba\"\n\"\"\"\n\ns = input()\n\npal = len(s) * ['a']\n\nfor i in range(len(s)):\n    if s[i]!= 'a':\n        pal[i] = s[i]\n        if s[i] == s[len(s)-i-1]:\n            pal[len(s)-i-1] = s[i]\n\nprint(''.join(pal))\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabc\") == \"abba\"\nassert solution(\"aabcd\") == \"abcba\"\n\n\"\"\"\n\nimport string\nimport itertools"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabc\") == \"abba\"\nassert solution(\"aabcd\") == \"abcba\""
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabcd\") == \"abcba\"\nassert solution(\"aabc\") == \"abba\"\nassert solution(\"aabbcc\") == \"abba\"\nassert solution(\"a\") == \"a\"\nassert solution(\"abac\") == \"aba\"\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabc\") == \"abba\"\nassert solution(\"aabcd\") == \"abcba\"\nassert solution(\"aabcd\") == \"abcba\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabc') == 'abba'\n\nassert solution('aabcd') == 'abcba'\n\nassert solution('kazak') == 'kazak'\n\nassert solution('oo') == 'oo'\n\nassert solution('r') == 'r'"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabc\") == \"abba\"\n\nprint(solution(\"aabcd\"))"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == \"dcba\"\nassert solution(\"aabc\") == \"abba\"\nassert solution(\"abcc\") == \"abcc\"\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s) == res\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"...K...\\n...q...\") == \"White\"\nassert solution(\"rppppppr\\n.k....\\n........\\n........\\n........\\nK...Q...\") == \"Black\"\nassert solution(\"rnbqkbnr\\npppppppp\\n........\\n........\\n........\\n........\\nPPPPPPPP\\nRNBQKBNR\") == \"Draw\""
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('rnbqkbnr\\npppppppp\\n........\\n........\\n........\\n........\\nPPPPPPPP\\nRNBQKBNR') == 'White'\nassert solution('rppppppr\\n...k....\\n........\\n........\\n........\\n........\\nK...Q...\\n........\\n') == 'Black'\nassert solution('rnbqkbnr\\npppppppp\\n........\\n........\\n........\\n........\\nPPPPPPPP\\nRNBQKBNR\\n') == 'Draw'\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"rppppppr\\n...k....\\n........\\n........\\n........\\nK...Q...\\n........\\n\") == \"Black\"\nassert solution(\"rnbqkbnr\\npppppppp\\n........\\n........\\n........\\n........\\nPPPPPPPP\\nRNBQKBNR\\n\") == \"Draw\"\n\"\"\""
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"rnbqkbnr\"\n\"pppppppp\"\n\"........\"\n\"........\"\n\"........\"\n\"........\"\n\"PPPPPPPP\"\n\"RNBQKBNR\"\n) == \"White\"\nassert solution(\n\"rppppppr\"\n\"..k....\"\n\"........\"\n\"........\"\n\"........\"\n\"........\"\n\"K...Q...\"\n\"........\"\n) == \"Black\"\nassert solution(\n\"rnbqkbnr\"\n\"pppppppp\"\n\"........\"\n\"........\"\n\"........\"\n\"........\"\n\"PPPPPPPP\"\n\"RNBQKBNR\"\n) == \"Draw\"\nassert solution(\n\"rppppppr\"\n\"..k....\"\n\"........\"\n\"........\"\n\"........\"\n\"........\"\n\"K...Q...\"\n\"........\"\n) == \"Black\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".QK...\") == \"White\"\nassert solution(\"rnbqkbnr\") == \"Draw\"\nassert solution(\"rppppppr\") == \"Black\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"rnbqkbnr\\npppppppp\\n........\\n........\\n........\\n........\\nPPPPPPPP\\nRNBQKBNR\\n\") == \"White\"\nassert solution(\"rppppppr\\n...k....\\n........\\n........\\n........\\n........\\nK...Q...\\n........\\n\") == \"Black\"\nassert solution(\"rnbqkbnr\\npppppppp\\n........\\n........\\n........\\n........\\nPPPPPPPP\\nRNBQKBNR\\n\") == \"Draw\"\nassert solution(\"rnbqkbnr\\npppppppp\\n........\\nQ....Q..\\n........\\n........\\n........\\nPPPPPPPP\\nRNBQKBNR\\n\") == \"White\"\nassert solution(\"rppppppr\\n...k....\\n........\\n....Q...\\n........\\n........\\n........\\nK...Q...\\n........\\n\") == \"Black\"\n\"\"\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"...QK...\\n........\\n........\\n........\\n........\\n........\\n...rk...\\n\") == \"White\"\nassert solution(\"rnbqkbnr\\npppppppp\\n........\\n........\\n........\\n........\\nKQRBBN\\nPPPQPPP\\n\") == \"Draw\"\nassert solution(\"rppppppr\\n...k....\\n........\\n........\\n........\\n........\\nKQRBBN\\nPPPQPPP\\n\") == \"Black\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"...QK...\\n........\\n........\\n........\\n........\\n........\\n...rk...\\n\") == \"White\"\nassert solution(\"rnbqkbnr\\npppppppp\\n........\\n........\\n........\\n........\\nPPPPPPPP\\nRNBQKBNR\\n\") == \"Draw\"\nassert solution(\"rppppppr\\n...k....\\n........\\n........\\n........\\n........\\nK...Q...\\n........\\n\") == \"Black\"\n\"\"\""
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"rnbqkbnr\\npppppppp\\n........\\n........\\n........\\n........\\nPPPPPPPP\\nRNBQKBNR\") == \"White\"\nassert solution(\"rppppppr\\n...k....\\n........\\n........\\n........\\n........\\nK...Q...\\n........\") == \"Black\"\nassert solution(\"rnbqkbnr\\npppppppp\\n........\\n........\\n........\\n........\\nPPPPPPPP\\nRNBQKBNR\") == \"Draw\"\nassert solution(\"rppppppr\\n...k....\\n........\\n........\\n........\\n........\\nK...Q...\\n........\") == \"Draw\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"rppppppr\") == \"Black\"\nassert solution(\"rnbqkbnr\") == \"Draw\"\nassert solution(\"rpppRPP\") == \"White\"\nassert solution(\"...QK...\") == \"White\"\nassert solution(\"...k....\") == \"Black\""
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 3\\n0001000100\") == \"1 3 2 3\"\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''9 3\n0001000100''') == '1 3 2 3'\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 6 7 8 9'\nassert solution('1 2 3 4 5 6 8 7 9 10') == '1 2 3 4 6 7 8 9 10'\nassert solution('1 2 3 4 5 6 7 8 10') == '1 2 3 4 5 6 7 8 10'\nassert solution('1 2 3 4 5 6 7 8 10') == '1 2 3 4 5 6 7 8 10'\nassert solution('1 2 3 4 5 6 7 10') == '1 2 3 4 5 6 7 10'\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 3\", \"0001000100\") == \"1 3 2 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 3\\n0001000100\") == '1 3 2 3'\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 3\\n0001000100') == '1 3 2 3'\n\"\"\""
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n9 3\n0001000100\n''') == '1 3 2 3'\nassert solution('''\n8 5\n11101100\n''') == '1 5 2 3'\nassert solution('''\n9 3\n10111110\n''') == '-1'\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n10101010\") == \"1 2 3 4\"\nassert solution(\"8 8\\n11011110\") == \"1 2 4 5 6 8\"\nassert solution(\"3 3\\n111\") == \"1 2 3\"\nassert solution(\"5 5\\n00000\") == \"-1\"\nassert solution(\"4 4\\n11101110\") == \"1 3 2 4\"\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 3\\n0001000100\") == \"1 3 2 3\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 3\\n0001000100\") == '1 3 2 3'\nassert solution(\"10 5\\n000111001\") == '1 5 2 4 3'\nassert solution(\"10 5\\n111111100\") == '-1'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\\n-1 2\") == \"3\\n7 4\\n2 10\\n-1 2\"\n\"\"\"\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n-1 2\") == \"3\\n7 4\\n2 10\\n-1 2\"\nassert solution(\"9 7\\n-1 2\") == \"9\\n7 4\\n2 10\\n-1 2\"\nassert solution(\"1 9\\n-1 2\") == \"1\\n9 8\\n2 10\\n-1 2\"\nassert solution(\"7 7\\n-1 2\") == \"7\\n7 8\\n2 10\\n-1 2\"\nassert solution(\"10 10\\n-1 2\") == \"10\\n10 9\\n2 10\\n-1 2\"\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin='''11\n-1 2''') == '3\nassert solution(stdin='''11\n-1 2''') == '3\nassert solution(stdin='''10\n1 1\n1 1''') == '2\nassert solution(stdin='''10\n1 1\n2 3''') == '1\nassert solution(stdin='''10\n1 1\n2 10''') == '3\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''11\n-1 2''') == '''3\n7 4\n2 10\n-1 2'''\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 -1 2') == '3 7 2 10 -1 2'\nassert solution('11 -1 2\\n2 10\\n3 7\\n0 0') == '3 7 2 10 -1 2'\nassert solution('9 9\\n3 0\\n3 3\\n1 1\\n4 1') == '9 9'\nassert solution('8 8\\n2 2\\n4 4\\n6 6\\n7 6\\n8 2') == '8 8'\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11\\n-1 2') == '3\\n7 4'\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\\n-1 2\") == '3\\n7 4\\n2 10\\n-1 2'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\\n-1 2\") == \"3\\n7 4\\n2 10\"\nassert solution(\"1\\n7 5\") == \"3\\n-1 5\"\nassert solution(\"7\\n-1 2\") == \"-1\\n2\"\nassert solution(\"0\\n1 2\") == \"0\\n1 2\"\nassert solution(\"0\\n7 5\") == \"0\\n-1 5\"\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 -1 2\") == \"3\\n7 4\\n2 10\\n-1 2\"\n\"\"\"\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11\\n-1 2') == '3\\n7 4\\n2 10\\n-1 2'\nassert solution('6\\n0 0') == '-1'\nassert solution('8\\n0 2') == '-1'\n\"\"\"\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == '8'\nassert solution(\"8\") == '54'\nassert solution(\"10\") == '-1'\nassert solution(\"11\") == '-1'\nassert solution(\"12\") == '-1'\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8') == '8'\nassert solution('10') == '-1'\nassert solution('1') == '8'\nassert solution('54') == '54'\nassert solution('20') == '20'\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '8'\nassert solution('8') == '54'\nassert solution('10') == '-1'"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8') == '8'\nassert solution('54') == '54'\nassert solution('10') == '-1'\n\"\"\"\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '-1'\nassert solution('8') == '8'\nassert solution('54') == '54'\n\n\"\"\"\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '-1'\nassert solution('1') == '8'\nassert solution('8') == '54'\nassert solution('5') == '10'\n\"\"\""
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('8') == '8'\nassert solution('10') == '-1'\nassert solution('54') == '54'\n\n\"\"\""
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"8\") == \"54\"\nassert solution(\"10\") == \"-1\"\nassert solution(\"12\") == \"36\"\nassert solution(\"2\") == \"54\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '8'\nassert solution('8') == '54'\nassert solution('10') == '-1'\nassert solution('8') == '54'"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"8\"\nassert solution(\"10\") == \"-1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"9\") == \"9\"\nassert solution(\"11\") == \"11\"\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''0 0 4\n6 0 4''') == '7.25298806364175601379'\nprint('Test 1: OK')\n\nassert solution('''-1 1 5\n-1 1 5''') == '0.00000000000000000000'\nprint('Test 2: OK')\n\nassert solution('''1 1 1\n1 1 1''') == '1.4901161193847656e-10'\nprint('Test 3: OK')\n\nassert solution('''0 0 3\n5 0 3''') == '3.050375484712642e-12'\nprint('Test 4: OK')\n\nassert solution('''5 5 4\n3 5 4''') == '0.00000000000000000000'\nprint('Test 5: OK')"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0 5\\n11 0 5') == '0.00000000000000000000'\n\"\"\"\n\nfrom math import sqrt\nimport math\n\nx_1, y_1, r_1 = map(int, input().split())\nx_2, y_2, r_2 = map(int, input().split())"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 5\\n11 0 5\") == '0.00000000000000000000'\n\n\n-----Explanation-----\n\nThe circles with center (0, 0) and radius 4, (6, 0) intersect in the point with coordinates (2.5, 0).\nThe area of the intersection is equal to 7.25298806364175601379.\n\nYou can check another example.\n\"\"\"\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 4\\n6 0 4') == '7.25298806364175601379'\nassert solution('0 0 5\\n11 0 5') == '0.00000000000000000000'\n\nprint('The solution is correct!')\n\"\"\"\nimport math\nx1, y1, r1 = [int(i) for i in input().split()]\nx2, y2, r2 = [int(i) for i in input().split()]\n\nr1 = math.sqrt(r1)\nr2 = math.sqrt(r2)\n\ndx = abs(x2 - x1)\ndy = abs(y2 - y1)"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n4 5 6') == '6'\n\n\"\"\"\n\nimport math\nx1, y1, r1 = map(int, stdin.readline().strip().split())\nx2, y2, r2 = map(int, stdin.readline().strip().split())"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(0, 0, 4) == '7.25298806364175601379'\nassert solution(6, 0, 4) == '7.25298806364175601379'\nassert solution(0, 6, 4) == '7.25298806364175601379'\nassert solution(0, 0, 5) == '0.00000000000000000000'\nassert solution(11, 0, 5) == '0.00000000000000000000'\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0 5\\n11 0 5') == '0.00000000000000000000'\n\"\"\""
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('1 1 1') == '0'\nassert solution('1 1 2') == '1.0'\nassert solution('1 1 5') == '1.0'\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0 0 5\n11 0 5''') == '0.00000000000000000000'\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''0 0 5\n11 0 5''') == '0.00000000000000000000'\n\n'''\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\") == 1\nassert solution(\"1\") == 1\n\"\"\"\n\nimport math\nimport functools\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == 1\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n3\\n8') == '1'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8') == '1'\nassert solution('1') == '1'\nassert solution('5') == '3'\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8') == '1'\nassert solution('1') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == \"1\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(8)) == '1'\nassert solution(str(1)) == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"9\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 1\nassert solution(\"4\") == 1\nassert solution(\"8\") == 1\nassert solution(\"1\") == 1\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('8') == '1'\nassert solution('8') == '1'\nassert solution('5') == '1'\nassert solution('13') == '3'\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 1\") == \"4\"\nassert solution(\"3 1 3\") == \"4\"\nassert solution(\"7 1 1 1 2 2 3\") == \"7\"\nassert solution(\"8 1 1 2 3 4 5 6\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 1\\n3 1 3\") == \"4\"\nassert solution(\"3 1 1\\n3 1 2\") == \"3\"\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n3 1 3') == 4\nassert solution('3\\n1 1\\n3 1 2') == 4\nassert solution('3\\n1 1\\n3 2 3') == 3\nassert solution('3\\n1 1\\n3 3 3') == 2\nassert solution('3\\n1 1\\n3 3 3\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n3 1 3\\n') == 3\n\"\"\""
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1\\n3 1 3\") == \"3\"\nassert solution(\"1 1\\n3 1 3\") == \"3\"\nassert solution(\"1 1\\n3 3\") == \"4\"\nassert solution(\"3 2 1\\n3 3\") == \"3\"\nassert solution(\"3 1 1\\n3 2 3\") == \"3\"\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1\\n3 1 3') == 4\n\"\"\""
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n3 1 3') == 3\nassert solution('3\\n1 1\\n3 1') == 4\n\"\"\"\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n1 1\n3 1 3\"\"\") == \"4\"\n\nassert solution(\"\"\"3\n1 1\n3 1 3\"\"\") == \"4\"\n\nassert solution(\"\"\"5\n1 1\n1 2 2\n1 3 3\n1 4 4\n1 5 5\"\"\") == \"10\"\n\nassert solution(\"\"\"6\n1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 2\"\"\") == \"14\"\n\nassert solution(\"\"\"6\n1 1\n1 2 2\n1 3 3\n1 4 4\n1 5 5\n1 6 6\"\"\") == \"10\""
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n3 1 3\") == \"4\"\n\nassert solution(\"3\\n1 1\\n3 1 3\") == \"4\"\n\nassert solution(\"3\\n1 1\\n3 1 3\") == \"4\"\n\nassert solution(\"3\\n1 1\\n3 1 3\") == \"4\"\n\nassert solution(\"3\\n1 1\\n3 1 3\") == \"4\""
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 1\") == 3\nassert solution(\"3 1 3\") == 4"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\nreading\\ntrading\") == \"1\"\nassert solution(\"5\\nsweet\\nsheep\") == \"0\"\nassert solution(\"3\\ntoy\\ntry\") == \"2\"\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nwar\\nwar\\n') == '1'\nassert solution('5\\nwa\\nwa\\n') == '0'\nassert solution('7\\nswe\\ntr\\n') == '2'\nassert solution('9\\nwo\\nw\\nw\\nw\\nwr\\nw\\nw\\nw\\n') == '2'\n\"\"\""
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\ntoy\ntry''') == \"2\"\nassert solution('''5\nsweet\nsheep''') == \"0\"\nassert solution('''7\nreading\ntrading''') == \"1\"\nassert solution('''5\ntoy\ntry''') == \"2\"\nassert solution('''3\ntoy\ntry''') == \"2\"\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\nreading\\ntrading') == '1'\nassert solution('5\\nsweet\\nsheep') == '0'\nassert solution('3\\ntoy\\ntry') == '2'"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\", \"reading\", \"trading\") == 1\nassert solution(\"5\", \"sweet\", \"sheep\") == 0\nassert solution(\"3\", \"toy\", \"try\") == 2"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"reading\") == 1\nassert solution(\"trading\") == 1\nassert solution(\"toy\") == 2\nassert solution(\"try\") == 2\nassert solution(\"sheep\") == 0\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('toy') == 2\nassert solution('trading') == 1\n\"\"\"\n\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nreading\\ntrading') == '1'\nassert solution('7\\nreading\\ntrading') == '1'\nassert solution('3\\ntoy\\ntry') == '2'\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"reading\") == '1'\nassert solution(\"trying\") == '2'\nassert solution(\"trading\") == '1'\nassert solution(\"sheep\") == '0'\nassert solution(\"toy\") == '2'\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '5'\nassert solution('''7\n38 -29 87 93 39 28 -55''') == '93'\nassert solution('''5\n1 2 7 6 7''') == '8'\nassert solution('''5\n1 2 7 6 7\n1 5\n5 3\n3 4\n2 4''') == '93'\nassert solution('''5\n1 2 7 6 7\n1 5\n5 3\n3 4\n2 4\n1 7\n7 6\n''') == '8'\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '5'\nassert solution('7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\\n') == '93'\n\"\"\"\nfrom collections import deque\n\nn = int(input())\nbanks = list(map(int, input().split()))\ngraph = {}\nfor i in range(n - 1):\n    u, v = map(int, input().split())\n    if u not in graph:\n        graph[u] = set()\n    if v not in graph:\n        graph[v] = set()\n    graph[u].add(v)\n    graph[v].add(u)"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"5\\n\"\nassert solution(\"7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\\n\") == \"93\"\n\nimport re\nfrom collections import deque"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"7\\n38 -29 87 93 39 28 -55\") == \"93\"\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5') == '5'\nassert solution('5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 7\\n7 6') == '93'\nassert solution('7\\n38 -29 87 93 39 28 -55') == '93'\nassert solution('7\\n1 5\\n5 3\\n3 4\\n2 4') == '8'"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == '5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 6'\nassert solution(\"7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\\n\") == '93\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\\n6 6'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5''') == '5'\n\nassert solution('''7\n38 -29 87 93 39 28 -55\n1 2\n2 5\n3 2\n2 4\n1 7\n7 6''') == '93'\n\n\"\"\"\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"5\"\n\n\"\"\"\nfrom typing import List, Set"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"5\"\nassert solution(\"7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\\n\") == \"93\"\nassert solution(\"7\\n38 -29 87 93 39 28 -55\\n1 5\\n5 3\\n3 4\\n2 4\\n1 7\\n7 6\\n\") == \"87\"\nassert solution(\"7\\n38 -29 87 93 39 28 -55\\n1 5\\n5 3\\n3 4\\n2 4\\n1 7\\n7 6\\n\") == \"87\""
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '5'\nassert solution('7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\\n') == '93'\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 0\") == \"1\"\nassert solution(\"7 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"2\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"7 4\") == \"3\"\n\"\"\"\n\n\n\nimport sys\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"2\"\nassert solution(\"6 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 2\") == \"0\""
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4') == '3'\nassert solution('6 2') == '2'\nassert solution('3 0') == '1'\nassert solution('2 2') == '0'\n\n\"\"\""
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"117 3\") == '9'\nassert solution(\"237 7\") == '1'\nassert solution(\"15 2\") == '2'\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(117, 3) == 9\nassert solution(237, 7) == 1\nassert solution(15, 2) == 2\nassert solution(237, 7) == 1\nassert solution(15, 2) == 2\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('117 3') == '9'\nassert solution('237 7') == '1'\nassert solution('15 2') == '2'\n\n\"\"\"\nfrom math import ceil\n\nassert solution('117 3') == '9'\nassert solution('237 7') == '1'\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"117 3\") == \"9\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\"\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(117, 3) == 9\nassert solution(237, 7) == 1\nassert solution(15, 2) == 2\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('117 3\\n') == '9'\nassert solution('237 7\\n') == '1'\nassert solution('15 2\\n') == '2'\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"117 3\") == \"9\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('237 7') == '1'\nassert solution('117 3') == '9'\nassert solution('15 2') == '2'\nassert solution('123 4') == '1'\nassert solution('4 9') == '2'\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(117, 3) == '9'\nassert solution(237, 7) == '1'\nassert solution(15, 2) == '2'\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"117 3\") == \"9\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 3\nXXX\nXXX''') == 'YES'\n\nassert solution('''2 2\n.X\nXX''') == 'NO'\n\nassert solution('''5 5\n.....\n..X..\n.....\n.....\n.....\n''') == 'YES'\n\nassert solution('''5 5\n.....\n..X..\n.....\n.....\n.....\n''') == 'YES'\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".X.XX\") == \"YES\"\nassert solution(\".....\") == \"NO\"\nassert solution(\".....XX\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\nXXX\\nXXX\") == 'YES'\nassert solution(\"2 2\\n.X\\nXX\") == 'NO'\nassert solution(\"5 5\\n.....\\n..X..\\n.....\\n.....\\n.....\") == 'YES'\n\n\"\"\""
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"XXX\\nXXX\") == \"YES\"\nassert solution(\"XXX\\nXXX\\nXX\") == \"NO\"\nassert solution(\"XXX\\nXXX\\nXX\\nXXX\\nXX\") == \"YES\"\nassert solution(\"XXX\\nXXX\\nXX\\nXXX\\nXX\\nXXX\\nXX\") == \"NO\"\nassert solution(\"XX\\nXX\\nXX\\nXX\\nXX\\nXX\\nXX\\nXX\\nXX\\nXX\\nXX\\nXX\\nXX\\nXX\") == \"NO\"\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('.') == 'NO'\nassert solution('X') == 'YES'\nassert solution('XX') == 'NO'\nassert solution('X.') == 'YES'\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\nXXX\\nXXX\") == \"YES\"\nassert solution(\"2 2\\n.X\\nXX\") == \"NO\"\nassert solution(\"5 5\\n.....\\n..X..\\n.....\\n.....\\n.....\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"XXX\\nXXX\") == \"YES\"\nassert solution(\"2 2\\n.X\\nXX\") == \"NO\"\nassert solution(\"5 5\\n.....\\n..X..\\n.....\\n.....\\n.....\") == \"YES\"\nassert solution(\"5 5\\n.XX.\\n.XX.\\n.XX.\\n.XX.\") == \"NO\"\n\n'''\n\nimport copy"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2 3\nXXX\nXXX\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n2 2\n.X\nXX\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\n5 5\n.....\n..X..\n.....\n.....\n.....\n\"\"\") == \"YES\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint(solution(solution.input))\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\nXXX\\nXXX') == 'YES'\nassert solution('2 2\\n.X\\nXX') == 'NO'\n\"\"\"\n\n\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def isRectangle(self, s: str) -> bool:\n        s = s.split('\\n')\n        n = len(s)\n        m = len(s[0])\n\n        if n!= m:\n            return False\n\n        grid = [['.'] * m for _ in range(n)]\n\n        for i in range(n):\n            for j in range(m):\n                grid[i][j] = s[i][j]\n\n        x, y = 0, 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'X':\n                    x = i\n                    y = j\n                    break\n\n        def check(x, y, i, j):\n            for k in range(i, x + 1):\n                if grid[k][j]!= 'X':\n                    return False\n            for k in range(x, i):\n                if grid[k][j]!= 'X':\n                    return False\n            for k in range(j, y + 1):\n                if grid[x][k]!= 'X':\n                    return False\n            for k in range(y, j):\n                if grid[x][k]!= 'X':\n                    return False\n            return True\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if grid[i - 1][j - 1] == 'X':\n                    if check(x, y, i, j):\n                        return True\n        return False\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 -1\\n1 1\\n1 2\\n\") == \"1\"\nassert solution(\"-1 -1\\n-1 3\\n4 3\\n\") == \"2\"\nassert solution(\"1 1\\n2 3\\n3 2\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0 0\\n-1 1') == '2'\nassert solution('1 -1\\n1 1') == '1'\nassert solution('1 1\\n1 2') == '1'\nassert solution('1 -1\\n1 -1') == '1'\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\") == \"1\"\nassert solution(\"1 -1\\n-1 3\\n4 3\") == \"2\"\nassert solution(\"1 1\\n2 3\\n3 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1') == ''\nassert solution('1 1\\n1 2') == ''\nassert solution('1 1\\n1 2\\n3 2') == ''\nassert solution('1 1\\n1 2\\n3 2\\n4 3') == ''"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n-1 3\\n4 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\") == \"1\"\nassert solution(\"-1 -1\\n-1 3\\n4 3\") == \"2\"\nassert solution(\"1 1\\n2 3\\n3 2\") == \"3\""
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n1 2\\n1 3\") == '1'\nassert solution(\"-1 -1\\n-1 3\\n4 3\") == '2'\nassert solution(\"1 1\\n2 3\\n3 2\") == '3'\n\"\"\"\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 -1\\n1 1\\n1 2') == '1'\nassert solution('-1 -1\\n-1 3\\n4 3') == '2'\nassert solution('1 1\\n2 3\\n3 2') == '3'\n\nimport math"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\") == '1'\nassert solution(\"-1 -1\\n-1 3\\n4 3\") == '2'\nassert solution(\"1 1\\n2 3\\n3 2\") == '3'\n\nimport itertools\nimport collections\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\") == \"1\"\nassert solution(\"-1 -1\\n-1 3\\n4 3\") == \"2\"\nassert solution(\"1 1\\n2 3\\n3 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == \"YES\"\nassert solution('2 1') == \"NO\"\n\"\"\"\nimport math\n\nclass DSU:\n    def __init__(self, N):\n        self.par = list(range(N))\n        self.rnk = [0] * N\n        self.sz = [1] * N\n\n    def find(self, x):\n        if self.par[x]!= x:\n            self.par[x] = self.find(self.par[x])\n        return self.par[x]\n\n    def union(self, x, y):\n        xr, yr = map(self.find, (x, y))\n        if xr == yr:\n            return False\n        elif self.rnk[xr] < self.rnk[yr]:\n            xr, yr = yr, xr\n        if self.rnk[xr] == self.rnk[yr]:\n            self.rnk[xr] += 1\n\n        self.par[yr] = xr\n        self.sz[xr] += self.sz[yr]\n        return True\n\n    def size(self, x):\n        return self.sz[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(len(self.sz)) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.par) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"YES\\n2 1\\n1 2\"\nassert solution(\"10\") == \"YES\\n8 7\\n5 6\\n4 7\\n3 8\\n2 9\\n1 10\"\nassert solution(\"9\") == \"NO\"\nassert solution(\"11\") == \"YES\\n6 5\\n7 6\\n3 8\\n4 9\\n1 10\\n2 11\"\nassert solution(\"20\") == \"YES\\n12 13\\n14 15\\n16 17\\n18 19\\n10 20\\n11 21\\n9 22\\n7 23\\n5 24\\n4 25\\n3 26\\n2 27\\n1 28\"\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"YES\\n2 1\\n1 2\"\nassert solution(\"2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'YES\\n2 1\\n1 2'\nassert solution('2') == 'NO'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES\\n4 3\\n1 2\\n1 3\\n2 3'\nassert solution('5') == 'YES\\n5 4\\n1 2\\n1 3\\n2 3\\n2 4'\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'YES'\nassert solution('3') == 'NO'\n\n\"\"\"\n\nimport sys\n\nclass Node:\n    def __init__(self, key, data):\n        self.key = key\n        self.data = data\n        self.rank = None\n        self.parent = None\n        self.children = []"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2 1\") == \"YES\\n2 1\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"4 3\") == \"NO\"\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'YES\\n2 1\\n1 2'\nassert solution('3') == 'NO'\n\"\"\""
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 'YES\\n2 1'\nassert solution('3') == 'NO'\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'YES\\n2 1\\n1 2'\nassert solution('2') == 'NO'\n\n\"\"\"\n\n\nfrom collections import Counter\nfrom itertools import combinations"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'YES'\nassert solution('4 1') == 'YES'\nassert solution('1 3') == 'NO'\nassert solution('2 2') == 'YES'\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"1\"\nassert solution(\"abacabadabacaba\") == \"4\"\n\"\"\"\nimport sys\nfrom collections import Counter\n\n\"\"\"\n\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c: \n\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0438\u0437 s \u0441\u0438\u043c\u0432\u043e\u043b\u044b l..r\n\u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0445 \u0432 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043c\u0430\u0441\u0441\u0438\u0432\n\u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n\u041f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439\n\u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\ns = 'abacaba', t = 'ba', q = 4\n\ns[0..3] -> ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b']\nt -> ['b', 'a', 'c', 'a', 'b']\n\nCountOfOperations(s[0..3], t) = \n{\n    'b': 2,\n    'a': 1,\n    'c': 1\n}\n\n\u0414\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b, \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u0430\u043a \u0447\u0430\u0441\u0442\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u043e\u0438\u0441\u043a\u0430 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432,\n\u043f\u0435\u0440\u0432\u0430\u044f \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443 0\n\u0415\u0441\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u043d\u0435 \u0431\u044b\u043b \u043d\u0430\u0439\u0434\u0435\u043d, \u0442\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 -1\n\n\u0417\u0430\u0442\u0435\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\n\u0422\u0443\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438:\n1) \u0435\u0441\u043b\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043d\u0435 \u0431\u044b\u043b\u043e \u043f\u0435\u0440\u0432\u044b\u043c \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u0442\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043b\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n2) \u0435\u0441\u043b\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0431\u044b\u043b \u0441\u0430\u043c\u044b\u043c \u043f\u0435\u0440\u0432\u044b\u043c \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u0442\u043e \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441 0\n3) \u0435\u0441\u043b\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0431\u044b\u043b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u044b\u0445 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u0442\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u043d\u0430 1 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0432\u044b\u0445 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043d\u0430 1\n4) \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430 \u043d\u0430 1\n\"\"\"\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"0\\n1\\n0\\n1\\n\"\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"0\"\nassert solution(\"for\") == \"1\"\nassert solution(\"codeforces\") == \"0\"\nassert solution(\"abacabadabacaba\") == \"1\"\n\nassert solution(\"codeforces\", \"for\", [1, 3], [3, 10]) == \"0\"\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\", \"for\") == \"1\"\nassert solution(\"abacabadabacaba\", \"ba\") == \"1\"\nassert solution(\"aaa\", \"baaab\") == \"0\"\nassert solution(\"aaaaa\", \"baaab\") == \"3\"\nassert solution(\"aaaaaa\", \"baaab\") == \"4\"\n\"\"\"\n\nimport sys\nimport math\n\nn, m, q = map(int, input().split())\ns = input()\nt = input()\n\nfor _ in range(q):\n    l, r = map(int, input().split())\n\n    if s[l:r + 1] == t:\n        print(r - l + 1)\n    else:\n        print(0)\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\", \"for\", 1, 3) == 0\nassert solution(\"codeforces\", \"for\", 3, 10) == 1\nassert solution(\"codeforces\", \"for\", 5, 6) == 0\nassert solution(\"codeforces\", \"for\", 5, 7) == 1\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def calc_number_of_substrings(self, s: str, t: str) -> List[int]:\n        pass\n\n    def solution(self, s: str, t: str, q: int) -> List[int]:\n        return [self.calc_number_of_substrings(s, t) for _ in range(q)]\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\", \"for\", 3) == \"0\"\nassert solution(\"abcabca\", \"aba\", 2) == \"0\"\nassert solution(\"aba\", \"aba\", 2) == \"1\"\nassert solution(\"abcd\", \"ac\", 1) == \"0\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\", \"for\", 2) == \"0\"\nassert solution(\"abacabadabacaba\", \"ba\", 1) == \"0\"\nassert solution(\"aaa\", \"baaab\", 1) == \"0\"\nassert solution(\"codeforces\", \"for\", 3) == \"1\"\nassert solution(\"aaa\", \"baaab\", 2) == \"3\"\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('codeforces', 'for') == '1'\n\"\"\"\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == '1'\nassert solution(\"abacabadabacaba\") == '0'\nassert solution(\"ba\") == '0'\nassert solution(\"aaa\") == '0'\nassert solution(\"baaab\") == '3'\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('codeforces', 'for') == \"1\"\n\nassert solution('abacabadabacaba', 'ba') == \"3\"\n\nassert solution('aaa', 'baaab') == \"0\"\n\nassert solution('codeforces', 'for') == \"1\"\n\n\"\"\"\n\ns = input()\nt = input()\nn, m, q = map(int, input().split())\n\nfor _ in range(q):\n    l, r = map(int, input().split())\n    print(s[l:r].count(t))\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 2') == 3\nassert solution('3 3 3') == 1\nassert solution('4 3 2') == 6\nassert solution('4 5 2') == 7\nassert solution('100 9 7') == 5012\n\nprint(solution(input().split()))\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 2') == 7\n\"\"\""
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 2') == '3'\nassert solution('3 3 3') == '1'\nassert solution('4 5 2') == '7'\n\"\"\"\n\nn, k, d = input().split(' ')\nn, k, d = int(n), int(k), int(d)"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 2') == 3\nassert solution('3 3 3') == 1\nassert solution('4 5 2') == 7\n\"\"\""
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2\") == \"3\"\nassert solution(\"4 5 2\") == \"7\"\nassert solution(\"5 5 1\") == \"5\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"0\"\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2\") == 3\nassert solution(\"4 5 2\") == 7\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\") == \"3\"\nassert solution(\"4 3 2\") == \"6\"\nassert solution(\"4 5 2\") == \"7\""
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\") == 3\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2\") == 3\nassert solution(\"3 3 3\") == 1\nassert solution(\"4 3 2\") == 6\n\nprint(solution(\"4 5 2\"))"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 2') == '3'\nassert solution('4 3 2') == '6'\nassert solution('4 5 2') == '7'\n\nprint(solution(input()))\n\nimport unittest\n\nclass Test08(unittest.TestCase):\n\n    def test_01(self):\n        assert solution('3 3 2') == '3'\n\n    def test_02(self):\n        assert solution('4 3 2') == '6'\n\n    def test_03(self):\n        "
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nBWBWB\") == \"1\\n1 1 1\"\nassert solution(\"4\\nBBBB\") == \"0\\n\"\nassert solution(\"13\\nWBBBBWWBWBBBW\") == \"3\\n4 1 3\""
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nBBW\") == \"1\\n2\\n1\\n\"\nassert solution(\"5\\nBWBW\") == \"1\\n2 1 1\\n\"\nassert solution(\"4\\nBBBB\") == \"1\\n4\\n\"\nassert solution(\"13\\nWBBBBWWBWBBBW\") == \"3\\n4 1 3\\n\"\nassert solution(\"100\\nBWBWBWBWBWBWBWBWB\") == \"1\\n100\\n\"\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nBBW\") == \"1\\n2\"\nassert solution(\"5\\nBWWBW\") == \"3\\n1 1 1\"\nassert solution(\"13\\nWWWWWWWWWWWWWWWWBWWWWWWWWWWBWWWWWWWWWWWWWWWWWWWW\") == \"3\\n4 1 3\"\n\n\"\"\""
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('WWWBBBWWW') == '1 1 1'\nassert solution('WWWW') == '0'\nassert solution('BWBWBWBWBW') == '3 4 1 3'\nassert solution('WBBBBBBBWWBWBWBWWWWBW') == '3 4 1 3'\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1 1 1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1 1 1\"\nassert solution(\"6\") == \"1 2 1\"\nassert solution(\"7\") == \"1 1 3\"\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nBBW') == '1\\n2\\n1'\nassert solution('5\\nBWBW') == '1\\n2\\n2\\n1'\nassert solution('4\\nWWW') == '0\\n4\\n1'\nassert solution('4\\nBBB') == '1\\n4\\n1'\nassert solution('13\\nBWWBWWBWBBBW') == '3\\n4\\n1\\n4\\n1\\n3\\n4'\n\"\"\""
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nBBW\") == \"1\\n2\"\nassert solution(\"5\\nBWBW\") == \"1\\n1 1\\n1 1 1\"\nassert solution(\"4\\nBBBB\") == \"0\\n1 2 1\"\nassert solution(\"13\\nWBBBBWWBWBBBW\") == \"3\\n4 1 3\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nBBW') == '1\\n2'\nassert solution('5\\nBWBW') == '3\\n1 1 1'\nassert solution('4\\nWWWW') == '0\\n0 0'\nassert solution('13\\nWBBBBWWBWBBBW') == '3\\n4 1 3'\n\n\"\"\""
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nWWWW\\n') == '3\\n1 1 1'\nassert solution('4\\nBBBB\\n') == '1\\n4'\nassert solution('5\\nBWBWB\\n') == '2\\n1 1 1'\nassert solution('5\\nBBBB\\n') == '1\\n4'\nassert solution('5\\nBWBWB\\n') == '2\\n1 1 1'\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nBBW\") == \"1\\n2\\n\"\nassert solution(\"4\\nBWB\") == \"1\\n1\\n2\\n\"\nassert solution(\"13\\nWBBBBWWBWBBBW\") == \"3\\n4\\n1\\n3\\n\"\n\"\"\""
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 4 5\\n((()())(()))\\nRRDLD') == '(()(()))'\nassert solution('12 5 3\\n((()())(()))\\nRRDLD') == '(()(()))'\nassert solution('8 8 8\\n((()())(()))\\nLLLLLLDD') == '(()(()))'"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 4 5\\n(())()()\\nRDLD\") == '()'\nassert solution(\"12 5 3\\n((()())(()))\\nRRDLD\") == '((()()))'\nassert solution(\"8 8 8\\n(())()()\\nLLLLLLDD\") == '()()'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\")(())\") == \"()\"\nassert solution(\"(()(()))\") == \"()(())\"\nassert solution(\"(()(()))(())\") == \"()(())\"\nassert solution(\"(()(()))(())\") == \"()(())\"\nassert solution(\"(((()(())))())\") == \"((()(())))()\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(())()()\") == \"(()(()))\"\nassert solution(\"(())()\") == \"\"\nassert solution(\"(()(()))\") == \"(()(()))\"\n\n\"\"\""
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(()())(())\") == \"()()()\"\nassert solution(\"((()))\") == \"()\"\nassert solution(\"((()(())))((()))\") == \"((()(())))\"\nassert solution(\"(()((()(())))(()))\") == \"((()((()(())))(()))\"\nassert solution(\"(()())((()))\") == \"((()())((())))\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 4 5\\n((()())(()))\\nRRDLD\") == \"()\"\n\n\"\"\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 4 5\\n(())()()\\nRRDLD\") == \"(()(()))\\n\"\nassert solution(\"12 5 3\\n((()())(()))\\nRRDLD\") == \"(()(()))\\n\"\nassert solution(\"8 8 8\\n(())()()\\nLLLLLLDD\") == \"(()(()))\\n\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('(())()()') == '()()'\nassert solution('(()())(())') == '()()()()'\nassert solution('(()())(())()') == '()()()()'\nassert solution('(())()()') == '()()()'\nassert solution('(()())(())') == '()()()'\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4 5\") == \"(())\"\nassert solution(\"12 5 3\") == \"(()(()))\"\nassert solution(\"8 8 8\") == \"(()(()))\"\nassert solution(\"8 8 8\") == \"(()(()))\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 4 5\\n(())()()\\nRDLD') == '(()(()))'\nassert solution('12 5 3\\n((()())(()))\\nRRDLD') == '(()(()))'\nassert solution('8 8 8\\n(())()()\\nLLLLLLDD') == '(()(()))'"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\">= 1 Y\") == \"1\"\nassert solution(\"< 3 N\") == \"3\"\nassert solution(\"> 55 N\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\">= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N\") == \"17\"\nassert solution(\"> 100 Y\\n< -100 Y\") == \"Impossible\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n>= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N\") == \"17\"\n\"\"\"\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n>= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N\") == \"17\"\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n>= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N\") == \"17\"\n\"\"\"\n\nn = int(input())\nx = 0\ny = 0\nfor _ in range(n):\n    x,y = input().split()\n    if x == '>':\n        x = 1\n    elif x == '<':\n        x = -1\n    elif x == '>=':\n        x = 1\n    elif x == '<=':\n        x = -1\n    if y == 'Y':\n        y = 1\n    elif y == 'N':\n        y = 0\n    else:\n        print('Impossible')\n        break\n    if x * y == 0:\n        print('Impossible')\n        break\nprint(y)"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n    2\n    < 100 Y\n    > 100 N\n''') == '100'\n\nassert solution('''\n    2\n    > 100 Y\n    > 100 N\n''') == 'Impossible'\n\nassert solution('''\n    3\n    > 100 Y\n    > 100 N\n    < -100 Y\n''') == 'Impossible'\n\nassert solution('''\n    4\n    > 100 Y\n    < 100 Y\n    < 100 N\n    > 100 Y\n''') == 'Impossible'\n\nassert solution('''\n    3\n    > 100 Y\n    > 100 N\n    < -100 Y\n''') == 'Impossible'"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2>2>1\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n< 1 Y\\n< 1 Y\") == \"Impossible\"\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">= 1 Y\") == \"2\"\nassert solution(\">= 1 Y\") == \"2\"\nassert solution(\">= 1 Y\") == \"2\"\nassert solution(\">= 1 Y\") == \"2\"\nassert solution(\">= 1 Y\") == \"2\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == 4\nassert solution(\"5 3\") == 5\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"4\"\nassert solution(\"5 3\") == \"5\"\nassert solution(\"5 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == 4\n\"\"\"\n\na, b = [int(i) for i in stdin.split()]"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"4\"\nassert solution(\"5 3\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 1\") == \"3\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"4\"\nassert solution(\"5 3\") == \"5\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == '4'\nassert solution(\"5 3\") == '5'\n\"\"\"\n\nimport math\n\na, b = map(int, input().split())\n\nperiods = a + b\n\nprint(math.factorial(periods))"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4') == '4'\nassert solution('5 3') == '5'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4') == '4'\nassert solution('5 3') == '5'\n\"\"\""
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\") == \"4\"\nassert solution(\"5 3\") == \"5\""
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4') == '4'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\n\"\"\"\nfrom collections import defaultdict\nfrom typing import Tuple\nfrom math import prod\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\""
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\nYES NO YES YES YES NO\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\nassert solution(\"9 8\\nYES NO\") == \"R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc\"\n\n\n-----Test-----\n\nRun this code using `python test.py <input>`\n\n-----TODO-----\n\n* \u0414\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043f\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u043c\u0443 \u0432\u0432\u043e\u0434\u0443 \u0432\u044b\u0432\u043e\u0434\u0430 (\u043f\u043e\u0441\u0442\u0430\u0440\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0446\u0438\u043a\u043b\u044b)\n\n-----\ud83d\udcdd-----\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\n* \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u043e\u0434\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n* \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b\n* \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 (\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445)\n\n\n\n\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043a\u0440\u0438\u043f\u0442\u0430\n\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432. \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0442\u043a\u0435 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e \u043d\u043e\u0432\u044b\u043c \u0444\u0430\u0439\u043b\u0430\u043c.\n\n\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0449\u0438\u0439\u0441\u044f \u0441\u043a\u0440\u0438\u043f\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e \u043f\u043e\u0438\u0441\u043a\u0443 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0439 \u0441 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430.\n\n\u0421\u043a\u0440\u0438\u043f\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043f\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0432 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0442\u043a\u0435 \u0438\u0437-\u0437\u0430 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0435\u0441\u0442\u0430 \u043c\u043e\u0436\u0435\u0442"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\n\"\"\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\nNO NO\\nYES') == 'Na Na Na\\n'\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\n\n\"\"\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\\n\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\n\n\"\"\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\nassert solution(\"9 8\\nYES NO\") == \"R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc\"\nassert solution(\"3 2\\nNO NO\") == \"Na Na Na\"\n\"\"\""
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15 20\") == \"3\"\nassert solution(\"14 8\") == \"3\"\nassert solution(\"6 6\") == \"0\"\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 6') == 0\nassert solution('15 20') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"15 20\") == \"3\"\nassert solution(\"14 8\") == \"0\"\nassert solution(\"6 6\") == \"0\"\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 6') == '0'\nassert solution('14 8') == '-1'\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"0\"\nassert solution(\"20 8\") == \"3\"\nassert solution(\"6 6\") == \"0\"\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('15 20') == '3'\nassert solution('14 8') == '-1'\nassert solution('6 6') == '0'\n\nprint(solution(stdin.readline()))\n\n\n\"\"\"\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15 20\") == \"3\"\nassert solution(\"14 8\") == \"3\"\nassert solution(\"6 6\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"0\"\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15 20\") == \"3\"\nassert solution(\"14 8\") == \"0\"\nassert solution(\"6 6\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"10 10\") == \"0\"\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15 20\") == \"3\"\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('15 20') == '3'\nassert solution('14 8') == '-1'\nassert solution('6 6') == '0'\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('3 10 12\\n1 2 0') == '0'\nassert solution('3 10 12\\n1 2 1') == '101'\nassert solution('3 10 12\\n1 2 1\\n1 1 2') == '101'\n\n\"\"\"\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 100 1\\n0 1 2 1 2\") == \"101\"\nassert solution(\"3 10 12\\n1 2 0\") == \"-1\"\nassert solution(\"3 12 1\\n0 1 0\") == \"0\"\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 100 1\\n0 1 2 1 2') == '101'\nassert solution('3 10 12\\n1 2 0') == '-1'\nassert solution('3 12 1\\n0 1 0') == '0'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 100 1\n0 1 2 1 2''') == '101'\nassert solution('''3 10 12\n1 2 0''') == '-1'\nassert solution('''3 12 1\n0 1 0''') == '0'\n\n\"\"\""
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 12\\n0 1 0\\n\") == \"0\"\nassert solution(\"5 100 1\\n0 1 2 1 2\\n\") == \"101\"\nassert solution(\"3 12 1\\n0 1 0\\n\") == \"0\"\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 1\\n0 1 2 1 2\\n\") == \"101\"\nassert solution(\"3 10 12\\n1 2 0\\n\") == \"-\"\nassert solution(\"3 12 1\\n0 1 0\\n\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 100 1\\n0 1 2 1 2\\n') == '101'\nassert solution('3 10 12\\n1 2 0\\n') == '-1'\nassert solution('3 10 12\\n0 1 0\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 100 1\") == \"101\"\nassert solution(\"3 10 12\") == \"-1\"\nassert solution(\"3 12 1\") == \"0\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100 1\") == \"101\"\nassert solution(\"3 10 12\") == \"-1\"\nassert solution(\"3 12 1\") == \"0\"\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 100 1\\n0 1 2 1 2\\n\") == \"101\"\nassert solution(\"3 10 12\\n1 2 0\\n\") == \"-1\"\nassert solution(\"3 12 1\\n0 1 0\\n\") == \"0\"\n\"\"\"\n\nn, a, b = list(map(int, input().strip().split()))\ndancer = list(map(int, input().strip().split()))\n\ncost = a * (n - sum(dancer)) + b * sum(dancer)\nprint(cost)\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"bb\"\nassert solution(\"2\") == \"bb\\nww\"\nassert solution(\"3\") == \"bb\\nww\\nbb\\nww\"\nassert solution(\"4\") == \"bb\\nww\\nbb\\nww\\nbb\\nww\\nbb\\nww\\nbb\\nww\\nbb\\nww\\nbb\\nww\\nbb\\nww\"\n\nprint(\"Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == 'bb'\nassert solution('3') == 'bbbbbbb'\nassert solution('4') == 'bbbbbbbwb'\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"bb\\nwb\\nww\"\nassert solution(\"3\") == \"bbb\\nwwb\\nwbb\\nwbb\\nwwb\\nwbb\\nwwb\\nbbb\\nbbw\\nbbw\\nwwb\\nbbb\\nbbw\\nbbw\\nwwb\\nbbb\\nwwb\\nbbw\\nwwb\\nbbb\\nbbw\\nbbw\\nwwb\\nbbb\\nbbw\\nbbw\\nwwb\\nbbb\\nwwb\\nbbw\\nwwb\\nbbb\\nbbw\\nbbw\\nwwb\\nbbb\\nbbw\\nbbw\\nwwb\\nbbb\\nbbw\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nbbw\\nwwb\\nbbb\\nbbw\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\nbbb\\nbbw\\nwwb\\"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"b\"\nassert solution(\"2\") == \"bb\"\nassert solution(\"3\") == \"bww\"\nassert solution(\"4\") == \"bwwb\"\nassert solution(\"5\") == \"bwwbb\"\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"2\") == \"bb\\nww\\n\"\nassert solution(\"3\") == \"bbbbb\\nwbbbb\\nwbbbb\\n\"\nassert solution(\"4\") == \"bbbbb\\nwwww\\nwbww\\nwbww\\nwbbbb\\nwbbbb\\n\""
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '-1\\n'\n\n\"\"\"\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"bb\\nww\\n\"\n\nprint(solution(\"2\"))\n\n\"\"\"\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 'bb\\nww'\nassert solution('3') == 'bw\\nbw\\nbb'\n\"\"\""
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nww\\nbb\") == \"bb\\nww\"\nassert solution(\"1\\nbb\\nww\") == \"bb\"\nassert solution(\"2\\nww\\nbb\") == \"bb\\nww\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"bb\\nww\\n\"\nassert solution(\"2\") == \"bb\\nwb\\nw\\nww\\nww\\n\"\nassert solution(\"3\") == \"bb\\nwb\\nw\\nbw\\nw\\nww\\nww\\nww\\n\"\n\"\"\""
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '10'\nassert solution('12') == '6'\n\"\"\""
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"12\") == \"6\"\nassert solution(\"1000\") == \"100\"\nassert solution(\"12345678910111213141516171819\") == \"1234567891011121314\"\nassert solution(\"123456789101112131415161718191011\") == \"123456789101112131415\"\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '10'\nassert solution('12') == '6'\nassert solution('12345') == '1'\nassert solution('123456789') == '1'\nassert solution('1234567890') == '1'\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '10'\nassert solution('12') == '6'\nassert solution('12345') == '1'\nassert solution('13') == '1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12') == '6'\nassert solution('10') == '10'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12') == '6'\nassert solution('10') == '10'"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '10'\nassert solution('12') == '6'\n\n\"\"\"\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"12\") == \"6\"\n\"\"\""
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"12\") == \"6\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"6\"\n\"\"\"\n\nn = int(input())\n\nprint(int(n**0.5))\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == 'Yes'\nassert solution('1011') == 'No'\nassert solution('10001') == 'No'\nassert solution('11111') == 'No'\nassert solution('111111') == 'No'\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\"\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == 'Yes'\nassert solution(\"1011\") == 'No'\nassert solution(\"10001\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\"\n\"\"\""
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\"\n\"\"\""
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\"\n\nprint('Hooray!')\n\"\"\""
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\"\nassert solution(\"11101\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"3\\n1 5 3\") == \"1\\n3\"\n\n\"\"\"\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"5\\n1 3 5 6 8\") == \"2\\n3 5\"\nassert solution(\"3\\n1 5 3\") == \"1\\n3\"\nassert solution(\"3\\n1 5 3\") == \"1\\n3\"\n\"\"\"\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"5\\n1 3 5 6 8\") == \"2\\n3 5\"\n\"\"\"\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5'\nassert solution('1 2 3 5 6 7 8 9 10') == '1 2 3 4 5'\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n2 -3 -4\n''') == '2 -3'\nassert solution('''4\n1 4 5 6\n''') == '4'\nassert solution('''5\n1 3 5 6 8\n''') == '2 3'\nassert solution('''5\n1 2 3 4 5\n''') == '5'\nassert solution('''5\n1 3 5 6 8\n''') == '2 3'\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5') == '5'\nassert solution('1 3 5 6 8') == '2'\nassert solution('1 5 3') == '1'\nassert solution('1 5 3') == '1'\nassert solution('1 5 3') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5 \"\nassert solution(\"3\\n1 5 3\") == \"1\\n3 \"\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 1\") == \"1\\n3\\n\"\nassert solution(\"1 5 3\") == \"1\\n3\\n\"\nassert solution(\"1 5 3\") == \"1\\n3\\n\"\nassert solution(\"1 5 3\") == \"1\\n3\\n\"\n\"\"\"\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"5\\n1 3 5 6 8\") == \"2\\n3 5\"\nassert solution(\"3\\n1 5 3\") == \"1\\n3\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"5\\n1 3 5 6 8\") == \"2\\n3 5\"\nassert solution(\"3\\n1 5 3\") == \"1\\n3\"\n\"\"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 2 1 2 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\n\n\"\"\"\n\nstdin = '1 3 2 1 2 1'"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\n\"\"\""
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\nassert solution(\"1 3 2 1 2 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 2 1 2 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\nassert solution('2 2 2 2 2 2 2') == 'YES'\nassert solution('1 2 3 4 5 6 7') == 'YES'\nassert solution('1 1 2 3 4 5 6 7') == 'NO'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\nassert solution(\"1 1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1 1 99\") == \"NO\"\nassert solution(\"1 3 2 1 2 1\") == \"YES\"\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1 1 99\") == \"NO\"\nassert solution(\"1 3 2 1 2 1\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'YES'\nassert solution('1 3 2 1 2 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\nassert solution('1 2 3 4 5 6') == 'NO'\nassert solution('6 5 4 3 2 1') == 'YES'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 10') == '7'\nassert solution('100 200') == '5'\nassert solution('1 2000000000') == '326'\nprint('Test pass.')\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10\") == \"7\"\nassert solution(\"100 200\") == \"5\"\nassert solution(\"1 2000000000\") == \"326\"\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 10\") == \"7\"\nassert solution(\"100 200\") == \"5\"\nassert solution(\"1 2000000000\") == \"326\"\nassert solution(\"1 10\") == \"7\"\nassert solution(\"100 200\") == \"5\"\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 10') == '7'\nassert solution('100 200') == '5'\nassert solution('1 2000000000') == '326'\n\"\"\""
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 10\") == \"7\"\nassert solution(\"100 200\") == \"5\"\nassert solution(\"1 2000000000\") == \"326\"\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1 10''') == '7'\nassert solution('''1 2000000000''') == '326'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 10\") == \"7\"\nassert solution(\"1 2000000000\") == \"326\"\n\n\"\"\"\n\nimport math\nimport sys\nimport collections"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 10\") == \"7\"\nassert solution(\"100 200\") == \"5\"\nassert solution(\"1 2000000000\") == \"326\"\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10\") == \"7\"\nassert solution(\"100 200\") == \"5\"\n\"\"\""
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 10\") == \"7\"\nassert solution(\"100 200\") == \"5\"\nassert solution(\"1 2000000000\") == \"326\"\n\n\n\"\"\"\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '0'\nassert solution('9 11\\n') == '4'\nassert solution('5 0\\n') == '3'"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"9 11\") == \"4\"\nassert solution(\"5 0\") == \"3\"\nassert solution(\"3 2\") == \"1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"9 11\") == \"4\"\nassert solution(\"5 0\") == \"3\"\nassert solution(\"3 2\") == \"1\"\n\"\"\"\n\nn, k = input().split()\nk = int(k)\nn = int(n)\n\nprint((k - n) // (k - k // 2))\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"9 11\") == \"4\"\nassert solution(\"5 0\") == \"3\"\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 0\") == \"3\"\nassert solution(\"9 11\") == \"4\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"9 11\") == \"4\"\n\"\"\""
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"9 11\") == \"4\"\nassert solution(\"5 0\") == \"3\"\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('1 1') == '0'\nassert solution('9 11') == '4'\nassert solution('5 0') == '3'\nassert solution('3 2') == '1'\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '0'\nassert solution('9 11\\n') == '4'\nassert solution('5 0\\n') == '3'\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0'\nassert solution('9 11') == '4'\nassert solution('5 0') == '3'\nassert solution('3 2') == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 5 3 2 4') == 'YES'\nassert solution('3\\n4 1 2') == 'NO'\n\n-------"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 3 2 4\") == \"YES\"\n\nassert solution(\"3\\n4 1 2\") == \"NO\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 5 3 2 4') == 'YES'\nassert solution('3\\n4 1 2') == 'NO'\n\n\n'''\n\nimport math\nimport collections\nimport itertools"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 5 3 2 4\") == \"YES\"\nassert solution(\"3\\n4 1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 5 3 2 4') == \"YES\"\nassert solution('3\\n4 1 2') == \"NO\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"5\\n\" +\n\"1 5 3 2 4\\n\") == \"YES\"\nassert solution(\n\"3\\n\" +\n\"4 1 2\\n\") == \"NO\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1 5 3 2 4\n''') == 'YES'\nassert solution('''3\n4 1 2\n''') == 'NO'\n\"\"\"\n\nimport itertools\nfrom typing import List\n\n\nclass Solution:\n    def is_valid(self, lines: List[int]):\n        sorted_lines = sorted(lines)\n        for i, j in itertools.combinations(range(len(sorted_lines)), 2):\n            if sorted_lines[j] + sorted_lines[i] > sorted_lines[i] + sorted_lines[j] + sorted_lines[i]:\n                return False\n        return True\n\n    def solve(self, stdin: str) -> str:\n        lines = [int(line) for line in stdin.split('\\n')[1].split()]\n        for length in range(3, len(lines) + 1):\n            for group in itertools.combinations(lines, length):\n                if self.is_valid(group):\n                    return 'YES'\n        return 'NO'\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 5 3 2 4\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 5 3 2 4\\n\") == \"YES\"\nassert solution(\"3\\n4 1 2\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 5 3 2 4\\n\") == \"YES\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"1000 1001\") == \"Yes\"\nassert solution(\"1000 100\") == \"No\"\n\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"No\"\nassert solution(\"6 3\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3') == 'Yes'\nassert solution('4 2') == 'No'\nassert solution('1000 1001') == 'Yes'\nassert solution('1000 1') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == 'No'\nassert solution('4 2') == 'Yes'\nassert solution('1000 1001') == 'Yes'\nassert solution('1000 100') == 'No'\n\nimport sys\n\nassert len(sys.argv) == 2\nx, y = [int(x) for x in sys.argv[1].split()]"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"No\"\nassert solution(\"6 3\") == \"Yes\"\nassert solution(\"1000 1001\") == \"Yes\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\n\n\"\"\""
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"1000 1001\") == \"Yes\"\n\n\"\"\"\n\nimport unittest\n\nclass Solution:\n\n    def solve(self, n, m):\n        if m == 0 or n % m == 0:\n            return \"Yes\"\n\n        if m < n % m:\n            return \"No\"\n        \n        x, y = 0, 0\n        if m == 1:\n            x, y = 1, n - 1\n        else:\n            x, y = n - m + 1, n - 1\n\n        if x <= y:\n            return \"Yes\"\n        else:\n            return \"No\"\n        \nclass Test(unittest.TestCase):\n    def test_case_1(self):\n        stdin = \"6 3\"\n        stdout = \"Yes\"\n        self.assertEqual(Solution().solve(stdin), stdout)\n    \n    def test_case_2(self):\n        stdin = \"4 2\"\n        stdout = \"No\"\n        self.assertEqual(Solution().solve(stdin), stdout)\n    \n    def test_case_3(self):\n        stdin = \"1000 1001\"\n        stdout = \"Yes\"\n        self."
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"1000 1001\") == \"Yes\"\nassert solution(\"4 0\") == \"No\"\nassert solution(\"10 10\") == \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\n\n\n\"\"\""
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"No\"\nassert solution(\"6 3\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4\\n7 9') == '2'\nassert solution('3 8\\n17 15 19') == '5'\nassert solution('2 2\\n99 100') == '20'"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8\") == \"5\"\nassert solution(\"2 2\") == \"20\"\nassert solution(\"99 100\") == \"20\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4\\n7 9\") == \"2\"\nassert solution(\"3 8\\n17 15 19\") == \"5\"\nassert solution(\"2 2\\n99 100\") == \"20\"\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n7 9\") == \"2\"\nassert solution(\"3 8\\n17 15 19\") == \"5\"\nassert solution(\"2 2\\n99 100\") == \"20\"\n\nprint(\"PASS\" if solution(\"2 4\\n7 9\") == \"2\" else \"FAIL\")\nprint(\"PASS\" if solution(\"3 8\\n17 15 19\") == \"5\" else \"FAIL\")\nprint(\"PASS\" if solution(\"2 2\\n99 100\") == \"20\" else \"FAIL\")\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4\\n7 9') == '20'\n\"\"\""
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 9') == '2'\nassert solution('17 15 19') == '5'\nassert solution('99 100') == '20'\nassert solution('19 15 17') == '4'\nassert solution('17 15 19') == '5'\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4\\n7 9') == '2'\nassert solution('3 8\\n17 15 19') == '5'\nassert solution('2 2\\n99 100') == '20'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8\\n17 15 19\") == \"5\"\nassert solution(\"2 2\\n99 100\") == \"20\"\nassert solution(\"2 4\\n7 9\") == \"2\"\nassert solution(\"2 2\\n99 100\") == \"20\"\nassert solution(\"3 8\\n17 15 19\") == \"5\"\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 9\") == \"2\"\nassert solution(\"17 15 19\") == \"5\"\nassert solution(\"99 100\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"2 4\\n7 9\"\n) == \"2\"\nassert solution(\n\"3 8\\n17 15 19\"\n) == \"5\"\nassert solution(\n\"2 2\\n99 100\"\n) == \"20\"\nassert solution(\n\"1 1\\n55 55\"\n) == \"100\"\nassert solution(\n\"1 1\\n1 1\"\n) == \"1\"\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n5 7 6\") == \"25\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\") == \"1\"\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n5 7 6') == '25'\nassert solution('8 8\\n1 2 3 4 5 6 7 8') == '1'\nassert solution('8 8\\n8 7 6 5 4 3 2 1') == '1'\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3\\n9 8 7\") == \"25\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\") == \"1\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == '25'\nassert solution('8 8') == '1'\n\"\"\"\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n4 2\\n5 7 6') == '25'\nassert solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\n\"\"\"\n\nimport sys\n\nn, m = map(int, input().split())\na = set(map(int, input().split()))\nb = set(map(int, input().split()))\n\na_b = set()\nfor i in a:\n    if i in b:\n        a_b.add(i)\n\nprint(min(a_b))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3\\n5 7 6\") == \"25\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\") == \"1\"\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n3 2 1\") == \"25\"\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 2 3 4 5\\n1 2 3') == '25'\nassert solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\nassert solution('8 3\\n2 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\n\"\"\"\n\nfrom itertools import chain, combinations\nfrom typing import List, Set, Dict\n\n\nclass Combinations:\n\n    def __init__(self, n: int, m: int):\n        self.n = n\n        self.m = m\n        self.combs: Set[Set[int]] = set()\n        self.remainder: Set[int] = set()\n\n    def generate_combinations(self) -> None:\n        combs = set()\n        combs.add(frozenset())\n        combs.update([frozenset(e) for e in self.get_combs_by_len(self.m)])\n        self.combs = combs\n        self.remainder = set(\n            e for e in range(1, self.n + 1)\n            if not any(True for c in combs if e in c)\n        )\n\n    def get_combs_by_len(self, n: int) -> List[Set[int]]:\n        if n == 1:\n            return [frozenset([e]) for e in range(1, self.n + 1)]\n        return [frozenset(e) for e in chain.from_iterable(\n            combinations(range(1, self.n + 1), n - 1)\n            for n in range(2, n + 1)\n        )]\n\n    def print_combs(self) -> None:\n        if len(self.combs) == 0:\n            self.generate_combinations()\n        for e in self.combs:\n            print(' '.join(map(str, e)))\n        print(' '.join(map(str, self.remainder)))\n\n    def get_result(self) -> int:\n        if len(self.combs) == 0:\n            self.generate_combinations()\n        return min(map(int, self.combs))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 8\\n1 2 3 4 5 6 7 8\") == \"1\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\n\na = set([int(x) for x in input().split()])\nb = set([int(x) for x in input().split()])\nc = []\nd = []\n\nfor i in range(1, 10000):\n    count_a = 0\n    count_b = 0\n    for x in str(i):\n        if int(x) in a:\n            count_a += 1\n        if int(x) in b:\n            count_b += 1\n    if count_a >= 1 and count_b >= 1:\n        c.append(i)\n\nc.sort()\n\nfor i in c:\n    count_a = 0\n    count_b = 0\n    for x in str(i):\n        if int(x) in a:\n            count_a += 1\n        if int(x) in b:\n            count_b += 1\n    if count_a >= 1 and count_b >= 1:\n        d.append(i)\n\nd.sort()\n\nprint(d[0])\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\") == \"1\"\nassert solution(\"3 1\") == \"9\"\nassert solution(\"8 9\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 222\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\n\"\"\""
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 222\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 222') == 2\nassert solution('4 190') == 4\nassert solution('7 1') == 7\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\n\ni = 0\nwhile k > 5 * i:\n    i += 1\nprint(i)\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 222\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 222\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 222\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 222\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 222') == 2\nassert solution('4 190') == 4\nassert solution('7 1') == 7\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 222') == '2'\nassert solution('4 190') == '4'\nassert solution('7 1') == '7'\n\"\"\""
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 222\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\n\"\"\""
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\n\nassert solution('10') == '17'\nassert solution('100') == '233'\nassert solution('1000') == '1006'"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('10') == '10'\nassert solution('10^10') == '10^{18}'\n\"\"\"\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '2'\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"6\") == \"6\"\nassert solution(\"9\") == \"6\"\nassert solution(\"7\") == \"6\"\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('10') == '0'\nassert solution('11') == '2'\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('10') == '2'\nassert solution('100') == '10'\nassert solution('1000') == '100'\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"<><\") == 1\nassert solution(\"<<<<\") == 0\nassert solution(\">>>>>\") == 5\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"<<>><\") == 3\nassert solution(\"<<<><>>>\") == 0\nassert solution(\"<<<><>>>>>><<<<<<>><>><<<<<><>>>\") == 10\nassert solution(\"<><<><<><<><<><<<<<<<<<<<<<<<<<<<<<<<<<<<<>\") == 2\nassert solution(\"<<<><><<><<><<><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>\") == 0\n\"\"\"\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"<<><\") == 2\nassert solution(\">>>>\") == 5\n\"\"\"\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4<<<<>>') == 2\nassert solution('5<<<<>>') == 5\nassert solution('4>><<>>') == 0\nassert solution('4<<<<') == 2\nassert solution('5<<<<') == 5\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"<<>>\") == 2\nassert solution(\"<<<>\") == 5\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"><<\") == \"2\"\nassert solution(\"<<<<<\") == \"5\"\nassert solution(\">>\") == \"0\"\nassert solution(\">>>>>>>\") == \"1\"\n\"\"\"\n\nimport sys\nimport string\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n<<<<\\n\") == \"2\"\nassert solution(\"5\\n>>>>>\\n\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('<<><') == 2\nassert solution('>>>>>') == 5\nassert solution('>>>>>>') == 0\nassert solution
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"<<><\") == 2\nassert solution(\">>>>\") == 0\nassert solution(\">><\") == 5\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('<<>>') == 0\nassert solution('<<<<') == 2\nassert solution('>><><<<') == 5\nassert solution('>>>><<<') == 3\nassert solution('<<<<<>>>') == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n2 4 4 2\n''') == '8'\nassert solution('''4\n3 3 3 3\n''') == '0'\nassert solution('''4\n3 3 3 3\n''') == '0'\nassert solution('''4\n3 2 5 2\n''') == '0'\nassert solution('''4\n1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 4 4 2\\n\") == \"8\"\nassert solution(\"4\\n2 2 3 5\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4 2\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 4 4 2\") == \"8\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 2 3 5') == '8'\nassert solution('4\\n2 4 4 2') == '8'\nassert solution('4\\n2 2 3 5') == '8'\nassert solution('4\\n2 4 4 2') == '8'\nassert solution('4\\n2 2 3 5') == '8'\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 4 4 2\") == \"8\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 4 4 2\") == \"8\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nnums = list(map(int, sys.stdin.readline().split()))\n\ndp = [0] * N\ndp[0] = nums[0]\nfor i in range(1, N):\n    max_dp = 0\n    for j in range(i):\n        if nums[i] >= nums[j] and dp[j] > max_dp:\n            max_dp = dp[j]\n    dp[i] = max_dp + nums[i]\n\nprint(max(dp))\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 4 4 2\") == \"8\"\nassert solution(\"4\\n2 2 3 5\") == \"0\"\nassert solution(\"4\\n100003 100004 100005 100006\") == \"10000800015\""
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 4 4 2\") == \"8\"\nassert solution(\"4\\n2 2 3 5\") == \"0\"\nassert solution(\"4\\n100003 100004 100005 100006\") == \"10000800015\"\nprint(\"Passed\")\n\nprint(solution(\"4\\n2 2 3 5\"))"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 4 4 2\") == 8\n\"\"\""
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nab\\nde\\naj\") == \"47\"\nassert solution(\"5\\nabcdef\\ng\\nhij\\nbdef\\naccbd\\ng\") == \"136542\"\nassert solution(\"3\\naa\\njj\\naa\") == \"44\""
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abb\") == \"14\"\nassert solution(\"c\") == \"a\"\nassert solution(\"bb\") == \"a\"\nassert solution(\"abacab\") == \"10\"\nassert solution(\"fddfdfjd\") == \"a\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"47\"\nassert solution(\"de\") == \"136542\"\nassert solution(\"aj\") == \"44\"\n\nassert solution(\"abcdef\") == \"136542\"\nassert solution(\"ghij\") == \"136542\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nab\\ncd\\nef\\nghi\") == \"47\"\nassert solution(\"5\\nabcdef\\nghi\\nbdef\\naccbd\\ng\\n\") == \"136542\"\nassert solution(\"3\\naa\\njj\\naa\\n\") == \"44\""
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"1\"\nassert solution(\"de\") == \"23\"\nassert solution(\"aj\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"13\"\nassert solution(\"de\") == \"47\"\nassert solution(\"aj\") == \"44\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"1\"\nassert solution(\"de\") == \"3\"\nassert solution(\"aj\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"47\"\nassert solution(\"de\") == \"136542\"\nassert solution(\"aj\") == \"44\"\nassert solution(\"aa\") == \"136542\"\nassert solution(\"ac\") == \"136542\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ab\") == \"1\"\nassert solution(\"de\") == \"3\"\nassert solution(\"aj\") == \"9\"\nassert solution(\"\") == \"\"\n\nassert solution(\"abcdef\") == \"120468\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ab') == '2'\nassert solution('de') == '43'\nassert solution('aj') == '9'\nassert solution('abcdef') == '136542'\nassert solution('ghij') == '136542'\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 6\\n4 5') == '2'\nassert solution('4 5\\n4 5') == '3'\nassert solution('4 5\\n4 5\\n4 5') == '2'\nassert solution('4 5\\n4 5\\n4 5\\n4 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 6\") == \"2\"\nassert solution(\"4 5\") == \"3\"\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 6\\n\") == 2\nassert solution(\"4 5\\n\") == 3\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 6') == '2'\nassert solution('4 5') == '3'\nassert solution('4 5 5') == '3'\n\n\"\"\""
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test1) == 2\nassert solution(test2) == 3\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6\") == 2\n\"\"\"\n\nn, m = map(int, input().split())\nprint(n // 3 + m // 2)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6\") == \"2\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"4 6\") == \"2\"\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == 3\nassert solution(\"2 6\") == 2\n\n---\n\nhttps://www.codewars.com/kata/57ee8c9aeae3038ec0012ed3\n\n\"\"\"\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('2 1') == 2\nassert solution('2 2') == 1\nassert solution('2 3') == 0\nassert solution('5 6') == 2\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\"\nassert solution(\"AXBYBXA\") == \"NO\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABA') == 'YES'\nassert solution('AXBYBXA') == 'NO'\nassert solution('BAB') == 'YES'\nassert solution('ABA') == 'YES'\nassert solution('BACFAB') == 'YES'\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AB\") == \"NO\"\nassert solution(\"BA\") == \"YES\"\nassert solution(\"AC\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\"\nassert solution(\"AXBYBXA\") == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABA') == 'NO'\nassert solution('BACFAB') == 'YES'\nassert solution('AXBYBXA') == 'NO'\n\n\"\"\""
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\"\nassert solution(\"AXBYBXA\") == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\"\nassert solution(\"AXBYBXA\") == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\"\nassert solution(\"AXBYBXA\") == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\"\nassert solution(\"AXBYBXA\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABACFAB\") == \"NO\"\nassert solution(\"AXBYBXA\") == \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 1 3 3\\n2 1 6\") == \"YES\\n2 L\\n1 R\\n4 L\\n3 L\"\n\"\"\"\n\nn = int(input())\n\nweight = list(map(int, input().split()))\n\nk = int(input())\n\nm_weight = list(map(int, input().split()))\n\ncnt = 1\nfor i in range(k):\n    if weight[0] > m_weight[i]:\n        cnt = 0\n        break\n    weight[0] += m_weight[i]\n    weight.pop(1)"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2 2 2 1 2\\n2\\n5 5\") == \"YES\\n2 L\\n1 R\\n4 L\\n3 L\"\nassert solution(\"5\\n1 1 1 3 3\\n3\\n2 1 6\") == \"NO\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nN = int(sys.stdin.readline())\nN_list = deque(sys.stdin.readline().strip().split(' '))\nK = int(sys.stdin.readline())\nK_list = deque(sys.stdin.readline().strip().split(' '))\n\nfor _ in range(K):\n    if int(N_list[0]) > int(K_list[0]):\n        print(\"NO\")\n        sys.exit()\n    if int(N_list[-1]) > int(K_list[-1]):\n        print(\"NO\")\n        sys.exit()\n    N_list.popleft()\n    N_list.append(K_list.popleft())\nprint(\"YES\")\nfor x in range(len(N_list)):\n    sys.stdout.write(f\"{x + 1} \")\n    sys.stdout.write(N_list.popleft())\n    sys.stdout.write(\" \")\n    sys.stdout.write(\"L\" if x + 1!= len(N_list) else \"R\")\n    sys.stdout.write(\"\\n\")\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 3 3\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n1\\n2\\n1\\n1\\n\") == \"YES\"\n\"\"\""
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 2 2 2 1 2\\n2\\n5 5\") == \"YES\\n2 L\\n1 R\\n4 L\\n3 L\"\n\nassert solution(\"6\\n1 2 2 2 1 2\\n2\\n5 5\") == \"YES\\n5 L\\n4 L\\n3 L\"\n\nassert solution(\"5\\n1 1 1 3 3\\n3\\n2 1 6\") == \"NO\"\n\nassert solution(\"5\\n1 1 1 3 3\\n3\\n2 1 6\") == \"NO\"\n\nassert solution(\"5\\n1 1 1 3 3\\n3\\n2 1 6\\n5 5\") == \"NO\""
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 1 3 3\\n2 1 6') == 'YES\\n5 L\\n4 L\\n3 L\\n2 L'\nassert solution('6\\n1 2 2 2 1 2\\n2\\n5 5') == 'YES\\n5 L\\n4 L\\n3 L'\nassert solution('5\\n1 1 1 3 3\\n2 1 6') == 'NO'\nassert solution('5\\n1 1 1 3 3\\n2 1 6') == 'NO'\nassert solution('5\\n1 1 1 3 3\\n2 1 6') == 'NO'\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 1 3 3') == 'YES\\n5 L\\n4 L\\n3 L\\n2 L\\n'\nassert solution('5 2 1 3 3') == 'YES\\n5 L\\n4 L\\n3 L\\n2 L\\n'\nassert solution('3 1 6') == 'NO'\nassert solution('2 1 6') == 'YES\\n5 L\\n4 L\\n3 L\\n2 L\\n'\nassert solution('1 1 1 3 3') == 'YES\\n5 L\\n4 L\\n3 L\\n2 L\\n'\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 2 3 4 5') == 'YES'\nassert solution('1 1 1 3 3') == 'YES'\nassert solution('5 5') == 'YES'\nassert solution('1 1 1 3 3') == 'NO'\nassert solution('1 1 1 1 1 1 1 1') == 'NO'\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 2 2 2 1 2\\n2\\n5 5') == 'YES\\n2 L\\n1 R\\n4 L\\n3 L'\nassert solution('6\\n1 2 2 2 1 2\\n1\\n15') == 'YES\\n5 L'\n\n\"\"\""
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1 1 1\") == \"YES\\n1 L\\n1 R\"\nassert solution(\"2 3 1 4 1 3\") == \"YES\\n4 L\\n2 R\"\nassert solution(\"5 5 5 5 5\") == \"NO\"\nassert solution(\"1 1 1 3 3\") == \"YES\\n5 L\\n4 L\"\nassert solution(\"1 1 1 3 3\") == \"YES\\n5 L\\n4 L\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"No\"\nassert solution(\"3 3\") == \"Yes\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test1) == \"Yes\"\nassert solution(test2) == \"No\"\n\n---\n\npublic static int get_total_bases_and_rebels(int n, int m, int[][] map, int[][] enemies) {\n    if (n <= 0 || m <= 0) {\n        return -1;\n    }\n\n    int count = 0;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (map[i][j]!= 0) {\n                count++;\n            }\n        }\n    }\n    if (count < n) {\n        return -1;\n    }\n\n    int[] dp = new int[count];\n    int[] row = new int[m];\n    int[][] matrix = new int[n][count];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (map[i][j]!= 0) {\n                matrix[i][j] = i;\n            }\n        }\n    }\n\n    int[] index = new int[n];\n    int i = 0;\n    for (int[][] row : enemies) {\n        if (row.length == 0) {\n            continue;\n        }\n        for (int j = 0; j < count; j++) {\n            dp[j] = 0;\n        }\n        for (int j = 0; j < row.length; j++) {\n            if (row[j] > i) {\n                index[row[j]] = i;\n                dp[i]++;\n            }\n        }\n        i++;\n    }\n\n    boolean[][] visited = new boolean[n][count];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < count; j++) {\n            if (matrix[i][j] == i) {\n                if (dp[j] <= 1) {\n                    return -1;\n                }\n                visited[i][j] = true;\n                for (int k = 0; k < count; k++) {\n                    if (!visited[i][k] && matrix[i][k] == i) {\n                        if (dp[k] > 1) {\n                            dp[k] = 1;\n                        }\n                        visited[i][k] = true;\n                    }\n                }\n            }\n        }\n    }\n    for (int[] row : visited) {\n        for (boolean visited : row) {\n            if (!visited) {\n                return -1;\n            }\n        }\n    }\n    return dp.length;\n}\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    int m = in.nextInt();\n    int[][] map = new int[n][m];\n    for (int i = 0; i < n; i++) {\n        String[] row = in.next().split(\" \");\n        for (int j = 0; j < m; j++) {\n            map[i][j] = Integer.parseInt(row[j]);\n        }\n    }\n    int[][] enemies = new int[in.nextInt()][];\n    for (int i = 0; i < enemies.length; i++) {\n        String[] row = in.next().split(\" \");\n        for (int j = 0; j < enemies[i].length; j++) {\n            enemies[i][j] = Integer.parseInt(row[j]);\n        }\n    }\n    System.out.println(solution(map, enemies));\n}\n\npublic static int solution(int[][] map, int[][] enemies) {\n\n}\n\n-----"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\\n\") == \"Yes\"\nassert solution(\"2 1\\n1 0\\n2 2\\n3 1\\n\") == \"No\"\n\"\"\"\n\n\nclass UnionFind:\n    def __init__(self, num):\n        self.father = [i for i in range(num)]\n        self.size = [1 for _ in range(num)]\n\n    def union(self, a, b):\n        pa = self.find(a)\n        pb = self.find(b)\n        if pa!= pb:\n            self.father[pa] = pb\n            self.size[pb] += self.size[pa]\n\n    def find(self, x):\n        if self.father[x] == x:\n            return x\n        else:\n            self.father[x] = self.find(self.father[x])\n            return self.father[x]\n\n    def is_connected(self, a, b):\n        return self.find(a) == self.find(b)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\") == \"Yes\"\nassert solution(\"2 1\\n1 0\\n2 2\\n3 1\") == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'No'\nassert solution('5 1\\n-1 1\\n0 0\\n2 0\\n3 1') == 'Yes'\nassert solution('5 1\\n-1 1\\n0 0\\n2 0\\n3 1\\n4 3') == 'Yes'\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\") == \"Yes\"\nassert solution(\"2 1\\n1 0\\n2 2\\n3 1\") == \"No\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom collections import deque"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2') == 'Yes'\nassert solution('2 1\\n1 0\\n2 2\\n3 1') == 'No'\n\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n0 0\n2 0\n3 1\n-2 1\n0 3\n2 2''') == 'Yes'\nassert solution('''2 1\n1 0\n2 2\n3 1''') == 'No'\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\\n\") == 'Yes'\nassert solution(\"2 1\\n1 0\\n2 2\\n3 1\\n\") == 'No'\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n2 2\\n3 1\") == \"No\"\nassert solution(\"3 3\\n0 0\\n2 0\\n3 1\") == \"Yes\"\nassert solution(\"1 1\\n2 0\\n2 2\") == \"No\"\nassert solution(\"3 3\\n0 0\\n2 0\\n3 1\") == \"Yes\"\nassert solution(\"1 1\\n2 0\\n2 1\") == \"No\"\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"80 7 16 4 48\") == \"16 3\"\nassert solution(\"21 5 3 33\") == \"1 4\"\nassert solution(\"4 21 5 3 33\") == \"1 4\"\nassert solution(\"4 21 5 3 123\") == \"1 4\"\n\n\"\"\""
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n80 7 16 4 48\\n') == '16 3'\nassert solution('4\\n21 5 3 33\\n') == '1 4'\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n21 5 3 33\") == \"1 4\"\nassert solution(\"5\\n80 7 16 4 48\") == \"16 3\"\nassert solution(\"2\\n21 5 3 33\") == \"1 4\"\n\"\"\"\nn = int(input())\na = [int(input()) for _ in range(n)]\n\nmax_power = 0\nmax_power_count = 0\na.sort()\nfor i in range(len(a)):\n    if a[i] % 2:\n        power = 1\n        while 2 ** power <= a[i]:\n            if 2 ** power == a[i]:\n                max_power = power\n                break\n            power += 1\n        if max_power:\n            max_power_count += 1\nprint(max_power, max_power_count)\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n80 7 16 4 48') == '16 3'\nassert solution('4\\n21 5 3 33') == '1 4'\nassert solution('4\\n1 2 3 4') == '2 4'\nassert solution('3\\n1 3 5') == '1 2'\nassert solution('4\\n2 2 2 2') == '2 4'\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n80 7 16 4 48\\n') == '16 3'\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 7 33\") == \"4\""
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n80 7 16 4 48') == '16 3'\nassert solution('5\\n21 5 3 33') == '1 4'\n\"\"\""
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"80 7 16 4 48\") == '16 3'\n\"\"\"\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"80 7 16 4 48\") == \"16 3\"\nassert solution(\"21 5 3 33\") == \"1 4\"\nassert solution(\"4 21 5 3 33\") == \"1 4\"\n\"\"\""
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n80 7 16 4 48') == '16 3'\nassert solution('4\\n21 5 3 33') == '1 4'\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 6') == '2'\nassert solution('10 1') == '9'\n\n\"\"\""
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 6') == '2'\nassert solution('10 1') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6') == '2'\nassert solution('10 1') == '9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6\") == \"2\"\nassert solution(\"10 1\") == \"9\""
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\") == \"2\"\nassert solution(\"10 1\") == \"9\""
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\") == \"2\"\nassert solution(\"10 1\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6') == '2'\nassert solution('10 1') == '9'\n\"\"\"\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\ncnt = min(n, m)\nwhile n > 1 and m > 1:\n    cnt += 1\n    if n % 2 == 0 and m % 2 == 0:\n        n //= 2\n        m //= 2\n    elif n % 2 == 1 and m % 2 == 1:\n        n //= 2\n        m //= 2\n        n += 1\n        m += 1\n    else:\n        n //= 2\n        m //= 2\nprint(cnt)\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6') == '2'\nassert solution('10 1') == '9'"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\") == 2\nassert solution(\"10 1\") == 9\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn, m = map(int, stdin.readline().split())\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\") == 2\nassert solution(\"10 1\") == 9\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\") == \"YES\"\nassert solution(\"5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\") == \"NO\"\nassert solution(\"5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\") == \"NO\"\nassert solution(\"5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n\") == \"NO\"\nassert solution(\"5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n\") == \"NO\"\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8') == 'YES'\nassert solution('5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8') == 'YES'\nassert solution('5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8') == 'YES'\n\n\"\"\"\n\nimport sys\nimport collections\nimport math\nfrom typing import Dict, List, Set, Tuple\n\nsys.setrecursionlimit(10000)\n\nSegment = Tuple[int, int]\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def is_tree(self, segments: List[Segment], query: str) -> bool:\n        self.segments = segments\n        self.query = query\n        self.query_segments = {}\n        self.query_intersections = set()\n        self.visited = set()\n        self.result = False\n        self.run()\n        return self.result\n\n    def run(self):\n        self.query_segments = {(segment[0], segment[1]) for segment in self.query.split()}\n        self.query_intersections = self.query_segments.copy()\n        for segment in self.segments:\n            self.query_intersections = self.query_intersections.intersection(self.query_segments)\n        if len(self.query_intersections) == 0:\n            self.result = True\n            return\n        for segment in self.segments:\n            if (segment[0], segment[1]) in self.query_intersections:\n                if segment[0] > segment[1]:\n                    self.query_intersections.remove((segment[0], segment[1]))\n                    self.query_intersections.remove((segment[1], segment[0]))\n                else:\n                    self.query_intersections.remove((segment[0], segment[1]))\n        self.visited = set()\n        self.queue = collections.deque()\n        for segment in self.segments:\n            self.queue.append((segment, 0))\n        while len(self.queue) > 0:\n            (current, level) = self.queue.popleft()\n            if current in self.visited:\n                continue\n            self.visited.add(current)\n            if level > 2:\n                continue\n            for segment in self.segments:\n                if segment[0] == current[0] and segment[1] == current[1]:\n                    if segment[0] > segment[1]:\n                        self.query_intersections.remove((segment[0], segment[1]))\n                        self.query_intersections.remove((segment[1], segment[0]))\n                    else:\n                        self.query_intersections.remove((segment[0], segment[1]))\n                    self.queue.append((segment, level + 1))\n                    break\n        if len(self.query_intersections) == 0:\n            self.result = True\n        else:\n            self.result = False\n\n    def test_1(self) -> bool:\n        assert self.is_tree('5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8', '1 2') == True\n        return self.result\n\n    def test_2(self) -> bool:\n        assert self.is_tree('5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8', '5 7') == True\n        return self.result\n\n    def test_3(self) -> bool:\n        "
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n6 2\\n5 7\\n9 1\\n3 4\\n7 10\\n2 3') == 'YES'\nassert solution('5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4') == 'NO'\n\nassert solution('4\\n1 3\\n2 4\\n5 9\\n6 8') == 'NO'\n\nassert solution('4\\n9 10\\n3 6\\n2 9\\n7 10\\n1 4') == 'NO'\n\nassert solution('4\\n8 9\\n3 6\\n2 9\\n7 10\\n1 4') == 'YES'"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 4\\n1 3\\n6 10\\n5 7\\n4 8') == \"NO\"\nassert solution('4\\n2 4\\n1 3\\n6 10\\n5 7\\n4 8') == \"YES\"\nassert solution('5\\n2 4\\n1 3\\n6 10\\n5 7\\n4 8') == \"NO\"\n\n\"\"\"\n\nclass Segment:\n    def __init__(self, left, right):\n        self.left = left\n        self.right = right\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    [\n        (1, 3),\n        (2, 4),\n        (5, 9),\n        (6, 8),\n        (7, 10),\n    ]\n) == 'YES'\nassert solution(\n    [\n        (1, 2),\n        (3, 4),\n        (5, 7),\n        (6, 9),\n        (7, 10),\n    ]\n) == 'NO'\n\n\"\"\"\n\n\nimport itertools\nimport math\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n\") == \"NO\"\nassert solution(\"5 3\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n\") == \"YES\"\nassert solution(\"5 3\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n\") == \"YES\"\nassert solution(\"5 3\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n\") == \"NO\"\nassert solution(\"5 3\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n\") == \"YES\"\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n9\\n10\\n12\\n7\\n1\\n2\\n3\\n4\") == \"YES\"\nassert solution(\"5\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n\") == \"NO\"\nassert solution(\"3\\n2 5\\n1 3\") == \"NO\"\nassert solution(\"4\\n1 3\\n2 5\\n3 6\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n3 1\\n3 4\\n4 1\\n4 2\\n4 5\\n2 2\\n5 3\\n3 2\") == \"NO\"\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n5\n1 3\n2 4\n5 9\n6 8\n7 10\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n5\n1 3\n2 4\n5 9\n6 8\n7 10\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n\"\"\") == \"NO\"\n\"\"\""
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8') == 'YES'\nassert solution('5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4') == 'NO'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n100 200 1 1 1\") == \"3\"\nassert solution(\"5\\n100 200 1 1 1\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n100 200 1 1 1\\n') == 3\nassert solution('5\\n100 200 1 1 1\\n') == 3\nassert solution('2\\n101 99\\n') == 1\n\"\"\"\n\nN = input()\narr = input().split()\n\narr = list(map(int, arr))\n\narr_s = []\nfor i in range(int(N)):\n    arr_s.append(arr[i])\n\nfor i in range(len(arr_s)):\n    if arr_s[i] < 100:\n        arr_s.pop(i)\n        break"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n100 200 1 1 1\\n') == '3'\n\nassert solution('5\\n101 99\\n') == '1'\nassert solution('2\\n101 99\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n100 200 1 1 1') == '3'\nassert solution('5\\n101 99') == '1'\n\"\"\""
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n100 200 1 1 1\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n100 200 1 1 1') == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\") == 0\nassert solution(\"2 1 1 2 1\") == 1\nassert solution
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open('input.txt', 'r').read()) == open('output.txt', 'r').read()"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\nNYNNY\") == \"YES\"\nassert solution(\"6 1\\n????NN\") == \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 NYNNY\") == \"YES\"\nassert solution(\"6 1?NNNN\") == \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\nNYNNY\") == \"YES\"\nassert solution(\"6 1\\n????NN\") == \"NO\"\nprint(\"Check done.\")\n\n\"\"\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5 2\nNNNNN\n''') == \"YES\"\nassert solution('''\n6 1\n????NN\n''') == \"NO\"\nassert solution('''\n5 2\nNNYYY\n''') == \"YES\"\nassert solution('''\n5 2\nNNYYY\n''') == \"YES\"\nassert solution('''\n5 2\nYNNYY\n''') == \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\nNYNNY\") == \"YES\"\nassert solution(\"6 1\\n????NN\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\nNYNNY\") == \"YES\"\nassert solution(\"6 1\\n????NN\") == \"NO\"\nassert solution(\"5 2\\nNYNNN\\nNYNNY\") == \"YES\"\nassert solution(\"6 1\\n????NN\\n????NN\") == \"NO\"\nassert solution(\"5 4\\nNYYYNNY\\nNNNNNNN\\nNYYYNNN\\nNNNNNNN\\nYYYYYYY\\nYYYYYYY\\nYYYYYYY\\nYYYYYYY\\nYYYYYYY\") == \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 NYNNY\") == \"YES\"\nassert solution(\"6 1 NNNNN\") == \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 NYNNY\") == \"YES\"\nassert solution(\"6 1 NNNNN\") == \"NO\"\n\"\"\"\nfrom collections import deque\n\nn, k = map(int, input().split())\na = deque(list(input()))\n\ncnt = 0\nfor i in range(n):\n    if a[i] == '?':\n        cnt += 1\n        break\n    elif a[i] == 'N':\n        cnt += 1\n    elif a[i] == 'Y':\n        cnt = 0\n    else:\n        assert False"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\nYNNYY\") == \"YES\"\nassert solution(\"6 1\\n????NN\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\nNYNNY') == 'YES'\nassert solution('6 1\\n????NN') == 'NO'\nassert solution('7 1\\nNNNNNN') == 'YES'\nassert solution('8 0\\nYNNNNNN') == 'YES'\nassert solution('9 1\\nYNNYNNN') == 'NO'\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 4 2''') == '8'\nassert solution('''5 1 2''') == '1'\nassert solution('''5 5 2''') == '1'\nassert solution('''5 1 1''') == '5'\nassert solution('''1 1 2''') == '0'\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3') == '8'\nassert solution('4 2 1') == '2'\n\"\"\"\n\n\"\"\"\nSOLUTION 1\n\"\"\""
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 2\") == \"8\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 4 2''') == '8'\n'''\nGiven an integer N and two integers D and X. The problem is to find the number of ways to choose N elements from a sequence of length X such that difference between the sum of chosen elements and sum of rest of the elements is equal to D.\n\nFor example, consider the sequence {1, 3, 5, 7, 9, 10} and the given D = 4, X = 4.\n\nThere are 3 ways to choose N = 4 elements from the sequence such that difference between the sum of chosen elements and sum of rest of the elements is equal to 4.\n\n1. {1, 3, 5, 7}\n2. {1, 3, 5, 9}\n3. {1, 3, 7, 9}\nThe above 3 ways will be printed by the program in the first line, followed by the elements.\n\nSAMPLE INPUT \n5 4 1\nSAMPLE OUTPUT \n2 3\nExplanation\nIn the sequence {1, 3, 5, 7, 9}, we have 3 elements, so N = 3. The sequence has difference of 5 - 3 = 2 between the sum of chosen elements and the sum of rest of the elements.\n\nSo the output is 2 3.\n\n'''\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(expected_result)\n\n\"\"\""
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 2\\n') == '8'\n\"\"\""
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 2') == '8'\n\"\"\""
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2\") == \"8\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450') == \"YES\"\nassert solution('3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749') == \"NO\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\") == \"NO\"\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\nBurunduk1 2526 2537\nBudAlNik 2084 2214\nsubscriber 2833 2749\"\"\") == \"YES\"\nassert solution(\"\"\"3\nApplejack 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450\"\"\") == \"NO\"\n\n\"\"\"\n\nfor _ in range(int(stdin.readline())):\n    a, b, c, d, e = map(int, stdin.readline().split())\n    if a >= b:\n        print(\"YES\")\n    elif a <= b:\n        if (a == e and d >= c) or (c == e and d >= a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\nApplejack 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450\n\"\"\") == 'YES'\nassert solution(\"\"\"3\nBurunduk1 2526 2537\nBudAlNik 2084 2214\nsubscriber 2833 2749\n\"\"\") == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\") == \"NO\"\nassert solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\") == \"YES\"\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\nApplejack 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450\"\"\") == \"YES\"\n\nassert solution(\"\"\"3\nBurunduk1 2526 2537\nBudAlNik 2084 2214\nsubscriber 2833 2749\"\"\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\") == \"YES\"\nassert solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\") == \"NO\"\n\"\"\"\n\nfrom collections import namedtuple\n\nn = int(input())\n\nnames_before_after_rating = []\nfor _ in range(n):\n    names_before_after_rating.append(input().split())\n\nResult = namedtuple('Result', ['name', 'before', 'after'])\nresults = [Result(*name_before_after_rating) for name_before_after_rating in names_before_after_rating]\n\nfor result in results:\n    print(\"YES\" if int(result.before) < int(result.after) else \"NO\")\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\\n\") == \"YES\"\nassert solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\\n\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450') == 'NO'\nassert solution('3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749') == 'YES'\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\") == \"YES\"\nassert solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\") == \"NO\"\n\nprint(\"HERE\")\nprint(solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\"))\nprint(\"HERE\")\nprint(solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\"))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10100') == 3\nassert solution('101') == 2\n\"\"\""
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10100\") == \"3\"\nassert solution(\"101\") == \"2\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"10111110\") == \"6\"\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10100') == 3\n\nassert solution('101') == 2\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10100') == '3'\nassert solution('101') == '2'\nassert solution('100') == '1'\nassert solution('10010') == '4'\nassert solution('10110') == '3'\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 2\nassert solution(5) == 3\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10011\") == 3\nassert solution(\"10100\") == 2\nassert solution(\"10101\") == 1\n\n\"\"\""
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10100\") == 3\nassert solution(\"101\") == 2\nassert solution(\"10100\") == 3\nassert solution(\"10101\") == 2\n\"\"\"\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101010') == '3'\nassert solution('11110') == '2'\nassert solution('1101010') == '4'\nassert solution('101010') == '2'\nassert solution('101') == '1'\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10100') == 3\nassert solution('101') == 2\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0101') == '2'\nassert solution('0111') == '3'\nassert solution('1111') == '4'\nassert solution('1110') == '5'\nassert solution('11110') == '6'\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\\n\") == \"2\"\n\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n\") == \"3\"\n\nassert solution(\"8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n\") == \"2\"\n\nassert solution(\"8 1\\n0\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n\") == \"3\""
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\"\n) == \"2\"\nassert solution(\n    \"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n\"\n) == \"3\"\nassert solution(\n    \"8 1\\n0\"\n) == \"2\"\n\n\"\"\""
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\") == \"2\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == \"3\"\nassert solution(\"8 1\\n0\") == \"2\"\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\") == '2'\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\") == \"2\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == \"3\"\nassert solution(\"8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n0\") == \"2\"\nassert solution(\"8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n0\") == \"3\"\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1') == 2\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\") == \"2\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n\") == \"3\"\nassert solution(\"8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1') == '2'\nassert solution('3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n') == '3'\nassert solution('8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n') == '2'\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 7\\n2 5\\n1 3\\n6 8\\n\") == 2\nassert solution(\"2\\n4 7\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8\\n\") == 3\nassert solution(\"6\\n4 8\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8\") == \"2\"\n\nprint(solution(\"\"))\n\"\"\"\nfrom collections import namedtuple, defaultdict\nfrom typing import List, Tuple, Dict\nfrom unittest import TestCase\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2\n2 3\n3 4\n4 5\n5 6''') == '2'\n\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n5 6''') == '3'\n\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n5 6''') == '3'\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8') == 2\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 11\\n4 7\") == \"1\"\nassert solution(\"5\\n1 2\\n4 7\\n2 5\\n1 3\\n6 8\") == \"3\"\nassert solution(\"6\\n4 8\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8\") == \"2\"\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '2'\n\"\"\""
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 3\nassert solution(2) == 2\nassert solution(1) == 1"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8') == '2'\nassert solution('7 11\\n4 7\\n2 5\\n1 3\\n6 8') == '1'\nassert solution('5 10\\n1 2\\n4 7\\n2 5\\n1 3\\n6 8') == '3'\nassert solution('6 10\\n4 7\\n2 5\\n1 3\\n6 8') == '2'\nassert solution('3 9\\n4 7\\n2 5\\n1 3\\n6 8') == '3'\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n4 7\") == 1\nassert solution(\"2 3\\n4 7\") == 0\nassert solution(\"2 3\\n1 5\") == 1\nassert solution(\"1 2\\n1 3\\n1 4\\n2 4\\n2 5\") == 1\n\"\"\"\n\nimport sys\n\nMAX = 10 ** 9\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n4 7\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8') == '2'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n5 5\\n2 2\") == \"YES\"\nassert solution(\"2 2\\n5 6\\n2 2\") == \"NO\"\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\") == \"YES\"\nassert solution(\"4 1\\n4 1 10 1\\n6 2 10 1\") == \"NO\"\n\n'''\n\nimport sys\nimport collections"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n5 6\\n2 2\") == \"NO\"\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\") == \"YES\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n5 6\\n2 2\") == \"YES\"\nassert solution(\"2 2\\n5 6\\n2 1\") == \"NO\"\nassert solution(\"2 2\\n5 6\\n3 2\") == \"NO\"\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\") == \"YES\"\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 2\") == \"NO\"\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('input_15_01.txt').read()) == 'YES'\nassert solution(open('input_15_02.txt').read()) == 'NO'\nassert solution(open('input_15_03.txt').read()) == 'YES'\nassert solution(open('input_15_04.txt').read()) == 'YES'\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n5 5\\n2 2\") == \"YES\"\nassert solution(\"2 2\\n5 6\\n2 2\") == \"NO\"\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\") == \"YES\"\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n5 5\\n2 2\") == 'YES'\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\") == 'YES'\nassert solution(\"4 1\\n4 1 10 1\\n5 6\\n2 2\") == 'NO'\nassert solution(\"4 1\\n4 1 10 1\\n8 9\\n2 2\") == 'NO'\n\n\"\"\""
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n5 5\\n2 2\") == \"YES\"\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\") == \"NO\"\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n5 5\\n2 2\") == \"YES\"\nassert solution(\"2 2\\n5 6\\n2 2\") == \"NO\"\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\") == \"YES\"\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\") == \"NO\"\n\nimport collections\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 10 1\\n3 2 10 1\") == 'NO'\nassert solution(\"4 1 10 1\\n5 6 2 2\") == 'YES'\nassert solution(\"4 1 10 1\\n5 6 3 2\") == 'NO'\nassert solution(\"4 1 10 1\\n5 6 4 2\") == 'YES'\nassert solution(\"4 1 10 1\\n5 6 5 2\") == 'YES'\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 1\n4 1 10 1\n3 2 10 1''') == 'YES'\nassert solution('''2 2\n5 6\n2 2''') == 'NO'\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n-1\\n?\\n1\") == \"Yes\"\nassert solution(\"2 100\\n-10000\\n0\\n1\\n\") == \"Yes\"\nassert solution(\"4 5\\n?\\n1\\n?\\n1\\n?\\n\") == \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n-1\\n?\\n1\\n1\\n?\\n\") == \"Yes\"\nassert solution(\"4 5\\n?\\n1\\n?\\n1\\n?\\n1\\n\") == \"No\"\nassert solution(\"3 4\\n-1\\n?\\n1\\n?\\n0\\n\") == \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 100\\n-10000\\n0\\n1\\n\") == \"Yes\"\nassert solution(\"1 2\\n-1\\n?\") == \"Yes\"\nassert solution(\"4 5\\n?\\n1\\n?\\n1\\n?\\n\") == \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 100\\n-10000\\n0\\n1\\n\") == \"Yes\"\nassert solution(\"1 2\\n-1\\n?\\n1\\n\") == \"No\"\n\"\"\"\n\n\"\"\"\nFind n, k. Find a_1, a_2... a_n. The last line contains the two integers q and k.\n\nIf a_j =?, then the coefficient near x^j - 1 is undefined.\nIf a_j = a, then the coefficient near x^j - 1 is a.\n\nNow find all B(x) whose Q(x) == x - k, such that B(x)Q(x) = a_1x^1 + a_2x^2 +... + a_nx^n\n(that is, B(x) is divisible by x - k, and has qx^n - 1 = 0)\n\nNow, check if there are any B(x) that has coefficient a_1 = a, then B(x) is divisible by x - k,\nbecause then B(x)Q(x) = x^n - 1 = 0\n\"\"\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n-1\\n?\\n?\\n\") == 'Yes'\nassert solution(\"2 100\\n-10000\\n0\\n1\\n\") == 'Yes'\nassert solution(\"4 5\\n?\\n1\\n?\\n1\\n?\\n\") == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n-1\\n?\\n1 2') == 'Yes'\nassert solution('2 100\\n-10000\\n0\\n1\\n1\\n') == 'Yes'\nassert solution('4 5\\n?\\n1\\n?\\n1\\n?\\n1') == 'No'\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 100\\n-10000\\n0\\n1\\n\") == \"Yes\"\nassert solution(\"4 5\\n-10000\\n0\\n1\\n1\\n\") == \"No\"\nassert solution(\"1 2\\n-1\\n?\") == \"Yes\"\nassert solution(\"1 2\\n-1\\n1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n-1\\n?\\n?\\n\") == \"Yes\"\nassert solution(\"2 100\\n-10000\\n0\\n1\\n\") == \"Yes\"\nassert solution(\"4 5\\n-1\\n?\\n?\\n?\\n\") == \"No\""
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n-1\\n?\\n') == 'Yes'\nassert solution('2 100\\n-10000\\n0\\n1\\n') == 'Yes'\nassert solution('4 5\\n?\\n1\\n?\\n1\\n?\\n') == 'No'\nassert solution('4 5\\n0\\n0\\n1\\n1\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n-1\\n?\\n1 2\\n0\\n1\\n') == 'Yes'\nassert solution('2 100\\n-10000\\n0\\n1\\n\\n1 1\\n0\\n1\\n') == 'No'"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('14') == '6'\nassert solution('20') == '15'\n\"\"\"\n\nfrom math import sqrt, floor, ceil"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\"\n\"\"\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\"\nassert solution(\"8192\") == \"8191\"\n\"\"\""
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('14') == '6'\nassert solution('20') == '15'\n\n\"\"\"\n\nfrom math import gcd\nfrom itertools import permutations"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('14') == '6'\nassert solution('20') == '15'\nassert solution('8192') == '8191'\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"14\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\"\nassert solution(\"8192\") == \"8191\"\n\"\"\""
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\"\nassert solution(\"8192\") == \"8191\"\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\""
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\"\nassert solution(\"8192\") == \"8191\"\n\"\"\""
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"24 0\") == \"2\"\nassert solution(\"24 1\") == \"3\"\nassert solution(\"24 -1\") == \"4\"\nassert solution(\"1 1\") == \"-\"\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(TEST_CASE_1)) == str(RESULT_CASE_1)\nassert solution(str(TEST_CASE_2)) == str(RESULT_CASE_2)\nassert solution(str(TEST_CASE_3)) == str(RESULT_CASE_3)\nassert solution(str(TEST_CASE_4)) == str(RESULT_CASE_4)\nassert solution(str(TEST_CASE_5)) == str(RESULT_CASE_5)\nprint(\"Passed all tests.\")"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 0') == '2'\nassert solution('24 1') == '3'\nassert solution('24 -1') == '4'\nassert solution('1 1') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('24 0') == '2'\nassert solution('24 1') == '3'\nassert solution('24 -1') == '4'\nassert solution('4 -7') == '2'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('24 0') == '2'\nassert solution('24 1') == '3'\nassert solution('24 -1') == '4'\nassert solution('1 1') == '-1'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"24 0\") == \"2\"\nassert solution(\"24 1\") == \"3\"\nassert solution(\"24 -1\") == \"4\"\nassert solution(\"1 1\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''24 0\n''') == '2'\nassert solution('''24 1\n''') == '3'\nassert solution('''24 -1\n''') == '4'\nassert solution('''1 1\n''') == '-1'\nassert solution('''4 -7\n''') == '2'\n\n\n-----Test sample code-----\n\nimport unittest\n\nclass Test_Primality_Test(unittest.TestCase):\n\n    def test_primality_test(self):\n        self."
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1') == '3'\nassert solution('1 1') == '-1'\nassert solution('6 -7') == '2'\nassert solution('10 0') == '1'\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"24 0\") == \"2\"\nassert solution(\"24 1\") == \"3\"\nassert solution(\"24 -1\") == \"4\"\nassert solution(\"1 1\") == \"-1\"\nassert solution(\"4 -7\") == \"2\"\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"24 0\") == \"2\"\nassert solution(\"24 1\") == \"3\"\nassert solution(\"24 -1\") == \"4\"\nassert solution(\"4 -7\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('51528') == '10028'\nassert solution('102') == '100'\nassert solution('1') == '0'\nassert solution('1 1') == '0'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('51528') == '10028'\nassert solution('102') == '100'\nassert solution('1') == '0'\nassert solution('1 1') == '0'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"51528\") == \"10028\"\nassert solution(\"102\") == \"100\"\nassert solution(\"1 1\") == \"0\"\n\n'''"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"51528\") == \"10028\"\n\"\"\""
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"51528\") == \"10028\"\nassert solution(\"102\") == \"100\"\nassert solution(\"1 1\") == \"0\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n51528') == '10028'\nassert solution('3 2\\n102') == '100'\nassert solution('1 1\\n1') == '0'\nassert solution('1 1\\n0') == '0'\nassert solution('1 1\\n9') == '9'\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"51528\") == \"10028\"\nassert solution(\"102\") == \"100\"\nassert solution(\"1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"51528\") == \"10028\"\nassert solution(\"102\") == \"100\"\nassert solution(\"1 1\") == \"0\"\n\"\"\"\nimport re\n\nn, k = map(int, input().split())\ns = input()\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"51528\") == \"10028\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"51528\") == \"10028\"\nassert solution(\"102\") == \"100\"\nassert solution(\"1 1\") == \"0\"\n\n\"\"\"\n\n\"\"\"\nFind the first number with at least two digits and its first digit is not 0.\nThen we need to increment this number by one.\n\nWe need to increment by one as:\n1. The first digit is 0, the following digits will be all 0s except the first digit.\n2. The first digit is 1-9, the following digits will be 0-9.\n3. The first digit is 10-99, the following digits will be 10-99.\n\n\"\"\"\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\nassert solution(\"1 3 2 1\") == \"3\""
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom itertools import combinations\n\ninputs = [\n    (3, 1, 2, 3),\n    (1, 3, 2, 3),\n    (1, 3, 2, 3)\n]\noutputs = [\n    5,\n    4,\n    4\n]\n\nfor i, input in enumerate(inputs):\n    expected = outputs[i]\n    assert solution(*input) == expected\n    print(solution(*input))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\n\nassert solution(\"1 3 2 3\") == \"4\"\n\nassert solution(\"1 3 2 3\") == \"4\"\n\nassert solution(\"3 1 2 3\") == \"5\"\n\nassert solution(\"1 3 2 3\") == \"4\""
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 3\") == 5\n\"\"\"\n\nimport sys\n\ncnt_1, cnt_2, x, y = map(int, sys.stdin.readline().split())\n\ncount = 0\n\nfor i in range(cnt_1):\n    if x % (i + 1) == 0:\n        count += 1\n\nfor i in range(cnt_2):\n    if y % (i + 1) == 0:\n        count += 1\n\nprint(max(cnt_1, cnt_2) + count)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 2 3\") == \"5\"\nassert solution(\"1 3 2 5\") == \"4\"\nassert solution(\"1 3 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"5\"\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2 3') == 5\nassert solution('2 3 1 3') == 4\nassert solution('1 3 2 3') == 4\nassert solution('1 2 2 3') == 4\nassert solution('1 3 2 4') == 5\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 1 2 3''') == '5'\nassert solution('''1 3 2 3''') == '4'\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"5\""
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\nassert solution(\"1 3 2 4\") == \"5\""
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(    '5 1 2 0 1 2') == '3 1'\nassert solution(    '1 1 1 -1 -1 2') == '1 1'\nassert solution(    '2 1 -1 2 -1 2') == '2 1'\nassert solution(    '3 1 -1 1 -1 1 2') == '1 1'\n\nassert solution(    '5 1 2 0 1 2') == '3 1'\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '3 1'\nassert solution('2 2 3 4 5') == '2 2'\nassert solution('1 1 1 -1 -1 2') == '1 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\nassert solution(\"3 3 1 0 1 2\") == \"3 1\"\nassert solution(\"3 3 1 0 1 2\") == \"3 1\"\n\"\"\""
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 2 0 1 2') == '3 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0, 0'\nassert solution('4 1 0 1 1 2') == '2, 1'\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\n\n\"\"\""
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\""
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\n\"\"\""
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC??FGHIJK???OPQR?TUVWXY?') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO') == '-1'\nassert solution('AABCDEFGHIJKLMNOPQRSTUVW??M') == '-1'\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY?\") == \"ABCDEFGHIJKLMNOPQRZTUVWXYS\"\nassert solution(\"WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == \"-1\"\nassert solution(\"??????????????????\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\n\n\"\"\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCDEFGHIJK\") == \"ABCDEFGHIJK\"\nassert solution(\"ABC??FGHIJK\") == \"ABCFGHIJK\"\nassert solution(\"ABC??FGHIJK???OPQR?TUVWXY\") == \"ABCFGHIJKLMNOPQRSTUVWXY\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY?\") == \"ABCDEFGHIJKLMNOPQRZTUVWXYS\"\nassert solution(\"WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\nassert solution(\"??????????????????\") == \"-1\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == \"-1\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY?Z\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(\"WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == \"-\"\nassert solution(\"??????????????????\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\n\n\n\"\"\""
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY?\") == \"ABCDEFGHIJKLMNOPQRZTUVWXYS\"\nassert solution(\"WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == \"-\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY?A\") == \"ABCDEFGHIJKLMNOPQRZTUVWXYS\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == -1\nassert solution(\"WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\n\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY?F\") == \"ABCDEFGHIJKLMNOPQRZTUVWXYS\"\n\"\"\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY?\") == \"ABCDEFGHIJKLMNOPQRZTUVWXYS\"\nassert solution(\"WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO\") == \"-\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == \"-\"\nassert solution(\"??????????????????????????\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\n\"\"\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n100 200 100\") == \"YES\"\nassert solution(\"4\\n100 100 100 200\") == \"NO\"\n\"\"\"\n\nn = int(input())\nw = list(map(int, input().split()))\n\nw.sort(reverse=True)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n100 200 100\\n\") == \"YES\"\nassert solution(\"4\\n100 100 100 200\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 100 200 100\\n') == 'YES'\nassert solution('4 100 100 100 200\\n') == 'NO'\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n100 200 100\\n\") == \"YES\"\nassert solution(\"4\\n100 100 100 200\\n\") == \"NO\"\n\n-----\n\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 100 200 100\") == \"YES\"\nassert solution(\"4 100 100 100 200\") == \"NO\"\nassert solution(\"10 500 1 2 3 4 5 6 7 8 9 10\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n100 200 100\\n\") == 'YES'\nassert solution(\"4\\n100 100 100 200\\n\") == 'NO'\nassert solution(\"5\\n100 200 100 300 200\\n\") == 'YES'\nassert solution(\"7\\n100 200 300 200 100 100 100\\n\") == 'NO'\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_0) == \"YES\"\nassert solution(test_1) == \"NO\"\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 200 100\") == \"YES\"\nassert solution(\"100 100 100 200\") == \"NO\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n100 200 100\\n') == 'YES'\nassert solution('4\\n100 100 100 200\\n') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n100 200 100\\n\") == \"YES\"\n\"\"\""
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n101010\\n101010\\n101010\\n101010\") == \"18\"\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n0010\\n0100') == 5\nassert solution('3 4\\n001000\\n000010\\n000010\\n000010') == 12\nassert solution('4 3\\n01110\\n01110\\n01110\\n01110') == 18\n\"\"\"\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n11111\\n11110') == '5'\nassert solution('3 4\\n001010\\n000010\\n000010\\n000010') == '12'\nassert solution('4 3\\n01110\\n01110\\n01110\\n01110') == '18'\n\n---\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u0432\u0441\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \"human\" \u043d\u0430 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443 \"computer\"\ufeff \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\nSample Input:\nI need to understand the human mind\nhumanity\n\nSample Output:\nI need to understand the computer mind\ncomputerity\n\nimport re\nimport sys\n\npattern = r'human'\nfor line in sys.stdin:\n    line = line.rstrip()\n    print(re.sub(pattern, 'computer', line))"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n0010\\n0100\") == 5\nassert solution(\"3 4\\n001000\\n000010\\n000010\\n000010\") == 12\nassert solution(\"4 3\\n01110\\n01110\\n01110\\n01110\") == 18\n\"\"\"\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n00110\\n01110\\n10110\") == \"13\"\nassert solution(\"2 2\\n10\\n10\") == \"3\"\nassert solution(\"4 3\\n001010\\n000010\\n101010\\n101010\") == \"14\"\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n0010\\n0100\") == \"5\"\nassert solution(\"3 4\\n001000\\n000010\\n000010\\n000010\") == \"12\"\nassert solution(\"4 3\\n01110\\n01110\\n01110\\n01110\") == \"18\"\nprint('The code ran Correctly')"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == 5\nassert solution(test_input_2) == 12\nassert solution(test_input_3) == 18\n\"\"\"\n\nfrom __future__ import annotations\n\nimport collections\nfrom typing import List, Tuple, Union, overload\n\nT = Tuple[str, str]\nU = Union[str, T]\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n0010\\n0100') == 5\nassert solution('3 4\\n001000\\000010\\000010\\000010') == 12\nassert solution('4 3\\n01110\\01110\\01110\\01110\\n01110\\01110\\01110\\01110\\n01110\\01110\\01110\\01110') == 18\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n0010\\n0100\") == \"5\"\nassert solution(\"3 4\\n001000\\n000010\\n000010\\n000010\") == \"12\"\nassert solution(\"4 3\\n01110\\n01110\\n01110\\n01110\") == \"18\"\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n0010\\n0100') == '5'\nassert solution('3 4\\n001000\\n000010\\n000010\\n000010') == '12'\nassert solution('4 3\\n01110\\n01110\\n01110\\n01110') == '18'"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 4 3\\n2 2 2 2\") == \"10\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == \"2\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 2 10\\n1 3 4 3 3\") == \"3\"\nassert solution(\"4\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == \"10\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == \"2\"\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 2 10\\n1 3 4 3 3\") == \"3\"\nassert solution(\"4\\n1 10 2 10\\n2 4 2 2\") == \"10\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == \"2\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 2 10\\n1 3 4 3 3\") == \"3\"\nassert solution(\"4\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == \"10\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == \"2\""
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 2 10\") == 3\nassert solution(\"1 10 2 10\") == 10\nassert solution(\"1 1 1 1 1 1 1\") == 2\nassert solution(\"2 2 2 3 6 7 6\") == 10\n\"\"\""
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 2 10\\n1 3 4 3 3') == '3'\nassert solution('4\\n1 10 2 10\\n2 4 2 2') == '10'\nassert solution('7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6') == '2'\n\n\n\"\"\"\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n1 2 3 1\n2 3 1 2''') == 3\nassert solution('''7\n1 1 1 1 1 1 1\n2 2 2 3 6 7 6''') == 2\nassert solution('''5\n1 2 3 2 10''') == 3\n\n-----Tests-----\nsolution('''5\n1 2 3 2 10''')\nsolution('''4\n1 10 2 10\n2 4 2 2''')\nsolution('''7\n1 1 1 1 1 1 1\n2 2 2 3 6 7 6''')\nsolution('''2\n1 1\n1 2''')\nsolution('''1\n1\n1''')\nsolution('''6\n1 1 1 1 1 1\n2 2 2 3 6 7 6''')\nsolution('''10\n1 1 1 1 1 1 1 1 1 1\n2 2 2 3 6 7 6 6 6 6''')\nsolution('''10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1''')\nsolution('''9\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1''')\nsolution('''3\n1 1 1\n1 1 1''')\nsolution('''2\n1 1\n1 2''')\nsolution('''1\n1\n1''')\nsolution('''3\n1 1\n1 2\n1 3''')\nsolution('''5\n1 2 3 2 10''')\nsolution('''3\n1 2 3''')\nsolution('''2\n1 1\n1 2''')\nsolution('''1\n1\n1''')\nsolution('''6\n1 1 1 1 1 1\n2 2 2 3 6 7 6''')\nsolution('''10\n1 1 1 1 1 1 1 1 1 1\n2 2 2 3 6 7 6 6 6 6''')\nsolution('''10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1''')\nsolution('''9\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1''')\nsolution('''7\n1 1 1 1 1 1 1 1\n2 2 2 3 6 7 6 6''')\nsolution('''2\n1 1\n1 2''')\nsolution('''1\n1\n1''')\nsolution('''3\n1 1\n1 2\n1 3''')\nsolution('''5\n1 2 3 2 10''')\nsolution('''3\n1 2 3''')\nsolution('''2\n1 1\n1 2''')\nsolution('''1\n1\n1''')\nsolution('''6\n1 1 1 1 1 1\n2 2 2 3 6 7 6''')\nsolution('''10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1''')\nsolution('''10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1''')\nsolution('''9\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1''')\nsolution('''7\n1 1 1 1 1 1 1 1\n2 2 2 3 6 7 6 6''')\nsolution('''2\n1 1\n1 2''')\nsolution('''1\n1\n1''')\nsolution('''3\n1 1\n1 2\n1 3''')\nsolution('''5\n1 2 3 2 10''')\nsolution('''3\n1 2 3''')\nsolution('''2\n1 1\n1 2''')\nsolution('''1\n1\n1''')\nsolution('''6\n1 1 1 1 1 1\n2 2 2 3 6 7 6''')\nsolution('''10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1''')\nsolution('''10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1''')\nsolution('''9\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1''')\nsolution('''7\n1 1 1 1 1 1 1 1\n2 2 2 3 6 7 6 6''')\nsolution('''2\n1 1\n1 2''')\nsolution('''1\n1\n1''')\nsolution('''3\n1 1\n1 2\n1 3''')\nsolution('''5\n1 2 3 2 10''')\nsolution('''3\n1 2 3''')\nsolution('''2\n1 1\n1 2''')\nsolution('''1\n1\n1''')\nsolution('''6\n1 1 1 1 1 1\n2 2 2 3 6 7 6"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 2 10\\n1 3 4 3 3\") == \"3\"\nassert solution(\"4\\n1 10 2 10\\n2 4 2 2\") == \"10\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 2 10\\n1 3 4 3 3\") == 3\nassert solution(\"4\\n1 10 2 10\\n2 4 2 2\") == 10\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == 2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 2 10\\n1 3 4 3 3') == 3\nassert solution('4\\n1 10 2 10\\n2 4 2 2') == 10\nassert solution('7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6') == 2\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 3') == '4'\nassert solution('6 2 -5') == '3'\nassert solution('1 2 -2') == '1'\nassert solution('7 7 -1') == '7'\n\"\"\"\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 3\") == \"4\"\n\n\"\"\"\n\nn, a, b = map(int, input().split())\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 7\") == \"3\"\nassert solution(\"5 1 3\") == \"4\"\nassert solution(\"6 2 -5\") == \"3\"\n\"\"\""
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2 -5\") == \"3\"\n\"\"\""
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2 -5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 -5\") == 3\nassert solution(\"5 1 3\") == 4\nassert solution(\"3 2 7\") == 3\n\n\n\n-----"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 -1\") == \"3\"\nassert solution(\"5 1 3\") == \"4\"\nassert solution(\"3 2 7\") == \"3\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2 -5') == 3\n\"\"\"\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 7\\n') == '3', 'expected 3 but got {}'.format(solution('3 2 7\\n'))\nassert solution('6 2 -5\\n') == '3', 'expected 3 but got {}'.format(solution('6 2 -5\\n'))\nassert solution('5 1 3\\n') == '4', 'expected 4 but got {}'.format(solution('5 1 3\\n'))\n\n\"\"\"\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 -5\") == \"3\"\nassert solution(\"5 1 3\") == \"4\"\nassert solution(\"3 2 7\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 8 6 4 2 1 4 7 10 2\") == \"3\"\nassert solution(\"-1 6 -1 2 -1 4 7 -1 2\") == \"3\"\nassert solution(\"-1 -1 -1 -1 -1\") == \"1\"\nassert solution(\"-1 -1 4 5 1 2 3\") == \"2\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n8 6 4 2 1 4 7 10 2\") == \"3\"\nassert solution(\"9\\n-1 6 -1 2 -1 4 7 -1 2\") == \"3\"\nassert solution(\"5\\n-1 -1 -1 -1 -1\") == \"1\"\nassert solution(\"7\\n-1 -1 4 5 1 2 3\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n8 6 4 2 1 4 7 10 2\") == \"3\"\nassert solution(\"9\\n-1 6 -1 2 -1 4 7 -1 2\") == \"3\"\nassert solution(\"5\\n-1 -1 -1 -1 -1\") == \"1\"\nassert solution(\"7\\n-1 -1 4 5 1 2 3\") == \"2\""
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n-1 -1 4 5 1 2 3') == '3'\nassert solution('7\\n-1 -1 4 5 1 2 3') == '2'\nassert solution('9\\n-1 -1 -1 -1 -1') == '1'\nassert solution('9\\n8 6 4 2 1 4 7 10 2') == '3'\n\n-----\n\n1) \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u0430 n, \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u0441\u0442\u0435\u043a.\n\n2) \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0438\u0437 \u0441\u0442\u0435\u043a\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n\n3) \u043f\u043e\u043a\u0430 \u0432 \u0441\u0442\u0435\u043a\u0435 \u0435\u0441\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438 \u043d\u0435 \u043a\u043e\u043d\u0447\u0430\u044e\u0442\u0441\u044f - \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0437\u0430\u0442\u0435\u043c \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441\u043d\u043e\u0432\u0430 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e\n\n4) \u0434\u043b\u044f \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u043e\u0439 \u0432 \u043f.3 - \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432\u0441\u0435 \u0435\u0451 \u043f\u0435\u0440\u0432\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0442\u043e \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u043c \u0432 \u043b\u0438\u0441\u0442 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432. \u0418\u043d\u0430\u0447\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u043c \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n\n5) \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432\n\"\"\"\n\nimport sys"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\n8 6 4 2 1 4 7 10 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 8 6 4 2 1 4 7 10 2') == '3'\nassert solution('9 -1 6 -1 2 -1 4 7 -1 2') == '3'\nassert solution('5 -1 -1 -1 -1') == '1'\nassert solution('7 -1 -1 4 5 1 2 3') == '2'"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 6 4 2 1 4 7 10 2\") == 3\nassert solution(\"9 -1 6 -1 2 -1 4 7 -1 2\") == 3\nassert solution(\"5 -1 -1 -1 -1\") == 1\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n8 6 4 2 1 4 7 10 2\") == '3'\nassert solution(\"9\\n-1 6 -1 2 -1 4 7 -1 2\") == '3'\nassert solution(\"5\\n-1 -1 -1 -1 -1\") == '1'\nassert solution(\"7\\n-1 -1 4 5 1 2 3\") == '2'\n\"\"\""
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n8 6 4 2 1 4 7 10 2\") == 3\n\"\"\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n8 6 4 2 1 4 7 10 2\\n\") == \"3\\n\", \"Test 1\"\nassert solution(\"9\\n-1 6 -1 2 -1 4 7 -1 2\\n\") == \"3\\n\", \"Test 2\"\nassert solution(\"5\\n-1 -1 -1 -1 -1\\n\") == \"1\\n\", \"Test 3\"\nassert solution(\"7\\n-1 -1 4 5 1 2 3\\n\") == \"2\\n\", \"Test 4\"\n\"\"\""
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abba', 2) == 4\nassert solution('aabaabaa', 1) == 5\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 abba') == '4'\nassert solution('3 2 abba') == '3'\nassert solution('5 5 a') == '0'\nassert solution('4 3 aa') == '3'\nassert solution('3 1 aab') == '1'\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 aaabba') == 4\nassert solution('4 2 abba') == 4\nassert solution('8 1 aabaabaa') == 5\nassert solution('8 1 aabaabaa') == 5\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abba', 2) == 4\nassert solution('aaaa', 0) == 0\nassert solution('aabaabaa', 1) == 5\n\"\"\"\n\n\nfrom typing import Tuple\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abba\", 2) == 4\nassert solution(\"aabaabaa\", 1) == 5"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ababbbaabbbaab\") == 8\nassert solution(\"aaaaabbbbb\") == 6\nassert solution(\"aabbbaabbbaaaaabbbbb\") == 10\n\"\"\"\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 abba') == 4\nassert solution('8 1 aabaabaa') == 5\n\nprint(\"Success!\")\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 aabaabaa\") == 5\nassert solution(\"8 1 aabaabaa\") == 5\n\"\"\"\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2', 'abba') == 4\n\"\"\""
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 aabaabaa') == 5\nassert solution('8 1 aabaabaa') == 5\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 50 50\\n1 2 3\\n') == '2 1 2', 'wrong result for input 3 50 50\\n1 2 3\\n'\nassert solution('3 50 50\\n1 2 3\\n') == '2 1 2', 'wrong result for input 3 50 50\\n1 2 3\\n'\nassert solution('2 6 5\\n1 2 3\\n') == '0', 'wrong result for input 2 6 5\\n1 2 3\\n'\n\"\"\"\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 50 50\\n\") == \"2 1\"\nassert solution(\"80 60 60\\n\") == \"0\"\nassert solution(\"51 25 99 25\\n\") == \"3 1 2\"\nassert solution(\"51 25 99 99\\n\") == \"0\"\nassert solution(\"6 5\\n\") == \"1 1\"\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 50 50\") == \"2 1\"\nassert solution(\"80 60 60\") == \"0\"\nassert solution(\"51 25 99 25\") == \"3 1 2\"\nassert solution(\"6 5\") == \"1 1\"\nassert solution(\"51 25 99 25\") == \"3 1 2\"\n\"\"\"\n\nn = int(input().strip())\na = list(map(int, input().strip().split()))\n\ncount = 0\ni = 0\nwhile i < n:\n    if a[i] > sum(a) / 2:\n        count += 1\n        i += 1\n    else:\n        break"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 50 50\\n\") == \"2 1\"\nassert solution(\"6 5\\n\") == \"1 2\"\nassert solution(\"51 25 99 25\\n\") == \"3 1 2\"\nassert solution(\"51 25 99 100\\n\") == \"3 1 2 4\"\nassert solution(\"100 50 50\\n\") == \"2 1\"\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 50 50\") == \"2 1\"\nassert solution(\"80 60 60\") == \"0\"\nassert solution(\"6 5\") == \"1 1\"\nassert solution(\"51 25 99 25\") == \"3 1 2\"\nassert solution(\"51 25 99 25 80 60 60\") == \"1 2 3\"\n\n'''\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\nmin_a = min(a)\nmax_a = max(a)"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 50 50\") == \"2\\n1 2\"\nassert solution(\"80 60 60\") == \"0\"\nassert solution(\"51 25 99 25\") == \"3\\n1 2 4\"\nassert solution(\"80 50 50\") == \"1\\n1 2\"\nassert solution(\"51 25 99 25\") == \"3\\n1 2 4\"\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 50 50\\n6 5\\n51 25 99 25\\n80 60 60') == '1 2 4'\nassert solution('2\\n6 5\\n51 25 99 25\\n80 60 60') == '1 2'\nassert solution('3\\n51 25 99 25\\n80 60 60') == '1 2'\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n100 50 50') == '2\\n1 2'\nassert solution('4\\n51 25 99 25') == '3\\n1 2 4'\nassert solution('2\\n6 5') == '1\\n1'\n\"\"\"\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n100 50 50\n''') == \"2\\n1 2\"\nassert solution('''\n3\n80 60 60\n''') == \"0\\n\"\nassert solution('''\n2\n6 5\n''') == \"1\\n1\"\nassert solution('''\n4\n51 25 99 25\n''') == \"3\\n1 2 4\"\n\n'''"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 50 50\") == \"2 1 2\"\nassert solution(\"6 5 6\") == \"1 2 4\"\nassert solution(\"100 51 51\") == \"0\"\nassert solution(\"4 5 6\") == \"0\"\nassert solution(\"5 5 5\") == \"0\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"1\") == \"1.000000000000\"\nassert solution(\n    \"2\") == \"1.500000000000\"\n\"\"\""
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1.000000000000\"\nassert solution(\"2\") == \"1.500000000000\"\nassert solution(\"100\") == \"9.999999999999\"\n\n\"\"\""
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"3\") == \"1.5\"\nassert solution(\"10\") == \"2.0\"\n\n\"\"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 1.0\nassert solution(\"2\") == 1.5\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1.000000000000'\nassert solution('2') == '1.500000000000'\nassert solution('5') == '2.666666666667'\n\"\"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"2\") == \"1.5\"\nassert solution(\"3\") == \"1.5\"\nassert solution(\"4\") == \"1.75\"\nassert solution(\"5\") == \"1.875\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == '1.0'\nassert solution(\"2\") == '1.5'\n\"\"\"\n\nimport math\n\nn = int(input())\n\nx = 0\n\nfor i in range(n):\n    s, t = map(int, input().split())\n    if t < s:\n        t, s = s, t\n    x += t/s\n\nprint(math.floor(x))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"2\") == \"1.5\"\n\nassert abs(solution(\"1\") - 1.0) < 10 ** -4\nassert abs(solution(\"2\") - 1.5) < 10 ** -4\n\n\"\"\""
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1.000000000000'\nassert solution('2') == '1.500000000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1.5\"\n\"\"\""
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2\\n3\\n') == '2\\n2\\n', \"Bad output\"\nprint(\"Well done!\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3''') == '1\\n2\\n1'\nassert solution('''5''') == '2\\n2\\n1'\nassert solution('''9''') == '3\\n3\\n1'\nassert solution('''2''') == '1\\n2'\nprint('all ok')\n\n\"\"\"\n\"\"\"\nThe solution can be found by solving a linear programming problem of the kind\n\nminimize |u|\nsubject to |A @ u - b| \u2264 K\n\nThe linear program can be written as\n\nminimize    u_0\nsubject to  u_0 + u_1 +... + u_N = K\n             A_0 @ u_0 + A_1 @ u_1 +... + A_N @ u_N = b\n\nThe problem can be solved using a simple form of the Simplex algorithm.\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == 2\nassert solution('9') == 3\nassert solution('2') == 1\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(5) == 2\nassert solution(9) == 3\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"9\") == \"3\"\nassert solution(\"2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5) == 2\nassert solution(9) == 3\n\"\"\""
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"9\") == \"3\"\nassert solution(\"2\") == \"1 2\"\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 3\") == \"2\\n2 3\"\nassert solution(\"9\\n3 5 1\") == \"3\\n3 5 1\"\nassert solution(\"2\\n1 2\") == \"1\\n2 1\"\n\nimport sys"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"9\") == \"3\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n42\") == \"10\"\nassert solution(\"1\\n58\") == \"0\"\nassert solution(\"98765432\\n23456789\") == \"23456789\"\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 42\") == \"10\"\nassert solution(\"1 58\") == \"0\"\nassert solution(\"98765432 23456789\") == \"23456789\"\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2') == '10'\nassert solution('1 58') == '0'"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n42\") == \"10\"\nassert solution(\"1\\n58\") == \"0\"\nassert solution(\"98765432\\n23456789\") == \"23456789\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"42\\n42\") == \"10\\n\"\nassert solution(\"1\\n58\") == \"0\\n\"\nassert solution(\"98765432\\n23456789\") == \"23456789\\n\"\n\nimport sys\nassert sys.stdin.readline().strip() == \"42\"\nassert sys.stdin.readline().strip() == \"42\"\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n42') == '10'\nassert solution('1\\n58') == '0'\nassert solution('98765432\\n23456789') == '23456789'\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 42') == 10\nassert solution('1 58') == 0\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 42\") == \"10\"\nassert solution(\"1 58\") == \"0\"\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 42\") == \"10\"\nassert solution(\"1 58\") == \"0\"\nassert solution(\"98765432 23456789\") == \"23456789\"\n\n\"\"\"\n\nn = int(input())\nm = int(input())\n\nprint(m % (2 ** n))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 42') == '10'\nassert solution('1 58') == '0'\n\"\"\"\nimport sys"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nthese\\nare\\nwords\\nwith\\nconsecutive\\nvowels\") == \"these\\nare\\nwords\\nwith\\nconsecutive\\n\"\nassert solution(\"5\\naeaa\") == \"a\"\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nword\") == \"word\"\nassert solution(\"5\\nweird\") == \"werd\"\nassert solution(\"5\\naaeaa\") == \"aaeaa\"\nassert solution(\"5\\nwaaaaaaaa\") == \"waaaaaaaa\"\nassert solution(\"5\\nxqawsxqw\") == \"xqawsxqw\"\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5weird\") == \"werd\"\nassert solution(\"4word\") == \"word\"\nassert solution(\"5aaeaa\") == \"aaeaa\"\nassert solution(\"5aa\") == \"a\"\nassert solution(\"2banana\") == \"baanana\"\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('weird') == 'werd'\nassert solution('word') == 'word'\nassert solution('aaeaa') == 'aaeaa'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nweird\") == \"werd\"\nassert solution(\"4\\nword\") == \"word\"\nassert solution(\"5\\naaeaa\") == \"aaeaa\"\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('word') == 'word'\nassert solution('word') == 'word'\nassert solution('word') == 'word'\nassert solution('word') == 'word'\nassert solution('word') == 'word'\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nweird\") == \"werd\"\nassert solution(\"4\\nword\") == \"word\"\nassert solution(\"5\\naaeaa\") == \"a\"\n\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5', 'weird') == 'werd'\nassert solution('4', 'word') == 'word'\nassert solution('5', 'aaeaa') == 'aaeaa'\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"weird\") == \"werd\"\nassert solution(\"aaeaa\") == \"aeaa\"\nassert solution(\"word\") == \"word\"\n\"\"\""
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 aa a\") == \"aa\"\nassert solution(\"5 we a\") == \"we\"\nassert solution(\"5 we ya\") == \"wea\"\n\"\"\"\n\nimport sys\nimport string\n\nvowels = set(list(string.ascii_lowercase))\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline().rstrip()\nv = s.count(\"a\") + s.count(\"e\") + s.count(\"i\") + s.count(\"o\") + s.count(\"u\") + s.count(\"y\")\n\nnewS = \"\"\nfor i in range(n):\n    if s[i] in vowels:\n        if i == 0:\n            if s[i+1] in vowels:\n                v -= 1\n                newS += \"a\"\n            else:\n                newS += s[i]\n        elif i == n - 1:\n            if s[i-1] in vowels:\n                v -= 1\n                newS += \"a\"\n            else:\n                newS += s[i]\n        else:\n            if s[i+1] in vowels and s[i-1] in vowels:\n                v -= 1\n                newS += \"a\"\n            elif s[i-1] in vowels and s[i+1] not in vowels:\n                newS += \"a\"\n            elif s[i-1] not in vowels and s[i+1] in vowels:\n                newS += \"a\"\n            else:\n                newS += s[i]\n    else:\n        newS += s[i]\n\nprint(newS)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"*...*\") == \"2\"\nassert solution(\"*.AB*\") == \"2\"\nassert solution(\"*.AB*.A*\") == \"4\"\nassert solution(\"*.AB*.A*.\") == \"7\"\nassert solution(\"*.AB*B*.\") == \"2\"\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('*....*') == '5'\nassert solution('*...*') == '2'\nassert solution('*..*.**') == '4'\nassert solution('******') == '0'\nassert solution('***.*') == '0'\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('*...*') == '2'\nassert solution('*...*.\\n***') == '0'\nassert solution('*...*.\\n***.*.*') == '4'\nassert solution('*...*.\\n***.*.*\\n***.*.*') == '7'\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 1') == '2'\nassert solution('6 2 3') == '4'\nassert solution('11 3 10') == '7'\nassert solution('3 2 3') == '0'\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 1\\n*...*\") == \"2\"\nassert solution(\"6 2 3\\n*...*.\\n***\") == \"4\"\nassert solution(\"11 3 10\\n.*....**.*.\\n***\") == \"7\"\nassert solution(\"3 2 3\\n***\") == \"0\"\nassert solution(\"6 2 3\\n*...*.\\n***\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 1') == '3'\nassert solution('1 1 1') == '0'\nassert solution('1 1 1 1') == '0'\nassert solution('1 1 1 1 1') == '4'\nassert solution('1 1 1 1 1 1') == '4'\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".*..*.**.*.*..*.*\") == \"5\"\nassert solution(\".*..*.**.*.*..*.*.**.*\") == \"7\"\nassert solution(\".*..*.**.*.*..*.*.**.*.*\") == \"6\"\nassert solution(\".*..*.**.*.*..*.*.**.*.*.*\") == \"2\"\nassert solution(\".*..*.**.*.*..*.*.**.*.*.*.*\") == \"1\""
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 3 10\") == 7\nassert solution(\"6 2 3\") == 4\nassert solution(\"3 2 3\") == 0\n\"\"\"\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('*...*.\\n') == '2'\nassert solution('*...*.*\\n') == '4'\nassert solution('*.\\n') == '0'\nassert solution('*.**.\\n') == '0'\n\nprint('Success')\n\n\"\"\"\n\nn, a, b = [int(s) for s in input().split()]\narray = input().split('*')\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\\n**\\n***\") == \"0\"\nassert solution(\"3 2 1\\n*...\\n***\") == \"2\"\nassert solution(\"5 1 1\\n**...\\n***\") == \"0\"\nassert solution(\"5 2 1\\n*...*.\\n***\") == \"4\"\nassert solution(\"5 3 2\\n*...*.\\n***\") == \"7\"\n\n\"\"\"\nimport string\nimport sys"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(sys.stdin.readlines()[0])) == \"\"\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"16\") == \"NO\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('19') == '1 8'\nassert solution('16') == 'NO'"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"19\") == \"1 8\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"NO\"\nassert solution(\"19\") == \"1 8\"\n\nprint(solution(\"16\"))\nprint(solution(\"19\"))\n\n'''"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a) == expected\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"19\") == \"1 8\"\n\"\"\"\n\n\n\nfrom math import gcd"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('19') == '1 8'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"19\") == \"1 8\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('19') == '1 8'\n\n'''\n\nimport math"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 1\\n\") == \"2 1\\n\"\nassert solution(\"2\\n5 5\\n\") == \"-1\\n\"\nassert solution(\"1\\n10\\n\") == \"-1\\n\"\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 1''') == '2 1\\n1 2'\nassert solution('''2\n5 5''') == '-1'\nassert solution('''1\n10''') == '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('2 5 1') == '-1'\nassert solution('1 10') == '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 1\") == \"2\\n1 2\"\nassert solution(\"2\\n5 5\") == \"1 1\\n2 2\"\nassert solution(\"1\\n10\") == \"1\"\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 1''') == '2 1'\nassert solution('''2\n5 5''') == '-1'\nassert solution('''1\n10''') == '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == '2 1'\nassert solution(2) == '1 2'\nassert solution(1) == '-1'\nassert solution(5) == '-1'\nassert solution(10) == '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 1\\n\") == \"2\\n1 2\"\nassert solution(\"2\\n5 5\\n\") == \"-1\"\nassert solution(\"1\\n10\\n\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2 2\\n\") == \"1\\n2\\n1 2\\n\"\nassert solution(\"1\\n1 1\\n\") == \"2\\n1\\n1 1\\n\"\nassert solution(\"3\\n4 5 1\\n\") == \"2\\n1 2\\n1 3\\n\"\nassert solution(\"1\\n4 5 1\\n\") == \"1\\n1\\n1 4\\n\"\nassert solution(\"3\\n1 2 3\\n\") == \"1\\n2\\n2 3\\n\"\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 1') == '2\\n1 2'\n\nassert solution('2\\n5 5') == '-1'\nassert solution('1\\n10') == '-1'\nassert solution('1\\n1') == '1\\n1'\nassert solution('1\\n2') == '1\\n2'\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(3)) == \"2 1\"\nassert solution(str(2)) == \"1 2\"\nassert solution(str(1)) == \"-1\"\nassert solution(str(10)) == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2 2\"\nassert solution(\"27\") == \"3 9 9\"\n\n'''\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2 2\"\nassert solution(\"27\") == \"3 9 9\"\n\n\"\"\""
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2 2'\nassert solution('27') == '3 9 9'"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '2 2'\nassert solution('27') == '3 9 9'\nassert solution('1') == '1'\nassert solution('100') == '10 10 10 10'\n\"\"\""
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"2 2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2 2'\nassert solution('27') == '3 9 9'"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2 2\"\nassert solution(\"27\") == \"3 9 9\"\n\"\"\"\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2 2'\nassert solution('27') == '3 9 9'\n\"\"\""
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2 2\"\nassert solution(\"27\") == \"3 9 9\"\nassert solution(\"1000\") == \"5 5 5 5\"\n\n\"\"\"\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('4') == '2 2'\nassert solution('27') == '3 9 9'\nassert solution('12121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n3\n2 3\n''') == '2\\n3 2'\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n2 2\") == \"2\"\nassert solution(\"2 2\\n2 2\") == \"1\"\nassert solution(\"3 2 1 1\") == \"3\"\nassert solution(\"2 1 1\") == \"2\"\nassert solution(\"83 14\\n14 83\") == \"3\"\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n2 2\") == '1\\n2\\n2'\nassert solution(\"2 3\\n2 2\\n2 2\") == '3\\n1 2\\n2 1'\nassert solution(\"2 3\\n2 2\\n2 2\\n2 2\") == '3\\n3 2\\n2 1\\n2 3'\nassert solution(\"2 3\\n2 2\\n2 2\\n2 2\\n2 2\") == '3\\n3\\n3 2\\n2 2\\n2 4'\n\nassert solution(\"3\\n2 1 1\\n2 1 1\") == '3\\n1 1 2\\n2 2 1'\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n2 2\") == \"2\\n3 2\"\n\"\"\"\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n1 1\n''') == '1\\n1 1'\nassert solution('''2\n3 2\n''') == '1\\n2 2'\nassert solution('''3\n2 1 1\n''') == '3\\n1 1 2'\nassert solution('''2\n83 14\n''') == '2\\n14 83'\nassert solution('''3\n2 1 1\n''') == '3\\n1 1 2'\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2\n3\n2 1 1\"\"\") == \"2\\n1 1 2\"\nassert solution(\"\"\"3\n2 1 1\"\"\") == \"3\\n1 1 2\"\nassert solution(\"\"\"2\n2\n83 14\"\"\") == \"2\\n14 83\"\nassert solution(\"\"\"2\n3\n2 1 1\"\"\") == \"2\\n1 1 2\"\nassert solution(\"\"\"2\n3\n2 2\n\"\"\") == \"1\\n2 2\"\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == 2\nassert solution(\"2 2\") == 1\nassert solution(\"2 1 1\") == 3\nassert solution(\"3 2 1\") == 2\nassert solution(\"83 14\") == 2\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == '2', 'error 1'\nassert solution('2 2') == '1', 'error 2'\nassert solution('3 2 1') == '3', 'error 3'\nassert solution('2 1 1') == '2', 'error 4'\nprint('Test passed')\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"1 2 1 2 3\"\nassert solution(\"3 3\") == \"1 2 3\"\nassert solution(\"2 2\") == \"1 2\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"1 2 3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n2 2\") == \"2\\n2 2\"\nassert solution(\"3\\n2 1 1\") == \"3\\n1 1 2\"\nassert solution(\"2\\n2 2\") == \"1\\n2 2\""
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\n\nassert solution(\"992\") == \"496\"\nassert solution(\"234468\") == \"1188\"\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('992') == '496'\n\"\"\""
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('12') == ''\nassert solution('10') == ''\nassert solution('99') == ''\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('992') == '496'\n\"\"\"\n\nfrom math import log"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('992') == '496'\n\"\"\""
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 1\nassert solution(\"992\") == 496\n\"\"\""
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('992') == '496'\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('123') == '3'\nassert solution('10') == '1'\nassert solution('101') == '1'\nassert solution('1111') == '3'"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\n\"\"\"\n\nfrom math import log2"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 1\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6\\n10\\n99\\n\") == \"8\"\nassert solution(\"19 7\\n1000\\n9999\\n\") == \"6\"\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 9') == '8'\nassert solution('1 0') == '4'\nassert solution('17 27374') == '8'\nassert solution('1000 9999') == '6'\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6\") == \"8\"\nassert solution(\"19 7\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 6\\n10\\n99') == '8'\nassert solution('2 0\\n1\\n9') == '4'\nassert solution('19 7\\n1000\\n9999') == '6'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 6\\n10\\n99') == '8\\n'\nassert solution('2 0\\n1\\n9') == '4\\n'\nassert solution('19 7\\n1000\\n9999') == '6\\n'\n\"\"\"\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 6\\n10\\n99') == '8'\nassert solution('2 0\\n1\\n9') == '4'\nassert solution('19 7\\n1000\\n9999') == '6'\n\"\"\"\n\nm, d = map(int, input().split())\na = int(input())\nb = int(input())\n\nprint(sum((d * m * (b // m - b // m % 10) + b // m % 10 + b // m % 10 * 10) // 10 % 10 ** 9 % (10 ** 9 + 7) for b in range(a, b + 1)))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6\\n10\\n99\") == \"8\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6\") == \"8\"\nassert solution(\"19 7\") == \"6\"\nassert solution(\"1 9\") == \"4\"\n\n\n'''\n\n\nimport sys\n\nMOD = 10**9 + 7\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 6\\n10\\n99\") == \"8\"\nassert solution(\"2 0\\n1\\n9\") == \"4\"\nassert solution(\"19 7\\n1000\\n9999\") == \"6\"\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 6\\n10\\n99') == '8'\nassert solution('19 7\\n1000\\n9999') == '6'\nassert solution('2 0\\n1\\n9') == '4'\n\n-----2-----\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 3 1 4 2\") == 4\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 3 1 4 2\") == \"4\"\nassert solution(\"6 4\\n1 1 2 2 3 3\") == \"6\"\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 3 1 4 2') == '4'\nassert solution('6 4\\n1 1 2 2 3 3') == '6'\nassert solution('3 2\\n1 3\\n2 3') == '1'\n\"\"\""
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 3 1 4 2\") == \"4\"\nassert solution(\"6 4\\n1 1 2 2 3 3\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 2\n1 3 1 4 2\"\"\") == '4'\nassert solution(\"\"\"6 4\n1 1 2 2 3 3\"\"\") == '6'\n\n\"\"\"\nimport collections"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 3 1 4 2\") == \"4\"\nassert solution(\"6 4\\n1 1 2 2 3 3\") == \"6\"\nassert solution(\"6 4\\n1 2 1 2 3 3\") == \"5\"\nassert solution(\"6 4\\n1 1 2 2 3 3\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4\\n1 1 2 2 3 3\") == \"6\"\n\"\"\"\n\n\n\n\"\"\"\n\u041c\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u0430\u043b\u044c\u0448\u0435 \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4\\n1 1 2 2 3 3\") == \"6\"\nassert solution(\"5 2\\n1 3 1 4 2\") == \"4\"\nassert solution(\"6 4\\n1 2 2 3 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3 1 4 2\") == \"4\"\nassert solution(\"6 4\\n1 1 2 2 3 3\") == \"6\"\nassert solution(\"5 2\\n1 3 1 4 2\") == \"4\"\n\n\n\n-----\n5 2\n1 3 1 4 2\n\nn=5, m=2\n\n1 2 3 4 5\n\n1 2 3 4 5\n2 3 4 5 1\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n2 3 4 5 1\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2 3 4\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n4 5 1 2 3\n5 1 2"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'\n\n'''"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"125\") == \"3\"\nassert solution(\"43\") == \"5\"\nassert solution(\"1000000000\") == \"10000000\"\n\"\"\"\n\n\"\"\"\nTest Soln\n\"\"\"\n\nimport sys"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'\n\n\"\"\"\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'\nassert solution('1') == '1'\n\nassert solution('125') == '3'\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"125\") == \"3\"\nassert solution(\"43\") == \"5\"\nassert solution(\"1000000000\") == \"10000000\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'\n\"\"\"\nimport math"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == '6'\nassert solution(\"7 4\") == '328'\n\"\"\""
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"4 1\") == \"6\"\nassert solution(\"7 4\") == \"328\"\n\"\"\"\n\n\nfrom itertools import permutations\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '0'\nassert solution('3 2') == '4'\nassert solution('4 1') == '6'\nassert solution('7 4') == '328'\n\"\"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"4 1\") == \"6\"\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"4 1\") == \"6\"\nassert solution(\"7 4\") == \"328\"\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2') == '0\\n1'\nassert solution('2 1') == '0\\n0'\nassert solution('3 2') == '1\\n0\\n2'\nassert solution('4 1') == '0\\n1\\n1\\n2'\nassert solution('7 4') == '30\\n6\\n4\\n2'\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"4\"\nassert solution(\"4 1\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"0\\n\"\nassert solution(\"2 1\") == \"0\\n\"\nassert solution(\"1 0\") == \"1\\n\"\nassert solution(\"3 2\") == \"0\\n\"\nassert solution(\"4 1\") == \"6\\n\"\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"4 1\") == \"6\"\nassert solution(\"7 4\") == \"328\"\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2 0\n''') == '1'\nassert solution('''\n2 1\n''') == '0'\nassert solution('''\n3 2\n''') == '4'\nassert solution('''\n4 1\n''') == '6'\nassert solution('''\n7 4\n''') == '328'\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n4 3 4 1 6\\nRWOORWORROW\") == \"11\"\nassert solution(\"7 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW\") == \"-1\"\nassert solution(\"7 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWOW\") == \"28\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n4 3 4 1 6\\nRROWW\") == 11\nassert solution(\"5 2\\n10 20 14 20 11\\nRRRRR\") == -1\nassert solution(\"11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW\") == 28\n\"\"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n4 3 4 1 6\\nRROWW') == 11\nassert solution('5 2\\n10 20 14 20 11\\nRRRRR') == -1\n\n\"\"\"\n\nimport sys\nimport numpy\n\nn, k = [int(x) for x in sys.stdin.readline().split()]\nb = [int(x) for x in sys.stdin.readline().split()]\nc = sys.stdin.readline()\n\nn = len(b)\n\nb.sort()\nb.reverse()"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('WOO') == '1'\nassert solution('RRRR') == '-1'\nassert solution('WWWW') == '-1'\n\n--------------------------------------------------------------------------------"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 4 1 6\\nRRRRR\\n\") == 11\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n10 20 14 20 11\\nRRRRR\") == \"28\"\nassert solution(\"11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW\") == \"28\"\n\"\"\"\n\nimport sys\n\nn, k = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nc = input()\n\ndp = [[0 for i in range(3)] for j in range(n)]\n\nfor i in range(n):\n    dp[i][0] = b[i] + dp[i - 1][1] + dp[i - 1][2]\n    dp[i][1] = b[i] + dp[i - 1][0] + dp[i - 1][2]\n    dp[i][2] = b[i] + dp[i - 1][0] + dp[i - 1][1]\n\nmax_total = -1\nfor i in range(k + 1):\n    for j in range(i + 1, k + 1):\n        for k in range(i + j + 1, k + 1):\n            total = dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2] - dp[n - 1][0] - dp[n - 1][1] - dp[n - 1][2]\n            if i < c.count(\"W\") and j < c.count(\"O\") and k < c.count(\"R\"):\n                total = max(total, dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2])\n            if i < c.count(\"R\") and j < c.count(\"O\") and k < c.count(\"W\"):\n                total = max(total, dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2])\n            if i < c.count(\"O\") and j < c.count(\"W\") and k < c.count(\"R\"):\n                total = max(total, dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2])\n            if i < c.count(\"R\") and j < c.count(\"W\") and k < c.count(\"O\"):\n                total = max(total, dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2])\n            if i < c.count(\"W\") and j < c.count(\"R\") and k < c.count(\"O\"):\n                total = max(total, dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2])\n            if i < c.count(\"O\") and j < c.count(\"R\") and k < c.count(\"W\"):\n                total = max(total, dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2])\n            if i < c.count(\"R\") and j < c.count(\"O\") and k < c.count(\"W\"):\n                total = max(total, dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2])\n            if i < c.count(\"O\") and j < c.count(\"R\") and k < c.count(\"W\"):\n                total = max(total, dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2])\n            if i < c.count(\"W\") and j < c.count(\"O\") and k < c.count(\"R\"):\n                total = max(total, dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2])\n            if i < c.count(\"R\") and j < c.count(\"O\") and k < c.count(\"W\"):\n                total = max(total, dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2])\n            if i < c.count(\"O\") and j < c.count(\"W\") and k < c.count(\"R\"):\n                total = max(total, dp[n - 1][0] + dp[n - 1][1] + dp[n - 1][2])\n            max_total = max(max_total, total)"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5 3\n4 3 4 1 6\nRROWW\n\"\"\") == '11'\nassert solution(\n\"\"\"\n5 2\n10 20 14 20 11\nRRRRR\n\"\"\") == '-1'\nassert solution(\n\"\"\"\n11 5\n5 6 3 2 3 4 7 5 4 5 6\nRWOORWORROW\n\"\"\") == '28'\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n4 3 4 1 6\\nRROWW') == '11'\nassert solution('5 2\\n10 20 14 20 11\\nRRRRR') == '-1'\nassert solution('11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW') == '28'\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n4 3 4 1 6\\nRRRRR\") == \"11\"\nassert solution(\"5 2\\n10 20 14 20 11\\nRRRRR\") == \"-1\"\nassert solution(\"11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW\") == \"28\"\n\"\"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n4 3 4 1 6\\nRROWW') == '11'\nassert solution('5 2\\n10 20 14 20 11\\nRRRRR') == '-1'\nassert solution('11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW') == '28'\n\"\"\"\n\nimport itertools\nfrom itertools import combinations"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 4 2 4\") == \"YES\"\nassert solution(\"9 4 3 4\") == \"NO\"\nassert solution(\"9 4 3 4\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(9, 4) == \"YES\"\nassert solution(9, 3) == \"YES\"\nassert solution(9, 2) == \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 4\\n2\\n2 4') == 'YES'\nassert solution('9 4\\n3\\n1 2 4') == 'YES'\nassert solution('9 4\\n3\\n1 2 3') == 'NO'\n\"\"\"\n\nimport re"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 4\\n2\\n2 4') == \"YES\"\nassert solution('9 4\\n3\\n1 2 4') == \"YES\"\nassert solution('9 4\\n3\\n1 2 3') == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 4\") == \"YES\"\nassert solution(\"9 4\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\n\n\"\"\"\nfrom collections import defaultdict\nimport math\nfrom typing import List\n\nimport unittest\n\nfrom numpy import *\n\n\nclass TestMethods(unittest.TestCase):\n    def test_0(self):\n        stdin = \"9 4\"\n        expected = \"YES\"\n        result = solution(stdin)\n        self.assertEqual(expected, result)\n\n    def test_1(self):\n        stdin = \"9 4\"\n        expected = \"NO\"\n        result = solution(stdin)\n        self.assertEqual(expected, result)\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 4\\n2\\n2 4') == 'YES'\nassert solution('9 4\\n3\\n1 2 4') == 'YES'\nassert solution('9 4\\n3\\n1 2 3') == 'NO'\nassert solution('9 4\\n1\\n2 4') == 'NO'\nassert solution('9 4\\n1\\n1 2 4') == 'YES'\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 4') == 'YES'\nassert solution('9 4') == 'NO'\nassert solution('9 4') == 'NO'\n\"\"\""
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 4 2 1\") == \"YES\"\nassert solution(\"9 4 3 1\") == \"NO\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Tuple\n\nfrom math import gcd\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 4\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\nassert solution(\"9 4\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 4 2\") == \"YES\"\nassert solution(\"9 4 3\") == \"NO\"\nassert solution(\"9 4 1\") == \"YES\"\n\nassert solution(\"9 4 4\") == \"YES\"\nassert solution(\"9 4 5\") == \"NO\""
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"|+|=|||||\") == \"|||+|=||||\"\nassert solution(\"||||+||=||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\n\n\"\"\""
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"||||+||=||||||\"\nassert solution(\"||||+||=||||||\") == \"||||+||=||||||\"\nassert solution(\"||||+||=||||||\") == \"||||+||=||||||\"\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|||+|=||||||\") == \"|||+|=||||||\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"||||+||=||||||\"\n) == \"||||+||=||||||\"\nassert solution(\n    \"|||||||||||||||\"\n) == \"Impossible\"\nassert solution(\n    \"|||+|||=||||||\"\n) == \"Impossible\"\nassert solution(\n    \"||||||||||||||||\"\n) == \"Impossible\"\nassert solution(\n    \"|||||||||||||||||\"\n) == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('||||+||=||||||') == '||||+||=||||||'\nassert solution('||||||||||||') == 'Impossible'\nassert solution('||||||||||=||||||') == 'Impossible'\nassert solution('||||+||=||||||') == 'Impossible'\nassert solution('||||+||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"||+|=|||||\") == \"|||+|=||||\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"||||+||=||||||\") == \"||||+||=||||||\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"||||+||||||=||||||\") == \"||||+||||||=||||||\"\n\"\"\"\n\n\"\"\"\n<script.py>\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"|||||+||=||||||\") == \"|||||+||=||||||\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"||||||||||||+||||||\") == \"||||||||||||+||||||\"\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"||+|=|||||\") == \"|||+|=||||\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"||||+||=||||||\"\n\n\"\"\"\n\nfrom collections import Counter\n\nstdin = input()\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == 2\n'''"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n') == 2\n\"\"\"\n\nimport sys\n\nN, K = [int(i) for i in sys.stdin.readline().split(' ')]"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 2''') == 2\n\"\"\"\n\nfrom collections import Counter\nimport sys\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == 2\n\"\"\""
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == 2\n\"\"\""
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2') == '2'\n\"\"\""
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('nk') == 'nk'\n\n\"\"\""
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2') == 2\n\"\"\""
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3\\n1 -1\") == \"2\\n1 2\\nRL\"\nassert solution(\"2\\n3\\n1 0\") == \"2\\n1 2\\nRR\"\nassert solution(\"3\\n1\\n0 3\\n2 -1\") == \"3\\n1 1\\nRR\"\nassert solution(\"3\\n3\\n1 1\\n2 -1\") == \"3\\n1 1\\nRR\"\nassert solution(\"1\\n3\\n-1 0\") == \"1\\n1 2\\nRU\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == '2\\n1 2\\nRL'\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\"\nassert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRR\"\nassert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRR\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\\nUU\"\n\n\"\"\""
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\\nUU\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\"\nassert solution(\"5\\n-1 0\\n1 2\\n0 -1\\n0 3\\n0 -1\") == \"2\\n1 1\\nDR\\nUU\"\nassert solution(\"4\\n-1 0\\n0 2\\n0 -1\\n1 3\\n\") == \"2\\n1 2\\nDR\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n-1 0\n0 3\n2 -1''') == '2\\n1 2\\nRL\\nUU'\n\n'''\n3\n-1 0\n0 3\n2 -1\n'''\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\\nUU\"\nassert solution(\"2\\n-1 0\\n0 3\") == \"1\\n2\\nDR\"\nassert solution(\"1\\n-1 0\") == \"1\\n1\\nDR\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\"\nassert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\"\n\"\"\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n-1 0\\n0 3\\n2 -1') == '2\\n1 2\\nRL\\nUU\\nDR'\n\n\"\"\"\n\nfrom typing import Dict, List\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aogogob') == 'a***b'\nassert solution('ogogmgogogogo') == '***gmg***'\nassert solution('ogogmgogogogo') == '***gmg***'\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aogogob') == 'a***b'\nassert solution('ogogmgogogogo') == '***gmg***'\nassert solution('ogoogoogo') == '*********'\nassert solution('a') == 'a'\nassert solution('gogogoog') == 'gogogog'\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\naogogob\\n\") == \"a***b\"\nassert solution(\"13\\nogogmgogogogo\\n\") == \"***gmg***\"\nassert solution(\"9\\nogoogoogo\\n\") == \"*********\"\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aogogob\") == \"a***b\"\nassert solution(\"ogogmgogogogo\") == \"***gmg***\"\nassert solution(\"ogoogoogo\") == \"*********\"\n\"\"\""
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aogogob\") == \"a***b\"\nassert solution(\"ogogmgogogogo\") == \"***gmg***\"\nassert solution(\"ogogmgogogogo\") == \"***gmg***\"\n\"\"\"\nimport re"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\naogogob\") == 'a***b'\nassert solution(\"13\\nogogmgogogogo\") == '***gmg***'\nassert solution(\"9\\nogoogoogo\") == '*********'\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ogogmgogogogo\") == \"***gmg***\"\nassert solution(\"aogogob\") == \"a***b\""
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aogogob\") == \"a***b\"\nassert solution(\"ogogmgogogogo\") == \"***gmg***\"\nassert solution(\"ogoogoogo\") == \"*********\"\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aogogob\") == \"a***b\"\nassert solution(\"ogogmgogogogo\") == \"***gmg***\"\nassert solution(\"ogogmgogogogo\") == \"***gmg***\"\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ogoogbo') == '***gmb***'\n\nassert solution('ogogmgogogogo') == '***gmg***'\n\nassert solution('ogoogbo') == '***gmb***'\n\nassert solution('aogogbo') == 'a***b'\n\nassert solution('aogogoob') == 'a***b'"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('18 65 12 42 1') == '30369'\nassert solution('10 4') == '45'\nassert solution('20190929 1605') == '363165664'\nassert solution('947 987654321987654321') == '593574252'"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20190929 1605') == '363165664'\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20190929 1605\") == \"363165664\"\nassert solution(\"947 987654321987654321\") == \"593574252\""
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20190929 1605\") == \"363165664\"\nassert solution(\"947 987654321987654321\") == \"593574252\"\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20190929 1605') == '363165664'\nassert solution('947 987654321987654321') == '593574252'\n\n\"\"\"\n\nx, n = map(int, input().split())\nprime = {x}\nfor p in range(2, int(x ** 0.5) + 1):\n    if x % p == 0:\n        prime.add(p)\n        prime.add(x // p)\n\nans = 1\nfor i in prime:\n    ans *= pow(i, n, 10 ** 9 + 7)\nprint(ans % (10 ** 9 + 7))\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == 2\nassert solution(\"10 2\") == 2\nassert solution(\"10 987654321987654321 10\") == 363165664\nassert solution(\"20190929 1605\") == 593574252\nassert solution(\"947 987654321987654321\") == 593574252\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"20190929 1605\") == \"363165664\"\nassert solution(\"947 987654321987654321\") == \"593574252\""
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\") == \"2\"\n\n\"\"\"\n\nimport math\n\n\"\"\"\nCalculate f(x, y) = {p^k} for p in prime(x)\n\"\"\"\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20190929 1605\") == \"363165664\"\nassert solution(\"947 987654321987654321\") == \"593574252\"\n\nprint(solution(\"20190929 1605\"))\nprint(solution(\"947 987654321987654321\"))\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"947 987654321987654321\") == \"593574252\"\nassert solution(\"20190929 1605\") == \"363165664\"\n\"\"\""
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 8') == '3'\nassert solution('1 2 -18') == '0'\nassert solution('2 2 -1') == '4'\n\"\"\""
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 8\") == \"3\"\nassert solution(\"1 2 -18\") == \"0\"\nassert solution(\"2 2 -1\") == \"4\"\n\"\"\"\n\nimport sys\n\na, b, c = list(map(int, sys.stdin.readline().split()))\n\ns = lambda x: sum(int(i) for i in str(x))\n\ncount = 0\n\nfor x in range(1, 10**9):\n    if (b*s(x)**a + c) < 0:\n        break\n    elif b*s(x)**a + c == 0:\n        count += 1\n        print(x)\n    else:\n        count += 1\n        print(x, end=\" \")\n\nprint(count)\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 8\") == \"3\"\nassert solution(\"1 2 -18\") == \"0\"\nassert solution(\"2 2 -1\") == \"4\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 8') == '3'\nassert solution('1 2 -18') == '0'\nassert solution('2 2 -1') == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 8\") == '3'\nassert solution(\"1 2 -18\") == '0'\nassert solution(\"2 2 -1\") == '4'"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 8') == '3'\nassert solution('1 2 -18') == '0'\nassert solution('2 2 -1') == '4'\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 8\") == \"3\"\nassert solution(\"1 2 -18\") == \"0\"\nassert solution(\"2 2 -1\") == \"4\"\n\"\"\""
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 8\") == \"3\"\nassert solution(\"1 2 -18\") == \"0\"\nassert solution(\"2 2 -1\") == \"4\"\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 -18\") == '0'\nassert solution(\"2 2 -1\") == '4'\nassert solution(\"3 2 8\") == '3'\nassert solution(\"4 2 -1\") == '0'\nassert solution(\"4 2 -1\") == '4'\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 8\") == \"3\"\nassert solution(\"1 2 -18\") == \"0\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4') == 'NO'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\") == \"NO\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4') == 'NO'\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == 'YES'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\") == \"NO\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\nprint('All tests passed.')\n\"\"\""
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4') == \"NO\"\nassert solution('5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3') == \"YES\"\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5, 3, 5, 2, 5, 2, 6, 2, 6, 4, 4, 4, 1, 1, 1, 6, 3, 6, 3) == 'NO'\nassert solution(2, 5, 4, 6, 1, 3, 6, 2, 5, 5, 1, 2, 3, 1, 1, 2, 4, 6, 6, 4) == 'YES'\n\"\"\""
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\") == \"NO\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\") == \"YES\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\") == \"NO\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\n''') == 'NO'\nassert solution('''\n5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\n''') == 'YES'\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"24\"\nassert solution(\"329 19913 19900\") == \"8\"\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"24\"\nassert solution(\"101 6800 6500\") == \"0\"\nassert solution(\"329 19913 19900\") == \"8\"\n\"\"\""
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('239 10880 9889') == '0'\nassert solution('26 7258 6123') == '2'\nassert solution('493 8000 8000') == '24'\nassert solution('101 6800 6500') == '0'\nassert solution('329 19913 19900') == '8'\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('239 10880 9889') == '0'\nassert solution('26 7258 6123') == '2'\nassert solution('493 8000 8000') == '24'\nassert solution('101 6800 6500') == '0'\nassert solution('329 19913 19900') == '8'"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('239 10880 9889') == '0'\nassert solution('26 7258 6123') == '2'\nassert solution('493 8000 8000') == '24'\nassert solution('101 6800 6500') == '0'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"24\"\nassert solution(\"101 6800 6500\") == \"0\"\nassert solution(\"329 19913 19900\") == \"8\"\n\n\n\n-----Test 2-----\n\nInput\n873 20568 49563\n\nOutput\n2\n\n\n-----Test 3-----\n\nInput\n642 18190 90412\n\nOutput\n9\n\n\n-----Test 4-----\n\nInput\n501 0005 31997\n\nOutput\n0\n\n\n-----Test 5-----\n\nInput\n254 793 24599\n\nOutput\n8\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"24\"\nassert solution(\"101 6800 6500\") == \"0\"\nassert solution(\"329 19913 19900\") == \"8\"\n\n\n-----Code-----\n\n\"\"\"\nimport sys\n\nPYTHON_VERSION = sys.version_info[0]"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('239 10880 9889') == '0'\nassert solution('26 7258 6123') == '2'\nassert solution('493 8000 8000') == '24'\nassert solution('101 6800 6500') == '0'\nassert solution('329 19913 19900') == '8'\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"239 10880 9889\") == '0'\nassert solution(\"26 7258 6123\") == '2'\nassert solution(\"493 8000 8000\") == '24'\nassert solution(\"101 6800 6500\") == '0'\nassert solution(\"329 19913 19900\") == '8'\n\n\"\"\"\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n5 5 4') == '1\\n0'\nassert solution('5 5 4') == '1\\n2'\nassert solution('1\\n5 10 5') == '1\\n2'\nassert solution('5 10 5') == '1\\n3'\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2\\n3\\n1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2\\n3\\n1\\n\") == '3'\nassert solution(\"1\\n2\\n3\\n5\\n\") == '0'\n\"\"\"\n\n\"\"\"\nn = int(input())\na = int(input())\nb = int(input())\nc = int(input())"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2\\n3\\n1') == '3'\nassert solution('1\\n2\\n3\\n5') == '0'\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2\\n3\\n1\") == \"3\"\nassert solution(\"1\\n2\\n3\\n5\") == \"0\"\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2\\n3\\n1\\n') == '3'\nassert solution('1\\n2\\n3\\n5\\n') == '0'\nassert solution('5\\n3\\n2\\n4\\n1\\n') == '1'\nassert solution('1\\n1\\n1\\n1\\n') == '0'\nassert solution('1\\n2\\n1\\n1\\n') == '1'\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\") == '0'\n\"\"\""
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2\\n3\\n1') == '3'\nassert solution('1\\n2\\n3\\n5') == '0'\nassert solution('1\\n1\\n2\\n2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\\n3\\n1\") == \"3\"\nassert solution(\"1\\n2\\n3\\n5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2 1') == '3'\nassert solution('1 2 3 4') == '0'\n\"\"\"\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2\\n3\\n1') == '3'\nassert solution('1\\n2\\n3\\n5') == '0'\n\"\"\"\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 1 4\") == \"6\"\nassert solution(\"30 20 10\") == \"20\"\nassert solution(\"30 20 10\") == \"20\"\n\"\"\""
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 1 4\") == \"6\"\nassert solution(\"30 20 10\") == \"20\"\nassert solution(\"1 1 1\") == \"0\"\n\nimport codewars_test as test\n\ntest.assert_equals(solution(\"7 1 4\"), \"6\")\ntest.assert_equals(solution(\"30 20 10\"), \"20\")\ntest."
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '7 1 4'\n) == '6'\n\nassert solution(\n    '30 20 10'\n) == '20'\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 1 4\") == \"6\"\nassert solution(\"30 20 10\") == \"20\""
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 1 4\\n') == '6'\nassert solution('7 1 4\\n') == '6'\nassert solution('30 20 10\\n') == '20'\nassert solution('30 20 10\\n7 1 4') == '6'\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 1 4') == '6'\nassert solution('30 20 10') == '20'\n\n\"\"\""
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 1 4') == 6\n\n\"\"\"\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 1 4') == '3'\nassert solution('30 20 10') == '20'\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 1 4\") == \"6\"\nassert solution(\"30 20 10\") == \"20\""
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 1 4') == 6\nassert solution('30 20 10') == 20"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 3 7\") == '1'\nassert solution(\"2 228\\n1 1\") == '0'\nassert solution(\"3 7\\n1 2 3\") == '-1'\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 3 7') == '1'\nassert solution('2 228\\n1 1') == '0'\nassert solution('3 7\\n1 2 3') == '-1'\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == 1\nassert solution(\"2 228\") == 0\nassert solution(\"3 7\") == -1\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == 1\nassert solution(\"2 228\") == 0\nassert solution(\"3 7\") == -1\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 228\\n1 1\\n\") == 0\nassert solution(\"3 7\\n1 2 3\\n\") == -1\n\"\"\""
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2 3 7') == '1'\nassert solution('2 228\\n1 1') == '0'\nassert solution('3 7\\n1 2 3') == '-1'\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 7\") == \"1\"\nassert solution(\"2 228\\n1 1\") == \"0\"\nassert solution(\"3 7\\n1 2 3\") == \"-1\"\n\n\nimport sys; x = int(sys.stdin.readline())\nfor _ in range(x):\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    if a.count(a[0]) == len(a):\n        print(-1)\n    else:\n        print(n - max([i for i in range(len(a)) if a[i] == a[0] and a[0]!= a[i]]) - 1)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3\n1 2 3 7\n''') == '1'\nassert solution('''2 228\n1 1\n''') == '0'\nassert solution('''3 7\n1 2 3\n''') == '-1'\nassert solution('''3 7\n1 1 3\n''') == '-1'\nassert solution('''4 3\n1 2 3 7\n''') == '1'\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n1 2 3 7\n''') == 1\nassert solution('''\n2 228\n1 1\n''') == 0\nassert solution('''\n3 7\n1 2 3\n''') == -1"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\nassert solution('0 1\\n1 2') == '0'\nassert solution('1 1\\n2 2') == '-1'\nassert solution('1 2 3 4\\n3 3 2 2 1') == '1'\nassert solution('1 1\\n2 2') == '0'\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\") == \"YES\"\nassert solution(\"3 5\") == \"NO\"\nassert solution(\"7 7\") == \"NO\"\nassert solution(\"5 10\") == \"NO\"\nassert solution(\"5 6\") == \"YES\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n......\\n..*...\\n.****.\\n..*...\\n..*...') == 'YES'\nassert solution('3 5\\n.*...\\n***.\\n.*...') == 'NO'\nassert solution('7 7\\n.......\\n...*...\\n..****.\\n...*...\\n...*...\\n.......\\n.*.....') == 'NO'\nassert solution('5 10\\n..........\\n..*.......\\n.*.******\\n..*.......\\n..........\\n') == 'NO'\nassert solution('3 7\\n.*...*.\\n***.***\\n.*...*.\\n') == 'NO'\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('...\\n.***\\n...') == 'YES'\nassert solution('***\\n**\\n**') == 'YES'\nassert solution('..*..\\n***\\n.*..*\\n..**.') == 'NO'\nassert solution('***\\n.**\\n.*.') == 'YES'\nassert solution('*.*.*\\n**\\n.*.') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"....\\n\" + \"..*\\n\" + \"..*\\n\" + \"..*\\n\" + \"....\") == \"NO\"\nassert solution(\"....\\n\" + \"..*\\n\" + \"*.*\\n\" + \"..*\\n\" + \"....\") == \"NO\"\nassert solution(\"....\\n\" + \"*.*\\n\" + \"..*\\n\" + \"..*\\n\" + \"....\") == \"NO\"\nassert solution(\"....\\n\" + \"*.*\\n\" + \".*.*\\n\" + \"..*\\n\" + \"....\") == \"YES\"\nassert solution(\"....\\n\" + \"*.*\\n\" + \"..*\\n\" + \"..*\\n\" + \"....\") == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n..*...\\n.****.\\n..*...\\n..*...\\n\") == \"YES\"\nassert solution(\"3 5\\n..*..\\n****.\\n.*...\\n\") == \"NO\"\nassert solution(\"7 7\\n.......\\n...*...\\n..****.\\n...*...\\n...*...\\n.......\\n.*.....\\n\") == \"NO\"\nassert solution(\"5 10\\n..*..\\n..**..\\n******\\n..**..\\n..*..\\n\") == \"NO\"\nassert solution(\"3 7\\n.*...*.\\n***.***\\n.*...*.\\n\") == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n.*...\\n***.\\n.*...\") == \"NO\"\n\nassert solution(\"5 6\\n......\\n..*...\\n.****.\\n..*...\\n..*...\") == \"YES\"\n\nassert solution(\"7 7\\n.......\\n...*...\\n..****.\\n...*...\\n...*...\\n.......\\n.*.....\") == \"NO\"\n\nassert solution(\"5 10\\n.........\\n..*.......\\n.*.******.\\n..*.......\\n.........\\n\") == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.*.*') == 'YES'\nassert solution('**.') == 'YES'\nassert solution('***') == 'YES'\nassert solution('*.*') == 'NO'\nassert solution('**.*') == 'YES'\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n..*..\\n******\\n..*..\\n..*..\") == \"YES\"\nassert solution(\"5 6\\n....\\n....\\n******\\n....\\n....\") == \"NO\"\nassert solution(\"3 5\\n.*...\\n***.\\n.*...\\n\") == \"NO\"\nassert solution(\"7 7\\n.....\\n.*...\\n****.\\n.*...\\n.*...\\n***..\\n*.*..\") == \"NO\"\nassert solution(\"5 10\\n....\\n...*\\n....\\n....\\n.*..\\n.*..\") == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n.**.\\n.**.\\n.**.\\n\") == \"NO\"\nassert solution(\"3 5\\n.**.\\n.*.\\n.**.\\n\") == \"YES\"\nassert solution(\"3 7\\n.*...\\n.*...\\n******\\n.*...\\n.*...\\n\") == \"NO\"\nassert solution(\"3 7\\n.*...\\n*.*...\\n.*...\\n\") == \"NO\"\nassert solution(\"3 7\\n.*...\\n*.*...\\n*.*...\\n\") == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n......\\n..*...\\n.****.\\n..*...\\n..*...') == 'YES'\nassert solution('3 5\\n..*..\\n****.\\n.*...') == 'NO'\nassert solution('7 7\\n.......\\n...*...\\n..****.\\n...*...\\n...*...\\n.......\\n.*.....') == 'NO'\nassert solution('5 10\\n..........\\n..*.......\\n.*.******.\\n..*.......\\n..........\\n') == 'NO'\nassert solution('3 7\\n.*...*.\\n***.***\\n.*...*.') == 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2') == 'YES'\n\nassert solution('3 3 3') == 'NO'\n\nassert solution('1 0 1') == 'YES'\nassert solution('1 1 1') == 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 4\") == \"YES\"\nassert solution(\"4 1 2\") == \"NO\"\nassert solution(\"1 3 3\") == \"YES\"\nassert solution(\"2 2 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2') == 'YES\\n001\\n001\\n110'\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == 'YES\\n001\\n001\\n110'\nassert solution('3 3 3') == 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"YES\\n010\\n110\\n\"\nassert solution(\"3 1 2\") == \"NO\\n010\\n110\\n\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == 'YES\\n001\\n001\\n110'\nassert solution('3 3 3') == 'NO'"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"YES\\n001\\n001\\n110\"\n\"\"\"\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2') == 'YES\\n001\\n001\\n110'\nassert solution('3 3 3') == 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"4 3 2\") == \"YES\"\nassert solution(\"5 3 2\") == \"YES\"\nassert solution(\"5 4 2\") == \"YES\"\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 10 7 2 1') == 2\n\"\"\"\n\nc, d, n, m, k = list(map(int, stdin.split()))"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 10\\n7 2\\n1\\n') == '2'\n\"\"\"\n\nimport sys\n\nc, d, n, m = map(int, sys.stdin.readline().split())\nk = int(sys.stdin.readline())\n\nr = c * m - k\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1\\n\") == \"2\"\nassert solution(\"7 2\\n2\\n\") == \"0\"\nassert solution(\"7 2\\n1\\n\") == \"2\"\nassert solution(\"7 2\\n2\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3 2\n7 2\n1\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"2 10\\n7 2\\n1\"\n) == \"2\"\n\nassert solution(\n\"2 10\\n7 2\\n3\"\n) == \"0\"\n\nassert solution(\n\"5 10\\n7 5\\n3\"\n) == \"2\"\n\nassert solution(\n\"3 10\\n5 2\\n3\"\n) == \"1\"\n\nassert solution(\n\"3 10\\n7 2\\n2\"\n) == \"1\""
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 10 2 1\\n7 2\\n1') == '2'\n\"\"\"\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 10\\n7 2\\n1\") == \"2\""
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1\") == 0\n\"\"\""
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 10\n7 2\n1''') == '2'\n\nassert solution('''2 2\n2 1\n2''') == '0'\n\nassert solution('''1 10\n7 2\n3''') == '3'\n\nassert solution('''1 10\n7 2\n3\n2 1\n4\n''') == '0'\n\nassert solution('''1 10\n7 2\n3\n2 1\n4\n''') == '3'"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 10\\n7 2\\n1\\n') == '2'\nassert solution('1 10\\n7 2\\n3\\n') == '2'\nassert solution('1 10\\n7 2\\n5\\n') == '2'\nassert solution('1 10\\n7 2\\n10\\n') == '1'\nassert solution('1 10\\n7 2\\n6\\n') == '1'\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"YXWVUTGHIJKLM\"\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABCDEFGHIJKLM\") == \"YXWVUTGHIJKLM\"\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\n\n'''"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Impossible'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'YXWVUTGHIJKLM'\nassert solution('BUVTYZFQSNRIWOXXGJLKACPEMDH') == 'Impossible'\n\"\"\"\n\nimport unittest\nimport string\n\nS = string.ascii_uppercase"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"YXWVUTGHIJKLM\"\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSGTUVWXYZ\") == \"YXWVUTGHIJKLM\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSGTUVWXY\") == \"ZABCDEFSRQPON\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") in ['YXWVUTGHIJKLM', 'ZABCDEFSRQPON']\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == 'Impossible'\n\"\"\"\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") in (\n    \"YXWVUTGHIJKLM\",\n    \"ZABCDEFSRQPON\",\n)\n\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"YXWVUTGHIJKLM\"\n\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"YXWVUTGHIJKLM\"\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSGTUVWXYZ\") == \"YXWVUTGHIJKLM\"\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\") == '>'\nassert solution(\"10 3\") == '<'\nassert solution(\"6 6\") == '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\") == \"<\"\nassert solution(\"6 6\") == \"=\"\nassert solution(\"5 8\") == \">\"\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\") == '>'\nassert solution(\"10 3\") == '<'\nassert solution(\"6 6\") == '='\n\n\"\"\""
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 8') == '>'\nassert solution('10 3') == '<'\nassert solution('6 6') == '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5, 8) == '>'\nassert solution(10, 3) == '<'\nassert solution(6, 6) == '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 8') == '<'\nassert solution('10 3') == '<'\nassert solution('6 6') == '='"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\") == '>'\nassert solution(\"10 3\") == '<'\nassert solution(\"6 6\") == '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\") == \">\"\nassert solution(\"10 3\") == \"<\"\nassert solution(\"6 6\") == \"=\"\nassert solution(\"5 5\") == \"=\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">\") == \">\"\nassert solution(\"<\") == \"<\"\nassert solution(\"=\") == \"=\"\n\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == 3\nassert solution('1 2') == 5\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"5\"\n\"\"\"\n\nimport math\n\nr, h = map(int, input().split())\n\nn_balloons = math.ceil((r**2 + r*h)/4)\nprint(n_balloons)"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"2 1\") == \"2\"\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '3'\nassert solution('1 2') == '5'\nassert solution('2 1') == '2'\nassert solution('3 1') == '4'\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '3'\nassert solution('1 2') == '5'\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2,1) == 2\n\nassert solution(1,1) == 3\n\nassert solution(1,2) == 5\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == '3'\n\"\"\"\n\nr, h = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n\nimport math\n\nmax_b = math.floor(r / 2)\n\nprint(2 * math.floor(max_b / h) + 1)\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"5\"\n\"\"\"\n\nr, h = map(int, stdin.readline().split())\nprint((r**2 + r)//2 + r + (h - r)//2)\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == 3\nassert solution('1 2') == 5\nassert solution('2 1') == 2\nassert solution('2 2') == 1\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3 7 3 20') == '26'\nassert solution('7 9 3 1 8') == '28'\nassert solution('10 10 10 10 10') == '20'\n\nprint('Success')\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3 7 3 20') == '26'\nassert solution('7 9 3 1 8') == '28'\nassert solution('10 10 10 10 10') == '20'\n\n\"\"\"\n\nfrom sys import stdin\n\ns = stdin.readlines()\n\na,b,c,d,e = map(int, s[0].split())\n\nprint(max([a,b,c,d,e])-min([a,b,c,d,e]))"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\nassert solution(\"1 1 1 1 1\") == \"0\"\n\nfrom util import main\nmain(solution)\n\n\"\"\"\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3 7 3 20') == '26'\nassert solution('10 10 10 10') == '20'\nassert solution('7 9 3 1 8') == '28'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\nassert solution(\"9 7 7 2 5\") == \"18\"\nassert solution(\"1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\""
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(10) == 20\nassert solution(10 10 10 10 10) == 20\n\n\"\"\"\nfrom typing import List\nimport collections"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\nassert solution(\"6 6 6 6 6\") == \"18\"\nassert solution(\"1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10\\n1 7 12\\n') == '7'\nassert solution('2 0\\n11 -10\\n') == '10'\nassert solution('5 0\\n0 0 1000 0 0\\n') == '0'\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10\\n1 7 12\\n') == '7'\nassert solution('2 0\\n11 -10\\n') == '10'\n\n\"\"\""
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10\\n11 -10') == '10'\nassert solution('2 0\\n11 -10') == '0'\nassert solution('5 0\\n0 0 1000 0 0') == '0'\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10\\n5 7\\n\") == \"7\\n\"\nassert solution(\"5 0\\n0 0 1000 0 0\\n\") == \"0\\n\"\nassert solution(\"5 0\\n0 0 0 0 1000\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10\") == \"10\"\nassert solution(\"5 0\") == \"0\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10\\n1 7 12') == '7'\nassert solution('2 0\\n11 -10') == '10'\nassert solution('5 0\\n0 0 1000 0 0') == '0'\nassert solution('5 0\\n0 0 1000 0 0') == '0'\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10\\n1 7 12\\n') == '7'\nassert solution('2 0\\n11 -10\\n') == '10'\nassert solution('5 0\\n0 0 1000 0 0\\n') == '0'\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10\\n1 7 12\\n') == 7\nassert solution('2 0\\n11 -10\\n') == 10\nassert solution('5 0\\n0 0 1000 0 0\\n') == 0\n\n\"\"\"\n\nimport sys\nimport collections\n\nx1, x2 = [int(n) for n in sys.stdin.readline().strip().split()]\n\ncheckpoints = sorted([int(n) for n in sys.stdin.readline().strip().split()])"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10\\n1 7 12\\n') == '7'\nassert solution('2 0\\n11 -10\\n') == '10'\nassert solution('5 0\\n0 0 1000 0 0\\n') == '0'\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10\") == \"10\"\nassert solution(\"3 10\") == \"7\"\nassert solution(\"5 0\") == \"0\"\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('110') == '10'\nassert solution('4') == '-1'\nassert solution('2') == '1'"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"-1\"\n\n\"\"\"\n\nimport math\nimport sys\nimport unittest\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"1\"\nassert solution(\"2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"-1\"\n\"\"\""
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('110') == '10'\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"-1\"\n\"\"\""
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"-1\"\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('110') == '10'\nassert solution('4') == '-1'\n\"\"\""
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n\"\"\"\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"05:44\") == \"00:06\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"00:06\") == \"00:06\"\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('05:50') == '00:06'\nassert solution('05:44') == '00:06'\nassert solution('00:00') == '23:59'\nassert solution('01:00') == '23:59'\nassert solution('00:01') == '00:01'"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"00:01\") == \"00:01\"\n\"\"\"\n\nimport time\nimport datetime\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"05:44\") == \"00:06\"\nassert solution(\"00:00\") == \"23:59\"\nassert solution(\"00:01\") == \"00:01\"\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"05:44\") == \"00:06\"\nassert solution(\"00:00\") == \"23:59\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"00:01\")!= \"23:59\"\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"05:44\") == \"00:06\"\nassert solution(\"00:00\") == \"23:59\"\nassert solution(\"00:01\") == \"23:59\"\nassert solution(\"00:02\") == \"23:59\"\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"05:44\") == \"00:06\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"00:01\") == \"23:01\"\n\"\"\"\n\nimport datetime\n\ns = input()\nt = input()\n\ns = datetime.datetime.strptime(s, '%H:%M')\nt = datetime.datetime.strptime(t, '%H:%M')\n\nx = t - s\n\nx = x.total_seconds()\nx = x/3600\n\nx = round(x)\n\nprint(str(x).split(\".\")[0])\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"05:44\") == \"00:06\"\nassert solution(\"00:01\") == \"23:00\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"23:59\") == \"23:59\"\n\n\"\"\"\n\n\nimport datetime"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('05:50') == '00:06'\nassert solution('00:00') == '23:00'\nassert solution('00:01') == '00:01'\nassert solution('00:01') == '00:01'\n\nassert solution('05:50') == '00:06'\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"00:01\") == \"00:01\"\n\"\"\""
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 7 4\") == \"2\"\nassert solution(\"5\\n1 3 7 4 3\") == \"1\"\nassert solution(\"8\\n1 3 7 4 3 5 6 4\") == \"3\"\nassert solution(\"6\\n3 1 4 1 6 4\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''5\n6 1 6 6 0'''\n) == '2'\nassert solution(\n'''5\n0 1 0 1 0'''\n) == '1'\nassert solution(\n'''5\n0 0 0 0 0'''\n) == '1'\nassert solution(\n'''5\n1 1 1 1 1'''\n) == '0'\nassert solution(\n'''5\n0 0 0 0 0'''\n) == '1'"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n6 1 6 6 0') == '2'\nprint(solution('5\\n6 1 6 6 0'))\n\n\"\"\""
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n6 1 6 6 0\") == 2\n\"\"\"\n\n\"\"\"\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nnn, \u0430 \u0437\u0430\u0442\u0435\u043c nnn \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432\u0441\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0440\u0430\u0442\u043d\u044b 3.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nnn, \u0430 \u0437\u0430\u0442\u0435\u043c nnn \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input:\n\n5\n3\n1\n6\n9\n12\n\nSample Output:\n\n1\n3\n6\n\"\"\"\n\n\"\"\"\na = int(input())\nb = input().split()\nfor i in b:\n    if int(i) % 3 == 0:\n        print(i)\n\"\"\"\n\n\n\n\"\"\"\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nnn. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e nnn, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nnn.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u0430 nnn \u0438 nnn-1 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\nSample Input:\n\n5\n\nSample Output:\n\n5 4\n4 3\n\"\"\"\n\n\"\"\"\na = int(input())\nb = str(a)\nprint(b, a-1)\n\"\"\"\n\n\n\n\n\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0432\u0445\u043e\u0434 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0433\u0440 \u0444\u0443\u0442\u0431\u043e\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043c\u0430\u0442\u0447\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 \u0441\u0432\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0447\u0435\u0439.\n\n\u0417\u0430 \u043f\u043e\u0431\u0435\u0434\u0443 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u043d\u0430\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f 3 \u043e\u0447\u043a\u0430, \u0437\u0430 \u043f\u043e\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u2014 0, \u0437\u0430 \u043d\u0438\u0447\u044c\u044e \u2014 1.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439:\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0445 \u0438\u0433\u0440.\n\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0438\u0434\u0435\u0442 nn \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0433\u0440\u044b \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435:\n\u041f\u0435\u0440\u0432\u0430\u044f_\u043a\u043e\u043c\u0430\u043d\u0434\u0430;\u0417\u0430\u0431\u0438\u0442\u043e_\u043f\u0435\u0440\u0432\u043e\u0439_\u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439;\u0412\u0442\u043e\u0440\u0430\u044f_\u043a\u043e\u043c\u0430\u043d\u0434\u0430;\u0417\u0430\u0431\u0438\u0442\u043e_\u0432\u0442\u043e\u0440\u043e\u0439_\u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0444\u043e\u0440\u043c\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\u041a\u043e\u043c\u0430\u043d\u0434\u0430:\u0412\u0441\u0435\u0433\u043e_\u0438\u0433\u0440 \u041f\u043e\u0431\u0435\u0434 \u041d\u0438\u0447\u044c\u0438\u0445 \u041f\u043e\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0412\u0441\u0435\u0433\u043e_\u043e\u0447\u043a\u043e\u0432\n\n\u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u043d\u0438\u0436\u0435.\n\n\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0439.\nSample Input:\n\n3\n\u0421\u043f\u0430\u0440\u0442\u0430\u043a;9;\u0417\u0435\u043d\u0438\u0442;10\n\u041b\u043e\u043a\u043e\u043c\u043e\u0442\u0438\u0432;12;\u0417\u0435\u043d\u0438\u0442;3\n\u0421\u043f\u0430\u0440\u0442\u0430\u043a;8;\u041b\u043e\u043a\u043e\u043c\u043e\u0442\u0438\u0432;15\n\nSample Output:\n\n\u0421"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n6 1 6 6 0\") == 2\n\"\"\"\n\nimport sys\nfrom typing import List, Set, Tuple\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 1 1 1 1') == 1\n\"\"\"\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n6 1 6 6 0\") == '2'\n\"\"\"\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n1 1') == '1'\nassert solution('2\\n1 1\\n3') == '2'\nassert solution('3\\n2 1 3') == '2'\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n6 1 6 6 0\") == 2\n\"\"\""
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 1 6 6 0\") == 2\n\nassert solution(\"3\\n10 10 9 10\") == 2\n\nassert solution(\"4\\n1 1 1 1\") == 1\n\nassert solution(\"1\\n2\") == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 0') == '3'\nassert solution('3 2 1') == '4'\n\"\"\""
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 0') == '3'\nassert solution('3 2 1') == '4'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 0') == '3'\nassert solution('3 2 1') == '4'\n\n\n\n\"\"\"\n\nn, m, k = [int(x) for x in input().split(' ')]\n\nways = 0\nfor i in range(1, n + 1):\n    if i % 2 == k % 2:\n        ways += 1\nprint(ways % 998244353)"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 0\") == \"3\"\nassert solution(\"3 2 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2 1''') == '4'\nassert solution('''3 2 0''') == '3'\n'''"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 1') == 4\nassert solution('3 3 0') == 3\n\"\"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 0\") == \"3\"\nassert solution(\"3 2 1\") == \"4\"\nassert solution(\"4 5 0\") == \"20\"\n\n\"\"\"\n\nimport itertools\nimport math\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2\") == \"8\"\nassert solution(\"3 2 1\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 0') == '3'\nassert solution('3 2 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 0\") == \"3\"\nassert solution(\"3 2 1\") == \"4\"\n\"\"\"\n\nn, m, k = map(int, input().split())\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('114114') == \"YES\"\nassert solution('1111') == \"YES\"\nassert solution('441231') == \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"114114\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"441231\") == \"NO\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == \"YES\"\n\nassert solution('123') == \"NO\"\n\nassert solution('1123') == \"NO\"\n\nassert solution('1111222') == \"NO\"\n\nassert solution('111122233') == \"NO\""
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"114114\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"441231\") == \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"114114\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"441231\") == \"NO\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('114114') == 'YES'\nassert solution('1111') == 'YES'\nassert solution('441231') == 'NO'\nassert solution('514') == 'NO'\nassert solution('141414') == 'YES'\n\n\"\"\""
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"114114\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"441231\") == \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"114114\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"441231\") == \"NO\"\n\nprint(\"All tests passed.\")\n\n----Solution----"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('114114') == \"YES\"\nassert solution('1111') == \"YES\"\nassert solution('441231') == \"NO\"\nassert solution('111122') == \"NO\"\n\nassert solution('4') == \"YES\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"114114\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 1 3 2 2') == 2\nassert solution('5 5 2 3 1 1') == \"Poor Inna and pony!\""
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7 1 3 2 2\") == \"2\"\nassert solution(\"5 5 2 3 1 1\") == \"Poor Inna and pony!\"\nassert solution(\"5 7 1 3 2 2\") == \"2\"\nassert solution(\"6 6 2 3 1 1\") == \"Poor Inna and pony!\"\nassert solution(\"7 7 1 3 2 2\") == \"2\"\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 1 3 2 2') == '2'\nassert solution('5 5 2 3 1 1') == 'Poor Inna and pony!'"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 1 3 2 2') == '2'\n\n\"\"\"\n\nn, m, i, j, a, b = list(map(int, input().split()))"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 1 3 2 2') == '2'\nassert solution('5 5 2 3 1 1') == 'Poor Inna and pony!'\n\"\"\""
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7 1 3 2 2') == '2'\nassert solution('5 5 2 3 1 1') == 'Poor Inna and pony!'\n\n\"\"\""
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 1 3 2 2') == '2'\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == 'Poor Inna and pony!'\n\n\"\"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 1 3 2 2') == '2'\nassert solution('5 5 2 3 1 1') == 'Poor Inna and pony!'\n\n\"\"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7 1 3 2 2') == 2\nassert solution('5 5 2 3 1 1') == 'Poor Inna and pony!'\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bacabcab\") == 4\nassert solution(\"bcda\") == 3\nassert solution(\"abbbbb\") == 5\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bcda\") == \"3\"\nassert solution(\"abbbbb\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bacabcab\") == 4\nassert solution(\"bcda\") == 3\nassert solution(\"abbbbb\") == 5\nassert solution(\"ababab\") == 1\n\nassert solution(\"\"\"\n3\nbac\n\"\"\") == 1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bacabcab\") == 4\nassert solution(\"bcda\") == 3\nassert solution(\"abbbbb\") == 5\nassert solution(\"abcd\") == 0\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('bacabcab') == '4'\nassert solution('bcda') == '3'\nassert solution('abbbbb') == '5'"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('bacabcab') == 4\n\"\"\"\n\nstdin = '8\\nbacabcab'\nstdin = '6\\abbbbb'\nstdin = '4\\bcda'"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bacabcab\") == 4\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bacabcab\") == 4\nassert solution(\"bcda\") == 3\nassert solution(\"abbbbb\") == 5\n\n\n\nSolution:\n    def solution(stdin: str) -> str:\n        if len(stdin) < 2: return 0\n        elif len(stdin) == 2: return 1 if stdin[0] < stdin[1] else 0\n        else:\n            first, second = sorted((stdin[0], stdin[1]))\n            rest = ''.join(sorted(set(stdin[2:])))\n            return max(len(first + rest), len(second + rest))\n        \n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bacabcab') == 4\nassert solution('bcda') == 3\nassert solution('abbbbb') == 5\n\n\nimport sys\nimport time\nfrom typing import List\n\nsys.setrecursionlimit(1 << 25)\ninf = float('inf')\nMOD = 10 ** 9 + 7\nMOD2 = 998244353\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('bacabcab') == '4'\n\"\"\""
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 20') == '6'\nassert solution('5 2') == '1'\nassert solution('1 2 3 5 8') == '1'\nassert solution('8') == '-1'\nassert solution('1 2 3 5 8') == '1'\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\") == \"6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1\"\nassert solution(\"6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\") == \"6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1\"\nassert solution(\"6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\") == \"6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1\"\nassert solution(\"6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\") == \"6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1\"\nassert solution(\"6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\") == \"6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1\"\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\") == \"6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1\"\nprint(\"Passed!\")\n\n\"\"\"\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 5\\n10 20\\n1 2\\n3 5\\n1 2') == '6'\nassert solution('10 5\\n10 20\\n1 2\\n3 5\\n1 2') == '6'\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 2 3 5 8\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\") == \"1\\n1\\n1\\n2\\n2\\n2\\n2\\n-1\\n-1\\n-1\"\nprint(solution(\"5 2\\n1 2 3 5 8\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\"))\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950') == '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1'\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 50 100 500 1000 5000\") == '6'\nassert solution(\"1 2 3 5 8\") == '-1'\nassert solution(\"1 2 3 5 8\") == '-1'\nassert solution(\"1 2 3 5 8\") == '-1'\nassert solution(\"1 2 3 5 8\") == '-1'\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\") == '-1'\nassert solution(\"10 20\") == '6'\nassert solution(\"10 2\") == '6'\nassert solution(\"1 2 3 5 8\") == '-1'\nassert solution(\"10 50 100 500 1000 5000\") == '19'\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\") == \"6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1\"\nassert solution(\"5 2\\n1 2 3 5 8\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\\n\") == \"1\\n1\\n1\\n2\\n2\\n2\\n2\\n-1\\n-1\"\nassert solution(\"5 20\\n1 2 3 5 8\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\\n\") == \"6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1\"\nassert solution(\"5 2\\n1 2 3 5 8\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\\n\") == \"1\\n1\\n1\\n2\\n2\\n2\\n2\\n-1\\n-1\"\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6 20\n10 50 100 500 1000 5000\n8\n4200\n100000\n95000\n96000\n99000\n10100\n2015\n9950''') == '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1'"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12') == '11'\nassert solution('5 2 6 7') == '7'\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 4\") == \"8\"\nassert solution(\"5 4 0\") == \"7\"\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Union, Optional\n\nfrom.utils import parse_input, parse_input_with_visitor, get_input_and_load_visitor, get_input_and_load\n\nInput = List[str]\n\nDATA_TYPE = Union[Tuple[int, int], Tuple[int, int, int, int, int]]\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 4') == '8'\nassert solution('5 4 0') == '7'\nassert solution('4 2 4') == '8'\n\"\"\"\nimport sys\nimport math\nfrom typing import Tuple\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4 0\\n1 2\\n3 1') == '7'\nassert solution('4 2 4\\n1 2\\n3 1') == '8'\n\"\"\"\n\nimport sys\n\ns, x_1, x_2 = map(int, sys.stdin.readline().split())\nt_1, t_2 = map(int, sys.stdin.readline().split())\np, d = map(int, sys.stdin.readline().split())\n\nans = abs(s - p)"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 0 1 2\") == '7'\nassert solution(\"4 2 4\") == '8'\n\"\"\"\n\ns, x_1, x_2 = [int(c) for c in stdin.split()]\nt_1, t_2 = [int(c) for c in stdin.split()][1::2]\np, d = [int(c) for c in stdin.split()][2::2]"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 4\\n3 4\\n1 1\\n\") == \"8\"\nassert solution(\"5 4 0\\n1 2\\n3 1\\n\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 4\") == \"8\"\nassert solution(\"5 4 0\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 4\") == \"8\"\nassert solution(\"5 4 0\") == \"7\"\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 4\\n3 4\\n1 1\\n') == '8'\nassert solution('5 4 0\\n1 2\\n3 1\\n') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 4\") == \"8\"\nassert solution(\"5 4 0\") == \"7\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"0 10\") == \"10\"\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 5\\n\") == \"2\"\nassert solution(\"6 12\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 12\") == \"4\"\nassert solution(\"6 12\") == \"0\"\n\n\nimport re\nimport string\nimport sys\nimport re\n\ns, t = input().split()\ns, t = int(s), int(t)\n\nprint(sum(1 if s.count(ch) % 2 == 1 else 0 for ch in set(s)))"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 12\") == 4\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n-----\n\nsolution(input())\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10 5''') == 2\n\nassert solution('''6 12''') == 4\n\nassert solution('''5 13''') == 0\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\") == \"2\"\n\nassert solution(\"6 12\") == \"4\"\n\nassert solution(\"5 13\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''6 12''') == '4'\n\n\"\"\""
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 12') == '4'\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 5\\n\") == \"2\"\n\nsolution(\n    \"\"\"6 12\\n\"\"\"\n) == \"\"\"4\"\"\"\n\n\n\"\"\"\nSample Tests\nInput    Output\n10 5    2\n6 12    4\n5 13    0\n\"\"\"\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"6 12\") == \"4\"\n\"\"\""
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == 'java'\nassert solution('6 6') == 'python'\nassert solution('5 2') == 'phphp'\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == 'java'\nassert solution(\"6 6\") == 'python'\nassert solution(\"5 2\") == 'phphp'\n\"\"\"\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"java\"\nassert solution(\"6 6\") == \"python\"\nassert solution(\"5 2\") == \"phphp\"\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"java\"\nassert solution(\"6 6\") == \"python\"\nassert solution(\"5 2\") == \"phphp\"\nassert solution(\"5 2\")!= \"hpphp\"\n\"\"\"\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(    '4 3') == 'java'\nassert solution(    '6 6') == 'python'\nassert solution(    '5 2') == 'phphp'\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == 'java'\nassert solution('6 6') == 'python'\nassert solution('5 2') == 'phphp'\nassert solution('5 3') == 'bpcpp'\nassert solution('5 4') == 'bjvm'\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"java\"\nassert solution(\"6 6\") == \"python\"\nassert solution(\"5 2\") == \"phphp\"\n\"\"\"\nimport sys\n\n\"\"\"\nfunction solution(stdin: str) -> str:\n    # Write your code here\n    \n    # Write 5 lines of code to test the correctness of solution:\n    \n    pass\n\nassert solution(\"4 3\") == \"java\"\nassert solution(\"6 6\") == \"python\"\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == 'java'\nassert solution('6 6') == 'python'\nassert solution('5 2') == 'phphp'\n\nprint('The local tests are done. Click on \"Check\" to earn cool rewards!'\n\n)\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == 'java'\nassert solution('6 6') == 'python'\nassert solution('5 2') == 'phphp'\n\"\"\"\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"java\"\n\nassert solution(\"6 6\") == \"python\"\n\nassert solution(\"5 2\") == \"phphp\"\n\"\"\""
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\") == \"1\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\"\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\") == \"1\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\"\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\") == \"1\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"1\"\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nRLRL\\n2 4 6 10') == '1'\nassert solution('3\\nLLR\\n40 50 60') == '-1'\n\"\"\"\nfrom itertools import combinations\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\") == \"1\\n\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\\n\"\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nLR\\n2 4 6 10\") == \"1\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\"\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\") == \"1\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\"\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\") == \"1\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nRLRL\\n2 4 6 10') == '1'\nassert solution('3\\nLLR\\n40 50 60') == '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\") == \"1\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"56\"\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\\n\") == \"0\"\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\\n\") == \"56\"\n\"\"\""
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"56\"\nassert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\\n1 2\\n2 1\") == 4\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == 56\nassert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\") == 0\n\n\"\"\""
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"56\"\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('1 2') == 0\nassert solution('2 2 1') == 0\nassert solution('1 2\\n2 1') == 0\nassert solution('2 2 2') == 4\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\\n1 2\\n2 1\") == \"4\"\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"56\"\nassert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\\n1 2\\n2 1\") == 4\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == 56\nassert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\") == 0\nassert solution(\"4 10 9\\n6 6\\n7 7\\n20 5\") == 0\n\"\"\"\n\nimport math"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\\n1 2\\n2 1\") == \"4\"\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"56\"\nassert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\") == \"0\"\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\\n1 2\\n2 1\") == \"4\\n\"\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"56\\n\"\nassert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\") == \"0\\n\"\n\nprint('The code ran Correctly')"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == '1 1'\nassert solution(\"3 3\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n2 3\\n3 0\\n3 1\\n3 2\") == '0 3'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom typing import List\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"1 1\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n\") == '1 1'\n\"\"\"\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"1 1\"\nassert solution(\"2\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"0 3\"\nassert solution(\"3\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"0 1\"\n\"\"\"\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1\\n1 2\\n1 3\\n1 1\\n2 2\\n3 3\\n2 2\\n2 1\\n1 3\\n3 1\") == \"0 2\"\nassert solution(\"4\\n1 1\\n1 2\\n1 3\\n1 1\\n2 2\\n3 3\\n2 2\\n2 1\\n1 3\\n3 1\") == \"0 3\"\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"1 1\"\nassert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"0 3\"\n\n\"\"\"\n\nimport math\n\nn = int(input())\n\npoints
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"1 1\"\nassert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"0 3\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"2\\n\"\n\"0 0\\n\"\n\"0 1\\n\"\n\"0 2\\n\"\n\"1 0\\n\"\n\"1 2\\n\"\n\"2 0\\n\"\n\"2 1\\n\"\n\"2 2\\n\") == \"1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(read_input()) == write_output()\n\n\n\n\n\n-----Details-----\n\n\n    \"\"\""
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n\") == \"1 1\"\nassert solution(\"2\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n\") == \"0 3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('1000000000') == '387420489'"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"390\") == \"216\"\nassert solution(\"7\") == \"7\"\nassert solution(\"1000000000\") == \"387420489\"\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"390\") == \"216\"\nassert solution(\"7\") == \"7\"\nassert solution(\"1000000000\") == \"387420489\"\n\"\"\""
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"390\") == '216'\nassert solution(\"7\") == '7'\nassert solution(\"1000000000\") == '387420489'\n\n\"\"\""
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7') == '7'\nassert solution('387') == '9'\nassert solution('9') == '9'\nassert solution('391') == '9'\nassert solution('387420489') == '9'\n\n'''"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == 7\nassert solution(\"390\") == 216\nassert solution(\"1000000000\") == 387420489\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('1000000000') == '387420489'\n\"\"\"\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"390\") == \"216\"\nassert solution(\"7\") == \"7\"\nassert solution(\"1000000000\") == \"387420489\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('1000000000') == '387420489'\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('1000000000') == '387420489'\nassert solution('13334323433') == '87808210'\nassert solution('123412341234') == '387420489'"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 1 5 1\") == \"5\"\nassert solution(\"5\\n2 2 3 2 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 1 5 1\") == \"5\"\nassert solution(\"5 2 3 2 2\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 1 5 1\") == \"5\"\nassert solution(\"5\\n2 2 3 2 2\") == \"5\""
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 1 5 1\") == \"5\"\nassert solution(\"5\\n2 2 3 2 2\") == \"5\"\nassert solution(\"5\\n4 4 4 4 4\") == \"5\""
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 1 1 5 1') == '5'\nassert solution('5\\n2 2 3 2 2') == '5'\n\n\"\"\"\n\nfrom typing import List, NamedTuple, Optional\n\nSTDIN_SIO = ''.join(stdin.splitlines())\n\nResult = NamedTuple('Result', [('winning_number', int), ('elodreip', int), ('awruk', int)])\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 1 5 1') == '5'\nassert solution('5\\n2 2 3 2 2') == '5'\nassert solution('5\\n1 1 1 5 1') == '5'\nassert solution('5\\n1 1 1 1 1') == '1'\nassert solution('5\\n2 2 3 2 2') == '5'\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 1 5 1\") == '5'\nassert solution(\"5\\n2 2 3 2 2\") == '5'\n\"\"\"\n\nfrom typing import List, Union\nimport sys"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 1 5 1\") == \"5\"\nassert solution(\"5\\n2 2 3 2 2\") == \"5\"\nassert solution(\"5\\n2 1 1 4 1\") == \"5\"\nassert solution(\"5\\n2 2 3 2 2\") == \"5\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 1 5 1\") == \"5\"\nassert solution(\"5\\n2 2 3 2 2\") == \"5\"\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 1 5 1\") == \"5\"\nassert solution(\"5\\n2 2 3 2 2\") == \"5\"\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabb\") == 2\nassert solution(\"aabcaa\") == 1\nassert solution(\"ababa\") == 0\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aabb') == 2\nassert solution('aabcaa') == 1\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(aabb) == 2\nassert solution(aabcaa) == 1\n\"\"\"\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aabb') == 2\nassert solution('aabcaa') == 1\n\"\"\"\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabb\") == 2\nassert solution(\"aabcaa\") == 1\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaaa\") == 0\nassert solution(\"aabcaa\") == 1\nassert solution(\"abcaaa\") == 2\nassert solution(\"aabb\") == 2\nassert solution(\"aab\") == 1\n\n\"\"\"\n\nfrom typing import Dict, List, Set, Tuple\nfrom collections import defaultdict\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaabbb\") == 1\nassert solution(\"aabcaa\") == 1"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabb\") == 2\nassert solution(\"aabcaa\") == 1\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabb\") == 2\nassert solution(\"aabcaa\") == 1\n\"\"\""
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aabb\") == \"2\"\nassert solution(\"aabcaa\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 1 1') == '4\\n1'\nassert solution('5\\n1 3 2 3 4') == '1'\nassert solution('6\\n1 3 3 1 3 2') == '1'\n\nassert solution('4\\n2 2 2 2') == '0'\nassert solution('4\\n1 1 1 1') == '0'\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == ans\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 1 1') == '4'\nassert solution('5\\n1 3 2 3 4') == '2'\nassert solution('6\\n1 3 3 1 3 2') == '1'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"5\\n1 3 2 3 4\") == \"2\"\nassert solution(\"6\\n1 3 3 1 3 2\") == \"1\"\nassert solution(\"7\\n1 3 3 1 3 2 2\") == \"1\"\nassert solution(\"8\\n1 3 3 1 3 2 2 3\") == \"0\"\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 1 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1 1') == '4'\nassert solution('5\\n1 3 2 3 4') == '2'\nassert solution('6\\n1 3 3 1 3 2') == '1'\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 3 2 3 4') == '2'\n\nassert solution('6\\n1 3 3 1 3 2') == '1'\n\nassert solution('1\\n3') == '0'\n\nassert solution('2\\n1 1') == '0'\n\nassert solution('2\\n1 3') == '0'"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 1 1') == '4'\nassert solution('5\\n1 3 2 3 4') == '1'\nassert solution('6\\n1 3 3 1 3 2') == '1'\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"5\\n1 3 2 3 4\") == \"1\"\nassert solution(\"6\\n1 3 3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"5\\n1 3 2 3 4\") == \"1\"\nassert solution(\"6\\n1 3 3 1 3 2\") == \"1\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(5000)\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 2\nassert solution('4') == 5\n\"\"\"\n\n\"\"\"\n\ubb38\uc81c \uc124\uba85\n\ubbfc\uc2dd\uc774\ub294 \ud310\uc790\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub294 \uac00\uc9c0\uace0 \uc788\ub294 \ud310\uc790\uc758 \uc218\uac00 \ub9ce\uc544\uc11c \uc790\uc2e0\ub4e4\uc758 \ubaa8\ub4e0 \uc790\ub9ac\ub97c \ud310\uc790\uac00 \uc788\ub294 \uacf3\uacfc \ud569\uccd0\uc11c \ud558\ub098\uc758 \ud310\uc790\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uac00\uc7a5 \uc9e7\uc740 \uae38\uc774\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud310\uc790\ub4e4\uc740 \uc11c\ub85c \ub2e4\ub978 \ub450 \uc810\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ud310\uc790\uac00 \uae34 \uac83\uc744 \ub450 \ubc88 \ud130\ub728\ub9ac\uba74 \uae38\uc774\uac00 \ub298\uc5b4\ub0a9\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ub098\uc11c \uae34 \ud310\uc790\ub4e4\uc740 \uc11c\ub85c \uac19\uc740 \uc810\uc73c\ub85c \ub098\ud0c0\ub0a0 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud310\uc790\ub4e4\uc758 \uc911\uc559\uc810\uc740 \ubbfc\uc2dd\uc774\uac00 \ub4f1\ub85d\ud55c \ub514\uc9c0\ud138 \uc2dc\uacc4\uac00 \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub514\uc9c0\ud138 \uc2dc\uacc4\ub294 \ub9e4 \uc2dc\uac01 \uae30\uc900 \uc624\ub978\ucabd\uc73c\ub85c \ubd80\ud130 3\uc2dc, 4\uc2dc, 5\uc2dc \uc21c\uc11c\ub85c \uc2dc\uac04\uc744 \ud45c\ud604\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc2dc\uacc4\uac00 2\uc2dc\uc778 \uacbd\uc6b0 1\uc2dc 2\uc2dc 3\uc2dc 4\uc2dc 5\uc2dc \uc21c\uc11c\ub85c \uc2dc\uac04\uc744 \ud45c\ud604\ud558\uba74 2:03:04:05 \uc774\ub7f0 \uc2dd\uc73c\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4.\n\n\uac00\uc7a5 \uc9e7\uc740 \uae38\uc774\ub97c \uac00\uc9c0\ub294 \ud310\uc790\ub4e4\uc744 \uc11c\ub85c \uc88c\ud45c\ub97c \uacf1\ud558\uc5ec \ud558\ub098\uc758 \uc810\uc73c\ub85c \ub9cc\ub4e4\uace0 \uadf8 \uc810\uc744 \uc774\uc6a9\ud574 \ub3c4\ud615\uc744 \uadf8\ub9ac\ub824\uace0 \ud569\ub2c8\ub2e4. \ubbfc\uc2dd\uc774\ub294 \ub514\uc9c0\ud138 \uc2dc\uacc4\ub97c \uac16\uace0 \uc788\uc9c0\ub9cc, \uc2dc\uacc4\uac00 \ub3cc\uc544\uac00\ub294 \uc704\uce58\uc5d0\uc11c \ud310\uc790\uc758 \uc624\ub978\ucabd\uc5d0 \uc704\uce58\ud55c \uac83\uc744 \uc2e4\uc218\ud588\uc2b5\ub2c8\ub2e4. \ubbfc\uc2dd\uc774\uac00 \ub514\uc9c0\ud138 \uc2dc\uacc4\ub97c \uc774\uc6a9\ud574 \ud310\uc790\ub97c \uc790\ub97c \ub54c\ub294 \uc624\ub978\ucabd\uc5d0 \uc788\ub294 \ud310\uc790\uc5d0 \uc704\uce58\ud55c \uc810\uc744 \uc2dc\uacc4\ubc29\ud5a5\uc73c\ub85c \ud68c\uc804\uc2dc\ud0a4\uace0, \uc67c\ucabd\uc5d0 \uc788\ub294 \ud310\uc790\uc5d0 \uc704\uce58\ud55c \uc810\uc744 \uc2dc\uacc4\ubc29\ud5a5\uc73c\ub85c \ud68c\uc804\uc2dc\ud0b5\ub2c8\ub2e4. \uc5b4\ub5a4 \ud310\uc790\ub3c4 \ub450 \uac1c \uc774\uc0c1\uc758 \uc810\uc73c\ub85c \ud45c\ud604\ub420 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ud310\uc790\ub97c \uc790\ub97c \ub54c \uc774\ubbf8 \uc67c\ucabd\uc740 \ucc98\ub9ac\ub418\uc5c8\uace0 \uc624\ub978\ucabd\uc740 \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc558\ub2e4\uba74 \uc2dc\uacc4\ubc29\ud5a5\uc73c\ub85c \ud68c\uc804\uc2dc\ucf1c\uc57c \ud569\ub2c8\ub2e4. \uc774\ubbf8 \uc67c\ucabd\uc5d0 \uc788\ub294 \ud310\uc790\ub4e4\uc744 \ucc98\ub9ac\ud588\uc9c0\ub9cc \uc624\ub978\ucabd\uc5d0 \uc788\ub294 \ud310\uc790\ub294 \uc774\ubbf8 \ucc98\ub9ac\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc5b4\ub5a4 \ud310\uc790\ub3c4 \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\ub85c \uc11c\ub85c \uc88c\ud45c\ub97c \uacf1\ud558\uc5ec \ud558\ub098\uc758 \uc810\uc73c\ub85c \ub9cc\ufffd"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '5'\nassert solution('6') == '5'\n\"\"\""
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"5\"\nprint(solution(input().strip()))\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"4\") == 5\n\"\"\"\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"5\"\nassert solution(\"7\") == \"5\"\nassert solution(\"6\") == \"5\"\nassert solution(\"14\") == \"7\"\nassert solution(\"17\") == \"8\"\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '5'\n\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"4\") == 5\n\"\"\"\n\nimport math\n\nn = int(input())\n\nprint(n // 2 + n % 2)\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"4\") == 5\n\"\"\""
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '5'\nassert solution('5') == '5'\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2230\") == \"2230\"\nassert solution(\"-10\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2230\") == \"2230\"\nassert solution(\"-10\") == \"0\"\nassert solution(\"-100003\") == \"-10000\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('-10') == '0'\nassert solution('-100003') == '-10000'\nassert solution('2230') == '2230'\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2230') == '2230'\nassert solution('-10') == '0'\nassert solution('-100003') == '-10000'\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('-10') == '0'\nassert solution('2230') == '2230'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2230') == '2230'\nassert solution('-10') == '0'\nassert solution('-100003') == '-10000'\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2230\") == \"2230\"\nassert solution(\"-10\") == \"0\"\nassert solution(\"-100003\") == \"-10000\"\n\n\"\"\"\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2230\") == \"2230\"\nassert solution(\"-10\") == \"0\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2230') == '2230'\nassert solution('-10') == '0'\nassert solution('-100003') == '-10000'\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2230') == '2230'\nassert solution('-10') == '0'\n\"\"\""
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"^ >\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ v\") == \"undefined\"\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('^ >') == 'cw'\nassert solution('< ^') == 'ccw'\nassert solution('^ v') == 'undefined'\nassert solution('6') == 'undefined'\nprint('The solution is correct!')\n\n\"\"\"\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"^ >\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ v\") == \"undefined\"\n\nassert solution(\"^ > 1\") == \"cw\"\nassert solution(\"< ^ 3\") == \"ccw\"\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('^ >') == 'cw'\nassert solution('< ^') == 'ccw'\nassert solution('^ v') == 'undefined'\nassert solution('v <') == 'cw'\nassert solution('> ^') == 'ccw'\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"< ^\") == \"ccw\"\nassert solution(\"v <\") == \"cw\"\nassert solution(\"^ >\") == \"undefined\""
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"^ >\\n1\") == \"cw\"\nassert solution(\"< ^\\n3\") == \"ccw\"\nassert solution(\"^ v\\n6\") == \"undefined\"\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"^ >\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ v\") == \"undefined\"\n\nassert solution(\"^ > 1\") == \"cw\"\nassert solution(\"< ^ 3\") == \"ccw\"\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"^>\") == \"cw\"\nassert solution(\"<^\") == \"ccw\"\nassert solution(\"^v\") == \"undefined\"\n\n\"\"\"\n\nfrom typing import Dict, List\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"> v < ^\") == \"cw\"\nassert solution(\"^ > v\") == \"ccw\"\nassert solution(\"^ > ^\") == \"undefined\"\nassert solution(\"^ > ^ 1\") == \"undefined\"\nassert solution(\"^ < ^ 1\") == \"cw\"\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"^ >\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ v\") == \"undefined\"\nassert solution(\"6\") == \"undefined\"\n\n'''"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"L.R...LR..L..\") == 4\nassert solution(\"R....\") == 0\nassert solution(\".\") == 1\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n.L.R...LR..L..') == '4'\nassert solution('5\\nR....') == '0'\nassert solution('1\\n.') == '1'\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".L.R...LR..L..\") == 4\nassert solution(\"R....\") == 0\nassert solution(\"...\") == 1\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RR.L') == 1\nassert solution('RRRR') == 0\nassert solution('LRLLLRR') == 2\nassert solution('LL.LLRRLLLL') == 2\nassert solution('RLRRLLLL') == 3\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('R....\\n') == 0\nassert solution('L..R.L\\n') == 1\nassert solution('..L.R\\n') == 1\nassert solution('R...L\\n') == 2\nassert solution('..LR.R\\n') == 0\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('..R...L..') == 4\nassert solution('..R.L..') == 0\nassert solution('L.R...LR..L..') == 4\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('L.R...LR..L..') == 4\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('R.L') == 0\nassert solution('R.R') == 0\nassert solution('R..L') == 1\nassert solution('L.R') == 1\nassert solution('L..R') == 0\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"..R.L..L\") == 3\nassert solution(\"..RR..L\") == 1\nassert solution(\"..L.LL..\") == 4\nassert solution(\"..R.L..R\") == 0"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.L.R...LR..L..') == '4'\nassert solution('R....') == '0'\nassert solution('.') == '1'\nassert solution('1.L.L.L.R...LR..L..') == '5'\n\"\"\"\nimport math"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 2 3 1 4\") == \"3 1 2 4\"\n\"\"\"\n\n\"\"\"\n\n-------------------------\n| General idea of the task |\n-------------------------\n\nIt is a classic problem of permutations.\n\nThe problem is simple. For each step you need to return the number, that is the next leader.\n\nFor example:\n\nstep 1 -> 2 -> 4 -> 3 -> 1\nWe return 4 (i.e. next leader is 1)\n\nstep 2 -> 3 -> 1 -> 2 -> 4\nWe return 3 (i.e. next leader is 2)\n\nStep 3 -> 4 -> 2 -> 3 -> 1\nWe return 2 (i.e. next leader is 3)\n\nstep 4 -> 1 -> 2 -> 3 -> 4\nWe return 1 (i.e. next leader is 4)\n\nAt the end we want to return the next leader as the last digit.\n\nSolution:\n\nWe need to return the next leader for each step and then return the last digit as the answer.\n\nLet's show an example.\n\nFor step 1 there is only one leader: 4.\n\nFor step 2 there are two leaders: 4 and 3.\n\nFor step 3 there are three leaders: 4, 3 and 2.\n\nFor step 4 there are four leaders: 4, 3, 2 and 1.\n\nThe output will be a sequence of leaders.\n\nFor the first step we return 4 and then the next step will be 3 because 4 is the first leader of the next step.\n\nFor the second step we return 3 and then the next step will be 1 because 4 is the first leader of the next step.\n\nFor the third step we return 2 and then the next step will be 4 because 3 is the first leader of the next step.\n\nFor the fourth step we return 1 and then the next step will be 2 because 2 is the first leader of the next step.\n\nFor the fifth step we return 4 and then the next step will be 1 because 2 is the first leader of the next step.\n\n\"\"\""
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '-1'\nassert solution('3 3\\n3 1 2') == '-1'\nassert solution('4 5\\n2 3 1 4 4') == '3 1 2 4'\nassert solution('4 5\\n2 3 1 4 4\\n2 3 1 4 4') == '3 1 2 4'\nassert solution('4 5\\n2 3 1 4 4\\n2 3 1 4 4\\n2 3 1 4 4') == '3 1 2 4'\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1 4 4') == '3 1 2 4'\nassert solution('3 3') == -1\n\n'''\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n2 3 1 4 4') == '3 1 2 4'\n\nassert solution('3 3\\n3 1 2') == '-1'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == -1"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n2 3 1 4 4') == '3 1 2 4'\nassert solution('3 3\\n3 1 2') == '-1'"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2 3 1 4 4\") == '3 1 2 4'\nassert solution(\"3 3\\n3 1 2\") == '-1'\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n2 3 1 4 4\") == \"3 1 2 4\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n2 1 2\") == \"3 1 2\"\nassert solution(\"3 3\\n2 3 1\") == \"3 1 2\"\nassert solution(\"3 3\\n2 3 1\") == \"3 1 2\"\nassert solution(\"3 3\\n1 3 2\") == \"3 1 2\"\nassert solution(\"3 3\\n1 3 2\") == \"3 1 2\"\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1990 1\") == \"9190\"\nassert solution(\"300 0\") == \"300\"\nassert solution(\"1034 2\") == \"3104\"\nassert solution(\"9090000078001234 6\") == \"9907000008001234\"\n\n\"\"\""
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1990 1') == '9190'\nassert solution('300 0') == '300'\nassert solution('1034 2') == '3104'\nassert solution('9090000078001234 6') == '9907000008001234'\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1990 1\") == \"9190\"\nassert solution(\"300 0\") == \"300\"\nassert solution(\"1034 2\") == \"3104\"\nassert solution(\"9090000078001234 6\") == \"9907000008001234\"\n\n\"\"\""
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1990 1') == '9190'\nassert solution('300 0') == '300'\nassert solution('1034 2') == '3104'\nassert solution('9090000078001234 6') == '9907000008001234'\n\"\"\"\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1990 1\") == \"9190\"\nassert solution(\"300 0\") == \"300\"\nassert solution(\"1034 2\") == \"3104\"\nassert solution(\"9090000078001234 6\") == \"9907000008001234\"\n\"\"\"\n\na, k = map(int, input().split())\n\nk = min(k, int(a ** 0.5))\n\na += k * k - k\n\nprint(a)\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1990 1') == '9190'\nassert solution('300 0') == '300'\nassert solution('1034 2') == '3104'\nassert solution('9090000078001234 6') == '9907000008001234'\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1990 1\") == \"9190\"\nassert solution(\"300 0\") == \"300\"\nassert solution(\"1034 2\") == \"3104\"\nassert solution(\"9090000078001234 6\") == \"9907000008001234\"\n\nprint(\"Success\")\n\n-----------------------------\n\n\u0412\u0430\u0441\u044e \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u043b\u0438 \u0437\u0430\u0432\u0445\u043e\u0437\u043e\u043c \u0432 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u0438 \u043e\u043d \u043f\u043e\u0434\u043e\u0448\u0451\u043b \u043a \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043a\u0430\u043b\u043e\u0440\u0438\u0439\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 100 \u0433\u0440\u0430\u043c\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0431\u0435\u043b\u043a\u043e\u0432, \u0436\u0438\u0440\u043e\u0432 \u0438 \u0443\u0433\u043b\u0435\u0432\u043e\u0434\u043e\u0432 \u043d\u0430 100 \u0433\u0440\u0430\u043c\u043c \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430.\n\n\u0415\u043c\u0443 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f\u0447\u0435\u0439\u043a\u0438 \u043e\u0441\u0442\u0430\u043b\u0438\u0441\u044c \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c\u0438 (\u043c\u043e\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u044b\u043c \u043d\u0443\u043b\u044e). \u0422\u0430\u043a\u0436\u0435 \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u043e\u0444\u0438\u0441\u043d\u044b\u0439 \u043f\u0430\u043a\u0435\u0442 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u043b \u0446\u0435\u043b\u0443\u044e \u0438 \u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b \u0437\u0430\u043f\u044f\u0442\u043e\u0439. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 https://stepik.org/media/attachments/lesson/245290/trekking2.xlsx.\n\n\u0412\u043ec\u0438\u0437\u0437\u0430\u0449\u0438\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0430\u0441 \u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u044b\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u043d\u043e\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0438 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0430 \u0438 \u043e \u0435\u0433\u043e \u0432\u0435\u0441\u0435. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0439\u0442\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 100g \u0437\u0435\u0440\u043d\u0430. \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0432 \u043a\u0430\u043a\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0433\u0440\u0430\u043c\u043c \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 \u0432\u0441\u0435\u0433\u043e \u0437\u0435\u0440\u043d\u0430. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0447\u0438\u0441\u043b\u0430 \u0433\u0440\u0430\u043c\u043c \u0431\u0435\u043b\u043a\u043e\u0432, \u0436\u0438\u0440\u043e\u0432 \u0438 \u0443\u0433\u043b\u0435\u0432\u043e\u0434\u043e\u0432, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u044d\u0442\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0433\u0440\u0430\u043c\u043c \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0432 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0435 (1 \\le n \\le 1000000). \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f nn \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0445 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0445 \u0432 \u0441\u0435\u0431\u044f \u0431\u0443\u043a\u0432\u044b \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430, \u0434\u043e \u0442\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u0430\u043a\u043e\u043d\u0447\u0430\u0442\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0435. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u0434\u043b\u0438\u043d\u0443 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 100 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u0412\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0441\u0442\u0440\u043e\u043a\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e mm \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u0440\u0430\u043c\u043c \u0437\u0435\u0440\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0412\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0432 \u043f\u0440\u043e\u0434\u0443\u043a\u0442.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0435\u043b\u043a\u043e\u0432, \u0436\u0438\u0440\u043e\u0432 \u0438 \u0443\u0433\u043b\u0435\u0432\u043e\u0434\u043e\u0432.\n\nSample Input:\n\n7\n\nRed Apple 5.35 Green Apple 6.99 Orange 3.25\n\n8\n\nSample Output:\n\n3 9 3\n\n------------------------------\n\na, k = input().split()\na = int(a)\nk = int(k)\nlst = []\nfor _ in range(a):\n    lst.append(input().split())\n\nprint(*[sum([int(i[0]) for i in lst if int(i[1]) == 100])])\n\n\u041d\u0430\u0437\u043e\u0432\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u043c, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0443\u043c"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"90 20\") == \"920000\"\n\n\"\"\"\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('5 2') == '1'\nassert solution('1 10') == '10'\nassert solution('1 990') == '99'\nassert solution('9090 990') == '9909090'\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '8910 1011 1234 5678 91011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798999aabbccddeeff00112233445566778899aaabbccddeeff112233445566778899aaabbccddeeff'\n    ) == '9907000008001234'\n\n\"\"\"\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"836 624 412 200\") == -12\nassert solution(\"1 334 667 1000\") == 1333\n\n\n\"\"\"\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"836 624 412 200\") == -12\nassert solution(\"1 334 667 1000\") == 1333\n\"\"\"\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('836 624 412 200') == '1333'\nassert solution('1 334 667 1000') == '1333'\nassert solution('6 24 125 1000') == '-12'\n\"\"\"\n\n\nfrom typing import Tuple\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"836 624 412 200\") == \"12\"\nassert solution(\"1 334 667 1000\") == \"1333\"\nassert solution(\"0 10 10 10\") == \"42\"\nassert solution(\"1 1 1 1\") == \"42\"\nassert solution(\"0 0 0 0\") == \"42\"\n\n\"\"\"\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('836 624 412 200') == '-12'\nassert solution('1 334 667 1000') == '1333'\nassert solution('1 11 111') == '42'\n\n\"\"\"\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('836 624 412 200') == '-12'\nassert solution('1 334 667 1000') == '1333'\n\"\"\"\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"836 624 412 200\") == \"-12\"\nassert solution(\"1 334 667 1000\") == \"1333\"\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"836 624 412 200\") == \"-12\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('836 624 412 200') == -12\nassert solution('1 334 667 1000') == 1333\n\"\"\""
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('836 624 412 200') == '1333'\nassert solution('1 334 667 1000') == '1333'\nassert solution('3 4 5 6') == '42'\nassert solution('1 2 3 4') == '42'\nassert solution('1 2 3 4 5') == '42'\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 2 3\") == \"4\"\nassert solution(\"3\\n1 2 1\") == \"1\"\nassert solution(\"7\\n1 1 3 1 1 1 1\") == \"4\"\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 2 3\\n\") == \"4\"\nassert solution(\"3\\n1 2 1\\n\") == \"1\"\nassert solution(\"7\\n1 1 3 1 1 1 1\\n\") == \"4\"\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 2 3\") == \"4\"\nassert solution(\"1 1 3 1 1 1\") == \"1\"\nassert solution(\"7 1 1 1 1 1\") == \"4\"\n\nassert solution(\"1 2 3 2 3\") == \"4\"\nassert solution(\"1 1 3 1 1 1\") == \"1\"\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 2 3') == '4'\nassert solution('3\\n1 2 1') == '1'\nassert solution('7\\n1 1 3 1 1 1 1') == '4'\nassert solution('2\\n1 2') == '1'\nassert solution('7\\n3 4 4 4 4 4') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 2 3\") == \"4\"\nassert solution(\"3\\n1 2 1\") == \"1\"\nassert solution(\"7\\n1 1 3 1 1 1 1\") == \"4\""
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 2 3') == '4'\nassert solution('7\\n1 1 3 1 1 1 1') == '4'\n\"\"\"\n\nfrom typing import List, Set\nfrom collections import defaultdict\nimport math\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 2 3\") == \"4\"\nassert solution(\"3\\n1 2 1\") == \"1\"\nassert solution(\"7\\n1 1 3 1 1 1 1\") == \"4\"\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 2 3\\n\") == 4\nassert solution(\"3\\n1 2 1\\n\") == 1\n\"\"\"\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 2 3\") == \"4\"\nassert solution(\"3\\n1 2 1\") == \"1\"\nassert solution(\"7\\n1 1 3 1 1 1 1\") == \"4\"\n\"\"\"\n\n\nfrom itertools import permutations\nfrom typing import List\n\nimport sys\n\nsys.setrecursionlimit(1500)\n\n\nclass G:\n    def __init__(self, n: int, path: List[int]):\n        self.n = n\n        self.path = path\n\n    def __hash__(self):\n        return hash(f\"{self.path}\")\n\n    def __eq__(self, other):\n        return self.path == other.path\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 1\") == '1'\nassert solution(\"7\\n1 1 3 1 1 1 1\") == '4'\n\"\"\""
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 9\\n\") == \"2 2 L\"\nassert solution(\"4 3 24\\n\") == \"4 3 R\"\nassert solution(\"2 4 4\\n\") == \"1 2 R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 9\\n') == '2 2 L'\nassert solution('4 3 24\\n') == '4 3 R'\nassert solution('2 4 4\\n') == '1 2 R'\n\"\"\"\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\n\"\"\"\n\nn, m, k = map(int, input().split())\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 9\\n') == '2 2 L'\nassert solution('4 3 24\\n') == '4 3 R'\nassert solution('2 4 4\\n') == '1 2 R'\n\"\"\""
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\n\"\"\""
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\nassert solution(\"4 3 24\") == \"4 3 R\"\nassert solution(\"2 4 4\") == \"1 2 R\"\n\"\"\""
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\n\"\"\""
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\nassert solution(\"4 3 24\") == \"4 3 R\"\nassert solution(\"2 4 4\") == \"1 2 R\"\n\"\"\"\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\nassert solution(\"4 3 24\") == \"4 3 R\"\nassert solution(\"2 4 4\") == \"1 2 R\""
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\nassert solution(\"4 3 24\") == \"4 3 R\"\nassert solution(\"2 4 4\") == \"1 2 R\"\n\nprint(\"Well done!\")\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RB\") == \"G\"\nassert solution(\"GRG\") == \"BR\"\nassert solution(\"BBBBB\") == \"B\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RB\") == \"G\"\nassert solution(\"GRG\") == \"BR\"\nassert solution(\"BBBBB\") == \"B\"\nassert solution(\"GGGG\") == \"G\"\n\n-----\ninput:\n5\nBBBBB\n\noutput:\nB\n\n-----\ninput:\n3\nRRR\n\noutput:\nR\n\n-----\ninput:\n3\nGRG\n\noutput:\nG\n\n-----\ninput:\n1\nG\n\noutput:\nG\n\n------\ninput:\n5\nRRRR\n\noutput:\nR\n\n------\ninput:\n1\nG\n\noutput:\nG\n\n------\ninput:\n3\nBGB\n\noutput:\nB\n\n------\ninput:\n4\nB\n\noutput:\nB\n\n------\ninput:\n5\nRGB\n\noutput:\nR\n\n------\ninput:\n7\nRRRRB\n\noutput:\nB\n\n------\ninput:\n1\nB\n\noutput:\nB\n\n------\ninput:\n2\nR\n\noutput:\nR\n\n------\ninput:\n4\nRRBB\n\noutput:\nR\n\n------\ninput:\n2\nGB\n\noutput:\nG\n\n------\ninput:\n5\nGBB\n\noutput:\nB\n\n------\ninput:\n4\nGGB\n\noutput:\nG\n\n------\ninput:\n7\nG\n\noutput:\nG\n\n------\ninput:\n5\nRRBBB\n\noutput:\nR\n\n------\ninput:\n2\nGG\n\noutput:\nG\n\n------\ninput:\n5\nBBG\n\noutput:\nB\n\n------\ninput:\n4\nRRRB\n\noutput:\nR\n\n------\ninput:\n7\nRRR\n\noutput:\nR\n\n------\ninput:\n3\nB\n\noutput:\nB\n\n------\ninput:\n6\nRRBBG\n\noutput:\nB\n\n------\ninput:\n5\nRRR\n\noutput:\nR\n\n------\ninput:\n4\nBGG\n\noutput:\nG\n\n------\ninput:\n5\nR\n\noutput:\nR\n\n------\ninput:\n5\nRBBB\n\noutput:\nR\n\n------\ninput:\n7\nBBRR\n\noutput:\nR\n\n------\ninput:\n7\nRRRR\n\noutput:\nR\n\n------\ninput:\n5\nRRRRG\n\noutput:\nR\n\n------\ninput:\n4\nR\n\noutput:\nR\n\n------\ninput:\n4\nRRB\n\noutput:\nR\n\n------\ninput:\n6\nR\n\noutput:\nR\n\n------\ninput:\n4\nR\n\noutput:\nR\n\n------\ninput:\n3\nRR\n\noutput:\nR\n\n------\ninput:\n1\nB\n\noutput:\nB\n\n------\ninput:\n4\nR\n\noutput:\nR\n\n------\ninput:\n1\nG\n\noutput:\nG\n\n------\ninput:\n5\nGGB\n\noutput:\nG\n\n------\ninput:\n5\nRRR\n\noutput:\nR\n\n------\ninput:\n5\nBBG\n\noutput:\nB\n\n------\ninput:\n4\nBGR\n\noutput:\nG\n\n------\ninput:\n5\nRBB\n\noutput:\nB\n\n------\ninput:\n5\nRBR\n\noutput:\nR\n\n------\ninput:\n6\nRBRR\n\noutput:\nR\n\n------\ninput:\n4\nRBBG\n\noutput:\nB\n\n------\ninput:\n4\nRBBB\n\noutput:\nB\n\n------\ninput:\n6\nRBR\n\noutput:\nR\n\n------\ninput:\n5\nRRB\n\noutput:\nR\n\n------\ninput:\n7\nRBBB\n\noutput:\nB\n\n------\ninput:\n5\nRBBB\n\noutput:\nB\n\n------\ninput:\n3\nBBG\n\noutput:\nB\n\n------\ninput:\n7\nRRRG\n\noutput:\nR\n\n------\ninput:\n3\nRRB\n\noutput:\nR\n\n------\ninput:\n7\nRRRR\n\noutput:\nR\n\n------\ninput:\n6\nRRG\n\noutput:\nG\n\n------\ninput:\n3\nRGG\n\noutput:\nG\n\n------\ninput:\n7\nRGGG\n\noutput:\nG\n\n------\ninput:\n6\nRGGG\n\noutput:\nG\n\n------\ninput:\n5\nRGGGB\n\noutput:\nG\n\n------\ninput:\n5\nRRRGG\n\noutput:\nR\n\n------\ninput:\n4\nRRRGG\n\noutput:\nR\n\n------\ninput:\n3\nRR\n\noutput:\nR\n\n------\ninput:\n2\nRG\n\noutput:\nG\n\n------\ninput:\n2\nRR\n\noutput:\nR\n\n------\ninput:\n3\nRG\n\noutput:\nG\n\n------\ninput:\n2\nB\n\noutput:\nB\n\n------\ninput:\n4\nRRR\n\noutput:\nR\n\n------\ninput:\n7\nRRRGGG\n\noutput:\nG\n\n------\ninput:\n5\nRRR\n\noutput:\nR\n\n------\ninput:\n1\nB\n\noutput:\nB\n\n------\ninput:\n3\nR\n\noutput:\nR\n\n------\ninput:\n4\nR\n\noutput:\nR\n\n------\ninput:\n5\nG\n\noutput:\nG\n\n------\ninput:\n1\nG\n\noutput:\nG\n\n------\ninput:\n5\nR\n\noutput:\nR\n\n------\ninput:\n4\nR\n\noutput:\nR\n\n------\ninput:\n4\nR\n\noutput:\nR\n\n------\ninput:\n5\nG\n\noutput:\nG\n\n------\ninput:\n7\nR\n\noutput:\nR\n\n------\ninput:\n6\nGG\n\noutput:\nG\n\n------\ninput:\n5\nG\n\noutput:\nG\n\n------\ninput:\n5\nB\n\noutput:\nB\n\n------\ninput:\n4\nRGG\n\noutput:\nG\n\n------\ninput:\n5\nRGGG\n\noutput:\nG\n\n------\ninput:\n6\nRRG\n\noutput:\nR\n\n------\ninput:\n7\nGGG\n\noutput:\nG\n\n------\ninput:\n6\nRRRGG\n\noutput:\nR\n\n------\ninput:\n5\nRRRGGG\n\noutput:\nR\n\n------\ninput:\n4\nR\n\noutput:\nR\n\n------\ninput:\n4\nRRR\n\noutput:\nR\n\n------\ninput:\n2\nB\n\noutput:\nB"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RB\") == \"G\"\nassert solution(\"GRG\") == \"BR\"\nassert solution(\"BBBBB\") == \"B\"\n\n\"\"\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RR') == 'R'\nassert solution('GB') == 'B'\nassert solution('BB') == 'G'\nassert solution('B') == 'R'\nassert solution('BBB') == 'R'\n\"\"\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RRB') == 'R'\nassert solution('RGRR') == 'G'\nassert solution('RGRRGB') == 'B'\nassert solution('RBRGB') == 'B'\nassert solution('RBRGBB') == 'R'\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RBR\") == \"GRB\"\nassert solution(\"BGB\") == \"BBR\"\nassert solution(\"RRR\") == \"B\"\nassert solution(\"RRB\") == \"GR\"\n\nassert solution(\"RBR\") == \"GRB\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2, \"RB\") == \"G\"\nassert solution(3, \"GRG\") == \"BR\"\nassert solution(5, \"BBBBB\") == \"B\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('B') == 'G'\nassert solution('RB') == 'B'\nassert solution('GBR') == 'R'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RR') == 'R'\nassert solution('RGR') == 'BR'\nassert solution('BBBB') == 'B'\nassert solution('GG') == 'G'\nassert solution('GGR') == 'G'\n\nprint(\"All tests passed.\")\n\n\"\"\""
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RB') == 'G'\nassert solution('RBBG') == 'B'\nassert solution('B') == 'R'\n\"\"\"\nimport time"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(EXAMPLES[0])) == \"YES\"\nassert solution(str(EXAMPLES[1])) == \"NO\"\nassert solution(str(EXAMPLES[2])) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n') == 'YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\\n'\n\nassert solution('6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == 'NO\\n'\n\nassert solution('4\\n1 2\\n2 3\\n3 4\\n') == 'YES\\n3 3\\n4 3\\n5 3\\n6 3\\n'\n\n\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n = int(stdin.split()[0])\n        s = stdin\n        a = []\n        for _ in range(n - 1):\n            a.append(stdin.split()[1:])\n            stdin = stdin.split('\\n', 1)[1]\n        # print(a)\n\n        s = stdin\n        for i in range(n):\n            if i + 1 < n:\n                s = s.split('\\n', 1)[0]\n            # print(s)\n\n        # print(s)\n        return 'NO'\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7''') == 'YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2'\nassert solution('''6\n1 2\n2 3\n2 4\n2 5\n2 6''') == 'NO'\nassert solution('''4\n1 2\n2 3\n3 4''') == 'YES\\n3 3\\n4 3\\n5 3\\n6 3'\nassert solution('''4\n1 2\n2 3\n3 4\n3 4''') == 'YES\\n3 3\\n4 3\\n5 3\\n6 3'\n\n\"\"\"\n\n\"\"\"\n\nimport math\n\nfrom collections import defaultdict\nfrom typing import List"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"YES\\n0 0\\n1 0\\n0 1\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\") == \"YES\\n0 0\\n1 0\\n2 0\\n0 1\\n2 0\\n1 -1\\n-1 1\"\nassert solution(\"6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\") == \"NO\"\nassert solution(\"1\\n2\") == \"NO\"\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(input())\ngraph = defaultdict(set)\n\nfor i in range(n - 1):\n    u, v = map(int, input().split())\n    graph[u].add(v)\n    graph[v].add(u)\n\nqueue = [1]\nvisited = set()\n\nfor v in queue:\n    visited.add(v)\n    queue.extend(graph[v] - visited)\n\nprint('YES' if len(visited) == n else 'NO')\n\nfor v in queue:\n    print(v, 0)\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7') == 'YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2'\nassert solution('4\\n1 2\\n2 3\\n3 4') == 'YES\\n3 3\\n4 3'\nassert solution('6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == \"YES\\n3 3\\n4 3\\n5 3\\n6 3\"\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n') == \"YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\"\nassert solution('4\\n1 2\\n2 3\\n3 4\\n') == \"NO\"\nassert solution('6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == \"NO\"\nassert solution('6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == \"YES\\n3 3\\n4 3\\n5 3\\n6 3\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n\") == \"YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\\n1 0\\n2 -1\\n-1 1\\n0 3\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 4\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 5\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 6\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 7\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n\")\nassert solution(\"6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n\") == \"YES\\n3 3\\n4 3\\n5 3\\n6 3\\n7 3\\n8 3\\n9 3\\n10 3\\n11 3\\n12 3\\n13 3\\n14 3\\n15 3\\n16 3\\n17 3\\n18 3\\n19 3\\n20 3\\n21 3\\n22 3\\n23 3\\n24 3\\n\")\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"YES\\n3 3\\n4 3\\n5 3\\n6 3\\n7 3\\n8 3\\n9 3\\n10 3\\n11 3\\n12 3\\n13 3\\n14 3\\n15 3\\n16 3\\n17 3\\n18 3\\n19 3\\n20 3\\n21 3\\n22 3\\n23 3\\n24 3\\n25 3\\n26 3\\n27 3\\n28 3\\n29 3\\n30 3\\n\")\nassert solution(\"1\\n2\\n3\\n\") == \"NO\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"NO\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"YES\\n0 0\\n0 1\\n0 2\\n1 0\\n1 -1\\n-1 1\\n0 2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n2 6\\n3 7\") == \"YES\\n0 0\\n0 1\\n0 2\\n1 0\\n0 2\\n0 2\\n1 0\\n1 0\\n0 1\\n2 0\\n2 0\\n1 0\\n2 0\\n0 1\\n1 1\\n0 2\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"YES\\n3 3\\n4 3\\n5 3\\n6 3\"\n\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"YES\\n0 0\\n1 0\\n0 1\\n0 2\\n1 0\\n1 -1\\n-1 1\\n0 2\"\nassert solution(\"5\\n1 2\\n3 3\\n2 4\\n2 5\\n4 6\") == \"NO\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n\") == 'YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\\n'\nassert solution(\"6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n\") == 'NO\\n'\n\n-----\nInput\n6\n1 2\n2 3\n2 4\n2 5\n2 6\n\nOutput\nNO\n\n-----\nInput\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n\nOutput\nYES\n3 3\n4 3\n5 3\n6 3\n7 3\n\n\"\"\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 4\\n1 3\\n2 5\\n3 6\\n\") == \"YES\"\n\n\"\"\"\n\n\"\"\"\n1\n2\n2\n2\n3\n\"\"\""
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"5 14\") == \"105\"\nassert solution(\"88005553535 99999999999\") == \"761141116\"\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"5 14\") == \"105\"\nassert solution(\"88005553535 99999999999\") == \"761141116\"\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3') == '7'\nassert solution('5 14') == '105'\nassert solution('88005553535 99999999999') == '761141116'"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"5 14\") == \"105\"\nassert solution(\"88005553535 99999999999\") == \"761141116\"\n\"\"\"\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3') == 7\nassert solution('5 14') == 105\nassert solution('88005553535 99999999999') == 761141116\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3') == '7'\nassert solution('5 14') == '105'\nassert solution('88005553535 99999999999') == '761141116'\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"5 14\") == \"105\"\nassert solution(\"88005553535 99999999999\") == \"761141116\"\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"5 14\") == \"105\"\nassert solution(\"88005553535 99999999999\") == \"761141116\"\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"5 14\") == \"105\"\nassert solution(\"88005553535 99999999999\") == \"761141116\"\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"5 14\") == \"105\"\nassert solution(\"88005553535 99999999999\") == \"761141116\"\nprint(\"Passed\")\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 1 1 1 1 0') == 'Yes'\nassert solution('1 1 0 0 1000 1000') == 'No'\nassert solution('0 0 0 0 0 0') == 'Yes'\nassert solution('1 1 1 1 1 1') == 'No'\nassert solution('0 1 1 1 1 0') == 'No'\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\n\nimport sys\nimport os\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"0 1 1 1 1 0\"\"\"\n        output = \"\"\"Yes\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1 1 0 0 1000 1000\"\"\"\n        output = \"\"\"No\"\"\"\n        self."
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 0 0 1000 1000\") == \"No\"\nassert solution(\"0 1 1 1 1 0\") == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == b\n--------------------------------------------------\n\nimport string\nimport sys"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 1 1 1 0') == 'Yes'\nassert solution('1 1 0 0 1000 1000') == 'No'"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 1 1 1 0') == 'Yes'\nassert solution('1 1 0 0 1000 1000') == 'No'\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\n\"\"\""
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\n\"\"\"\n\nfrom math import atan2"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 1 2 2 4\") == 4\n\"\"\"\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n1 1 2 2 4') == '4'\nassert solution('3 1\\n1 1 1') == '1'\nassert solution('10 3\\n1 2 6 2 3 6 9 18 3 9') == '6'"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 1 2 2 4\") == \"4\"\nassert solution(\"3 1\\n1 1 1\") == \"1\"\nassert solution(\"10 3\\n1 2 6 2 3 6 9 18 3 9\") == \"6\"\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 1 2 2 4\") == \"4\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\n\narr = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(n):\n    for j in range(i+1, n):\n        for z in range(j+1, n):\n            if arr[i] * k == arr[j] * k == arr[z] * k:\n                count += 1\n\nprint(count)\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n1 1 1') == '1'\nassert solution('10 3\\n1 2 6 2 3 6 9 18 3 9') == '6'\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 1 2 2 4') == '4'\n\"\"\""
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == '2'\nassert solution(\"2 1\") == '1'\n\"\"\""
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 1 2 2 4\") == 4\n\"\"\"\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 1 2 2 4\") == \"4\"\nassert solution(\"3 1\\n1 1 1\") == \"1\"\nassert solution(\"10 3\\n1 2 6 2 3 6 9 18 3 9\") == \"6\"\n\"\"\"\n\n\nimport math\n\nimport sys\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 1 2 2 4') == '4'\nassert solution('3 1\\n1 1 1') == '1'\nassert solution('10 3\\n1 2 6 2 3 6 9 18 3 9') == '6'\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0 3\\n10 8\\n7 11\\n5 2\") == \"26\""
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == expected_result\n\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def solve(self, input_list) -> int:\n        n, a, b = input_list[0][0], input_list[0][1], input_list[1][0]\n\n        max_damage = 0\n        for i in range(n):\n            hp, damage = input_list[i][0], input_list[i][1]\n            hp *= 2\n            damage = hp\n            if a:\n                hp = hp // a\n            if b:\n                damage = damage // b\n            max_damage = max(max_damage, hp + damage)\n\n        return max_damage\n\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(Solution().solve(\n            [[3, [10, 8]], [2, [6, 1]]]), 26)\n\n    def test_2(self):\n        self.assertEqual(Solution().solve(\n            [[3, [10, 8]], [2, [6, 1]]]), 26)\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 1\\n10 15\\n6 1\") == \"27\"\nassert solution(\"3 0 3\\n10 8\\n7 11\\n5 2\") == \"26\"\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\\n10 15\\n6 1\\n\") == \"27\"\nassert solution(\"3 0 3\\n10 8\\n7 11\\n5 2\\n\") == \"26\"\n\nprint('The code ran Correctly')\n\n\"\"\"\n\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1\\n10 15\\n6 1') == 27\nassert solution('3 0 3\\n10 8\\n7 11\\n5 2') == 26\n\n-----Explanation-----\nIn the first example Max should use the spell of the first type on the second creature, then the spell of the second type on the same creature.\n\nIn the second example Max should use the spell of the second type on the first creature, then the spell of the second type on the third creature.\n\"\"\"\n\nfrom typing import List, Dict, Tuple, NamedTuple, Set, Optional, Any\n\n\nclass Creature(NamedTuple):\n    health: int\n    damage: int\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 8\\n7 11\\n5 2\\n\") == \"26\"\n\"\"\"\n\nimport numpy as np\nimport sys\n\ninput_data = sys.stdin.read()\n\nn, a, b = [int(c) for c in input_data.split(\"\\n\")[0].split()]\n\nhp = [int(c) for c in input_data.split(\"\\n\")[1:1+n]]\ndmg = [int(c) for c in input_data.split(\"\\n\")[1+n:1+2*n]]\n\nhp_np = np.array(hp)\ndmg_np = np.array(dmg)\n\nhp_np[hp_np == dmg_np] = hp_np[hp_np == dmg_np] * 2\ndmg_np = np.where(dmg_np < hp_np, dmg_np, hp_np)\n\nprint(np.sum(dmg_np))"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''2 1 1\n10 15\n6 1''') == 27\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1\\n10 15\\n6 1') == '27'\nassert solution('3 0 3\\n10 8\\n7 11\\n5 2') == '26'"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 1\\n10 15\\n6 1\\n\") == \"27\"\n\"\"\"\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\\n10 15\\n6 1\") == \"27\"\nassert solution(\"3 0 3\\n10 8\\n7 11\\n5 2\") == \"26\"\n\n\"\"\""
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 2\\n.**\\nX..\") == \"RL\"\nassert solution(\"5 6 14\\n..***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n\") == \"DLDDLLLRRRUURU\"\nassert solution(\"3 3 4\\n***\\n*X*\\n***\") == \"IMPOSSIBLE\"\nassert solution(\"3 3 4\\n***\\n*X\\n***\") == \"DLDDRUDRRUDLDLRDLDRRLRUDRDDR\"\nassert solution(\"3 3 4\\n***\\n*X\\n***\") == \"DLDDRUDRRUDLDLRDLDRRLRUDRDDR\"\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 2\\n.**\\nX..\") == \"RL\"\nassert solution(\"5 6 14\\n..***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n\") == \"DLDDLLLRRRUURU\"\nassert solution(\"3 3 4\\n***\\n*X*\\n***\") == \"IMPOSSIBLE\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 2\\n.*\\nX..') == 'RL'\nassert solution('5 6 14\\n..***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n') == 'DLDDLLLRRRUURU'\nassert solution('3 3 4\\n***\\n*X*\\n***') == 'IMPOSSIBLE'\nassert solution('3 3 4\\n***\\n*X\\n***') == 'IMPOSSIBLE'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 2\\n.*\\nX..\\n\") == \"RL\"\nassert solution(\"5 6 14\\n..***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n\") == \"DLDDLLRUURU\"\nassert solution(\"3 3 4\\n***\\n*X*\\n***\\n\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_data) == test_result"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".**\") == \"UD\"\nassert solution(\"X..\") == \"RL\"\nassert solution(\"**.*\") == \"DLDRL\"\nassert solution(\"***\") == \"IMPOSSIBLE\"\nassert solution(\"X**\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 2\\n.*\\nX..\") == \"RL\"\nassert solution(\"5 6 14\\n..***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n\") == \"DLDDLLLRRRUURU\"\nassert solution(\"3 3 4\\n***\\n*X*\\n***\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\\n.**\\nX..\\n\") == \"RL\"\nassert solution(\"5 6 14\\n.***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n\") == \"DLDDLLLRRRUURU\"\nassert solution(\"3 3 4\\n***\\n*X*\\n***\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 2\\n.**\\nX..') == 'RL'\nassert solution('5 6 14\\n..***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n') == 'DLDDLLLRRRUURU'\nassert solution('3 3 4\\n***\\n*X*\\n***\\n') == 'IMPOSSIBLE'\nassert solution('2 3 2\\n.**\\nX..\\n') == 'IMPOSSIBLE'\nassert solution('3 3 4\\n***\\n*X*\\n***\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 2\\n..*\\nX..\") == \"RL\"\nassert solution(\"5 6 14\\n..***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n\") == \"DLDDLLLRRRUURU\"\nassert solution(\"3 3 4\\n***\\n*X*\\n***\") == \"IMPOSSIBLE\"\n\n\"\"\""
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 10\") == \"2\"\nassert solution(\"100 10\") == \"5\"\nassert solution(\"100 100\") == \"1\"\n\"\"\""
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == 2\nassert solution(\"10 7\") == 6\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1') == '2'\nassert solution('10 7') == '6'\nassert solution('1000000000000 1') == '1000000000000'\n\n\"\"\""
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == 2\nassert solution(\"10 7\") == 6\nassert solution(\"1000000000000 1\") == 100000000000000\n\"\"\"\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1') == '2'\nassert solution('10 7') == '6'\nassert solution('1000000000000 1') == '1000000000000'\n\"\"\"\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"10 7\") == \"6\"\nassert solution(\"1000000000000 1\") == \"1000000000000\"\n\"\"\"\n\na, b = map(int, input().split())\ncount = 1\n\nwhile a > b:\n    a -= b\n    count += 1\nprint(count)\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('1 1') == '1'\nassert solution('10 7') == '6'\nassert solution('10 1000000') == '1000000000000'\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 7\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1') == 2\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\nprint(math.ceil(n / m))\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"10 7\") == \"6\"\nassert solution(\"1000000000000 1\") == \"1000000000000\"\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 3 4 3\") == \"1 2 5 4 3\"\nassert solution(\"5 4 2 3 1\") == \"5 4 2 3 1\"\nassert solution(\"4 4 2 3 1\") == \"5 4 2 3 1\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 2 3 1\") == \"1 2 3 4\"\nassert solution(\"5 4 5 3 1\") == \"5 4 2 3 1\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\np = []\n\nfor i in range(n):\n    p.append(a[i] if a[i]!= b[i] else b[i])\n\nprint(\" \".join(map(str, p)))\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 3 4 3\n1 2 5 4 5''') == '1 2 5 4 3'\nassert solution('''5\n4 4 2 3 1\n5 4 5 3 1''') == '5 4 2 3 1'\nassert solution('''4\n1 1 3 4\n1 4 3 4''') == '1 2 3 4'\nassert solution('''5\n1 1 2 3 4''') == '1 2 3 4 5'\nassert solution('''4\n1 1 3 4\n1 4 3 4''') == '1 2 3 4'"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 3 4\\n1 4 3 4\") == \"5 4 2 3 1\"\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2 3 1\") == \"5 4 2 3 1\"\nassert solution(\"4 4 2 3 1\") == \"5 4 2 3 1\"\nassert solution(\"5 4 5 3 1\") == \"5 4 2 3 1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 2 3 1\") == \"1 2 5 4 3\"\nassert solution(\"4 4 2 3 1\") == \"5 4 2 3 1\"\nassert solution(\"1 1 3 4\") == \"1 2 3 4\"\nassert solution(\"1 4 3 4\") == \"1 2 3 4\"\n\n---\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 4 3\\n1 2 5 4 5') == '1 2 5 4 3'\nassert solution('5\\n4 4 2 3 1\\n5 4 5 3 1') == '5 4 2 3 1'\nassert solution('4\\n1 1 3 4\\n1 4 3 4') == '1 2 3 4'\n\n----- Problem -----\nSengoku has obtained astronomical observations of the formation of some strange meteor outbursts. There are n meteoroids in total.\n\nSengoku has constructed a permutation p_1, p_2,..., p_{n} of integers from 1 to n inclusive, with each integer representing a colour, wishing for the colours to see in the coming meteor outburst. Two incredible outbursts then arrived, each with n meteorids, colours of which being integer sequences a_1, a_2,..., a_{n} and b_1, b_2,..., b_{n} respectively. Meteoroids' colours were also between 1 and n inclusive, and the two sequences were not identical, that is, at least one i (1 \u2264 i \u2264 n) exists, such that a_{i} \u2260 b_{i} holds.\n\nWell, Sengoku almost had it all \u2014 each of the sequences a and b matched exactly n - 1 elements in Sengoku's permutation. In other words, there is exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\nSengoku's wishes have long since forgotten, but she can still reconstruct the original sequence a and b. You are to reconstruct any possible permutation Sengoku could have had on that night.\n\nIt is guaranteed that such permutation exists.\n\n----- Code -----\n\nl = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(0, len(a)):\n    if (a[i]!= b[i]):\n        print(i + 1)\n        break\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 3\\n1 2 5 4 5\\n') == '1 2 5 4 3'\nassert solution('4\\n1 1 3 4\\n1 4 3 4\\n') == '1 2 3 4'\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_cases[0]) == \"1 2 5 4 3\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 3\\n1 2 5 4 5\") == \"1 2 5 4 3\"\nassert solution(\"5\\n4 4 2 3 1\\n5 4 5 3 1\") == \"5 4 2 3 1\"\nassert solution(\"4\\n1 1 3 4\\n1 4 3 4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 15\") == '1 2 3'\nassert solution(\"4 67\") == '2 1 3'\nassert solution(\"4 68\") == '4 1 2'\n\n\n\n-----"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n\n\"\"\""
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 67') == '1 2 3'\nassert solution('3 15') == '1 2 3'\nassert solution('4 68') == '2 1 3'\nassert solution('4 68') == '4 1 2'\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 15') == '1 2 3'\nassert solution('4 67') == '2 1 3'\nassert solution('4 68') == '4 1 2'\n\n\"\"\"\n\nfrom math import pi, acos"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n\"\"\""
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n\"\"\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n\n'''\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == \"YES\"\nassert solution(3) == \"NO\"\nassert solution(3) == \"YES\"\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n10\n20\n30''') == 'YES'\nassert solution('''3\n120\n120\n120''') == 'NO'\nassert solution('''3\n10\n10\n10''') == 'YES'\nassert solution('''3\n180\n180\n180''') == 'YES'"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10\\n20\\n30\") == \"YES\"\n\nassert solution(\"3\\n10\\n10\\n10\") == \"NO\"\n\nassert solution(\"3\\n10\\n120\\n120\") == \"YES\"\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n10\\n10\\n10') == 'YES'\nassert solution('3\\n120\\n120\\n120') == 'NO'\nassert solution('3\\n10\\n10\\n10') == 'YES'\nassert solution('3\\n10\\n10\\n10') == 'NO'\n\"\"\"\nimport sys\nfrom itertools import permutations\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10\\n10\\n10\") == \"YES\"\nassert solution(\"3\\n120\\n120\\n120\") == \"NO\"\nassert solution(\"3\\n110\\n110\\n110\") == \"YES\"\n\n'''"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10\\n10\\n10\") == \"YES\"\nassert solution(\"3\\n120\\n120\\n120\") == \"NO\"\nassert solution(\"3\\n10\\n10\\n10\") == \"YES\"\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n10\\n10\\n10') == 'NO'\nassert solution('3\\n120\\n120\\n120') == 'YES'\n\"\"\"\n\na = [360, 60, 60, 60]\nn = int(stdin.readline().strip())\nfor i in range(n):\n    a.append(int(stdin.readline().strip()))\na.sort()\nfor i in range(n):\n    if (a[i] - a[i+1]) % 360 == 0:\n        print('YES')\n        exit()\nprint('NO')\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n10\\n20\\n30\") == \"YES\"\nassert solution(\"3\\n10\\n10\\n10\") == \"NO\"\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n10\\n10\\n10') == 'YES'\nassert solution('3\\n10\\n10\\n10') == 'NO'\nassert solution('3\\n120\\n120\\n120') == 'YES'"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10\\n20\\n30\") == \"YES\"\nassert solution(\"3\\n10\\n10\\n10\") == \"NO\"\nassert solution(\"4\\n120\\n120\\n120\\n120\") == \"YES\"\nassert solution(\"2\\n10\\n10\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 6 3\") == 2\n\n\"\"\"\nfrom typing import List\n\nimport sys\n\nstdin = sys.stdin\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 6 3\") == 2\n\nassert solution(\"3 1 5 6\") == 8\n\nassert solution(\"8 3 3 2\") == 2\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 6 3\") == \"2\"\nassert solution(\"3 1 5 6\") == \"8\"\nassert solution(\"8 3 3 2\") == \"2\"\n\"\"\"\n\nfrom itertools import combinations\nimport math"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 6 3\") == \"2\"\n\nassert solution(\"3 1 5 6\") == \"8\"\n\nassert solution(\"8 3 3 2\") == \"2\"\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 6 3') == '2'\nassert solution('3 1 5 6') == '8'\nassert solution('8 3 3 2') == '2'\n\n\"\"\""
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 6 3\") == 2\nassert solution(\"3 1 5 6\") == 8\nassert solution(\"8 3 3 2\") == 3\n\"\"\"\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 6 3\") == \"2\"\nassert solution(\"3 1 5 6\") == \"8\"\nassert solution(\"8 3 3 2\") == \"2\"\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 6 3') == 2\n\nassert solution('3 1 5 6') == 8\n\nassert solution('2 3 10 4') == 3\n\n\"\"\"\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 6 3') == 2\nassert solution('3 1 5 6') == 8\n\"\"\"\nfrom typing import List\nfrom itertools import permutations\nimport math\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 6 3\") == \"2\"\nassert solution(\"3 1 5 6\") == \"8\"\nassert solution(\"8 3 3 2\") == \"2\"\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5') == '3'\nassert solution('6 3') == '1'\n\"\"\""
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\") == \"1\"\nassert solution(\"3 5\") == \"3\"\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"6 3\") == \"1\"\n\n\nfrom math import gcd"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5') == '3'\nassert solution('6 3') == '1'\nassert solution('10 3') == '1'\nassert solution('1 10') == '1'\nassert solution('1 1') == '1'\n\nimport unittest\nfrom io import StringIO\nimport sys\n\n\nclass TestStringMethods(unittest.TestCase):\n    def setUp(self):\n        self.capturedOutput = StringIO()\n        sys.stdout = self.capturedOutput\n\n    def tearDown(self):\n        sys.stdout = sys.__stdout__\n\n    def test_solution(self):\n        input = \"3 5\\n6 3\\n10 3\\n1 10\\n1 1\\n\"\n        self.capturedOutput.write(solution(input))\n        self."
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n') == '3'\n\"\"\""
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"6 3\") == \"1\"\n\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\n') == '3'\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"6 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5') == '3'\nassert solution('6 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('1') == 'No'\nassert solution('3\\n1 -1') == 'No'\nassert solution('3\\n1 -1\\n2 4') == 'Yes'\nassert solution('3\\n-1 4\\n-1 6') == 'No'\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n-1 1\\n-1 4\\n-1 6') == 'Yes'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA_B_pair = [sys.stdin.readline().split() for _ in range(N)]\nA_B_pair = [list(map(int, pair)) for pair in A_B_pair]\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 -1\\n-1 4\\n-1 6\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 -1\\n-1 4\\n-1 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 -1\\n-1 2\\n-1 4\") == \"Yes\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 -1\\n-1 4\\n-1 6\") == \"Yes\"\nassert solution(\"3\\n1 4\\n-1 6\") == \"No\""
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n1 -1\n-1 4\n-1 6\n''') == 'Yes'\nassert solution('''3\n-1 6\n1 -1\n-1 4\n''') == 'Yes'\nassert solution('''3\n-1 -1\n-1 6\n1 6\n''') == 'No'\nassert solution('''3\n-1 -1\n6 -1\n6 -1\n''') == 'No'\nassert solution('''2\n-1 3\n1 3\n''') == 'No'\n\n-----\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 -1\\n-1 4\\n-1 6\") == \"Yes\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 -1\\n-1 4\\n-1 6\") == \"Yes\"\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 -1\\n-1 4\\n-1 6') == 'Yes'\n\n-----Problem-----\n\nN = int(stdin.readline())\nA_l = []\nB_l = []\nfor _ in range(N):\n    A, B = [int(num) for num in stdin.readline().split()]\n    A_l.append(A)\n    B_l.append(B)\n\nfor i in range(N):\n    if A_l[i] == -1:\n        continue\n    if B_l[i] == -1:\n        continue\n    for j in range(i+1, N):\n        if A_l[i] == A_l[j] and B_l[i] == B_l[j]:\n            print('Yes')\n            exit()\nprint('No')\n\nassert solution('3\\n1 -1\\n-1 4\\n-1 6') == 'Yes'"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") =='respectable'\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == 'ugly'\n\n\"\"\"\nfrom typing import List, Dict"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) =='respectable'\nassert solution(test_input_2) == 'ugly'\n\"\"\""
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n3 0\\n3 1\\n3 2\\n4 0\\n4 1\\n4 2\\n5 0\\n5 1\\n5 2\\n6 0\\n6 1\\n6 2\\n7 0\\n7 1\\n7 2') =='respectable'\nassert solution('0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n3 0\\n3 1\\n3 2\\n4 0\\n4 1\\n4 2\\n5 0\\n5 1\\n5 2\\n6 0\\n6 1\\n6 2\\n7 0\\n7 1\\n7 2') == 'ugly'\nassert solution('0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\\n7 0') == 'ugly'\nassert solution('0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2\\n3 0\\n3 1\\n3 2\\n4 0\\n4 1\\n4 2\\n5 0\\n5 1\\n5 2\\n6 0\\n6 1\\n6 2\\n7 0\\n7 1\\n7 2') == 'ugly'\nassert solution('0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n3 0\\n3 1\\n3 2\\n4 0\\n4 1\\n4 2\\n5 0\\n5 1\\n5 2\\n6 0\\n6 1\\n6 2\\n7 0\\n7 1\\n7 2') == 'ugly'\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0\\\\n0 1\\\\n0 2\\\\n1 0\\\\n1 2\\\\n2 0\\\\n2 1\\\\n2 2\\\\n3 0\\\\n3 1\\\\n3 2\") == \"respectable\"\nassert solution(\"1 1\\\\n1 2\\\\n1 3\\\\n2 1\\\\n2 2\\\\n2 3\\\\n3 1\\\\n3 2\\\\n3 3\") == \"ugly\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2') =='respectable'\nassert solution('1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3') == 'ugly'\n\"\"\"\n\nx, y = map(int, input().split())\nfirst = [x, y]\nx, y = map(int, input().split())\nsecond = [x, y]\nx, y = map(int, input().split())\nthird = [x, y]\nx, y = map(int, input().split())\nforth = [x, y]\nx, y = map(int, input().split())\nfifth = [x, y]\nx, y = map(int, input().split())\nsixth = [x, y]\nx, y = map(int, input().split())\nseventh = [x, y]"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n3 0\\n3 1\\n3 2\\n4 0\\n4 1\\n4 2\\n5 0\\n5 1\\n5 2\\n6 0\\n6 1\\n6 2\\n7 0\\n7 1\\n7 2\\n\") == \"respectable\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n4 1\\n4 2\\n4 3\\n5 1\\n5 2\\n5 3\\n6 1\\n6 2\\n6 3\\n7 1\\n7 2\\n7 3\\n\") == \"ugly\"\n\"\"\"\n\n\"\"\"\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0434\u043b\u044f \u0438\u0433\u0440\u044b. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0438 \u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0438\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u0438\u0431\u044b\u043b\u0438 \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e t (1 \u2264 t \u2264 10) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 t \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a \u0441 \u0446\u0435\u043b\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u0430. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: x_i \u0438 y_i, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 0 \u0434\u043e 10^6.\n\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (1 \u2264 n \u2264 10^6) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f n \u043f\u0430\u0440 \u0447\u0438\u0441\u0435\u043b \u2014 \u043f\u0440\u0438\u0431\u044b\u043b\u044c \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430. \u041f\u0440\u0438\u0431\u044b\u043b\u044c \u2014 \u044d\u0442\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0435\u0435 10^6.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0433\u043e \u043f\u0440\u0438\u0431\u044b\u043b\u044c \u043d\u0430 \u0435\u0433\u043e \u0438\u0433\u0440\u043e\u0432\u043e\u043c \u043f\u0440\u043e\u0444\u0438\u043b\u0435.\n\n\n-----Sample Input-----\n6\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2\n3\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3 3 1\n4\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3 3 1\n4\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3 3 1\n4\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3 3 1\n4\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3 3 1\n4\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3 3 1\n4\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3 3 1\n4\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3 3 1\n4\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3 3 1\n4\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3 3 1\n4\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3 3 1\n4\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3 3 1\n4\n1 1 1\n1 2 1\n1 3 1\n2 1 1\n2 2 1\n2 3 1\n3 1 1\n3 2 1\n3"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\\\\n0 1\\\\n0 2\\\\n1 0\\\\n1 2\\\\n2 0\\\\n2 1\\\\n2 2\\\\n3 0\\\\n3 2\\\\n4 0\\\\n4 2\\\\n5 0\\\\n5 2\\\\n6 0\\\\n6 2\\\\n7 0\\\\n7 2\") == \"ugly\"\nassert solution(\"0 0\\\\n0 1\\\\n0 2\\\\n1 0\\\\n1 2\\\\n2 0\\\\n2 1\\\\n2 2\\\\n3 0\\\\n3 2\\\\n4 0\\\\n4 2\\\\n5 0\\\\n5 2\\\\n6 0\\\\n6 2\\\\n7 0\\\\n7 2\") == \"ugly\"\nassert solution(\"0 0\\\\n0 1\\\\n0 2\\\\n1 0\\\\n1 2\\\\n2 0\\\\n2 1\\\\n2 2\\\\n3 0\\\\n3 2\\\\n4 0\\\\n4 2\\\\n5 0\\\\n5 2\\\\n6 0\\\\n6 2\\\\n7 0\\\\n7 2\") == \"ugly\"\nassert solution(\"0 0\\\\n0 1\\\\n0 2\\\\n1 0\\\\n1 2\\\\n2 0\\\\n2 1\\\\n2 2\\\\n3 0\\\\n3 2\\\\n4 0\\\\n4 2\\\\n5 0\\\\n5 2\\\\n6 0\\\\n6 2\\\\n7 0\\\\n7 2\") == \"ugly\"\nassert solution(\"0 0\\\\n0 1\\\\n0 2\\\\n1 0\\\\n1 2\\\\n2 0\\\\n2 1\\\\n2 2\\\\n3 0\\\\n3 2\\\\n4 0\\\\n4 2\\\\n5 0\\\\n5 2\\\\n6 0\\\\n6 2\\\\n7 0\\\\n7 2\") == \"ugly\"\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n1 2\\n1 3\") == 'ugly'\nassert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n2 0\\n2 1\\n2 2\") =='respectable'\nassert solution(\"1 1\\n1 2\\n2 1\\n2 2\") == 'ugly'\nassert solution(\"0 0\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\") == 'ugly'\n\"\"\"\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n\") == \"respectable\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n\") == \"ugly\"\n\n\n\"\"\"\n\na = [int(num) for num in stdin.split(\"\\n\")]\npoints = []\nfor i in range(len(a) // 2):\n    points.append((a[2 * i], a[2 * i + 1]))\n\nx_s = [num[0] for num in points]\ny_s = [num[1] for num in points]\n\nx_s.sort()\ny_s.sort()\n\nx_s_set = set(x_s)\ny_s_set = set(y_s)"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"ugly\"\nassert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"respectable\"\n\"\"\"\nimport unittest\nfrom collections import namedtuple\nimport operator\n\n\nPoint = namedtuple('Point', ('x', 'y'))"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n3 10') == 'NO'\nassert solution('4 5\\n4 11') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('4 5') == 'YES'\nassert solution('5 11') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n4 5\\n5 11\") == 'YES\\nYES\\nNO'\n\n\"\"\"\n\n\n\n\"\"\"\n---SOLUTION---\n\nimport math"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n4 5\\n5 11\") == \"YES\\nYES\\nNO\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n4 5\") == 'YES'\nassert solution(\"3 1\\n4 6\") == 'NO'\n\"\"\"\n\ntest_cases = int(stdin.readline().strip())\nfor _ in range(test_cases):\n    n, d = tuple(map(int, stdin.readline().strip().split()))\n    if d <= n:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"4 5\") == \"YES\"\nassert solution(\"5 11\") == \"NO\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"4 5\") == \"YES\"\nassert solution(\"5 11\") == \"NO\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"1 1\"\n) == \"YES\"\n\"\"\""
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"4 5\") == \"YES\"\nassert solution(\"5 11\") == \"NO\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n4 5\\n5 11\\n') == 'YES\\nYES\\nNO'\nassert solution('2 2\\n7 9\\n') == 'NO'\nassert solution('2 2\\n7 2\\n') == 'YES'\nassert solution('1 2\\n4 5\\n5 11\\n') == 'NO'\nassert solution('1 2\\n4 2\\n') == 'YES'\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n\") == '0\\n'\nassert solution(\"3\\n\") == '12\\n'\nassert solution(\"4\\n\") == '8\\n'\nassert solution(\"6\\n\") == '80\\n'\nassert solution(\"10\\n\") == '-1\\n'\n\n-----\n7\n\n0\n\n-----\n8\n\n8\n\n-----\n5\n\n0\n\n-----\n3\n\n0\n\n-----\n9\n\n12\n\n\"\"\"\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n6') == '8080'\nassert solution('6\\n4') == '8080'\nassert solution('6\\n8') == '8888'\n\"\"\"\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"1000\"\nassert solution(\"8\") == \"100\"\nassert solution(\"5\") == \"100\"\nassert solution(\"7\") == \"0\"\nassert solution(\"9\") == \"10000\"\n\"\"\""
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '462'\n\n\"\"\"\n\nk = int(input())"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '462'\nassert solution('6') == '8080'"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '462'\nassert solution('6\\n') == '8080'\nassert solution('9\\n') == '-1'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '462'\nassert solution('6') == '8080'"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3') == '4-8'\nassert solution('2\\n1') == '2-1'\nassert solution('1\\n1') == '2'\nassert solution('1\\n1') == '2'\nassert solution('3\\n1') == '4-8'\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"462\"\nassert solution(\"6\") == \"8080\"\nassert solution(\"1\") == \"-1\"\nassert solution(\"10\") == \"-1\"\nassert solution(\"20\") == \"-1\"\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\\n5\") == '9,9,9,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdefghi\", \"abcefghij\") == 2\nassert solution(\"abcdefghi\", \"bcefghij\") == 0\n\nassert solution(\"ab?b\", \"aabrbb\") == 1\nassert solution(\"ab?b\", \"aabrbbb\") == 1\nassert solution(\"ab?b\", \"aabrbbbb\") == 2\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab?b\") == \"aab\"\nassert solution(\"ab?b\") == \"aab\"\nassert solution(\"ab?b\") == \"aab\"\n\nassert solution(\"ab?c\") == \"aac\"\nassert solution(\"ab?c\") == \"aac\"\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab?b\") == \"aabrbb\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\", \"ebceabazcd\") == \"1 2\"\n\"\"\"\n\ns = input().split()\nt = input()\n\nprint(len(s))\nprint(\" \".join(map(str, range(len(s)))))\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s=\"abc\", t=\"xaybz\") == \"2 3\"\nassert solution(s=\"abcd\", t=\"ebceabazcd\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcd\", \"ebceabazcd\") == 1\nassert solution(\"abcd\", \"ebceabazdc\") == 2\nassert solution(\"abcd\", \"ebcebazcd\") == 0\nassert solution(\"abcd\", \"ebcdabazcd\") == 0\nassert solution(\"abcd\", \"ebcd\") == 0\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s=\"ab?b\", t=\"aabrbb\") == '2'\nassert solution(s=\"ab?b\", t=\"aabrbb\") == '2'\n\nassert solution(s=\"ab?c\", t=\"aabrbb\") == '2'\nassert solution(s=\"a?b?c\", t=\"aaabc\") == '0'\nassert solution(s=\"a?b?c\", t=\"ab?c\") == '0'\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == \"2\"\nassert solution(\"ebceabazcd\") == \"1 2\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"1 2 3 4 5\"\nassert solution(\"aaaaaaa\") == \"1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"aaaaaab\") == \"2 3 4 5\"\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\", \"ebceabazcd\") == 1\nassert solution(\"abcd\", \"ebceebazcd\") == 2\nassert solution(\"abcd\", \"ebceebaeazcd\") == 2\nassert solution(\"abcd\", \"ebceebaeabzcd\") == 2\nassert solution(\"abcd\", \"ebceebaebzcd\") == 2\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab?b\") == \"aabrbb\"\nassert solution(\"ab?c\") == \"aabrbb\"\nassert solution(\"ab?b\") == \"aabrbb\"\nassert solution(\"ab?c\") == \"aabrbb\"\nassert solution(\"a?b\") == \"ab\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''\n8 5 2\n'''\n) == '4 8\\n5 7\\n2 3\\n8 1\\n2 1'\n\nassert solution(\n'''\n8 5 2\n'''\n) == '-1'\n\nassert solution(\n'''\n8 4 2\n'''\n) == '4 8\\n5 7\\n2 3\\n8 1\\n2 1'\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3 2\n''') == '1 2\\n1 3\\n3 4\\n3 5\\n', 'It works for sample 1'\nassert solution('''8 5 2\n''') == '-1', 'It works for sample 2'\nassert solution('''8 4 2\n''') == '4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n', 'It works for sample 3'\n\"\"\"\n\n\n\nimport sys\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 5 2\\n8 4 2\") == \"4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\"\nassert solution(\"5 3 2\\n8 4 2\") == \"1 2\\n1 3\"\nassert solution(\"4 3 2\\n4 4 2\") == \"1 2\\n1 3\"\nassert solution(\"4 4 2\\n4 4 2\") == \"1 2\\n1 3\"\nassert solution(\"8 8 3\") == \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n8 5 2\n\"\"\"\n) == \"\"\"\n1 2\n1 3\n3 4\n3 5\n\"\"\"\n\nassert solution(\n\"\"\"\n8 4 2\n\"\"\"\n) == \"\"\"\n-1\n\"\"\"\n\nassert solution(\n\"\"\"\n6 3 1\n\"\"\"\n) == \"\"\"\n-1\n\"\"\"\n\nassert solution(\n\"\"\"\n1 1 1\n\"\"\"\n) == \"\"\"\n-1\n\"\"\"\n\nassert solution(\n\"\"\"\n3 2 1\n\"\"\"\n) == \"\"\"\n1 2\n\"\"\""
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2\") == \"1 2\\n1 3\\n3 4\\n3 5\"\nassert solution(\"8 5 2\") == \"-1\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 2\\n1 2\\n1 3\\n3 4\\n3 5\\n') == '1 2\\n1 3\\n3 4\\n3 5\\n', 'Test failed'\nassert solution('8 5 2\\n4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n') == '4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n', 'Test failed'\n\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2\\n8 5 2\\n\") == \"1 2\\n1 3\\n3 4\\n3 5\\n4 8\\n4 5\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\"\nassert solution(\"8 5 2\\n\") == \"-1\"\n\"\"\""
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4 2\\n5 7\\n2 3\\n8 1\\n2 1\") == \"4 8\\n5 7\\n2 3\\n8 1\\n2 1\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3 2\\n4 5 6 7 1 3') == '3 1\\n1 2\\n3 4'\nassert solution('7 5 2\\n4 8 6 7 1 3') == '-1'\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 2') == '1 2\\n1 3\\n3 4'\nassert solution('8 5 2') == '-1'\nassert solution('8 4 2') == '4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6'\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\n\"\"\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\nassert solution(\"6 1\") == \"1.0000000\"\nassert solution(\"100 100\") == \"3.2429391\"\nassert solution(\"6 1000\") == \"1.0000000\"\nassert solution(\"4 1000\") == \"2.9146166\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\") == \"6.4641016\"\nassert solution(\"2 4\") == \"1.0000000\"\nassert solution(\"100 100\") == \"3.2429391\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\nassert solution(\"6 1\") == \"1.0000000\"\nassert solution(\"100 100\") == \"3.2429391\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == '6.4641016'\nassert solution(\"6 1\") == '1.0000000'\nassert solution(\"100 100\") == '3.2429391'\nassert solution(\"1000 100\") == '5.4101095'\nassert solution(\"10000 100\") == '6.4641016'\n\"\"\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\nassert solution(\"6 1\") == \"1.0000000\"\n\n'''"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == '6.4641016'\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n\") == '6.4641016'\n\"\"\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\n\"\"\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1\") == \"6.4641016\"\nassert solution(\"7 100\") == \"3.2429391\"\n\"\"\"\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100', '50', '50') == '50'\n\"\"\"\n\nimport math"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100\") == 50\n\nassert solution(\"199\") == 119.4\n\nassert solution(\"1\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"199\\n60\\n40\") == \"119.4\"\n\nprint(\"Success!\")\n\n\"\"\"\n\nl = int(input())\np, q = map(int, input().split())\n\nx1 = l // 2\nx2 = l // 2\n\nwhile True:\n    if x1 ** 2 + x2 ** 2 == l ** 2:\n        print(abs(x1 - x2))\n        break\n    x1 += p\n    x2 += q\n    if x1 > l:\n        x1 -= l\n    if x2 > l:\n        x2 -= l\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('5') == '2.5'\nassert solution('999') == '499.5'\nassert solution('1000') == '500'\n'''\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100\\n50\\n50\\n') == '50'\n\"\"\"\n\n\"\"\"\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0440\u043e\u0431\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043b\u0435\u0436\u0430\u0442 \u043c\u043e\u043d\u0435\u0442\u044b.\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e mm \u2014 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043a\u043e\u0440\u043e\u0431\u043e\u043a \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u043a\u043e\u0440\u043e\u0431\u043a\u043e\u0432 \u043f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0442 \u043c\u043e\u043d\u0435\u0442\u044b.\n\u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e kk \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u043d\u0435\u0442 \u0432 \u043e\u0434\u043d\u043e\u0439 \u043f\u0430\u0440\u0435.\n\u0412 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e ppp \u2014 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u043e\u043d\u0435\u0442\u043e\u043f\u0430 \u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e qqq \u2014 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u043e\u043d\u0435\u0442\u043e\u043f\u0430.\n\u0412\u0441\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u043a\u043e\u0440\u043e\u0431\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0434\u0432\u0435 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u043c\u043e\u043d\u0435\u0442\u044b \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0438\u0445 \u043a\u043e\u0440\u043e\u0431\u043e\u043a.\n\nSample Input 1:\n3\n3\n2\n2\nSample Output 1:\n3\nSample Input 2:\n7\n3\n3\n3\nSample Output 2:\n6\nSample Input 3:\n1\n1\n1\nSample Output 3:\n1\n\"\"\""
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''100''') == '50'\nassert solution('''100\n60\n40''') == '119.4'\n\n\"\"\"\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\\n50\\n50\") == \"50\"\nassert solution(\"199\\n60\\n40\") == \"119.4\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\\n50\\n50\\n\") == \"50\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100\\n50\\n50\\n\") == '50'\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1\\n1') == '5'\nassert solution('5\\n2\\n4') == '7.5'\nassert solution('5\\n2\\n5') == '10'\n\"\"\"\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"2014\", \"2015\", \"2016\"]) == \"2015\"\nassert solution([\"2050\"]) == \"2050\"\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2014 2015 2016\\n') == '2014'\nassert solution('1\\n2050\\n') == '2050'\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2014 2016 2015\\n\") == \"2015\"\nassert solution(\"1\\n2050\\n\") == \"2050\""
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n2014 2016 2015\n''') == 2015\nassert solution('''1\n2050\n''') == 2050\nprint('Success')\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2014 2016 2015\") == \"2015\"\nassert solution(\"1\\n2050\") == \"2050\"\n\n\n\"\"\""
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2014 2016 2015\\n') == '2015'\n\nassert solution('1\\n2050\\n') == '2050'"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2014 2016 2015\\n\") == \"2015\"\nassert solution(\"1\\n2050\\n\") == \"2050\"\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2014 2016 2015\") == \"2015\"\nassert solution(\"1\\n2050\") == \"2050\"\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2014 2016 2015\") == \"2015\"\nassert solution(\"2\\n2050\") == \"2050\"\nprint(\"Test finished.\")"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2014 2016 2015\") == \"2015\"\nassert solution(\"1\\n2050\") == \"2050\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5CY??Y') == 'Yes'\nassert solution('5?CYC?') == 'Yes'\nassert solution('5?C??Y') == 'Yes'\nassert solution('5C?C?Y') == 'Yes'\nassert solution('5C?C??Y') == 'No'\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5CY??Y\") == \"Yes\"\nassert solution(\"5?CYC?Y\") == \"Yes\"\nassert solution(\"5C??MM\") == \"No\"\nassert solution(\"3MCY\") == \"No\"\nassert solution(\"3CMM\") == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5CY??Y\") == \"Yes\"\nassert solution(\"5?CYC?Y\") == \"Yes\"\nassert solution(\"5?C??Y\") == \"Yes\"\nassert solution(\"5?C?C?Y\") == \"Yes\"\nassert solution(\"5??C?Y\") == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5CY??Y') == 'Yes'\nassert solution('5?CYC?Y') == 'Yes'\nassert solution('5C??MM') == 'No'\nassert solution('5??MCY') == 'No'\nassert solution('3MMY') == 'No'\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5CY??Y\") == \"Yes\"\nassert solution(\"5?CYC?Y\") == \"Yes\"\nassert solution(\"5?C??M?Y\") == \"No\"\nassert solution(\"3??M??M\") == \"No\"\nassert solution(\"1MM?M\") == \"Yes\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5CY??Y') == 'Yes'\nassert solution('5?CYC?Y') == 'Yes'\nassert solution('5?C??Y') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nC??Y\") == \"Yes\"\nassert solution(\"5\\nC?C?Y\") == \"Yes\"\nassert solution(\"5\\n?CYC??\") == \"Yes\"\nassert solution(\"5\\nC??MM\") == \"No\"\nassert solution(\"5\\nC?C?Y\") == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5CY??Y\") == \"Yes\"\nassert solution(\"5?C??Y\") == \"Yes\"\nassert solution(\"5?C?C?Y\") == \"Yes\"\nassert solution(\"5??C?C?Y\") == \"No\"\nassert solution(\"5?C?MC?Y\") == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nC??Y\") == \"Yes\"\nassert solution(\"5\\nC??MM\") == \"Yes\"\nassert solution(\"5\\n?C??Y\") == \"Yes\"\nassert solution(\"5\\n?C??MM\") == \"No\"\nassert solution(\"5\\n?C??MC\") == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 5 3\") == \"72900\"\nassert solution(\"17 97 41 37 11\") == \"317451037\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 2 5 3') == '72900'\nassert solution('17 97 41 37 11') == '317451037'\n\"\"\"\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 5 3\") == '72900'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"17 97 41 37 11\") == \"317451037\"\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 5 3\") == \"72900\"\nassert solution(\"17 97 41 37 11\") == \"317451037\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"100 100 100 100 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 5 3\") == \"72900\"\nassert solution(\"17 97 41 37 11\") == \"317451037\"\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 5 3\") == \"72900\"\nassert solution(\"17 97 41 37 11\") == \"317451037\"\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2 5 3') == '72900'\n\nassert solution('17 97 41 37 11') == '317451037'\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 5 3\") == \"72900\"\nassert solution(\"17 97 41 37 11\") == \"317451037\"\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 5 3\") == \"72900\"\nassert solution(\"17 97 41 37 11\") == \"317451037\""
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcd') == 'abcd'\nassert solution('codef') == 'codef'\nassert solution('orces') == 'orces'\nassert solution('x') == 'x'\nassert solution('xyz') == 'xyz'\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\ntab\\none\\nbat\") == \"6\\ntabbat\"\nassert solution(\"4 2\\noo\\nox\\nxo\\nxx\") == \"6\\noxxxxo\"\nassert solution(\"3 5\\nhello\\ncodef\\norces\") == \"0\"\nassert solution(\"9 4\\nabab\\nbaba\\nabcd\\nbcde\\ncdef\\ndefg\\nwxyz\\nzyxw\\nijji\") == \"20\\nababwxyzijjizyxwbaba\"\n\n\n-----Test-----\n\nInput\n1\ncodef\n\nOutput\n3\ncodef\n\n\n-----Problem-----\n\nGiven a string $s$ consisting of lowercase Latin letters, find out the longest palindrome that can be obtained by removing only one letter from $s$ or, equivalently, the longest palindrome that can be obtained by replacing no more than one character from $s$ with any lowercase Latin letter.\n\nThe answer should be given as a string.\n\n\n-----Solution-----\n\n\n\n\"\"\"\n\n\nfrom itertools import combinations\nimport copy\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\ntab\\none\\nbat\") == \"6\\ntabbat\"\nassert solution(\"4 2\\noo\\nox\\nxo\\nxx\") == \"6\\noxxxxo\"\nassert solution(\"3 5\\nhello\\ncodef\\norces\") == \"0\"\nassert solution(\"9 4\\nabab\\nbaba\\nabcd\\nbcde\\ncdef\\ndefg\\nwxyz\\nzyxw\\nijji\") == \"20\\nababwxyzijjizyxwbaba\""
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\nhello\\ncodef\\norces\") == 20\nassert solution(\"4 2\\noo\\nxo\\nxo\\nxx\") == 6\nassert solution(\"9 4\\nabab\\nbaba\\nabcd\\ncdef\\ndefg\\nwxyz\\nzyxw\\nijji\") == 20\n\n\"\"\"\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\ntab\\none\\nbat') == '6\\ntabbat'\nassert solution('4 2\\noo\\nox\\nxo\\nxx') == '6\\noxxxxo'\nassert solution('3 5\\nhello\\ncodef\\norces') == '0'\nassert solution('9 4\\nabab\\nbaba\\nabcd\\nbcde\\ncdef\\ndefg\\nwxyz\\nzyxw\\nijji') == '20\\nababwxyzijjizyxwbaba'\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\nabc\\nabd\\nabc\") == \"abc\"\nassert solution(\"4 2\\nac\\nab\\nad\\nbc\") == \"ac\"\nassert solution(\"3 5\\nxxxx\\nyyyy\\nzzzz\") == \"xxxxyyzz\"\nassert solution(\"9 4\\nabc\\nbca\\nacd\\ndca\\nbbb\\nacc\\nccc\") == \"acd\"\nassert solution(\"7 3\\nzzz\\nzzz\\nzzz\\nzzz\\nzzz\\nzzz\") == \"\"\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\nfoo\\nbar\") == \"1\\nfoo\"\nassert solution(\"1 1\\nA\") == \"0\\n\"\nassert solution(\"2 2\\noo\\nox\") == \"6\\noxxo\"\nassert solution(\"3 3\\nabc\\ncba\") == \"6\\nabcba\"\nassert solution(\"4 2\\nzzz\\nabc\") == \"0\\n\"\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"tabbat\"\nassert solution(\"4 2\") == \"oxxxxo\"\nassert solution(\"3 5\") == \"\"\n\nsolution(\"9 4\", \"abab\", \"baba\", \"abcd\", \"bcde\", \"cdef\", \"defg\", \"wxyz\", \"zyxw\", \"ijji\")\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\ntab\\none\\nbat') == '6\\ntabbat'\nassert solution('4 2\\noo\\nox\\nxo\\nxx') == '6\\noxxxxo'\nassert solution('3 5\\nhello\\ncodef\\norces') == '0'\nassert solution('9 4\\nabab\\nbaba\\nabcd\\nbcde\\ncdef\\ndefg\\nwxyz\\nzyxw\\nijji') == '20\\nababwxyzijjizyxwbaba'\n\"\"\""
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"12\""
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\") == \"1\"\nassert solution(\"3\\n1 3 4\") == \"3\"\nassert solution(\"3\\n1000000000 1000000000 1000000000\") == \"1999982505\"\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4') == '1'\nassert solution('2\\n2 3') == '1'\nassert solution('1\\n1') == '0'\nassert solution('3\\n1 2 3') == '1'\n\n\"\"\"\n\nfrom collections import deque\n\n\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 1') == '1'\nassert solution('3 1 3') == '0'\nassert solution('3 2 3') == '2'\n\n-----\n\n### solution"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 2\") == \"1\"\n\"\"\"\n\n\"\"\"\n    1 2 4\n    \n    1 2 4\n    \n    1 2 4\n    \n    1 2 4\n\"\"\"\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2') == '1'\nassert solution('4 1 3') == '1'\nassert solution('2 1 1') == '0'\nassert solution('1') == '0'\n\"\"\"\nimport heapq\nfrom typing import List\nfrom collections import deque\n\nclass HeapNode:\n    def __init__(self, value, prev, i):\n        self.value = value\n        self.prev = prev\n        self.i = i\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n = int(stdin)\n        a = list(map(int, stdin.split(' ')))\n        h = [HeapNode(a[i], None, i) for i in range(n)]\n        heapq.heapify(h)\n        c = 1\n        count = 0\n        while count < n - 1:\n            node = heapq.heappop(h)\n            if node.i < n - 1:\n                count += 1\n                if node.value < h[node.i + 1].value:\n                    heapq.heappush(h, HeapNode(node.value - 1, node, node.i))\n                else:\n                    heapq.heappush(h, HeapNode(node.value + 1, node, node.i))\n        ans = 0\n        while len(h) > 0:\n            ans += c * (c - 1)\n            c += 1\n            node = heapq.heappop(h)\n            if node.prev is not None:\n                ans -= (c - node.value) * (c - node.value + 1) // 2\n        return str(ans)\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3 2\") == \"1\"\nassert solution(\"3\\n1000000000 1000000000 1000000000\") == \"1999982505\"\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 2\") == \"1\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nnums = list(map(int, sys.stdin.readline().strip().split()))\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"1\"\nassert solution(\"3 2 1\") == \"1\"\nassert solution(\"3 3 3\") == \"1\"\nassert solution(\"3 3 3 1\") == \"1\"\nassert solution(\"3 3 3 1 1\") == \"1\"\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 2') == '1'\n\nassert solution('1000000000 1000000000 1000000000') == '1999982505'\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\") == '1'\nassert solution(\"3\\n1000000000 1000000000 1000000000\") == '1999982505'\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n4\\n2 1 3 1\") == '1'\nassert solution(\"2\\n420 420\") == '2'\n\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 3 1\") == \"1\"\nassert solution(\"2\\n420 420\") == \"2\"\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n2 1 3 1\n2\n420 420\n''') == '1'\nassert solution('''4\n1 1 2 1\n2\n420 420\n''') == '2'\nassert solution('''5\n4 1 1 5 1\n2\n420 420\n''') == '2'\nassert solution('''5\n1 1 2 1 3\n2\n420 420\n''') == '3'\nassert solution('''3\n4 1 1 5 1\n2\n420 420\n''') == '2'\n\n'''\n5\n1 1 2 1 3\n2\n420 420\n'''\n\n\n'''\n4\n4 1 1 5 1\n2\n420 420\n'''"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 1 3 1') == '1'\nassert solution('2 420 420') == '2'"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4 3 7\") == 2\nassert solution(\"420 420\") == 2\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n2 1 3 1\n4\n420 420''') == '1'\nassert solution('''4\n2 1 3 1\n2\n420 420''') == '2'\nassert solution('''3\n5\n7 5 4 1\n4\n2 5 4 3''') == '2'\nassert solution('''1\n1\n5''') == '2'\nassert solution('''3\n2 5 1\n1\n4 4 2''') == '1'\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 3 1\") == \"1\"\nassert solution(\"2 420 420\") == \"2\"\n\"\"\""
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == 0\nassert solution(\"5\") == 1\nassert solution(\"5 2 4 1\") == 1\nassert solution(\"2 1 3 1\") == 1\nassert solution(\"2 1 3 4\") == 2\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2 1 3 1\\n2\\n420 420\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\") == \"3\"\nassert solution(\"2\\n2\\n1 1\") == \"1\"\nassert solution(\"1\\n2\") == \"1\"\nassert solution(\"1\\n1\\n1\") == \"0\"\n\n\"\"\"\n\nimport math\nfrom functools import reduce"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4\\n2 1 3 1\") == \"1\"\nassert solution(\"2\\n420 420\") == \"2\"\n\n\n\"\"\"\nimport sys"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n0 5 6 7\\n7 8 9 10\\n4 6 10\") == \"TAK\\n1 3\\n\"\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n0 0\\n0 0\\n0 0\") == \"NIE\"\nassert solution(\"2 3\\n7 7 7\\n7 7 10\") == \"TAK\\n1 3\"\nassert solution(\"1 1\\n0\") == \"TAK\\n0\"\nassert solution(\"1 0\\n0\") == \"NIE\"\nassert solution(\"1 0\\n0 1\") == \"NIE\"\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NIE'\nassert solution('2 3\\n7 7 7\\n7 7 10') == 'TAK\\n1 3'\nassert solution('3 2\\n0 0\\n0 0') == 'NIE'\nassert solution('3 2\\n7 7 7\\n7 7 10') == 'NIE'\nassert solution('3 2\\n7 7 7\\n7 7 10\\n0 0') == 'NIE'\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n7 7 7\\n7 7 10\") == \"NIE\"\nassert solution(\"2 3\\n7 7 7\\n7 7 10\") == \"TAK\\n1 3\""
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n0 0\\n0 0\\n0 0') == 'NIE'\nassert solution('2 3\\n7 7 7\\n7 7 10') == 'TAK\\n1 3'\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n7 7 7\\n7 7 10\") == \"TAK\\n1 3\"\n\n\"\"\"\nimport sys\nfrom typing import List, Dict, Tuple, Set\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\") == \"NIE\"\nassert solution(\"2 3\\n7 7 7\\n7 7 10\") == \"TAK\"\nassert solution(\"4 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\") == \"NIE\"\nassert solution(\"4 4\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3\\n4 4 4 4\") == \"NIE\"\n\"\"\"\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2\n0 0\n0 0\n0 0''') == 'NIE'\n\nassert solution('''2 3\n7 7 7\n7 7 10''') == 'TAK'\n\nassert solution('''3 2\n0 0\n0 0\n0 0''') == 'NIE'\n\nassert solution('''2 3\n7 7 7\n7 7 10\n\n''') == 'NIE'\n\nassert solution('''3 2\n0 0\n0 0\n0 0\n''') == 'NIE'"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n0 0\\n0 0\\n0 0\") == \"NIE\"\n\nassert solution(\"2 3\\n7 7 7\\n7 7 10\") == \"TAK\\n1 3\"\nassert solution(\"3 2\\n1 1 1\\n1 1 1\") == \"NIE\"\nassert solution(\"3 2\\n1 1 1\\n0 0 0\") == \"NIE\"\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n7 7 7\\n7 7 10\") == \"TAK\\n1 3\"\n\"\"\"\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"contest\") == \"10\"\n\nassert solution(\"son\") == \"10\"\n\nassert solution(\"sonnet\") == \"10\"\n\nassert solution(\"tactcoa\") == \"8\"\n\"\"\"\n\ns = input().strip()\nt = input().strip()\n\nlength = len(t)\nans = float(\"inf\")\n\nfor i in range(length):\n    if t[:i + 1] in s * 10:\n        ans = min(ans, i + 1)"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"contest\"\n    \"son\"\n) == (\n    \"10\"\n)\n\"\"\"\n\ns = stdin.readline().strip()\nt = stdin.readline().strip()"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('contest') == '10'\nassert solution('son') == '-1'"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('contest') == 10\nassert solution('son') == -1\n\"\"\""
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"contest\") == 10\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"contest\") == \"10\"\n\"\"\"\n\n\"\"\"\nLet s' be the concatenation of 10^100 copies of s. t is a subsequence of the string {s'}_1{s'}_2\\ldots{s'}_i (the first i characters in s').\nThe base case is i=0, so s' is empty.\n\"\"\""
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"contest\") == 10\nassert solution(\"son\") == 10\nassert solution(\"contest\") == -1\n\"\"\"\n\ns = input()\nt = input()\n\ns_n = 10 ** 100 * len(s)\n\nfor i in range(1, 1000000):\n    if s_n % (i * len(s)) == s:\n        print(i)\n        break\nelse:\n    print(-1)"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"contest\") == '10'\n\n\"\"\""
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"contest\") == \"10\"\nassert solution(\"son\") == \"10\""
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 3\\n3 4\\n1 4\") == \"YES\"\nassert solution(\"4 4\\n3 1\\n2 3\\n3 4\\n1 2\") == \"NO\"\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n'''\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 3\\n3 4\\n1 4') == 'YES'\nassert solution('10 4\\n4 3\\n5 10\\n8 9\\n1 2') == 'YES'\nassert solution('3 2\\n1 2\\n2 3') == 'NO'\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3\\n3 4\\n1 4\\n\") == \"YES\"\nassert solution(\"4 4\\n3 1\\n2 3\\n3 4\\n1 2\\n\") == \"NO\"\nassert solution(\"10 4\\n4 3\\n5 10\\n8 9\\n1 2\\n\") == \"YES\"\nassert solution(\"3 2\\n1 2\\n2 3\\n\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES'\nassert solution('\\n1 2\\n2 3') == 'NO'\nassert solution('\\n1 3\\n2 4') == 'YES'\nassert solution('\\n2 3\\n3 4') == 'YES'\nassert solution('\\n1 3\\n2 4\\n3 5') == 'NO'\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 3\\n3 4\\n1 4\") == \"YES\"\nassert solution(\"4 4\\n3 1\\n2 3\\n3 4\\n1 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 3\\n3 4\\n1 4\") == \"YES\"\nassert solution(\"4 4\\n3 1\\n2 3\\n3 4\\n1 2\") == \"NO\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('5 3\\n3 4\\n4 5\\n1 2\\n2 3') == 'NO'\nassert solution('6 3\\n3 4\\n4 6\\n1 2\\n2 3') == 'NO'\nassert solution('6 4\\n4 6\\n1 2\\n2 3\\n3 4\\n1 2') == 'YES'\nassert solution('7 3\\n3 4\\n4 7\\n1 2\\n2 3\\n3 5\\n1 2\\n2 3\\n3 5') == 'NO'\n\n'''"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\\n4 3\\n5 10\\n8 9\\n1 2\\n\") == \"YES\"\nassert solution(\"3 2\\n1 2\\n2 3\\n\") == \"NO\"\n\nimport math\nfrom typing import List, NamedTuple\nfrom collections import Counter, defaultdict\nfrom itertools import product, permutations\nfrom collections import deque\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 3\n1 3\n3 4\n1 4''') == 'YES'\nassert solution('''4 4\n3 1\n2 3\n3 4\n1 2''') == 'NO'\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AprilFool\") == \"AprilFooL\"\n\"\"\""
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AprilFool') == 'AprILFooL'\n\"\"\"\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AprilFool') == 'AprILFooL'\n\"\"\"\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AprilFool\") == \"AprilFooL\"\nprint(solution(\"AprilFool\"))\nassert solution(\"AprilFool\") == \"AprilFooL\"\nprint(solution(\"AprilFool\"))\nassert solution(\"AprilFool\") == \"AprilFooL\"\nprint(solution(\"AprilFool\"))\nassert solution(\"AprilFool\") == \"AprilFooL\"\nprint(solution(\"AprilFool\"))\n\nInput\nAaA\n4\n\nOutput\nAaA\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"April Fool\") == \"AprilFooL\"\n---------------------------------------------------\nInput\nNursery\n2\n\nOutput\nNurEsry\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('AprilFool') == 'AprilFool'\nassert solution('AprilFool' * 2) == 'AprilFoolAprilFool'\nassert solution('AprilFool' * 3) == 'AprilFoolAprilFoolAprilFool'\nassert solution('AprilFool' * 5) == 'AprilFoolAprilFoolAprilFoolAprilFool'\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AprilFool\") == \"AprILFooL\"\n\n\"\"\""
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AprilFool') == 'AprILFooL'\n\"\"\"\n\nfrom typing import Dict, List\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AprilFool\") == \"AprILFooL\"\n-----\nInput\nYerbaYerba\n26\n\nOutput\nYES\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AprilFool\") == \"AprilFool\"\n------------------------------\nInput\n\ngfhfhwihg\n2\n\nOutput\n\nghfh"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(123) == \"First\"\nassert solution(110110) == \"Second\"\nassert solution(111000) == \"Draw\"\nassert solution(11111101) == \"First\"\nassert solution(10110111) == \"Second\"\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()\n\ndp = [[0] * len(t) for _ in range(len(s))]\n\nfor i in range(len(s) - 1, -1, -1):\n    for j in range(len(t) - 1, -1, -1):\n        if s[i] == t[j]:\n            dp[i][j] = max(dp[i + 1][j + 1] + 1, dp[i][j])\n        dp[i][j] = max(dp[i][j], dp[i + 1][j])\n\nm = -1\nfor i in range(len(s)):\n    for j in range(len(t)):\n        m = max(m, dp[i][j])\n\nprint([\"First\", \"Second\", \"Draw\"][m == len(s)])\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0111\") == \"First\"\nassert solution(\"110110\") == \"Second\"\nassert solution(\"111000\") == \"Draw\"\nassert solution(\"01100010\") == \"Draw\"\n\"\"\""
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '01100010'\n) == 'First'\nassert solution(\n    '11100010'\n) == 'Second'\nassert solution(\n    '10111010'\n) == 'Draw'\nassert solution(\n    '10111101'\n) == 'Draw'\nassert solution(\n    '01111101'\n) == 'First'\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0111\") == \"First\"\nassert solution(\"11110\") == \"Second\"\nassert solution(\"111010\") == \"Draw\"\nassert solution(\"110110\") == \"First\"\nassert solution(\"111000\") == \"Draw\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"110110\") == \"First\"\nassert solution(\"111000\") == \"Second\"\nassert solution(\"1110110\") == \"Draw\"\n\"\"\"\nimport sys\nimport math\nfrom collections import deque\nimport heapq\nimport bisect\nfrom typing import List\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11101110\") == \"First\"\nassert solution(\"11101110\") == \"First\"\nassert solution(\"11101110\") == \"First\"\nassert solution(\"11101110\") == \"First\"\n\nassert solution(\"01111011\") == \"Second\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0111\") == \"First\"\nassert solution(\"1111\") == \"Second\"\nassert solution(\"101010\") == \"Draw\"\nassert solution(\"110110\") == \"First\"\nassert solution(\"111010\") == \"Second\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"110110\") == \"First\"\nassert solution(\"00101101\") == \"Second\"\nassert solution(\"111000\") == \"Draw\"\nassert solution(\"01100000\") == \"Draw\"\nassert solution(\"01101010\") == \"Draw\"\n\n\"\"\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"110110\") == \"First\"\nassert solution(\"111000\") == \"Second\"\nassert solution(\"110110\") == \"First\"\nassert solution(\"110110\") == \"Second\"\nassert solution(\"110110\") == \"First\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"011\") == \"First\"\nassert solution(\"100\") == \"Second\"\nassert solution(\"11100\") == \"Draw\"\nassert solution(\"11101\") == \"Draw\"\n\"\"\""
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n-1 1 1 0 0 -1\") == \"2\\n0 0 0 0 0 0\"\nassert solution(\"3\\n100 100 101\") == \"3\\n101 100 100\"\nassert solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\") == \"5\\n-10 -10 -9 -9 -9 -9 -9\"\n\n\n'''"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n-1 1 1 0 0 -1\") == \"2\\n0 0 0 0 0 0\"\nassert solution(\"3\\n100 100 101\") == \"3\\n101 100 100\"\nassert solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\") == \"5\\n-10 -10 -9 -9 -9 -9 -9\"\nassert solution(\"7\\n100 100 101\") == \"3\\n101 100 100\"\nassert solution(\"7\\n100 101 100\") == \"3\\n101 100 100\"\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n-1 1 1 0 0 -1\") == \"2\\n0 0 0 0 0 0\"\nassert solution(\"3\\n100 100 101\") == \"3\\n101 100 100\"\nassert solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\") == \"5\\n-10 -10 -9 -9 -9 -9 -9\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nvalues = [int(num) for num in sys.stdin.readline().strip().split()]\n\nmin_val = min(values)\nmax_val = max(values)\n\nvalues_set = set(values)\n\nvalues_set.add(0)\nvalues_set.add(max_val + 1)\n\nvalues_set = list(values_set)\n\nvalues_set.sort()\n\ncnt_of_vals = len(values_set)\n\nans = [0 for _ in range(cnt_of_vals)]\n\nfor val in values:\n    left, right = 0, cnt_of_vals - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if values_set[mid] > val:\n            right = mid - 1\n        else:\n            left = mid + 1\n    if values_set[left] > val:\n        ans[left] += 1\n    else:\n        ans[right] += 1\n\nsys.stdout.write('{}\\n'.format(' '.join([str(val) for val in ans])))\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n-1 1 1 0 0 -1\") == \"2\\n0 0 0 0 0 0 \"\nassert solution(\"3\\n100 100 101\") == \"3\\n101 100 100 \"\nassert solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\") == \"5\\n-10 -10 -9 -9 -9 -9 -9 \"\nassert solution(\"8\\n-10 -10 -9 -9 -9 -9 -9 -9\") == \"5\\n-10 -10 -9 -9 -9 -9 -9 -9 \"\nassert solution(\"9\\n-10 -10 -9 -9 -9 -9 -9 -9 -9\") == \"5\\n-10 -10 -9 -9 -9 -9 -9 -9 -9 \"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 1 3 2 3 4 4\") == '1 2 3 4 4 4'\n\"\"\"\n\nn = int(stdin.readline())\nx = list(map(int, stdin.readline().split()))\nx.sort()\nx_min = x[0]\nx_max = x[n - 1]"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6\n-1 1 1 0 0 -1\n''') == '2 0 0 0 0 0'\nassert solution('''3\n100 100 101\n''') == '101 100 100'\nassert solution('''7\n-10 -9 -10 -8 -10 -9 -9\n''') == '-10 -10 -9 -9 -9 -9 -9'\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n-1 1 1 0 0 -1\\n\") == \"2\\n0 0 0 0 0 0\\n\"\nassert solution(\"3\\n100 100 101\\n\") == \"3\\n101 100 100\\n\"\nassert solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\\n\") == \"5\\n-10 -10 -9 -9 -9 -9 -9\\n\"\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n-1 1 1 0 0 -1\") == \"2\\n0 0 0 0 0 0\"\nassert solution(\"3\\n100 100 101\") == \"3\\n101 100 100\"\nassert solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\") == \"5\\n-10 -10 -9 -9 -9 -9 -9\"\n\n\"\"\"\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n-1 1 1 0 0 -1') == '2\\n0 0 0 0 0 0'\nassert solution('3\\n100 100 101') == '3\\n101 100 100'\nassert solution('7\\n-10 -9 -10 -8 -10 -9 -9') == '5\\n-10 -10 -9 -9 -9 -9 -9'"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"5 1 2 3 4 5 1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"6 1 2 3 4 5 6\") == \"1 2 3 4 5 6\"\nassert solution(\"6 1 2 3 4 5 6 1 2 3 4 5 6\") == \"1 2 3 4 5 6\"\nassert solution(\"7 1 2 3 4 5 6 7\") == \"1 2 3 4 5 6 7\"\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ares') == 34\nassert solution('zeus') == 18\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('map') == '35'\nassert solution('zeus') == '18'\nassert solution('ares') == '34'\n\"\"\"\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"map\") == \"35\"\nassert solution(\"zeus\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"zeus\") == \"18\"\nassert solution(\"map\") == \"35\"\nassert solution(\"ares\") == \"34\"\n\n\n-----\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"zeus\") == \"18\"\nassert solution(\"ares\") == \"34\"\nassert solution(\"map\") == \"35\"\nassert solution(\"sip\") == \"0\"\nassert solution(\"gor\") == \"0\"\n\n\"\"\"\n\nimport string\nfrom collections import Counter\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('zeus') == 18\nassert solution('map') == 35\nassert solution('ares') == 34\n\"\"\"\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('zeus') == '18'\nassert solution('map') == '35'\nassert solution('ares') == '34'\n\"\"\""
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"zeus\") == 18\n\n\"\"\"\n\n\"\"\"\n\n[Image]\n\nI think we need to start with the longest word.\n\n\"\"\""
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"zeus\") == 18\nassert solution(\"map\") == 34\nassert solution(\"ares\") == 34\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('zeus') == 18\nassert solution('map') == 34\nassert solution('ares') == 34\nassert solution('apr') == 0\nassert solution('z') == 0\n\n\"\"\"\nfrom collections import deque\nfrom typing import List\n\n\nclass Wheel:\n    def __init__(self) -> None:\n        self.letters: List[str] = list(string.ascii_lowercase)\n        self.pointers: List[int] = list(range(len(string.ascii_lowercase)))\n        self.rotations: List[int] = [0] * len(string.ascii_lowercase)\n        self.stack: deque = deque()\n\n    def get_letter(self) -> str:\n        return self.letters[self.pointers.pop()]\n\n    def rotate_anticlockwise(self) -> None:\n        self.rotations[self.pointers[0]] += 1\n\n    def rotate_clockwise(self) -> None:\n        self.rotations[self.pointers[-1]] += 1\n\n    def rotate_to_next_letter(self) -> None:\n        if self.stack:\n            return self.stack.pop()\n        self.rotate_anticlockwise()\n        while self.rotations[self.pointers[0]] >= len(self.letters):\n            self.rotate_clockwise()\n        self.stack.append(self.get_letter())\n\n    def rotate_to_current_letter(self) -> None:\n        while self.rotations[self.pointers[-1]] >= len(self.letters):\n            self.rotate_clockwise()\n        while self.rotations[self.pointers[0]] < 0:\n            self.rotate_anticlockwise()\n\n    def rotate(self, rotations: int) -> None:\n        for _ in range(rotations):\n            self.rotate_anticlockwise()\n            self.rotate_clockwise()\n\n    def print(self) -> None:\n        self.rotate_to_next_letter()\n        print(self.get_letter(), end='')\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3\\n5\\n1\\n8\\n\") == \"0 4\"\nassert solution(\"3\\n1\\n6\\n7\\n25\\n\") == \"4 9\"\nassert solution(\"6\\n4\\n9\\n10\\n89\\n\") == \"5 9\"\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n3\n5\n1\n8''') == '0 4'\n\nassert solution('''3\n1\n6\n7\n25''') == '4 9'"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n4\\n9\\n10\\n89\\n\") == \"5 9\"\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\\n6\\n7\\n25\") == '0 4'\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n3\n5\n1\n8\n''') == '0 4'\nassert solution('''3\n1\n6\n7\n25\n''') == '4 9'\nassert solution('''6\n4\n9\n10\n89\n''') == '5 9'"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == \"0 0\"\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == \"0 4\"\nassert solution('2\\n1\\n1\\n1\\n1\\n1') == \"0 4\"\nassert solution('3\\n1\\n1\\n1\\n1\\n1') == \"0 4\"\nassert solution('4\\n1\\n1\\n1\\n1\\n1') == \"0 4\"\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n3\n5\n1\n8''') == '0 4'\nassert solution('''3\n1\n6\n7\n25''') == '4 9'\nassert solution('''6\n4\n9\n10\n89''') == '5 9'\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3\\n5\\n1\\n8') == '0 4'\nassert solution('3\\n1\\n6\\n7\\n25') == '4 9'\nassert solution('6\\n4\\n9\\n10\\n89') == '5 9'\n\n\"\"\"\nimport sys\nimport re\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3\\n5\\n1\\n8\") == \"0 4\"\n\"\"\"\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1\\n6\\n7\\n25') == '0 4'\n\"\"\"\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BGGGB') == 'GBGGB'\nassert solution('BBGGGB') == 'GGGGB'\nassert solution('BGBGG') == 'GBGGB'\nassert solution('BGBGB') == 'GBGGB'\nassert solution('BGBGBG') == 'GBGGB'\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"GGGB\") == \"GGGB\"\nassert solution(\"BGBG\") == \"GBGGB\"\n\"\"\""
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BGGBG\") == \"GBGGB\"\nassert solution(\"GGGB\") == \"GGBGB\"\nassert solution(\"GGGGG\") == \"GGGGG\"\nassert solution(\"BBBBB\") == \"BBBBB\"\nassert solution(\"BGBBGB\") == \"GBGBGB\"\n\"\"\""
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BGGBG\") == \"GBGGB\"\nassert solution(\"GGGB\") == \"GGBGB\"\n\"\"\"\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\\nBGGBG\") == \"GBGGB\"\nassert solution(\"5 2\\nBGGBG\") == \"GGBGB\"\nassert solution(\"4 1\\nGGGB\") == \"GGGB\"\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BGBG\") == \"GBGGB\"\nassert solution(\"GGGB\") == \"GGBGB\"\n\"\"\""
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\nBGGBG\") == \"GBGGB\"\nassert solution(\"4 1\\nGGGB\") == \"GGGB\"\n\"\"\""
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == 'GGBGB'\nimport re\nfrom typing import Pattern"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BGGBG\") == \"GBGGB\"\nassert solution(\"GGGB\") == \"GGGGB\"\nprint(\"Tests are correct.\")\n\n\"\"\""
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 1\nBGGBG''') == 'GGBGB'\n\n\"\"\"\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\") == 3\nassert solution(\"6 2\") == 875000008\nassert solution(\"60 5\") == 237178099\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1\") == \"3\"\nassert solution(\"6 2\") == \"875000008\"\nassert solution(\"60 5\") == \"237178099\"\n\"\"\"\n\nfrom functools import reduce\nimport math\nfrom pydantic import BaseModel\nimport sys\nimport os\n\nsys.path.insert(1, os.path.join(sys.path[0], '..'))\nfrom aoc import utils\n\n\nclass Solution(BaseModel):\n    ans: int\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"6 3\") == \"12\"\nassert solution(\"6 4\") == \"12\"\nassert solution(\"6 5\") == \"12\"\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4 5') == '8'\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 1\") == \"3\"\nassert solution(\"6 2\") == \"875000008\"\nassert solution(\"60 5\") == \"237178099\"\n\"\"\"\nimport sys\nimport string\nimport itertools\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 1\") == \"3\"\nassert solution(\"6 2\") == \"875000008\"\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1\") == \"3\"\nassert solution(\"6 2\") == \"875000008\"\nassert solution(\"60 5\") == \"237178099\"\n\n\"\"\"\n\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"6 5\") == \"875000008\"\nassert solution(\"6 2\") == \"3\"\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\") == 3\nassert solution(\"6 2\") == 875000008\nassert solution(\"60 5\") == 237178099\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1\") == '3'\nassert solution(\"6 2\") == '875000008'\nassert solution(\"60 5\") == '237178099'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '101'\nassert solution('1 2\\n3 4') == '101110'\nassert solution('1 2\\n3 4\\n5 6') == '101110\\n11101110'\nassert solution('1 2\\n3 4\\n5 6\\n7 8') == '101110\\n11101110\\n111110110'\nassert solution('1 2\\n3 4\\n5 6\\n7 8\\n9 10') == '101110\\n11101110\\n111110110\\n1110111011101110'\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n4 8') == '101'\nassert solution('4 8\\n1 2') == '110110110101'\nassert solution('4 10\\n1 2') == '11011011011011'\nassert solution('4 10\\n1 5') == '-1'\nassert solution('4 10\\n5 1') == '110110110110111'\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n4 8') == '101\\n'\nassert solution('1 2\\n4 9') == '1111\\n'\nassert solution('1 2\\n3 5') == '11101\\n'\nassert solution('1 2\\n3 5\\n0 1 0 1\\n0 1 0 1\\n0 1 0 1') == '111011011011011011\\n'\nassert solution('1 2\\n3 5\\n0 1 0 1\\n0 1 0 1\\n0 1 0 1\\n
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"101\"\nassert solution(\"4 8\") == \"110110110101\"\nassert solution(\"4 10\") == \"11011011011011\"\nassert solution(\"1 5\") == \"-1\"\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"101\"\nassert solution(\"1 2\") == \"101\"\nassert solution(\"1 2\") == \"101\"\nassert solution(\"1 2\") == \"101\"\nassert solution(\"4 8\") == \"110110110101\"\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"2 2\"\n) == \"101\"\nassert solution(\n\"3 5\"\n) == \"1101101101010\"\nassert solution(\n\"4 8\"\n) == \"11011011011011\"\nassert solution(\n\"1 5\"\n) == \"11011011011011\"\nassert solution(\n\"2 4\"\n) == \"10101\"\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"101\"\nassert solution(\"4 8\") == \"110110110101\"\nassert solution(\"1 5\") == \"-\"\nassert solution(\"4 10\") == \"11011011011011\""
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8\\n1 2\\n0 0 1') == '101'\nassert solution('4 10\\n0 0 1\\n0 0 1') == '11011011011011'\nassert solution('1 5\\n0 0 1') == '-1'\nassert solution('4 10\\n0 0 1\\n0 1 1\\n0 1 1') == '11011011011011'\nassert solution('4 10\\n1 0 1\\n1 0 1\\n0 0 1') == '11011011011011'\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8\\n110110110101') == '11011011011011'\nassert solution('1 5\\n11011011011011') == '-1'\n\n\nSolution:\nn, m = map(int, stdin.split())\ncards = [int(i) for i in bin(m)[2:]]\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\\n11011011011011\") == \"11011011011011\"\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"18 2\") == '3 6 9'\nassert solution(\"9 10\") == '0 0 9'\nassert solution(\"1000000000000 5\") == '83333333333 416666666665 500000000002'\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_1) == solution(test_2) == solution(test_3) == solution(test_4) == solution(test_5) == '0 0 9'\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000000001 5\") == \"83333333333 416666666665 500000000002\"\nassert solution(\"10000000000 49999999999\") == \"1 49999999999 500000000000\"\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\") == \"0 1 2\"\nassert solution(\"10 2\") == \"0 1 1\"\nassert solution(\"0 0\") == \"0 0 0\"\nassert solution(\"5 1\") == \"0 0 2\"\nassert solution(\"9 5\") == \"0 0 3\"\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"18 2\") == \"3 6 9\"\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('18 2') == '3 6 9'\nassert solution('9 10') == '0 0 9'\nassert solution('1000000000000 5') == '83333333333 416666666665 500000000002'\nassert solution('1000000000000 499999999999') == '1 499999999999 500000000000'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''18 2''') == '''3 6 9'''\nassert solution('''9 10''') == '''0 0 9'''\nassert solution('''1000000000000 5''') == '''83333333333 416666666665 500000000002'''\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('18 2\\n') == '3 6 9'\nassert solution('1000000000000 5\\n') == '83333333333 416666666665 500000000002'\nassert solution('1000000000000 499999999999\\n') == '1 499999999999 500000000000'\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000000000000 5\") == '83333333333 416666666665 500000000002'\nassert solution(\"1000000000000 499999999999\") == '1 499999999999 500000000000'\nassert solution(\"1000000000000 499999999999 2\") == '0 0 9'\nassert solution(\"1000000000000 499999999999 3\") == '0 0 0'\nassert solution(\"1000000000000 499999999999 5\") == '1 499999999999 500000000000'\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('18 2') == '3 6 9'\nassert solution('9 10') == '0 0 9'\nassert solution('1000000000000 5') == '83333333333 416666666665 500000000002'\nassert solution('1000000000000 499999999999') == '1 499999999999 500000000000'\n\nprint('Success')\n\n-----Comments-----\n\nInstead of keeping all the number of diplomas in the list, you keep the number of certificates for each student in the list. You need to do this because you have to check the condition that the number of certificates is exactly k times greater than the number of diplomas.\n\nSo when you see that number of certificates > number of diplomas, you can move the student from the list of diplomas to the list of certificates.\n\nAnd when you see that number of certificates < number of diplomas, you can move the student from the list of certificates to the list of diplomas.\n\nThe same number of students can take both certificates and diplomas."
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"131\") == 'YES'\nassert solution(\"320\") == 'NO'\nassert solution(\"010203\") == 'NO'\nassert solution(\"100101101010\") == 'NO'\nassert solution(\"101101101010\") == 'YES'\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('131') == 'YES'\nassert solution('320') == 'NO'\nassert solution('2010200') == 'YES'\nassert solution('211221') == 'YES'\nassert solution('2011') == 'NO'\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"131\") == \"YES\"\nassert solution(\"320\") == \"NO\"\nassert solution(\"2010200\") == \"YES\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"131\") == \"YES\"\nassert solution(\"320\") == \"NO\"\nassert solution(\"2010200\") == \"YES\"\nassert solution(\"36380\") == \"NO\"\nassert solution(\"123321\") == \"YES\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(131) == \"YES\"\nassert solution(320) == \"NO\"\nassert solution(10200) == \"YES\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"131\") == \"YES\"\nassert solution(\"320\") == \"NO\"\nassert solution(\"2010200\") == \"YES\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('131') == 'YES'\nassert solution('320') == 'NO'\nassert solution('2010200') == 'YES'"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(131) == 'YES'\nassert solution(320) == 'NO'\nassert solution(2010200) == 'YES'\n\nassert solution(\"131\") == 'YES'\nassert solution(\"320\") == 'NO'\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('131') == 'YES'\nassert solution('320') == 'NO'\nassert solution('2010200') == 'YES'\n\nprint('All tests passed.')\n\n----------------------------------------------"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('131') == 'YES'\nassert solution('320') == 'NO'\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '3'\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 1\nassert solution('4') == 2\n\"\"\"\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == 2\n\"\"\""
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n\") == \"1\"\nassert solution(\"10\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"0\"\nassert solution(\"10\") == \"2\"\n\"\"\"\n\n\"\"\"\n\u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435. \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u0442\u0430\u043a\u0438\u0445 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 n^2 + n + 41?\n\u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0444\u0438\u0437\u0438\u043a\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0434\u0441\u0442\u0432\u0430\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u0443\u0433\u043b\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u0432\u043e\u0440\u043e\u0442\u043d\u044b\u0445 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432.\n\n\u041e\u0442\u0432\u0435\u0442\u043e\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u043c\u043e\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u0434\u0430\u0447 \u043f\u043e \u043f\u043e\u0438\u0441\u043a\u0443 \u0442\u0430\u043a\u0438\u0445 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0432 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0438. \u0414\u043b\u044f \u043f\u0435\u0440\u0432\u044b\u0445 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0432 \u0442\u0430\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435:\n\n(3, 4, 5)\n(6, 8, 10)\n(7, 9, 11)\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\u0445:\n\n(10, 13, 15)\n(12, 14, 16)\n\u042d\u0442\u0438 \u0442\u0440\u0438 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442, \u043d\u043e \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0445\u043e\u0434\u0430 \u043e\u043d\u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0441\u043c\u044b\u0441\u043b\u043e\u0432\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u043d\u0435 \u0441\u0432\u044f\u0437\u0430\u043d\u044b. \u0414\u0430\u043d\u043d\u044b\u0435 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0442\u0430\u043a: (a, b, c) \u2014 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441 \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438 a, b, c \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c a < b < c \u0438 a^2 + b^2 = c^2. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0447\u0438\u0441\u043b\u0430 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u0441\u0432\u044f\u0437\u0430\u043d\u044b, \u0442\u043e \u043f\u0435\u0440\u0432\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0442\u0440\u0435\u0445 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432, \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: (3, 4, 5), (6, 8, 10), (7, 9, 11).\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u041f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, (3, 4, 5), (6, 8, 10), (9, 12, 15) \u0438 \u0442.\u0434. \n\n-----Input-----\n\nThe only line contains a single integer n (1 \u2264 n \u2264 2500).\n\n-----Output-----\n\nPrint the number of triangles in the sequence.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n1\n\nInput\n10\n\nOutput\n2\n\"\"\"\n\n\"\"\"\n\u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435. \u041f\u043e\u043b\u0438\u0433\u043e\u043d \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043f\u043e\u043b\u043d\u044b\u043c, \u0435\u0441\u043b\u0438 \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0440\u043e\u043c\u0431\u043e\u0432. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u043f\u043e\u043b\u0438\u0433\u043e\u043d\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u0440\u043e\u043c\u0431\u0430 \u2014 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a, \u0434\u043b\u0438\u043d\u044b \u0441\u0442\u043e\u0440\u043e\u043d \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u0441\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 10, \u0438\u043c\u0435\u044e\u0449\u0438\u0439 \u0440\u043e\u043c\u0431\u0438\u043d\u0433\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443. \u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u0442\u0430\u043a\u0436\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0439 \u043f\u043e\u043b\u0438\u0433\u043e\u043d\u0443.\n\n\u041e\u0442\u0432\u0435\u0442\u043e\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u043c\u043e\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u043f\u043e\u043b\u0438\u0433\u043e\u043d\u043e\u0432. \u041f\u0440\u0438\u043c\u0435\u0440:\n\n(4, 5, 6) (4, 6, 5) (5, 6, 4)\n(4, 7, 8) (4, 8, 7) (7, 8, 4)\n(4, 9, 10) (4, 10, 9) (9, 10, 4)\n(5, 10, 7) (5, 7, 10) (10, 7, 5)\n(6, 7, 8) (6, 8, 7) (7, 8, 6)\n(6, 9, 10) (6, 10, 9) (9, 10, 6)\n(7, 9, 10) (7, 10, 9) (9, 10, 7)\n\u0412 "
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == '1'\nassert solution('10') == '2'"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\") == 1\nassert solution(\"10\") == 2"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"50\") == \"6\"\n\"\"\""
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n\") == \"1\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(aoc_12_1) == 'YES'\n\"\"\"\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6\\n\"\n\"X...XX\\n\"\n\"...XX.\\n\"\n\".X..X.\\n\"\n\"......\\n\"\n\"1 6\\n\"\n\"2 2\\n\") == 'YES'\nassert solution(\"5 4\\n\"\n\".X..\\n\"\n\"...X\\n\"\n\"X.X.\\n\"\n\"....\\n\"\n\"2 2\\n\"\n\"1 1\\n\") == 'YES'\nassert solution(\"4 7\\n\"\n\".X..XX.\\n\"\n\"..XX..X\\n\"\n\"X...X..\\n\"\n\"X......\\n\"\n\"2 2\\n\"\n\"1 6\\n\") == 'NO'\nassert solution(\"4 4\\n\"\n\".XX.\\n\"\n\"X..\\n\"\n\"..X\\n\"\n\"....\\n\"\n\"2 2\\n\"\n\"1 1\\n\") == 'NO'\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6\\nX...XX\\n...XX.\\n.X..X.\\n......\\n1 6\\n2 2') == 'YES'\nassert solution('4 7\\n..X.XX.\\n.XX..X.\\nX...X..\\nX......\\n2 2\\n1 6') == 'NO'\nassert solution('4 6\\n.X...XX\\n...XX.\\n.X..X.\\n......\\n1 6\\n2 2') == 'NO'\nassert solution('5 4\\n.X...\\n...X\\nX.X.\\n....\\n.XX.\\n5 3\\n1 1') == 'YES'\nassert solution('5 4\\n.X...\\n...X\\nX.X.\\n....\\n.XX.\\n5 3\\n2 2') == 'YES'\n\n-----\n\nThe solution is not too short, it is written in one line of code.\n\nThis is a solved sample problem.\n\nThe first line of input contains two integers n, m, number of rows and columns in the cave description.\n\nEach of the next n lines describes the initial state of the level of the cave, each line consists of m characters \".\" (that is, intact ice) and \"X\" (cracked ice).\n\nThe next line contains two integers r_1 and c_1 (1 \u2264 r_1 \u2264 n, 1 \u2264 c_1 \u2264 m)\u00a0\u2014 your initial coordinates. It is guaranteed that the description of the cave contains character 'X' in cell (r_1, c_1), that is, the ice on the starting cell is initially cracked.\n\nThe next line contains two integers r_2 and c_2 (1 \u2264 r_2 \u2264 n, 1 \u2264 c_2 \u2264 m)\u00a0\u2014 the coordinates of the cell through which you need to fall. The final cell may coincide with the starting one.\n\nThe first line of output tells you if you are able to reach the destination.\n\nThe second line of output describes how you need to move from the starting cell (r_1, c_1) to the final cell (r_2, c_2) if you want to reach it. The first character in the output indicates the cell in which you need to stand to reach the final cell. If you need to go up, then the character must be 'U'. If you need to go right, then the character must be 'R'. If you need to go down, then the character must be 'D'. If you need to go left, then the character must be 'L'.\n\nIf you do not reach the destination, then the second line of output contains three integers a, b, c. The first of them is the distance from the starting cell (r_1, c_1) to the final cell (r_2, c_2). The second and the third ones are the distances from the final cell (r_2, c_2) to the nearest cells through which you can reach the starting cell (r_1, c_1).\n\nConstraints\n\n1 \u2264 n, m \u2264 500\n1 \u2264 r_1, c_1 \u2264 n, 1 \u2264 c_1 \u2264 m \u2264 n\n1 \u2264 r_2, c_2 \u2264 n, 1 \u2264 c_2 \u2264 m \u2264 n\n\n-----\n\nhttps://codeforces.com/problemset/problem/935/A\n\"\"\""
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6\\nX...XX\\n...XX.\\n.X..X.\\n......\\n1 6\\n2 2') == 'YES'\n\n\"\"\"\n\n\n\nclass Solution:\n    def isReachable(self, n: int, m: int, r_1: int, c_1: int, r_2: int, c_2: int) -> str:\n        def dfs(r, c):\n            if r == r_2 and c == c_2:\n                return True\n            for (dr, dc) in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < n and 0 <= nc < m and matrix[nr][nc] == '.':\n                    matrix[nr][nc] = 'X'\n                    if dfs(nr, nc):\n                        return True\n            return False\n        matrix = [['.'] * m for _ in range(n)]\n        matrix[r_1][c_1] = 'X'\n        if dfs(r_1, c_1):\n            return 'YES'\n        return 'NO'\n\nsolution = Solution()\nprint(solution.isReachable(n = 4, m = 6, r_1 = 1, c_1 = 6, r_2 = 2, c_2 = 2))\nprint(solution.isReachable(n = 5, m = 4, r_1 = 1, c_1 = 1, r_2 = 2, c_2 = 2))\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6\\nX...XX\\n...XX.\\n.X..X.\\n......\\n1 6\\n2 2\\n') == 'YES'\nassert solution('5 4\\n.X..\\n...X\\nX.X.\\n....\\n.XX.\\n5 3\\n1 1\\n') == 'NO'\nassert solution('4 7\\n.X..XX.\\n.XX..X.\\nX...X..\\nX......\\n2 2\\n1 6\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 6\\nX...XX\\n...XX.') == 'YES'\nassert solution('4 7\\n.X..\\n...X\\nX.X.\\n....\\n.XX.') == 'YES'\n\n\"\"\""
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6\\nX...XX\\n...XX.\\n.X..X.\\n......\\n1 6\\n2 2') == \"YES\"\nassert solution('5 4\\n.X..\\n...X\\nX.X.\\n....\\n.XX.\\n5 3\\n1 1') == \"NO\"\n\"\"\""
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".X..\\n\"\n\"...X\\n\"\n\"X.X.\\n\"\n\"....\\n\"\n\"..XX\\n\"\n\"5 3\") == \"YES\"\nassert solution(\".X..\\n\"\n\"...X\\n\"\n\"X.X.\\n\"\n\"....\\n\"\n\"..XX\\n\"\n\"5 3\") == \"NO\"\nassert solution(\".X..\\n\"\n\"....\\n\"\n\"..XX\\n\"\n\"5 3\") == \"NO\"\nassert solution(\".X..\\n\"\n\"....\\n\"\n\"..XX\\n\"\n\"5 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\nX...XX\\n...XX.\\n.X..X.\\n......\\n1 6\\n2 2\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\nX...XX\\n...XX.\\n.X..X.\\n......\\n1 6\\n2 2\") == 'YES'\nassert solution(\"5 4\\n.X..\\n...X\\nX.X.\\n....\\n.XX.\\n5 3\\n1 1\") == 'NO'\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 4\\n2 5') == '1'\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 5\") == \"1\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2\\n\") == \"1\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 4\\n2 5') == '1'\n\"\"\"\n\nN, M = input().split()\nfor i in range(int(M)):\n    a, b = input().split()\n    print(abs(int(a) - int(b)))\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n5 3\") == \"2\"\nassert solution(\"4 3\\n5 4\\n3 4\\n3 5\") == \"0\"\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nrequests = [list(map(int, sys.stdin.readline().split())) for _ in range(M)]\n\nbridges = {(i, j): 0 for i in range(N) for j in range(i + 1, N)}\nfor i, j in requests:\n    bridges[(i - 1, j - 1)] += 1\n    bridges[(j - 1, i - 1)] += 1\n\nprint(min(sum(value > 1 for value in bridges.values()) - 1, sum(value > 0 for value in bridges.values())))\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2\\n1 3') == '1'\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 4\\n2 5\") == 1\n\"\"\""
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 2\\n2 3\") == \"1\"\nassert solution(\"4 1\\n1 2\\n2 3\\n3 4\") == \"0\"\nassert solution(\"5 4\\n1 4\\n2 4\\n3 4\\n4 5\") == \"0\"\nassert solution(\"6 3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"1\"\nassert solution(\"7 5\\n1 2\\n1 3\\n1 4\\n1 5\\n2 6\\n3 7\") == \"3\"\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 4\\n2 5\") == '1'\n\n\"\"\"\n\nimport sys\n\ntest_cases = []\nfor line in sys.stdin:\n    test_cases.append(line)\n\ntest_cases = [x.split() for x in test_cases[2:]]\n\nfor i in test_cases:\n    n = int(i[0])\n    m = int(i[1])\n    bridges = []\n    for _ in range(n):\n        bridges.append(list(map(int, sys.stdin.readline().split())))\n    bridges.sort(key=lambda x: x[0])\n    print(bridges)\n    res = 0\n    for j in range(1, n):\n        if bridges[j][0] <= bridges[j-1][1]:\n            res += 1\n    print(res)\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-1\\n-2\\n3\") == \"first\"\nassert solution(\"5\\n1\\n2\\n-3\\n-4\\n3\") == \"second\"\nassert solution(\"2\\n4\\n-4\") == \"second\"\nassert solution(\"3\\n-1\\n-2\\n3\") == \"first\"\n\n\n\"\"\"\n\nn = int(stdin.readline())\n\nlis1 = []\nlis2 = []\nfor i in range(n):\n    if i % 2 == 0:\n        lis1.append(int(stdin.readline()))\n    else:\n        lis2.append(int(stdin.readline()))\n\nlis1.sort()\nlis2.sort()"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1\\n2\\n-3\\n-4\\n3\\n') =='second'\nassert solution('3\\n-1\\n-2\\n3\\n') == 'first'\n\"\"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1\\n2\\n-3\\n-4\\n3') == \"second\"\nassert solution('3\\n-1\\n-2\\n3') == \"first\"\n\"\"\""
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n2\\n-3\\n-4\\n3\") =='second'\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1\\n2\\n-3\\n-4\\n3\") == \"first\"\nassert solution(\"3\\n-1\\n-2\\n3\") == \"first\"\nassert solution(\"2\\n4\\n-4\") == \"second\"\nassert solution(\"4\\n-4\\n1\\n2\\n3\") == \"second\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1\\n2\\n-3\\n-4\\n3\\n\") == \"second\"\nassert solution(\"3\\n-1\\n-2\\n3\\n\") == \"first\"\nassert solution(\"2\\n4\\n-4\\n\") == \"second\"\n\"\"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1\\n2\\n-3\\n-4\\n3') =='second'\nassert solution('3\\n-1\\n-2\\n3') == 'first'\n\n\"\"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open(\"input_test.txt\").read()) == \"first\"\nassert solution(open(\"input_test.txt\").read()) == \"second\"\nassert solution(open(\"input_test.txt\").read()) == \"second\"\n\"\"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n2\\n-3\\n-4\\n3\") == \"second\"\nassert solution(\"3\\n-1\\n-2\\n3\") == \"first\"\nassert solution(\"2\\n4\\n-4\") == \"second\"\n\"\"\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 1') == 'NO'\nassert solution('3 2 1') == 'YES'\nassert solution('4 1 1 1') == 'NO'\nassert solution('4 1 1 2') == 'YES'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"YES\"\nassert solution(\"3\\n1 0 1\") == \"NO\"\nassert solution(\"7\\n6 0 2 3 1 2 3\") == \"YES\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 1 2\") == \"YES\"\nassert solution(\"3 1 0 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"YES\"\nassert solution(\"3\\n1 0 1\") == \"NO\"\nassert solution(\"3\\n1 0 1\\n3 0 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 1 2\\n') == 'YES'\nassert solution('3\\n1 0 1\\n') == 'NO'\n\"\"\"\n\nimport sys\nimport typing\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 1\") == \"YES\"\nassert solution(\"1 0 1 0\") == \"NO\"\nassert solution(\"1 1 1 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 0 1 2\") == \"YES\"\nassert solution(\"3\\n1 0 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"YES\"\nassert solution(\"3\\n1 0 1\") == \"NO\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nc = 0\nfor i in range(n - 1):\n    if a[i]!= 0:\n        a[i + 1] -= a[i]\n        a[i] = 0\n        if a[i + 1] >= 0:\n            c += 1\n        else:\n            a[i + 1] += a[i]\n            a[i] = 0\n            c += 1\n        if c == 2:\n            break"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 1 2\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 0 1 2\") == \"YES\"\nassert solution(\"3 1 0 1\") == \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abccba\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\nassert solution(\"ababa\") == \"YES\"\nassert solution(\"abcb\") == \"NO\"\nassert solution(\"abcc\") == \"NO\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == 'YES\\nNO\\nYES\\nNO\\nNO'"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abccba\") == \"YES\"\nassert solution(\"cf\") == \"NO\"\nassert solution(\"ml\") == \"NO\"\nassert solution(\"abaazaba\") == \"NO\"\nassert solution(\"bcbbcb\") == \"YES\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"YES\"\nassert solution(\"codeforces\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\nassert solution(\"codeforces\") == \"NO\"\nassert solution(\"codeforces\") == \"NO\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abccba\") == \"YES\"\nassert solution(\"cf\") == \"NO\"\nassert solution(\"abaazaba\") == \"YES\"\nassert solution(\"ml\") == \"NO\"\nassert solution(\"codeforces\") == \"YES\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"NO\"\nassert solution(\"abccba\") == \"YES\"\nassert solution(\"cf\") == \"NO\"\nassert solution(\"adfa\") == \"YES\"\nassert solution(\"abaazaba\") == \"NO\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abccba\") == \"YES\"\nassert solution(\"cf\") == \"NO\"\nassert solution(\"ml\") == \"YES\"\nassert solution(\"acbacb\") == \"YES\""
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abccba\") == \"YES\"\nassert solution(\"bcbbcb\") == \"YES\"\nassert solution(\"abccba\") == \"NO\"\nassert solution(\"bcbbcb\") == \"NO\"\nassert solution(\"abccba\") == \"NO\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == \"YES\"\nassert solution(\"abca\") == \"NO\"\nassert solution(\"abbcabb\") == \"YES\"\nassert solution(\"abbcabba\") == \"YES\"\nassert solution(\"abcdba\") == \"NO\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"YES\"\nassert solution(\"abccba\") == \"YES\"\nassert solution(\"aa\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\nassert solution(\"xyz\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\", \"xyc\", 2) == \"ayd\"\nassert solution(\"abc\", \"abc\", 2) == \"c\"\nassert solution(\"abc\", \"yza\", 2) == \"c\"\nassert solution(\"qwerty\", \"qwerty\", 2) == \"qwe\"\nassert solution(\"qwerty\", \"qwerty\", 3) == \"qwer\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abc', 'xyc') == 'ayd'\nassert solution('abc', 'xzy') == -1\nassert solution('abca', 'xyz') == 'ayd'\nassert solution('kitten','sitting') == 'itte'\nassert solution('hi', 'h') == 'i'\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\", \"xyc\") == \"ayd\"\nassert solution(\"aab\", \"aab\") == \"aa\"\nassert solution(\"abc\", \"abc\") == \"aa\"\nassert solution(\"xyz\", \"axy\") == \"ayd\"\n\"\"\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\", \"xyc\") == \"ayd\"\nassert solution(\"a\", \"b\") == \"c\"\nassert solution(\"x\", \"y\") == \"z\""
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc', 'xyc') == 'ayd'\nassert solution('aaab', 'aaab') == 'aaab'\nassert solution('aaab', 'aabb') == 'aabb'\nassert solution('aaab', 'bbab') == 'bbab'\nassert solution('aaab', 'bbba') == 'bbba'\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\", \"xyc\", 2) == \"ayd\"\nassert solution(\"abc\", \"xyc\", 1) == \"yd\"\nassert solution(\"abc\", \"abc\", 3) == \"\"\nassert solution(\"abc\", \"xyz\", 0) == \"abc\"\nassert solution(\"abc\", \"abc\", 0) == \"abc\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abc\", \"xyc\") == \"ayd\"\nassert solution(\"aaaa\", \"bbbb\") == \"aaaa\"\nassert solution(\"aab\", \"aba\") == \"ab\"\nassert solution(\"a\", \"aa\") == \"-\"\nassert solution(\"ab\", \"ba\") == \"-\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\", \"xyc\") == \"ayd\"\nassert solution(\"abc\", \"xyz\") == \"ayd\"\nassert solution(\"aaa\", \"bbb\") == \"-\"\nassert solution(\"aaa\", \"aaa\") == \"-\"\nassert solution(\"aba\", \"bab\") == \"-\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\", \"xyc\") == \"ayd\"\nassert solution(\"abc\", \"abd\") == \"ayd\"\nassert solution(\"abc\", \"axd\") == \"ayd\"\n\nassert solution(\"abc\", \"axd\") == \"ayd\"\nassert solution(\"abc\", \"axd\") == \"ayd\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abc', 'xyc', 2) == 'ayd'\nassert solution('abc', 'xyc', 1) == 'a'\nassert solution('abc', 'xyc', 3) == 'b'\nassert solution('abc', 'xyc', -1) == '-1'\nassert solution('', '', 1) == '-1'\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"a*a\") == \"YES\"\nassert solution(\"a*aa\") == \"YES\"\nassert solution(\"a\") == \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"aba\") == \"NO\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"aba\") == \"NO\"\nassert solution(\"a?a?a?\") == \"YES\""
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"aaaa\") == \"NO\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"a?a?a\") == \"NO\"\nassert solution(\"a?a?a?\") == \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"ab*\") == \"YES\"\nassert solution(\"ab*c\") == \"YES\"\nassert solution(\"ab*ac\") == \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a?a?a*\") == \"NO\"\nassert solution(\"abc\") == \"NO\"\nassert solution(\"a?a?a*\") == \"YES\"\nassert solution(\"aabbaccc\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"a??a\") == \"YES\"\nassert solution(\"a???a\") == \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"aaa\") == \"YES\"\nassert solution(\"aab\") == \"NO\"\nassert solution(\"abacaba\") == \"NO\"\n\"\"\""
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"a?a?\") == \"YES\"\nassert solution(\"a?a?a?\") == \"YES\"\nassert solution(\"a?a?a?a?\") == \"NO\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"aa\") == \"NO\"\n\"\"\"\n\nimport sys\n\ngood_letters = set(sys.stdin.readline().strip().lower())\nstar = sys.stdin.readline().strip().lower()[0]\nquery_count = int(sys.stdin.readline().strip())\nquery_strings = [sys.stdin.readline().strip().lower() for _ in range(query_count)]\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n3\\n2\\n1\\n3\\n2\\n11\\n22\\n22\\n11\\n22\") == \"1 15\"\nassert solution(\"4 100\\n11\\n22\\n1\\n2\\n22\\n11\") == \"3 4\"\nprint(\"Passed!\")\n\n\"\"\""
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n11\\n22\\n1\\n2\\n22\\n\") == \"1 15\"\n\"\"\"\n\nimport sys\n\nn, k = [int(i) for i in sys.stdin.readline().strip().split()]\ntries = set()\n\nfor i in range(n):\n    pwd = sys.stdin.readline().strip()\n    if pwd not in tries:\n        tries.add(pwd)\n    elif pwd in tries:\n        tries.add(pwd)\n    if len(tries) == k:\n        break"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\ncba\\nabc\\nbb1\\nabC\\nABC\") == \"1 15\"\nassert solution(\"4 100\\n11\\n22\\n1\\n2\\n22\") == \"3 4\"\nassert solution(\"2 2\\n1\\n2\") == \"1 1\"\n\n\"\"\"\n\n\"\"\"\nExplanation:\n\nWe can use for example this formula:\n\nx[i] = 1 + min(x[j]) for j in range(n) if a[j] >= a[i]\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 100\\n11\\n22\\n1\\n2\\n22\\n') == '3 4'\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 100\n11\n22\n1\n2\n22''') == '3 4'\n\nassert solution('''5 2\ncba\nabc\nbb1\nabC\nABC''') == '1 15'\n\nassert solution('''4 100\n11\n22\n1\n2\n22''') == '1 15'\n\nassert solution('''5 100\n22\n1\n2\n22\n11''') == '3 4'\n\nassert solution('''5 100\n22\n1\n2\n22\n22''') == '2 5'"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n\"\n\"cba\\n\"\n\"abc\\n\"\n\"bb1\\n\"\n\"abC\\n\"\n\"ABC\") == \"1 15\"\n\n\"\"\"\n\nimport re\n\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\n\npasswords = [re.sub(r'\\d+', '', p) for p in stdin.read().split('\\n')]\npasswords = list(set(passwords))\npasswords.sort(key=lambda x: len(x))\n\ncount = len(passwords)\ni = 0\n\nwhile i < count:\n    j = i\n    while j < count and len(passwords[j]) <= len(passwords[i]):\n        j += 1\n    if j < count:\n        if k < j - i:\n            break\n        k -= j - i\n        count = j\n    else:\n        break\n    i = j"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n\\n\\n\\n\\n\\nabc\") == \"1 15\"\n\"\"\"\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\ncba\\nabc\\nbb1\\nabC\\nABC\\nabc\") == \"1 15\"\nassert solution(\"4 100\\n11\\n22\\n1\\n2\\n22\") == \"3 4\"\nassert solution(\"4 1000\\n11\\n22\\n1\\n2\\n22\") == \"3 4\""
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\ncba\\nabc\\nbb1\\nabC\\nABC\\nabc\\n\") == '1 15'\n\"\"\"\n\nimport sys\n\nassert int(sys.stdin.readline()) == 5 and int(sys.stdin.readline()) == 2\n\nsys.stdin.readline()\ns = set()\nfor _ in range(int(sys.stdin.readline())):\n    s.add(sys.stdin.readline())\n\nsys.stdin.readline()\nprint(len(s), int(sys.stdin.readline()))\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\ncba\\nabc\\nbb1\\nabC\\nABC\\nabc\\n\") == \"1 15\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 3') == 'First'\nassert solution('2\\n2 2') == 'Second'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 2 3\") == \"First\"\nassert solution(\"2\\n2 2\") == \"Second\"\n\nimport os, io, time, contextlib\nfrom collections import deque, Counter, defaultdict, OrderedDict, ChainMap\nfrom math import log, sqrt, pi, factorial, gcd, sin, cos, tan, ceil, floor, e\nfrom fractions import Fraction\nfrom decimal import Decimal\nfrom functools import reduce\nimport operator as op"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 2 3\") == \"First\"\nassert solution(\"2\\n2 2\") == \"Second\"\nprint(\"Check is completed\")\n\"\"\""
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n2''') == 'First'\n\nassert solution('''3\n2 2 3''') == 'Second'\n\nassert solution('''5\n4 4 4 4 4''') == 'First'\n\nassert solution('''6\n8 5 10 11 2 5''') == 'First'\n\nassert solution('''4\n2 1 3 2''') == 'Second'\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 3\") == \"First\"\nassert solution(\"2\\n2 2\") == \"Second\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 3\") == \"First\"\nassert solution(\"2 2\") == \"Second\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 2 3') == \"First\"\nassert solution('2\\n2 2') == \"Second\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 2 3\") == \"First\"\nassert solution(\"2\\n2 2\") == \"Second\"\n\"\"\""
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\n\n\"\"\""
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 2 3\") == \"First\"\nassert solution(\"2\\n2 2\") == \"Second\""
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"1 5\"\nassert solution(\"999999\") == \"999 1001\"\nassert solution(\"8\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"999999\") == \"999 1001\"\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"999999\") == \"999 1001\"\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8') == '2 4'\nassert solution('64') == '8 8'\nassert solution('999999') == '999 1001'\nassert solution('7') == '1 6'\nassert solution('1') == '1 1'\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"5\") == \"1 5\"\nassert solution(\"999999\") == \"999 1001\"\nassert solution(\"1\") == \"1 1\"\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == '2 4'\nassert solution(\"64\") == '8 8'\nassert solution(\"999999\") == '999 1001'"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\") == '2 4'\nassert solution(\"999999\") == '999 1001'\nassert solution(\"5\") == '1 5'\n\"\"\"\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"999999\") == \"999 1001\"\n\nprint('Success')"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8') == '2 4'\nassert solution('64') == '8 8'\nassert solution('5') == '1 5'\nassert solution('999999') == '999 1001'\nassert solution('1') == '1 1'\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"5\") == \"1 5\"\nassert solution(\"999999\") == \"999 1001\"\n\n\"\"\""
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"_1_\") == \"No\"\nassert solution(\"000\") == \"Yes\"\nassert solution(\"La0\") == \"No\"\nassert solution(\"LIL0\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1_wat') == 'Yes'\nassert solution('2_wat') == 'No'\nassert solution('wat_1') == 'Yes'\nassert solution('0_0_0') == 'No'\nassert solution('La0') == 'Yes'\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1_wat\") == 'Yes'\nassert solution(\"2_wat\") == 'No'\nassert solution(\"wat_1\") == 'Yes'\nassert solution(\"0_wat\") == 'No'\nassert solution(\"La0\") == 'No'\n\n\"\"\""
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"No\"\nassert solution(\"Codeforces\") == \"Yes\"\nassert solution(\"_0_\") == \"No\"\nassert solution(\"0_0_0\") == \"No\"\nassert solution(\"0\") == \"No\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"Yes\"\nassert solution(\"0OO0OO00OO0OOO0O00OO0OOO_1oI\") == \"No\"\nassert solution(\"La0\") == \"No\"\n\"\"\"\n\n\"\"\"\nThe most simple solution. A straightforward way to check is to check whether there is some substring of the same length as the login.\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2, \"2_wat\") == \"Yes\"\nassert solution(3, \"__i_\") == \"No\"\nassert solution(1, \"abc\") == \"No\"\nassert solution(2, \"0Lil\") == \"No\"\nassert solution(2, \"0Ril\") == \"Yes\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1_wat\") == \"Yes\"\nassert solution(\"2_wat\") == \"No\"\nassert solution(\"wat_1\") == \"Yes\"\n\nassert solution(\"000\") == \"No\"\nassert solution(\"1_wat\") == \"No\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Codeforces\") == \"Yes\"\nassert solution(\"Code_forces\") == \"Yes\"\nassert solution(\"Codefor_ces\") == \"No\"\nassert solution(\"Co0de_Forces\") == \"No\"\nassert solution(\"Co0de_Fo_rces\") == \"No\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789abcdefghijklmnopqrstuvwxyz\") == \"Yes\"\nassert solution(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_\") == \"No\"\nassert solution(\"0\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"_1\") == \"Yes\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1_wat\") == \"Yes\"\nassert solution(\"2_wat\") == \"No\"\nassert solution(\"wat_1\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 8 6 9\") == 'Yes'\nassert solution(\"5 -1 -2 0 0 -5\") == 'No'\n\"\"\""
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n7 5 8 6 9\\n') == \"Yes\"\nassert solution('5\\n-1 -2 0 0 -5\\n') == \"No\"\nassert solution('5\\n1000000000 0 0 0 0\\n') == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 8 6 9\") == \"Yes\"\nassert solution(\"5 -1 -2 0 0 -5\") == \"No\"\nassert solution(\"5 1000000000 0 0 0 0\") == \"Yes\"\nassert solution(\"5 5 4 3 2 1\") == \"No\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n7 5 8 6 9\\n1\\n3 5\\n2 4\") == \"Yes\"\nassert solution(\"5\\n-1 -2 0 0 -5\\n5 4 3 2 1\") == \"No\"\nassert solution(\"5\\n1000000000 0 0 0 0\\n5 4 3 2 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n7 5 8 6 9\") == \"Yes\"\nassert solution(\"5\\n-1 -2 0 0 -5\") == \"No\"\nassert solution(\"5\\n1000000000 0 0 0 0\") == \"Yes\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'Yes'\nassert solution('6 6 6 6 6') == 'No'\nassert solution('4 4 4 4 4') == 'No'\nassert solution('5 5 5 5 5') == 'No'\nassert solution('6 6 6 6 6') == 'Yes'\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n7 5 8 6 9\") == \"Yes\"\nassert solution(\"5\\n-1 -2 0 0 -5\") == \"No\"\nassert solution(\"5\\n1000000000 0 0 0 0\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 8 6 9\") == \"Yes\"\nassert solution(\"5 -1 -2 0 0 -5\") == \"No\"\nassert solution(\"5 1000000000 0 0 0 0\") == \"Yes\"\nassert solution(\"5 1 -2 0 0 -5\") == \"No\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 8 6 9\") == \"Yes\"\nassert solution(\"5 -1 -2 0 0 -5\") == \"No\"\nassert solution(\"5 1000000000 0 0 0 0\") == \"Yes\"\nassert solution(\"5 1 0 0 0 -5\") == \"No\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n7 5 8 6 9\") == \"Yes\"\nassert solution(\"5\\n-1 -2 0 0 -5\") == \"No\"\nassert solution(\"5\\n1000000000 0 0 0 0\") == \"Yes\"\nassert solution(\"5\\n5 4 3 2 1\") == \"No\"\n\n\"\"\"\n\nimport sys\nimport math\nfrom collections import namedtuple\n\nCoord = namedtuple('Coord', 'x y')"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabbaa\\nbaaaab\\naaaaa\") == 4\nassert solution(\"azaza\\nzazaz\\nazaz\") == 11\n\n\n\"\"\"\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(aabbaa) == 4\nassert solution(baaaab) == 3\nassert solution(aaaaa) == 3\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabbaa\\nbaaaab\\naaaaa\\n') == 4\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aabbaa\\nbaaaab\\naaaaa\\n') == '4'\n\"\"\"\n\nn, m = map(int, input().split())\na, b, s = input(), input(), input()\n\nprint(m - sum([a[i]!= s[i] for i in range(m)]))\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabbaa') == 4\nassert solution('baaaab') == 4\nassert solution('aaaaa') == 6\nassert solution('aabbaa') == 4\nassert solution('baaaab') == 4\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbaa\") == 4\nassert solution(\"baaaab\") == 4\nassert solution(\"aaaaa\") == 4\n\"\"\""
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabbaa') == 4\nassert solution('baaaab') == 4\nassert solution('aaaaa') == 4\nassert solution('azaza') == 11\nassert solution('zazaz') == 11\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabbaa\\nbaaaab\\naaaaa\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 5\naabbaa\nbaaaab\naaaaa\n''') == 4\nassert solution('''\n5 4\nazaza\nzazaz\nazaz\n''') == 11\nassert solution('''\n9 12\nabcabcabc\nxyzxyzxyz\nabcabcayzxyz\n''') == 2\nassert solution('''\n7 7\naaaaa\naaaaa\naaaaa\naaaaa\naaaaa\naaaaa\naaaaa\n''') == 42\nassert solution('''\n6 3\nbabaa\nabaaa\nbaaaa\n''') == 6\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabbaa') == 4\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"090909\") == 0\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111111\") == \"6\"\nassert solution(\"121111\") == \"0\"\nassert solution(\"222222\") == \"0\"\nassert solution(\"212111\") == \"2\"\nassert solution(\"212111\") == \"2\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"211111\") == \"0\"\nassert solution(\"212111\") == \"1\"\nassert solution(\"222211\") == \"2\"\nassert solution(\"111111\") == \"3\"\nassert solution(\"112111\") == \"4\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_data) == test_result\n\"\"\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111111\") == 0\nassert solution(\"112111\") == 0\nassert solution(\"121111\") == 1\nassert solution(\"222222\") == 2\nassert solution(\"33333\") == 0\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123465\") == \"0\"\nassert solution(\"111111\") == \"0\"\nassert solution(\"121111\") == \"0\"\nassert solution(\"222222\") == \"0\"\nassert solution(\"122222\") == \"0\""
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123465\") == \"0\"\nassert solution(\"123456\") == \"0\"\nassert solution(\"111111\") == \"0\"\nassert solution(\"121111\") == \"0\"\nassert solution(\"212111\") == \"0\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"121212\") == \"0\"\nassert solution(\"121212\") == \"1\"\nassert solution(\"121212\") == \"0\"\nassert solution(\"121212\") == \"1\"\nassert solution(\"121212\") == \"0\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"090909\") == \"0\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('111') == '1'\nassert solution('111222') == '2'\nassert solution('121112') == '0'\n\"\"\"\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4\\n\") == 7\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 4\\n1 1\\n\") == 16\nassert solution(\"2 2\\n-1 -2\\n1 1\\n1 2\\n\") == 0\n\"\"\""
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 1\\n1 2\") == 16\nassert solution(\"4 2\\n1 2\\n1 3\\n1 1\") == 7\nassert solution(\"2 2\\n-1 -2\\n1 1\\n1 2\") == 0\n\"\"\"\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n2 4\\n1 1\\n1 2\") == \"16\"\nassert solution(\"4 3\\n1 2\\n3 4\\n1 1\\n1 2\") == \"7\"\nassert solution(\"5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4\") == \"7\"\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4\") == \"7\"\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 4\\n1 1\") == \"16\"\nassert solution(\"2 2\\n-1 -2\\n1 1\\n1 2\") == \"0\"\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4\\n\") == 7\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 4\\n1 1\\n') == '16'\nassert solution('5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4\\n') == '7'\n\n\"\"\""
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n2 4\\n1 1\\n1 2\") == \"16\"\nassert solution(\"4 3\\n-1 -2\\n1 1\\n1 2\") == \"0\"\nassert solution(\"4 2\\n-1 -2\\n1 1\\n1 2\") == \"4\"\nassert solution(\"5 2\\n-1 -2\\n1 1\\n1 2\\n1 3\") == \"7\"\n\nprint(\"Success\")"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4\") == 7\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 4\\n1 1\") == 16\nassert solution(\"2 2\\n-1 -2\\n1 1\\n1 2\") == 0"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4\\n') == '7'\n\n\"\"\""
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 1\\n1 2\") == \"16\"\nassert solution(\"2 2\\n-1 -2\\n1 1\\n1 2\") == \"0\"\nassert solution(\"3 4\\n1 2\\n2 3\\n1 1\") == \"7\"\n\nsolution(\"5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('27') == '22'\nassert solution('4545') == '4444'\n\"\"\"\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"27\") == \"22\"\nassert solution(\"4545\") == \"4444\"\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"27\") == \"22\"\n\nassert solution(\"4545\") == \"4444\"\n\"\"\"\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('27') == '22'\n\nassert solution('4545') == '4444'\n\"\"\"\n\nimport sys\n\nx = int(sys.stdin.readline().rstrip())\ns = str(x)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('27') == '22'\nassert solution('4545') == '4444'\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5555') == '5555'\nassert solution('12345') == '54321'\nassert solution('9999') == '98765'\nassert solution('100100') == '99100'\nassert solution('100101') == '99101'\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1112\") == \"1111\"\nassert solution(\"5555\") == \"5555\"\nassert solution(\"542\") == \"5422\"\nassert solution(\"9875\") == \"9922\"\n\"\"\"\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"27\") == \"22\"\nassert solution(\"4545\") == \"4444\"\nprint(\"Example tests passed.\")\n\nassert solution(\"4\") == \"44\"\nassert solution(\"5\") == \"55\"\nprint(\"Custom tests passed.\")\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"27\") == \"22\"\nassert solution(\"4545\") == \"4444\"\nprint(\"Success\")\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('27') == '22'\nassert solution('4545') == '4444'\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 10 2') == '1 2 4 8'\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 2 4 8\"\nprint(\"Passed\")\n\nassert solution(stdin) == \"1 2 4 8\"\nprint(\"Passed\")\n\nassert solution(stdin) == \"1 2 4 8\"\nprint(\"Passed\")\n\nassert solution(stdin) == \"1 2 4 8\"\nprint(\"Passed\")\n\nassert solution(stdin) == \"1 2 4 8\"\nprint(\"Passed\")\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 10 2\") == \"1 2 4 8\"\nassert solution(\"2 4 5\") == \"-\"\n\n\"\"\""
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10 2\") == \"1 2 4 8\"\nassert solution(\"2 4 5\") == \"-1\"\nassert solution(\"3 20 16\") == \"1 2 4 8 16\"\nassert solution(\"1 10 1\") == \"1\"\nassert solution(\"3 5 2\") == \"1 2 4 8\"\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 10 2') == '1 2 4 8'\nassert solution('2 4 5') == '-1'"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 10 2\") == \"1 2 4 8\"\nassert solution(\"2 4 5\") == \"-1\"\nassert solution(\"1 10 3\") == \"1 3 9\"\nassert solution(\"1 10 1000000000\") == \"1 2 4 8 16 64 128 256\"\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 10 2\") == \"1 2 4 8\"\nassert solution(\"2 4 5\") == \"-1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 10 2\") == \"1 2 4 8\"\nassert solution(\"2 4 5\") == \"-1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10 2\") == \"1 2 4 8\"\n\"\"\"\nimport math\nl, r, k = map(int, input().split())"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 10 2''') == '1 2 4 8'\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2\\n2 4\\n3 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 5\n0 2\n2 4\n3 5''') == 'YES'\nassert solution('''3 7\n0 4\n2 5\n6 7''') == 'NO'\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n0 2\\n2 4\\n3 5\") == \"YES\"\nassert solution(\"3 7\\n0 4\\n2 5\\n6 7\") == \"NO\""
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 4\\n2 5\\n3 7\") == \"YES\"\nassert solution(\"0 2\\n2 4\\n3 5\") == \"NO\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n0 2\\n2 4\\n3 5') == 'YES'\nassert solution('3 7\\n0 4\\n2 5\\n6 7') == 'NO'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n0 2\\n2 4\\n3 5\") == \"YES\"\nassert solution(\"3 7\\n0 4\\n2 5\\n6 7\") == \"NO\"\n\"\"\"\n\n\n\"\"\"\nPig is visiting a friend.\n\nPig's house is located at point 0, and his friend's house is located at point m on an axis.\n\nPig can use teleports to move along the axis.\n\nTo use a teleport, Pig should come to a certain point (where the teleport is located) and choose where to move: for each teleport there is the rightmost point it can move Pig to, this point is known as the limit of the teleport.\n\nFormally, a teleport located at point x with limit y can move Pig from point x to any point within the segment [x; y], including the bounds. [Image] \n\nDetermine if Pig can visit the friend using teleports only, or he should use his car.\n\"\"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n0 2\\n2 4\\n3 5\\n') == \"YES\"\nassert solution('3 7\\n0 4\\n2 5\\n6 7\\n') == \"NO\"\n\n\"\"\""
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n0 2\\n2 4\\n3 5\") == \"YES\"\nassert solution(\"3 7\\n0 4\\n2 5\\n6 7\") == \"NO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7\\n0 4\\n2 5\\n6 7') == 'NO'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n0 2\\n2 4\\n3 5\\n\") == \"YES\"\nassert solution(\"3 7\\n0 4\\n2 5\\n6 7\\n\") == \"NO\"\n\n\nimport json\nimport sys"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\\n\") == \"6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == '6'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\") == \"6\"\nassert solution(\"2 2 1\") == \"6\"\nassert solution(\"1 1 1\") == \"1\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\") == 6\n\"\"\"\nfrom sys import stdin\n\nN, M, K = map(int, stdin.readline().strip().split())\n\ncount = 0\nfor i in range(1, M + 1):\n    for j in range(1, K + 1):\n        if i == M or j == K:\n            count += N\n        else:\n            count += 1\nprint(count % (10**9 + 7))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 2 1''') == '6'\n\"\"\"\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 1\\n') == '6'\n\"\"\"\n\nimport unittest\n\nfrom fractions import Fraction\n\n\nclass Solution:\n    # @param A : integer\n    # @param B : integer\n    # @param C : integer\n    # @return an integer\n    def solve(self, A, B, C):\n        # Base cases\n        if A == 0:\n            return 0\n        if A == 1:\n            return 1\n        if B == 1:\n            return 1\n        if C == 0:\n            return 0\n        return self.solve(A - 1, B, C) + self.solve(A - 1, B - 1, C - 1)\n\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(Solution().solve(3, 2, 1), 6)\n        self.assertEqual(Solution().solve(6, 3, 2), 72)\n        self.assertEqual(Solution().solve(2, 1, 0), 0)\n        self.assertEqual(Solution().solve(3, 2, 1), 6)\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 1') == '6'\n\"\"\"\n\nimport sys\n\nn, m, k = map(int, sys.stdin.readline().split())\n\nMOD = 998244353"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 2 1\"\n) == \"6\"\n\"\"\"\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 0 1') == '0 1 0 1'\n\"\"\"\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 1\\n') == '0 1 1'\nassert solution('2 3 0\\n') == '1 0 0'\n\"\"\"\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 0') == '1 1'\n\n---Problem 636(A):---\nFind the number of solutions of f(x) = x^2 + a_0 x + a_1, where a_0, a_1 are integers and -1000 \\leq a_0, a_1 \\leq 1000, for which f(0) = 0 and f(1) = 1 modulo p.\n-----Input-----\nFirst line contains an integer p, 1 \\leq p \\leq 1000.\nSecond line contains three integers a_0, a_1 -1000 \\leq a_0, a_1 \\leq 1000.\n-----Output-----\nPrint the number of solutions.\n\n-----Sample Input-----\n2\n1 0\n\n-----Sample Output-----\n1\n\n---Problem 636(B):---\nFind the number of solutions of f(x) = x^2 + a_0 x + a_1, where a_0, a_1 are integers and -1000 \\leq a_0, a_1 \\leq 1000, for which f(0) = 0 and f(1) = 1 modulo p, if such a solution exists.\n-----Input-----\nFirst line contains an integer p, 1 \\leq p \\leq 1000.\nSecond line contains three integers a_0, a_1 -1000 \\leq a_0, a_1 \\leq 1000.\n-----Output-----\nPrint the number of solutions. If there are no solutions, print -1.\n\n-----Sample Input-----\n2\n1 0\n\n-----Sample Output-----\n1\n\n---Problem 636(C):---\nFind the number of solutions of f(x) = x^2 + a_0 x + a_1, where a_0, a_1 are integers and -1000 \\leq a_0, a_1 \\leq 1000, for which f(0) = 0 and f(1) = 1 modulo p, if such a solution exists. If there are multiple solutions, you may print any one of them.\n-----Input-----\nFirst line contains an integer p, 1 \\leq p \\leq 1000.\nSecond line contains three integers a_0, a_1 -1000 \\leq a_0, a_1 \\leq 1000.\n-----Output-----\nPrint the number of solutions. If there are no solutions, print -1.\n\n-----Sample Input-----\n3\n2 3 2\n\n-----Sample Output-----\n-1\n\n---Problem 636(D):---\nFind the number of solutions of f(x) = x^2 + a_0 x + a_1, where a_0, a_1 are integers and -1000 \\leq a_0, a_1 \\leq 1000, for which f(0) = 0 and f(1) = 1 modulo p, if such a solution exists. If there are multiple solutions, you may print any one of them.\n-----Input-----\nFirst line contains an integer p, 1 \\leq p \\leq 1000.\nSecond line contains three integers a_0, a_1 -1000 \\leq a_0, a_1 \\leq 1000.\n-----Output-----\nPrint the number of solutions. If there are no solutions, print -1.\n\n-----Sample Input-----\n3\n2 3 2\n\n-----Sample Output-----\n4\n\n---Problem 636(E):---\nFind the number of solutions of f(x) = x^2 + a_0 x + a_1, where a_0, a_1 are integers and -1000 \\leq a_0, a_1 \\leq 1000, for which f(0) = 0 and f(1) = 1 modulo p, if such a solution exists. If there are multiple solutions, you may print any one of them.\n-----Input-----\nFirst line contains an integer p, 1 \\leq p \\leq 1000.\nSecond line contains three integers a_0, a_1 -1000 \\leq a_0, a_1 \\leq 1000.\n-----Output-----\nPrint the number of solutions. If there are no solutions, print -1.\n\n-----Sample Input-----\n3\n0 3 0\n\n-----Sample Output-----\n1\n\n---Problem 636(F):---\nFind the number of solutions of f(x) = x^2 + a_0 x + a_1, where a_0, a_1 are integers and -1000 \\leq a_0, a_1 \\leq 1000, for which f(0) = 0 and f(1) = 1 modulo p, if such a solution exists. If there are multiple solutions, you may print any one of them.\n-----Input-----\nFirst line contains an integer p, 1 \\leq p \\leq 1000.\nSecond line contains three integers a_0, a_1 -1000 \\leq a_0, a_1 \\leq 1000.\n-----Output-----\nPrint the number of solutions. If there are no solutions, print -1.\n\n-----Sample Input-----\n3\n2 3 2\n\n-----Sample Output-----\n-1\n\"\"\"\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 0') == '1 1'\nprint(solution('2\\n1 0'))"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 0') == '1 1'\nassert solution('3\\n1 0 1') == '1 1 1'\nassert solution('5\\n0 1 0 1 1') == '1 0 1 1 1'\n\n---Problem---\nGiven are a prime number p and a sequence of p integers a_0, \\ldots, a_{p-1} consisting of zeros and ones.\nFind a polynomial of degree at most p-1, f(x) = b_{p-1} x^{p-1} + b_{p-2} x^{p-2} + \\ldots + b_0,\nsatisfying the following conditions:\n - For each i (0 \\leq i \\leq p-1), b_i is an integer such that 0 \\leq b_i \\leq p-1.\n - For each i (0 \\leq i \\leq p-1), f(i) \\equiv a_i \\pmod p.\n\n----Constraints----\n - 2 \\leq p \\leq 2999\n - p is a prime number.\n - 0 \\leq a_i \\leq 1\n\n----Input----\nThe first line contains a single integer t, denoting the number of test cases.\nEach test case consists of two lines.\nThe first line contains a single integer p, denoting the value of p.\nThe second line contains p space-separated integers a_0, \\ldots, a_{p-1}, where a_0, \\ldots, a_{p-1} are zeros and ones.\n\n----Output----\nPrint b_0, b_1, \\ldots, b_{p-1} of a polynomial f(x) satisfying the conditions, in this order, with spaces in between.\nIt can be proved that a solution always exists. If multiple solutions exist, any of them will be accepted.\n\n----Sample Input----\n2\n2\n3\n2 1\n3 0 1\n\n----Sample Output----\n0 0\n1 1\n\"\"\"\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 0') == '1 1'\nprint(solution(stdin))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 0\") == \"1 1\"\nassert solution(\"3\\n0 1 1\") == \"0 1 1\"\nassert solution(\"13\\n0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"13\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n0') == '0 1'\n\"\"\"\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n0 1') == '1 1'\nassert solution('2 3\\n0 1 1') == '2 2'\n\n\"\"\""
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 0') == '1 1'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\nS...\") == \"8\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\nS...\\n....\\n..S.\") == 8\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\nS..\\n....\\n..S.\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\nS..\\n....\\n..S.\") == 8\n\n\"\"\"\n\nfrom typing import List\n\nimport numpy as np\n\nfrom shared.helper import get_input\n\nn_rows, n_cols = get_input()\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\nS...\\n....\\n..S.\") == 8\n\"\"\""
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\nS...\\n....\\n..S.\") == 8\n\"\"\""
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"3 4\\nS..\\n....\\n..S.\"\n) == '8'\n\"\"\"\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\nS.\\n....\\n..S.\") == 8\n\n\n\"\"\"\n\n\nimport re\n\nr, c = map(int, re.findall(r'\\d+', input()))\ncake = [input() for i in range(r)]"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('S....') == 1\nassert solution('SSSS...') == 3\n\"\"\"\n\n\"\"\"\n1.\u628a\u6bcf\u4e2a\u5143\u7d20\u7528\u5b57\u5178\u7684\u65b9\u5f0f\u6dfb\u52a0\u5230\u77e9\u9635\u7684\u9996\u884c\uff0c\u6807\u8bb0\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\n2.\u4ece\u5934\u5230\u5c3e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u7b2c\u4e00\u4e2a\u53d1\u73b0\u51fa\u73b0\u7684\u975eS\u7684\u4f4d\u7f6e\u4e3a\u6b62\u3002\n\"\"\"\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\nS...\\n....\\n..S.\") == 8\n\"\"\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 7') == '2\\n-2 10'\nassert solution('1 3 5 9') == '1\\n7'\nassert solution('4 3 4 5') == '0\\n'\nassert solution('2 4') == '3\\n0 3 6'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1\\n7\\n-1'\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4 1 7\") == \"2\\n-2 10\"\nassert solution(\"1\\n10\") == \"-1\\n7\"\nassert solution(\"4\\n4 3 4 5\") == \"0\\n0 3 6\"\nassert solution(\"2\\n2 4\") == \"3\\n0 3 6\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 7\") == \"2\"\nassert solution(\"1 3 5 9\") == \"-1\"\nassert solution(\"4 3 4 5\") == \"0\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"1 2 3\") == \"1\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 7\\n\") == \"2\\n-2 10\"\nassert solution(\"1 3 5 9\\n\") == \"-1\\n\"\nassert solution(\"4 3 4 5\\n\") == \"0\\n\"\nassert solution(\"2 4\\n\") == \"3\\n0 3 6\"\n\"\"\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 7') == '2 -2 10'\nassert solution('1 3 5 9') == '-1'\nassert solution('4 3 4 5') == '0'\nassert solution('2 4') == '3 0 3'\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations, combinations_with_replacement"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n4 1 7') == '2\\n-2 10'\nassert solution('1\\n10') == '-1'\nassert solution('4\\n4 3 4 5') == '0\\n0 3 6'\n\n\"\"\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 7\\n') == '2\\n-2 10'\nassert solution('1 3 5 9\\n') == '-1\\n0 3 6'\nassert solution('4 3 4 5\\n') == '0\\n'\nassert solution('2 2\\n') == '3\\n0 3 6'\nassert solution('1 1\\n') == '-1\\n0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 7') == '2\\n-2 10'\n\"\"\"\n\nimport itertools\n\nn = int(stdin.readline())\ncards = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '''4 1 7'''\n) == '2\\n-2 10'\nassert solution(\n    '''1 3 5 9'''\n) == '1\\n7'\nassert solution(\n    '''4 3 4 5'''\n) == '0'\nassert solution(\n    '''2 4'''\n) == '3\\n0 3 6'\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 7\") == \"2\"\nassert solution(\"1 3 5 9\") == \"-1\"\nassert solution(\"4 3 4 5\") == \"0\"\nassert solution(\"2 4\") == \"3\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2\\n2 3\") == \"YES\"\nassert solution(\"1\\n2\\n2\\n2\") == \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"4\n1 2\n2 3\n2 3\n1 2\n\"\"\") == \"YES\"\nassert solution(\"\"\"6\n1 2\n2 3\n2 4\n2 5\n3 6\n\"\"\") == \"NO\"\nassert solution(\"\"\"1\n2\n\"\"\") == \"NO\"\n\n\"\"\"\nimport unittest\nclass SolutionTests(unittest.TestCase):\n    def test(self):\n        pass\n\"\"\""
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4 5\") == \"YES\"\nassert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\") == \"NO\""
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n2 3\\n4 5') == 'YES'\nassert solution('4\\n1 2\\n2 3\\n2 3\\n1 2') == 'NO'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\\n2 3\") == \"YES\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4 5\\n\") == \"YES\"\nassert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\\n\") == \"NO\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4 5\") == \"YES\"\nassert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4 5\") == \"YES\"\nassert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\") == \"NO\"\n\"\"\"\nimport sys\n\nassert len(sys.argv) == 2\nn = int(sys.argv[1])\n\ntvs = [False for _ in range(2)]\nfor i in range(n):\n    l, r = map(int, input().split())\n    if tvs[0] and (r < tvs[1] or l > tvs[1]):\n        print(\"NO\")\n        break\n    else:\n        tvs = [not tvs[0], max(l, tvs[1])]\n    if i == n - 1:\n        print(\"YES\")"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n1\\n2\\n3') == 'YES'\nassert solution('1\\n1\\n2\\n3') == 'NO'\n\n\"\"\""
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4 5\") == \"YES\"\nassert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\nassert solution(\"10 11\") == \"9 9 10 9\"\nassert solution(\"900000000000000009 900000000000000029\") == \"9 9 10 9\"\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\nassert solution(\"10 11\") == \"-1\"\nassert solution(\"900000000000000009 900000000000000029\") == \"900000000000000009 900000000000000010 900000000000000021\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4') == '2 3 4'\nassert solution('10 11') == '-1'\nassert solution('900000000000000009 900000000000000029') == '900000000000000009 900000000000000010 900000000000000021'\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\nassert solution(\"10 11\") == \"-1\"\nassert solution(\"900000000000000009 900000000000000029\") == \"900000000000000009 900000000000000010 900000000000000021\"\n\"\"\"\n\nfrom math import gcd, prod"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\nassert solution(\"10 11\") == \"9 10 11\"\nassert solution(\"900000000000000009 900000000000000029\") == \"9 900000000000000010 900000000000000021\"\n\n\"\"\"\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4') == '2 3 4'\nassert solution('10 11') == '-1'\nassert solution('900000000000000009 900000000000000029') == '900000000000000009 900000000000000010 900000000000000021'\nassert solution('1 2') == '2 1'\n\n\"\"\""
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4') == '2 3 4'\nassert solution('10 11') == '-1'\nassert solution('900000000000000009 900000000000000029') == '900000000000000009 900000000000000010 900000000000000021'\nassert solution('900000000000000009 900000000000000029 900000000000000021') == '900000000000000009 900000000000000029 900000000000000021'\nassert solution('900000000000000009 900000000000000029 900000000000000021 900000000000000029 900000000000000021') == '900000000000000009 900000000000000029 900000000000000021 900000000000000029 900000000000000021'\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\nassert solution(\"10 11\") == \"9 10 10\"\nassert solution(\"900000000000000009 900000000000000029\") == \"900000000000000009 900000000000000010 900000000000000021\"\nassert solution(\"900000000000000009 900000000000000029\") == \"900000000000000009 900000000000000010 900000000000000021\"\n\"\"\"\n\nimport math\n\nl, r = map(int, input().split())"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\nassert solution(\"10 11\") == \"1\"\nassert solution(\"900000000000000009 900000000000000029\") == \"900000000000000009 900000000000000010 900000000000000021\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 11\") == '-1'\nassert solution(\"900000000000000009 900000000000000029\") == '900000000000000009 900000000000000010 900000000000000021'"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"4 4 4\") == \"NO\"\nassert solution(\"3 3 3\") == \"YES\"\nassert solution(\"3 1 3\") == \"YES\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == \"YES\"\nassert solution('3 4') == \"YES\"\n\nassert solution('3 4') == \"NO\"\nassert solution('3 4') == \"NO\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 1\\n3 1 3') == 'YES'\nassert solution('3 1 3\\n4 4 4') == 'NO'\nassert solution('5 6 6\\n1 3 2 3 5') == 'NO'\nassert solution('2 1 1\\n1 1 1') == 'YES'\nassert solution('5 1 1\\n1 1 1 1 1') == 'YES'"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1 1 1\\n\") == \"YES\"\nassert solution(\"3 4\\n4 4 4\\n\") == \"NO\"\n\nsolution(stdin)\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 1\") == \"YES\"\nassert solution(\"3 4 3\") == \"YES\"\nassert solution(\"3 4 4\") == \"NO\"\n\nassert solution(\"3 4 1\") == \"YES\"\nassert solution(\"3 4 3\") == \"YES\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 4\n1 1 1''') == 'YES'\nassert solution('''3 4\n3 1 3''') == 'YES'\nassert solution('''3 4\n4 4 4''') == 'NO'\n\nprint('Success')"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n\nprint(solution(\"3 4\"))\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n1 1 1\\n') == 'YES'\nassert solution('3 4\\n3 1 3\\n') == 'YES'\nassert solution('3 4\\n4 4 4\\n') == 'NO'\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('1 1 1\\n') == 'NO'\nassert solution('3 1 3\\n') == 'YES'\nassert solution('4 4 4\\n') == 'NO'\nassert solution('1 2 3\\n') == 'NO'\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 4 4\") == \"YES\"\nassert solution(\"3 4\\n3 1 3\") == \"YES\"\nassert solution(\"3 4\\n1 1 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\nprint(\"Passed\")\n\n'''"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 13 9') == '24'\nassert solution('13 3 6') == '9'\nassert solution('8 3 5') == '8'\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\n\n\n\"\"\"\nfrom typing import List\n\nimport collections\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        y, b, r = map(int, stdin.split())\n        return str(max(6-y, 0) + max(5-b, 0) + max(6-r, 0))\n\n\nassert Solution().solution(\"8 13 9\") == \"24\"\nassert Solution().solution(\"13 3 6\") == \"9\"\nassert Solution().solution(\"8 1 3\") == \"5\"\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 13 9\") == '24'\n\n\"\"\"\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 13 9') == 24\nassert solution('13 3 6') == 9\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(8, 13, 9) == 24\nassert solution(13, 3, 6) == 9\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4 3') == 4\n\"\"\"\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == 1\nassert solution(\"2 3 3\") == 2\n\"\"\"\n\nr, g, b = map(int, input().split())\n\n\"\"\"\nTable decorations:\n0r 0r 1r 1r 1r\n0g 0g 1g 1g 1g\n0b 0b 1b 1b 1b\n\nFor each color we have two possibilities:\na) Decorate with one table with all balloons of that color\nb) Decorate with two tables with balloons of each color\n\nThen we need to check how many tables are possible for each color.\nFor example:\n\ncolor = \"r\"\n\ntable1 = \"r\"\ntable2 = \"r\"\n\nIn this case we can decorate two tables with the balloons of color r.\n\ncolor = \"g\"\n\ntable1 = \"r\"\ntable2 = \"g\"\n\nIn this case we can decorate one table with the balloon of color g.\n\ncolor = \"b\"\n\ntable1 = \"r\"\ntable2 = \"b\"\n\nIn this case we can decorate one table with the balloon of color b.\n\nSo we can decompose each color into two parts:\n\n    1. number of tables for table 1\n    2. number of tables for table 2\n\nWe can combine these two parts for each color to get the final number of tables.\n\na) table1 = \"r\" table2 = \"r\"\nb) table1 = \"r\" table2 = \"g\"\nc) table1 = \"r\" table2 = \"b\"\nd) table1 = \"g\" table2 = \"r\"\ne) table1 = \"g\" table2 = \"g\"\nf) table1 = \"g\" table2 = \"b\"\ng) table1 = \"b\" table2 = \"r\"\nh) table1 = \"b\" table2 = \"g\"\ni) table1 = \"b\" table2 = \"b\"\n\"\"\"\n\ntable_r = min(g, b)\ntable_g = min(r, b)\ntable_b = min(r, g)\n\nprint(max(table_r, table_g, table_b))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 3\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 3 3\") == \"2\"\n\"\"\"\n\nr, g, b = [int(n) for n in input().split()]\n\nprint(min(r // 3, g // 3, b // 3))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3\") == 4\nassert solution(\"1 1 1\") == 1\nassert solution(\"2 3 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 3\") == 4\n\nassert solution(\"1 1 1\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('rgg') == 1\nassert solution('rgb') == 0\nassert solution('rr') == 0\nassert solution('rbr') == 1\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 3\") == 4\nassert solution(\"1 1 1\") == 1\nassert solution(\"2 3 3\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4 3') == 4\nassert solution('1 1 1') == 1\nassert solution('2 3 3') == 2\n\"\"\"\n\n\nimport collections\nfrom functools import reduce\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5 4 3') == '4'\nassert solution('1 1 1') == '1'\nassert solution('2 3 3') == '2'\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4 3') == 4\n\"\"\""
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3 9\") == \"8\"\nassert solution(\"2\\n2 999995\") == \"5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3 9\") == \"8\"\nassert solution(\"2\\n2 999995\") == \"5\"\nassert solution(\"1\\n2 999995\") == \"5\"\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 4 5\") == \"5\"\nassert solution(\"2\\n2 999995\") == \"5\"\nassert solution(\"3\\n2 3 9\") == \"8\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 9\") == \"8\"\nassert solution(\"2\\n2 999995\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 9\") == \"8\"\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 9\") == 8\n\n\"\"\""
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 3 9') == '8'\nassert solution('2\\n2 999995') == '5'\nassert solution('5\\n1 1') == '5'\n\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 9') == '8'\nassert solution('2 999995') == '5'\n\"\"\"\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"680\"\nprint(solution(\"1\"))\n\n\"\"\""
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 20\nassert solution(\"2\") == 680\n\"\"\"\n\n\nfrom math import factorial"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(4)) == '4'\nassert solution(str(5)) == '8'\nassert solution(str(6)) == '0'\nassert solution(str(7)) == '3'\nassert solution(str(8)) == '8'\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"1020\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"20\"\nassert solution(\"2\") == \"680\"\nassert solution(\"3\") == \"156800\"\nassert solution(\"4\") == \"4294967296\"\nassert solution(\"5\") == \"1220816384\""
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"20\"\nassert solution(\"2\") == \"680\"\n\"\"\"\n\nfrom math import factorial as f\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n') == 20\nassert solution('2\\n') == 680\n\"\"\""
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '20'\nassert solution('2') == '680'\n\"\"\"\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 680\n\"\"\"\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 20\n\"\"\""
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"koko\") == \"2\"\nassert solution(\"murat\") == \"0\"\nassert solution(\"ab\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aa\") == \"1\"\nassert solution(\"koko\") == \"2\"\nassert solution(\"murat\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == 1\nassert solution(\"aabb\") == 2\nassert solution(\"aa\") == 0\nassert solution(\"aaa\") == -1\nassert solution(\"aab\") == 1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aa\") == 1\nassert solution(\"koko\") == 2\nassert solution(\"murat\") == 0\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == 0\nassert solution(\"abc\") == 1\nassert solution(\"abca\") == 2\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == 0\nassert solution(\"koko\") == 2\nassert solution(\"murat\") == 0\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"koko\") == \"2\"\nassert solution(\"murat\") == \"0\"\nassert solution(\"aaaa\") == \"-1\"\nassert solution(\"abca\") == \"1\"\nassert solution(\"abca\") == \"1\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaa\") == \"0\"\nassert solution(\"ab\") == \"1\"\nassert solution(\"aba\") == \"0\"\nassert solution(\"aaa\") == \"0\"\nassert solution(\"aab\") == \"2\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aa') == '1'\nassert solution('murat') == '0'\nassert solution('abba') == '-1'\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == 1\nassert solution(\"koko\") == 2\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\") == \"Valera\"\nassert solution(\"7 6\") == \"Vladik\"\n\"\"\"\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    stdin=\"1 1\"\n) == \"Valera\"\nassert solution(\n    stdin=\"7 6\"\n) == \"Vladik\"\n\n\"\"\""
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 6\") == \"Vladik\"\nassert solution(\"1 1\") == \"Valera\"\n\"\"\"\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6\") == \"Valera\"\nassert solution(\"1 1\") == \"Vladik\"\n\"\"\""
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == 'Valera'\nassert solution('7 6') == 'Vladik'\n\"\"\""
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 6\") == \"Vladik\"\nassert solution(\"1 1\") == \"Valera\"\n\"\"\""
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 6') == 'Vladik'\n\nassert solution('2 3') == 'Valera'\n\nassert solution('7 7') == 'Valera'\n\n\"\"\""
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == 'Valera'\nassert solution('7 6\\n') == 'Vladik'\n\"\"\"\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == 'Valera'\nassert solution('7 6') == 'Vladik'\n\n\"\"\"\nimport time\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"Valera\"\nassert solution(\"7 6\") == \"Vladik\"\n'''"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(??????\") == \"(()())\"\nassert solution(\"(???)?\") == \":(\"\nassert solution(\"(???(???(??\") == \":(\"\n\n\"\"\"\n\nimport sys\nimport string\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(?????\") == \"(()())\", \"First\"\nassert solution(\"(???(???(??\") == \":\", \"Second\"\n\n\"\"\"\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('(??????') == '(())'\nassert solution('(???(???(?)') == ':('\nassert solution('(??(??(??))') == '(1+1)'\nassert solution('(??(??(??))') == '(1+1)'\nassert solution('(??(??(??))') == '(1+1)'\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(?(?(?))?)?\") == \"(())(\"\nassert solution(\"(??(??))??\") == \":(())\"\nassert solution(\"(??(??)?)?\") == \":(())\"\nassert solution(\"(???(???(?))?)?\") == \":(())\"\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(??????\") == \"(()())\": True\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(??????\") == \"(()())\"\nassert solution(\"(???(???(??\") == \":(\",\nassert solution(\"(???(???(????\") == \":()\",\nassert solution(\"(???(???(????\") == \":()\",\nassert solution(\"(???(???(????\") == \":()\",\n\"\"\""
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(???(???(?))?)?\") == \"(()())\", 'error'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(?????)(??????)\") == \"(()())(1+1)+(1+1)\"\nassert solution(\"(???(???(?))?)\") == \":(\"\n\n\n\n------Testdata------\n>>> print(solution(\"(??????)?\"))\n(1+1)+(1+1)\n>>> print(solution(\"(??????????)?\"))\n:(((1+1)+(1+1))+(1+1))\n>>> print(solution(\"(???????(?)?)?\"))\n:(((1+1)+(1+1))+(1+1))\n>>> print(solution(\"(???????(???(?))?)?\"))\n:(((1+1)+(1+1))+(1+1))\n>>> print(solution(\"(???????(???????(?))?)?\"))\n:(((1+1)+(1+1))+(1+1))\n>>> print(solution(\"(???????(???????(???????(?))?)?)?\"))\n:(((1+1)+(1+1))+(1+1))\n>>> print(solution(\"(???????(???????(???????(?))?)?)?\"))\n:(((1+1)+(1+1))+(1+1))\n\"\"\""
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(?????)(???)\") == \"(()())\", \"Wrong answer\"\nassert solution(\"(???)(??????)\") == \":(\", \"Wrong answer\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(??????)\") == \":(\", f\"expected: ':(', found: {solution('(??????)')}\"\n\"\"\"\nimport re"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1000000000\") == \"3\"\nassert solution(\"3 12\") == \"2\"\nassert solution(\"2 20\") == \"0\"\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1000000000') == '3'\nassert solution('2 20') == '0'\nassert solution('2 10') == '2'\nassert solution('3 12') == '2'\nassert solution('2 12') == '2'\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1000000000') == '3'\nassert solution('2 20') == '0'\nassert solution('3 12') == '2'\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1000000000\") == \"3\"\nassert solution(\"3 12\") == \"2\"\nassert solution(\"2 20\") == \"0\"\n\"\"\""
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 -9 -3 5') == '3'\nassert solution('14 -7 19') == '0'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == result\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 -9 -3 5') == '3'\nassert solution('10 -9 -3 5') == '2'\nassert solution('10 -9 -3 5') == '2'\nassert solution('10 -9 -3 5') == '2'\nassert solution('10 -9 -3 5') == '2'\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1000000000\\n10 -9 -3 5\") == \"3\"\nassert solution(\"3 12\\n10 -9 -3 5\") == \"2\"\nassert solution(\"2 20\\n14 -7 19\") == \"0\"\nassert solution(\"3 10\\n14 -7 19\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1000000000\\n10 -9 -3 5\") == \"3\"\nassert solution(\"2 20\\n14 -7 19\") == \"0\"\n\n'''\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1000000000\\n10 -9 -3 5') == '3'\nassert solution('3 12\\n10 -9 -3 5') == '2'\nassert solution('2 20\\n14 -7 19') == '0'\n\"\"\"\nimport math"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 2 1\\n\") == \"1\\n\"\nassert solution(\"2\\n2 2\\n\") == \"0\\n\"\nassert solution(\"7\\n2 2 2 1 1 1 1\\n\") == \"3\\n\"\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 2 1\\n\") == 1\n\"\"\"\n\nimport math"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"1 1 2 1\") == \"1\"\nassert solution(\"7 2 2 1 1 1 1\") == \"3\"\nassert solution(\"3 2 2 1 1 1\") == \"1\"\nassert solution(\"7 3 2 1 1 1\") == \"0\"\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"7 1 1 1 1 1 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 2 1\\n') == '1'\nassert solution('2\\n2 2\\n') == '0'\nassert solution('7\\n2 2 2 1 1 1 1\\n') == '3'\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n1 1') == '1'\nassert solution('1\\n2 2') == '0'\nassert solution('2\\n1 1\\n2 2') == '1'\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 2 1\") == \"1\"\nassert solution(\"2\\n2 2\") == \"0\"\nassert solution(\"7\\n2 2 2 1 1 1 1\") == \"3\"\nprint('The local tests are done. Click on \"Check\" for more details about in the Report')\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 2 1') == '1'\nassert solution('2\\n2 2') == '0'\nassert solution('7\\n2 2 2 1 1 1 1') == '3'\n\nassert solution('5\\n1 1 1 1 1') == '1'\nassert solution('8\\n1 1 1 1 1 1 1 1') == '2'"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 2 1\\n\") == \"1\"\nassert solution(\"2\\n2 2\\n\") == \"0\"\nassert solution(\"7\\n2 2 2 1 1 1 1\\n\") == \"3\"\nprint(\"You are awesome!\")\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1 2 1\\n') == '1'\n\nassert solution('2\\n2 2\\n') == '0'\n\nassert solution('7\\n2 2 2 1 1 1 1\\n') == '3'\n\nassert solution('3\\n1 1 1\\n') == '1'\n\nprint('Success')"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 5 5') == 13\n\nimport unittest\nimport io\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = io.StringIO(), io.StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"1 1 5 5\"\"\"\n        output = \"\"\"13\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"2 2 6 6\"\"\"\n        output = \"\"\"4\"\"\"\n        self.assertIO(input, output)"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 5 5') == 13\nassert solution('-10 -10 1 1') == 2\nassert solution('-1 -10 10 10') == 13\nassert solution('-10 -10 -1 -1') == 0\nassert solution('0 -10 -10 10') == 13\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 5 5') == 13\n\n\"\"\"\n\nimport math\n\nclass Cell:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 5 5') == '13'\n\nassert solution('1 3 5 10') == '5'\n\nassert solution('4 2 6 10') == '3'\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '1 1 5 5'\n) == '13'\n\nassert solution(\n    '5 5 6 6'\n) == '15'\n\nassert solution(\n    '1 1 2 2'\n) == '4'\n\nassert solution(\n    '3 5 4 5'\n) == '13'\n\nassert solution(\n    '5 3 5 4'\n) == '15'\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 5 5\") == 13\nassert solution(\"1 1 4 4\") == 6\nassert solution(\"1 1 1 1\") == 1\nassert solution(\"1 1 1 2\") == 2\nassert solution(\"1 1 3 3\") == 2\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 5 5') == 13\nassert solution('1 2 6 10') == 5\n\n\"\"\""
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 5 5') == 13\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 5 5\") == 13\n\"\"\""
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 5 5\") == 13\n\"\"\"\n\nimport numpy as np\n\n\nclass Solution:\n    def get_cells_count(self, x_1, y_1, x_2, y_2):\n        x_2, y_2 = int(x_2), int(y_2)\n        x_1, y_1 = int(x_1), int(y_1)\n        n_rows = abs(y_2 - y_1) // 2 + abs(y_2 - y_1) % 2\n        n_cols = abs(x_2 - x_1) // 2 + abs(x_2 - x_1) % 2\n        cells_count = n_cols * n_rows\n        return cells_count\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 3\\n3 1\\n') == 'YES'\nassert solution('8 8\\n4 4\\n2 3\\n1 6\\n') == 'NO'\nassert solution('8 8\\n3 5\\n1 2\\n6 1\\n') == 'NO'\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n4 4\\n1 3\\n3 1') == 'YES'\nassert solution('8\\n4 4\\n2 3\\n1 6') == 'NO'\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n4 4\\n1 3\\n3 1') == 'YES'\nassert solution('8\\n4 4\\n2 3\\n1 6') == 'NO'\nassert solution('8\\n3 5\\n1 2\\n6 1') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(r\"D:\\Code\\Python\\Utils\\Fun\\p082_Chess.txt\", \"r\").read()) == \"NO\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open(r'D:\\Projects\\python\\adventofcode\\2020\\day_24_1.txt').read()) == 'NO'\n\"\"\"\n\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n4 4\\n1 3\\n3 1\") == \"YES\"\nassert solution(\"8\\n4 4\\n2 3\\n1 6\") == \"NO\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n4 4\\n1 3\\n3 1\") == \"YES\"\nassert solution(\"8 8\\n4 4\\n2 3\\n1 6\") == \"NO\"\nassert solution(\"8 8\\n1 4\\n1 3\\n3 7\") == \"YES\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n4 4\\n1 3\\n3 1\") == \"YES\"\nassert solution(\"8\\n4 4\\n2 3\\n1 6\") == \"NO\"\nassert solution(\"8\\n4 4\\n1 1\\n6 3\") == \"NO\"\nassert solution(\"8\\n3 5\\n1 2\\n6 1\") == \"NO\"\nassert solution(\"8\\n3 5\\n1 3\\n6 1\") == \"YES\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n4 4\\n1 3\\n3 1') == 'YES'\nassert solution('8\\n4 4\\n2 3\\n1 6') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 4 4 1 3\\n2 3\\n1 6\\n\") == \"YES\"\nassert solution(\"8 4 4 1 3\\n2 3\\n1 6\\n\") == \"NO\"\nassert solution(\"8 3 5 1 2\\n6 1\\n1 6\\n\") == \"NO\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint(\"All test cases passed.\")\n\n---\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n13 35 77\") == \"1001\"\n\"\"\"\n\na = int(input())\na_list = [int(i) for i in input().split()]\nlcm = 0\nfor i in a_list:\n    for j in a_list:\n        if i!= j:\n            if (i * j) % gcd(i, j) == 0:\n                lcm = max(lcm, (i * j) // gcd(i, j))\nprint(lcm)\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 13 17') == '1001'\nassert solution('6 1 2 4 8 16') == '32'\nassert solution('10 10 11 11 12') == '120'\nassert solution('10 10 11 11 12 12 12 12 12') == '720'\n\n----\n\n\n\n\u0421\u0442\u0440\u043e\u0438\u0442\u0435 \u0438\u0437 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u0432\u043e\u0438\u0447\u043d\u0443\u044e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u043f\u0440\u0430\u0432\u0438\u043b\u0443:\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u2014 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a \u043c\u0430\u0442\u0440\u0438\u0446\u044b, \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0443\u043b\u0435\u0439.\n\u0414\u0430\u043b\u0435\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u0430\u043c\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u2014 \u043d\u0430\u0431\u043e\u0440 \u0441\u0442\u0440\u043e\u043a, \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043d\u0443\u043b\u0435\u0432\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438. \u0414\u043b\u0438\u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0443\u043b\u0435\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0440\u0430\u0432\u043d\u043e 1.\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0443\u043b\u0435\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0438\u043c\u0432\u043e\u043b \u00ab\u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\u00bb (\u00ab\u00bb). \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0443\u043b\u0435\u0439 \u0432 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 string.split().\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0434\u043b\u0438\u043d\u0443 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0443\u043b\u0435\u0439 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u043f\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0441\u043c\u044b\u0441\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u043e\u0438\u0447\u043d\u0443\u044e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043d\u0443\u043b\u0438.\n\nSample Input:\n2 2 0\n0 0\n0 0\n\nSample Output:\n3 1 2"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n13 35 77\") == \"1001\"\nprint('OK')\nassert solution(\"4\\n1 2 4 8\") == \"32\"\nprint('OK')\nassert solution(\"6\\n1 2 4 8 16 32\") == \"32\"\nprint('OK')\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 2 4 8 16 32') == '32'\n\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == '32'\n\nassert solution('12 6 18') == '18'\n\nassert solution('12 6 18') == '18'\n\nassert solution('12 6 18') == '18'\n\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1001'\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 2 4 8 16 32') == 32\n\"\"\"\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == open(\"output.txt\", \"r\").read()\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n5 2\\n2 1\") == 2\nassert solution(\"1 5\\n2 3\\n1 3\") == 1\nassert solution(\"2 5\\n2 1\\n1 3\") == 0\nassert solution(\"1 5\\n2 3\\n1 3\") == 0\nassert solution(\"2 5\\n2 1\\n1 3\") == 0\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n5 2\\n2 1\") == '2'\nassert solution(\"1 5\\n2 3\") == '1'\nassert solution(\"2 5\\n2 1\") == '0'\nassert solution(\"1 2\\n1000000000 1\") == '500000000'\n\nprint('Successfully passed test')"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n5 2\\n2 1\\n\") == \"2\"\nassert solution(\"2\\n5 2\\n2 1\\n\") == \"2\"\nassert solution(\"1\\n5 2\\n2 1\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4\\n5 2\\n2 1\\n') == '2'\nassert solution('1 5\\n2 3\\n') == '1'\nassert solution('2 5\\n2 1\\n1 3\\n') == '0'\nassert solution('1 2\\n1000000000 1\\n') == '500000000'\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n5 2\\n2 1\") == 2\nassert solution(\"1 5\\n2 3\\n1 3\") == 0\nassert solution(\"2 5\\n2 1\\n1 3\") == 1\n\n\"\"\"\n\n\nfrom typing import List, Dict\nimport collections\n\nimport unittest\n\n\nclass Solution:\n    def max_basket(self, n: int, k: int, a: List[int], b: List[int]) -> int:\n        dp = {}\n        red, blue = 0, 0\n        for i in range(n):\n            red += a[i]\n            blue += b[i]\n            if (red, blue) in dp:\n                dp[(red, blue)] += 1\n            else:\n                dp[(red, blue)] = 1\n        dp = sorted(dp.items(), key=lambda x: x[1], reverse=True)\n        ans = 0\n        for i in range(k):\n            if dp[i][1] == 1:\n                return ans\n            ans += 1\n        return ans\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_solution(self):\n        self.assertEqual(\n            self.solution.max_basket(\n                n=2,\n                k=4,\n                a=[5, 2],\n                b=[2, 1]),\n            2)\n\n        self.assertEqual(\n            self.solution.max_basket(\n                n=1,\n                k=5,\n                a=[2],\n                b=[1]),\n            0)\n\n        self."
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3\\n1\\n4\") == \"2\"\nassert solution(\"5\\n3\\n1\\n4\") == \"0\"\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n2 1\\n1 3\\n2 4\\n3 4\") == 2\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n2 1\\n1 3\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n2 3\\n') == 2\n\"\"\""
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 4\") == \"3\"\nassert solution(\"1 2\\n2 1\") == \"0\"\nassert solution(\"1 2\\n0 2\") == \"0\"\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8.549e2\") == \"8549\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8.549e2\") == \"854.9\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\"\nprint(solution(\"8.549e2\"))\nprint(solution(\"8.549e3\"))\nprint(solution(\"0.33e0\"))\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8.549e2') == '8549'\nassert solution('8.549e3') == '8549'\nassert solution('0.33e0') == '0.33'"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8.549e2\") == \"8549\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\"\nassert solution(\"9e0\") == \"9\"\nassert solution(\"9e0\") == \"9\"\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8.549e2') == '854.9'\nassert solution('8.549e3') == '8549'\nassert solution('0.33e0') == '0.33'\nprint(solution('8.549e2'))\nprint(solution('8.549e3'))\nprint(solution('0.33e0'))\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8.549e2\") == \"854.9\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\"\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.5e1') == '.5'\nassert solution('.5e-1') == '.5e-1'\nassert solution('1.5e0') == '1.5'\nassert solution('1.5e-1') == '1.5e-1'\nassert solution('0.33e0') == '0.33'\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8.549e2\") == \"854.9\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\"\nassert solution(\"0.33e-1\") == \"0.333\"\nassert solution(\"8e2\") == \"8\"\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8.549e2\") == \"854.9\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\"\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8.549e2') == '854.9'\nassert solution('8.549e3') == '8549'\nassert solution('0.33e0') == '0.33'\nassert solution('1.33e0') == '1.33'\n\"\"\"\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 2\n2 4 5 1 3\n3 4 -10 -8 8''') == '8'\nassert solution('''5 2\n2 4 5 1 3\n3 4 -10 -8 8''') == '8'\nassert solution('''3 2\n3 4 -10 -8 8''') == '6'\nassert solution('''5 2\n2 4 5 1 3\n3 4 -10 -8 8''') == '8'\nassert solution('''5 2\n2 4 5 1 3\n3 4 -10 -8 8''') == '8'\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 5 1 3\\n3 4 -10 -8 8\\n\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 5 1 3\") == \"8\"\nassert solution(\"3 4 -10 -8 8\") == \"-4\"\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2\n2 4 5 1 3\n3 4 -10 -8 8''') == '8'\nassert solution('''5 3\n1 2 3 4 5\n-1 2 -3 4 -5\n-1 -2 3 4 -5\n-1 -2 -3 4 5\n-1 -2 -3 -4 5''') == '0'\nassert solution('''5 5\n4 5 3 2 1\n2 1 -1 2 3\n2 3 -3 4 1\n4 1 2 3 5\n3 5 2 4 1''') == '9'\nassert solution('''5 4\n3 4 5 1 2\n-1 2 -3 4 -5\n-1 -2 3 4 -5\n-1 -2 -3 4 5\n-1 -2 -3 -4 5''') == '0'\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8') == '8'\nassert solution('4 1\\n2 3 4 1\\n1 2 3 4') == '0'\nassert solution('4 5\\n1 2 3 4 5\\n1 2 4 5 3') == '16'\nassert solution('4 1\\n2 3 4 1\\n1 2 3 4') == '3'\nassert solution('4 2\\n1 2 3 4 1\\n1 2 3 4') == '0'\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\") == \"8\"\nassert solution(\"3 2\\n2 1 3\\n1 2 3\") == \"6\"\nassert solution(\"4 2\\n3 1 1\\n2 3 2\") == \"9\"\nassert solution(\"5 2\\n2 4 5 1 3\\n3 -8 -10 8\") == \"7\"\n\"\"\""
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\") == \"8\"\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n\") == '8'\nassert solution(\"5 3\\n2 4 5 1 3\\n3 4 -10 -8 8\\n\") == '8'\nassert solution(\"5 2\\n2 4 5 1 3\\n3 4\\n\") == '8'\nassert solution(\"5 2\\n2 4 5 1 3\\n3 4 8\\n\") == '9'\nassert solution(\"5 3\\n2 4 5 1 3\\n3 4 8\\n\") == '9'\n\n---\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1 2\\n1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1\") == \"YES\\nYES\\nCAN 1\\nYES\"\nassert solution(\"4 5 1 2\\n1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1\") == \"YES\\nYES\\nCAN 1\\nYES\"\nassert solution(\"4 5 1 2\\n1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1\") == \"YES\\nYES\\nCAN 1\\nYES\"\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 1 2\\n1 2 1\\n1 2 2\\n\") == \"YES\\nYES\\nCAN 1\\n\"\nassert solution(\"3 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100\\n\") == \"YES\\nYES\\nCAN 81\\n\"\nassert solution(\"3 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100\\n\") == \"YES\\nYES\\nCAN 81\\n\"\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 1 2\\n1 2 1\\n1 2 2\\n\") == \"YES\\nYES\"\nassert solution(\"3 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100\\n\") == \"YES\\nYES\\nCAN 81\"\nassert solution(\"3 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100\\n\") == \"YES\\nYES\\nNO\"\nassert solution(\"3 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100\\n\") == \"YES\\nYES\\nNO\"\nassert solution(\"4 4 1 4\\n1 2 1\\n1 3 1\\n2 4 1\\n2 3 2\\n\") == \"YES\\nYES\\nYES\"\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100\\n') == 'YES\\nYES\\nCAN 81\\n'\n\"\"\"\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES'\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom math import inf\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n6 7 1 6\n1 2 2\n1 3 10\n2 3 7\n2 4 8\n3 5 3\n4 5 2\n5 6 1\n\"\"\"\n) == \"YES\\nCAN 2\\nCAN 1\\nCAN 1\\nCAN 1\\nYES\"\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 7 1 6\\n1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1\\n\") == \"YES\\nCAN 2\\nCAN 1\\nCAN 1\\nCAN 1\\nYES\\n\"\n\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 7 1 6\\n1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1') == 'YES\\nCAN 2\\nCAN 1\\nCAN 1\\nCAN 1\\nYES'\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 7 1 6\\n1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1\") == \"YES\\nCAN 2\\nCAN 1\\nCAN 1\\nCAN 1\\nYES\"\nassert solution(\"3 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100\\n\") == \"YES\\nYES\\nCAN 81\"\nassert solution(\"2 2 1 2\\n1 2 1\\n1 2 2\") == \"YES\\nNO\"\n\n---\n\"\"\"\n\nimport sys\nimport math\nfrom itertools import combinations"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"3\\n2 3 3\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\\n3 5 5\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\"\nassert solution(\"3\\n1 2\\n1 3\\n2 4\") == \"9\\n3 5 5\\n4 3 3\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == \"3\"\nassert solution(5) == \"9\"\n\"\"\"\nfrom typing import Union\n\nclass Node:\n    def __init__(self, id: int):\n        self.id = id\n        self.children = []\n\n    def __repr__(self):\n        return f\"Node(id={self.id}, children={self.children})\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2\\n1 3\\n2 3\\n2 4\\n2 5\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\"\n\n\"\"\"\n\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self, N):\n        self.N = N\n        self.g = defaultdict(list)\n    def addEdge(self, a, b):\n        self.g[a].append(b)\n        self.g[b].append(a)\n    def get_vertices(self):\n        return range(1, self.N + 1)\n    def get_edges(self):\n        for v in self.g.keys():\n            for u in self.g[v]:\n                yield v, u\n    def bfs(self, s):\n        visited = set()\n        for v in self.get_vertices():\n            visited.add(v)\n            queue = deque([v])\n            while queue:\n                u = queue.popleft()\n                for i in self.g[u]:\n                    if i not in visited:\n                        visited.add(i)\n                        queue.append(i)\n        return visited"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"3\\n2 3 3\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n\") == \"3\\n2 3 3\\n2 1 1\\n\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\\n\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\\n\"\n\nimport sys\na = sys.stdin.readline()\na = int(a)\nfor i in range(a-1):\n    inp = sys.stdin.readline()\n    inp = inp.split()\n    inp[0] = int(inp[0])\n    inp[1] = int(inp[1])\n    if inp[0] > inp[1]:\n        inp[0], inp[1] = inp[1], inp[0]\n    for i in range(inp[0]+1, inp[1]):\n        print(i, end=\" \")\n    print(inp[1])\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1 2\n1 3\n\"\"\") == \"3\\n2 3 3\"\n\nassert solution(\"\"\"\n5\n1 2\n1 3\n2 4\n2 5\n\"\"\") == \"9\\n3 5 5\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2\n1 3''') == '3\n2 3 3\n2 1 1\n\nassert solution('''5\n1 2\n1 3\n2 4\n2 5''') == '9\n3 5 5\n4 3 3\n4 1 1\n\nassert solution('''5\n1 2\n1 3\n2 4\n2 5\n\n5\n1 2\n1 3\n2 4\n2 5\n\n3\n1 2\n1 3''') == '9\n2 3 3\n2 1 1\n\nassert solution('''10\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n14\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n19\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n20\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n21\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n22\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n23\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n24\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n25\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n26\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n27\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n28\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n29\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n30\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n31\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n32\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n33\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n34\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n35\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n36\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n37\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n38\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n39\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n40\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n41\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n42\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n43\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 11\n6 12\n7 13\n8 14\n8 15\n9 16\n10 17\n10 18\n\n44\n1 2\n1"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\"\nassert solution(\"1\\n1 2\\n1 3\") == \"3\\n2 1 1\\n2 3 3\"\n\n\"\"\"\n\nfrom collections import deque\nfrom functools import lru_cache\n\nn = int(input())\n\nroot = None\nedges = {}\n\nfor _ in range(n - 1):\n    a, b = map(int, input().split())\n\n    if a not in edges:\n        edges[a] = {}\n\n    if b not in edges:\n        edges[b] = {}\n\n    edges[a][b] = b\n    edges[b][a] = a\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '5\\n3 7 9 7 8\\n5 2 5 7 5') == '6'\nassert solution(\n    '5\\n1 2 3 4 5\\n1 1 1 1 1') == '0'\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7 9 7 8') == '6'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nt = list(map(int, input().split()))"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 4 5\\n1 1 1 1 1') == '0'\n\nassert solution('5\\n3 7 9 7 8\\n5 2 5 7 5') == '6'"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1 2\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 7 9 7 8\") == \"6\"\nassert solution(\"5\\n1 2 3 4 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 7 9 7 8\") == '6'\n\"\"\"\n\nfrom collections import defaultdict\n\nimport numpy as np\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 9 7 8\") == 6\n\n\"\"\"\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 7 9 7 8\\n5 2 5 7 5\") == '6'\nassert solution(\"5\\n1 2 3 4 5\\n1 1 1 1 1\") == '0'\nassert solution(\"5\\n3 7 9 7 8\\n1 1 1 1 1\") == '8'\n\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 7 9 7 8\\n5 2 5 7 5\") == \"6\"\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 9 7 8\") == '6'\nassert solution(\"5 2 5 7 5\") == '0'"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".(())(())\") == \"0\"\nassert solution(\")(())\") == \"1 1\"\nassert solution(\"(()()())\") == \"0\"\nassert solution(\"()()(())\") == \"0\"\nassert solution(\"(()())\") == \"4\"\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()()())(()\") == \"0 8 7\"\nassert solution(\")(()(()())()\") == \"1 5 10\"\nassert solution(\"))((()\") == \"0 1 1\"\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\")(\") == 0\nassert solution(\"))((\") == 0\nassert solution(\"(((\") == 2\nassert solution(\"())(\") == 1\nassert solution(\"())(())\") == 1\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\")(())\") == 4\nassert solution(\"(((\") == 0\n\nassert solution(\")(\") == 0\nassert solution(\"())((\") == 0\nassert solution(\"())\") == 1\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(()())()\") == 4\nassert solution(\"))(()(()())()\") == 1\nassert solution(\")(()(()())()\") == 0\nassert solution(\"))(()(()())()\") == 1\nassert solution(\"())\") == 0\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(()())\") == \"5\", 'Test 1'\nassert solution(\"()()\") == \"0\", 'Test 2'\nassert solution(\"))(\") == \"0\", 'Test 3'\nassert solution(\")(\") == \"1 1\", 'Test 4'\n\nassert solution(\"))(\") == \"0 1\", 'Test 5'\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(')(())()') == 4\nassert solution('())(())') == 8\nassert solution('())(())(') == 7\nassert solution(')(())(') == 0\nassert solution('())(())(()(()' == 0\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"((()))\") == 4\nassert solution(\"(()()())(()())\") == 5\nassert solution(\"())(())\") == 0\nassert solution(\"()(())\") == 1\nassert solution(\")(())\") == 1\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(()())()\") == 5\nassert solution(\"))(()(()))()\") == 4\nassert solution(\"())(())\") == 0\nassert solution(\"))(()(()))\") == 1\nassert solution(\")(()(()))\") == 1\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(((((((((((((((((((((())))))))))))))))))\") == 0\nassert solution(\"(((((((((((((((((((((())))))))))))))))))))\") == 8\nassert solution(\"(((((((((((((((((((((())))))))))))))))))))\") == 2\nassert solution(\"(((((((((((((((((((((())))))))))))))))))))\") == 4\n\n\"\"\""
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_data) == answer\nprint(solution(input()))\n\n\n\"\"\""
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\nassert solution(\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == \"2 6\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\nassert solution(\"(___)\") == \"0 0\""
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\nassert solution(\n\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == \"2 6\"\nassert solution(\n\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\nassert solution(\n\"(___)\") == \"0 0\"\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('_Hello_Vasya(and_Petya)__bye_(and_OK)') == '5 4'\nassert solution('_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__') == '2 6'\nassert solution('(LoooonG)__shOrt__(LoooonG)') == '5 2'\nassert solution('(___)') == '0 0'\n\n\"\"\""
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == (5, 4)\nassert solution(\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == (2, 6)\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == (5, 2)\n\"\"\"\n\nimport re"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == \"5 6\"\nassert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\n\n\"\"\""
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\n\n\"\"\""
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)__\") == \"5 4\"\nassert solution(\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == \"2 6\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\nassert solution(\"(___)\") == \"0 0\"\n\nprint('Success')"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\nassert solution(\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == \"2 6\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\n\"\"\"\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\nassert solution(\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == \"2 6\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\nassert solution(\"(___)\") == \"0 0\"\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\\n1 2\\n\") == \"2\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n5 6\") == \"0\"\nassert solution(\"5 4\\n1 2 3 4 5\\n5 6\") == \"1\"\nassert solution(\"4 2\\n1 2 3 4\\n5 6\") == \"0\"\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '7'\n\"\"\"\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 3 3 7') == '0'\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nc = 0\nfor i in range(n):\n    if a[i] > b[-1]:\n        c += 1\n    if b[0] < a[i]:\n        break\n    for j in range(m):\n        if b[j] >= a[i]:\n            b = b[j:]\n            break\nprint(c)\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 3 3 7\\n3 7') == '1'\nassert solution('6 3\\n12 10 20 20 25 30\\n10 20 30') == '2'\nassert solution('8 2\\n1 3 3 7\\n3 7') == '0'\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 3\\n4 5 6') == '1 2 3 4 5 6'\n\n'''"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_1) == '2'\nassert solution(test_2) == '1'\nassert solution(test_3) == '0'\nassert solution(test_4) == '1'\n\"\"\""
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 3 3 7\\n3 7') == '0'\n\nassert solution('6 3\\n12 10 20 20 25 30\\n10 20 30') == '2'\n\nprint(solution(stdin.read()))\n\"\"\"\n\n\nfrom itertools import combinations\nfrom math import factorial\nfrom fractions import Fraction\nfrom functools import lru_cache"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 4\n2 3 4 7 9\n4 7\n''') == '''0\n1\n'''\nassert solution('''2 2\n2 2\n''') == '''0\n0\n'''\nassert solution('''5 3\n1 2 3 4 5\n5 5\n''') == '''0\n1\n'''\nassert solution('''8 5\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n''') == '''0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\"\n\n\"\"\"\nN, K = list(map(int, stdin.split()))"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 1\n''') == '0'\n\nassert solution('''2 3\n''') == '6'\n\nassert solution('''49 1808\n''') == '359087121'\n\nassert solution('''3 3\n''') == '9'\n\nassert solution('''3 3\n''') == '9'"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n2 3\") == \"0\"\nassert solution(\"2 3\\n2 1\") == \"6\"\nassert solution(\"4 3\\n7 8\") == \"16\"\nassert solution(\"5 9\\n6 2\") == \"22\"\nassert solution(\"13 7\\n9 0\") == \"1462\"\n\n\"\"\"\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == 0\nassert solution('2 3') == 6\n\"\"\""
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n\") == 0\nassert solution(\"2 3\\n\") == 6\nassert solution(\"49 1808\\n\") == 359087121\nassert solution(\"22 2308\\n\") == 517757847\nassert solution(\"100 1000\\n\") == 811138787\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == 0\nassert solution('2 3\\n') == 6\nassert solution('49 1808\\n') == 359087121\nassert solution('4 3\\n') == 22\nassert solution('6 7\\n') == 0\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '0'\nassert solution('2 3\\n') == '6'\nassert solution('49 1808\\n') == '359087121'\n\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == 0\nassert solution('2 3\\n') == 6\nassert solution('49 1808\\n') == 359087121\n\"\"\"\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == 0\nassert solution('2 3') == 6\nassert solution('49 1808') == 359087121\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 3''') == 6\nassert solution('''49 1808''') == 359087121\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\") == \"26\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '3'\nassert solution('1 2\\n3 4') == '6'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\") == \"26\"\n\"\"\"\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1') == '26'\n\"\"\"\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\") == \"26\"\n\"\"\""
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\\n\") == \"26\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\\n') == '26'\n\"\"\"\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1') == '26'\n\n\"\"\"\nfrom operator import itemgetter\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n1 2\\n2 3\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 3\n1 9\n1 7\n2 6\n2 5\n3 1\"\"\") == '26'\n\n\"\"\"\nhttps://www.codewars.com/kata/54ca54ffa7d972a632000036/train/python\n\nPython3\n\nYou are given a list of numbers.\nYou have to print a list of numbers which contains only odd numbers in the given list\n\"\"\"\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.000000000000000000000000000000000000000000000000\"\n\"\"\"\n\nimport math\nimport sys\n\nMAX_DIST = 10 ** 10\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.000000000000000000000000000000000000000000000000\"\n\"\"\"\n\nimport sys\nimport math\n\nlines = stdin.readlines()\nN = int(lines[0].rstrip(\"\\n\"))\nx = list(map(lambda x: int(x), lines[1:1 + N]))\ny = list(map(lambda y: int(y), lines[1 + N:]))\n\nmax_square = math.sqrt(sum([x[i] ** 2 + y[i] ** 2 for i in range(N)]))\n\nprint(max_square)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.0\"\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.000000000000000000000000000000000000000000000000\"\n\"\"\""
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"3\n0 10\n5 -5\n-5 -5\n\"\"\") == '10.0'\n\n\"\"\"\nIntuition\n\nIt's possible to do this in a straightforward way with brute force. \nTo compute the distance from the origin, we just need to take the square root of the sum of the absolute values of the x and y coordinates.\n\nAlgorithm\n\nWhen you compute the distance from the origin, you don't need to compute the square root of the sum of the absolute values of the x and y coordinates. \nSo, you just need to add up the absolute values of the x and y coordinates and compute the square root of that sum.\n\nPython Code\n\nimport math\nN = int(stdin.readline())\nans = 0\nfor i in range(N):\n    x, y = [int(n) for n in stdin.readline().split()]\n    ans += math.sqrt(x**2 + y**2)\nreturn str(math.floor(ans))\n\nComplexity Analysis\n\nTime complexity : O(N)O(N). We process each of N lines.\nSpace complexity : O(1)O(1). We only use one variable ans for computing the square root.\n\n\"\"\"\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n0 10\\n5 -5\\n-5 -5') == '10.000000000000000000000000000000000000000000000000'\n\"\"\""
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.0\"\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2\n0 10\n5 -5\n-5 -5\n\"\"\") == '10.000000000000000000000000000000000000000000000000'\n\n\"\"\"\nTest Suite\n\"\"\"\nimport unittest\nfrom collections import defaultdict\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution_1(self):\n        self.assertEqual(solution(\n\"\"\"\n3\n0 10\n5 -5\n-5 -5\n\"\"\"),\n'10.000000000000000000000000000000000000000000000000')\n\n    def test_solution_2(self):\n        self.assertEqual(solution(\n\"\"\"\n4\n0 0\n0 0\n0 0\n0 0\n\"\"\"),\n'0.0')\n\n    def test_solution_3(self):\n        self.assertEqual(solution(\n\"\"\"\n5\n0 10\n5 -5\n0 -5\n-5 -5\n\"\"\"),\n'10.000000000000000000000000000000000000000000000000')\n\n    def test_solution_4(self):\n        self.assertEqual(solution(\n\"\"\"\n4\n0 0\n0 0\n10 10\n-10 -10\n\"\"\"),\n'10.000000000000000000000000000000000000000000000000')\n\n    def test_solution_5(self):\n        self."
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 10\\n5 -5\\n-5 -5') == '10.000000000000000000000000000000000000000000000000'\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1?AA') == 100\n\"\"\"\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234\") == 4\n\"\"\""
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123') == 1\n\nassert solution('???') == 9\n\nassert solution('A1?A2') == 9\n\nassert solution('ABC1?A2') == 100\nassert solution('A1A2?1') == 1\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?JGJ9\") == 81\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"?JGJ9\") == 81\n\nassert solution(\"?AA?\") == 100\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AJ\") == 81\nassert solution(\"1?AA\") == 100\n\"\"\"\n\nimport string"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1?AA\") == 100\n\n\"\"\"\n\nfrom typing import Dict\n\nfrom itertools import product, permutations\n\nfrom collections import Counter\n\nassert Counter(\"1?AA\") == Counter({(\"?\", \"A\"): 1, (\"1\", \"A\"): 1, (\"?\", \"A\"): 1})\nassert Counter(\"1?A\") == Counter({(\"?\", \"A\"): 1, (\"1\", \"A\"): 1})\n\nassert set(product(\"1?A\", repeat=5)) == {(\"?\", \"A\", \"1\", \"1\", \"1\"), (\"1\", \"A\", \"1\", \"1\", \"1\"), (\"?\", \"A\", \"1\", \"1\", \"1\"), (\"1\", \"A\", \"1\", \"1\", \"1\")}\n\nassert set(product(\"1?A\", repeat=6)) == {(\"?\", \"A\", \"1\", \"1\", \"1\", \"1\", \"1\"), (\"1\", \"A\", \"1\", \"1\", \"1\", \"1\", \"1\"), (\"?\", \"A\", \"1\", \"1\", \"1\", \"1\", \"1\"), (\"1\", \"A\", \"1\", \"1\", \"1\", \"1\", \"1\")}"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1?AA') == 100\n\"\"\"\n\ns = input()\n\nnum = 0\n\nfor i in s:\n    if i!= \"?\":\n        num += int(i)\n\nprint(num**len(s))\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1?AA\") == 100\nassert solution(\"?2\") == 30\n\"\"\""
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1?AA\") == 100\n\"\"\"\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\n2 1 2 3\n''') == '2\n1 2 4 3 '\nassert solution('''\n4\n3 2 2 3\n''') == '0\n4 5 6 3 2 1 '\nassert solution('''\n6\n4 5 6 3 2 1\n''') == '3\n2 8 4 6 7 1 9 3 10 5 '\nassert solution('''\n10\n6 8 4 6 7 1 6 3 4 5\n''') == '3\n2 8 4 6 7 1 9 3 10 5 '"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 2 3') == '2'\nassert solution('4 5 6 3 2 1') == '0'\nassert solution('6 8 4 6 7 1 6 3 4 5') == '3'"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n3 2 2 3''') == '2\nassert solution('''6\n4 5 6 3 2 1''') == '0\nassert solution('''10\n6 8 4 6 7 1 6 3 4 5''') == '3\nassert solution('''10\n6 8 4 6 7 1 6 3 4 5''') == '3\nassert solution('''10\n6 8 4 6 7 1 6 3 4 5''') == '3\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 6 3 2 1') == '2 8 4 6 7 1'\nassert solution('6 8 4 6 7 1 6 3 4 5') == '3 8 4 6 7 1 9 3 10 5'\n\"\"\"\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5 6 3 2 1') == '2 8 4 6 7 1'\n\"\"\"\n\n\nfrom collections import Counter\nfrom itertools import permutations"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 6 3 2 1\") == \"2 8 4 6 7 1 9 3 10 5\"\nassert solution(\"6 8 4 6 7 1 6 3 4 5\") == \"3 8 4 6 7 1 9 3 10 5\"\nassert solution(\"10 6 8 4 6 7 1 6 3 4 5\") == \"3 8 4 6 7 1 9 3 10 5\"\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 6 3 2 1\") == \"0\"\nassert solution(\"6 8 4 6 7 1 6 3 4 5\") == \"3\"\nassert solution(\"10 6 8 4 6 7 1 6 3 4 5\") == \"3\"\nassert solution(\"4 4 4 4 4\") == \"0\"\nassert solution(\"10 10 10 10 10\") == \"0\""
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 6 3 2 1\") == \"2 8 4 6 7 1 9 3 10 5\"\n\n\"\"\""
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 6 3 2 1\") == '2 8 4 6 7 1 9 3 10 5'\nassert solution(\"6 8 4 6 7 1 6 3 4 5\") == '2 8 4 6 7 1 9 3 10 5'\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nchange_count = 0\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 6 3 2 1\") == '2 8 4 6 7 1 9 3 10 5'\nassert solution(\"6 8 4 6 7 1 6 3 4 5\") == '0 4 5 6 3 2 1 9 8 7 6'\nassert solution(\"10 6 8 4 6 7 1 6 3 4 5\") == '3 2 8 4 6 7 1 9 3 10 5'\nassert solution(\"6 5 4 3 2 1\") == '0 4 5 3 2 1'\n\n\"\"\""
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n20 10 30 40 10\") == \"20\\n1 3 4\"\nassert solution(\"6 5\\n90 20 35 40 60 100\") == \"35\\n1 3 4 5 6\"\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n 10 20 30\") == '10\\n1 3'\nassert solution(\"2 4\\n 10 20 30\") == '20\\n1 3'\nassert solution(\"3 3\\n 10 20 30 40\") == '10\\n1 2 3'\nassert solution(\"3 4\\n 10 20 30 40\") == '10\\n1 2 3'\nassert solution(\"4 2\\n 10 20 30 40\") == '10\\n1 2 3'\n\"\"\"\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n20 10 30 40 10\") == \"20\\n1 3 4\"\nassert solution(\"6 5\\n90 20 35 40 60 100\") == \"35\\n1 3 4 5 6\"\nassert solution(\"4 4\\n1 2 3 4\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 5\\n90 20 35 40 60 100\\n') == '35\\n1 3 4 5 6\\n'\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n20 10 30 40 10\") == \"20\\n1 3 4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5, 3) == 20\n\nassert solution(6, 5) == 35\n\"\"\"\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n20 10 30 40 10\") == \"20\"\n\n\"\"\""
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n20 10 30 40 10') == '20'\nassert solution('6 5\\n90 20 35 40 60 100') == '35'\n\"\"\"\n\nn, k = list(map(int, input().split()))\nlights = list(map(int, input().split()))\nlights.sort()\n\ni = 0\nmin_light = lights[i]\nresult = []\nwhile i < n - k + 1:\n    cur_light = lights[i]\n    if cur_light > min_light:\n        i += 1\n    else:\n        i += 1\n        for j in range(k):\n            result.append(i)\n            i += 1\n        min_light = cur_light\n\nprint(min_light)\nprint(*result)\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 3') == '1'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n20 10 30 40 10\") == \"20\"\nassert solution(\"6 5\\n90 20 35 40 60 100\") == \"35\""
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == 8\nassert solution(\"6\") == 28\nassert solution(\"2\") == 0"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"6\") == \"28\"\nassert solution(\"2\") == \"0\"\nassert solution(\"\") == \"0\""
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"8\"\nassert solution(\"6\") == \"28\"\nassert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"8\"\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == 8\nassert solution('6') == 28\nassert solution('2') == 0\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"8\"\n\"\"\""
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"6\") == \"28\"\nassert solution(\"2\") == \"0\"\nprint(\"All tests passed.\")\n\"\"\"\n\n\"\"\"\nYou are given a list of integers nums, representing the final state of an array. You are also given an integer k.\n\nFind and print the number of pairs (i, j) for all valid i and j such that nums[i] == nums[j] and i < j and j - i <= k.\n\nValid i and j means that the ith and jth elements are located at nums[i] and nums[j] respectively.\n\nFor example, nums = [1, 2, 3, 1, 2] and k = 3 contains two pairs: (1, 2) and (2, 3).\n\nInput Format\n\nThe first line contains a single integer k, the maximum difference between nums[i] and nums[j].\nThe next line contains n space-separated integers nums[i], where 0 <= i < n.\n\nConstraints\n\nk < n\nnums[i] is an integer where 0 <= i < n\nnums[i] is less than or equal to 1000.\nOutput Format\n\nPrint a single integer denoting the number of pairs (i, j) for all valid i and j such that nums[i] == nums[j] and i < j and j - i <= k.\n\nSample Input 0\n\n3\n1 1 1\nSample Output 0\n\n2\nExplanation 0\n\nThere are two pairs (0, 1) and (0, 1) with a difference of 1.\nSample Input 1\n\n2\n1 2\nSample Output 1\n\n0\nExplanation 1\n\nThere is no pair (i, j) with i < j and nums[i] == nums[j] and j - i <= 2.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('2') == 0\nassert solution('4') == 4\nassert solution('6') == 28\nassert solution('2') == 0\n\nprint('Successfully solved')\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '8'\n\"\"\"\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '8'\nassert solution('6') == '28'\nassert solution('2') == '0'\nprint('Success')"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '8'\nassert solution('6') == '28'\nassert solution('2') == '0'\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7') == '1'\nassert solution('4 5\\n5 4 4 1\\n4 1 2 5\\n4 1 5 1\\n2 3 3') == '2'\nassert solution('4 5\\n5 4 4 1\\n4 1 2 5\\n4 1 5 1\\n2 3 3') == '1'\n\nprint('The script is executed successfully.')\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2 3\\n2 3 1\\n1 2 1') == '2'\nassert solution('3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7') == '1'"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\") == \"1\"\nassert solution(\"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\") == \"2\""
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 3\\n2 3 1\\n1 2 1\") == \"2\"\nassert solution(\"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\") == \"1\"\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 3\\n2 3 1\\n1 2 1\") == 2\nassert solution(\"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\") == 1\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 6\\n2 2 2\\n1 5 7\") == \"1\"\n\"\"\"\n\nimport sys\nfrom itertools import groupby\nfrom collections import Counter\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 1 1 1\\n1 2 1 2\\n1 1 1 1\\n1 2 1 2\\n2 3 3 3\\n3 3 3 3\\n4 2 4 2\\n1 2 2 2\\n2 3 2 2\\n2 2 2 2\\n1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\") == \"1\"\nassert solution(\"3 3\\n1 2 3\\n2 3 1\\n1 2 1\") == \"2\"\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == -1\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == -1\nassert solution('3\\n4 5 2\\n6\\n') == 5\n\"\"\"\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n4 5 2\\n8 9 6 10 7 11') == '5'\nassert solution('3 1\\n3 4 5\\n6') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n4 5 2\\n8 9 6 10 7 11\") == \"5\"\n\"\"\""
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open(\"ex.txt\", \"r\").read()) == \"5\"\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 2\\n8 9 6 10 7 11\") == \"5\"\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n') == ''\nassert solution('1 1\\n') == ''\nassert solution('2 1\\n') == ''\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n4 5 2\\n8 9 6 10 7 11\") == \"5\""
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6\\n4 5 2\\n8 9 6 10 7 11') == '5'\n\nassert solution('3 1\\n3 4 5\\n6') == '-1'\n\n\n\n\"\"\"\n\nimport sys\nimport os\nimport math\nimport re\nimport itertools\nimport timeit\nfrom functools import reduce\nfrom collections import defaultdict\nfrom collections import Counter\nfrom itertools import combinations\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n4 5 2\\n8 9 6 10 7 11\") == \"5\"\nassert solution(\"3 1\\n3 4 5\\n6\") == \"-1\"\nassert solution(\"3 6\\n4 5 2\\n8 9 6 10 7 11\") == \"5\"\nassert solution(\"2 4\\n3 5 1\\n8 9 6 10 7 11\") == \"5\"\n\"\"\""
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2016\") == \"2044\"\nassert solution(\"2000\") == \"2028\"\nassert solution(\"50501\") == \"50507\"\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2016\") == \"2044\"\nassert solution(\"2000\") == \"2028\"\nassert solution(\"50501\") == \"50507\"\n\n\"\"\""
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2016\") == \"2044\"\n\"\"\"\n\nfrom datetime import date"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2016') == '2044'\nassert solution('50501') == '50507'\nassert solution('2000') == '2028'\n\"\"\"\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2016') == '2044'\n\n\"\"\"\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2016\") == \"2044\"\nassert solution(\"2000\") == \"2028\"\nassert solution(\"50501\") == \"50507\"\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2016') == '2044'\nassert solution('2000') == '2028'\nassert solution('50501') == '50507'\nassert solution('10') == '11'\nassert solution('2006') == '2007'\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2016\") == \"2044\"\nassert solution(\"2000\") == \"2028\"\nassert solution(\"50501\") == \"50507\"\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2016') == '2044'\n\"\"\"\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2016') == '2044'\n\"\"\"\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1900:01:01') == '50768'\nassert solution('2038:12:31') == '-7201'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\""
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1900:01:01 2038:12:31\") == 50768\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1900:01:01\") == 50768\nassert solution(\"2038:12:31\") == 1\n\"\"\"\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1900:01:01 2038:12:31\") == \"50768\"\n\"\"\""
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1900:01:01') == '50768'\nassert solution('2038:12:31') == '50768'\nassert solution('1996:03:09') == '1579'\nassert solution('1991:11:12') == '1579'"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1900:01:01') == 50768\nassert solution('2038:12:31') == -1\nassert solution('1996:03:09') == 1579\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1900:01:01\") == 50768\nassert solution(\"2038:12:31\") == 864861\nassert solution(\"1996:03:09\") == 1579\nassert solution(\"1991:11:12\") == 939\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1900:01:01\") == 50768\nassert solution(\"2038:12:31\") == 79097\n\nprint(\"OK\")\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1900:01:01) == 50768\nassert solution(2038:12:31) == 0\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1900:01:01 2038:12:31') == \"50768\"\nassert solution('1996:03:09 1991:11:12') == '1579'\n\nprint(solution(stdin.readline().split(':')))\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n3 4\\n4 5\\n2 4 5 6\") == \"2\"\nassert solution(\"6 4\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n2 4 5 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n2 4 5 6\") == \"2\\n3\"\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2\\n3 4') == '2\\n4'\n\nassert solution('5 3\\n1 2\\n2 3\\n2 4\\n3 5') == '3\\n3'\n\nassert solution('6 4\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6') == '2\\n4'\n\nassert solution('7 4\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7') == '4\\n4'\n\nassert solution('7 7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n7 1') == '5\\n5'\n\n\n----- Problem from Codeforces ----\n\nhttp://codeforces.com/contest/147/problem/B\n\n\"\"\"\n\n\n\nimport unittest\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7''') == '2'\nassert solution('''6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6''') == '2'\nassert solution('''6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6''') == '4'\nassert solution('''7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7''') == '2'\nassert solution('''1 1\n2 2\n2 3''') == '1'\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\\n2 4\\n4 5\\n4 6\\n2 4 5 6\") == \"2\\n4\"\nassert solution(\"3 2\\n1 2\\n1 3\\n2 3\") == \"1\\n2\"\n\"\"\"\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7''') == '2'\nassert solution('''6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6''') == '2'\n\n\n\n\n'''\n5 1\n1 2\n2 3\n2 4\n3 5\n'''\n\n\n'''\n7 5\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n4 7\n5 7\n'''\n\n\n'''\n2 3\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n'''"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3 7\\n2 7\") == \"2\"\nassert solution(\"6 4\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n2 4 5 6\") == \"2\"\n\"\"\"\n\n\nimport sys\nimport queue\nfrom collections import defaultdict, deque\nimport copy\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3 7\\n2 7\") == \"2\"\nassert solution(\"6 4\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n2 4 5 6\") == \"2\"\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3 7\\n2 7\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7''') == \"2\"\n\nassert solution(\n'''6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6''') == \"2\"\n\nassert solution(\n'''10 15\n1 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n2 9\n2 10\n3 11\n3 12\n3 13\n3 14\n4 15''') == \"4\"\n\nassert solution(\n'''7 7\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n4 6\n4 7\n5 7''') == \"1\"\n\nassert solution(\n'''6 3\n1 2\n2 3\n2 4\n4 5\n4 6\n5 6''') == \"2\""
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\") == \"5\"\nassert solution(\"3 2\\n4 6 3\\n2 4 1\\n3 5 4\") == \"-\"\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\") == \"5\\n\"\nassert solution(\"3 2\\n4 6 3\\n2 4 1\\n3 5 4\") == \"-1\\n\"\n\n\"\"\"\n\nimport sys\nfrom math import gcd\nfrom itertools import combinations"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"4 5\n1 3 4\n1 2 5\n5 6 1\n1 2 4\n\"\"\"\n) == '5'\nassert solution(\n\"\"\"3 2\n4 6 3\n2 4 1\n3 5 4\n\"\"\"\n) == '-1'\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4') == '5'\nassert solution('3 2\\n4 6 3\\n2 4 1\\n3 5 4') == '-1'\n\"\"\"\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5 2\n1 3 4\n1 2 5\n5 6 1\n1 2 4\n\"\"\") == \"5\"\n\nassert solution(\n\"\"\"\n3 2\n4 6 3\n2 4 1\n3 5 4\n\"\"\") == \"-\"\n\n\"\"\"\n\n\n\"\"\"\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\\n\") == \"5\"\nassert solution(\"3 2\\n4 6 3\\n2 4 1\\n3 5 4\\n\") == \"-\"\nassert solution(\"2 3\\n4 5 3\\n2 4 1\\n3 5 4\\n\") == \"1\"\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4') == '5'\nassert solution('3 2\\n4 6 3\\n2 4 1\\n3 5 4') == '-1'"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\") == \"5\"\nassert solution(\"3 2\\n4 6 3\\n2 4 1\\n3 5 4\") == \"-\"\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 5\\n1 2 5\\n1 2 4\") == 5\n\"\"\"\n\na = []\nfor i in range(int(input())):\n    a.append(input())\na = list(map(lambda x: list(map(lambda y: int(y), x.split())), a))\nres = []\nfor i in range(len(a)):\n    for j in range(len(a)):\n        if i!= j:\n            if a[i][0] < a[j][0] and a[i][1] > a[j][0] or a[i][0] > a[j][1] and a[i][1] < a[j][1]:\n                res.append([a[i][2] + a[j][2]])\nres = sorted(res, key=lambda x: x[0], reverse=True)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n4 6 3\\n2 4 1\\n3 5 4\") == '-1'\nassert solution(\"1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\") == '5'\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\n\"\"\"\n\ns = input().strip()"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('revive') =='reviver'\nassert solution('ee') == 'eye'\nassert solution('kitayuta') == 'NA'\n\"\"\""
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\n\"\"\""
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\n\"\"\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\nassert solution(\"a\") == \"NA\"\n\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"kitayuta\") == \"NA\"\n\"\"\""
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('revive') =='reviver'\nassert solution('ee') == 'eye'\nassert solution('kitayuta') == 'NA'\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4\") == \"1\"\nassert solution(\"101\\n99\") == \"2\"\nassert solution(\"5\\n10\") == \"9\"\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == '2'\nassert solution('101 99') == '9'\nassert solution('5 10') == '9'"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3') == '1'\nassert solution('4 3') == '2'\nassert solution('101 99') == '2'\nassert solution('5 10') == '9'\n\n\n\"\"\""
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == '1'\nassert solution('101 99') == '2'\nassert solution('5 10') == '9'\n\n\"\"\"\nimport sys\nsys.stdin = open(\"input.txt\")"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('101') == '9'\nassert solution('10') == '2'\n\"\"\"\nfrom typing import List\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u00ab\u041c\u0438\u043d\u0438\u043c\u0443\u043c \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u0440\u0430\u0437\u0440\u044f\u0434\u0430\u00bb\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e N. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e YES, \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e N \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u0447\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u044c\u044e \u0434\u0432\u043e\u0439\u043a\u0438, \u0438\u043b\u0438 \u0441\u043b\u043e\u0432\u043e NO \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435: \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0446\u0438\u043a\u043b\u0430\u043c\u0438 \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 if.\n\nSample Input 1:\n\n5\n\nSample Output 1:\n\nYES\n\nSample Input 2:\n\n7\n\nSample Output 2:\n\nYES\n\nSample Input 3:\n\n3\n\nSample Output 3:\n\nNO\n\"\"\""
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"101 99\") == \"2\"\nassert solution(\"5 10\") == \"9\"\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4') == '1'\nassert solution('101 99') == '2'\nassert solution('5 10') == '9'\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"101 99\") == \"2\"\nassert solution(\"5 10\") == \"9\"\n\"\"\""
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"101 99\") == \"2\"\nassert solution(\"5 10\") == \"9\"\n\nimport ast\nimport sys\nfrom typing import List"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == 1\nassert solution(101) == 2\nassert solution(5) == 9\n\n\"\"\""
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n6 10\\n5 6\\n100 200\\n10 10\\n5 5\\n1 19\\n1 3\\n19 5') == '11'\nassert solution('1\\n1 1\\n1 1\\n1 1') == '1'\n\"\"\""
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 27\\n6 10\\n5 6\\n100 200\\n10 10\\n5 5\\n1 19\\n1 3\\n19 5\") == '11'\nassert solution(\"4 22\\n7 12\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\") == '8'\n\"\"\"\nimport os\nimport sys\nfrom collections import defaultdict\nfrom copy import deepcopy\nfrom io import StringIO\nfrom typing import List, Tuple\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 27\\n6 10\\n5 6') == '11'\nassert solution('100 200\\n10 10\\n5 5') == '20'\nassert solution('33 27\\n6 10\\n5 6') == '11'\nassert solution('100 200\\n10 10\\n5 5') == '20'\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10\\n7 2\\n3 2\\n9 9\\n2 5\\n\") == \"11\"\nassert solution(\"3 10\\n3 2\\n9 9\\n2 5\\n\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''33 27\n6 10\n5 6\n100 200\n10 10\n5 5\n1 19\n1 3\n19 5''') == '11'\nassert solution('''33\n10\n5 6\n100 200\n10 10\n5 5\n1 19\n1 3\n19 5''') == '20'\nassert solution('''33\n10\n5 6\n100 200\n10 10\n5 5\n1 19\n1 3\n19 5''') == '3'\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n5 6\\n5 5\\n3 2') == '6'\nassert solution('5 5\\n3 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('33 27\\n6 10\\n5 6\\n100 200\\n10 10\\n5 5\\n1 19\\n1 3\\n19 5') == '11'\nassert solution('33 27\\n6 10\\n5 6\\n100 200\\n10 10\\n5 5\\n1 19\\n1 3\\n19 5') == '20'\nassert solution('33 27\\n6 10\\n5 6\\n100 200\\n10 10\\n5 5\\n1 19\\n1 3\\n19 5') == '3'\n\"\"\"\nimport sys\nimport collections\n\nassert solution('33 27\\n6 10\\n5 6\\n100 200\\n10 10\\n5 5\\n1 19\\n1 3\\n19 5') == '11'\nassert solution('33 27\\n6 10\\n5 6\\n100 200\\n10 10\\n5 5\\n1 19\\n1 3\\n19 5') == '20'\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n\ntest_cases = [\n    (3, 33, 3),\n    (6, 27, 3),\n    (6, 27, 3),\n]\n\nfor inp, exp1, exp2 in test_cases:\n    "
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 20\") == \"20\"\nassert solution(\"33 27\") == \"11\"\nassert solution(\"6 10\") == \"3\"\nassert solution(\"5 6\") == \"3\"\nassert solution(\"100 200\") == \"21\"\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\\n1 5\\n1 1\\n1 1\\n1 1\\n1 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Adams\"\nassert solution(\"8\") == \"Van Buren\"\nassert solution(\"29\") == \"Harding\"\n\"\"\"\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"Van Buren\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Adams\"\nassert solution(\"8\") == \"Van Buren\"\nassert solution(\"29\") == \"Harding\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"Van Buren\"\nassert solution(\"29\") == \"Harding\"\n\"\"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8') == 'Harding'\n\"\"\""
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 'Adams'\nassert solution('8') == 'Van Buren'\nassert solution('29') == 'Harding'\nprint('Passed all tests.')\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'Adams'\nassert solution('8') == 'Van Buren'\nassert solution('29') == 'Harding'\nassert solution('1') == 'Unknown'\nassert solution('34') == 'Unknown'\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Adams\"\nassert solution(\"8\") == \"Van Buren\"\nassert solution(\"29\") == \"Harding\"\nassert solution(\"3\") == \"Buren\"\nassert solution(\"4\") == \"Jefferson\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"Adams\"\nassert solution(\"8\") == \"Van Buren\"\nassert solution(\"29\") == \"Harding\"\nprint('The code ran Correctly')\n\n\n\"\"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'Adams'\nassert solution('8') == 'Van Buren'\nassert solution('29') == 'Harding'\nprint('All tests passed.')\n\n\"\"\"\n\n\n\"\"\"\nHARD\n\n\"\"\"\n\"\"\"\nn = int(stdin.readline().strip())\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 4\") == 4\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 9\") == \"6\"\nassert solution(\"4 4 4\") == \"4\"\nassert solution(\"0 0 0\") == \"0\"\n\"\"\"\n\n\nfrom math import inf\nfrom typing import List\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 4\") == \"4\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"3 6 9\") == \"6\"\nassert solution(\"3 6 3\") == \"3\"\nassert solution(\"4 4 6\") == \"2\"\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6 9\") == 6\nassert solution(\"4 4 4\") == 4\nassert solution(\"0 0 0\") == 0"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6 9\") == 6\nassert solution(\"4 4 4\") == 4\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6 9\") == \"6\"\nassert solution(\"4 4 4\") == \"4\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"3 3 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6 9') == '6'\nassert solution('4 4 4') == '4'\nassert solution('0 0 0') == '0'\nassert solution('0 0 1') == '1'\nassert solution('1 1 1') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6 9\") == \"6\"\nassert solution(\"4 4 4\") == \"4\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"3 5 7\") == \"7\"\n\"\"\"\nimport sys"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 9\") == 6\nassert solution(\"4 4 4\") == 4\nassert solution(\"0 0 0\") == 0\n\n\"\"\"\n\nimport sys\n\nnums = list(map(int, sys.stdin.readline().strip().split()))\n\nprint(max(\n    nums[0] // 3,\n    nums[1] // 3,\n    nums[2] // 3,\n    nums[0] // 1 + nums[1] // 1 + nums[2] // 1 - 1,\n))\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0\") == \"0\"\nassert solution(\"3 6 9\") == \"6\"\nassert solution(\"4 4 4\") == \"4\""
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 1 1 1\\n') == '1'\nassert solution('3\\n2 0 -1\\n') == '2'\nassert solution('4\\n5 -6 -5 1\\n') == '4'\n\"\"\""
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 -1 5\") == \"3\"\nassert solution(\"4 -3 0 -1 5\") == \"5\"\n\n\"\"\"\n\nimport sys\nimport os\nimport time"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n2 0 -1\") == \"2\"\nassert solution(\"4\\n5 -6 -5 1\") == \"4\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1 1 1 1') == '1'\nassert solution('3\\n2 0 -1') == '2'\nassert solution('4\\n5 -6 -5 1') == '4'\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 1 1 1 1') == '1'\nassert solution('3\\n2 0 -1') == '2'\nassert solution('4\\n5 -6 -5 1') == '4'\n\"\"\""
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n2 0 -1\") == \"2\"\nassert solution(\"4\\n5 -6 -5 1\") == \"4\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 1\\n\") == \"1\"\nassert solution(\"5\\n-1 -1 -1 -1 -1\\n\") == \"2\"\nassert solution(\"7\\n-1 -1 2 -1 2 3 3\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n2 0 -1\") == \"2\"\nassert solution(\"4\\n5 -6 -5 1\") == \"4\"\n\n\n\"\"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 1 1 1 1') == '1'\nassert solution('3\\n2 0 -1') == '2'\nassert solution('4\\n5 -6 -5 1') == '4'\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"5\\n-1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n2 0 -1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"500 1000 20 30\"\n) == \"Vasya\"\n\nassert solution(\n    \"1000 1000 1 1\"\n) == \"Tie\"\n\nassert solution(\n    \"1500 1000 176 177\"\n) == \"Misha\"\n\nprint(\"All tests passed.\")\n-----"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"500 1000 20 30\") == \"Misha\"\nassert solution(\"1000 1000 1 1\") == \"Tie\"\nassert solution(\"1500 1000 176 177\") == \"Vasya\"\n\nprint('Success')\n\"\"\"\n\na, b, c, d = (int(i) for i in input().split())\np1 = a * 3 // 10\np2 = b - p1 * 250\np3 = c // 60\np4 = c % 60"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"500 1000 20 30\") == \"Vasya\"\nassert solution(\"1000 1000 1 1\") == \"Tie\"\nassert solution(\"1500 1000 176 177\") == \"Misha\"\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('500 1000 20 30') == 'Vasya'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Misha'\n\"\"\"\n\na, b, c, d = map(int, input().split())\nm = max(a // 250, b // 250)\nn = max(c // 100, d // 100)\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('500 1000 20 30') == 'Vasya'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Misha'\n\nassert solution('500 1000 20 30') == 'Vasya'\nassert solution('1000 1000 1 1') == 'Tie'\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"500 1000 20 30\") == \"Vasya\"\nassert solution(\"1000 1000 1 1\") == \"Tie\"\nassert solution(\"1500 1000 176 177\") == \"Misha\"\n\"\"\"\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a) == 'Vasya' or solution(a) == 'Misha'\n\"\"\"\n\na, b, c, d = [int(x) for x in input().split()]\n\nprint('Misha' if a >= b else 'Vasya') if c >= d else print('Tie')\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('500 1000 20 30') == 'Misha'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Vasya'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"500 1000 20 30\") == \"Vasya\"\nassert solution(\"1000 1000 1 1\") == \"Tie\"\nassert solution(\"1500 1000 176 177\") == \"Misha\"\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"500 1000 20 30\") == \"Vasya\"\nassert solution(\"1000 1000 1 1\") == \"Tie\"\nassert solution(\"1500 1000 176 177\") == \"Misha\"\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\nassert solution(\"10 5 5 5 15\") == \"5.0 5.0 10.0\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\n\n\"\"\"\n\n\nfrom math import *\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 5 6\") == \"2.0 5.0 6.0\"\nassert solution(\"3 0 1 1\") == \"4.0 1.0 1.0\"\nassert solution(\"5 1 5 5 15\") == \"5.0 5.0 10.0\"\nassert solution(\"5 0 5 5 15\") == \"5.0 5.0 10.0\"\n\"\"\""
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 3 1 1') == '3.7677669529663684 3.7677669529663684 3.914213562373095'\nassert solution('10 5 5 5 15') == '5.0 5.0 10.0'"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\nassert solution(\"10 5 5 5 15\") == \"5.0 5.0 10.0\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\n\"\"\"\n\nfrom math import sqrt, acos, pi"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        pass\n\n    def test_solution(self):\n        assert solution(\"5 3 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\""
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 993244853') == '32'\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 993244853\") == \"6\"\nassert solution(\"3 993244853\") == \"32\"\nassert solution(\"2019 993244853\") == \"923958830\"\nassert solution(\"2020 437122297\") == \"265955509\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 3\nn, m = [int(i) for i in sys.argv[1:]]\n\nfrom functools import reduce\nfrom math import factorial"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 993244853\") == \"1\"\nassert solution(\"2 993244853\") == \"6\"\nassert solution(\"3 993244853\") == \"32\"\nassert solution(\"2019 993244853\") == \"923958830\"\nassert solution(\"2020 437122297\") == \"265955509\"\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 993244853') == '6'\nassert solution('3 993244853') == '32'\nassert solution('2019 993244853') == '923958830'\nassert solution('2020 437122297') == '265955509'\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 993244853\") == \"32\"\nassert solution(\"2 993244853\") == \"6\"\nassert solution(\"2019 993244853\") == \"923958830\"\nassert solution(\"2020 437122297\") == \"265955509\"\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 993244853') == '32'\nassert solution('2 993244853') == '6'\nassert solution('2019 993244853') == '923958830'\nassert solution('2020 437122297') == '265955509'"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123456789\") == \"40320\"\nassert solution(\"123456789 987654321\") == \"87660934\"\n\n\"\"\"\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1993244853\") == \"1\"\nassert solution(\"1993244853\") == \"6\"\nassert solution(\"1993244853\") == \"32\"\n\nassert solution(\"2022774853\") == \"265955509\"\nassert solution(\"2022774853\") == \"1311779701\"\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2019 993244853\") == \"923958830\"\nassert solution(\"2020 437122297\") == \"265955509\"\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 993244853') == '1'\nassert solution('2 993244853') == '6'\nassert solution('3 993244853') == '32'\nassert solution('2019 993244853') == '923958830'\nassert solution('2020 437122297') == '265955509'\n\n\"\"\""
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 4 5 4 4\") == 2\nassert solution(\"1 5 4 5 2 4 4 5 5 4 3 4 5 5\") == 3\nassert solution(\"14 1 5 4 5 2 4 4 5 5 4 3 4 5 5\") == 3\n\n\u0412\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u2014 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043d\u0435 \u0431\u0435\u0440\u044f \u0432 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043d\u0438 \u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u043e\u0446\u0435\u043d\u043a\u0438 \u0437\u043d\u0430\u043a \u00ab\u043f\u043e\u0434\u0430\u0440\u043e\u043a\u00bb. \u0422\u0430\u043a \u043a\u0430\u043a \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u0434\u0430\u0440\u043e\u043a \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435, \u0442\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0440\u0430\u0432\u0435\u043d \u043f\u0435\u0440\u0432\u043e\u043c\u0443."
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"6\\n4 5 4 5 4 4\\n\"\n) == 2\n\"\"\"\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n4 5 4 5 4 4\") == \"2\"\nassert solution(\"14\\n1 5 4 5 2 4 4 5 5 4 3 4 5 5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 5 4 5 4 4\") == 2\nassert solution(\"14\\n1 5 4 5 2 4 4 5 5 4 3 4 5 5\") == 3\n\n---\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043d\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432. \n\n\n\n'''\n\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n4 5 4 5 4 4') == 2\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u0412\u0430\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0434\u0432\u0430 \u043f\u043e\u0434\u0430\u0440\u043a\u0430\u00a0\u2014 \u0437\u0430 \u043f\u0435\u0440\u0432\u044b\u0435 \u0442\u0440\u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0438 \u0437\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0442\u0440\u043e\u0439\u043a\u0443 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u0446\u0435\u043d\u043e\u043a, \u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0434\u043d\u043e\u0439 \u0447\u0435\u0442\u0432\u0451\u0440\u043a\u0438 \u043e\u043d \u0441\u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0430\u0440\u043e\u043a, \u0430 \u043f\u043e\u0442\u043e\u043c \u0434\u0430\u0432\u0430\u0442\u044c \u0435\u043c\u0443 \u0435\u0449\u0451 \u043e\u0434\u0438\u043d \u043f\u043e\u0434\u0430\u0440\u043e\u043a.\nassert solution('14\\n1 5 4 5 2 4 4 5 5 4 3 4 5 5') == 3\nassert solution('5\\n4 5 4 5 4') == 1\nassert solution('5\\n4 4 4 4') == 0\n\"\"\"\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 4 5 4 4\\n 1 5 4 5 2 4 4 5 5 4 3 4 5 5') == '2'\nassert solution('14\\n 1 5 4 5 2 4 4 5 5 4 3 4 5 5') == '3'\nassert solution('10\\n 5 5 5 5 5 5 5 5 5 5 5 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n4 5 4 5 4 4\") == \"2\"\nassert solution(\"14\\n1 5 4 5 2 4 4 5 5 4 3 4 5 5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n4 5 4 5 4 4') == 2\nassert solution('14\\n1 5 4 5 2 4 4 5 5 4 3 4 5 5') == 3\nassert solution('1\\n5') == 0\nassert solution('14\\n1 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5') == 4\n\"\"\""
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n4 5 4 5 4 4\") == 2\nassert solution(\"14\\n1 5 4 5 2 4 4 5 5 4 3 4 5 5\") == 3\nassert solution(\"3\\n1 5 4\") == 1\n\"\"\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xooox\") == \"YES\"\nassert solution(\"oxoxo\") == \"YES\"\nassert solution(\"soxoo\") == \"YES\"\nassert solution(\"oxoxo\") == \"YES\"\nassert solution(\"xooox\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xooox\") == \"NO\"\nassert solution(\"oxoxo\") == \"NO\"\nassert solution(\"soxoo\") == \"YES\"\nassert solution(\"xooox\") == \"NO\"\nassert solution(\"xooox\") == \"NO\"\n\"\"\"\n\nfrom collections import deque\nfrom functools import reduce\n\nfor _ in range(int(input())):\n    n = int(input())\n    letters = deque(input())\n\n    if not n % 2:\n        letters = deque(list(letters)[::2])\n\n    if n == 1:\n        print(\"YES\") if letters[0] == letters[1] else print(\"NO\")\n    else:\n        if n == 2:\n            if letters[0] == letters[1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            letters.popleft()\n            letters.append(letters.popleft())\n            if letters[0] == letters[-1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xoxox\") == \"YES\"\nassert solution(\"xooxx\") == \"NO\"\nassert solution(\"xooox\") == \"YES\"\nassert solution(\"xooo\") == \"NO\"\n\nprint(\"All test cases passed.\")"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xooox\") == \"NO\"\nassert solution(\"oxoxo\") == \"YES\"\nassert solution(\"soxoo\") == \"NO\"\nassert solution(\"xoxox\") == \"YES\"\nassert solution(\"xooox\") == \"YES\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nxooox\\nooxo\\nsoxoo\\noxoxo\\nxooox\") == \"NO\"\nassert solution(\"5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox\") == \"NO\"\nassert solution(\"5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox\") == \"NO\"\nassert solution(\"5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox\") == \"NO\"\nassert solution(\"3\\nxpx\\npxp\\nxpe\") == \"YES\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xoxo\") == \"NO\"\nassert solution(\"xoxox\") == \"YES\"\nassert solution(\"ooxo\") == \"NO\"\nassert solution(\"xxoox\") == \"NO\"\nassert solution(\"xxoxx\") == \"NO\"\n\"\"\""
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox\") == \"NO\"\nassert solution(\"3\\nxpx\\npxp\\nxpe\") == \"YES\"\nassert solution(\"3\\nwsw\\nsws\\nwsw\") == \"YES\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('xoxox') == 'NO'\nassert solution('oxoxo') == 'YES'\nassert solution('xoxox') == 'NO'\nassert solution('oxxox') == 'YES'\nassert solution('xoxox') == 'NO'\n\nprint(\"The local tests are done. Try to solve the problem.\")\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5\nxooox\noxoxo\nsoxoo\noxoxo\nxooox\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\n3\nwsw\nsws\nwsw\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n3\nxpx\npxp\nxpe\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\n3\nxpx\npxp\nxpe\n\"\"\") == \"NO\"\n\"\"\"\n)"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"2 1\"\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"3 2\"\nassert solution(\"3 1\") == \"2 1\"\nprint(\"Success!\")\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4') == '3 2'\nassert solution('3 1') == '2 1'\n\"\"\""
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2 1'\nassert solution('2 4') == '3 2'"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == '2 1'\nassert solution('2 4') == '3 2'\n\"\"\"\n\nimport sys\nimport os\n\nfrom collections import deque\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1') == '1 2'\nassert solution('3 2') == '2 2'\nassert solution('3 1') == '0 1'\nassert solution('4 2') == '1 2'\nassert solution('4 1') == '0 1'\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == \"2 1\"\nassert solution(\"4 2\") == \"3 2\"\nassert solution(\"4 3\") == \"5 2\"\nassert solution(\"4 4\") == \"6 1\"\n\"\"\"\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '2 1'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 3\n''') == '2 1'\nassert solution('''1 1\n''') == '1 1'\nassert solution('''1 3\n''') == '1 2'\nassert solution('''3 5\n''') == '2 1'\nassert solution('''1 1\n''') == '1 1'\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"1 2\"\nassert solution(\"5 5\") == \"3 2\"\nassert solution(\"6 7\") == \"2 1\"\nassert solution(\"8 9\") == \"4 0\"\nassert solution(\"10 11\") == \"5 3\"\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n0 1\\n0 2\\n2 2\\n0 3\\n1 1\\n2 1\\n3 1\\n3 2\\n1 2\\n0 1\\n1 1\\n2 2\\n3 3\\n0 2\\n1 3\\n2 2\\n3 2\\n1 2\\n1 2\\n0 1\\n2 1\\n3 2\\n1 2\\n1 2\\n2 1\\n0 2\\n0 2\\n1 3\\n1 1\\n1 1\\n2 2\\n2 1\\n0 3\\n0 1\\n1 1\\n2 1\\n1 3\\n0 1\\n0 1\\n0 2\\n1 1\\n2 1\\n2 1\\n0 2\\n0 3\\n1 1\\n0 2\\n0 3\\n0 1\\n1 2\\n0 2\\n1 1\\n0 1\\n0 3\\n1 1\\n0 3\\n1 2\\n1 2\\n0 3\\n0 1\\n1 3\\n0 1\\n1 3\\n1 1\\n0 2\\n1 1\\n0 1\\n0 2\\n1 2\\n0 3\\n0 2\\n1 3\\n0 1\\n1 3\\n0 2\\n0 1\\n0 3\\n0 1\\n1 1\\n2 1\\n0 1\\n1 3\\n1 1\\n1 1\\n1 1\\n0 1\\n0 1\\n0 1\\n1 1\\n1 1\\n0 1\\n0 1\\n0 1\\n0 2\\n1 1\\n0 1\\n1 1\\n1 1\\n0 1\\n0 1\\n0 1\\n1 1\\n1 1\\n0 1\\n1 2\\n1 1\\n0 1\\n0 1\\n1 1\\n0 2\\n1 1\\n1 1\\n1 1\\n0 1\\n0 1\\n0 2\\n0 1\\n1 1\\n0 2\\n0 1\\n1 3\\n0 2\\n0 2\\n0 2\\n0 1\\n1 2\\n1 1\\n1 1\\n1 1\\n0 1\\n0 1\\n0 2\\n0 2\\n1 3\\n0 3\\n1 1\\n1 3\\n0 2\\n0 2\\n1 3\\n0 2\\n0 1\\n1 3\\n1 1\\n0 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 2\\n0 1\\n1 1\\n0 1\\n1 1\\n0 1\\n1 1\\n0 1\\n0 1\\n0 2\\n0 3\\n0 3\\n0 1\\n0 2\\n0 3\\n0 3\\n0 1\\n0 1\\n0 2\\n0 2\\n0 3\\n0 3\\n0 1\\n1 3\\n0 1\\n0 2\\n0 2\\n0 1\\n0 2\\n1 2\\n0 1\\n0 2\\n1 3\\n1 3\\n0 1\\n0 2\\n0 1\\n0 1\\n0 1\\n0 3\\n1 1\\n1 1\\n0 3\\n0 2\\n0 3\\n1 1\\n0 1\\n0 2\\n0 1\\n0 3\\n1 1\\n0 2\\n1 1\\n0 3\\n1 2\\n0 3\\n1 3\\n0 1\\n1 3\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n1 1\\n1 1\\n0 1\\n0 3\\n0 2\\n1 3\\n0 1\\n0 3\\n0 2\\n1 3\\n1 3\\n0 2\\n0 1\\n0 3\\n0 1\\n1 1\\n1 1\\n0 3\\n0 1\\n0 1\\n0 3\\n0 2\\n0 1\\n0 1\\n0 1\\n0 2\\n1 1\\n0 1\\n1 1\\n1 2\\n0 1\\n0 3\\n0 1\\n1 3\\n0 1\\n0 2\\n0 1\\n1 3\\n0 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 3\\n0 1\\n0 1\\n0 1\\n0 1\\n0 2\\n0 3\\n0 1\\n0 1\\n0 1\\n1 1\\n1 1\\n0 3\\n0 1\\n0 1\\n0 3\\n0 2\\n0 3\\n0 1\\n0 1\\n1 1\\n0 3\\n0 1\\n0 2\\n0 1\\n1 3\\n0 1\\n0 3\\n1 3\\n0 1\\n0 2\\n0 3\\n0 2\\n0 3\\n0 2\\n0 2\\n0 3\\n0 1\\n1 1\\n0 3\\n0 1\\n0 1\\n0 1\\n0 1\\n1 2\\n1 2\\n1 1\\n0 2\\n0 2\\n0 2\\n1 1\\n0 1\\n0 3\\n0 1\\n0 1\\n0 1\\n0 2\\n1 1\\n0 1\\n0 2\\n1 3\\n0 2\\n0 1\\n1 2\\n1 1\\n1 1\\n0 3\\n0 1\\n0 3\\n0 3\\n0 3\\n0 1\\n1 1\\n0 1\\n0 2\\n0 2\\n0 1\\n0 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n0 1\\n0 3\\n0 1\\n0 1\\n0 2\\n1 3\\n0 2\\n0 1\\n0 2\\n0 1\\n0 1\\n1 1\\n0 3\\n0 1\\n0 3\\n0 1\\n0 1\\n0 2\\n0"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n-1 3\\n0 0\") == \"7.0\"\nassert solution(\"3 2\\n5 0\\n\") == \"7.0\"\nassert solution(\"7 10\\n9 2\\n1 0\\n0 0\\n1 1\\n1 2\") == \"5.5\"\nassert solution(\"9 10\\n1 0\\n0 0\\n1 1\\n1 2\\n1 3\") == \"5.0\"\nassert solution(\"6 5\\n-1 3\\n0 0\\n-1 -4\") == \"3.6666666666666665\"\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n-1 3\\n0 0\\n-1 -4\") == -2.5\nassert abs(solution(\"3 2\\n0 2\\n5 0\") - 7) < 0.1**6\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n-1 3\\n0 0\\n-1 -4\") == '-2.5'\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n-1 3\\n0 0\\n-1 -4\") == '-2.5'\nassert solution(\"3 2\\n0 2\\n5 0\") == '7'\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n0 2\\n3 5\\n6 4\") == \"8.75\"\n\n\"\"\""
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 2\\n5 0\") == \"7\"\nprint(\"Test 1 successful!\")\n\nassert solution(\"1 1 1\\n2 -1\") == \"5\"\nprint(\"Test 2 successful!\")\n\nassert solution(\"1 4 1\\n1 -1\") == \"3.0\"\nprint(\"Test 3 successful!\")\n\nassert solution(\"2 2 2\\n1 -1\") == \"3.0\"\nprint(\"Test 4 successful!\")\n\nassert solution(\"4 2 1\\n1 -1\") == \"1.5\"\nprint(\"Test 5 successful!\")\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n-1 3\\n0 0\\n-1 -4\\n\") == \"7.000000000000000\"\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n0 2\\n5 0\") == \"7.000000000000000\"\n\n\"\"\"\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n-1 3\\n0 0\\n-1 -4\") == \"-2.500000000000000\"\nassert solution(\"3 2\\n0 2\\n5 0\") == \"7.000000000000000\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nns = list(map(int, stdin.readline().split()))\nn = ns[0]\nm = ns[1]\n\nchanges = []\nfor i in range(m):\n    changes.append(list(map(int, stdin.readline().split())))\nchanges = changes[:-1]\n\nl = []\nfor change in changes:\n    if change[0] == 0:\n        for i in range(len(l)):\n            if change[1] == i + 1:\n                l[i] += change[2]\n            else:\n                l[i] += change[2] * (change[1] - i)\n    elif change[0] == 1:\n        for i in range(len(l)):\n            l[i] += change[2] * (change[1] - i)\n    elif change[0] == 2:\n        l.append(change[2])"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6 10 5 9\") == 'YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2'\nassert solution(\"7 14 2 9 5\") == 'NO'\nassert solution(\"1 2 3 7 5\") == 'YES\\n3 5 1 3\\n1 7\\n1 2'\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5 3\\n7 14 2 9 5') == 'NO'\nassert solution('5 5 3\\n7 14 2 9 5') == 'NO'\nassert solution('5 3 1\\n1 2 3 7 5') == 'YES\\n3 5 1 3\\n1 7\\n1 2'\nassert solution('2 6 10 5 9\\n7 14 2 9 5') == 'YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2'\nassert solution('4 7 5\\n7 7 4 3\\n3 7 6\\n7 5 7\\n4 3') == 'YES\\n3 7 4 3\\n3 7 6\\n7 5 7\\n7 7 4 3\\n7 4 3'\n\n\"\"\""
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5 3\\n2 6 10 5 9') == 'YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2'\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 5 3\n2 6 10 5 9''') == 'YES'\nassert solution('''5 5 3\n7 14 2 9 5''') == 'NO'\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5 3\\n2 6 10 5 9') == 'YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2'\nassert solution('5 3 1\\n1 2 3 7 5') == 'YES\\n3 5 1 3\\n1 7\\n1 2'\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 5 3\\n7 14 2 9 5') == 'YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2'\nassert solution('5 3 1\\n1 2 3 7 5') == 'YES\\n3 5 1 3\\n1 7\\n1 2'\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 3\\n2 6 10 5 9\") == \"YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2\"\nassert solution(\"5 3 1\\n1 2 3 7 5\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\"\nassert solution(\"5 3 1\\n7 14 2 9 5\") == \"NO\"\nassert solution(\"5 3 1\\n4 5 2 7\") == \"NO\"\nassert solution(\"5 2 1\\n7 14 2 9 5\") == \"NO\"\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6 10 5 9\") == \"YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2\"\nassert solution(\"7 14 2 9 5\") == \"NO\"\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5 3\\n2 6 10 5 9') == 'YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2'\nassert solution('5 5 3\\n7 14 2 9 5') == 'NO'\nassert solution('5 3 1\\n1 2 3 7 5') == 'YES\\n3 5 1 3\\n1 7\\n1 2'\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 6 10 5 9\") == 'YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2'\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3\") == \"1\"\nassert solution(\"2 1 3\") == \"inf\"\nassert solution(\"2 3 4\") == \"inf\"\nassert solution(\"2 4 2\") == \"inf\"\nassert solution(\"2 5 3\") == \"inf\"\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 3') == '1'\nassert solution('2 2 2') == 'inf'\nassert solution('2 3 3') == '0'\nassert solution('2 1 3') == 'inf'\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 2') == '2'\nassert solution('2 3 3') == '1'\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\") == \"2\"\n\"\"\"\n\n\nimport sys\n\nfrom math import ceil, sqrt, gcd\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'inf'\nassert solution('1 1 1') == '0'\nassert solution('1 1 2') == 'inf'\nassert solution('2 3 3') == '1'\nassert solution('2 3 4') == '0'\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 3') == '1'\nassert solution('2 2 2') == 'inf'\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 3\\n') == '1'\nassert solution('2 2 2\\n') == 'inf'\nassert solution('3 4 4\\n') == '2'\nassert solution('6 5 10\\n') == 'inf'\nassert solution('5 10 10\\n') == '0'\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3\") == \"1\"\nassert solution(\"2 2 2\") == \"inf\"\nassert solution(\"10 10 1\") == \"inf\"\nassert solution(\"4 2 6\") == \"4\"\n\"\"\"\n\nt, a, b = map(int, input().split())"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 3\\n2 2\\n1 1') == 3\n\nassert solution('5 3\\n1 10\\n2 7\\n2 8\\n1 1') == 10\n\nassert solution('5 3\\n1 10\\n2 7\\n2 8\\n1 1') == 10\n\nassert solution('5 3\\n1 10\\n2 7\\n2 8\\n1 1') == 10\n\nassert solution('5 3\\n1 10\\n2 7\\n2 8\\n1 1') == 10"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 3\n1 3\n2 2\n3 1''') == '3'\nassert solution('''3 2\n1 3\n2 2\n3 1''') == '2'\n\n'''\n\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0448\u0430\u0442\u044c \u0438 \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0435\u0451 \u0440\u0435\u0448\u0438\u0442\u044c \u043f\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0438\u0441\u043b\u043e 1, 2 \u0438 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438, \u0438 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437 \u043d\u0438\u0445 \u043e\u0434\u043d\u043e.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438:\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0433\u0440 \u0441\u044b\u0433\u0440\u0430\u043d\u043e \u0432 \u043c\u0430\u0442\u0447\u0435 (n) \u0438 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443 \u0441\u0447\u0435\u0442\u0443 \u0431\u044b\u043b \u0437\u0430\u0431\u0438\u0442 \u0438\u0433\u0440\u043e\u043a 1 (\u0437\u0430\u0431\u0438\u0442\u044b\u0435 \u043e\u0447\u043a\u0438 c1) (\u043e\u0447\u043a\u0438 c2 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0437\u0430\u0431\u0438\u0442\u044b\u043c).\n\u0414\u0430\u043b\u044c\u0448\u0435 \u0438\u0434\u0435\u0442 n \u0441\u0442\u0440\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0434:\n\n\u041d\u043e\u043c\u0435\u0440 \u0438\u0433\u0440\u043e\u043a\u0430 (\u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e n)\n\u0421\u0443\u043c\u043c\u0430 \u043e\u0447\u043a\u043e\u0432 (\u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e n)\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0437\u0430\u0431\u0438\u0442\u044b\u043c\u0438 \u043e\u0447\u043a\u0430\u043c\u0438 \u0431\u044b\u043b\u0438 \u043e\u0447\u043a\u0438 c1 = 3, c2 = 6, c3 = 4, \u0442\u043e \u0438\u0433\u0440\u043e\u043a \u0431\u044b\u043b \u0437\u0430\u0431\u0438\u0442\u044b\u043c \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443 \u0441\u0447\u0435\u0442\u0443.\n\n\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0448\u0438\u0442\u044c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043c\u0430\u0442\u0447\u0435 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0438\u043c \u043d\u0430\u0441 \u0438\u0433\u0440\u043e\u043a\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0447\u043a\u0438, \u0440\u0430\u0432\u043d\u044b\u0435 c1 + c2 + c3.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438:\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0433\u0440 \u0441\u044b\u0433\u0440\u0430\u043d\u043e \u0432 \u043c\u0430\u0442\u0447\u0435 (n) \u0438 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443 \u0441\u0447\u0435\u0442\u0443 \u0431\u044b\u043b \u0437\u0430\u0431\u0438\u0442 \u0438\u0433\u0440\u043e\u043a 1 (\u0437\u0430\u0431\u0438\u0442\u044b\u0435 \u043e\u0447\u043a\u0438 c1) (\u043e\u0447\u043a\u0438 c2 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0437\u0430\u0431\u0438\u0442\u044b\u043c\u0438).\n\u0414\u0430\u043b\u044c\u0448\u0435 \u0438\u0434\u0435\u0442 n \u0441\u0442\u0440\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0434:\n\n\u041d\u043e\u043c\u0435\u0440 \u0438\u0433\u0440\u043e\u043a\u0430 (\u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e n)\n\u0421\u0443\u043c\u043c\u0430 \u043e\u0447\u043a\u043e\u0432 (\u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e n)\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0437\u0430\u0431\u0438\u0442\u044b\u043c\u0438 \u043e\u0447\u043a\u0430\u043c\u0438 \u0431\u044b\u043b\u0438 \u043e\u0447\u043a\u0438 c1 = 3, c2 = 6, c3 = 4, \u0442\u043e \u0438\u0433\u0440\u043e\u043a \u0431\u044b\u043b \u0437\u0430\u0431\u0438\u0442\u044b\u043c \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443 \u0441\u0447\u0435\u0442\u0443.\n\n\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0448\u0438\u0442\u044c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043c\u0430\u0442\u0447\u0435 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0438\u043c \u043d\u0430\u0441 \u0438\u0433\u0440\u043e\u043a\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0447\u043a\u0438, \u0440\u0430\u0432\u043d\u044b\u0435 c1 + c2 + c3.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438:\n\n4 7\n1 3\n1 2\n1 1\n2 1\n\n\u041e\u0442\u0432\u0435\u0442:\n2\n\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430:\n\n\u041a\u0430\u043a \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u043e\u0434\u0438\u043d \u0438\u0433\u0440\u043e\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0431\u0438\u0442\u044c \u0441\u0432\u043e\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0431\u043e\u0440 \u0441\u0432\u043e\u0435\u0439 \u043e\u0447\u043a\u043e\u0432, \u0442\u043e \u043d\u0430\u0434\u043e \u0443\u0431\u0440\u0430\u0442\u044c \u0435\u0433\u043e \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u044b\u0431\u043e\u0440\u0430 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0438 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0435\u0433\u043e \u043e\u0431\u044b\u0447\u043d\u044b\u043c \u0438\u0433\u0440\u043e\u043a\u043e\u043c.\n\n\u0415\u0441\u043b\u0438 \u043e\u0434\u0438\u043d \u0438\u0433\u0440\u043e\u043a \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u0431\u0440\u0430\u043d\u043d\u044b\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u043c \u043e\u0447\u043a\u043e\u0432, \u0435\u0433\u043e \u043e\u0447\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0443\u0434"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n2 1\") == \"0\"\nassert solution(\"2 2\\n1 3\\n2 2\") == \"3\"\nassert solution(\"4 3\\n3 10\\n2 7\\n2 8\\n1 1\") == \"10\"\n\nprint(solution(\"2 2\\n1 3\\n2 2\"))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n2 1\") == 0\nassert solution(\"2 2\\n1 3\\n2 2\") == 3\nassert solution(\"4 3\\n3 10\\n2 7\\n2 8\\n1 1\") == 10"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n2 1\") == 0\nassert solution(\"2 2\\n1 3\\n2 2\") == 3\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n 2 1\") == \"0\"\nassert solution(\"4 3\\n3 10\\n2 7\\n2 8\\n1 1\") == \"10\"\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n2 1\") == \"0\"\nassert solution(\"2 2\\n1 3\\n2 2\") == \"3\"\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n2 1') == 0\nassert solution('2 2\\n1 3\\n2 2') == 3\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 10\\n2 7\\n2 8\\n1 1\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n2 1') == '0'\nassert solution('2 2\\n1 3\\n2 2') == '3'\nassert solution('4 3\\n3 10\\n2 7\\n2 8\\n1 1') == '10'\nassert solution('4 3\\n3 10\\n2 7\\n2 8\\n1 1') == '10'\nassert solution('4 4\\n1 1\\n2 3\\n3 5\\n4 7') == '8'\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 2 4 1 2') == '2'\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 4 1 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 2 4 1 2') == '2'\n\"\"\""
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 2 4 1 2\") == \"2\"\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 2 4 1 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 2 4 1 2\") == \"2\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3 2 4 1 2') == '2'\n\"\"\"\n\nn = int(input())\narr = [int(x) for x in input().split(' ')]\narr.sort()\nprint(abs(arr[-1]-arr[0]))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 2 4 1 2') == '2'\n\"\"\""
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 2 4 1 2\") == \"2\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nn: int = int(stdin.readline())\n\nA: List[int] = [int(x) for x in stdin.readline().strip().split()]\n\nP: int = sum(A[:n // 2])\nQ: int = sum(A[n // 2:])\nR: int = sum(A[:n // 2])\nS: int = sum(A[n // 2:])\n\nmaximum: int = max(P, Q, R, S)\nminimum: int = min(P, Q, R, S)\n\ndifference: int = abs(maximum - minimum)\n\nprint(difference)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 4 1 2\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\") == \"25\"\n\"\"\""
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('5 2') == '-1'\nassert solution('2 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\") == \"25\"\n\"\"\"\nimport sys"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"sample_input.txt\", \"r\").read()) == \"25\"\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\\n') == '25'\n\nhttps://www.algoexpert.io/questions/Unlock%20Treasure%20Boxes\n\"\"\""
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2') == '25'\n\"\"\""
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\") == '25'\n\"\"\"\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 1\\n1\\n15 1\\n2\\n30 2\\n1 2') == '25'\n\n\"\"\""
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\\n\") == \"25\"\n\"\"\""
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n'''\nimport numpy as np\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3+5*7+8*4') == '303'\nassert solution('2+3*5') == '25'\nassert solution('3*4*5') == '60'\n\n---\n\"\"\""
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3*4*5\") == \"60\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3+5*7+8*4\") == \"303\"\n\"\"\"\nimport itertools\nimport functools"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3+5*7+8*4\") == '303'\nassert solution(\"2+3*5\") == '25'\nassert solution(\"3*4*5\") == '60'\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"585\"\nassert solution(\"+1*2*3*4*5*6*7*8*9\") == \"5979\"\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\n\n\n\n----------------------------------------------------\n\nhttps://stepik.org/lesson/334240/step/6?adaptive=true&unit=32272\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n3*4*5\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n60\n\n\n----------------------------------------------------\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 y = x * r, \u0433\u0434\u0435 x \u2013 \u0447\u0438\u0441\u043b\u043e \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 -1000 \u0434\u043e 1000, r \u2013 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e; \u043f\u0440\u0438 \u044d\u0442\u043e\u043c 1 \u2264 x \u2264 1000; \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 r \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0446\u0435\u043b\u043e\u043c\u0443 \u043e\u0442\u0440\u0435\u0437\u043a\u0443 [2; 1000]. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e x \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 y. \u0421\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 x \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u0432\u0443\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0438\u0437 \u043d\u0438\u0445. \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u043d\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 y = x * r, \u0433\u0434\u0435 x \u2013 \u0447\u0438\u0441\u043b\u043e \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 -1000 \u0434\u043e 1000, r \u2013 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e; \u043f\u0440\u0438 \u044d\u0442\u043e\u043c 1 \u2264 x \u2264 1000.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n>>> 1\n>>> 1\n1\n>>> 2\n>>> 3\n3\n>>> 3\n>>> 4\n12\n>>> 5\n>>> 6\n30\n>>> 7\n42\n>>> 8\n56\n>>> 9\n72\n>>> 10\n90\n>>> 11\n110\n>>> 12\n132\n>>> 13\n144\n>>> 14\n162\n>>> 15\n180\n>>> 16\n200\n>>> 17\n220\n>>> 18\n240\n>>> 19\n260\n>>> 20\n280\n>>> 21\n300\n>>> 22\n320\n>>> 23\n340\n>>> 24\n360\n>>> 25\n380\n>>> 26\n400\n>>> 27\n420\n>>> 28\n440\n>>> 29\n460\n>>> 30\n480\n>>> 31\n500\n>>> 32\n520\n>>> 33\n540\n>>> 34\n560\n>>> 35\n580\n>>> 36\n600\n>>> 37\n620\n>>> 38\n640\n>>> 39\n660\n>>> 40\n680\n>>> 41\n700\n>>> 42\n720\n>>> 43\n744\n>>> 44\n768\n>>> 45\n792\n>>> 46\n808\n>>> 47\n824\n>>> 48\n848\n>>> 49\n872\n>>> 50\n898\n>>> 51\n912\n>>> 52\n936\n>>> 53\n960\n>>> 54\n976\n>>> 55\n1000\n>>> 56\n1020\n>>> 57\n1040\n>>> 58\n1060\n>>> 59\n1080\n>>> 60\n1100\n>>> 61\n1120\n>>> 62\n1140\n>>> 63\n1160\n>>> 64\n1180\n>>> 65\n1200\n>>> 66\n1220\n>>> 67\n1240\n>>> 68\n1260\n>>> 69\n1280\n>>> 70\n1300\n>>> 71\n1320\n>>> 72\n1340\n>>> 73\n1360\n>>> 74\n1380\n>>> 75\n1400\n>>> 76\n1420\n>>> 77\n1440\n>>> 78\n1460\n>>> 79\n1480\n>>> 80\n1500\n>>> 81\n1520\n>>> 82\n1540\n>>> 83\n1560\n>>> 84\n1580\n>>> 85\n1600\n>>> 86\n1620\n>>> 87\n1640\n>>> 88\n1660\n>>> 89\n1680\n>>> 90\n1700\n>>> 91\n1720\n>>> 92\n1740\n>>> 93\n1760\n>>> 94\n1780\n>>> 95\n1800\n>>> 96\n1820\n>>> 97\n1840\n>>> 98\n1860\n>>> 99\n1880\n>>> 100\n1900\n>>> 101\n1920\n>>> 102\n1940\n>>> 103\n1960\n>>> 104\n1980\n>>> 105\n2000\n>>> 106\n2020\n>>> 107\n2040\n>>> 108\n2060\n>>> 109\n2080\n>>> 110\n2100\n>>> 111\n2120\n>>> 112\n2140\n>>> 113\n2160\n>>> 114\n2180\n>>> 115\n2200\n>>> 116\n2220\n>>> 117\n2240\n>>> 118\n2260\n>>> 119\n2280\n>>> 120\n2300\n>>> 121\n2320\n>>> 122\n2340\n>>> 123\n2360\n>>> 124\n2380\n>>> 125\n2400\n>>> 126\n2420\n>>> 127\n2440\n>>> 128\n2460\n>>> 129\n2480\n>>> 130\n2500\n>>> 131\n2520\n>>> 132\n2540\n>>> 133\n2560\n>>> 134\n2580\n>>> 135\n2600\n>>> 136\n2620\n>>> 137\n2640\n>>> 138\n2660\n>>> 139\n2680\n>>> 140\n2700\n>>> 141\n2720\n>>> 142\n2740\n>>> 143\n2760\n>>> 144\n2780\n>>> 145\n2800\n>>> 146\n2820\n>>> 147\n2840\n>>> 148\n2860\n>>> 149\n2880\n>>> 150\n2900\n>>> 151\n2920\n>>> 152\n2940\n>>> 153\n2960\n>>> 154\n2980\n>>> 155\n3000\n>>> 156\n3020\n>>> 157\n3040\n>>> 158\n3060\n>>> 159\n3080\n>>> 160\n3100\n>>> 161\n3120\n>>> 162\n3140\n>>> 163\n3160\n>>> 164\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2+3*5') == '25'\nassert solution('3+4*5') == '60'\nassert solution('3*4*5') == '60'\nassert solution('2+3*4*5') == '51'\nassert solution('2*3+4*5') == '34'\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3+5*7+8*4) == '303'\nassert solution(2+3*5) == '25'\nassert solution(3*4*5) == '60'\n\nprint(\"Everything ok\")\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3+5*7+8*4') == '303'\nassert solution('2+3*5') == '25'\nassert solution('3*4*5') == '60'\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"F|F\") == \"F|FL\"\nassert solution(\"ABC|\") == \"ABC|ABC\"\nassert solution(\"ABC|D\") == \"ABC|D\"\nassert solution(\"ABC|CD\") == \"ABC|CD\"\n\"\"\""
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"ABC|\") == \"ABC|\"\nassert solution(\"W|T\") == \"Impossible\"\nassert solution(\"ABC|D\") == \"Impossible\"\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"W|F\") == \"Impossible\"\nassert solution(\"ABC|\") == \"Impossible\"\nassert solution(\"|ABC\") == \"ABC|\"\n\"\"\""
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AC|T') == 'AC|TL'\nassert solution('ABC|XYZ') == 'XYZ|ABC'\nassert solution('ABC|') == 'ABC|'\nassert solution('D') == 'Impossible'\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AC|T') == 'AC|TL'\nassert solution('ABC|') == 'ABC|'\nassert solution('L') == 'L'\n\n\"\"\"\n\n\"\"\"\nThe input is a sequence of characters. Each character is either an English letter or the delimiter \"|\". A delimiter is a special character, which is guaranteed to occur in the sequence. \n\nThe delimiter separates the weights on the left pan from the weights on the right pan. There can be zero or more delimiters in the input. Each weight on the left pan is represented by an English letter. Each weight on the right pan is represented by an English letter. The weights that are recorded before the delimiter are initially on the left pan. The weights that are recorded after the delimiter are initially on the right pan. \n\nAll English letters are different. \n\nThe input does not contain any extra characters. It is guaranteed that the input contains a delimiter.\n\nWrite 5 lines of code to test the correctness of solution: \nThe string \"Impossible\" represents the impossible solution and the string \"Impossible\" is guaranteed to appear as the result if the input contains an invalid delimiter. \n\nThe input is guaranteed to be valid. \n\nAll the weights that are on the left pan are listed before the delimiter, and all the weights that are on the right pan are listed after the delimiter. All the weights that are on the left pan appear before any delimiters. All the weights that are on the right pan appear after any delimiters. All the English letters in the input sequence are different. \n\nWrite the resulting string to the standard output.\n\n-----Input-----\n\nABC|\nD\n\n-----Output-----\n\nABCD|\n\n-----Input-----\nAC|T\nL\n\n-----Output-----\n\nAC|TL\n\n-----Input-----\nAC|\nT\n\n-----Output-----\nImpossible\n\n\"\"\"\n\n\"\"\"\nThe input is a sequence of characters. Each character is either an English letter or the delimiter \"|\". A delimiter is a special character, which is guaranteed to occur in the sequence. \n\nThe delimiter separates the weights on the left pan from the weights on the right pan. There can be zero or more delimiters in the input. Each weight on the left pan is represented by an English letter. Each weight on the right pan is represented by an English letter. The weights that are recorded before the delimiter are initially on the left pan. The weights that are recorded after the delimiter are initially on the right pan. \n\nAll English letters are different. \n\nThe input does not contain any extra characters. It is guaranteed that the input contains a delimiter.\n\nWrite 5 lines of code to test the correctness of solution: \nThe string \"Impossible\" represents the impossible solution and the string \"Impossible\" is guaranteed to appear as the result if the input contains an invalid delimiter. \n\nThe input is guaranteed to be valid. \n\nAll the weights that are on the left pan are listed before the delimiter, and all the weights that are on the right pan are listed after the delimiter. All the weights that are on the left pan appear before any delimiters. All the weights that are on the right pan appear after any delimiters. All the English letters in the input sequence are different. \n\nWrite the resulting string to the standard output.\n\n-----Input-----\n\nABC|\nD\n\n-----Output-----\n\nABCD|\n\n-----Input-----\nAC|T\nL\n\n-----Output-----\n\nAC|TL\n\n-----Input-----\nAC|\nT\n\n-----Output-----\nImpossible\n\n\"\"\"\n\n\"\"\"\nWrite an efficient algorithm for the following assumptions:\n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists only of the delimiter and the weights on the right pan. \n\nthe input sequence consists only of the delimiter and the weights on the left pan. \n\nthe input sequence consists"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AC|T') == 'AC|TL'\nassert solution('ABC|') == 'ABC|'\nassert solution('T|') == 'T|'\nassert solution('W|') == 'Impossible'\nassert solution('AC|') == 'AC|'\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"ABC|\") == \"ABC|ABC\"\nassert solution(\"|ABC\") == \"|ABC|ABC\"\nassert solution(\"F|\") == \"Impossible\"\n\nassert solution(\"AC|T\") == \"AC|TL\"\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AC|T') == 'AC|T'\nassert solution('L') == 'L'\nassert solution('ABC|') == 'ABC|'\nassert solution('W|T') == 'W|T'\nassert solution('|ABC') == '|ABC'\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"ABC|\") == \"ABC|\"\nassert solution(\"|ABC\") == \"|ABC\"\nassert solution(\"ABC|D\") == \"ABC|D\"\nassert solution(\"ABC|\") == \"ABC|\"\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"ABC|\") == \"ABC|ABC\"\nassert solution(\"W|T\") == \"Impossible\"\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 3\") == \"3 1\"\nassert solution(\"6 8 2\") == \"7 0\"\n\"\"\"\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4 3') == '3 1'\nassert solution('6 8 2') == '7 0'\n\"\"\"\n\nx, y, z = list(map(int, input().split()))\nchizhiks = 0\nsasha = x\nmasha = y\nwhile sasha > 0 and masha > 0:\n    chizhiks += 1\n    sasha -= z\n    masha -= z\nsasha = max(sasha, 0)\nmasha = max(masha, 0)\nprint(chizhiks - max(sasha, masha), chizhiks - min(sasha, masha))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4 3') == '3 1'\n\nsolution('6 8 2') == '7 0'\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3\") == \"3 1\"\nassert solution(\"6 8 2\") == \"7 0\"\n\"\"\""
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 4 3''') == '''3 1'''\nassert solution('''6 8 2''') == '''7 0'''\n\nprint('Success')"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 3\") == \"3 1\"\nassert solution(\"6 8 2\") == \"7 0\"\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5, 4, 3) == '3 1'\nassert solution(6, 8, 2) == '7 0'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 3\") == \"3 1\"\nassert solution(\"6 8 2\") == \"7 0\"\nassert solution(\"1 1 1\") == \"0 0\"\nassert solution(\"1 1 1 1 1 1 1\") == \"1 0\"\n\nprint('Success')\n\nprint('time:', time() - start)\n\"\"\""
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4 3\") == \"3 1\"\nassert solution(\"6 8 2\") == \"7 0\"\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 3\") == \"3 1\"\nassert solution(\"6 8 2\") == \"7 0\"\n\n\"\"\"\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0\\n1 0\\n0 1\") == \"3\\n1 -1\\n-1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 -1\\n-1 1\") == \"3\"\nassert solution(\"0 0\\n1 0\\n0 1\") == \"3\"\nassert solution(\"0 0\\n1 0\\n0 1\\n0 0\") == \"2\"\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def restore_parallelogram(self, points: List[List[int]]) -> int:\n        points = sorted(points)\n        a, b = points[0]\n        c, d = points[1]\n        e, f = points[2]\n        g, h = points[3]\n\n        first_edge = b - a, c - a, d - a\n        second_edge = a - e, c - e, b - e\n        third_edge = a - g, e - g, b - g\n        forth_edge = a - h, e - h, b - h\n\n        edge_with_one_zero = {first_edge, second_edge, third_edge, forth_edge}\n        result = 0\n        for edge in edge_with_one_zero:\n            if edge[0] == 0 and edge[1]!= 0:\n                if edge[2] == 0:\n                    result += 1\n                elif edge[2] == edge[0] * (-1):\n                    result += 2\n                elif edge[2] == edge[0] * (-1) * edge[1]:\n                    result += 1\n            elif edge[0]!= 0 and edge[1] == 0:\n                if edge[2] == 0:\n                    result += 1\n                elif edge[2] == edge[0] * (-1):\n                    result += 2\n                elif edge[2] == edge[0] * (-1) * edge[0]:\n                    result += 1\n\n        return result\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0\\n1 0\\n0 1\") == \"3\"\nassert solution(\"0 0\\n1 0\\n0 1\") == \"3\"\nassert solution(\"0 0\\n0 0\\n0 1\") == \"1\"\nassert solution(\"1 1\\n1 0\\n0 0\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n0 0\\n1 1\") == \"3\\n-1 1\\n1 1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0\\n1 0\\n0 1') == '3'\nassert solution('0 0\\n1 1\\n0 1') == '2'\nassert solution('-1 0\\n1 1\\n0 1') == '2'\nassert solution('0 0\\n1 1\\n1 1') == '1'\n\n\"\"\""
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0\\n1 0\\n0 1\") == \"3\"\nassert solution(\"0 0\\n1 0\\n0 1\\n0 0\") == \"0\"\nassert solution(\"0 0\\n1 1\\n1 1\\n0 1\") == \"0\"\nassert solution(\"0 0\\n1 1\\n1 0\\n0 1\") == \"3\"\nassert solution(\"0 0\\n0 0\\n0 0\") == \"1\"\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1 -1'\nassert solution('0 0\\n1 0\\n0 1') == '3\\n1 -1\\n-1 1'\nassert solution('0 0\\n1 1\\n0 1') == '3\\n1 -1\\n-1 1'\nassert solution('0 0\\n0 1\\n1 1') == '3\\n1 -1\\n-1 1'\n\n'''\n\nimport math\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0\\n2 0\\n0 1\") == \"3\"\nassert solution(\"0 0\\n0 1\") == \"1\"\nassert solution(\"0 0\\n0 0\") == \"0\"\nassert solution(\"0 0\\n1 1\") == \"1\"\n\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 1\\n1 3') == '3\\n1 1'\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 2') == ''\nassert solution('0 0\\n1 1') == '1'\nassert solution('0 0\\n2 2') == '0'\nassert solution('0 0\\n1 1\\n2 2') == '1'\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\\n') == '3\\n5 3 3 '\n\nassert solution('5\\n0 -1 100 -1 0\\n') == '1\\n5 \n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\"\nassert solution(\"1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\"\nassert solution(\"1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\"\n\n\"\"\"\n\nimport sys\nimport math\nimport collections\nimport itertools\nimport functools\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\\n5 3 3\"\nassert solution(\"5\\n0 -1 100 -1 0\") == \"1\\n5\""
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6') == '3'\nassert solution('5\\n0 -1 100 -1 0') == '1'\nprint('Success')\n\n---"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == 3\nassert solution(\"5\\n0 -1 100 -1 0\") == 1"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n\"\"\"\n\nimport collections"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\"\nassert solution(\"5 0 -1 100 -1 0\") == \"1\""
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6') == '3'\nassert solution('5\\n0 -1 100 -1 0') == '1'"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6') == '3\\n5 3 3'\nassert solution('5\\n0 -1 100 -1 0') == '1\\n5'\nassert solution('5\\n0 0 0 0') == '1\\n5'\n\n'''\n\nimport sys\nimport os\nfrom itertools import combinations"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\"\n\nassert solution(\"5\\n0 -1 100 -1 0\") == \"1\"\n\nassert solution(\"5\\n-1 -1 -1 -1 -1\") == \"1\"\n\n\"\"\"\n\n\nimport collections\nimport sys\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2') == '2'\n\nassert solution('4 8') == '4'\n\n\"\"\""
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8\") == \"4\"\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8') == '4'\n\"\"\"\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n') == '2'\nassert solution('4 8\\n') == '4'"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8\") == \"4\"\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1') == '2'\nassert solution('3 8') == '4'\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8') == '4'\nassert solution('3 2') == '2'\n\"\"\"\n\nimport sys\n\ninput_data = sys.stdin.readline().split()\nn, k = int(input_data[0]), int(input_data[1])"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2') == '2'\nassert solution('4 8') == '4'\nassert solution('4 10') == '4'\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == '2'\nassert solution(\"4 8\") == '4'"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\") == \"4\"\nassert solution(\"3 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('3 5') == '6'\nassert solution('4 4') == '5'\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"6\"\nassert solution(\"4 4\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"7 7\") == \"3\"\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == 6\n\"\"\"\n\nfrom collections import deque\n\na_1, a_2 = map(int, input().split())\narr = deque([(a_1, a_2)])\n\nn_minute = 0\nwhile arr:\n    n_minute += 1\n\n    # Get the current status of joysticks\n    a_1, a_2 = arr.popleft()\n    a_1 = (a_1 + 1) if a_1 > 0 else a_1\n    a_2 = (a_2 + 1) if a_2 > 0 else a_2\n\n    # If either joystick has zero charge stop game\n    if a_1 == 0 or a_2 == 0:\n        break\n\n    # If either joystick has charge more than 100, then disconnect it\n    if a_1 > 100 or a_2 > 100:\n        a_1, a_2 = 0, 0\n\n    # Add new status of joysticks to queue\n    arr.append((a_1, a_2))\n\nprint(n_minute)"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5') == '5'\nassert solution('3 5') == '6'\nassert solution('4 4') == '5'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == 6\nassert solution(\"4 4\") == 5\nassert solution(\"7 3\") == 5\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"6\"\n\"\"\"\n\na1, a2 = map(int, input().split())"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"5\"\nassert solution(\"3 5\") == \"6\"\nassert solution(\"3 5\") == \"6\"\nassert solution(\"4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == 6\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5') == 6\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"6\"\nassert solution(\"4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 5') == '11.00000000000000000000'\n\"\"\"\n\nfrom math import ceil\nfrom typing import List\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 6\\n4 7\") == \"11.0\"\nassert solution(\"4 2 6\\n1 3 2 3\") == \"5.0\"\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 6') == '5'\nassert solution('4 2 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 6\\n4 7\") == \"11.0\"\nassert solution(\"4 2 6\\n1 3 2 3\") == \"5.0\"\n\n---\n\nThe answer can be obtained by increasing the powers of the remaining Avengers in the group by 2."
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 6\\n1 3 2 3\") == \"5.00000000000000000000\"\nassert solution(\"4 2 6\\n1 3 2 1\") == \"8.00000000000000000000\"\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 2 6\n1 3 2 3''') == '11.0'\nassert solution('''4 2 6\n4 7''') == '5.0'\nassert solution('''4 2 6\n1 2 3 4''') == '5.0'\n\n-----Problem-----\nYou are given a set of n tasks, each with a due date. Assume that the tasks are sorted by their due date, and the set of tasks is initially in non-decreasing order by its due date.\n\nWrite a function that will determine the number of tasks that are unfinished.\n\nFor example, if the given tasks are due in the following order: [21, 100, 2], then the unfinished tasks are [21, 100].\n\n-----Solution-----"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 6') == '5'\nassert solution('4 7') == '11'\nassert solution('4 2 6') == '5'\nassert solution('4 7') == '11'\nassert solution('4 2 6') == '5'\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 5 3\n4 7\n3 8\n2 4\n5 6\n4 9\n8 9\n7 8\n3 3\n1 1\n2 3\n5 7\n7 10\n6 3\n1 1\n8 1\n8 9\n5 5\n6 6\n3 5\n1 1\n5 3\n5 8\n1 4\n1 8\n7 1\n8 7\n3 3\n4 4\n1 1\n3 9\n1 2\n1 1\n1 1\n9 8\n9 9\n8 9\n2 3\n9 3\n6 8\n8 6\n6 9\n1 3\n2 9\n9 1\n2 9\n5 2\n5 7\n9 3\n2 8\n2 5\n2 7\n5 1\n4 1\n1 8\n5 7\n2 3\n9 5\n7 5\n6 5\n3 3\n4 5\n6 1\n9 7\n3 3\n4 5\n7 5\n3 2\n1 1\n5 6\n6 6\n1 8\n7 8\n4 6\n8 7\n5 3\n8 2\n7 2\n6 7\n4 4\n2 4\n3 5\n9 3\n2 6\n3 3\n5 6\n5 5\n7 7\n4 9\n1 2\n9 7\n8 6\n6 9\n5 1\n7 2\n2 8\n8 9\n3 7\n6 7\n9 7\n8 9\n3 2\n8 3\n2 4\n2 2\n4 4\n6 6\n8 5\n4 6\n3 5\n9 9\n1 1\n1 1\n8 2\n5 7\n3 3\n6 6\n7 8\n5 5\n6 5\n3 7\n2 9\n4 2\n1 5\n2 6\n5 4\n7 6\n2 4\n7 1\n9 3\n4 3\n1 4\n3 3\n9 1\n7 7\n4 4\n5 7\n7 4\n3 4\n3 6\n2 5\n8 8\n1 2\n1 1\n3 3\n4 7\n2 2\n2 3\n6 6\n3 7\n1 1\n6 1\n9 3\n8 1\n3 2\n6 6\n4 5\n8 5\n6 6\n5 6\n7 6\n5 3\n2 3\n9 2\n3 1\n6 6\n1 1\n5 1\n8 2\n8 3\n4 4\n2 4\n5 2\n4 8\n5 6\n6 4\n2 8\n4 3\n8 7\n5 2\n5 7\n1 2\n5 3\n7 7\n5 3\n2 9\n4 6\n4 7\n8 1\n3 3\n7 1\n7 5\n6 5\n7 7\n2 5\n6 6\n4 8\n3 2\n9 3\n9 1\n4 6\n3 7\n1 1\n1 2\n1 1\n5 7\n6 9\n4 2\n3 4\n4 5\n4 6\n2 1\n9 7\n1 3\n4 2\n8 7\n2 9\n2 6\n3 2\n9 1\n6 8\n9 6\n8 7\n6 7\n4 8\n4 2\n8 2\n9 2\n2 6\n1 4\n5 2\n7 9\n6 4\n5 1\n2 9\n1 2\n2 1\n6 5\n5 4\n7 2\n9 1\n8 7\n3 2\n1 7\n6 9\n3 7\n4 4\n5 4\n9 7\n8 7\n3 9\n4 2\n6 9\n1 3\n2 6\n8 4\n6 9\n4 7\n5 6\n7 3\n1 5\n9 6\n8 7\n3 6\n9 7\n7 7\n2 7\n7 1\n4 5\n3 2\n2 1\n6 7\n2 4\n3 6\n6 7\n4 2\n5 1\n1 4\n8 1\n8 1\n9 6\n3 1\n9 5\n8 5\n5 1\n4 1\n5 7\n3 1\n6 2\n8 3\n2 3\n4 4\n4 4\n3 1\n1 7\n1 4\n5 6\n2 4\n1 7\n2 7\n4 2\n9 9\n5 6\n5 7\n6 2\n2 2\n3 2\n8 9\n5 3\n9 7\n6 1\n5 9\n4 9\n1 2\n5 7\n6 8\n5 5\n1 4\n6 8\n4 6\n9 7\n8 3\n6 7\n7 2\n6 7\n7 1\n2 3\n2 8\n9 8\n2 5\n8 8\n2 4\n5 1\n5 6\n1 8\n5 2\n1 9\n4 5\n6 9\n5 9\n6 2\n8 7\n3 7\n4 2\n3 8\n7 5\n3 2\n5 6\n6 9\n5 4\n6 5\n7 6\n8 2\n2 3\n6 4\n1 1\n4 5\n2 2\n1 2\n5 7\n1 2\n8 2\n9 9\n2 3\n5 2\n1 6\n9 6\n8 7\n4 3\n6 4\n8 1\n1 2\n3 4\n2 3\n7 2\n1 1\n3 3\n8 1\n6 9\n4 7\n3 5\n7 3\n3 7\n4 7\n3 7\n9 3\n8 9\n1 7\n2 8\n3 6\n4 7\n9 1\n3 1\n6 2\n7 1\n5 6\n3 1\n7 7\n3 5\n6 2\n6 2\n2 4\n4 7\n9 8\n8 3\n5 1\n1 5\n1 2\n5 8\n5 2\n5 1\n1 5\n4 7\n7 7\n4 4\n6 2\n3 1\n4 3\n2 4\n9 1\n8 7\n7 4\n1 1\n8 7\n5 6\n7 7\n3 6\n6 8\n6 7\n8 8\n4 7\n5 3\n7 8\n2 7\n2 7\n9 1\n1 8\n9 9\n8 9\n4 4\n5 1\n3 3\n4 9\n1 1\n2 3\n4 7\n3 6\n7 7\n4 4\n8 3\n8 6\n7 7\n5 5\n5 6\n5 6\n7 4\n2 4\n7 2\n3 6\n8 6\n6 5\n6 8\n3 8\n8 4\n2 5\n4 5\n4 7\n2 5\n3 7\n7 6\n5 5\n1 5\n2 6\n8 7\n3 7\n6 8\n5 4\n3 2\n1 7\n7 7\n1 8\n1 1\n2 2\n4 2\n1 6\n1 6\n4 2\n7 3\n5 1\n1 8\n1 6\n2 5\n4 3\n5 1\n8 1\n5 2\n2 4\n6 1\n5 6\n5 7\n8 4\n2 5\n6 3\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7\") == \"11.0\"\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 6\\n1 3 2 3') == '5.00000000000000000000'\nassert solution('4 2 6\\n4 7') == '11.00000000000000000000'\nassert solution('4 2 6\\n4 7\\n2 3 1') == '11.00000000000000000000'\nassert solution('4 2 6\\n4 7\\n2 3 1\\n3 2 2\\n2 3 1\\n3 2 2') == '11.00000000000000000000'\n\"\"\""
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == -3\n\nassert solution(\"4\") == 2\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n') == 2\nassert solution('5\\n') == -3\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == '2'\n\"\"\""
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '-3'\n\nprint(solution('5'))\n\n\n\"\"\"\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 2\nassert solution('5') == -3\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == 2\n\"\"\"\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"2\"\n\"\"\""
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == '-3'\nassert solution('4') == '2'\n\n\n\"\"\""
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '-3'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 2 0\") == \"1\"\nassert solution(\"5\\n4 2 3 0 1\") == \"3\"\nassert solution(\"7\\n0 3 1 0 5 2 6\") == \"2\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 2 0') == '1'\n\nassert solution('5\\n4 2 3 0 1') == '3'\n\nassert solution('7\\n0 3 1 0 5 2 6') == '2'\n\n\n\"\"\"\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 2 0\") == \"1\"\nassert solution(\"5\\n4 2 3 0 1\") == \"3\"\nassert solution(\"7\\n0 3 1 0 5 2 6\") == \"2\"\n\n\"\"\"\nfrom collections import defaultdict\nfrom typing import List"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 2 0\") == \"1\"\nassert solution(\"5\\n4 2 3 0 1\") == \"3\"\nassert solution(\"7\\n0 3 1 0 5 2 6\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 2\nassert solution(5) == 2\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 0\\n\") == \"1\"\nassert solution(\"5\\n4 2 3 0 1\\n\") == \"3\"\nassert solution(\"7\\n0 3 1 0 5 2 6\\n\") == \"2\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3 0 1\") == \"1\"\nassert solution(\"5 2 3 0 1\") == \"2\"\nassert solution(\"7 0 3 1 0 5 2 6\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 2 0\") == \"1\"\nassert solution(\"5\\n4 2 3 0 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 2 0\") == \"1\"\nassert solution(\"5\\n4 2 3 0 1\") == \"3\"\nassert solution(\"7\\n0 3 1 0 5 2 6\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abb\") == \"ab\"\nassert solution(\"abc\") == \"ab\"\nassert solution(\"pqr\") == \"pqr\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abcda\") == \"abca\"\nassert solution(\"abcd\") == \"abca\"\nassert solution(\"abcda\") == \"abca\"\nassert solution(\"abda\") == \"abca\"\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaa') == 'aa'\nassert solution('abcda') == 'abca'\nassert solution('abcd') == 'abca'\n\nprint('all tests passed.')\n\"\"\""
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abb\") == \"ab\"\nassert solution(\"pqr\") == \"pr\"\nassert solution(\"z\") == \"z\"\nassert solution(\"abcda\") == \"abca\"\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abcda\") == \"abca\"\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nfrom collections import deque\nfrom itertools import combinations\nfrom sys import stdin\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abb\") == \"ab\"\nassert solution(\"abc\") == \"ab\"\nassert solution(\"pqr\") == \"pq\"\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abb\") == \"ab\"\nassert solution(\"pqr\") == \"pqr\""
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"aaaabbc\") == \"aabbc\"\nassert solution(\"aaaabbcddd\") == \"aabbcddd\"\nassert solution(\"aaaaaaa\") == \"aaaaaaa\"\nassert solution(\"abcccccccaaaaaaaaaa\") == \"abcccccccaaaaaaaaaa\"\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abb\") == \"ab\"\nassert solution(\"abcda\") == \"abca\"\nassert solution(\"aabb\") == \"ab\"\nassert solution(\"aaaa\") == \"aa\"\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abb\") == \"ab\"\nassert solution(\"pqr\") == \"pq\"\nassert solution(\"cba\") == \"ba\"\nassert solution(\"abcda\") == \"abca\"\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\") == '24'\nassert solution(\"7 3\\n3 14 15 92 65 35 89\") == '64'\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\") == \"24\"\nassert solution(\"7 3\\n3 14 15 92 65 35 89\") == \"64\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4\\n9 14 28 1 7 13 15 29 2 31\\n') == '24'\n\nassert solution('7 3\\n3 14 15 92 65 35 89\\n') == '64'\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n3 14 15 92 65 35 89\") == 64\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nbooks = list(map(int, stdin.readline().split()))\n\nbeauty = 0\nfor i in range(n):\n    beauty += books[i]\n    if i + 1 >= k:\n        beauty = beauty & (i + 1)\nprint(beauty)\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\") == \"24\"\nassert solution(\"7 3\\n3 14 15 92 65 35 89\") == \"64\"\n\n\"\"\"\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"10 4\"\n\"9 14 28 1 7 13 15 29 2 31\") == \"24\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nn, k = map(int, input().split())\nbook = list(map(int, input().split()))\n\nbooks = [book[i:i + k] for i in range(0, len(book), k)]\n\nm = sum(sum(book) for book in books)\nm = m % k\nprint(m)\nprint(max(sum(i & j for i, j in zip(book, book[1:])) for book in books))\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\") == '24'\nassert solution(\"7 3\\n3 14 15 92 65 35 89\") == '64'\nassert solution(\"3 3\\n3 2 4 1\") == '3'\n\"\"\""
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n9 14 28 1 7 13 15 29 2 31') == '24'\nassert solution('7 3\\n3 14 15 92 65 35 89') == '64'\n\n\"\"\""
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s) == answer\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == '12'\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == '11'\nassert solution(\"2\\n1\\n1\\n1 1\") == '4'\n\"\"\"\n\n\n\n\"\"\"\n\u041b\u0430\u0443\u0440\u0435\u0442\u044b \u043d\u0435 \u043f\u043e\u043d\u044f\u043b \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u0436\u0435 \u0442\u0435\u043e\u0440\u0438\u044f \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435. \u0415\u0441\u0442\u044c \u0434\u0432\u0435 \u0434\u043e\u0440\u043e\u0433\u0438, \u0441\u043e\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0435 \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u043e\u0440\u043e\u043d\u0443. \u041f\u0435\u0440\u0432\u0430\u044f \u0434\u043e\u0440\u043e\u0433\u0430 \u0438\u043c\u0435\u0435\u0442 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b a1, a2,..., an. \u0412\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u0440\u043e\u0433\u0430 \u0438\u043c\u0435\u0435\u0442 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b b1, b2,..., bn. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0435 \u0434\u043e\u0440\u043e\u0436\u043a\u0438 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0442\u0441\u044f, \u0442\u043e \u043e\u043d\u0438 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0442\u0441\u044f \u0432 \u0442\u043e\u0447\u043a\u0435 (\u0445, \u0443).\n\n\u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b (x, y) \u0441\u043c\u0435\u0449\u0435\u043d\u044b \u043d\u0430 \u0434\u043b\u0438\u043d\u0443 \u0434\u043e\u0440\u043e\u0433\u0438, \u0437\u0430\u0442\u0435\u043c \u043f\u043e \u0434\u043b\u0438\u043d\u0435 \u0434\u043e\u0440\u043e\u0436\u043a\u0438 \u043f\u043e \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0435\u043b\u043a\u0435, \u0434\u043e \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438. \u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u043d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0432\u0430\u044f \u0438 \u0432\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u0440\u043e\u0433\u0438 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u043b\u0438\u0441\u044c. \u0422\u0430\u043a\u0436\u0435, \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0443 \u0432\u0442\u043e\u0440\u043e\u0439 \u0434\u043e\u0440\u043e\u0433\u0438 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0435\u0440\u0432\u043e\u0439, \u043a\u0430\u043a \u043e\u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u0430\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0440\u043e\u0436\u0435\u043a n (1 \u2264 n \u2264 100). \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043d\u0430\u0447\u0430\u043b\u043e \u0438 \u043a\u043e\u043d\u0435\u0446 \u0434\u043e\u0440\u043e\u0436\u043a\u0438.\n\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0439 m (1 \u2264 m \u2264 100) \u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u0437\u0430\u0442\u0435\u043c m \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0439 (1 \u2264 ai, bi \u2264 n, 1 \u2264 i \u2264 m). \u041a\u0430\u0436\u0434\u043e\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u043e\u043c\u0435\u0440\u0430 \u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0442\u0441\u044f. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0434\u043e\u0440\u043e\u0436\u0435\u043a \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 n. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043d\u0430 \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\u0445 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u0430\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 \u2014 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u0447\u0442\u043e\u0431\u044b \u043f\u0435"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"11\"\nassert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"4\"\nassert solution(\"4\") == \"14\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == \"12\"\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == \"11\"\nassert solution(\"2\\n1\\n1\\n1 1\") == \"4\"\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == \"12\"\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == \"11\"\nassert solution(\"2\\n1\\n1\\n1 1\") == \"4\"\n\n---Problem---\n\nFind a minimal sum of waiting times that Laurenty needs to wait at the crossroads.\n\n---Solution---\n\n0 1 2 3 4\n2 3 1 0 1\n3 2 1 0 2 3\n1 2 3 4 5 6\n7 8 9 10 11 12\n\n1 -> 1\n2 -> 2\n3 -> 3\n4 -> 1\n5 -> 1\n6 -> 2\n7 -> 3\n8 -> 1\n9 -> 2\n10 -> 3\n11 -> 1\n12 -> 2\n\n\"\"\""
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == '12'\n\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == '11'\n\nassert solution(\"2\\n1\\n1 1\\n1 1\") == '4'\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == \"12\"\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == \"11\"\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == 12\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1\\n1\\n1 1\") == \"4\"\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == \"11\"\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == \"11\"\n\"\"\"\nimport sys\nfrom typing import List, Dict\nfrom collections import Counter"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == \"12\"\n\"\"\"\n\n\n\"\"\"\nIn this problem, we will build a solution that tries to minimize the total waiting time for Laurenty. The problem can be solved by analyzing the system as a graph.\n\nWe have an undirected graph G(V, E) = {V, E}, where V = {0, 1, 2,..., n - 1}, E = {(i, j), (i, k) | i < j < k} (i = 0, 1, 2,..., n - 2, j = 0, 1,..., n - 3, k = 0, 1,..., n - 1).\n\nNow, we want to know what is the minimum time to wait for Laurenty. We want to show that there is an answer, so we'll break the problem into three steps:\n\n1. Find a path of length 2 from the start to the end. (2 points)\n\n2. Find the shortest path from the start to the end. (n points)\n\n3. Find the shortest path from the end to the start. (n points)\n\nEach step is independent of the other two steps.\n\nWe can start from the end, and the first step is to find the longest path. Then we can look for the second and third steps, in the same manner as in the first step.\n\nWe want to show that there is an answer, so we'll show that the longest path is the shortest one.\n\nIn case of a tie, we choose the path that goes through the end.\n\nFinally, we should add 1 to the answer if the path contains the start and -1 if it contains the end.\n\"\"\"\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([6, 0, 1, 1, 2, 3, 2])) == \"1 2 2 3 3 3\"\nassert solution(str([10, 1, 0, 3, 4, 5, 2, 3, 7, 0])) == \"2 3 3 4 5 6 6 6 8 2\"\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1\\n0 1 0 3 4 5 2 3 7 0\") == \"2 3 3 4 5 6 6 6 8 2\"\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 0\\n0 1 1 2 3 2\") == \"1 2 2 3 3 3 \"\nassert solution(\"10 1\\n0 1 0 3 4 5 2 3 7 0\") == \"2 3 3 4 5 6 6 6 8 2 \"\nassert solution(\"2 2\\n0 1\") == \"2 2 \"\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\") == \"2 2 2 3 3 3\"\nassert solution(\"10 1\") == \"2 3 3 4 5 6 6 6 8 2\"\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(input())"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 1\\n0 1 0 3 4 5 2 3 7 0\\n') == '2 3 3 4 5 6 6 6 8 2'"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 1 0 3 4 5 2 3 7 0') == '2 3 3 4 5 6 6 6 8 2'\n\"\"\"\n\nn, k = map(int, input().split())\nlinks = list(map(int, input().split()))\n\nans = [0] * n\nfor i in range(k, n-k):\n    ans[i] = 1\n    for j in range(max(0, i-k), i):\n        if links[j] == i:\n            ans[i] += 1\n    for j in range(i+1, min(i+k+1, n)):\n        if links[j] == i:\n            ans[i] += 1\n\nprint(' '.join(map(str, ans)))"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 0\\n0 1 1 2') == '1 2 2 3 '\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 0\") == \"1 2 2 3 3 3\"\nassert solution(\"10 1\") == \"2 3 3 4 5 6 6 6 8 2\"\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('2 1') == '0 0'\nassert solution('1 2 1') == '0 0 0'\nassert solution('1 1 2 1 3 2') == '0 0 0 0 0'\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8\\n2 5 1') == 'YES'\nassert solution('4 4\\n0 1 2 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3, 8) == \"YES\"\nassert solution(4, 4) == \"NO\""
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 8\") == \"YES\"\nassert solution(\"4\\n4 4\") == \"YES\"\nassert solution(\"0\\n1 2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\nassert solution(\"0 1 2 3\") == \"YES\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8\") == \"YES\"\nassert solution(\"2 5 1\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 8\\n2 5 1\") == \"YES\"\nassert solution(\"3 8\\n2 5 1\") == \"NO\"\nassert solution(\"4 4\\n0 1 2 3\") == \"YES\"\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 8\") == \"NO\"\nassert solution(\"4 4\") == \"NO\"\nassert solution(\"1 2 5\") == \"YES\"\nassert solution(\"0 1 2 3\") == \"NO\""
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8\\n2 5 1\") == \"YES\"\n\"\"\"\n\n\nimport sys\nimport re\nfrom itertools import permutations\nfrom functools import reduce\nfrom collections import defaultdict\n\nimport numpy as np\n\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2\n8 3\n2 5 1\"\"\") == \"YES\"\nassert solution(\"\"\"3\n8 3\n2 5 1\"\"\") == \"NO\"\nassert solution(\"\"\"2\n3 8\n2 5 1\"\"\") == \"YES\"\nassert solution(\"\"\"2\n3 8\n0 1 2 3\"\"\") == \"NO\"\n\n\"\"\"\nThe first line of the input gives the number of test cases, $t$. You must treat the first line of each test case as an input, and the second line as an output.\n\nThe second line of each test case contains two integers $n$ and $m$ \u2014 the number of elements in the array and the required sum, respectively.\n\nThe third line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ \u2014 the elements of the array.\n\nIt is guaranteed that the sum of the given array is at most $10^6$.\n\nIt is forbidden to delete elements as well as insert new elements.\n\nIt is forbidden to use the sort() function to reorder the elements.\n\nIt is forbidden to use the same element twice, both as an element of the array and in the sum.\n\nIt is forbidden to use the sum function.\n\nIt is forbidden to use the division operator.\n\nIt is forbidden to use the unary minus operator or to use it as a preprocessing operator.\n\nIt is forbidden to use the ** operator.\n\nIt is forbidden to use the modulo operator.\n\nIt is forbidden to use the bitwise complement operator.\n\nIt is forbidden to use the bitwise shift operators.\n\nIt is forbidden to use the bitwise or operator.\n\nIt is forbidden to use the bitwise and operator.\n\nIt is forbidden to use the bitwise exclusive or operator.\n\nIt is forbidden to use the bitwise inversion operator.\n\nIt is forbidden to use the bitwise xor operator.\n\nIt is forbidden to use the bitwise or\u00a0and operator.\n\nIt is forbidden to use the bitwise or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0and operator.\n\nIt is forbidden to use the bitwise or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise inversion\u00a0or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise inversion\u00a0or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise and\u00a0or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0and\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0and\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion operator.\n\nIt is forbidden to use the bitwise and\u00a0inversion operator.\n\nIt is forbidden to use the bitwise and\u00a0inversion operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise and\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise and\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise and\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise and\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise and\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise and\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise and\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise and\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise and\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator.\n\nIt is forbidden to use the bitwise or\u00a0inversion or\u00a0exclusive or operator"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == '10'\nassert solution(\"8 2\") == '12'\nassert solution(\"3 4\") == '12'\n\"\"\""
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5 1\") == \"10\\n12\"\nassert solution(\"3\\n8 2\") == \"10\\n12\"\nassert solution(\"3\\n3 4\") == \"12\\n12\"\n\n\"\"\"\n\n\nfrom itertools import repeat\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\") == \"10\"\nassert solution(\"8 2\") == \"12\"\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\nThe number of divisors of $n$ is called its *count*. Let $c(n)$ be the smallest positive integer $k>=1$ such that $k\\cdot f(n)>=n$.\n\n$c(n)=0$ if and only if $n=1$.\n\n$c(n)=1$ if and only if $n\\le 1$.\n\nOtherwise, $c(n)>=2$ holds for all $n\\ge 2$.\n\nIt can be shown that if $n>=2$, then $c(n)=\\lfloor{\\frac{n}{f(n)}}\\rfloor+1$.\n\nIt is also shown that $c(n)$ can be calculated from $f(n)$ by using the following recursive formula:\n\n$c(n)=\\max(\\text{$c(k\\cdot f(n))$}+1\\text{ for } n\\le k\\cdot f(n))$\n\n$c(n)=1$ if and only if $n<=f(n)$.\n\nThe question is about $c(n)$.\n\nIt can be shown that $c(n)$ is an integer for all $n\\ge 1$ and $c(n) \\leq 1000$.\n\nIt is known that $n\\leq 1000$ holds for all $n\\ge 1$.\n\nThe $i$-th query is $n=n_i+f(n_i)$, for each $i\\ge 1$.\n\nThere are $t$ queries.\n\nIt can be shown that $t\\leq 100$.\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\nThe number of divisors of $n$ is called its *count*. Let $c(n)$ be the smallest positive integer $k>=1$ such that $k\\cdot f(n)>=n$.\n\n$c(n)=0$ if and only if $n=1$.\n\n$c(n)=1$ if and only if $n\\le 1$.\n\nOtherwise, $c(n)>=2$ holds for all $n\\ge 2$.\n\nIt can be shown that if $n>=2$, then $c(n)=\\lfloor{\\frac{n}{f(n)}}\\rfloor+1$.\n\nIt is also shown that $c(n)$ can be calculated from $f(n)$ by using the following recursive formula:\n\n$c(n)=\\max(\\text{$c(k\\cdot f(n))$}+1\\text{ for } n\\le k\\cdot f(n))$\n\n$c(n)=1$ if and only if $n<=f(n)$.\n\nThe question is about $c(n)$.\n\nIt can be shown that $c(n)$ is an integer for all $n\\ge 1$ and $c(n) \\leq 1000$.\n\nIt is known that $n\\leq 1000$ holds for all $n\\ge 1$.\n\nThe $i$-th query is $n=n_i+f(n_i)$, for each $i\\ge 1$.\n\nThere are $t$ queries.\n\nIt can be shown that $t\\leq 100$.\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\nThe number of divisors of $n$ is called its *count*. Let $c(n)$ be the smallest positive integer $k>=1$ such that $k\\cdot f(n)>=n$.\n\n$c(n)=0$ if and only if $n=1$.\n\n$c(n)=1$ if and only if $n\\le 1$.\n\nOtherwise, $c(n)>=2$ holds for all $n\\ge 2$.\n\nIt can be shown that if $n>=2$, then $c(n)=\\lfloor{\\frac{n}{f(n)}}\\rfloor+1$.\n\nIt is also shown that $c(n)$ can be calculated from $f(n)$ by using the following recursive formula:\n\n$c(n)=\\max(\\text{$c(k\\cdot f(n))$}+1\\text{ for } n\\le k\\cdot f(n))$\n\n$c(n)=1$ if and only if $n<=f(n)$.\n\nThe question is about $c(n)$.\n\nIt can be shown that $c(n)$ is an integer for all $n\\ge 1$ and $c(n) \\leq 1000$.\n\nIt is known that $n\\leq 1000$ holds for all $n\\ge 1$.\n\nThe $i$-th query is $n=n_i+f(n_i)$, for each $i\\ge 1$.\n\nThere are $t$ queries.\n\nIt can be shown that $t\\leq 100$.\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\nThe number of divisors of $n$ is called its *count*. Let $c(n)$ be the smallest positive"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n5 1\\n6 1\\n7 1\\n\") == \"12\"\nassert solution(\"3 2\\n5 1\\n6 1\\n7 1\\n\") == \"12\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5 1\\n8 2\\n3 4\") == \"10\\n12\\n12\"\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1') == '10'\nassert solution('8 2') == '12'\nassert solution('3 4') == '12'\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1\\n8\\n2\\n3\\n\") == \"10\\n12\\n12\"\n\nassert solution(\"4\\n1\\n8\\n2\\n3\\n\") == \"10\\n12\\n12\"\n\nassert solution(\"3\\n1\\n8\\n2\\n3\\n\") == \"10\\n12\\n12\"\n\nassert solution(\"4\\n1\\n8\\n2\\n3\\n\") == \"10\\n12\\n12\"\n\nassert solution(\"4\\n1\\n8\\n2\\n3\\n\") == \"10\\n12\\n12\""
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5 1\\n8 2\\n3 4\") == \"10 12 12\"\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5 1\\n8 2\\n3 4\") == '10\\n12\\n12'\n\"\"\"\n\nimport sys\nfrom typing import List\nfrom collections import Counter\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n8 2\\n3 4\") == \"10\\n12\\n12\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 6''') == 'Possible'\nassert solution('''6 12''') == 'Impossible'\n\n\"\"\"\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 6\\n2 5\\n3 2\\n5 1\\n3 4\\n4 1\\n5 4') == 'Possible'\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2 3\\n1 3\") == \"Possible\\n2 5\\n3 2\"\nassert solution(\"5 6\\n2 5\\n3 2\\n5 1\\n3 4\\n4 1\") == \"Impossible\"\n\"\"\"\nfrom gcd import gcd\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\") == \"Possible\"\nassert solution(\"6 12\") == \"Impossible\"\n\"\"\"\n\n\nclass Graph:\n    def __init__(self, n):\n        self.edges = {}\n        self.n = n\n        self.dist = [0] * n\n\n    def add_edge(self, u, v):\n        self.edges[(u, v)] = 1\n        self.edges[(v, u)] = 1\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 6''') == '''Possible\n2 5\n3 2\n5 1\n3 4\n4 1\n5 4'''\n\nassert solution('''6 12''') == '''Impossible'''\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6') == 'Impossible'\nassert solution('4 6') == 'Impossible'\nassert solution('6 6') == 'Impossible'\nassert solution('6 12') == 'Impossible'\nassert solution('5 9') == 'Impossible'\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"Impossible\"\nassert solution(\"3 4\") == \"Impossible\"\nassert solution(\"3 5\") == \"Impossible\"\nassert solution(\"4 5\") == \"Impossible\"\nassert solution(\"3 6\") == \"Impossible\"\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 6''') == '''Impossible'''\nassert solution('''6 12''') == '''Impossible'''\nassert solution('''5 6\n2 5\n3 2\n5 1\n3 4\n4 1\n5 4''') == '''Possible\n2 5\n3 2\n5 1\n3 4'''\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6\\n2 5\\n3 2\\n5 1\\n3 4\\n4 1\\n5 4') == 'Possible'\nassert solution('3 6\\n2 5\\n3 2\\n5 1\\n3 4\\n4 1\\n5 4') == 'Possible'\nassert solution('3 6\\n2 5\\n3 2\\n5 1\\n3 4\\n4 1\\n5 4') == 'Possible'\nassert solution('3 6\\n2 5\\n3 2\\n5 1\\n3 4\\n4 1\\n5 4') == 'Possible'\nassert solution('3 6\\n2 5\\n3 2\\n5 1\\n3 4\\n4 1\\n5 4') == 'Possible'\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 1\n1 1\n\n\"\"\") == \"WIN\"\nassert solution(\"\"\"12 2\n4 1\n8 1\n\"\"\") == \"WIN\"\nassert solution(\"\"\"1 1\n1 2\n\n\"\"\") == \"LOSE\"\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == \"LOSE\"\nassert solution('1 2') == \"WIN\"\nassert solution('2 1') == \"LOSE\"\nassert solution('1 1') == \"WIN\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == 'LOSE'\nassert solution('1 2') == 'WIN'\nassert solution('2 1') == 'LOSE'\nassert solution('2 2') == 'LOSE'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n1 1\") == \"WIN\"\nassert solution(\"12 2\\n4 1\\n8 1\") == \"WIN\"\nassert solution(\"1 1\\n1 2\") == \"LOSE\"\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n1 1\") == \"WIN\"\nassert solution(\"12 2\\n4 1\\n8 1\") == \"WIN\"\nassert solution(\"1 1\\n1 2\") == \"LOSE\"\n\n\"\"\"\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n3 1') == 'WIN'\nassert solution('1 1\\n1 2') == 'LOSE'\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1') == 'LOSE'\nassert solution('2 1\\n3 1') == 'WIN'\nassert solution('1 1\\n2 1') == 'LOSE'\nassert solution('1 1\\n3 1\\n4 1') == 'WIN'\nassert solution('2 4') == 'WIN'\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n1 1') == 'WIN'\nassert solution('12 2\\n4 1\\n8 1') == 'WIN'\nassert solution('1 1\\n1 2') == 'LOSE'"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n1 1\") == \"WIN\"\nassert solution(\"12 2\\n4 1\\n8 1\") == \"LOSE\"\nassert solution(\"1 1\\n1 2\") == \"LOSE\"\n\n\n\"\"\""
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 1\") == \"WIN\"\nassert solution(\"12 2\\n4 1\\n8 1\") == \"WIN\"\nassert solution(\"1 1\\n1 2\") == \"LOSE\""
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n') == 'YES'\nassert solution('5 4\\n1 0 0 0 1\\n1 1 1 1 1\\n') == 'YES'\nassert solution('5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n') == 'NO'\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 4\\n1 0 0 0 1\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n\") == \"NO\"\n\n\"\"\"\n\nfrom collections import namedtuple\n\nStation = namedtuple('Station', ['open_first', 'open_second'])"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES'\nassert solution('''5 4\n1 0 0 0 1\n0 1 1 1 1\n''') == 'YES'\nassert solution('''5 2\n0 1 1 1 1\n1 1 1 1 1\n''') == 'NO'\n\"\"\""
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n\") == \"NO\""
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n') == 'YES'\nassert solution('5 4\\n0 1 1 1 1\\n1 1 1 1 1\\n') == 'YES'\nassert solution('5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n\") == \"NO\"\nassert solution(\"5 3\\n0 1 1 1 1\\n1 1 1 1 1\\n\") == \"NO\"\nassert solution(\"5 4\\n0 1 1 1 1\\n1 1 1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n') == 'YES'\nassert solution('5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n') == 'YES'\nassert solution('5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n') == 'NO'"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 1 1 1 1\\n0 1 1 1 1\") == \"YES\"\nassert solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 4\\n0 1 1 1 1\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 3\\n1 0 1 1 1\\n1 1 1 1 1\\n\") == \"NO\"\nassert solution(\"5 2\\n0 1 1 1 1\\n1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n') == 'YES'\nassert solution('5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n') == 'YES'\nassert solution('5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n') == 'NO'\n\"\"\"\n\nfrom collections import Counter\nimport itertools"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10\\n4 3 1 2\") == \"4\"\nassert solution(\"5 6\\n4 3 1 1 2\") == \"3 1 2\"\nassert solution(\"1 3\\n4\") == \"0\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\\n4 3 1 2\\n\") == '4\\n1 2 3 4'\nassert solution(\"5 6\\n4 3 1 1 2\\n\") == '3\\n1 3 4'\nassert solution(\"1 3\\n4\\n\") == '0'\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10\\n4 3 1 2') == '4'\nassert solution('5 6\\n4 3 1 1 2') == '3 1 2'\nassert solution('1 3\\n4') == '0'\n\"\"\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4 10\n4 3 1 2\n''') == '4'\nassert solution('''\n5 6\n4 3 1 1 2\n''') == '3'\nassert solution('''\n1 3\n4\n''') == '0'\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10\\n4 3 1 2') == '4'\nassert solution('5 6\\n4 3 1 1 2') == '3'\nassert solution('1 3\\n4') == '0'"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == expected_output\n\"\"\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\\n4 3 1 2\\n\") == \"4\"\nassert solution(\"5 6\\n4 3 1 1 2\\n\") == \"3 1 2\"\nassert solution(\"1 3\\n4\\n\") == \"0\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\\n4 3 1 2\") == \"4\"\nassert solution(\"5 6\\n4 3 1 1 2\") == \"3\"\nassert solution(\"1 3\\n4\") == \"0\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\\n4 3 1 2\") == \"4\"\n\nassert solution(\"5 6\\n4 3 1 1 2\") == \"3\"\n\nassert solution(\"1 3\\n4\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10\\n4 3 1 2\") == \"4\"\nassert solution(\"5 6\\n4 3 1 1 2\") in (\"3\", \"1 3 4\")\nassert solution(\"1 3\\n4\") == \"0\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9\\n0 0 0 1 1 1 0 0 0\\n') == 'YES'\nassert solution('7\\n0 0 0 1 1 1 1\\n') == 'NO'\nassert solution('5\\n1 1 1 1 1\\n') == 'YES'\nassert solution('8\\n1 1 1 0 0 0 1 1\\n') == 'NO'\nassert solution('9\\n1 1 0 1 1 0 1 1 0\\n') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\n0 0 0 1 1 1 0 0 0\\n') == 'YES'\nassert solution('7\\n0 0 0 1 1 1 1\\n') == 'NO'\nassert solution('5\\n1 1 1 1 1\\n') == 'YES'\nassert solution('8\\n1 1 1 0 0 0 1 1\\n') == 'NO'\nassert solution('9\\n1 1 0 1 1 0 1 1 0\\n') == 'NO'\n\n\n\n-----Test 2-----\n\nTest Input:\n2\n2\n1 1\n\nTest Output:\nYES\n\nTest Input:\n3\n3\n1 1 1\n\nTest Output:\nNO\n\n\n-----Test 3-----\n\nTest Input:\n5\n1 1 1 1 1\n\nTest Output:\nNO\n\n\n-----Test 4-----\n\nTest Input:\n5\n0 0 0 1 1\n\nTest Output:\nYES\n\n\n-----Test 5-----\n\nTest Input:\n1\n0\n\nTest Output:\nNO\n\n\n-----Test 6-----\n\nTest Input:\n4\n1 1 1 1\n\nTest Output:\nNO\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 1 1') == 'YES'\nassert solution('5\\n0 0 1 1 1') == 'NO'\nassert solution('9\\n1 1 0 1 1 0 1 1 0') == 'NO'\n\nassert solution('9\\n1 1 0 1 1 0 1 1 0') == 'NO'\nassert solution('8\\n1 1 1 1 1 1 1 1 1') == 'NO'\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(9) == \"YES\"\nassert solution(5) == \"YES\"\nassert solution(8) == \"NO\"\nassert solution(7) == \"NO\"\nassert solution(6) == \"NO\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n9\n0 0 0 1 1 1 0 0 0\n''') == 'YES'\n\nassert solution('''\n7\n0 0 0 1 1 1 1\n''') == 'NO'\n\nassert solution('''\n5\n1 1 1 1 1\n''') == 'YES'\n\nassert solution('''\n8\n1 1 1 0 0 0 1 1\n''') == 'NO'\n\nassert solution('''\n9\n1 1 0 1 1 0 1 1 0\n''') == 'NO'"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n1 1 0 1 1 0 1 1 0\") == \"YES\"\nassert solution(\"7\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"5\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"8\\n1 1 1 0 0 0 1 1\") == \"NO\"\nassert solution(\"9\\n1 1 0 1 1 0 1 1 0\") == \"NO\"\n\"\"\""
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"7\\n0 0 0 1 1 1\\n\") == \"NO\"\nassert solution(\"5\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"8\\n1 1 1 0 0 0 1 1\\n\") == \"NO\"\nassert solution(\"9\\n1 1 0 1 1 0 1 1\\n\") == \"NO\""
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n0 0 0 1 1 1 0 0 0\") == \"YES\"\nassert solution(\"7\\n0 0 0 1 1 1 1\") == \"NO\"\nassert solution(\"5\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"8\\n1 1 1 0 0 0 1 1\") == \"NO\"\nassert solution(\"9\\n1 1 0 1 1 0 1 1 0\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\n0 0 0 1 1 1 0 0 0\\n') == 'YES'\nassert solution('7\\n0 0 0 1 1 1 1\\n') == 'NO'\nassert solution('5\\n1 1 1 1 1\\n') == 'YES'\nassert solution('8\\n1 1 1 0 0 0 1 1\\n') == 'NO'\nassert solution('9\\n1 1 0 1 1 0 1 1 0\\n') == 'NO'\nprint('All tests are passed')\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9\\n0 0 0 1 1 1 0 0 0') == 'YES'\nassert solution('7\\n0 0 0 1 1 1 1') == 'NO'\nassert solution('5\\n1 1 1 1 1') == 'YES'\nassert solution('8\\n1 1 1 0 0 0 1 1') == 'NO'\nassert solution('9\\n1 1 0 1 1 0 1 1 0') == 'NO'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 15\\n1 2 3 4 5 6 7\") == \"0 0 0 0 0 2 3\"\n\"\"\""
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 15\\n1 2 3 4 5 6 7') == '0 0 0 0 0 2 3'\n\nassert solution('5 100\\n80 40 40 40 60') == '0 1 1 2 3'"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0\\n') == '0'\nassert solution('3\\n1\\n2\\n4\\n0\\n') == '0 1 1 2'\nassert solution('10\\n1\\n3\\n1\\n0\\n3\\n1\\n5\\n0\\n0\\n') == '0 1 1 3'\n\nassert solution('5\\n1\\n3\\n1\\n0\\n') == '0 1 1 2'\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 16\") == \"2\"\nassert solution(\"8 20\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 10\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(example_1) == '0 0 0 0 0 2 3'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 100') == '0 1'\n\"\"\""
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 15\\n1 2 3 4 5 6 7\") == \"0 0 0 0 0 2 3\"\n\"\"\"\n\nfrom collections import Counter, namedtuple"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 15\\n1 2 3 4 5 6 7\") == \"0 0 0 0 0 2 3\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 15\\n1 2 3 4 5 6 7\") == \"0 0 0 0 0 2 3\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"0 0\"\nassert solution(\"1 1\") == \"0 0\"\nassert solution(\"1 2\") == \"0 1\"\nassert solution(\"1 3\") == \"0 1\"\nassert solution(\"1 4\") == \"0 2\"\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a1) == a2\nassert solution(a2) == a3\n\na1 = list(map(int, a1.strip().split(' ')))\na2 = list(map(int, a2.strip().split(' ')))\na3 = list(map(int, a3.strip().split(' ')))"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n0 4 5 6 7\") == \"2\"\nassert solution(\"5 0\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5 0\\n0\") == \"1\""
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n0 4 5 6 7\") == \"2\"\nassert solution(\"1 0\\n0\") == \"1\"\nassert solution(\"5 0\\n1 2 3 4 5\") == \"0\""
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n0 4 5 6 7\") == \"2\"\nassert solution(\"1 0\\n0\") == \"1\"\nassert solution(\"5 0\\n1 2 3 4 5\") == \"0\"\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n0 4 5 6 7') == '2'\nassert solution('1 0\\n0') == '1'\nassert solution('5 0\\n1 2 3 4 5') == '0'\n\n-----\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5\\n0\") == '2'\nassert solution(\"1 2 3 4 5\\n0\") == '2'\nassert solution(\"1 2 3 4 5\\n0\") == '2'\n\"\"\"\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n0 4 5 6 7\\n') == '2'\nassert solution('1 0\\n0\\n') == '1'\nassert solution('5 0\\n1 2 3 4 5\\n') == '0'\nassert solution('5 2\\n0 4 5 6 7\\n') == '0'\nassert solution('5 3\\n0 4 5 6 7\\n') == '2'"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n0 4 5 6 7\") == \"2\"\nassert solution(\"1 0\\n0\") == \"1\"\nassert solution(\"5 0\\n1 2 3 4 5\") == \"0\"\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n0 4 5 6 7\") == \"2\"\nassert solution(\"1 0\\n0\") == \"1\"\nassert solution(\"5 0\\n1 2 3 4 5\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n0 4 5 6 7\\n\") == \"2\"\nassert solution(\"1 0\\n0\\n\") == \"1\"\nassert solution(\"5 0\\n1 2 3 4 5\\n\") == \"0\"\n\"\"\"\n\nimport heapq\n\nn, mex = input().split(\" \")\nn, mex = int(n), int(mex)\nnums = list(map(int, input().split()))\n\nnums_set = set(nums)\nresult = 0\nfor i in nums_set:\n    if i < 0:\n        result += 1\n    else:\n        heapq.heappush(nums_set, i)\n\nprint(result + len(nums_set))\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"3 0 3\"\nassert solution(\"3 5\") == \"2 1 3\"\nassert solution(\"2 4\") == \"2 1 3\"\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"3 0 3\"\nassert solution(\"2 4\") == \"2 1 3\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"3 0 3\"\n\"\"\"\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"3 0 3\"\nassert solution(\"2 4\") == \"2 1 3\"\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"3 0 3\"\nassert solution(\"2 4\") == \"2 1 3\"\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"3 0 3\"\nassert solution(\"2 4\") == \"2 1 3\"\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"3 0 3\"\nassert solution(\"2 4\") == \"2 1 3\"\nassert solution(\"2 5\") == \"3 0 3\"\n\"\"\""
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1 1 0\"\nassert solution(\"3 5\") == \"1 1 2\"\nassert solution(\"2 4\") == \"1 1 3\"\nassert solution(\"2 2\") == \"1 0 3\"\nassert solution(\"4 6\") == \"0 1 1\"\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5') == '3 0 3'\nassert solution('2 4') == '2 1 3'\nassert solution('2 3') == '1 0 3'\nassert solution('2 1') == '2 1 3'\nassert solution('1 1') == '2 1 3'\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"3 0 3\"\nassert solution(\"2 4\") == \"2 1 3\"\nassert solution(\"3 4\") == \"1 0 3\"\n\"\"\"\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 of week\n''') == '52'\nassert solution('''30 of month\n''') == '11'\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 of week\") == 52\nassert solution(\"30 of month\") == 11\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 of week''') == '52'\nassert solution('''30 of month''') == '11'\n'''\n\nimport datetime"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 of week') == '52'\nassert solution('30 of month') == '11'\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 of week') == '52'\nassert solution('30 of month') == '11'\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 of week\") == \"52\"\nassert solution(\"30 of month\") == \"11\"\n\"\"\"\nfrom typing import Tuple\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 of week\") == 52\nassert solution(\"30 of month\") == 11\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 of week') == '52'\nassert solution('30 of month') == '11'\n\n\"\"\""
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 of week') == '52'\nassert solution('30 of month') == '11'\n\"\"\"\n\nweek = {'Monday': 0, 'Tuesday': 1, 'Wednesday': 2, 'Thursday': 3, 'Friday': 4, 'Saturday': 5, 'Sunday': 6}\nmonth = {'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6, 'July': 7, 'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12}\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 of week\") == \"52\"\nassert solution(\"30 of month\") == \"11\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 8 3 6\") == \"NO\"\n\"\"\"\n\nfrom collections import deque\n\nn, k = [int(_) for _ in stdin.split()]\n\nd = [int(_) for _ in stdin.split()]"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 5\\n2 4 8 3 6') == 'NO'\nassert solution('10 5\\n2 4 5 7 9') == 'YES'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2 3 4') == 'NO'\nassert solution('10 5\\n2 4 8 3 6') == 'YES'\nassert solution('10 5\\n2 4 5 7 9') == 'NO'\nassert solution('10 5\\n2 4 5 7 9') == 'NO'\n\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/59c90a00c2b13c31f5000085/train/python\n\nGiven a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.\n\nExamples:\n\ns = \"leetcode\"\nreturn 0.\n\ns = \"loveleetcode\"\nreturn 2.\n\nNote: You may assume the string contain only lowercase letters.\n\n\n\"\"\""
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 5 2 4 8 3 6\") == \"NO\"\n\"\"\""
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 5\\n2 4 8 3 6') == 'NO'\nassert solution('4 4\\n2 4 5 7 9') == 'YES'\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\") == \"NO\"\nassert solution(\"10 5 2 4 8 3 6\") == \"YES\"\nassert solution(\"10 10\") == \"YES\"\nassert solution(\"10 10 2 4 8 3 6\") == \"NO\"\nassert solution(\"10 10 2 4 5 7 9\") == \"NO\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'YES'\nassert solution('1') == 'YES'\nassert solution('1\\n') == 'NO'\nassert solution('0\\n') == 'YES'\nassert solution('0\\n1') == 'NO'\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 5\\n2 4 8 3 6') == 'NO'\nassert solution('10 5\\n2 4 8 3 7') == 'YES'\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 5 2 4 8 3 6') == 'NO'\nassert solution('10 5 2 4 8 3 6') == 'NO'\nassert solution('10 5 2 4 8 3 6') == 'NO'\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 5\n2 4 8 3 6''') == \"NO\"\nassert solution('''10 5\n2 4 5 7 9''') == \"YES\"\nassert solution('''10 5\n8 7 6 5 4''') == \"NO\"\nassert solution('''10 5\n1 5 9 2 6 7''') == \"NO\"\nassert solution('''10 5\n2 4 8 3 6''') == \"YES\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10 1 2\") == \"4\"\nassert solution(\"7 14 3 8\") == \"10\"\nassert solution(\"20 70 2 7\") == \"0\"\nassert solution(\"5 6 1 1\") == \"1\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1') == '4\\n10\\n0\\n-1'\nassert solution('4 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1') == '4\\n10\\n0\\n-1'\nassert solution('1 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1') == '-1'\nassert solution('2 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1') == '-1'\nassert solution('3 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1') == '-1'\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10 1 2\\n7 14 3 8\") == \"4\"\nassert solution(\"3 10 1 2\\n7 14 3 8\") == \"10\"\nassert solution(\"4 10 1 2\\n7 14 3 8\") == \"0\"\nassert solution(\"4 10 1 2\\n7 14 3 8\") == \"-1\"\n\"\"\""
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\\n\") == \"4\\n10\\n0\\n-1\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1') == '4\\n10\\n0\\n-1'\nassert solution('4 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\\n') == '4\\n10\\n0\\n-1'\nassert solution('4 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\\n') == '4\\n10\\n0\\n-1'\nassert solution('4 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\\n') == '4\\n10\\n0\\n-1'\n\nprint(solution('4 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\\n'))\n\n\"\"\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\") == '4\\n10\\n0\\n-1'\nassert solution(\"2 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\") == '-1'\nassert solution(\"2 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\") == '-1'\n\n------Notes-----\nhttps://codeforces.com/contest/1598/problem/A\n\n\"\"\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\") == \"4\\n10\\n0\\n-1\"\n\"\"\""
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '-1'\nassert solution('2 2 2 1') == '-1'\nassert solution('1 1 1 2') == '3'\nassert solution('1 1 2 2') == '3'\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 1 2\") == 4\nassert solution(\"7 14 3 8\") == 10\nassert solution(\"20 70 2 7\") == 0\nassert solution(\"5 6 1 1\") == -1\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 2\") == \"3\"\nassert solution(\"2 3 2 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"5 7 1 2\") == \"-1\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\"\nassert solution(\"1\\nadd\\nadd\\nadd\\nadd\\nadd\\nadd\\nadd\\nend\") == \"OVERFLOW!!!\"\nassert solution(\"0\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\\nend\\nend\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\\nend\\nend\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\"\n\"\"\"\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nadd\\nfor 1\\nend\\nadd\\nfor 1\\nend\\nadd\\nfor 1\\nend\\nend\\n\") == \"7\"\n\"\"\"\n\n\n\"\"\"\n\"\"\""
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'OVERFLOW!!!'\nassert solution('add\\nend') == 0\nassert solution('add\\nfor 5\\nend') == 0\nassert solution('add\\nfor 10\\nadd\\nend') == 0\nassert solution('for 5\\nadd\\nend') == 0\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\nadd\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\"\n\n\"\"\"\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\nfor 100\\nend\\nadd\\nadd\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"161\"\nassert solution(\"2\\nfor 100\\nend\\nadd\\nadd\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"0\"\nassert solution(\"3\\nfor 100\\nfor 100\\nend\\nadd\\nend\\nadd\\nend\\nend\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\"\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\"\n\"\"\""
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\\n\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\n\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\n\") == \"OVERFLOW!!!\"\n\"\"\""
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\"\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\"\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ee\") == 2\nassert solution(\"z\") == 0\nassert solution(\"0ay1\") == 2\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ee\") == 2\nassert solution(\"z\") == 0\nassert solution(\"0ay1\") == 2"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ee') == '2'\nassert solution('z') == '0'\nassert solution('0ay1') == '2'\n\"\"\"\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ee') == 2\nassert solution('z') == 0\nassert solution('0ay1') == 2\nassert solution('abcd') == 0\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ee\") == 2\nassert solution(\"z\") == 0\nassert solution(\"0ay1\") == 2\n\"\"\"\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ee') == 2\nassert solution('z') == 0\nassert solution('0ay1') == 2\n\"\"\""
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ee') == 2\nassert solution('z') == 0\nassert solution('0ay1') == 2\nassert solution('0a1') == 2\n\"\"\"\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ace27') == '0'\nassert solution('abcd3') == '0'\nassert solution('za5') == '2'\nassert solution('a1') == '2'\n\"\"\"\n\nimport sys\nimport re\nimport collections"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ee\") == 2\n\nassert solution(\"z\") == 0\n\nassert solution(\"0ay1\") == 2\n\"\"\"\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ee\") == 2\nassert solution(\"z\") == 0\nassert solution(\"0ay1\") == 2\nassert solution(\"0ay\") == 0\nassert solution(\"0a\") == 2\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n100 0\\n0 100\\n-100 0\\n0 -100') == '100'\nassert solution('7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3') == '-1'\nassert solution('5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1') == '2'\n\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n100 0\\n0 100\\n-100 0\\n0 -100\") == \"100\"\nassert solution(\"7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\") == \"2\"\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == \"2\"\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == -1\nassert solution('10 10\\n10 10') == 100\nassert solution('-1 0\\n-1 0') == -1\nassert solution('-1 -1\\n0 0') == 100\nassert solution('-1 -3\\n0 0') == 100\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\\n\") == \"2\"\nassert solution(\"3\\n0 0\\n2 0\\n-1 0\") == \"0\"\nassert solution(\"1\\n0 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == '2'\nassert solution(\"4\\n0 0\\n0 0\\n0 -1\\n-1 -1\") == '-1'\nassert solution(\"7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\") == '2'\n\"\"\"\n\nimport math\n\nn = int(input())\n\na, b = 0, 0\n\nfor _ in range(n):\n    x, y = map(int, input().split())\n    a += x\n    b += y"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('100 0\\n0 100\\n-100 0\\n0 -100') == '100'\nassert solution('7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3') == '-1'\nassert solution('5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1') == '2'\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n100 0\\n0 100\\n-100 0\\n0 -100\") == '100'\nassert solution(\"7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\") == '-1'\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == '2'\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == '2'\n\n\n\n-----Problem-----\n\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 $n$ \u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0435\u0437\u0436\u0430\u0442\u044c \u043d\u0430 \u0432\u044b\u0431\u043e\u0440 \u0434\u0440\u0443\u0433\u0438\u0445 \u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432, \u043d\u043e \u044d\u0442\u043e \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0447\u0435\u043d\u0438\u043a\u0438 \u043e\u0447\u0435\u043d\u044c \u043f\u043b\u043e\u0445\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0441\u0442\u0430\u043d\u0443\u0442\u0441\u044f \u043d\u0430 \u043c\u0435\u0441\u0442\u0435.\n\n\u0412 \u0448\u043a\u043e\u043b\u0435 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0435\u043d\u0438\u043a\u0430 \u0435\u0441\u0442\u044c \u0434\u0432\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438: \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0432\u0435\u0434\u0435\u0442 \u0447\u0442\u043e-\u0442\u043e \u0441\u0432\u043e\u0435 (\u0432\u0437\u044f\u0442\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0438\u043b\u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u043a \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0443\u0447\u0435\u043d\u0438\u043a\u0443), \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u0434\u0440\u0443\u0433\u043e\u0435 \u0434\u0435\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c.\n\n\u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0441\u0442\u0430\u043d\u0443\u0442\u0441\u044f \u043d\u0430 \u043c\u0435\u0441\u0442\u0435, \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0434\u0435\u043b\u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 n, \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u2013 \u043d\u043e\u043c\u0435\u0440 \u0443\u0447\u0435\u043d\u0438\u043a\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0432\u0435\u0434\u0435\u0442 \u0441\u0432\u043e\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u043c\u0435\u0441\u0442\u0435, \u043d\u043e\u043c\u0435\u0440 \u0443\u0447\u0435\u043d\u0438\u043a\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0432\u0435\u0434\u0435\u0442 \u0441\u0432\u043e\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u043c\u0435\u0441\u0442\u0435. \u0417\u0430\u0442\u0435\u043c \u0432 n \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0441\u0430\u043c\u0438 \u0434\u0435\u043b\u0430 \u2013 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u2013 \u043d\u043e\u043c\u0435\u0440\u0430 \u0434\u0435\u043b. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u0435\u043b \u043d\u0435\u0442 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (2 \u2264 n \u2264 1000) \u0438 n n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u2013 \u043d\u043e\u043c\u0435\u0440\u0430 \u0443\u0447\u0435\u043d"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n100 0\\n0 100\\n-100 0\\n0 -100\") == \"100\"\nassert solution(\"7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\") == \"-1\"\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == \"2\""
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n100 0\\n0 100\\n-100 0\\n0 -100\") == \"100\\n2\"\nassert solution(\"7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\") == \"2\\n-1\"\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == \"2\"\nassert solution(\"5\\n0 0\\n0 0\\n3 0\\n-2 0\\n-2 1\") == \"2\"\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n100 0\n0 100\n-100 0\n0 -100''') == '100'\n\nassert solution('''7\n0 2\n1 0\n-3 0\n0 -2\n-1 -1\n-1 -3\n-2 -3''') == '-1'\n\nassert solution('''5\n0 0\n0 -1\n3 0\n-2 0\n-2 1''') == '2'\n\nassert solution('''5\n0 0\n2 0\n0 -1\n-2 0\n-2 1''') == '2'\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nRRLL\\n\") == \"3 1\\n4 2\\n\"\nassert solution(\"6\\nLLRLLL\\n\") == \"1 4\\n2 5\\n6 3\\n\"\n\"\"\""
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\nLLRLLL') == '1 4\\n2 5\\n6 3\\n'\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nRRLL') == '3 1 4 2'\nassert solution('6\\nLLRLLL') == '1 4 6 2 5'\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nRRLL\") == \"3 1\\n4 2\"\nassert solution(\"6\\nLLRLLL\") == \"1 4\\n2 5\\n6 3\"\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\nLLRLLL\") == \"1 4\\n2 5\\n6 3\\n\"\nassert solution(\"4\\nRRLL\") == \"3 1\\n4 2\\n\"\n\"\"\""
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\nLLRLLL\") == \"1 4\\n2 5\\n6 3\"\nassert solution(\"4\\nRRLL\") == \"3 1\\n4 2\""
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\nLLRLLL') == '1 4\\n2 5\\n6 3'\nassert solution('4\\nRRLL') == '3 1\\n4 2'\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\nLLRLLL') == '1 4\\n2 5\\n6 3'\nassert solution('4\\nRRLL') == '3 1\\n4 2'\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\nLLRLLL') == '1 4\\n2 5\\n6 3\\n'\nassert solution('4\\nRRLL') == '3 1\\n4 2\\n'\nprint('PASSED')\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nRRLL\") == \"3 1\\n4 2\\n\"\nassert solution(\"6\\nLLRLLL\") == \"1 4\\n2 5\\n6 3\\n\"\n\n\"\"\""
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5') == '30'\nassert solution('2 3') == '25'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5') == '30'\nassert solution('2 3') == '25'\n\n\"\"\"\nimport math"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5') == '30'\nassert solution('2 3') == '25'\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 5') == '30'\nassert solution('2 3') == '25'\n\"\"\""
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5\\n') == '30'\n\n\"\"\"\nimport math\nm, b = [int(i) for i in stdin.split()]\nprint(int((m * b - m + b) / 2))\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5\") == \"30\"\nassert solution(\"2 3\") == \"25\"\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5\") == \"30\"\nassert solution(\"2 3\") == \"25\"\n\nimport unittest\n\nclass Tests(unittest.TestCase):\n    def test(self):\n        pass"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"25\"\nassert solution(\"1 5\") == \"30\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5\") == \"30\"\nassert solution(\"2 3\") == \"25\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 1 1 3') == '39'\n\"\"\"\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\nassert solution(\"6 1 1 1 1 3\") == \"85\"\nassert solution(\"1 1 1 1 1 3\") == \"3\"\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\n\"\"\"\n\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\ncache = {}\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 2 2 3') == '39'\nassert solution('6\\n1 1 1 1 1 3') == '85'\nassert solution('1\\n3') == '3'\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"4\\n4 2 2 3\"\n) == \"39\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\nassert solution(\"6 1 1 1 1 3\") == \"85\"\nassert solution(\"1 1 1 1 1 3\") == \"3\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\nassert solution(\"6 1 1 1 1 3\") == \"85\"\nassert solution(\"1 1 1 1 1 3\") == \"3\"\n\"\"\"\n\nimport math\nimport unittest\n\n\nclass Solution:\n    def number_of_covered_cells(self, n: int, t_1: int, t_2: int, t_3: int) -> int:\n        \"\"\"\n        \"\"\"\n        return math.floor(n * (2 ** n - 1) / 3 + t_1 * (2 ** (n - 1)) + t_2 * (2 ** (n - 1) - 1) + t_3 * (2 ** (n - 1)) - (2 ** (n - 1)))\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert Solution().number_of_covered_cells(4, 4, 2, 2) == 39\n        assert Solution().number_of_covered_cells(6, 1, 1, 1) == 85\n        "
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 2 3') == '39'\n\"\"\"\nimport math"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\nassert solution(\"6 1 1 1 1 3\") == \"85\"\nassert solution(\"1 1 1 1 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n4 2 2 3\") == \"39\"\n\"\"\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\nassert solution(\"JUROR\") == \"YES\"\nassert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"YES\") == \"YES\"\nassert solution(\"NO\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\nassert solution(\"JUROR\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('A') == 'YES'\nassert solution('N') == 'NO'\nassert solution('NA') == 'NO'\nassert solution('NAAM') == 'NO'\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"YES\"\nassert solution(\n    \"AABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"NO\"\nassert solution(\n    \"ABCDEFGHIJKLMNOPQRSTUVWXY\") == \"NO\"\n\"\"\"\n\n\"\"\"\nWrite a solution that will parse a string with uppercase letters of the English alphabet and determine whether it is a palindrome or not.\n\nThe input will consist of one line with a string of uppercase letters. The length of the string is between 1 and 10,000 characters, inclusive.\n\nNote that there will be no non-letter characters.\n\nInput\n\nOutput\n\nOne line with YES if the given string is a palindrome, or NO if it is not.\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('NEAT') == 'YES'\nassert solution('WORD') == 'NO'\nassert solution('CODER') == 'NO'\nassert solution('APRILFOOL') == 'NO'\nassert solution('AI') == 'YES'\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WORD\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"YES\"\nassert solution(\"AI\") == \"YES\"\nassert solution(\"JUROR\") == \"YES\"\nassert solution(\"CODER\") == \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n......\\n..SE..\\n......\\n......\\n...E..\\n333300012\") == '1'\nassert solution(\"6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021\") == '14'\n\"\"\"\n\nimport re\nimport math\n\n\nclass Maze:\n    def __init__(self, rows, columns, input_string):\n        self.rows = rows\n        self.columns = columns\n        self.maze = [input_string[i * columns: i * columns + columns] for i in range(rows)]\n        self.start_position = self.find_start_position()\n        self.exit_position = self.find_exit_position()\n        self.moves = self.get_moves()\n\n    def get_moves(self):\n        moves = set()\n        for move in self.maze:\n            moves |= set(move)\n        moves.discard('S')\n        return moves\n\n    def find_start_position(self):\n        start_position = None\n        for i, row in enumerate(self.maze):\n            if 'S' in row:\n                start_position = (i, row.index('S'))\n        return start_position\n\n    def find_exit_position(self):\n        exit_position = None\n        for i, row in enumerate(self.maze):\n            if 'E' in row:\n                exit_position = (i, row.index('E'))\n        return exit_position\n\n    def is_valid_move(self, move):\n        return move in self.moves\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012') == '1'\nassert solution('6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021') == '14'\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('....#') == 2\nassert solution('......') == 1\nassert solution('...S.#..') == 0\nassert solution('...#..#..#...S.#..#..#...') == 1\nassert solution('.....#..#..#...S.#..#..#...') == 0\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == 0\nassert solution(\"2 3\") == 2"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012\") == 1\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import Dict, List, Tuple, Union\n\nfrom graph import Graph\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012\") == '1'\nassert solution(\"6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021\") == '14'\n\n\"\"\"\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012') == '1'\nassert solution('6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021') == '14'\n\"\"\"\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012\") == 1\n\n\"\"\""
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".S.....\") == \"D\"\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import product"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012') == '1'\nassert solution('6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021') == '14'\nassert solution('5 3\\n...\\n.S\\n###\\n.E') == '0'\nassert solution('4 2\\n...\\n.S\\n#S\\n.E') == '2'\n\"\"\"\n\nimport numpy as np\nimport string"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 1\\n1 0\\n1 1\\n2 0') == \"1\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1\\n1 0\\n1 1\\n2 0\") == \"1\"\n\"\"\"\n\nfrom math import atan2, hypot, pi"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1\\n1 0\\n1 1\\n2 0') == '1'\n\"\"\"\nimport math"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1\\n1 0\\n1 1\\n2 0\") == 1\n\"\"\"\n\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1\\n1 0\\n1 1\\n2 0\\n') == '1'\n\"\"\"\n\nimport itertools\nfrom math import hypot\nfrom collections import Counter\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 1\\n1 0\\n1 1\\n2 0') == '1'\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 1\\n1 0\\n1 1\\n2 0\\n3 3\\n4 4\\n0\\n1\\n1\\n1\\n2\\n2\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('4\\n0 1\\n1 0\\n1 1\\n2 0\\n') == '1'\nassert solution('4\\n0 1\\n1 0\\n1 1\\n2 0\\n') == '2'\nassert solution('4\\n0 1\\n1 0\\n1 1\\n2 0\\n') == '0'\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1\\n1 0\\n1 1\\n2 0\") == \"1\"\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\nassert solution(test_stdin_2) == test_stdout_2\n\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('LLRL1RL1') == '1010000011'\nassert solution('L0L0LLRR9') == '1100000010'\nassert solution('LL0LLRR0L') == '101111000'\nassert solution('LR0L0LLR0') == '1101111010'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"LLRL1RL1\") == \"1010000011\"\nassert solution(\"L0L0LLRR9\") == \"1100000010\"\n\nprint(solution(\"LLRL1RL1\"))\nprint(solution(\"L0L0LLRR9\"))"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('LLLRLLRL') == '1010111111'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"LLRL1RL1\") == \"1010000011\"\nassert solution(\"L0L0LLRR9\") == \"1100000010\"\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"LLRL1RL1\") == \"1010000011\"\nassert solution(\"L0L0LLRR9\") == \"1100000010\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('LLRL1RL1') == '1010000011'\nassert solution('L0L0LLRR9') == '1100000010'\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('LLRL1RL1') == '1010000011'\nassert solution('L0L0LLRR9') == '1100000010'\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('LLRL1RL1') == '1010000011'\nassert solution('L0L0LLRR9') == '1100000010'\n\n\"\"\"\n\nfrom typing import Dict, List, Set, Tuple\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"LLRL1RL1\") == \"1010000011\"\nassert solution(\"L0L0LLRR9\") == \"1100000010\"\n\"\"\""
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"LLRL1RL1\") == \"1010000011\"\nassert solution(\"L0L0LLRR9\") == \"1100000010\"\n\"\"\""
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == 1\nassert solution(\"((()))\") == 4\nassert solution(\"(()()\") == 2\n\nassert solution(\"(((()))\") == 4\nassert solution(\"((()))()\") == 4"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(())\") == 1\nassert solution(\"(()()\") == 2\nassert solution(\"(()(((\") == 3\nassert solution(\"(((((\") == 9\n\nassert solution(\"(()((((\") == 9"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '9'\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 1\nassert solution('2') == 3\nassert solution('3') == 9\n\"\"\"\n\nfrom typing import List\nimport sys\nsys.path.append(\"..\")\nfrom utils import CommonUtil\n\nMOD = 10 ** 9 + 7\n\n\nclass Solution(object):\n    def solution(self, n):\n        pass\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '9'\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '9'\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\")(((\") == 1\nassert solution(\"(((((\") == 3\nassert solution(\"(\") == 0\nassert solution(\"()()\") == 2\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(()())\") == 4\nassert solution(\"(()())((()()))\") == 2\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"9\"\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"9\"\n\"\"\"\n\nimport math\n\nn = int(input())\nMOD = 1000000000 + 7"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == 'Black'\nassert solution('5') == 'White'\nassert solution('2') == 'Black'\n\n\"\"\""
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 5\") == \"Black\"\nassert solution(\"4\\n4 3\") == \"White\"\nassert solution(\"4\\n2 2\") == \"Black\"\nassert solution(\"5\\n3 5\") == \"White\"\nassert solution(\"5\\n3 4\") == \"Black\""
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"White\"\nassert solution(\"5 3\") == \"Black\"\nassert solution(\"2 2\") == \"Black\"\n\"\"\""
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n2 3\"\n) == \"White\"\nassert solution(\n    \"5\\n3 5\"\n) == \"Black\"\nassert solution(\n    \"2\\n2 2\"\n) == \"Black\"\n\n\"\"\"\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3\") == \"White\"\nassert solution(\"5\\n3 5\") == \"Black\"\nassert solution(\"2\\n2 2\") == \"Black\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2') == 'Black'\nassert solution('4 4') == 'White'\nassert solution('4 3') == 'White'\n\"\"\"\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3\") == \"White\"\nassert solution(\"5\\n3 5\") == \"Black\"\nassert solution(\"2\\n2 2\") == \"Black\"\nassert solution(\"2\\n2 3\") == \"White\"\n\"\"\"\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"White\"\nassert solution(\"5 3\") == \"Black\"\nassert solution(\"2 2\") == \"Black\"\nassert solution(\"1 1\") == \"White\""
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 5\\n2 2\") == 'Black'\nassert solution(\"5\\n4 4\\n2 2\") == 'White'\nassert solution(\"1\\n1\\n1 1\") == 'White'\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3') == 'White'\nassert solution('5\\n3 5') == 'Black'\nassert solution('2\\n2 2') == 'Black'\n\nassert solution('4\\n2 3') == 'White'\nassert solution('5\\n3 5') == 'Black'\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n4 3\n-5 20 -3 0\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n4 2\n-5 20 -3 0\n\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"\n10 6\n2 -5 1 3 0 0 -4 -3 1 0\n\"\"\"\n) == \"3\"\n\n\n\"\"\"\n[\n[-5, 20, -3, 0],\n[2, -5, 1, 3],\n[0, 0, 0, 0],\n[-4, -3, 1, 0]\n]\n\"\"\"\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == \"2\"\nassert solution(\"4 2\\n-5 20 -3 0\") == \"4\"\nassert solution(\"10 6\\n2 -5 1 3 0 0 -4 -3 1 0\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == 2\nassert solution(\"4 2\\n-5 20 -3 0\") == 4\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 -5 1 3 0 0 -4 -3 1 0\") == 3\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == '2'\nassert solution(\"4 2\\n-5 20 -3 0\") == '4'\nassert solution(\"10 6\\n2 -5 1 3 0 0 -4 -3 1 0\") == '3'\nassert solution(\"10 6\\n-5 20 -3 0\") == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3\n-5 20 -3 0''') == '2'\n\nassert solution('''4 2\n-5 20 -3 0''') == '4'\n\nassert solution('''10 6\n2 -5 1 3 0 0 -4 -3 1 0''') == '3'\n\nassert solution('''5 3\n-1 -1 -1 0 0''') == '-1'\n\nassert solution('''1 3\n1 3''') == '-1'"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n-5 20 -3 0') == '2'\nassert solution('4 2\\n-5 20 -3 0') == '4'\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4 3\n-5 20 -3 0\"\"\") == 2\nassert solution(\"\"\"4 2\n-5 20 -3 0\"\"\") == 4\nassert solution(\"\"\"10 6\n2 -5 1 3 0 0 -4 -3 1 0\"\"\") == 3\nassert solution(\"\"\"4 2\n-5 20 -3 0\"\"\") == -1\n\n\"\"\"\n100%\nFirst:\n    Input: string\n    Output: string\n    \n    Constraints: 1 \u2264 n \u2264 10^5, 0 \u2264 k \u2264 n\n        \n    Example:\n    \n    for _ in range(int(input())):\n        n, k = map(int, input().split())\n        arr = list(map(int, input().split()))\n        arr = [-1] + arr + [-1]\n        d = {0: 0}\n        i = 0\n        prev = 0\n        for j in range(1, len(arr)):\n            if d.get(arr[j], -1) == -1:\n                d[arr[j]] = i\n                i += 1\n            prev = arr[j]\n        \n        k = k % i\n        for j in range(len(arr)-2, 1, -1):\n            if d.get(arr[j], -1)!= -1:\n                k = (k + j - d[arr[j]]) % i\n                d[arr[j]] = j\n        \n        k = (k + 2) % i\n        print(k)\n        \n        \nSecond:\n    Input: string\n    Output: string\n    \n    Constraints: 1 \u2264 n \u2264 10^5, 0 \u2264 k \u2264 n\n        \n    Example:\n    \n    for _ in range(int(input())):\n        n, k = map(int, input().split())\n        arr = list(map(int, input().split()))\n        arr = [-1] + arr + [-1]\n        \n        d = {0: 0}\n        i = 0\n        for j in range(1, len(arr)-1):\n            if d.get(arr[j], -1) == -1:\n                d[arr[j]] = i\n                i += 1\n            prev = arr[j]\n        \n        if i == n:\n            k = k % i\n            for j in range(len(arr)-1, 1, -1):\n                if d.get(arr[j], -1)!= -1:\n                    k = (k + j - d[arr[j]]) % i\n                    d[arr[j]] = j\n        else:\n            k = k % (i-1)\n            for j in range(len(arr)-2, 1, -1):\n                if d.get(arr[j], -1)!= -1:\n                    k = (k + j - d[arr[j]]) % (i-1)\n                    d[arr[j]] = j\n        \n        k = (k + 2) % (i-1)\n        print(k)\n\"\"\"\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == 2\nassert solution(\"4 2\\n-5 20 -3 0\") == 4\nassert solution(\"10 6\\n2 -5 1 3 0 0 -4 -3 1 0\") == 3\nassert solution(\"4 3\\n0 0 0\") == 0\nassert solution(\"4 2\\n0 0 0\") == -1\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == '2'\nassert solution(\"4 2\\n-5 20 -3 0\") == '4'\nassert solution(\"10 6\\n2 -5 1 3 0 0 -4 -3 1 0\") == '3'\n\"\"\"\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"3 9\") == \"1\"\nassert solution(\"12345678 87654321\") == \"2147483648\"\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 3\n2 1 1\n''') == '2'\n\nassert solution('''12345678 87654321\n43043751 1000000000 53798715\n''') == '2147483648'\n\nassert solution('''12 2\n0 1 0\n''') == '0'\n\nassert solution('''0 1 0\n''') == '0'\n\nassert solution('''5 1\n5 1\n''') == '-1'"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n2 1 1') == '2'\nassert solution('3 9\\n1 1 3') == '1'\nassert solution('12345678 87654321\\n43043751 1000000000 53798715') == '2147483648'\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"2\"\n\"\"\"\n\nfrom collections import deque\n\n_ = input()\nyc_count, bc_count = map(int, _.split())\n_ = input()\ny_balls, g_balls, b_balls = map(int, _.split())\n\nyc_q = deque([yc_count])\nbc_q = deque([bc_count])\nresult = 0\n\nwhile y_balls + g_balls + b_balls > 0:\n    yc_q, bc_q = deque(), deque()\n\n    yc_count = yc_q.popleft() if len(yc_q) > 0 else 0\n    bc_count = bc_q.popleft() if len(bc_q) > 0 else 0\n\n    result += 1\n    yc_q.append(yc_count)\n    bc_q.append(bc_count)\n    if y_balls > 0:\n        yc_count -= 2\n        y_balls -= 1\n        yc_q.append(yc_count)\n    if g_balls > 0:\n        yc_count -= 1\n        g_balls -= 1\n        yc_q.append(yc_count)\n    if b_balls > 0:\n        bc_count -= 3\n        b_balls -= 1\n        bc_q.append(bc_count)\n\nprint(result)\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n2 1 1\") == \"2\"\nassert solution(\"3 9\\n1 1 3\") == \"1\"\nassert solution(\"12345678 87654321\\n43043751 1000000000 53798715\") == \"2147483648\"\n\"\"\""
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n2 1 1') == '2'\nassert solution('12345678 87654321\\n43043751 1000000000 53798715') == '2147483648'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n2 1 1') == 2\n'''\nimport sys\nfrom math import floor\n\nA, B = map(int, sys.stdin.readline().split())\nx, y, z = map(int, sys.stdin.readline().split())\n\nx_min = x - 2 * y - 3 * z\nx_max = x - 2 * y - 2 * z"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n2 1 1') == '2'\nassert solution('3 9\\n1 1 3') == '1'\nassert solution('12345678 87654321\\n43043751 1000000000 53798715') == '2147483648'\n\"\"\"\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n2 1 1\\n') == '2'\nassert solution('3 9\\n1 1 3\\n') == '1'\nassert solution('12345678 87654321\\n43043751 1000000000 53798715\\n') == '2147483648'"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n2 1 1') == 2\n\n-----\n\u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442, \u043d\u043e \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u043f\u043e\u043b\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430\u0434\u043e \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043b\u0438 \u0447\u0442\u043e \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u0448\u0438\u0431\u043a\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043c \u043d\u0435 \u043f\u0440\u0438\u0448\u043b\u043e. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0431\u044b\u043b\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u0435 \u043a\u0430\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0442\u0435\u043a\u0441\u0442, \u0430 \u0432\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0431\u044b\u043b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u00aba b c\u00bb, \u043a\u0430\u043a \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043e\u043d \u0431\u044b\u043b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u00aba b\u00bb.\n\n\u041f\u0435\u0440\u0432\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u043f\u043e \u0438\u0434\u0435\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u0442\u0435\u0441\u0442\u0435, \u043d\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430\u0434\u043e \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u042d\u0442\u043e \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u043e \u0432\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u00abpython3 advent_of_code_2020.py < \u0432\u0430\u0448 \u0432\u044b\u0431\u043e\u0440 >`` \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043b\u0438, \u0447\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0443:\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\") == \"5.0\"\n\"\"\"\n\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'5 5 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\\n') == '5.0000000000'\n\"\"\"\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\\n') == '5.0000000000'"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 1\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\") == '5.0000000000'\n\"\"\""
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\") == \"5\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\n\n\nclass Point:\n    def __init__(self, x: float, y: float):\n        self.x = x\n        self.y = y\n\n    def __repr__(self) -> str:\n        return f\"Point({self.x}, {self.y})\"\n\n    def __eq__(self, other: \"Point\") -> bool:\n        if not isinstance(other, Point):\n            raise NotImplementedError\n\n        return self.x == other.x and self.y == other.y\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\") == \"5.0\"\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\") == \"5.0000000000\"\nassert solution(\"1 2\\n3 1\\n4 3\\n3 4\\n1 4\") == \"5.0000000000\"\n\"\"\"\n\nfrom math import *\n\nn, w, v, u = list(map(int, input().split()))\n\npoints = []\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    points.append([x, y])\n\nx, y = points[0][0], points[0][1]\npoints.append([x, y])\npoints.append([x, 0])\n\npoints.sort()\npoints.append([points[0][0], w])\npoints.append([points[0][0], 0])\n\npoints.sort()\n\ns = 0\nfor i in range(n+1):\n    s += points[i][1]\n\np = []\n\nfor i in range(n):\n    p.append([(points[i][0] + points[i+1][0])/2, (points[i][1] + points[i+1][1])/2])\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\") == \"5.0\"\nassert solution(\"7 10 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n5 5\\n6 7\\n7 8\\n8 9\\n9 10\\n3 9\\n5 7\\n7 1\\n6 5\\n5 6\\n1 6\\n1 3\") == \"11.5\"\n\"\"\"\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\\n') == '5.0'\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == '1 2'\nassert solution('3\\n1 1 1') == '-1'\nassert solution('2\\n1 1') == '-1'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4') == '1 2'\nassert solution('3\\n1 1 1') == '-1'\nassert solution('5\\n1 3 2 5 3') == '1 2'\n\"\"\""
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1\\n\") == \"1 2\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1 1') == '-1'\nassert solution('3\\n1 1 1') == '-1'\nassert solution('2\\n1 1') == '1 2'\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1\\n') == '1 2'\nassert solution('5\\n1 1 1 1 1\\n') == '-1'\nassert solution('3\\n1 1 1\\n') == '-1'\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1 2\"\nassert solution(\"3\\n1 1 1\") == \"-1\"\nassert solution(\"3\\n1 1 1\") == \"-1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1\") == \"-1\"\nassert solution(\"2\\n1 2\") == \"-1\"\nassert solution(\"4\\n1 2 3 4\") == \"1 2\"\nassert solution(\"3\\n1 1 1\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"-1\"\nassert solution(\"1 2\") == \"-1\"\nassert solution(\"1 1 1\") == \"1 2\"\nassert solution(\"1 2 3 4\") == \"-1\"\nassert solution(\"1 2 3 2\") == \"1 3\"\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 1\\n') == '-1'\nassert solution('2\\n1 2\\n') == '-1'\nassert solution('3\\n1 1 1\\n') == '-1'\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\nassert solution('1\\n1') == '-1'\nassert solution('1\\n2') == '-1'\nassert solution('2\\n1 2') == '1 1'\nassert solution('3\\n1 1 1') == '-1'\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3') == '20 15'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\") == \"20 15\"\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3') == '20 15'\nassert solution('8 2 4') == '35 32'\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 3') == '20 15'\nassert solution('8 2 4') == '35 32'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\") == \"20 15\"\nassert solution(\"8 2 4\") == \"35 32\"\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\") == \"20 15\"\n\nassert solution(\"8 2 4\") == \"35 32\"\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\") == \"20 15\"\nassert solution(\"8 2 4\") == \"35 32\"\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 2 3''') == '20 15'\n\n\"\"\""
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3\\n') == '20 15'\nassert solution('8 2 4\\n') == '35 32'\n\nfrom sys import stdin\n\nn, b, p = [int(x) for x in stdin.readline().split()]\nprint(b * n + p, p)\n\n'''\n\nn, b, p = [int(x) for x in input().split()]\nprint(b * n + p, p)"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\") == \"20 15\"\nassert solution(\"8 2 4\") == \"35 32\"\n\n\"\"\"\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 0') == '0 0 1 1'\nassert solution('3 2') == '2 3'\nassert solution('2 2') == '-1'\n\"\"\""
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0\") == \"0 0 1 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 0\\n') == '0 0 1 1'\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 0') == '0 0 1 1'\nassert solution('4 2') == '-1'\nassert solution('1 1') == '-1'\nassert solution('3 1') == '1 1 1 1'\n\nimport math"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 0') == '0 0 1 1'\n\"\"\""
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0\\n1 0\") == \"0 0 1 1\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solve(self, M: int, K: int) -> str:\n        \"\"\"Finds a sequence a that satisfies the conditions given by the problem statement.\"\"\"\n        # Finds the values of the 2^{M + 1} elements.\n        # Values are 1 if there is an odd number of the corresponding binary representation\n        # has 1, and 0 if the number of such numbers is even.\n        # Formulae for 1, 2,..., 2^M - 1:\n        # - (a_1 \\ xor \\ a_{1 + 1}) = 1\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 1}) = 1\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1)}) = 1\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 1}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 1)}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2)}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 1}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3)}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 1}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 2^(M - 4)}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 2^(M - 4) + 1}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 2^(M - 4) + 2^(M - 5)}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 2^(M - 4) + 2^(M - 5) + 1}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 2^(M - 4) + 2^(M - 5) + 2^(M - 6)}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 2^(M - 4) + 2^(M - 5) + 2^(M - 6) + 1}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 2^(M - 4) + 2^(M - 5) + 2^(M - 6) + 2^(M - 7)}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 2^(M - 4) + 2^(M - 5) + 2^(M - 6) + 2^(M - 7) + 1}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 2^(M - 4) + 2^(M - 5) + 2^(M - 6) + 2^(M - 7) + 2^(M - 8)}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 2^(M - 4) + 2^(M - 5) + 2^(M - 6) + 2^(M - 7) + 2^(M - 8) + 1}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 2^(M - 4) + 2^(M - 5) + 2^(M - 6) + 2^(M - 7) + 2^(M - 8) + 2^(M - 9)}) = 1\n        # -...\n        # - a_1 \\ xor \\ (a_2 \\ xor \\ a_{2 + 2^(M - 1) + 2^(M - 2) + 2^(M - 3) + 2^(M - 4) + 2^(M - 5) + 2^(M - 6"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"0 0 1 1\"\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0\") == \"0 0 1 1\"\n\"\"\"\n\n\"\"\"\nYou are given two strings s and t.\nString s is said to be a child of string t if it can be obtained from t by deleting any number of characters from it and appending any number of characters to it. For example, \"abc\" is a child of \"abdbec\" because we can obtain \"abc\" from \"abdbec\" by deleting \"d\", deleting \"d\" and appending \"c\".\nReturn true if string s is a child of t, and false if it is not.\n\nExample\n\nFor s = \"abc\" and t = \"abdbec\", the output should be\nisChildOf(s, t) = true.\n\nWe can obtain s from t by deleting any number of characters and appending any number of characters. For example,\nwe can obtain s = \"abc\" from t = \"abdbec\" by deleting \"d\" and appending \"c\".\nFor s = \"adef\" and t = \"abdbec\", the output should be\nisChildOf(s, t) = false.\n\nThe first string s cannot be obtained from the second string t.\n\"\"\""
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0\") == '0 0 1 1'\n\"\"\""
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0\") == \"0 0 1 1\"\n\n-----Explanation-----\nIn this case, it is necessary to print 0,0,1,1. Since 0,0 is the only sequence whose 1 occurs with an odd count, and there are two pairs (i, j) (i < j) whose a_i \\ xor \\ a_j = 0 (and they are (1,2) and (3,4), then the answer is 0,0,1,1.\n\n\"\"\"\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1\\n1\\n2') == 'YES'\nassert solution('2\\n1\\n2') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n1\\n2\\n') == \"YES\"\nassert solution('2\\n1\\n2\\n') == \"NO\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n2\\n3') == 'YES'\nassert solution('2\\n1\\n2') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1\\n1\\n2\\n') == 'YES'\nassert solution('2\\n1\\n2\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1\n1\n2\n''') == 'YES'\nassert solution('''2\n1\n2\n''') == 'NO'\nassert solution('''2\n1\n2\n''') == 'NO'\n\nassert solution('''5\n1\n2\n2\n3\n3\n''') == 'YES'\nassert solution('''4\n2\n2\n2\n3\n''') == 'NO'"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1\\n2\") == \"NO\"\nassert solution(\"3\\n1\\n1\\n3\") == \"YES\"\nassert solution(\"3\\n1\\n2\\n3\") == \"NO\"\nassert solution(\"3\\n2\\n1\\n3\") == \"NO\"\nassert solution(\"3\\n2\\n2\\n3\") == \"YES\"\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n1\\n2\\n\") == \"YES\"\nassert solution(\"2\\n1\\n2\\n\") == \"NO\"\nassert solution(\"1\\n1\\n2\\n\") == \"YES\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1\\n2\\n\") == \"YES\"\nassert solution(\"2\\n1\\n2\\n\") == \"NO\"\nassert solution(\"2\\n1\\n1\\n\") == \"NO\"\nassert solution(\"1\\n1\\n2\\n\") == \"YES\"\nassert solution(\"1\\n1\\n2\\n\") == \"NO\"\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1\\n2\") == 'NO'\nassert solution(\"3\\n1\\n2\\n3\") == 'YES'\nassert solution(\"3\\n1\\n3\\n3\") == 'NO'\nassert solution(\"3\\n2\\n1\\n3\") == 'YES'\nassert solution(\"3\\n3\\n1\\n3\") == 'YES'\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\\n1\\n2\") == \"YES\"\nassert solution(\"2\\n1\\n2\") == \"NO\"\n\"\"\"\n\nimport sys\n\ntry:\n    while True:\n        n = int(sys.stdin.readline().rstrip())\n        log = []\n        for _ in range(n):\n            log.append(int(sys.stdin.readline().rstrip()))\n        if len(set(log))!= 3 or 1 not in set(log) or 2 not in set(log) or 3 not in set(log):\n            print(\"NO\")\n        else:\n            print(\"YES\")\nexcept:\n    pass\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 6 5 6\") == \"0\"\nassert solution(\"1 1 1 4 4\") == \"3\"\nassert solution(\"2 0 0 0 4\") == \"1\"\nassert solution(\"2 0 0 2 4\") == \"2\"\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 0 0 0 4') == '1'\nassert solution('1 1 1 4 4') == '3'\nassert solution('4 5 6 5 6') == '0'\nassert solution('1 1 1 1 1') == '0'\nassert solution('1 1 1 2 2') == '1'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 6 5 6\") == \"0\"\nassert solution(\"1 1 1 4 4\") == \"3\"\nassert solution(\"2 0 0 0 4\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0 0 0 4\") == \"1\"\nassert solution(\"1 1 1 4 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 0 0 0 4') == '1'\n\nassert solution('1 1 1 4 4') == '3'\n\nassert solution('4 5 6 5 6') == '0'\n\n\"\"\""
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0 0 0 4\") == \"1\"\nassert solution(\"1 1 1 4 4\") == \"3\"\nassert solution(\"4 5 6 5 6\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 0 0 0 4') == '1'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 4 4\") == \"3\"\nassert solution(\"2 0 0 0 4\") == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 0 0 0 4\") == \"1\"\nassert solution(\"1 1 1 4 4\") == \"3\"\nassert solution(\"4 5 6 5 6\") == \"0\"\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0 0 0 4\") == \"1\"\n\"\"\"\n\n\n\nfrom collections import deque\nimport math"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1\n''') == '1'\n\nassert solution('''\n3\n1 3 2\n''') == '-1'\n\nassert solution('''\n3\n1 2 3\n''') == '0'\n\nassert solution('''\n4\n4 3 2 1\n''') == '2'\n\nassert solution('''\n5\n1 5 2 3 4\n''') == '4'"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) == 1\nassert solution(3) == -1\n\"\"\"\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1 2\") == \"1\"\nassert solution(\"1 3 2\") == \"1\"\n\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 1 2\") == \"1\"\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 1 2') == '-1'\nassert solution('2 1') == '1'\nassert solution('3 1 2') == '-1'\nassert solution('2 1') == '1'\n\n'''\n\nimport math"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution(\"3 2 1\") == \"1\"\nassert solution(\"2 3 1\") == \"1\"\nassert solution(\"3 3 1\") == \"1\"\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 1 2') == '0'\nassert solution('2 1 2') == '-1'\nassert solution('3 1 3') == '-1'\nassert solution('5 1 2 3 1') == '5'\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2 1\") == \"1\"\nassert solution(\"1 3 2\") == \"0\"\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution(\"1 3 2\") == \"1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\narr = [int(x) for x in sys.stdin.readline().split()]\n\nmin_swap = 0\n\nfor i in range(n):\n    for j in range(n - 1):\n        if arr[j] > arr[j + 1]:\n            arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            min_swap += 1"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == '1'\nassert solution(\"3 1 2\") == '-1'\nassert solution(\"1 2\") == '0'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1 2\") == \"2\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 2 1\") == \"0\"\nassert solution(\"1 1 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 9 1 3 18 1 4\") == \"2\"\n\"\"\"\n\nimport sys\nimport bisect\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n7\\n2 9 1 3 18 1 4') == '2\\n0'\nassert solution('1\\n8\\n5') == '1\\n0'\nassert solution('1\\n7\\n2 9 1 3 18 1 4') == '2\\n0'\nassert solution('2\\n7\\n2 9 1 3 18 1 4') == '2\\n0'\nassert solution('2\\n7\\n2 9 1 3 18 1 4') == '2\\n0'\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_0) == '2'\nassert solution(test_1) == '1'\n\"\"\""
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5''') == '2 1 0'\nassert solution('''1\n8\n1''') == '0'\nassert solution('''2\n1 1\n1''') == '0'\nassert solution('''3\n5 2\n2 1 1''') == '0'\nassert solution('''4\n1 1\n1\n1''') == '0'\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 11\\n2 9 1 3 18 1 4\\n4 35\\n11 9 10 7\\n1 8') == '2\\n1\\n0'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 11\") == \"2\"\nassert solution(\"2 9 1 3 18 1 4\") == \"1\"\nassert solution(\"4 35\") == \"0\"\nassert solution(\"11 9 10 7\") == \"0\"\nassert solution(\"1 8\") == \"0\"\n\"\"\"\n\nimport sys\nimport collections\n\nDEBUG = False\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\n7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5\n\"\"\") == '2'\n\nassert solution(\n\"\"\"\n4\n3 10\n2 9 1 3\n1 1\n2\n5\n\"\"\") == '1'\n\nassert solution(\n\"\"\"\n4\n4 10\n1 1 1 1\n1\n2\n5\n\"\"\") == '0'\n\nassert solution(\n\"\"\"\n4\n3 10\n2 9 1 3\n1 1\n2\n5\n\"\"\") == '1'\n\nassert solution(\n\"\"\"\n4\n3 10\n2 9 1 3\n1 1\n2\n5\n\"\"\") == '1'"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 11\\n2 9 1 3 18 1 4\\n4 35\") == \"2\"\nassert solution(\"7 11\\n2 9 1 3 18 1 4\\n4 35\") == \"1\"\nassert solution(\"7 11\\n2 9 1 3 18 1 4\\n4 35\") == \"0\"\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    n, s = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    smax = 0\n    s1 = 0\n    s2 = 0\n    for i in range(n):\n        if i == 0:\n            s1 += a[i]\n            continue\n        elif i == 1:\n            s2 += a[i]\n            if s1 + a[i] <= s:\n                s1 += a[i]\n            continue\n        else:\n            if s1 + a[i] <= s and s2 + a[i] <= s:\n                s1 += a[i]\n                s2 += a[i]\n            elif s1 + a[i] <= s:\n                s1 += a[i]\n            elif s2 + a[i] <= s:\n                s2 += a[i]\n            else:\n                smax += 1\n                s1 = 0\n                s2 = 0\n                s1 += a[i]\n                s2 += a[i]\n\n    print(smax)\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 11\") == \"2\"\nassert solution(\"7 11\") == \"2\"\nassert solution(\"7 11\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0'\nassert solution('a b c\\n1 2 3') == '0'\nassert solution('a\\n1') == '0'\nassert solution('a\\n1\\n2') == '1'\nassert solution('1\\n2') == '0'\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 2\n\"\"\""
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == '2'\nassert solution(\"5\\n\") == '2'\nassert solution(\"10\\n\") == '4'\nassert solution(\"55\\n\") == '10'\nassert solution(\"56\\n\") == '1'\n\"\"\"\nimport math\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '1'\nassert solution('10') == '4'\nassert solution('55') == '10'\n\nassert solution('56') == '1'\nassert solution('55') == '10'"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"4\"\nassert solution(\"55\") == \"10\"\nassert solution(\"56\") == \"1\""
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"4\"\nassert solution(\"55\") == \"10\"\nassert solution(\"56\") == \"1\"\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '2'\nassert solution('10') == '4'\nassert solution('55') == '10'\nassert solution('56') == '1'\n\"\"\""
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '2'\nassert solution('10') == '4'\nassert solution('55') == '10'\nassert solution('56') == '1'\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '2'\nassert solution('10') == '4'\nassert solution('55') == '10'\nassert solution('56') == '1'\n\"\"\"\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\n\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u00ab\u0412\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u043e\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435\u00bb. \u041e\u043d\u0430 \u0434\u0430\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u043e\u043b\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0438 \u0434\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u043e\u0439\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c.\n\n\u041f\u0430\u0440\u043e\u043b\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0446\u0438\u0444\u0440, \u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u043b\u043e\u0432\u0435 \u043e\u043d \u043e\u0442\u0434\u0435\u043b\u0435\u043d \u043e\u0434\u043d\u0438\u043c \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u043f\u043e\u0434\u0440\u044f\u0434. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0430\u0440\u043e\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0433\u043e\u0434\u0430\u0445. \u0412\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u044b\u0439 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u043f\u043e \u0442\u0440\u0435\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c:\n\n\u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u0438\u0437 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432;\n\u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0438 \u0431\u043e\u043b\u0435\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432;\n\u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0446\u0438\u0444\u0440\u044b;\n\u043f\u0430\u0440\u043e\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u043e\u0433\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430.\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u0430\u0440\u043e\u043b\u044c, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0432\u044b\u0434\u0430\u0435\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0433\u043e\u0434\u0430\u0445. \u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u2014 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 200 \u043b\u0435\u0442 \u0438 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u0442\u0430\u0440\u044b\u0439 \u0438\u043b\u0438 \u043d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0442\u0430\u043a\u043e\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u00ab3aA456c1#\u00bb:\n\u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: 18 \u043b\u0435\u0442\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u0435\u0449\u0435 \u0440\u0430\u0437: 3aA456c1#\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u00ab1aA456c1#\u00bb:\n\u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: 18 \u043b\u0435\u0442\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u0435\u0449\u0435 \u0440\u0430\u0437: 1aA456c1#\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u00ab1aA456c1#\u00bb:\n\u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: 18 \u043b\u0435\u0442\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u0435\u0449\u0435 \u0440\u0430\u0437: 1aA456c1#\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u00ab1aA456c1#\u00bb:\n\u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: 18 \u043b\u0435\u0442\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u0435\u0449\u0435 \u0440\u0430\u0437: 2aA456c1#\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u0435\u0449\u0435 \u0440\u0430\u0437: 2aA456c1#\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u00ab2aA456c1#\u00bb:\n\u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: 18 \u043b\u0435\u0442\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u0435\u0449\u0435 \u0440\u0430\u0437: 2aA456c1#\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u00ab1aA456c1#\u00bb:\n\u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: 18 \u043b\u0435\u0442\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u0435\u0449\u0435 \u0440\u0430\u0437: 1aA456c1#\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u00ab1aA456c1#\u00bb:\n\u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: 18 \u043b\u0435\u0442\n\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c \u0435\u0449\u0435 \u0440\u0430\u0437: 1aA456c1#\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u00ab1aA456c1#\u00bb:\n\u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: 18 \u043b\u0435\u0442\n\u041f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u0434\u043e\u0448\u0435\u043b. \u0412\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0439\u0442\u0438 \ufffd"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == 2\nassert solution('5') == 2\nassert solution('10') == 4\nassert solution('56') == 1\n\n\"\"\""
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\nreturn\n"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdef\") == \"ac\"\n\nassert solution(\"aaaaa\") == \"a\"\n\nassert solution(\"aAaaa\") == \"a\"\n\nassert solution(\"BBBBB\") == \"B\"\n\nassert solution(\"AA\") == \"A\"\n"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 4\\n1 4 0\") == \"2\"\nassert solution(\"4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0\") == \"5\"\nassert solution(\"4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0\") == \"5\"\n\n\n\n\n\nhttps://codeforces.com/contest/1390/problem/D"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 4\\n1 4 0\\n\") == \"2\"\nassert solution(\"4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0\\n\") == \"5\"\nassert solution(\"5\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0\\n4 5 0 1\\n\") == \"5\"\n"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 4\\n1 4 0\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 4\\n1 4 0\") == \"2\"\nassert solution(\"4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0\") == \"5\"\nassert solution(\"5\\n0 1 2 3 4\\n1 0 4 5 6\\n2 4 0 6 7\\n3 5 6 0 8\\n4 6 7 8 0\") == \"8\"\n\n\"\"\"\n\n\nimport sys\n\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\n\nN = int(input())\ngraph = {i: {} for i in range(1, N + 1)}\nfor _ in range(N - 1):\n    s, e, w = list(map(int, input().split()))\n    graph[s][e] = w\n    graph[e][s] = w\n"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == \"test\"\n\"\"\"\n\nN = int(input())\nA = [[int(i) for i in input().split()] for _ in range(N)]\n\nimport numpy as np\nimport itertools"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n\n\"\"\"\n\nn = int(input(\"\"))\nd = [[0] * n for i in range(n)]\n\nfor i in range(n):\n    d[i][i] = 0\n    for j in range(i, n):\n        d[i][j] = int(input(\"\"))\n        d[j][i] = d[i][j]\n\nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            if d[i][j] > d[i][k] + d[k][j]:\n                d[i][j] = d[i][k] + d[k][j]\n\nprint(max(d[i][j] for i in range(n) for j in range(i, n)))"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 4 1 2\\n2 3 2\\n3 1 3\\n3 4 1\\n2 5 5\\n1 2 5\\n3 4 5\\n2 4 5\\n3 5 2\\n3 5 4\\n1 4 2\\n5 1 1\\n2 3 4\\n2 3 3\\n2 5 3\\n3 4 3\\n2 4 4\\n3 5 5\\n5 5 1\\n4 5 3\\n3 5 4\\n2 3 5\\n5 4 1\\n2 5 3\\n5 5 4\\n4 3 1\\n3 5 2\\n5 1 1\\n2 4 3\\n5 5 5\\n5 3 5\\n4 4 3\\n5 3 1\\n5 1 5\\n4 1 3\\n3 3 5\\n5 2 4\\n3 2 1\\n1 3 5\\n2 3 2\\n3 4 5\\n5 3 2\\n1 3 4\\n3 2 2\\n2 4 2\\n3 5 1\\n2 4 3\\n5 3 5\\n5 1 2\\n5 3 3\\n5 1 4\\n5 5 5\\n4 3 4\\n5 5 1\\n5 1 1\\n5 4 5\\n5 4 4\\n5 3 5\\n5 5 5\\n4 5 2\\n3 5 2\\n4 3 2\\n3 4 5\\n5 4 1\\n4 2 1\\n2 2 4\\n1 3 2\\n2 1 2\\n3 4 1\\n1 5 3\\n1 3 1\\n3 1 1\\n3 2 3\\n4 2 1\\n5 2 2\\n3 5 1\\n3 5 1\\n5 5 2\\n5 4 5\\n5 5 3\\n4 5 3\\n5 5 5\\n5 1 3\\n5 5 3\\n5 4 4\\n4 1 5\\n5 5 2\\n3 1 3\\n2 1 4\\n3 4 1\\n1 2 5\\n5 2 1\\n5 1 5\\n5 2 1\\n5 3 3\\n5 2 5\\n5 1 3\\n5 3 5\\n5 3 2\\n5 5 4\\n5 5 5\\n5 3 5\\n5 3 1\\n5 4 4\\n5 2 4\\n3 3 5\\n5 2 5\\n5 2 1\\n5 5 5\\n5 5 5\\n3 5 3\\n4 5 5\\n5 5 5\\n5 5 5\\n5 1 3\\n5 3 3\\n5 1 1\\n5 4 5\\n3 2 2\\n5 2 4\\n5 2 1\\n5 3 2\\n3 1 3\\n3 2 3\\n5 4 5\\n3 1 1\\n5 4 3\\n3 4 5\\n2 1 5\\n5 5 5\\n5 1 2\\n5 4 3\\n5 3 3\\n5 2 4\\n5 4 5\\n5 3 3\\n5 1 2\\n5 3 2\\n5 2 3\\n5 3 5\\n5 1 5\\n5 5 4\\n5 5 5\\n5 4 3\\n5 5 5\\n5 3 4\\n5 4 5\\n5 2 3\\n5 2 2\\n5 3 3\\n5 4 5\\n5 4 4\\n5 2 1\\n5 4 3\\n5 2 4\\n5 4 5\\n5 2 1\\n5 1 2\\n5 3 2\\n5 2 1\\n5 3 2\\n5 4 1\\n5 1 2\\n5 4 5\\n5 3 1\\n5 1 1\\n5 5 5\\n5 3 5\\n5 4 1\\n5 3 5\\n5 3 5\\n5 4 3\\n5 4 4\\n5 5 3\\n5 2 5\\n5 5 5\\n5 4 3\\n5 5 5\\n5 5 5\\n5 3 2\\n5 4 1\\n5 2 5\\n5 3 5\\n5 4 1\\n5 2 5\\n5 5 5\\n5 5 5\\n5 1 1\\n5 4 3\\n5 3 1\\n5 4 3\\n5 3 5\\n5 5 3\\n5 3 2\\n5 5 5\\n5 1 4\\n5 2 1\\n5 2 3\\n5 2 2\\n5 3 4\\n5 4 5\\n5 3 5\\n5 3 5\\n5 3 5\\n5 4 5\\n5 3 4\\n5 4 1\\n5 4 5\\n5 1 1\\n5 4 3\\n5 3 4\\n5 3 5\\n5 2 5\\n5 5 5\\n5 1 1\\n5 5 3\\n5 4 5\\n5 3 5\\n5 2 4\\n5 4 5\\n5 3 5\\n5 5 5\\n5 2 2\\n5 1 2\\n3 4 3\\n2 1 3\\n3 5 3\\n4 3 4\\n5 4 5\\n4 1 5\\n2 2 1\\n3 1 4\\n2 4 3\\n2 2 2\\n3 2 3\\n3 1 3\\n2 1 4\\n5 4 5\\n5 2 4\\n3 2 1\\n4 1 4\\n5 3 5\\n5 1 2\\n3 5 2\\n5 3 2\\n5 2 2\\n5 3 4\\n5 4 5\\n5 3 4\\n5 3 5\\n5 3 5\\n5 5 5\\n5 1 1\\n5 4 5\\n5 2 2\\n5 2 3\\n5 2 4\\n5 2 1\\n5 5 3\\n5 3 3\\n5 5 4\\n5 4 5\\n5 3 1\\n5 3 2\\n5 5 5\\n5 4 1\\n5 5 5\\n5 1 1\\n5 4 3\\n5 5 1\\n5 5 2\\n5 5 5\\n5 3 5\\n5 5 5\\n5 5 5\\n5 4 2\\n5 2 4\\n5 4 5\\n5 5 5\\n5 1 2\\n5 3 5\\n5 5 4\\n5 4 5\\n5 1 4\\n5 2 2\\n5 4 4\\n5 3 5\\n5 4 4\\n5 3 5\\n5 1 5\\n5 3 1\\n5 2 5\\n5 1 1\\n5 3 1\\n5 4 4\\n5 5 3\\n5 4 5\\n5 4 5\\n5 4 5\\n5 5 2\\n5 1 2\\n5 2 1\\n5 4 1\\n5 5 2\\n5 1 2\\n5 3 3\\n5 1 3\\n5 1 1\\n5 1 4\\n5 1 5\\n5 4 5\\n5 5 5\\n5 5 5\\n5 5 5\\n5 4 5\\n5 3 1\\n5 1 4\\n5 5 5\\n5 4 5\\n5 3 5\\n5 5 5\\n5 4 3\\n5 3 5\\n5 2 1\\n5 2 3\\n5 5 5\\n5 3 5\\n5 5 5\\n5 5 5\\n5 5 5\\n5 5 5\\n5 4 5\\n5 5 5\\n5 4 5\\n5 4 5\\n5 5 5\\n5 2 2\\n5 2 1\\n5 5 1\\n5 5 2\\n5 1 2\\n5 5 3\\n5 3 5"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\") == \"1 2\"\nassert solution(\"2 0 1 3 2 0\") == \"6\"\nassert solution(\"2 0 1 3 2 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 1 0\") == '3\\n1 2\\n2 4\\n2 3'\n\"\"\"\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 1 0\") == '3\\n1 2\\n2 4\\n2 3'\nassert solution(\"6\\n2 0 1 3 2 0\") == '6\\n1 3\\n3 4\\n1 2\\n4 5\\n5 6\\n4 6'\n\"\"\"\n\nn = int(input())\narray = list(map(int, input().split(' ')))\narray.insert(0,0)\ncache = [[0] * n for i in range(n)]\n\nfor i in range(n):\n    for j in range(i+1, n):\n        cache[i][j] = max(i,j) + 1 - array[i] - array[j]\n\nres = 0\n\nfor i in range(n):\n    tmp = min([cache[j][i] for j in range(n) if j!= i])\n    res = max(tmp, res)"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 1 0\") == \"3\\n1 2\\n2 4\\n2 3\"\nassert solution(\"6\\n2 0 1 3 2 0\") == \"6\\n1 3\\n3 4\\n1 2\\n4 5\\n5 6\\n4 6\"\nassert solution(\"3\\n0 2 2\") == \"6\\n1 3\"\nassert solution(\"3\\n0 2 2\") == \"6\\n1 3\""
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 1 0\\n\") == 3\n\nassert solution(\"6\\n2 0 1 3 2 0\\n\") == 6\n\nassert solution(\"3\\n0 2 2\\n\") == -1\n\nassert solution(\"3\\n0 2 2\\n\") == -1"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2 1 0''') == '3\nassert solution('''6\n2 0 1 3 2 0''') == '6\nassert solution('''3\n0 2 2''') == '-1'''\nassert solution('''6\n2 0 1 3 2 0''') == '6\nassert solution('''6\n2 0 1 3 2 0''') == '6\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 1 0') == 3\nassert solution('6\\n2 0 1 3 2 0') == 6\nassert solution('3\\n0 2 2') == -1\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 1 0\") == \"3\\n1 2\"\nassert solution(\"6\\n2 0 1 3 2 0\") == \"6\\n1 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 0 1\\n') == 6\n\n\"\"\""
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin_1) == solution(stdin_2)\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n5 2 4 1') == '3'\nassert solution('3 20\\n199 41 299') == '19'\n\"\"\"\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n5 2 4 1\") == \"3\"\nassert solution(\"3 20\\n199 41 299\") == \"19\""
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 4\n5 2 4 1''') == '3'\nassert solution('''3 20\n199 41 299''') == '19'\nassert solution('''6 6\n10 19 26 20 30 24 5''') == '60'\nassert solution('''1 10\n10''') == '10'\nprint('Test finished')"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n5 2 4 1\") == \"3\"\nassert solution(\"3 20\\n199 41 299\") == \"19\"\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n5 2 4 1') == '3'\nassert solution('3 20\\n199 41 299') == '19'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n5 2 4 1') == '3'\n\"\"\""
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4') == '2'\nassert solution('4 5') == '2'\nassert solution('100 10') == '1'\nassert solution('10 2 3') == '7'\n\nassert solution('10 1000000000') == '0'\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('3 20') == '19'\nassert solution('3 1') == '3'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 3\") == \"10\\n\"\nassert solution(\"4 3 2 5\") == \"8\\n\"\nassert solution(\"4 4 4\") == \"9\\n\"\nassert solution(\"1 1 1 1\") == \"1\\n\"\nassert solution(\"4 20 2 40 1\") == \"19\\n\"\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n5 2 4 1\") == '3'\n\"\"\"\n\nimport sys\nimport os\nimport time\nimport random\nfrom functools import cmp_to_key"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 -3\\n0 3 3 0\") == \"4.2426406871\"\nassert solution(\"3 1 -9\\n0 3 3 -1\") == \"6.1622776602\"\n\"\"\"\n\nimport math\na, b, c = map(int, input().split())\nx1, y1, x2, y2 = map(int, input().split())\n\nx = x2 - x1\ny = y2 - y1"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 -9 0 3 3 -1') == '6.1622776602'\n\"\"\"\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 -3\\n0 3 3 0\") == \"4.2426406871\"\nassert solution(\"3 1 -9\\n0 3 3 -1\") == \"6.1622776602\"\n\"\"\"\n\n\"\"\"\nCode is taken from https://leetcode.com/problems/minimum-distance-to-type-for-all-cells/discuss/1408768/Python-BFS-explanation-with-pictures\n\"\"\"\n\nclass Solution(object):\n    def minTotalDistance(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        rows = len(grid)\n        cols = len(grid[0])\n        queue = []\n        # one end of the grid\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r][c] == 1:\n                    queue.append((r, c))\n        # the other end of the grid\n        queue.append((rows, cols))\n        x0 = 0\n        y0 = 0\n        x1 = 0\n        y1 = 0\n        # travel from one end of the grid to the other end\n        while len(queue) > 1:\n            x0, y0 = queue.pop(0)\n            x1, y1 = queue.pop(0)\n            # calculate the total distance to travel\n            dx = abs(x1 - x0)\n            dy = abs(y1 - y0)\n            # move in the direction to travel\n            if x1 - x0 > 0:\n                x0 += dx\n            else:\n                x1 += dx\n            if y1 - y0 > 0:\n                y0 += dy\n            else:\n                y1 += dy\n            # add the distance traveled to the total distance\n            total_distance = dx + dy\n            # append the new points into the queue\n            queue.append((x0, y0))\n            queue.append((x1, y1))\n        return total_distance"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 -3\") == \"4.2426406871\"\nassert solution(\"3 1 -9\") == \"6.1622776602\"\n\n\n-----Hint-----\n\nThis problem is equivalent to the problem of finding the optimal path between 2 points in a graph. The graph can be represented as a matrix, which can be implemented as an adjacency matrix.\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-3 1 -9 0 3 3 -1\") == \"6.1622776602\"\n'''\n\n\nimport math\n\na, b, c = [int(i) for i in input().split()]\nx1, y1, x2, y2 = [int(i) for i in input().split()]\n\nd = math.sqrt(a ** 2 + b ** 2)\nD = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\nprint(d / D)\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 -3\\n0 3 3 0') == '4.2426406871'\n\"\"\"\nfrom collections import defaultdict\nfrom typing import Tuple, List, Set\nfrom math import inf\n\n\nclass Avenue:\n    def __init__(self, a: int, b: int, c: int):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __str__(self):\n        return f'{self.a} {self.b} {self.c}'\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __eq__(self, other):\n        return self.a == other.a and self.b == other.b and self.c == other.c\n\n    def __hash__(self):\n        return self.a * self.b * self.c\n\n\nclass Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f'{self.x} {self.y}'\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return self.x * self.y\n\n\nclass MinDistToB:\n    def __init__(self, a: Point, b: Point):\n        self.a = a\n        self.b = b\n        self.dist = dict()\n        self.visited = set()\n        self.max_dist = inf\n\n    def __str__(self):\n        return f'a={self.a}, b={self.b}, dist={self.dist}, visited={self.visited}, max_dist={self.max_dist}'\n\n    def __repr__(self):\n        return self.__str__()\n\n    def update(self, dist: int) -> None:\n        self.dist[self.b] = dist\n        if dist < self.max_dist:\n            self.max_dist = dist\n\n    def in_bounds(self, x: int, y: int) -> bool:\n        return 0 <= x < self.a.x and 0 <= y < self.a.y\n\n    def walk(self, p: Point) -> None:\n        if p in self.visited:\n            return\n        self.visited.add(p)\n        x, y = p.x, p.y\n        dist = self.dist[p] if p in self.dist else 0\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            x1 = x + dx\n            y1 = y + dy\n            if not self.in_bounds(x1, y1):\n                continue\n            if (x1, y1) not in self.dist:\n                self.dist[(x1, y1)] = dist + 1\n            self.walk((x1, y1))\n\n    def solve(self) -> int:\n        self.walk(self.a)\n        return self.max_dist\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 -3\\n0 3 3 0\") == '4.2426406871'\nassert solution(\"3 1 -9\\n0 3 3 -1\") == '6.1622776602'\n\n\n-----Problem-----\n\nYou are given a grid of size m x n. You can move to all the adjacent cells in the grid any number of times. Find the minimum number of moves to get to the bottom right corner of the grid.\n\n-----Constraints-----\n\n1 <= m <= 1000\n\n1 <= n <= 1000\n\nm == m1\n\nn == n1\n\n-----Input-----\n\nThe first line contains the first integer m, representing the number of rows.\n\nThe second line contains the second integer n, representing the number of columns.\n\nThe next m lines contain the m integers, each on a separate line, indicating the cell values in the row (where 0 is empty and 1 is a wall).\n\nThe last line contains the integers n1 and m1, representing the number of rows and columns of the grid to be created, respectively.\n\n-----Output-----\n\nPrint the minimum number of moves to get to the bottom right corner of the grid.\n\nIf the task is impossible, print -1.\n\n\n-----Examples-----\nInput\n\n5\n\n5\n\n0 0 0 0 0\n\n5\n\n0 0 0 0 0\n\n1\n\n5\n\n0 0 0 0 0\n\n2 2\n\n0 0 0 0 0\n\n0 0 0 0 0\n\nOutput\n\n3\n\n\nInput\n\n4\n\n5\n\n0 0 0 0 0\n\n5\n\n0 0 0 0 0\n\n3 2\n\n0 0 0 0 0\n\n2 2\n\n0 0 0 0 0\n\n4 2\n\n0 0 0 0 0\n\n0 0 0 0 0\n\nOutput\n\n3\n\n\n\nInput\n\n3\n\n5\n\n0 0 0 0 0\n\n4\n\n0 0 0 0 0\n\n5\n\n0 0 0 0 0\n\n2 2\n\n0 0 0 0 0\n\n1 2\n\n0 0 0 0 0\n\n2 2\n\n0 0 0 0 0\n\n3 2\n\n0 0 0 0 0\n\n0 0 0 0 0\n\nOutput\n\n4\n\n\n\nInput\n\n1\n\n1\n\n0\n\n1\n\n0\n\nOutput\n\n-1\n\nInput\n\n4\n\n5\n\n0 0 0 0 0\n\n5\n\n0 0 0 0 0\n\n3 2\n\n0 0 0 0 0\n\n2 2\n\n0 0 0 0 0\n\n0 0 0 0 0\n\n3 2\n\n0 0 0 0 0\n\n1 2\n\n0 0 0 0 0\n\n2 2\n\n0 0 0 0 0\n\n4 2\n\n0 0 0 0 0\n\n0 0 0 0 0\n\nOutput\n\n2\n\n\n\nInput\n\n5\n\n5\n\n0 0 0 0 0\n\n5\n\n0 0 0 0 0\n\n3 2\n\n0 0 0 0 0\n\n2 2\n\n0 0 0 0 0\n\n0 0 0 0 0\n\n1 2\n\n0 0 0 0 0\n\n2 2\n\n0 0 0 0 0\n\n4 2\n\n0 0 0 0 0\n\n0 0 0 0 0\n\nOutput\n\n3\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 -9\\n0 3 3 -1\") == \"6.1622776602\"\n\"\"\"\n\nimport sys\n\n\"\"\"\n1. \u8f49\u63db\u6210 [[ax, ay], [bx, by]]\n2. \u4ee3\u8868 a, b \u8ef8\n3. \u8d70\u5b8c a, b \u6642, \u885d\u7a81\u5230b\n4. \u79fb\u52d5\u8ddd\u96e2\u662f\u5e73\u65b9\n5. \u907f\u958b\u5c0d\u89d2\u7dda \u65b9\u5411\u8ddf\u81ea\u5df1\u5411\u53e6\u4e00\u908a\u904e\u53bb\n\nf = ax + by + c\nf(a, b) = f(b, a)\nax + by = bx + ay\ny = ay/ax\nx = ax/ay\n\"\"\""
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 -3\\n0 3 3 0\") == \"4.2426406871\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin_1) == test_stdin_2\nprint('Test Successful!')\n\n\"\"\"\n\nimport sys\nimport math\nfrom itertools import product\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"3\"\nassert solution(\"11\") == \"0\"\nassert solution(\"22\") == \"2\"\nassert solution(\"5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11121314151617181920212223242526272829\") == '8'\nassert solution(\"1111121314151617181920212223242526272829\") == '0'\n\n\"\"\""
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123456789101112131415\") == \"3\"\nassert solution
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('12') == '2'\nassert solution('123') == '3'\nassert solution('1234') == '4'\nassert solution('12345') == '5'\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"1\\n3\") == \"1\"\nassert solution(\"1\\n6\") == \"2\"\n\"\"\""
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12345678910111213141516\") == \"5\"\nassert solution(\"1234567891011121314151617\") == \"0\"\nassert solution(\"123456789101112131415161718\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"0\"\nassert solution(\"3\") == \"3\"\nassert solution(\"1000\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123456789101112131415') == '1'\nassert solution('123456789101112131416') == '2'\nassert solution('123456789101112131417') == '3'\nassert solution('123456789101112131418') == '4'\nassert solution('123456789101112131419') == '5'\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123456789101112131415\") == \"3\"\nassert solution(\"1234\") == \"4\"\nassert solution(\"123\") == \"2\"\nassert solution(\"122345678910111213141516171819\") == \"0\"\nassert solution(\"12234567891011121314151617181910\") == \"1\"\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"11\") == \"0\"\nassert solution(\"99\") == \"9\"\n\"\"\""
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"21 5\") == 2\n\"\"\"\n\nimport collections\n\nn, m = map(int, input().split())\n\ncnt = collections.Counter((n % m) * m + m)"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"21 5\") == 2\nassert solution(\"9435152 272\") == 282"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"21 5\") == \"2\"\nassert solution(\"9435152 272\") == \"282\"\n\"\"\"\n\na, b = map(int, input().split())\n\nmod = []\n\nwhile a > 0:\n    mod.append(a)\n    a = a % b\n\nprint(\"infinity\" if len(mod) > 1 else len(mod))\n"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('21 5') == '2'\nassert solution('9435152 272') == '282'\nassert solution('10 10') == 'infinity'\n\n\"\"\""
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9435152 272\") == \"282\"\nassert solution(\"10 10\") == \"infinity\"\nassert solution(\"21 5\") == \"2\"\n"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\") == \"infinity\"\nassert solution(\"10 10\") == \"infinity\"\nassert solution(\"9435152 272\") == \"282\"\n\"\"\"\n"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('21 5') == 2\nassert solution('9435152 272') == 282\nassert solution('10 10') == 'infinity'\nprint('The local tests are done. Click on \"Check local tests\" to submit your solution.')\n\"\"\"\n\nfrom math import ceil, gcd"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"21 5\") == \"2\"\n\nassert solution(\"9435152 272\") == \"282\"\n\nassert solution(\"10 10\") == \"infinity\"\n"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"21 5\") == 2\n\"\"\""
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"21 5\") == \"2\"\n\"\"\""
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3') == '6'\nassert solution('25 13') == '26'\nassert solution('26 13') == '39'\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3''') == '6'\nassert solution('''25 13''') == '26'\nassert solution('''26 13''') == '39'\n\"\"\"\n\nn, k = map(int, input().split())\nprint(n + (k - n % k))\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"6\"\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0431\u0435\u0437 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432\n\"\"\"\n\nn, k = [int(i) for i in stdin.split()]\n\ni = n + 1\n\nwhile i % k!= 0:\n    i += 1\n\nprint(i)"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 5\\n') == '6'\nassert solution('5 0') == '5'\nassert solution('2 9\\n') == '10'\nassert solution('5 6') == '6'\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5 3') == '6'\nassert solution('25 13') == '26'\nassert solution('26 13') == '39'\n\"\"\""
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"6\"\nassert solution(\"25 13\") == \"26\"\nassert solution(\"26 13\") == \"39\"\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n') == '6'\nassert solution('25 13\\n') == '26'\nassert solution('26 13\\n') == '39'\n\nprint(solution(stdin))"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n') == '6'\n\"\"\"\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\n\nprint(a + (b - a - 1))\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"6\"\nassert solution(\"25 13\") == \"26\"\nassert solution(\"26 13\") == \"39\"\n\n\"\"\""
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('kek') == 'NO'\nassert solution('preceq') == 'NO'\nassert solution('cheburek') == 'NO'\nassert solution('mail') == 'cfmailru'\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abd\") == \"abd\"\nassert solution(\"azby\") == \"byz\"\nassert solution(\"abac\") == \"abc\"\nassert solution(\"azba\") == \"byz\"\nassert solution(\"azby\") == \"byz\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"mail\") == \"cfmailru\"\nassert solution(\"ai\") == \"cfmailru\"\nassert solution(\"lru\") == \"cfmailru\"\nassert solution(\"cf\") == \"cfmailru\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"ab\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"abcc\") == \"abc\"\nassert solution(\"abcdefg\") == \"abcdefg\"\nassert solution(\"abcdef\") == \"abcdef\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"abac\"\nassert solution(\"abacabac\") == \"abac\"\nassert solution(\"aaaaaa\") == \"aaaaa\"\nassert solution(\"caacabac\") == \"caca\"\nassert solution(\"cabacaba\") == \"cabac\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"mail\") == \"cfmailru\"\nassert solution(\"ai\") == \"cfmailru\"\nassert solution(\"lru\") == \"cfmailru\"\nassert solution(\"cf\") == \"cfmailru\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ababababab') == 'abab'\n\nassert solution('ca') == 'ca'\nassert solution('caaaaaaaaa') == 'caaaaaaaaa'\n\nassert solution('bcbcbc') == 'bcbc'\nassert solution('bacbcbcbcbcb') == 'bcbcbcbc'\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"mail\") == \"mail\"\nassert solution(\"ai\") == \"mail\"\nassert solution(\"lru\") == \"mail\"\nassert solution(\"cf\") == \"mailrucf\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nmail\\nai\\nlru\\ncf') == 'cfmailru'\nassert solution('3\\nkek\\npreceq\\ncheburek') == 'NO'\n\n\n'''\n\nn = int(input())\ns = set()\n\nfor i in range(n):\n    s.add(input())"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"mail\") == \"cfmailru\"\nassert solution(\"ai\") == \"cfmailru\"\nassert solution(\"lru\") == \"cfmailru\"\nassert solution(\"cf\") == \"cfmailru\"\n\nassert solution(\"mail\") == \"cfmailru\"\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 8 3\\n10') == '3'\nassert solution('2 10 1\\n5 8') == '1'\nassert solution('1 1 3\\n10') == '-1'\n\"\"\"\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''3 8 3\n10\n'''\n) == '3'\nassert solution(\n'''1 1 3\n10\n'''\n) == '-1'\nassert solution(\n'''1 1 3\n5 8\n'''\n) == '1'\n\nimport itertools"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 8 3\\n10') == '3'\nassert solution('2 10 1\\n5 8') == '1'\nassert solution('1 1 3\\n10') == '-1'\nassert solution('1 1 2\\n8') == '2'\nassert solution('1 1 1\\n8') == '0'\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10 1\\n5 8\") == \"1\"\nassert solution(\"1 1 3\\n10\") == \"-1\"\nassert solution(\"1 1 3\\n5 8\") == \"3\"\nassert solution(\"1 1 3\\n5 8\") == \"3\"\nassert solution(\"2 10 1\\n5 8\") == \"3\"\n\n-----Solution-----\n\nfrom math import ceil\n\nn, m, k = [int(x) for x in stdin.split()]\nw = [int(x) for x in stdin.split()]\n\nm = int(ceil(m / k))\nw = [w[i] - w[i - 1] for i in range(1, len(w))]\n\nprint(m - w.count(0) + 1 if w.count(0) < m else -1)\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 8 3\\n10\") == \"3\"\nassert solution(\"1 1 3\\n5 8\") == \"1\"\nassert solution(\"1 1 3\\n5 8\") == \"1\"\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 8 3\\n10\") == '3'\nassert solution(\"1 1 3\\n10\") == '-1'\nassert solution(\"1 1 3\\n5 8\") == '1'\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10 1') == '3'\nassert solution('4 10 2') == '1'\nassert solution('4 10 3') == '-1'\nassert solution('4 10 4') == '2'\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 10 1\\n5 8') == '1'\nassert solution('1 1 3\\n10') == '-1'\nassert solution('1 1 3\\n8') == '1'\n\"\"\""
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n4 5 6\") == \"2\"\nassert solution(\"1 1 3\\n4 5 6\") == \"1\"\nassert solution(\"1 1 3\\n4 5 7\") == \"2\"\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 8 3\\n10\\n\") == \"3\"\nassert solution(\"2 10 1\\n5 8\\n\") == \"1\"\nassert solution(\"1 1 3\\n10\\n\") == \"-1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1\\n1\") == \"YES\"\nassert solution(\"3\\n1\\n1\\n1\") == \"NO\"\nassert solution(\"4\\n1\\n2\\n2\\n3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1\\n1\") == 'YES'\nassert solution(\"3\\n1\\n1\\n1\") == 'NO'\nassert solution(\"4\\n1\\n2\\n2\\n3\") == 'YES'\nassert solution(\"3\\n1\\n2\\n2\") == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1\\n1') == 'YES'\nassert solution('3\\n1\\n1\\n1') == 'NO'\n\nassert solution('4\\n1\\n2\\n2\\n3') == 'YES'\nassert solution('4\\n1\\n3\\n2\\n3') == 'YES'\n\nassert solution('4\\n1\\n3\\n3\\n3') == 'YES'\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n2\\n2\\n3\\n\") == \"YES\"\nassert solution(\"5\\n1\\n2\\n2\\n2\\n3\\n\") == \"NO\"\nassert solution(\"4\\n1\\n1\\n1\\n3\\n\") == \"YES\"\nassert solution(\"4\\n1\\n2\\n3\\n3\\n\") == \"NO\"\nassert solution(\"4\\n1\\n1\\n2\\n3\\n\") == \"YES\"\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1\\n1\\n1\\n') == 'YES'\nassert solution('4\\n1\\n2\\n2\\n') == 'NO'\nassert solution('4\\n1\\n2\\n3\\n') == 'YES'\nassert solution('2\\n1\\n2') == 'YES'\nassert solution('2\\n1\\n2\\n3') == 'YES'\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1\\n1\") == \"YES\"\nassert solution(\"3\\n1\\n1\\n1\") == \"NO\"\nassert solution(\"4\\n1\\n2\\n2\\n3\") == \"YES\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1\\n1\\n\") == \"YES\"\nassert solution(\"3\\n1\\n1\\n1\\n\") == \"NO\"\nassert solution(\"4\\n1\\n2\\n2\\n3\\n\") == \"YES\"\n\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1\\n1') == 'YES'\nassert solution('3\\n1\\n1\\n1') == 'NO'\nassert solution('4\\n1\\n2\\n2\\n3') == 'YES'\nassert solution('4\\n1\\n2\\n2\\n3') == 'NO'\n\n======="
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1\\n1\") == \"YES\"\nassert solution(\"3\\n1\\n1\\n1\") == \"NO\"\nassert solution(\"4\\n1\\n2\\n2\\n3\") == \"YES\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1\\n2\\n2\\n3\\n') == 'YES'\nassert solution('4\\n1\\n1\\n1\\n1\\n') == 'NO'\nassert solution('4\\n1\\n1\\n1\\n1\\n') == 'YES'\nassert solution('4\\n2\\n2\\n2\\n2\\n') == 'NO'\nassert solution('4\\n2\\n1\\n2\\n2\\n') == 'YES'\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5') == '6\\n4\\n1\\n3\\n10'\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\") == \"6\\n4\\n1\\n3\\n10\"\nassert solution(\"1 2 1\\n2 5 10\") == \"1\\n1\"\nassert solution(\"1 2 3\\n10 9 10\") == \"10\\n9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6 5\\n3 10 4\\n1 2 3\\n2 4 6') == '10\\n4\\n1\\n3\\n10'\nassert solution('4 6 5\\n3 10 4\\n1 2 3') == '10\\n4\\n1\\n3'\n\"\"\""
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5') == '6\\n4\\n1\\n3\\n10'\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\") == \"6\\n4\\n1\\n3\\n10\"\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\") == '6\\n4\\n1\\n3\\n10\\n'\n\"\"\"\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n'''\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_result\n\nprint(solution(input()))\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import gcd\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5') == '6\\n4\\n1\\n3\\n10'\n\"\"\""
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1\") == \"0.5\"\nassert solution(\"4\\n1\") == \"0.29167\"\nassert solution(\"8\\n1\") == \"0.0625\"\nassert solution(\"8\\n5\") == \"0.01634\"\nassert solution(\"8\\n2\") == \"0.04545\"\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '0.5'\nassert solution('1') == '0.33333'\n\"\"\""
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\") == \"0.5\"\nassert solution(\"3\\n0\\n0\\n0\\n1\\n2\\n0\\n0\\n0\\n3\\n2\\n0\\n0\\n0\\n4\\n0\\n0\\n0\\n5\\n0\\n0\\n0\\n6\\n0\\n0\\n0\\n7\\n0\\n0\\n0\\n8\\n0\\n0\\n0\\n9\\n0\\n0\\n0\\n10\\n0\\n0\\n0\\n11\\n0\\n0\\n0\\n12\\n0\\n0\\n0\\n13\\n0\\n0\\n0\\n14\\n0\\n0\\n0\\n15\\n0\\n0\\n0\\n16\\n0\\n0\\n0\\n17\\n0\\n0\\n0\\n18\\n0\\n0\\n0\\n19\\n0\\n0\\n0\\n20\\n0\\n0\\n0\\n21\\n0\\n0\\n0\\n22\\n0\\n0\\n0\\n23\\n0\\n0\\n0\\n24\\n0\\n0\\n0\\n25\\n0\\n0\\n0\\n26\\n0\\n0\\n0\\n27\\n0\\n0\\n0\\n28\\n0\\n0\\n0\\n29\\n0\\n0\\n0\\n30\\n0\\n0\\n0\\n31\\n0\\n0\\n0\\n32\\n0\\n0\\n0\\n33\\n0\\n0\\n0\\n34\\n0\\n0\\n0\\n35\\n0\\n0\\n0\\n36\\n0\\n0\\n0\\n37\\n0\\n0\\n0\\n38\\n0\\n0\\n0\\n39\\n0\\n0\\n0\\n40\\n0\\n0\\n0\\n41\\n0\\n0\\n0\\n42\\n0\\n0\\n0\\n43\\n0\\n0\\n0\\n44\\n0\\n0\\n0\\n45\\n0\\n0\\n0\\n46\\n0\\n0\\n0\\n47\\n0\\n0\\n0\\n48\\n0\\n0\\n0\\n49\\n0\\n0\\n0\\n50\\n0\\n0\\n0\\n51\\n0\\n0\\n0\\n52\\n0\\n0\\n0\\n53\\n0\\n0\\n0\\n54\\n0\\n0\\n0\\n55\\n0\\n0\\n0\\n56\\n0\\n0\\n0\\n57\\n0\\n0\\n0\\n58\\n0\\n0\\n0\\n59\\n0\\n0\\n0\\n60\\n0\\n0\\n0\\n61\\n0\\n0\\n0\\n62\\n0\\n0\\n0\\n63\\n0\\n0\\n0\\n64\\n0\\n0\\n0\\n65\\n0\\n0\\n0\\n66\\n0\\n0\\n0\\n67\\n0\\n0\\n0\\n68\\n0\\n0\\n0\\n69\\n0\\n0\\n0\\n70\\n0\\n0\\n0\\n71\\n0\\n0\\n0\\n72\\n0\\n0\\n0\\n73\\n0\\n0\\n0\\n74\\n0\\n0\\n0\\n75\\n0\\n0\\n0\\n76\\n0\\n0\\n0\\n77\\n0\\n0\\n0\\n78\\n0\\n0\\n0\\n79\\n0\\n0\\n0\\n80\\n0\\n0\\n0\\n81\\n0\\n0\\n0\\n82\\n0\\n0\\n0\\n83\\n0\\n0\\n0\\n84\\n0\\n0\\n0\\n85\\n0\\n0\\n0\\n86\\n0\\n0\\n0\\n87\\n0\\n0\\n0\\n88\\n0\\n0\\n0\\n89\\n0\\n0\\n0\\n90\\n0\\n0\\n0\\n91\\n0\\n0\\n0\\n92\\n0\\n0\\n0\\n93\\n0\\n0\\n0\\n94\\n0\\n0\\n0\\n95\\n0\\n0\\n0\\n96\\n0\\n0\\n0\\n97\\n0\\n0\\n0\\n98\\n0\\n0\\n0\\n99\\n0\\n0\\n0\\n100\\n0\\n0\\n0\\n101\\n0\\n0\\n0\\n102\\n0\\n0\\n0\\n103\\n0\\n0\\n0\\n104\\n0\\n0\\n0\\n105\\n0\\n0\\n0\\n106\\n0\\n0\\n0\\n107\\n0\\n0\\n0\\n108\\n0\\n0\\n0\\n109\\n0\\n0\\n0\\n110\\n0\\n0\\n0\\n111\\n0\\n0\\n0\\n112\\n0\\n0\\n0\\n113\\n0\\n0\\n0\\n114\\n0\\n0\\n0\\n115\\n0\\n0\\n0\\n116\\n0\\n0\\n0\\n117\\n0\\n0\\n0\\n118\\n0\\n0\\n0\\n119\\n0\\n0\\n0\\n120\\n0\\n0\\n0\\n121\\n0\\n0\\n0\\n122\\n0\\n0\\n0\\n123\\n0\\n0\\n0\\n124\\n0\\n0\\n0\\n125\\n0\\n0\\n0\\n126\\n0\\n0\\n0\\n127\\n0\\n0\\n0\\n128\\n0\\n0\\n0\\n129\\n0\\n0\\n0\\n130\\n0\\n0\\n0\\n131\\n0\\n0\\n0\\n132\\n0\\n0\\n0\\n133\\n0\\n0\\n0\\n134\\n0\\n0\\n0\\n135\\n0\\n0\\n0\\n136\\n0\\n0\\n0\\n137\\n0\\n0\\n0\\n138\\n0\\n0\\n0\\n139\\n0"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0\\n1\\n1\\n\") == \"0.666667\"\nassert solution(\"3\\n0\\n1\\n1\\n\") == \"0.666667\"\n\n\"\"\"\n\n\nimport sys\nfrom math import factorial\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0\\n1\\n1\\n') == '0.666667'\nassert solution('2\\n0\\n1\\n0\\n') == '0.5'\n\"\"\"\n\nlines = []\nfor _ in range(int(input())):\n    lines.append(input())\nprint(solution(lines))\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n0\\n1\\n1\\n') == 0.666667\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0\\n1\\n1\") == \"0.5\"\n\"\"\"\n\nimport math\n\nnum_list = list(map(int, input().split()))\n\nresult = 0\n\nfor num in num_list:\n    result += math.floor(num / 2)\n\nprint(result)\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0\\n1\\n1\") == \"0.5\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n2\") == \"0.666667\"\nassert solution(\"3\\n3\") == \"0.75\"\nassert solution(\"4\\n4\") == \"0.83333\"\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 1\") == \"0.5\"\nassert solution(\"1 0 1\") == \"0.5\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"0 2 2\") == \"0.5\"\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\nassert solution('0 1') == '0.5'\n\nassert solution('1 0') == '1.0'\n\nassert solution('0 1 1') == '0.6666666666666666'\n\nassert solution('0 1 0 1') == '0.75'"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"..BAC.\") == \"Yes\"\nassert solution(\"AA..CB\") == \"No\"\n\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AA..CB') == 'No'\nassert solution('A.BC.') == 'Yes'\nassert solution('AB.C.') == 'No'\nassert solution('ABC.') == 'Yes'\nassert solution('ABC..') == 'Yes'\n\nprint('Hooray!')\n\n\"\"\"\n\nimport unittest\n\nfrom typing import List\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AA..CB\") == \"No\"\nassert solution(\"A..BA.C\") == \"Yes\"\nassert solution(\"A....B\") == \"Yes\"\nassert solution(\"A..AC\") == \"No\"\nassert solution(\"AB.BC.A\") == \"Yes\"\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".AB.C.\") == \"Yes\"\nassert solution(\"..BC.\") == \"No\"\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".BAC.\") == \"Yes\"\nassert solution(\".AA..CB.\") == \"No\"\n\"\"\""
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('.') == 'Yes'\nassert solution('.BAC.') == 'Yes'\nassert solution('AA..CB') == 'No'\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.BAC.') == 'Yes'\nassert solution('.AA..CB') == 'No'\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"..AC..\") == \"Yes\"\nassert solution(\"....A.B....C....\") == \"Yes\"\nassert solution(\"....A...BC....\") == \"No\"\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".BAC.\") == \"Yes\"\nassert solution(\"AA..CB\") == \"No\"\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('B.A.C.C.') == 'Yes'\nassert solution('AA.C.B') == 'No'\n\"\"\""
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0\\n2 0\\n1 1\") == \"5\"\nassert solution(\"0 0\\n1 1\\n2 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\\n1 1\\n2 2\") == \"5\"\nassert solution(\"0 0\\n2 0\\n1 1\") == \"4\"\nassert solution(\"0 0\\n1 1\") == \"3\"\n\n\"\"\"\n\nfrom collections import deque\nfrom copy import deepcopy\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''0 0\n1 1\n2 2''') == '4'\nassert solution('''0 0\n2 0\n1 1''') == '3'\nassert solution('''0 0\n2 0\n1 1\n0 0''') == '3'\nassert solution('''0 0\n2 0\n0 0\n1 1''') == '2'\nassert solution('''0 0\n1 1\n2 2\n0 0''') == '2'\n\n-----Problem-----\n\nhttps://www.codewars.com/kata/59c32b30ab6f7f8b980000ca/train/python\n\n\"\"\""
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('test.txt').read()) == open('output.txt').read()\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0\\n1 1\\n2 2\") == \"5\"\nassert solution(\"0 0\\n2 0\\n1 1\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0\\n1 1\\n2 2\") == \"5\\n0 0\\n1 0\\n1 1\\n1 2\\n2 2\"\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\\n1 1\\n2 2\") == \"5\"\nassert solution(\"0 0\\n2 0\\n1 1\") == \"4\"\n\nprint(solution(\"0 0\\n2 0\\n1 1\"))\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0\\n1 1\\n2 2') == '5'\n\"\"\"\n\nimport sys\n\nx_A, y_A = map(int, sys.stdin.readline().split())\nx_B, y_B = map(int, sys.stdin.readline().split())\nx_C, y_C = map(int, sys.stdin.readline().split())\n\nd = ((x_B - x_A)**2 + (y_B - y_A)**2)**0.5"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"0 0\\n\"\n    \"1 1\\n\"\n    \"2 2\") == \"5\\n\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n2 1\") == \"5\\n0 0\\n1 0\\n1 1\\n1 2\\n2 2\"\nassert solution(\"0 0\\n1 0\") == \"4\\n0 0\\n1 0\\n1 0\\n1 0\"\nassert solution(\"2 2\\n1 1\") == \"1\\n0 0\\n1 0\\n1 0\\n1 0\"\nassert solution(\"2 2\\n0 0\") == \"1\\n0 0\\n1 0\\n1 0\"\nassert solution(\"1 0\\n0 0\") == \"1\\n0 0\\n0 0\"\n\n\"\"\""
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == 5\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == 5\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2') == '5'\n\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2') == '5'\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3\"\n\nassert solution(\"4 2\") == \"5\"\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2') == 5\n\"\"\""
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"5\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"6 7\") == \"172\"\nassert solution(\"30 19\") == \"13590123\"\n\"\"\"\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == 5\n\"\"\"\n\nimport collections"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2') == '5'\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"5\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"0 0 1 1\") == \"1\"\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\nassert solution(\"5 5 5 6\") == \"1 0 1\"\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\nassert solution(\"5 5 5 6\") == \"1 0 1\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 3 1 6''') == '2 1 3'\nprint('Test passed')\n\nassert solution('''5 5 5 6''') == '1 0 1'\nprint('Test passed')\n\nassert solution('''1 4 3 4''') == '0 1 0'\nprint('Test passed')\n\nassert solution('''8 7 5 3''') == '0 0 0'\nprint('Test passed')\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3 1 6''') == '2 1 3'\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\nassert solution(\"5 5 5 6\") == \"1 0 1\"\nassert solution(\"5 5 5 5\") == \"0 0 0\"\nassert solution(\"5 5 5 1\") == \"0 0 0\"\nassert solution(\"5 5 1 5\") == \"0 0 0\"\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\nassert solution(\"5 5 5 6\") == \"1 0 1\"\n\n'''"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\nassert solution(\"5 5 5 6\") == \"1 0 1\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\n\n\"\"\"\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '8'\nassert solution('10') == '1024'\n\"\"\"\n\nfrom collections import deque\n\nN = int(input())\ndq = deque(range(1, 36))\nfor _ in range(N):\n    dq.rotate(int(input()))\nprint(dq[0])\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"10\") == \"1024\"\n\"\"\"\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 8\nassert solution(10) == 1024\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '8'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '8'\nassert solution('10') == '1024'\n\"\"\"\n\na = int(input())\nb = 1\nfor i in range(1, a + 1):\n    b *= i\nprint(b)\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '8'\nassert solution('10') == '1024'\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 8\n\"\"\""
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 8\n\"\"\"\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 8\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a=1, b=3, c=5, d=7) == \"3 4 5\"\nassert solution(a=1, b=5, c=5, d=7) == \"5 5 5\"\nassert solution(a=100000, b=200000, c=300000, d=400000) == \"182690 214748 300999\"\n\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 5 7\") == \"3 4 5\"\nassert solution(\"1 3 5 7\") == \"3 4 5\"\nassert solution(\"100000 200000 300000 400000\") == \"182690 214748 300999\"\nassert solution(\"1 1 977539810 977539810\") == \"977539810 977539810\"\n\n\"\"\"\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 5 7\") == \"3 4 5\"\nassert solution(\"1 5 5 7\") == \"5 5 5\"\nassert solution(\"100000 200000 300000 400000\") == \"182690 214748 300999\"\nassert solution(\"1 1 977539810 977539810\") == \"977539810 977539810\"\n\n\"\"\"\n\nfrom math import sqrt\n\nt = int(input())\n\nfor _ in range(t):\n    a, b, c, d = map(int, input().split())\n    cnt = 0\n    for n in range(min(b, d) + 1):\n        if sqrt((a ** 2 + n ** 2) * (b ** 2 + n ** 2)) + (c ** 2 + n ** 2) * (d ** 2 + n ** 2) > 1:\n            cnt += 1\n    print(cnt, n, n + 1)\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 5 7') == '3 4 5'\nassert solution('1 5 5 7') == '5 5 5'\nassert solution('100000 200000 300000 400000') == '182690 214748 300999'\n\n\"\"\"\n\n\"\"\"\na <= x <= b\nb <= y <= c\nc <= z <= d\n\"\"\"\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 5 7\") == \"3 4 5\"\nassert solution(\"1 5 5 7\") == \"5 5 5\"\nassert solution(\"100000 200000 300000 400000\") == \"182690 214748 300999\"\nassert solution(\"1 1 977539810 977539810\") == \"977539810 977539810\"\n\n\n'''\nimport sys\nimport math\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 5 7') == '3 4 5'\nassert solution('1 5 5 7') == '5 5 5'\nassert solution('100000 200000 300000 400000') == '182690 214748 300999'\nassert solution('1 1 977539810 977539810') == '977539810 977539810'\n\n\n\"\"\"\n\n\nimport sys\nimport itertools\nimport functools\n\n@functools.lru_cache(None)\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 5 7') == '3 4 5'\nassert solution('1 5 5 7') == '5 5 5'\nassert solution('100000 200000 300000 400000') == '182690 214748 300999'\nassert solution('1 1 977539810 977539810') == '977539810 977539810'\n\n\"\"\""
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810\n''') == '3 4 5\\n5 5 5\\n182690 214748 300999\\n1 977539810 977539810'\nprint('Success')\n'''\n\nclass Test2(unittest.TestCase):\n    def test_case_0(self):\n        self.assertEqual(solution('''\n4\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810\n'''), '3 4 5\\n5 5 5\\n182690 214748 300999\\n1 977539810 977539810')\n\n    def test_case_1(self):\n        self.assertEqual(solution('''\n4\n2 4 6 8\n2 6 6 8\n3 4 5 6\n3 5 5 6\n'''), '3 5 5\\n6 6 6')"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 5 7\\n1 5 5 7\") == \"3 4 5\"\nassert solution(\"100000 200000 300000 400000\\n1 1 977539810 977539810\") == \"182690 214748 300999\"\n\n\"\"\"\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 5 7') == '3 4 5'\nassert solution('1 5 5 7') == '5 5 5'\nassert solution('100000 200000 300000 400000') == '182690 214748 300999'\nassert solution('1 1 977539810 977539810') == '977539810 977539810'\n\n\"\"\""
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n2 5\\n7 9\\n10 11\") == \"10\"\nassert solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\") == \"18\"\nassert solution(\"1 1000000000\\n1 1000000000\") == \"1999999999\"\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1000000000\") == \"1999999999\"\nassert solution(\"5 10\") == \"18\"\nassert solution(\"1 1000000000\") == \"1999999999\"\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 4\n2 5\n7 9\n10 11''') == '10'\nassert solution('''5 10\n5 7\n11 12\n16 20\n25 26\n30 33''') == '18'\nassert solution('''1 1000000000\n1 1000000000''') == '1999999999'\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n2 5\\n7 9\\n10 11\") == 10\n\"\"\"\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n2 5\\n7 9\\n10 11') == '10'\nassert solution('5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33') == '18'\nassert solution('1 1000000000\\n1 1000000000') == '1999999999'\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 4\n2 5\n7 9\n10 11''') == '10'\n\nassert solution('''5 10\n5 7\n11 12\n16 20\n25 26\n30 33''') == '18'\n\nassert solution('''1 1000000000\n1 1000000000''') == '1999999999'\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\\n\") == \"18\"\nassert solution(\"1 1000000000\\n1 1000000000\\n\") == \"1999999999\"\n\n\n-----Test 1-----\n\n>>> solution(\"3 4\\n2 5\\n7 9\\n10 11\\n\")\n'10'\n>>> solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\\n\")\n'18'\n>>> solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\\n\")\n'18'\n>>> solution(\"1 1000000000\\n1 1000000000\\n\")\n'1999999999'\n>>> solution(\"1 1000000000\\n1 1000000000\\n\")\n'1999999999'\n\n\n-----Test 2-----\n\n>>> solution(\"1 1000000000\\n1 1000000000\\n\")\n'1999999999'\n>>> solution(\"1 1000000000\\n1 1000000000\\n\")\n'1999999999'\n\n\n-----Test 3-----\n\n>>> solution(\"1 1000000000\\n1 1000000000\\n\")\n'1999999999'\n\n\n-----Test 4-----\n\n>>> solution(\"1 1000000000\\n1 1000000000\\n\")\n'1999999999'\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 4\\n2 5\\n7 9\"\n) == \"10\"\nassert solution(\n    \"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\"\n) == \"18\"\n\n\"\"\"\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n2 5\\n7 9\\n10 11\") == \"10\"\nassert solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\") == \"18\"\nassert solution(\"1 1000000000\\n1 1000000000\") == \"1999999999\"\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n2 5\\n7 9\\n10 11\") == \"10\"\nassert solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\") == \"18\"\nassert solution(\"1 1000000000\\n1 1000000000\") == \"1999999999\"\n"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40') == 'YES\\nYES\\nYES\\nNO'\nprint(solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40'))"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 98\") == \"YES\"\nassert solution(\"42 32\") == \"YES\"\nassert solution(\"1000000000000000000 1\") == \"YES\"\nassert solution(\"41 40\") == \"NO\"\nassert solution(\"1 0 1\") == \"YES\"\n\"\"\"\nimport sys"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 98') == 'YES'\nassert solution('42 32') == 'YES'\nassert solution('1000000000000000000 1') == 'YES'\nassert solution('41 40') == 'YES'\nassert solution('0 0') == 'NO'\n"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40\\n') == 'YES\\nYES\\nYES\\nNO'"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40') == 'YES'\nassert solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40') == 'YES'\nassert solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40') == 'YES'\nassert solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40') == 'YES'\nassert solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40') == 'YES'\n"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 100\\n 42 32\\n 1000000000000000000 1\\n 41 40\\n\") == \"YES\"\nassert solution(\"3 9\\n 8 7\\n 5 6\\n\") == \"NO\"\nassert solution(\"1\\n1 1\\n\") == \"NO\"\nassert solution(\"2 1\\n1 1\\n\") == \"YES\"\nassert solution(\"2 1\\n2 1\\n\") == \"YES\"\n"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 100 98\") == \"YES\"\nassert solution(\"42 32\") == \"YES\"\nassert solution(\"1000000000000000000 1\") == \"YES\"\nassert solution(\"41 40\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 98\") == \"YES\"\nassert solution(\"42 32\") == \"YES\"\nassert solution(\"1000000000000000000 1\") == \"YES\"\nassert solution(\"41 40\") == \"NO\"\n\n---"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"YES\"\nassert solution(\"42 32\") == \"YES\"\nassert solution(\"1000000000000000000 1\") == \"YES\"\nassert solution(\"41 40\") == \"NO\"\n\"\"\""
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 98') == 'YES'\nassert solution('42 32') == 'YES'\nassert solution('1000000000000000000 1') == 'NO'\nassert solution('41 40') == 'NO'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"199 200\"\nassert solution(\"4 4\") == \"412 413\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"6 2\") == \"-1\"\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"199 200\"\nassert solution(\"4 4\") == \"412 413\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"6 2\") == \"-1\"\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"199 200\"\nassert solution(\"4 4\") == \"412 413\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"6 2\") == \"-1\"\nprint('Success')\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == '199 200'\n\nassert solution('4 4') == '412 413'\n\nassert solution('5 7') == '-1'\n\nassert solution('6 2') == '-1'\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"199 200\"\nassert solution(\"4 4\") == \"412 413\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"6 2\") == \"-1\"\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"199 200\"\nassert solution(\"4 4\") == \"412 413\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"6 2\") == \"-1\"\nprint(\"Passed\")\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\n\n\"\"\"\n\nfrom itertools import count"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == '199 200'\nassert solution(\"4 4\") == '412 413'\nassert solution(\"5 7\") == '-1'\nassert solution(\"6 2\") == '-1'\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"412 413\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"6 2\") == \"-1\"\nprint(\"Test Completed\")"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"42\") == 2\nassert solution(\"169\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12118999\") == 1\nassert solution(\"12223344\") == 2\nassert solution(\"12223355\") == 3\nassert solution(\"1222335555\") == 4\n\n\"\"\""
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"42\") == \"2\"\nassert solution(\"169\") == \"1\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('42') == '2'\nassert solution('169') == '1'\nassert solution('23454') == '2'\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"42\") == 2\n\"\"\"\n\nimport itertools\nfrom collections import Counter\n\nt = int(input())\ndigits = input()\n\ndigit_combos = [''.join(c) for i in range(len(digits)) for c in itertools.combinations(digits, i + 1)]\ndigit_count = Counter(digit_combos)\nprint(max(digit_count.values()))\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"42\") == 2\nassert solution(\"169\") == 1\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('42') == 2\nassert solution('169') == 1\nassert solution('933') == 0\n\"\"\"\n\nimport re"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"42\") == 2\nassert solution(\"169\") == 1\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"42\") == 2\nassert solution(\"169\") == 1\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('169') == '1'\nassert solution('12118999') == '2'\nassert solution('123456789') == '0'\n\"\"\"\n\n\"\"\"\n\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0432\u0435 \u043a\u043e\u043f\u0438\u0438 \u0447\u0438\u0441\u043b\u0430, \u043e\u0434\u043d\u0430 \u0446\u0435\u043b\u0430\u044f, \u0434\u0440\u0443\u0433\u0430\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u043e\u0431\u043e\u0438\u0445 \u043a\u043e\u043f\u0438\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u043a\u0430\u043a\u043e\u0435 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043c.\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0446\u0438\u0444\u0440 \u0432 \u043e\u0431\u043e\u0438\u0445 \u043a\u043e\u043f\u0438\u044f\u0445. \u0412 \u043a\u043e\u043d\u0446\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043e\u0431\u043e\u0438\u0445 \u043a\u043e\u043f\u0438\u0439 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043c.\n\n-----Input-----\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e t (1 \u2264 t \u2264 10000). \u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 (\u0446\u0438\u0444\u0440\u044b \u0438 \u0431\u0443\u043a\u0432\u044b). \u0414\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 10000. \u041a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 10000.\n\n-----Output-----\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b, \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430:\n\n\u0414\u043b\u0438\u043d\u0443 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043f\u0438\u0438\n\u0414\u043b\u0438\u043d\u0443 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043f\u0438\u0438\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043f\u0438\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0447\u0438\u0441\u0435\u043b\n\n-----Examples-----\nInput\n42\n12346789\n\nOutput\n4\n2\n2\n\nInput\n10\n10101\n\nOutput\n3\n2\n0\n\nInput\n27\n
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aab') == 'aba'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\ncaa\\ncbb') == 'YES'\nassert solution('3\\n3\\nccab\\ncbac\\nbca\\nacbcc') == 'NO'\n\"\"\"\n\n\"\"\"\nAccepted solution:\n\nclass Solution:\n    def checkEqual(self, stdin: str) -> str:\n        n = int(stdin.split()[0])\n        if n < 1 or n > 1000:\n            return 'NO'\n        if n == 2:\n            return 'YES'\n        else:\n            for i in range(1, n):\n                s1 = stdin.split()[i]\n                s2 = stdin.split()[0]\n                s3 = stdin.split()[-1]\n                if s1 == s2 or s1 == s3 or s2 == s3:\n                    return 'YES'\n                else:\n                    return 'NO'\n\n\"\"\"\n\n\nclass Solution:\n    def checkEqual(self, stdin: str) -> str:\n        n = int(stdin.split()[0])\n        if n < 1 or n > 1000:\n            return 'NO'\n        if n == 2:\n            return 'YES'\n        else:\n            s = stdin.split()\n            for i in range(1, n):\n                s1 = s[i]\n                s2 = s[0]\n                s3 = s[-1]\n                if s1 == s2 or s1 == s3 or s2 == s3:\n                    return 'YES'\n                else:\n                    return 'NO'\n\n\nassert Solution().checkEqual('2\\n2\\ncaa\\ncbb') == 'YES'\nassert Solution().checkEqual('3\\n3\\nccab\\ncbac\\nbca\\nacbcc') == 'NO'\n"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\ncaa\\ncbb\\n3\\ncba\\ncba\\ncbb\\n4\\nccab\\ncbac\\nbca\\nacbcc\\n4\\nacb\\ncaf\\nc\\cbafc\\n\") == 'YES'\nassert solution(\"4\\n2\\ncaa\\ncbb\\n3\\ncba\\ncba\\ncbb\\n4\\nccab\\ncbac\\nbca\\nacbcc\\n4\\nacb\\ncaf\\nc\\cbafc\\n\") == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n3\ncaa\ncbb\n4\ncba\ncba\ncbb\n''') == 'YES'\nassert solution('''4\n3\ncab\ncbac\nbca\nacbcc\n4\nacb\ncaf\nc\ncbafc\n''') == 'NO'\n\n---\n\n### \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u043e\u0432\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043b\u0438 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u043d\u0435\u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0439 \u0434\u043b\u0438\u043d\u043e\u0439 \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u044d\u0442\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0442\u044b\u0440\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0435\u043a\u0441\u0442\u0430, \u043a\u0430\u0436\u0434\u0430\u044f \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $n$, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 ($1 \\le n \\le 1000$). \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 $n$ \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0430\u0431\u043e\u0440\u044b \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \u00abYES\u00bb, \u0435\u0441\u043b\u0438 \u0438\u0437 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u0438, \u0441\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0432\u043d\u0430 $n$, \u0438\u043b\u0438 \u00abNO\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0421\u043f\u0438\u0441\u043a\u0438 \u0441 \u0440\u0430\u0432\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u043e\u0439 \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u044b\u043c\u0438, \u0435\u0441\u043b\u0438 \u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443.\n\nSample Input 1:\n\n2\n3\n3 5 7\n3 1 5\n3\n1 4 2\n3 3 3\nSample Output 1:\n\nYES\nNO\nSample Input 2:\n\n2\n4\n0 3 7 8\n3 1 7 3\n4\n4 2 1 5\n1 4 2\nSample Output 2:\n\nYES\nNO\n\nSample Input 3:\n\n1\n3\n0 1 1\nSample Output 3:\n\nYES"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3\\ncaa\\ncbb') == 'YES'\nassert solution('3\\n4\\ncba\\nccb\\nacb\\nca\\ncbac\\n') == 'NO'\nassert solution('2\\n3\\ncaa\\ncbb\\n4\\nccab\\ncbac') == 'YES'\nassert solution('2\\n3\\ncaa\\ncbb\\n4\\nccab\\ncbac') == 'YES'\n\"\"\""
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\ncaa\\ncbb') == 'NO'\nassert solution('4\\nccab\\cbac\\bca\\acbcc') == 'YES'\nassert solution('2\\ncaa\\ncbb') == 'YES'\nassert solution('2\\ncaa\\nccab') == 'NO'\nassert solution('2\\nccab\\cbac\\bca\\acbcc') == 'NO'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"caa\\ncbb\") == \"NO\"\nassert solution(\"cba\\ncba\") == \"YES\"\nassert solution(\"ccab\\cbac\") == \"YES\"\nassert solution(\"cbafc\") == \"NO\"\n"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\\ncaa\\ncbb\\n3\\ncba\\ncba\\ncbb\\n4\\nccab\\ncbac\\nbca\\nacbcc\\n4\\nacb\\ncaf\\nc\\ncbafc\\n\") == \"YES\"\n\n\n-----Code-----\nimport sys"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj') == 'YES'\nassert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj') == 'YES'\nassert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj') == 'YES'\nassert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj') == 'YES'\nassert solution('a\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj') == 'YES'\n"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"caa\") == \"YES\"\nassert solution(\"cbb\") == \"NO\"\nassert solution(\"cba\") == \"YES\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2) == 'O-|OO-OO'\nassert solution(13) == 'O-|OOO-O'\nassert solution(720) == 'O-|-OOOO'\n\"\"\""
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('720') == \"\"\"O-|-OOOO\nO-|OO-OO\n-O|OO-OO\n\"\"\"\nassert solution('2') == \"\"\"O-|OO-OO\n\"\"\"\nassert solution('13') == \"\"\"O-|OOO-O\nO-|O-OOO\n\"\"\"\nassert solution('0') == \"\"\"O-|\n\"\"\""
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'O-O|OO'\nassert solution('13') == 'O-O|O-O|OO'\nassert solution('720') == 'O-O|-OOOO|O-O|OO-OO'\nassert solution('1000') == 'O-OO-O|O-OO-O|O-O-OO|OO-O-O|OO-OO-O|OO-OO-O|O-O-O-O|OO-OO-O|OO-OO-O|OO-OO-O|OO-O-O-O|OO-O-O-O|OO-OO-O|OO-O-O-O|OO-OO-O|OO-O-O-O'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('720') == 'O-|-OOOO\\nO-|OO-OO\\n-O|OO-OO'\nassert solution('13') == 'O-|OOO-O\\nO-|O-OOO'\n\"\"\""
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('720') == 'O-|-OOOO\\nO-|OO-OO\\n-O|OO-OO'\nassert solution('13') == 'O-|OOO-O\\nO-|O-OOO'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 'O-O|OO'\nassert solution('13') == 'O-O|OOO'\nassert solution('720') == 'O-O|-OOOO'\nassert solution('100') == 'OO-OO'\nassert solution('0') == 'O|OO'\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == 'O-|OOO-O\\nO-|O-OOO'\nassert solution('2') == 'O-|OO-OO'\nassert solution('720') == 'O-|-OOOO\\nO-|OO-OO\\n-O|OO-OO'\nassert solution('13') == 'O-|OOO-O\\nO-|O-OOO'\nassert solution('720') == 'O-|-OOOO\\nO-|OO-OO\\n-O|OO-OO'\n\n\"\"\"\n\nn = int(input())\n\nwhile n:\n    n, m = divmod(n, 10)\n    print('-' * m + 'O' + '-' * (10 - m))"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"O-|OO-OO\"\nassert solution(\"13\") == \"O-|OOO-O\"\nassert solution(\"720\") == \"O-|-OOOO\"\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('720') == 'O-|-OOOO\\nO-|OO-OO\\n-O|OO-OO'\nassert solution('13') == 'O-|OOO-O\\nO-|O-OOO'\nassert solution('2') == 'O-|OO-OO'"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'O-|OO-OO'\nassert solution('13') == 'O-|OOO-O\\nO-|O-OOO'\nassert solution('720') == 'O-|-OOOO\\nO-|OO-OO\\n-O|OO-OO'\n\n\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nfor i in range(9, -1, -1):\n    if n < 10 ** i:\n        soroban = 'O' * i + '-' + 'O' * (9 - i) + '|'\n        print(soroban)\n        break\n    soroban = 'O' + '-' * 5 * (i - 8) + 'O'\n    print(soroban)\n"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n') == 'YES\\n1 2 4 5 7'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5') == 'YES\\n1 2 4 5 7'\nassert solution('3 6') == 'YES\\n1 2 5'\n"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\") == 'YES\\n1 2 4 5 7'\nassert solution(\"3 6\") == 'YES\\n1 2 5'\n\"\"\"\n\nfrom itertools import combinations, product\n\nN, X = (int(x) for x in stdin.split())\n\ncomb_set = set(combinations(range(1, N + 1), N // 2))\nbit_sum = lambda a: sum(i * (1 << (a.index(i) + 1)) for i in a)\n\nfor comb in comb_set:\n    if bit_sum(comb) == X:\n        print(\"YES\")\n        print(*comb)\n        break\nelse:\n    print(\"NO\")\n"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"YES\"\nassert solution(\"3 6\") == \"YES\"\nassert solution(\"5 6\") == \"NO\"\nassert solution(\"4 5\") == \"YES\"\nassert solution(\"4 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\") == \"YES\\n1 2 5\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6') == 'YES\\n1 2 5'\nassert solution('5 5') == 'NO'\nassert solution('2 3') == 'NO'\nassert solution('8 9') == 'YES\\n1 2 4 5 6 7 8 9'\n\n\"\"\""
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n\") == \"YES\\n1 2 4 5 7\"\n\"\"\"\n\nfrom itertools import combinations\nfrom math import ceil\nfrom typing import List\n"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"YES\\n1 2 4 5 7\"\nassert solution(\"3 6\") == \"YES\\n1 2 5\"\n"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\") == \"YES\\n1 2 5\"\nassert solution(\"5 5\") == \"NO\""
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n\") == \"YES\\n1 2 4 5 7\"\nassert solution(\"3 6\\n\") == \"YES\\n1 2 5\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 0\\n1 1') == '0.333333'\nassert solution('4\\n2 4\\n0 2\\n1 1') == '0.666667'\nassert solution('3\\n1 0\\n2 1') == '0.50000'\nassert solution('4\\n2 4\\n2 3') == '1.00000'\nassert solution('4\\n2 4\\n0 0') == '1.00000'\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2\\n0 4') == '0.5'\nprint(solution(stdin.readlines()))\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1 1\\n0\\n\") == \"0.5\"\nassert solution(\"1\\n2 3\\n1 0\\n\") == \"0.666667\"\nassert solution(\"1\\n2 3\\n1 2\\n\") == \"1.0\"\nassert solution(\"1\\n2 3\\n3 0\\n\") == \"0.0\"\nassert solution(\"1\\n2 3\\n0 1\\n\") == \"1.0\"\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n0\") == '0.5'\nassert solution(\"2\\n1\\n0\") == '0.66'\nassert solution(\"4\\n2\\n0\\n3\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\\n4\\n1\\n0\") == '0.666667'\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n0\") == \"0.5\"\nassert solution(\"1 1\\n1 1\") == \"1\"\nassert solution(\"1 1\\n0 1\") == \"0.5\"\nassert solution(\"1 1\\n1 2\") == \"0.5\"\nassert solution(\"2\\n1 1\\n1 2\") == \"1\"\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2') == '0.5'\nassert solution('2 3') == '0.666666'\n\"\"\""
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 0 1') == '0.666667'\nassert solution('10\\n2 3 0 1') == '0.83333333'\nassert solution('8\\n2 3 0 1') == '0.66666667'\nassert solution('4\\n2 3 1 0') == '0.83333333'\nassert solution('4\\n2 3 1 1') == '0.66666667'\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2') == '0.5'\nassert solution('2\\n1 0') == '0.5'\nassert solution('2\\n1 1') == '0.0'\n\"\"\"\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n\"\"\"\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == '0.666667'\nassert solution(\"2\\n2\\n0\\n\") == '1.0'\nassert solution(\"1\\n1\\n0\\n\") == '0.5'\n\n\"\"\"\nfrom fractions import Fraction\nfrom itertools import product\nfrom math import gcd\n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 1 2 2 1 1 3\") == 1\n\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2 2 1\\n1 1 1') == '1'\nassert solution('4 3\\n1 2 2 1\\n1 1 1') == '1'\nassert solution('4 3\\n1 1 1\\n1 1 1') == '0'\nassert solution('4 3\\n1 2 2 1\\n1 1 1') == '-1'\n\nprint(\"All tests passed.\")\n\n---\n\nIn the Jedi Order, you have to meet each of the following conditions:\n\n1. The Jedi Order is the same as the initial order\n2. The Jedi Order is the same as the original order but all of the Jedi have a lightsaber of color 1\n3. The Jedi Order is the same as the original order but all of the Jedi have a lightsaber of color 2\n4. The Jedi Order is the same as the original order but all of the Jedi have a lightsaber of color 3\n5. The Jedi Order is the same as the original order but all of the Jedi have a lightsaber of color 1 and 2\n6. The Jedi Order is the same as the original order but all of the Jedi have a lightsaber of color 1 and 3\n7. The Jedi Order is the same as the original order but all of the Jedi have a lightsaber of color 2 and 3\n8. The Jedi Order is the same as the original order but all of the Jedi have a lightsaber of color 1, 2, and 3\n9. The Jedi Order is the same as the original order but all of the Jedi have a lightsaber of color 1, 2, and 3, in that order\n10. The Jedi Order is the same as the original order but all of the Jedi have a lightsaber of color 1, 2, and 3, in that order, but the Jedi order has a different order\n\nNote: we need to make sure that each Jedi have a lightsaber of only one color.\n\nInput\n\nThe first line of the input contains an integer n (1 \u2264 n \u2264 1,000,000) \u2014 the number of Jedi Knights.\n\nThe second line contains n integers in the range {1, 2,..., n} \u2014 the colors of the Jedi Knights.\n\nThe third line contains n integers k_1, k_2,..., k_n (with 1 \u2264 k_i \u2264 n) \u2014 the desired counts of Jedi Knights with lightsabers of each color.\n\nOutput\n\nPrint one integer: the minimum number of Jedi Knights that need to be removed from the sequence so that, in what remains, there is an interval with the prescribed counts of lightsaber colors. If this is not possible, print -1.\n\nConstraints\n\n1 \u2264 n \u2264 10^5\n1 \u2264 k_i \u2264 n\n\nExample\n\nInput\n\n8\n3 3 1 2 2 1 1 3\n3 1 1\n\nOutput\n\n1\n\nInput\n\n4\n1 1 1 2\n3 1 1\n\nOutput\n\n-1\n\nInput\n\n7\n1 1 1 1 2\n4 2 1\n\nOutput\n\n-1\n\nInput\n\n7\n1 1 1 1 2\n4 2 1\n\nOutput\n\n0\n\nSolution:\n\nWe have to find how many (k_i-1) points are needed to break the \"K\" part of the sequence and how many (k_i) points are needed to break the \"K\" part of the sequence but in the reverse order.\n\nThe total needed number of points to break the sequence is the sum of (k_i-1) points and (k_i) points.\n\nThe total number of points that we need to break the sequence is then the sum of the sum of (k_i-1) points and (k_i) points.\n\nThe minimum number of points we need to break the sequence is the minimum of the sum of (k_i-1) points and (k_i) points.\n\nSo, we need to count the number of elements in the array that are equal to 1, 2, 3,..., m. The total number of elements in the array is the sum of the elements of the array.\n\nThe maximum number of points we need to break the sequence is the maximum number of elements in the array minus the minimum number of points we need to break the sequence.\n\nThe minimum number of points we need to break the sequence is the minimum number of points we need to break the sequence.\n\nSo, we need to find the maximum number of elements in the array minus the minimum number of points we need to break the sequence.\n\nNote that the minimum number of points we need to break the sequence is the minimum number of points we need to break the sequence, and the maximum number of points we need to break the sequence is the sum of the maximum number of points we need to break the sequence and the minimum number of points we need to break the sequence.\n\nSo, in the end, we need to find the minimum number of points we need to break the sequence.\n\nThe minimum number of points we need to break the sequence is then the minimum of the sum of the maximum number of points we need to break the sequence and the minimum number of points we need to break the sequence.\n\nSo, we need to add the sum of the maximum number of points we need to break the sequence to the minimum number of points we need to break the sequence.\n\nSo, in the end, the minimum number of points we need to break the sequence is the minimum of the sum of the maximum number of points we need to break the sequence and the minimum number of points we need to break the sequence.\n\nBut if the sum of the maximum number of points we need to break the sequence is greater than the minimum number of points we need to break the sequence, then the minimum number of points we need to break the sequence is equal to the maximum number of points we need to break the sequence.\n\nSo, we need to add the maximum number of points we need to break the sequence to the minimum number of points we need to break the sequence.\n\nSo, in the end, the minimum number of points we need to break the sequence is equal to the minimum of the sum of the maximum number of points we need to break the sequence and the minimum number of points we need to break the sequence.\n\nNote that there is no need to count the points that are equal to the minimum number of points we need to break the sequence.\n\nInput\n\nThe first line of the input contains an integer n (1 \u2264 n \u2264 1,000,000) \u2014 the number of Jedi Knights.\n\nThe second line contains n integers in the range {1, 2,..., n} \u2014 the colors of the Jedi Knights.\n\nThe third line contains n integers k_1, k_2,..., k_n (with 1 \u2264 k_i \u2264 n) \u2014 the desired counts of Jedi Knights with lightsabers of each color.\n\nOutput\n\nPrint one integer: the minimum number of Jedi Knights that need to be removed from the sequence so that, in what remains, there is an interval with the prescribed counts of lightsaber colors. If this is not possible, print -1.\n\nConstraints\n\n1 \u2264 n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1\\n1') == 2\nassert solution('2\\n2\\n2') == -1\nassert solution('4\\n1\\n1') == 0\nassert solution('4\\n2\\n2') == 0\nassert solution('8\\n1\\n1') == 0\n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\\n3 1 1\\n\") == 1\n\"\"\"\n\nn, m = map(int, input().split())\ns = [int(i) for i in input().split()]\n\ns_set = set(s)\n\nc = [0]*(m+1)\n\nfor i in s:\n    c[i] += 1\n\nt = []\n\nfor i in range(len(c)):\n    if c[i] > 0:\n        t.append(i)\n\ns_t = set(t)\ns_set = s_set - s_t"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2 1\") == \"3\"\nassert solution(\"4 4 2 1\") == \"4\"\nassert solution(\"5 1 1 2 3\") == \"2\"\nassert solution(\"8 1 2 3 4 3 5 3 6\") == \"3\"\n\n---\n\nI'm trying to solve the problem of finding the minimum number of Jedi Knights to leave in the galaxy, so that the resulting interval has exactly a certain number of lightsabers of each color. Here I can notice that, if I pick the most blue Jedi Knight and then all the others, it's guaranteed that I'll have exactly 3 lightsabers of blue, no matter how many lightsabers I pick from the rest.\n\nI'm gonna try to implement the idea of the greedy algorithm.\n\nI'll try to implement the greedy algorithm, but since the problem statement is just the minimum number of Jedi Knights to leave in the galaxy, I'm gonna try to solve it with a brute force approach.\n\nIn the brute force solution, I'll try to pick all the Jedi Knights with the most lightsabers of that color first, and then go from there and pick the ones with the second most lightsabers, and so on.\n\nSince I'm gonna use a greedy algorithm, I'm gonna try to find the most blue Jedi Knight and add him/them to the interval. After that, I'll go through the rest of the Jedi Knights and add to the interval the ones with the second most lightsabers.\n\nWhen I have a sequence of Jedi Knights with exactly the desired number of lightsabers for each color, I'm gonna return the minimum number of Jedi Knights that need to be left.\n\nSo, in the first iteration I'll try to pick the most blue Jedi Knight and add him/them to the interval. If I succeeded, I'll move to the next iteration and add the second most blue Jedi Knight to the interval. If I succeed again, I'll move to the next iteration and so on.\n\nIf I can't add a blue Jedi Knight in the first iteration, I'll add a red one. And so on.\n\nIn the worst case I'll have to check every Jedi Knight, so my algorithm will be linear in the number of Jedi Knights.\n\nThere's a lot of complicated stuff happening inside the main loop, but it's just a bunch of if/elif/else statements."
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3\\n3 3 1 2 2 1 1 3\\n1 1') == '1'\nassert solution('8 3\\n3 3 1 2 2 1 1 3\\n2 1 2') == '-1'\nassert solution('8 3\\n3 3 1 2 2 1 1 3\\n3 1 1') == '-1'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 1 2\\n2 3\") == \"2\"\nassert solution(\"8 3\\n1 2 1 2 2 1 1 3\\n2 3\") == \"1\"\nassert solution(\"7 2\\n2 1 2 3 1 2\\n3\") == \"0\"\nassert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"9 1\\n1 1 2 3 5 8 13 21 34\\n9\") == \"4\"\n\"\"\"\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nlightsaber = list(map(int, sys.stdin.readline().split()))\nk = list(map(int, sys.stdin.readline().split()))\n\nk = sorted(k, reverse=True)\n\nindex = [i for i in range(n)]\nres = 0\ni = 0\nfor j in range(m):\n    while(lightsaber[index[i]]!= k[j]):\n        res += 1\n        i = (i + 1) % n\n    i += 1"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open('input.txt').read()) == open('output.txt').read()\nprint(\"Hooray!\")\n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3\\n3 1 1') == '1'\nassert solution('8 3\\n2 2 1 1 3') == '1'\n\nassert solution('8 3\\n1 2 2 1 1 3') == '-1'\nassert solution('8 3\\n1 3 2 1 2 3') == '-1'\n\nassert solution('8 3\\n2 1 2 1 1 3') == '-1'\n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 1 1 2\\n3 1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(116401024) == \"YES\\n11640\\n1024\"\nassert solution(284254589153928171911281811000) == \"YES\\n2842545891539\\n28171911281811000\"\n\"\"\"\nimport math"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"116401024\\n97 1024\") == \"YES\\n11640\\n1024\"\nassert solution(\"284254589153928171911281811000\\n1009 1000\") == \"YES\\n2842545891539\\n28171911281811000\"\nassert solution(\"120\\n12 1\") == \"NO\"\n"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('116401024 97 1024') == \"YES\\n11640\\n1024\"\nassert solution('284254589153928171911281811000 1009 1000') == \"YES\\n2842545891539\\n28171911281811000\"\nassert solution('120 12 1') == \"NO\"\nprint(solution(stdin))\n"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"116401024\") == \"YES\\n1164\\n01024\"\nassert solution(\"284254589153928171911281811000\") == \"YES\\n2842545891539\\n28171911281811000\"\nassert solution(\"120\") == \"NO\"\nassert solution(\"12 1\") == \"NO\""
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(116401024) == 'YES\\n1164010'\nassert solution(284254589153928171911281811000) == 'YES\\n284254589153928171911281811000'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"116401024\") == \"YES\\n11640\\n1024\"\nassert solution(\"284254589153928171911281811000\") == \"YES\\n2842545891539\\n28171911281811000\"\nassert solution(\"120\") == \"NO\"\n"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('116401024') == 'YES\\n11640\\n1024'\nassert solution('284254589153928171911281811000') == 'YES\\n2842545891539\\n28171911281811000'\nassert solution('120') == 'NO'\n"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'NO'\nassert solution('116401024\\n97 1024') == 'YES\\n11640\\n1024'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('116401024 97 1024') == 'YES\\n11640\\n1024'\nassert solution('284254589153928171911281811000 1009 1000') == 'YES\\n2842545891539\\n28171911281811000'\nassert solution('120 12 1') == 'NO'\nassert solution('12 1') == 'NO'\n\nimport unittest\nfrom unittest.mock import patch\nfrom io import StringIO\nimport sys\n\nclass Tests(unittest.TestCase):\n    def test_solution(self):\n        capturedOutput = StringIO()\n        sys.stdout = capturedOutput\n        solution('116401024 97 1024')\n        sys.stdout = sys.__stdout__\n        self.assertEqual(capturedOutput.getvalue(), 'YES\\n11640\\n1024\\n')"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"116401024 97 1024\") == \"YES\\n11640 1024\"\nassert solution(\"284254589153928171911281811000 1009 1000\") == \"YES\\n284254589153928171911281811000 28171911281811000\"\nassert solution(\"120 12 1\") == \"NO\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == 0\n\nassert solution('3 7') == 1\n\nassert solution('13 10') == 1\n\nprint(solution(input()))\n\na = int(input())\nb = int(input())\nprint(a | b)\n"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0'\n\nassert solution('3 7') == '0'\n\nassert solution('13 10') == '1'\n"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\">1<  >2<\") == 3\nassert solution(\">13< >10<\") == 1\nassert solution(\">1  >2<\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == 0\nassert solution('3 7') == 0\nassert solution('13 10') == 1\n\"\"\"\n"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == 0\nassert solution('3 7') == 0\n\"\"\"\nimport math"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == 0\nassert solution('3 7') == 0\nassert solution('13 10') == 1\nprint('PASSED')\n"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 7') == 0\n\nassert solution('13 10') == 1\n\nprint(solution('3 7'))\nprint(solution('13 10'))"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 7\") == \"0\"\nassert solution(\"13 10\") == \"1\"\n\nprint(\"test passed\")\n"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 7\") == \"0\"\nassert solution(\"13 10\") == \"1\"\n\nprint(solution(\"1 1\"))\nprint(solution(\"3 7\"))\nprint(solution(\"13 10\"))\n'''\n\nimport sys"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 7\") == \"0\"\nassert solution(\"13 10\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == \"1\"\nassert solution(\"5\\n\") == \"2\"\nassert solution(\"14\\n\") == \"4\"\nassert solution(\"9999999\\n\") == \"6543\"\n"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 1\nassert solution('5') == 2\nassert solution('11') == 4\n\n\n-----Hint-----\n\nUse the concept of extended Euclidean algorithm.\n\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == '1'\nassert solution(\"5\") == '2'\n\"\"\"\n"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == 2\nassert solution(\"3\") == 1"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('7') == '4'\nassert solution('47') == '8'\nassert solution('19') == '8'\n"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\n\n\"\"\"\n\nfrom math import sqrt\nfrom collections import Counter\n\np = int(stdin.readline())\n"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\n\"\"\""
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\n\n\"\"\""
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == '1'\nassert solution(\"5\") == '2'\n\"\"\""
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 2') == '0'\nassert solution('2 0') == '2'\nassert solution('2 2') == '5'\nassert solution('2000 2000') == '674532367'"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"5\"\n\n\"\"\"\n\nn, m = map(int, stdin.split())\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 2\\n') == '0'\nassert solution('2 0\\n') == '2'\nassert solution('2 2\\n') == '5'\nassert solution('2000 2000\\n') == '674532367'\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\"\n\nassert solution(\"0 1\") == \"1\"\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\""
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 0') == '2'\nassert solution('2 2') == '5'\nassert solution('2000 2000') == '674532367'\n\n\"\"\"\n\nn, m = [int(i) for i in stdin.split()]\n\nresult = 0\nfor i in range(n+m+1):\n    result += n - i + m - i + 1\n\nprint(result % 998244353)\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\"\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\""
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 2') == '0'\nassert solution('2 0') == '2'\nassert solution('2 2') == '5'\nassert solution('2000 2000') == '674532367'\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 2\") == '0'\nassert solution(\"2 0\") == '2'\nassert solution(\"2 2\") == '5'\nassert solution(\"2000 2000\") == '674532367'\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 3\\n1 2 3\\n2 8\\n1 4 5\") == '2 3'\nassert solution(\"10 0\\n\") == '5 9'\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 1\n2 2''') == '0 0'\nassert solution('''3 2\n1 2\n2 8''') == '2 3'\nassert solution('''9 3\n1 2 3\n2 8\n1 4 5''') == '2 3'\nassert solution('''9 3\n1 2 3\n2 8\n1 4 5\n6 7\n1 1\n1 6\n1 7\n1 8\n1 9''') == '2 9'\nassert solution('''9 3\n1 2 3\n2 8\n1 4 5\n6 7\n1 1\n1 6\n1 7\n1 8\n1 9\n10 10\n1 1\n1 10\n1 11''') == '5 9'\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n2 1\\n2 2\") == \"0 0\"\nassert solution(\"9 3\\n1 2 3\\n2 8\\n1 4 5\") == \"2 3\"\nassert solution(\"10 0\") == \"5 9\"\nassert solution(\"1 2 3\\n2 8\\n1 4 5\") == \"2 3\"\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n2 1\\n2 2') == '0 0'\nassert solution('9 3\\n1 2 3\\n2 8\\n1 4 5') == '2 3'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 3\\n1 2 3\\n2 8\\n1 4 5\") == \"2 3\"\nassert solution(\"9 3\\n2 8\\n1 4 5\") == \"5 9\"\nassert solution(\"9 3\\n1 2 3\") == \"0 0\"\nassert solution(\"9 3\\n2 8\") == \"5 9\"\nassert solution(\"9 3\\n1 4 5\") == \"2 3\"\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n2 2\") == \"0 0\"\nassert solution(\"9 3\\n1 2 3\\n2 8\\n1 4 5\") == \"2 3\""
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2 1\\n2 2') == '0 0'\nassert solution('9 3\\n1 2 3\\n2 8\\n1 4 5') == '2 3'\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n2 1\\n2 2') == '0 0'\nassert solution('9 3\\n1 2 3\\n2 8\\n1 4 5') == '2 3'\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2 1\\n2 2\") == \"0 0\"\nassert solution(\"9 3\\n1 2 3\\n2 8\\n1 4 5\") == \"2 3\"\nassert solution(\"10 0\") == \"5 9\"\nassert solution(\"6 5\\n3 4\\n1 2 3\\n4 5\\n2 6\\n5 7\\n1 8\\n3 9\\n6 10\\n4 11\\n1 12\\n7 13\\n6 14\\n4 15\\n8 16\\n9 17\\n5 18\\n13 19\\n12 20\\n9 21\\n5 22\\n14 23\\n12 24\\n22 25\\n17 26\\n15 27\\n14 28\\n13 29\\n12 30\\n24 31\\n25 32\\n23 33\\n22 34\\n21 35\\n20 36\\n19 37\\n18 38\\n17 39\\n16 40\\n15 41\\n14 42\\n33 43\\n32 44\\n31 45\\n30 46\\n29 47\\n28 48\\n27 49\\n26 50\\n25 51\\n24 52\\n33 53\\n32 54\\n31 55\\n30 56\\n29 57\\n28 58\\n27 59\\n26 60\\n25 61\\n24 62\\n23 63\\n22 64\\n21 65\\n20 66\\n19 67\\n18 68\\n17 69\\n16 70\\n15 71\\n14 72\\n33 73\\n32 74\\n31 75\\n30 76\\n29 77\\n28 78\\n27 79\\n26 80\\n25 81\\n24 82\\n23 83\\n22 84\\n21 85\\n20 86\\n19 87\\n18 88\\n17 89\\n16 90\\n15 91\\n14 92\\n33 93\\n32 94\\n31 95\\n30 96\\n29 97\\n28 98\\n27 99\\n26 100\\n25 101\\n24 102\\n23 103\\n22 104\\n21 105\\n20 106\\n19 107\\n18 108\\n17 109\\n16 110\\n15 111\\n14 112\\n33 113\\n32 114\\n31 115\\n30 116\\n29 117\\n28 118\\n27 119\\n26 120\\n25 121\\n24 122\\n23 123\\n22 124\\n21 125\\n20 126\\n19 127\\n18 128\\n17 129\\n16 130\\n15 131\\n14 132\\n33 133\\n32 134\\n31 135\\n30 136\\n29 137\\n28 138\\n27 139\\n26 140\\n25 141\\n24 142\\n23 143\\n22 144\\n21 145\\n20 146\\n19 147\\n18 148\\n17 149\\n16 150\")\n\nassert solution(\"3 2\\n1 2\\n2 3\") == \"1 0\"\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n2 8\\n1 4 5\\n\") == '2 3'\nassert solution(\"1 2\\n2 8\\n1 4\\n\") == '2 3'\nassert solution(\"1 2\\n2 8\\n\") == '2 3'\nassert solution(\"1 2\\n2 8\\n1 4\\n\") == '2 3'\nassert solution(\"1 2\\n2 8\\n1 4\\n1 6\\n1 7\\n1 9\\n\") == '2 3'\n\n\"\"\"\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 1 10') == '-1'\nassert solution('10 6 40') == '2 8 14 20 26'\n\n\"\"\""
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 5') == '2 3 4'\n\"\"\"\n\n\nfrom sys import stdin\n\ny, k, n = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1 10\") == \"-1\"\nassert solution(\"10 6 40\") == \"2 8 14 20 26\"\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 10\") == \"2 8 14 20 26\"\nprint(\"Tests passed.\")"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 1 10') == '-1'\nassert solution('10 6 40') == '2 8 14 20 26'\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 10\") == \"-1\"\nassert solution(\"10 6 40\") == \"2 8 14 20 26\""
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 6 40\") == \"2 8 14 20 26\"\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 1 10') == '-1'\nassert solution('10 6 40') == '2 8 14 20 26'\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1 10\") == '-1'\nassert solution(\"10 6 40\") == '2 8 14 20 26'\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 10\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nXXOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\") == \"Yes\"\n\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\") == \"No\"\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nXOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\\n\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\\n\") == \"No\"\nassert solution(\"8\\nXOZOXXOXXOXOXO\\nXOZOXXOXOXOXO\\nXOXXOXOXXOXOX\\nXOXOXOXXOXOX\\nXOXXOXOXXOXOX\\nXOXOXOXXOXOX\\nXOXXOXOXXOXOX\\nXOXOXOXXOXOX\\nXOXXOXOXXOXOX\\nXOZOXXOXOXOXO\\nXOZOXXOXOXOXO\\n\") == \"No\"\nassert solution(\"5\\nOXOXOXOX\\nOXOXOXOX\\nOXOXOXOX\\nOXOXOXOX\\nOXOXOXOX\\n\") == \"Yes\"\nassert solution(\"5\\nXXXOOOXO\\nOOXOOXXX\\nOOXOOXXX\\nOOXOOXXX\\nOOXOOXXX\\n\") == \"No\"\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nXXOO\\nXXXO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX') == 'Yes'\nassert solution('2\\nXX\\nOO\\nXO\\nOX') == 'No'\n\"\"\"\nimport sys"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nXXXX\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\") == \"No\"\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nXXOO\\nXXXO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\\n\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\\n\") == \"No\"\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nXXOO\\nXXOO\\nOOOO\\nXXXX\\nXXOO\\nXOOX\\nXOXO\\nXOXX\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\") == \"No\"\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n\"\n                \"XOOO\\n\"\n                \"XXOO\\n\"\n                \"OOOO\\n\"\n                \"XXXX\\n\"\n                \"XOOO\\n\"\n                \"XOOO\\n\"\n                \"XOXO\\n\"\n                \"XOXX\") == 'Yes'\n\nassert solution(\"2\\n\"\n                \"XX\\n\"\n                \"OO\\n\"\n                \"XO\\n\"\n                \"OX\") == 'No'\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n'\n                'XOOO\\n'\n                'XXOO\\n'\n                'OOOO\\n'\n                'XXXX\\n'\n                'XOOO\\n'\n                'XOOO\\n'\n                'XOXO\\n'\n                'XOXX') == 'Yes'\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nXOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nXXOO\\nXXOO\\nOOOO\\nXXXX\\nXXOO\\nXXOO\\nXOXO\\nXOXX') == 'Yes'\nassert solution('2\\nXX\\nOO\\nXO\\nOX') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"both\") == \"both\"\nassert solution(\"array\") == \"array\"\nassert solution(\"automaton\") == \"automaton\"\nassert solution(\"need\") == \"need tree\"\n\n\"\"\"\n"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need tree\") == \"need tree\"\nassert solution(\"hot\") == \"hot\"\n\"\"\"\n"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need tree\") == \"need tree\"\nassert solution(\"hot\") == \"hot\"\n\n\"\"\""
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == t\n\"\"\"\n"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"both\") == \"both\"\nassert solution(\"array\") == \"array\"\nassert solution(\"automaton\") == \"automaton\"\nassert solution(\"need tree\") == \"need tree\"\nassert solution(\"hot\") == \"hot\"\n\n\n----\n\n\"\"\""
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need tree\") == \"need tree\"\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0434\u0432\u0435 \u0431\u0443\u043a\u0432\u044b \"z\", \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0440\u043e\u0432\u043d\u043e \u0442\u0440\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430.\n\nSample Input:\n\nzabcz\nzzz\nzzxzz\nzz\nzxz\nzzxzxxz\n\nSample Output:\n\nzabcz\nzzxzz\n\n\"\"\"\n"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need tree\") == \"need tree\"\n\n\"\"\""
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need tree\") == \"need tree\"\n\"\"\"\n\nfrom collections import defaultdict, Counter"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s1) == s2\nassert solution(s2) == s3\n\nassert solution(s3) == s4\n\"\"\"\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n#.#\\n...\") == \"YES\"\nassert solution(\"4\\n#.#\\n#..\\n####\") == \"NO\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n###.#\\n#####\") == \"YES\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n....#\\n#..##\") == \"NO\"\nassert solution(\"4\\n..#.#\\n#..#.\\n##.#.\\n.....\") == \"YES\"\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n#.#\\n...\\n#.#\") == \"YES\"\nassert solution(\"4\\n##.#\\n#...\\n####\\n##.#\") == \"NO\"\n\"\"\""
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('.###') == 'YES'\nassert solution('.#.#') == 'YES'\nassert solution('####') == 'YES'\nassert solution('#.#.#') == 'YES'\nassert solution('###.#') == 'YES'\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES'\nassert solution('#') == 'NO'\nassert solution('#.') == 'YES'\nassert solution('.#.') == 'YES'\nassert solution('#.##') == 'NO'\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"###\") == \"YES\"\nassert solution(\"#..\") == \"NO\"\nassert solution(\"#.#\") == \"YES\"\nassert solution(\"#.#.\") == \"NO\"\nassert solution(\"######\") == \"YES\"\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n#.#\\n...\\n#.#\") == \"YES\"\nassert solution(\"4\\n##.#\\n#...\\n####\\n##.#\") == \"NO\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n###.#\\n#####\") == \"YES\"\n\"\"\""
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n#.#\\n...\\n#.#') == 'YES'\nassert solution('3\\n#.#\\n...') == 'NO'\n\"\"\"\n\nimport sys\n\nimport collections"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n#.#\\n...\\n#.#\\n') == 'YES'\nassert solution('4\\n#.#\\n#...\\n####\\n#.#\\n') == 'YES'\nassert solution('5\\n#.###\\n....#\\n#....\\n....#\\n#..##\\n') == 'YES'\nassert solution('5\\n#.###\\n....#\\n#....\\n....#\\n#..##\\n') == 'YES'\nassert solution('5\\n#.###\\n....#\\n#....\\n....#\\n#..##\\n') == 'YES'\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n....#\\n#..##\") == \"YES\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n....#\\n#..##\") == \"NO\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n....#\\n#.###\") == \"NO\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n....#\\n#.###\") == \"YES\"\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n#.#\\n...\\n#.#\") == \"YES\"\nassert solution(\"4\\n##.#\\n#...\\n####\") == \"NO\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n###.#\\n#####\") == \"YES\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 10, 3, 3) == 2\nassert solution(3, 10, 1, 3) == 3\n\"\"\"\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 1 3\") == \"3\"\nassert solution(\"3 10 3 3\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 3 3\") == 2\n\"\"\"\n\nk, a, b, v = map(int, input().split())\n\nn = min(k, b // v)\nwhile n * v <= b:\n    n += 1\nprint(n)\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 3 3\") == 2\nassert solution(\"3 10 1 3\") == 3\nassert solution(\"100 100 1 1000\") == 1\nassert solution(\"1 1 1 1000\") == 0\n\"\"\"\n\nk, a, b, v = map(int, input().split())\n\ndiv = a // b"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 1 3\") == \"3\"\nassert solution(\"3 10 3 3\") == \"2\"\nassert solution(\"100 100 1 1000\") == \"1\""
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 1 3\") == \"3\"\nassert solution(\"3 10 3 3\") == \"2\"\nassert solution(\"100 100 1 1000\") == \"1\"\nassert solution(\"100 100 3 1000\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10 1 3\") == \"3\"\nassert solution(\"3 10 3 3\") == \"2\"\nassert solution(\"100 100 1 1000\") == \"1\"\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 3 3\") == \"2\"\nassert solution(\"3 10 1 3\") == \"3\"\nassert solution(\"100 100 1 1000\") == \"1\"\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10 1 3\") == 3\n\nassert solution(\"3 10 3 3\") == 2\n\nassert solution(\"100 100 1 1000\") == 1\n\nassert solution(\"20 1000 1 100\") == 5\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 1 3\") == \"3\"\n\nassert solution(\"3 10 3 3\") == \"2\"\n\nassert solution(\"100 100 1 1000\") == \"1\"\n\nassert solution(\"100 10000 1 1000\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 10 1') == '6'\nassert solution('4 1 6 4') == '3'\nassert solution('4 10 10 10') == '0'\nassert solution('4 10 1 6') == '6'\nassert solution('4 1 10 1') == '6'\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 6 4') == '3'\nassert solution('3 4 4 2') == '6'\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 6 4\") == '3'\nassert solution(\"3 4 4 2\") == '6'\nassert solution(\"10 5 6 4\") == '6'\nassert solution(\"1 11 4 2\") == '3'\nassert solution(\"10 10 10 1\") == '3'\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 1 6 4\\n3 4 4 2') == '3'\nassert solution('3\\n10 1 10\\n1 10 1 1') == '6'\nassert solution('3\\n10 1 10\\n1 10 1 1') == '3'\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 6 4\") == \"3\"\nassert solution(\"3 4 4 2\") == \"6\"\nassert solution(\"4 10 5 6\") == \"6\"\nassert solution(\"10 1 10 1\") == \"3\"\nassert solution(\"1 10 1 10\") == \"3\""
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 6 4\") == \"Left\"\n\n\"\"\""
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 6 4\") == '3'\nassert solution(\"3 4 4 2\") == '6'\nassert solution(\"10 1 10 1\") == '3'\nassert solution(\"1 10 1 10\") == '3'\nassert solution(\"10 1 10 1\") == '3'\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4\\n2 1 6 4\\n3 4 4 2\"\n) == \"3\"\nassert solution(\n    \"4\\n10 5 6 4\\n1 11 4 2\"\n) == \"6\"\nassert solution(\n    \"3\\n10 1 10\\n1 10 1 1\"\n) == \"3\"\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 6 4') == 3\nassert solution('3 4 4 2') == 6\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000000)"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\\n4 5 6\") == \"Karen\"\nassert solution(\"5\\n2 4 6 8 10\\n9 7 5 3 1\") == \"Karen\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))\n\nd = dict()\n\nfor x in a:\n    if x in d:\n        d[x] += 1\n    else:\n        d[x] = 1\nfor x in b:\n    if x in d:\n        d[x] -= 1\n    else:\n        d[x] = -1"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 6 8 10\\n9 7 5 3 1\") == \"Karen\"\nassert solution(\"3\\n1 2 3\") == \"Koyomi\"\nassert solution(\"4\\n1 2 3 4\") == \"Koyomi\"\nassert solution(\"5\\n2 4 6 8 10\\n9 7 5 3 1\") == \"Karen\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"Koyomi\"\n"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''5\n2 4 6 8 10\n9 7 5 3 1''') == 'Karen'\n\nassert solution(\n'''5\n9 7 5 3 1''') == 'Koyomi'\n\nassert solution(\n'''5\n1 2 3 4 5\n9 8 7 6 5''') == 'Koyomi'\n\nassert solution(\n'''5\n4 5 6 7 8\n3 2 1 9 10''') == 'Koyomi'\n\nassert solution(\n'''5\n1 2 3 4 5\n6 7 8 9 10''') == 'Koyomi'"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\\n4 5 6\") == \"Karen\"\nassert solution(\"3\\n4 5 6\\n1 2 3\") == \"Koyomi\""
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'Koyomi'"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\\n4 5 6\") == \"Karen\"\nassert solution(\"5\\n2 4 6 8 10\\n9 7 5 3 1\") == \"Karen\"\nassert solution(\"5\\n1 2 3 4 5\\n9 7 5 3 1\") == \"Koyomi\"\nassert solution(\"5\\n5 5 5 5 5\\n4 4 4 4 4\") == \"Koyomi\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"Koyomi\"\n\n\"\"\"\n\nn = int(stdin.readline())\na = set(map(int, stdin.readline().split()))\nb = set(map(int, stdin.readline().split()))\n\ncount = 0\nfor x in a:\n    for y in b:\n        if x ^ y in a:\n            count += 1\n\nprint(\"Karen\" if count % 2 else \"Koyomi\")\n"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 4 5') == 'Koyomi'\nassert solution('1 2 3 4 5 6 7 8 9 10') == 'Karen'\nassert solution('9 7 5 3 1 2 4 6 8 10') == 'Koyomi'\nassert solution('2 4 6 8 10 9 7 5 3 1') == 'Karen'\nassert solution('1 2 3') == 'Koyomi'\n"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == \"Karen\"\nassert solution(5) == \"Karen\"\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1 3 4\") == \"Karen\"\nassert solution(\"5 4 3 2 1\") == \"Karen\"\nassert solution(\"5 4 2 1 3\") == \"Koyomi\"\nassert solution(\"1 1 1 1 1 1\") == \"Koyomi\"\nassert solution(\"2 4 6 8 10\") == \"Karen\"\n\n\"\"\"\n"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3\\n4 5 6') == 'Karen'\nassert solution('5\\n2 4 6 8 10\\n9 7 5 3 1') == 'Karen'\n"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 4 1 1''') == '7'\n\n\"\"\"\nimport numpy as np\nimport functools\n\nA, B, n, x = map(int, input().split())"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\nassert solution(\"3 4 2 1\") == \"25\"\nassert solution(\"3 4 3 1\") == \"79\"\n"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 1 1') == '7'\nassert solution('3 4 2 1') == '25'\nassert solution('3 4 3 1') == '79'\n\nprint('Success')"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\nassert solution(\"3 4 2 1\") == \"25\"\n\"\"\"\n\nA, B, n, x = (int(i) for i in stdin.split())"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\nassert solution(\"3 4 2 1\") == \"25\"\nassert solution(\"3 4 3 1\") == \"79\"\nassert solution(\"5 5 2 1\") == \"44\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\nassert solution(\"3 4 2 1\") == \"25\"\nassert solution(\"3 4 3 1\") == \"79\"\n"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 1 1') == '7'\nassert solution('3 4 2 1') == '25'\nassert solution('3 4 3 1') == '79'\n\n\"\"\"\n"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\nassert solution(\"3 4 2 1\") == \"25\"\nassert solution(\"3 4 3 1\") == \"79\"\n\"\"\"\n\nA, B, n, x = map(int, input().split())"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\nassert solution(\"3 4 2 1\") == \"25\"\nassert solution(\"3 4 3 1\") == \"79\"\n\"\"\"\n\na, b, n, x = [int(x) for x in input().split()]\n\nc = n % 2\n\ns = a + b * c\n\ni = 1\n\nwhile i < n:\n    s = a * s + b * (c * (c + 1)) // 2\n    c += 1\n    i += 1\n\ns = a * s + b * (c * (c + 1)) // 2\n\nprint(s % (10**9 + 7))\n"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\nassert solution(\"3 4 2 1\") == \"25\"\nassert solution(\"3 4 3 1\") == \"79\"\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 12 18 3 3\") == \"YES\\n3 4\"\nassert solution(\"3 5 12 18 3 3\") == \"YES\\n3 4\"\nassert solution(\"4 2 1 5 17 19 4 5\") == \"NO\\n1 1\"\nassert solution(\"4 2 1 5 17 19 4 5\") == \"NO\\n1 1\"\n\nprint(solution(\"3 5 12 18 3 3\"))\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 2 3\\n2 1\\n3 2 3\") == \"YES\\n1 3\"\nassert solution(\"3 5\\n3 12 18\\n2 6 5 3 3\\n\") == \"NO\\n\"\nassert solution(\"1 10\\n1 2 3 4 5 6 7 8 9 10\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n2 9\\n2 10\\n\") == \"YES\\n4 1\"\n\"\"\"\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\n3 12 18\\n2 6 5 3 3') == 'YES\\n3 4'\nassert solution('4 2\\n1 5 17 19\\n4 5') == 'NO'\nassert solution('4 2\\n1 5 17 19\\n2 1') == 'YES\\n1 1'\n\"\"\"\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('input.txt').read()) == 'YES\\n2 1'\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 12 18\") == \"YES\\n3 4\"\nassert solution(\"3 5 12 18\") == \"YES\\n3 4\"\nassert solution(\"3 5 12 18\") == \"YES\\n3 4\"\nassert solution(\"3 5 12 18\") == \"YES\\n3 4\"\nassert solution(\"4 2 1 5 17 19\") == \"NO\\n1 1\"\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n3 12 18\\n2 6 5 3 3\") == \"YES\\n3 4\"\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 5\n3 12 18\n2 6 5 3 3\n''') == 'YES\\n3 4'\nassert solution('''4 2\n1 5 17 19\n4 5\n''') == 'NO\\n'\nassert solution('''4 2\n1 5 17 19\n2 1\n''') == 'YES\\n1 1'\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 12 18\\n2 6 5 3 3\") == 'YES'\nassert solution(\"4 2\\n1 5 17 19\\n4 5\") == 'NO'\nassert solution(\"3 5 12 18\\n2 6 5 3 3\\n2 1\") == 'YES'\nassert solution(\"3 5 12 18\\n2 6 5 3 3\\n4 5\") == 'NO'\n\nassert solution(\"3 5 12 18\\n2 6 5 3 3\\n4 5\\n3 1\") == 'YES'\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 12 18\\n2 6 5 3 3') == 'YES\\n3 4'\nassert solution('4 2\\n1 5 17 19\\n4 5') == 'NO\\n1 1'\n\nassert solution('3 5 12 18\\n2 6 5 3 3\\n2 6 5 3 3') == 'YES\\n3 4\\n3 4'\nassert solution('3 5 12 18\\n2 6 5 3 3\\n1 2') == 'YES\\n1 1'\nassert solution('3 5 12 18\\n2 6 5 3 3\\n1 1') == 'YES\\n1 1'\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 12 18\") == \"YES\"\nassert solution(\"3 5 17 19\") == \"NO\"\nassert solution(\"4 2 1 5 17 19\") == \"YES\"\nassert solution(\"1 5 17 19\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 11\") == \"2 7 1 3 6 5 4\"\nassert solution(\"1000 999\") == \"1 3 6 2 7 8 9 10 4 5\"\nassert solution(\"7 11\") == \"2 7 1 3 6 5 4\"\nassert solution(\"4 2\") == \"1 2 3 4\"\nassert solution(\"1 2\") == \"1 2\"\n"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7 11\n2 4 7 3\n''') == '2 7 1 3 6 5 4'\nassert solution('''1000 999\n10 20 30 40\n''') == '-1'\n"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 11\\n2 4 7 3\") == \"2 7 1 3 6 5 4\"\nassert solution(\"1000 999\\n10 20 30 40\") == \"11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 11\\n2 4 7 3\") == \"2 7 1 3 6 5 4\"\nassert solution(\"1000 999\\n10 20 30 40\") == \"-1\"\n"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2\\n2 3\") == \"1 2 3\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\") == \"-1\"\nassert solution(\"6 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 2 4 5 3\"\nassert solution(\"7 7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\") == \"1 2 3 4 5 6 7\"\nassert solution(\"8 7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\") == \"1 2 3 4 5 6 7 8\"\n"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 11\\n2 4 7 3\") == \"2 7 1 3 6 5 4\""
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 11\\n2 4 7 3\") == \"2 7 1 3 6 5 4\"\nassert solution(\"1000 999\\n10 20 30 40\") == \"-1\"\n"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 11\\n2 4 7 3\") == \"2 7 1 3 6 5 4\"\n"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 11 2 4 7 3') == '2 7 1 3 6 5 4'\nassert solution('1000 999 10 20 30 40') == '-1'\n"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 3') == '1 3 1 2','sample 1'\nassert solution('5 2\\n1 2 4 3 5') == '1 2 3 5 4','sample 2'\nassert solution('6 5\\n1 5 2 3 4 6') == '1 6 2 3 4 5','sample 3'\n\"\"\""
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n') == '2'\nassert solution('8\\n') == '1'\n\"\"\"\nimport math"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5) == 2\nassert solution(8) == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '1'\nassert solution('10') == '0'\n\nimport sys\nassert sys.version_info >= (3,7)\n\"\"\"\nimport sys\nimport io"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == 2\nassert solution(\"8\") == 1\n\"\"\""
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"1\"\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n\") == \"2\\n\"\n\"\"\""
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5) == 2\nassert solution(8) == 1\n\"\"\"\n"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"1\"\n"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '1'\nassert solution('7') == '1'\n\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5) == 2\nassert solution(8) == 1\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ZCTH\") == 2\nassert solution(\"ZDATG\") == 5\nassert solution(\"AFBAKC\") == 16\n\"\"\"\n\nimport unittest\nfrom typing import List\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ZCTH\") == \"2\"\nassert solution(\"ZDATG\") == \"5\"\nassert solution(\"AFBAKC\") == \"16\"\n\"\"\"\n\nfrom itertools import chain\nfrom collections import Counter"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ZCTH\") == \"2\"\nassert solution(\"ZDATG\") == \"5\"\nassert solution(\"AFBAKC\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution([\"ZCTH\"]) == \"2\"\nassert solution([\"ZDATG\"]) == \"5\"\nassert solution([\"AFBAKC\"]) == \"16\"\n\"\"\"\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ZCTH') == 2\nassert solution('ZDATG') == 5\nassert solution('AFBAKC') == 16\nassert solution('GTG') == 0\nassert solution('GTGTCATG') == 3\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ZCTH\") == 2\nassert solution(\"ZDATG\") == 5\nassert solution(\"AFBAKC\") == 16\n\n\"\"\""
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ZCTH') == 2\n\nassert solution('ZDATG') == 5\n\nassert solution('AFBAKC') == 16"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ZCTH') == '2'\nassert solution('ZDATG') == '5'\nassert solution('AFBAKC') == '16'\n\n\"\"\""
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ZCTH\") == 2\nassert solution(\"ZDATG\") == 5\nassert solution(\"AFBAKC\") == 16\nprint(\"Test pass.\")\n\n----"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ZCTH\") == \"2\"\nassert solution(\"ZDATG\") == \"5\"\nassert solution(\"AFBAKC\") == \"16\"\nprint('All tests passed.')\n"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 6\\n') == '4'\nprint('Test passed')"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 6') == '4'\n\"\"\""
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\") == 4\n\n------------------\nMAIN FUNCTION\n------------------\n"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 6\\n') == '4'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 6\\n\") == \"4\"\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 6\\n') == '4'\nprint('OK!')\n\n'''\nimport sys\nfrom collections import defaultdict\n\nn, m = map(int, sys.stdin.readline().split())\n\ncounts = defaultdict(int)\ncount = 0\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        if (i * j) % (n + 1) == 1:\n            count += 1\n        counts[count % (10 ** 9 + 7)] += 1\n\nprint(counts[m])\n\n'''"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 6\\n') == '4'\nassert solution('2 4\\n') == '2'"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('2 4') == 1\nassert solution('2 3') == 0\nassert solution('3 3') == 0\n"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 6\\n') == '4'\nassert solution('2 6\\n') == '4'\nassert solution('4 4\\n') == '1'\nassert solution('4 4\\n') == '1'\nassert solution('4 5\\n') == '0'\n"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 6\") == \"4\"\nassert solution(\"1 10\") == \"9\"\n\"\"\"\n\nfrom sys import stdin, stdout\n\nn, m = map(int, stdin.readline().split())\n\nans = 0\n"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 0.50 1\\n\") == \"0.5\"\nassert solution(\"4 0.20 2\\n\") == \"0.4\""
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(r'1 0.5 1') == '0.5'\nassert solution(r'4 0.2 2') == '0.4'\nassert solution(r'1 0.5 4') == '0.9375'\nassert solution(r'4 0.2 10') == '0.5'\nassert solution(r'20 0.001 0.25') == '0.3125'\n"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 0.5 1') == '0.5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 0.50 1\\n') == '0.5'\nassert solution('1 0.50 4\\n') == '0.9375'\nassert solution('4 0.20 2\\n') == '0.4'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 0.50 1') == '0.5'\nassert solution('1 0.50 4') == '0.9375'\n"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 0.50 1') == '0.5'\nassert solution('1 0.50 4') == '0.9375'\nassert solution('4 0.20 2') == '0.4'\n"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 0.50 1') == '0.5'\n\"\"\""
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 0.50 1') == '0.5'\nassert solution('1 0.50 4') == '0.9375'\nassert solution('4 0.20 2') == '0.4'\n\"\"\"\n\nfrom math import exp\n"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 0.50 1\\n') == '0.5'\nassert solution('1 0.50 4\\n') == '0.9375'\nassert solution('4 0.20 2\\n') == '0.4'\n"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0.50 1\") == \"0.5\"\nassert solution(\"1 0.50 4\") == \"0.9375\"\nassert solution(\"4 0.20 2\") == \"0.4\""
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == '3'\nassert solution('4 3') == '4'\n\"\"\"\n\nfrom math import sqrt\n\nx, y = map(int, input().split())\ncount = 0\n\nfor i in range(x + 1):\n    for j in range(y + 1):\n        if (i + j) % 2 == 1:\n            count += 1\n\nprint(count)\nfor i in range(count):\n    x, y = map(int, input().split())\n    print(x, y)\n"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"4\"\n"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2) == 3\nassert solution(4) == 4\n\"\"\""
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == 3\nassert solution('4 3') == 4\n\"\"\""
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"4\\n0 3\\n2 1\\n3 0\\n4 2\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == '3'\nassert solution('4 3') == '4'\n\n\"\"\""
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '3'\nassert solution('4 3') == '4'\n\"\"\""
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == 3\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"4 3\") == \"4\"\n\"\"\""
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == '3'\nassert solution(\"3 3\") == '4'\nassert solution(\"4 2\") == '3'\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 9\") == '9 6'\nassert solution(\"10 10 10 10\") == '1 2'\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == '6 2'\nassert solution(\"10 10 10 10\") == '1 2'\nassert solution(\"10 10 10 10\") == '1 2'\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 5 7 4 4 3') == '1 3\\n6 2\\n4 5'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1 3\\n6 2\\n4 5\\n7 8'\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 10 10 10') == '1 2\\n3 4'\nassert solution('1 5 7 4 4 3') == '1 3\\n6 2'\nassert solution('4 10 10 10') == '1 2\\n3 4'\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6\n1 5 7 4 4 3\n''') == '1 3\\n6 2\\n4 5'\nassert solution('''4\n10 10 10 10\n''') == '1 2\\n3 4'"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n    5\n    1 5 7 4 4 3\n    '''\n) == '1 3\\n6 2\\n4 5'\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 5 7 4 4 3\") == \"1 3\\n6 2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6') == ''\nassert solution('1 1 1 1 1 1') == '1 1'\nassert solution('5 5 5 5 5 5') == '5 5'\nassert solution('1 1 1 1 1 1') == '1 1'\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 5 7 4 4 3') == '1 3'\nassert solution('4\\n10 10 10 10') == '1 2'"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 5 7 4 4 3\") == \"1 3\"\n\"\"\"\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10 10 10\") == \"1 2\"\nassert solution(\"10 10 10 10\") == \"1 2\"\nassert solution(\"4 4 4 4\") == \"1 2\"\nassert solution(\"1 1 1 1\") == \"1 1\"\n\n\n\nThe code below prints \"Case #x: A\" for each test case.\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\\nB.Picks_is_the_author_of_this_problem\\nC.Picking_is_the_author_of_this_problem\\nD.Ftiasch_is_cute\") == \"D\"\nassert solution(\"A.ab\\nB.abcde\\nC.ab\\nD.abc\") == \"B\"\nassert solution(\"A.c\\nB.cc\\nC.c\\nD.c\") == \"C\"\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\\nB.Picks_is_the_author_of_this_problem\\nC.Picking_is_the_author_of_this_problem\\nD.Ftiasch_is_cute\") == \"D\"\nassert solution(\"A.ab\\nB.abcde\\nC.ab\\nD.abc\\n\") == \"C\"\nassert solution(\"A.c\\nB.cc\\nC.c\\nD.c\\n\") == \"B\"\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A.abcde\\nB.ab\\nC.ab\\nD.c\") == \"B\"\nassert solution(\"A.ab\\nB.abcde\\nC.ab\\nD.c\") == \"B\"\nassert solution(\"A.ab\\nB.c\\nC.ab\\nD.c\") == \"A\"\nassert solution(\"A.a_bc\\nB.abcde\\nC.ab\\nD.c\") == \"A\"\nassert solution(\"A.a_bc\\nB.b\\nC.ab\\nD.c\") == \"C\"\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A.VFleaKing_is_the_author_of_this_problem) == \"A\"\nassert solution(B.Picks_is_the_author_of_this_problem) == \"B\"\nassert solution(C.Picking_is_the_author_of_this_problem) == \"C\"\nassert solution(D.Ftiasch_is_cute) == \"D\"\nassert solution(A.ab) == \"C\"\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\") == \"A\"\nassert solution(\"B.Picks_is_the_author_of_this_problem\") == \"B\"\nassert solution(\"C.Picking_is_the_author_of_this_problem\") == \"C\"\nassert solution(\"D.Ftiasch_is_cute\") == \"D\"\nassert solution(\"A.ab\") == \"C\"\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A.ab\\nB.abcde\\nC.ab\\nD.abc\\n\") == \"C\"\nassert solution(\"A.ab\\nB.ab\\nC.ab\\nD.ab\\n\") == \"B\"\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A.ab\") == \"C\"\nassert solution(\"A.cc\") == \"C\"\nassert solution(\"A.c\") == \"B\"\nassert solution(\"B.abcde\") == \"D\"\n\"\"\"\n\n\nfrom collections import Counter\nimport re"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A.VFleaKing_is_the_author_of_this_problem\\nB.Picks_is_the_author_of_this_problem\\nC.Picking_is_the_author_of_this_problem\\nD.Ftiasch_is_cute\\n') == 'D'\nassert solution('A.ab\\nB.abcde\\nC.ab\\nD.abc\\n') == 'B'\nassert solution('A.c\\nB.cc\\nC.c\\nD.c\\n') == 'B'\n\n\n'''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport sys\nimport json\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A.ab\\nB.abcde\\nC.ab\\nD.abc\") == \"B\"\nassert solution(\"A.c\\nB.cc\\nC.c\\nD.c\") == \"C\"\n\"\"\"\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A.a') == 'A'\nassert solution('B.c') == 'B'\nassert solution('C.c') == 'C'\nassert solution('D.d') == 'D'\nassert solution('E.b') == 'E'\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1010) == 1\nassert solution(10110) == 0\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 1 4\n10110''') == '1'\nassert solution('''3 1 2\n010''') == '0'\nassert solution('''2 2 3\n010''') == '2'\nassert solution('''1 1 3\n010''') == '0'\nassert solution('''3 1 1\n010''') == '0'\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 4\") == 1\nassert solution(\"5 5 2\") == 0\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1010\") == 1\nassert solution(\"10101\") == 0\n\"\"\"\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101010\") == 0\nassert solution(\"101101\") == 0\nassert solution(\"101100\") == 1\nassert solution(\"101110\") == 1\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10110') == 0\nassert solution('10101') == 1"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101010\") == \"0\"\nassert solution(\"1010110\") == \"1\"\nassert solution(\"10101101010\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10110\") == \"0\"\nassert solution(\"10101\") == \"1\"\n\"\"\"\nimport sys\nfrom typing import List\n\nDEBUG = False\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nimport collections"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 4') == '1'\nassert solution('5 5 2') == '0'\n\n\"\"\"\n\nn, a, b = [int(s) for s in input().split()]\narr = [int(s) for s in input()]\n\na_i = None\nb_j = None\nfor i, s in enumerate(arr):\n    if s == 1:\n        a_i = i\n    if s == 1 and a_i is not None:\n        b_j = i"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\\n2 2\") == \"4\""
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\\n2 2\") == \"4\"\nassert solution(\"3\\n2 2\\n1 2\\n2 2\") == \"11\"\n\n\n\"\"\"\n\nimport sys\n\nlines = [line.split() for line in sys.stdin.readlines()]\n\nd = [int(x) for x in lines[0]]\ns = [int(x) for x in lines[1]]"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2\") == \"4\"\nassert solution(\"10 1\\n6 5\") == \"11\""
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 2\\n1 2\\n2 2') == '4'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\ns_d = []\n\nfor _ in range(n):\n    s_d.append([int(i) for i in sys.stdin.readline().strip().split()])\n\ndp = [0] * n\n\ndp[0] = s_d[0][0]\n\nfor i in range(1, n):\n    dp[i] = max(dp[i - 1] + s_d[i][0], s_d[i][1])\n\nprint(max(dp))\n"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\\n2 2\") == 4\nassert solution(\"3\\n1 2\\n2 2\") == 4\nassert solution(\"3\\n1 2\\n2 2\\n3 2\") == 6\nassert solution(\"3\\n10 1\\n6 5\") == 11\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == '4'\nassert solution(\"1 2\") == '3'\nassert solution(\"2 2\") == '4'\n"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 2\\n2 2') == 4\nassert solution('10 1\\n6 5') == 11\nassert solution('6 6\\n8 7') == 9\n\"\"\""
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2\\n2 2') == '4'\nassert solution('3\\n1 2\\n2 2') == '4'\nassert solution('2\\n10 1\\n6 5') == '11'"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n1 2\\n2 2') == '4'\nassert solution('10 1\\n6 5') == '11'\nassert solution('8 5\\n4 3\\n2 1') == '11'\nassert solution('9 4\\n3 2\\n4 1') == '8'\nassert solution('3 5\\n2 2\\n1 1') == '5'\n"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2\\n2 2\") == \"4\""
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\n\"\"\""
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\n\"\"\"\n\na = int(input())\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('179') == '1'\nassert solution('-1') == '9'\nassert solution('18') == '10'"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\n\"\"\"\n\na = int(input())\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('179') == '1'\nassert solution('-1') == '9'\nassert solution('18') == '10'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('179') == '1'\nassert solution('-1') == '9'\nassert solution('18') == '10'\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(179)) == \"1\"\nassert solution(str(-1)) == \"9\"\nassert solution(str(18)) == \"10\"\n"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"19\"\nassert solution(\"2\") == \"28\"\nassert solution(\"3\") == \"12\"\n\"\"\"\n\nimport sys\nimport os\n"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(19) or solution(str(input())) == str(28)\n"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"28\""
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"19\"\nassert solution(\"2\") == \"28\"\n\n---"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"19\"\nassert solution(\"2\") == \"28\""
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '19'\nassert solution('2') == '28'"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"19\"\nassert solution(\"2\") == \"28\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"19\"\nassert solution(\"2\") == \"28\"\n\n\"\"\"\n"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '19'\nassert solution('2') == '28'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\\n\") == \"2\"\n\nassert solution(\"3\\n0 0\\n0 0\\n0 0\\n\") == \"1\"\n\nassert solution(\"1\\n5 4\\n\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 0\\n3 1\\n3 4') == '2'\nassert solution('3\\n0 0\\n0 0\\n0 0') == '1'\nassert solution('1\\n5 4') == '5'\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2 0\n3 1\n3 4\n''') == '2'\nassert solution('''\n1\n5 4\n''') == '5'\n\n'''\n'''\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0\\n3 1\\n3 4\") == \"2\"\n\nassert solution(\"3 0\\n0 0\\n0 0\\n0 0\") == \"1\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 0\\n3 1\\n3 4') == 2\nassert solution('1\\n5 4\\n') == 5\nassert solution('3\\n0 0\\n0 0\\n0 0\\n') == 1\n\n\"\"\""
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\") == \"2\"\nassert solution(\"1\\n5 4\") == \"5\"\nassert solution(\"3\\n0 0\\n0 0\\n0 0\") == \"1\""
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\") == \"2\"\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\") == 2\nassert solution(\"3\\n0 0\\n0 0\\n0 0\") == 1\nassert solution(\"1\\n5 4\") == 5\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0\\n0 0\\n0 0\\n\") == \"1\"\nassert solution(\"3\\n0 0\\n0 0\\n0 0\\n\") == \"1\"\nassert solution(\"3\\n0 0\\n0 0\\n3 4\\n\") == \"2\"\nassert solution(\"3\\n0 0\\n0 0\\n1 1\\n\") == \"3\"\n\n\"\"\"\n\n\nclass Solution:\n    def __init__(self):\n        self.result = 0\n\n    def count(self, i: int, j: int) -> int:\n        if i == j:\n            self.result += 1\n        else:\n            self.count(i + 1, j)\n            self.count(i, j + 1)\n\n    def solution(self, stdin: str) -> str:\n        _ = int(stdin.readline())\n        scores = [list(map(int, stdin.readline().split())) for _ in range(0, _)]\n\n        if _ == 0:\n            return str(self.result)\n\n        for i in range(0, _):\n            for j in range(i + 1, _):\n                self.count(scores[i][0], scores[j][1])\n\n        return str(self.result)"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\") == 2\nassert solution(\"1\\n5 4\") == 5\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n2 1\n2 1\n10''') == '3'\n\nassert solution('''\n2 1\n2 1\n100''') == '-5'\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"6\"\n\nassert solution(\"2 1\") == \"3\"\n\nassert solution(\"2 1 1\") == \"6\"\n\nassert solution(\"100 100 100\") == \"-100\"\n\nassert solution(\"3 2 1\") == \"6\""
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 1\n2 1\n2''') == '3'\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n2 1\\n3\\n\") == \"1\"\nassert solution(\"4 1\\n2 1\\n10\\n\") == \"3\"\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n2 1\\n10\") == \"-5\"\nassert solution(\"2 1\\n1 1\\n10\") == \"3\"\nassert solution(\"10 1\\n3 1\\n10\") == \"0\"\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n2 1\\n10\\n') == '3'\nassert solution('2 1\\n2 1\\n100\\n') == '-5'"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n2 1\\n2\") == \"3\"\nassert solution(\"2 1\\n2 1\\n10\") == \"-5\""
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 1\n1 1 1\n2\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n3 1\n1 1 1\n2\n\"\"\"\n) == \"5\"\n\nassert solution(\n\"\"\"\n2 1\n2 1\n2\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n2 1\n2 1\n10\n\"\"\"\n) == \"-5\"\n\nassert solution(\n\"\"\"\n3 1\n1 1 1\n2\n\"\"\"\n) == \"1\""
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n2 1\\n2\") == 3\n\"\"\"\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n2 1\\n2') == '3'\nassert solution('3 10\\n1 2 4\\n5') == '0'\nassert solution('3 10\\n1 2 4\\n5') == '-5'\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\nIAO'15\nIAO'2015\nIAO'1\nIAO'9\nIAO'0''') == \"2015\\n12015\\n1991\\n1989\\n1990\"\n\nassert solution('''4\nIAO'9\nIAO'99\nIAO'999\nIAO'9999''') == \"1989\\n1999\\n2999\\n9999\"\n\nassert solution('''1\nIAO'9\n\nOutput\n1991''') == \"1991\"\n\nassert solution('''5\nIAO'15\nIAO'2015\nIAO'1\nIAO'9\nIAO'0''') == \"2015\\n12015\\n1991\\n1989\\n1990\"\n\nassert solution('''4\nIAO'9\nIAO'99\nIAO'999\nIAO'9999''') == \"1989\\n1999\\n2999\\n9999\""
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('IAO' + '0'*9 + '1'*9 + '2'*9 + '3'*9 + '4'*9 + '5'*9 + '6'*9 + '7'*9 + '8'*9 + '9'*9) == '1989'\nassert solution('IAO' + '0'*9 + '1'*9 + '2'*9 + '3'*9 + '4'*9 + '5'*9 + '6'*9 + '7'*9 + '8'*9 + '9'*9 + '9'*9) == '1999'\nassert solution('IAO' + '0'*9 + '1'*9 + '2'*9 + '3'*9 + '4'*9 + '5'*9 + '6'*9 + '7'*9 + '8'*9 + '9'*9 + '9'*9 + '9'*9) == '2999'\nassert solution('IAO' + '0'*9 + '1'*9 + '2'*9 + '3'*9 + '4'*9 + '5'*9 + '6'*9 + '7'*9 + '8'*9 + '9'*9 + '9'*9 + '9'*9 + '9'*9 + '9'*9 + '9'*9) == '9999'\nassert solution('IAO' + '0'*9 + '1'*9 + '2'*9 + '3'*9 + '4'*9 + '5'*9 + '6'*9 + '7'*9 + '8'*9 + '9'*9 + '9'*9 + '9'*9 + '9'*9 + '9'*9 + '9'*9 + '9'*9 + '9'*9 + '9'*9 + '9'*9) == '12015'\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"IAO'15\\nIAO'9\\nIAO'1\\nIAO'0\") == \"2015\\n1991\\n1989\\n1990\"\nassert solution(\"IAO'99\\nIAO'999\\nIAO'9999\\nIAO'11\\nIAO'9\") == \"1999\\n2999\\n9999\\n1991\"\nassert solution(\"IAO'9\\nIAO'99\\nIAO'999\\nIAO'9999\\nIAO'11\\nIAO'9\") == \"1999\\n2999\\n9999\\n1991\"\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"IAO'15\\nIAO'2015\\nIAO'1\\nIAO'9\\nIAO'0\") == \"2015\\n12015\\n1991\\n1989\\n1990\"\n\"\"\"\n\nfrom collections import deque\nimport re\nimport typing\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"IAO'9\") == \"1989\"\nassert solution(\"IAO'99\") == \"1999\"\nassert solution(\"IAO'999\") == \"2999\"\nassert solution(\"IAO'9999\") == \"9999\"\n\n\"\"\"\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"IAO'15\\nIAO'2015\\nIAO'1\\nIAO'9\\nIAO'0\") == \"2015\\n2012\\n1991\\n1989\\n1990\"\n\n\"\"\""
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"IAO'15\\nIAO'2015\\nIAO'1\\nIAO'9\\nIAO'0\") == \"2015\\n201215\\n1991\\n1989\\n1990\"\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"IAO'15\\nIAO'2015\\nIAO'1\\nIAO'9\\nIAO'0\") == \"2015\\n201215\\n1991\\n1989\\n1990\"\nassert solution(\"IAO'9\\nIAO'99\\nIAO'999\\nIAO'9999\") == \"99\\n1999\\n2999\\n9999\"\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('IAO'+'9'*10) == '1989'\nassert solution('IAO'+'99'*10) == '1999'\nassert solution('IAO'+'999'*10) == '2999'\nassert solution('IAO'+'9999'*10) == '9999'\nassert solution('IAO'+'9999'*100) == '9999'\n\n\"\"\"\n\nn = int(input())\n\nfor _ in range(n):\n    s = input()\n    if s.startswith('IAO') and s[-1].isdigit():\n        print(int(s[-1]))\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"IAO'9\\nIAO'99\\nIAO'999\\nIAO'9999\\nIAO'17\") == '1989\\n1999\\n2999\\n9999'"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == \"180\"\nassert solution(\"3\\n3 1\\n2 2\\n4 3\") == \"21\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == \"180\"\nassert solution(\"1\\n5 10\") == \"50\"\nprint(solution(\"3\\n10 1\\n20 2\\n30 3\"))\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\\n\") == \"180\"\nassert solution(\"3\\n3 1\\n2 2\\n4 3\\n\") == \"21\"\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == \"180\"\nassert solution(\"3\\n3 1\\n2 2\\n4 3\") == \"21\"\n\"\"\"\n\nn = int(input())\nw, h = 0, 0\n\nfor _ in range(n):\n    w_, h_ = map(int, input().split())\n    w += w_\n    h = max(h, h_)\n\nprint(w * h)\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\\n\") == \"180\"\nassert solution(\"3\\n3 1\\n2 2\\n4 3\\n\") == \"21\"\n\"\"\"\n\nn = int(input())\nw_h = [list(map(int, input().split())) for _ in range(n)]\na = []\nfor i in range(n):\n    a.append(sum(w_h[i]))\nprint(max(a) * max(w_h[0]))\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == \"180\"\nassert solution(\"3\\n3 1\\n2 2\\n4 3\") == \"21\"\nassert solution(\"1\\n5 10\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n10 1\\n20 2\\n30 3') == '180'\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n10 1\\n20 2\\n30 3') == '180'\nassert solution('1\\n5 10') == '50'\n\"\"\"\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n10 1\\n20 2\\n30 3\\n') == '180'\nassert solution('1\\n5 10\\n') == '50'\nassert solution('3\\n3 1\\n2 2\\n4 3\\n') == '21'\n\"\"\"\n\nn = int(input())\nw = [int(input()) for _ in range(n)]\nh = [int(input()) for _ in range(n)]\n\nw_sum = sum(w)\nh_sum = max(h)\n\nprint(w_sum * h_sum)\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n10 1\\n20 2\\n30 3') == '180'\nassert solution('3\\n3 1\\n2 2\\n4 3') == '21'\n\nassert solution('1\\n5 10') == '50'\n\"\"\"\nimport sys\nimport math\n\nn = int(input())\nw, h = [], []\nfor i in range(n):\n    a, b = [int(i) for i in input().split()]\n    w.append(a)\n    h.append(b)\n\nw = sorted(w)\nh = sorted(h)\n\nw = w[::-1]\nh = h[::-1]\n\na = 0\nfor i in range(len(w)):\n    a += (w[i] * h[i])\n\nprint(a)\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n2 1 4\\n\") == \"1\"\n\nassert solution(\"3 0\\n7 7 7\\n\") == \"0\"\n\nassert solution(\"6 3\\n1 3 4 6 9 10\\n\") == \"3\"\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\") == '1'\nassert solution(\"6 0\") == '0'\nassert solution(\"6 3\") == '3'\n\"\"\"\n\nn, d = map(int, input().split())\npoints = [int(i) for i in input().split()]\npoints.sort()\n\nfor point in points:\n    if point >= d:\n        print(points.index(point))\n        break\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n2 1 4\") == 1\nassert solution(\"3 0\\n7 7 7\") == 0\nassert solution(\"6 3\\n1 3 4 6 9 10\") == 3\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 4') == 1\nassert solution('3 0') == 0\nassert solution('6 3') == 3\n\n---\n\nimport sys"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n2 1 4') == 1\nassert solution('3 0\\n7 7 7') == 0\nassert solution('6 3\\n1 3 4 6 9 10') == 3\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n2 1 4\") == \"1\"\nassert solution(\"3 0\\n7 7 7\") == \"0\"\nassert solution(\"6 3\\n1 3 4 6 9 10\") == \"3\"\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n2 1 4\") == '1'\nassert solution(\"3 0\\n7 7 7\") == '0'\nassert solution(\"6 3\\n1 3 4 6 9 10\") == '3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n2 1 4\") == '1'\nassert solution(\"6 3\\n7 7 7\") == '0'\nassert solution(\"6 3\\n1 3 4 6 9 10\") == '3'\n\"\"\"\nimport math\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n2 1 4') == '1'\nassert solution('3 0\\n7 7 7') == '0'\nassert solution('6 3\\n1 3 4 6 9 10') == '3'\n\"\"\""
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\\n1 3 4 6 9 10\") == 3\nassert solution(\"3 1\\n2 1 4\") == 1\nassert solution(\"3 0\\n7 7 7\") == 0\nassert solution(\"6 1\\n1 1\") == 0"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\nC M\\nY Y\\n\") == \"#Color\"\nassert solution(\"3 2\\nW W\\nW W\\nB B\\n\") == \"#Black&White\"\nassert solution(\"1 1\\nW\\n\") == \"#Black&White\"\n\n---Problem---\n\nWe need a lot of monkeys for the mayor of the town. And every monkey is related to some animal. Now we have the information about the relation between the monkey and the animal, and we want to know if it is possible to build a perfect plan for the monkey catching the animal.\n\nEvery monkey is related to exactly one animal.\n\nEvery monkey can catch the same number of animals as another monkey.\n\nEvery monkey can catch only one type of animal.\n\nEvery monkey can catch only one type of animal.\n\n---Solution---\n\nThe way to solve this problem is using BFS.\n\nWe create an array with the number of animals for each monkey.\n\nFirst, we create an array with the possible animals.\n\nThen we create an empty set of animals caught by the monkeys.\n\nNow, we start with the monkey in the first row and column, so we initialize the first array element.\n\nThen we define a function that checks if we have reached the end of the row.\n\nIf we have reached the end, we increase the number of animals for the current column by 1.\n\nIf the array value for the current column is equal to 0, we add the current animal to the set.\n\nWe repeat this procedure for the next row.\n\nAt the end, we compare the set of the animals caught by the monkeys with the set of possible animals.\n\nIf they are equal, we return \"Yes\", otherwise - \"No\".\n\n-----Tests-----\n\n----Test 1----\nInput:\n3 4\nM M C M\nM M C M\nM M C M\nOutput:\nNo\n\n----Test 2----\nInput:\n2 3\nM M\nM M\nB B\nOutput:\nYes\n\n----Test 3----\nInput:\n3 4\nB B C M\nB B C M\nB B C M\nOutput:\nNo\n\n----Test 4----\nInput:\n3 3\nM M M\nM M M\nB B B\nOutput:\nNo\n\n----Test 5----\nInput:\n2 2\nC M\nY Y\nOutput:\nYes\n\n----Test 6----\nInput:\n1 1\nC\nOutput:\nYes\n\n----Test 7----\nInput:\n1 1\nG\nOutput:\nNo\n\n----Test 8----\nInput:\n2 3\nM M\nM M\nB B\nOutput:\nNo\n\n----Test 9----\nInput:\n1 1\nG\nOutput:\nYes\n\n----Test 10----\nInput:\n2 2\nC M\nM C\nOutput:\nNo\n\n----Test 11----\nInput:\n2 2\nC M\nM C\nOutput:\nYes\n\"\"\""
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\nC M\\nY Y\\n\") == \"#Color\"\n\nassert solution(\"3 2\\nW W\\nW W\\nB B\\n\") == \"#Black&White\"\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\nC M\\nY Y\\n\") == \"#Color\"\nassert solution(\"3 2\\nW W\\nW W\\nB B\\n\") == \"#Black&White\"\n\"\"\""
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\nC M\\nY Y\\n\") == \"#Color\"\nassert solution(\"3 2\\nW W\\nW W\\nB B\\n\") == \"#Black&White\"\nassert solution(\"1 1\\nW\\n\") == \"#Black&White\"\n\n\"\"\"\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\nC M\\nY Y\\n') == '#Color'\nassert solution('3 2\\nW W\\nW W\\nB B\\n') == '#Black&White'\nassert solution('1 1\\nW\\n') == '#Black&White'\n\n\"\"\"\n\n\"\"\"\nimport collections\nimport sys"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 2\nC M\nY Y\n''') == '#Color'\nassert solution('''3 2\nW W\nW W\nB B\n''') == '#Black&White'\nassert solution('''1 1\nW\n''') == '#Black&White'\nassert solution('''4 2\nC M G W\nC M G W\nC M G W\nC M G W\n''') == '#Black&White'\nassert solution('''4 4\nC M G W\nC M G W\nC M G W\nC M G W\n''') == '#Color'\n\n-----Test cases-----"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\nC M\\nY Y\\n') == '#Color'\nassert solution('3 2\\nW W\\nW W\\nB B\\n') == '#Black&White'\n\"\"\""
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\nC M\\nY Y\\n\") == \"#Color\"\nassert solution(\"3 2\\nW W\\nW W\\nB B\\n\") == \"#Black&White\"\nassert solution(\"1 1\\nW\\n\") == \"#Black&White\"\n\"\"\""
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\nC M\\nY Y\\n\") == '#Color'\nassert solution(\"3 2\\nW W\\nW W\\nB B\\n\") == '#Black&White'\n\"\"\"\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\nC M\\nY Y\\n\") == \"#Color\"\nassert solution(\"3 2\\nW W\\nW W\\nB B\\n\") == \"#Black&White\"\nassert solution(\"1 1\\nW\\n\") == \"#Black&White\"\nassert solution(\"1 1\\nY\\n\") == \"#Color\"\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"2\"\nassert solution(\"3 5\") == \"1\"\nassert solution(\"8 9\") == \"3\"\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 3\n-3 2 9 16''') == '6'\nassert solution('''5 2\n4 8 11 18 19''') == '5'"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n-3 2 9 16\") == 6\nassert solution(\"5 2\\n4 8 11 18 19\") == 5\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n-3 2 9 16\") == \"6\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n-3 2 9 16\") == \"6\"\nassert solution(\"5 2\\n4 8 11 18 19\") == \"5\"\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n-3 2 9 16\") == \"6\"\n\nimport sys\nn, d = [int(num) for num in sys.stdin.readline().strip().split()]\nx = [int(num) for num in sys.stdin.readline().strip().split()]\nans = 0\nfor i in range(len(x)):\n    for j in range(i+1, len(x)):\n        if x[j]-x[i] > d:\n            break\n    else:\n        ans += 1\nprint(ans)"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"5 2\") == \"5\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n-3 2 9 16') == '6'\nassert solution('5 2\\n4 8 11 18 19') == '5'"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"5 2\") == \"5\"\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"5 2\") == \"5\"\n"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 5 2') == '2'\nassert solution('5 6 3 4 1 5') == '5'\nassert solution('8 4 4 2 2 100 100 100') == '3'\nassert solution('6 10 50 10 50 50') == '4'\nassert solution('10 10 50 10 50 50') == '0'"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 5 2') == 2\nassert solution('5 6 3 4 1 5') == 5\nassert solution('8 4 4 2 2 100 100 100') == 3\nassert solution('6 10 50 10 50 50') == 4\n\"\"\""
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 5 5 2\") == \"2\\n\"\nassert solution(\"5\\n4 4 2 2\") == \"5\\n\"\nassert solution(\"6\\n10 10 50 10 50 50\") == \"4\\n\"\nassert solution(\"8\\n4 4 4 2 2 100 100 100\") == \"3\\n\"\nassert solution(\"6\\n10 10 50 10 50\") == \"4\\n\"\n"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 5 2\") == \"2\"\nassert solution(\"5 6 3 4 1 5\") == \"5\"\nassert solution(\"8 4 4 2 2 100 100 100\") == \"3\"\nassert solution(\"6 10 50 10 50 50\") == \"4\"\n"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 4 2 2 100 100 100\") == \"3\"\nassert solution(\"5 10 50 10 50 50\") == \"4\"\nassert solution(\"6 3 4 1 5\") == \"5\"\nassert solution(\"8 10 50 10 50 50\") == \"3\"\nassert solution(\"10 10 50 10 50 50\") == \"1\""
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 4 2 2 100 100 100\") == \"3\"\nassert solution(\"5 6 3 4 1 5\") == \"5\"\nassert solution(\"8 10 50 10 50 50\") == \"4\"\nassert solution(\"6 10 50 10 50 50\") == \"4\"\nassert solution(\"10 10 50 10 50 50\") == \"5\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\ncnt = 0\ncur = 0\nfor i in range(n):\n    if a[i] == cur + 1:\n        cur += 1\n    else:\n        cur = 0\n    cnt += 1\n\nprint(cnt)"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 5 2') == '2'\nassert solution('5 6 3 4 1 5') == '5'\nassert solution('8 4 4 2 2 100 100 100') == '3'\nassert solution('6 10 50 10 50 50') == '4'\nassert solution('10 10 50 10 50 50') == '0'\n\n\"\"\""
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5 5 2') == 2\nassert solution('4 4 4 2 2 100 100 100') == 4\nassert solution('5 4 3 2 1 5') == 5\nassert solution('6 10 50 10 50 50') == 4\n"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 5 2\") == 2\nassert solution(\"5 6 3 4 1 5\") == 5\nassert solution(\"8 4 4 2 2 100 100 100\") == 3\nassert solution(\"6 10 50 10 50 50\") == 4\n"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 5 2') == '2'\nassert solution('5 6 3 4 1 5') == '5'\nassert solution('8 4 4 2 2 100 100 100') == '3'\nassert solution('6 10 50 10 50 50') == '4'\nassert solution('10 10 50 10 50 50') == '4'\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 11 2 8') == 4\nassert solution('4 1 8 8 8') == 6\nassert solution('2 7 6') == 0\n\n-----Tests-----\n2\n\n1\n\n5\n\n-----Test 1-----\nInput\n5\n5 1 11 2 8\n\nOutput\n4\n\n-----Test 2-----\nInput\n4\n1 8 8 8\n\nOutput\n6\n\n-----Test 3-----\nInput\n2\n7 6\n\nOutput\n0\n\n'''\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 11 2 8\") == \"4\"\nassert solution(\"4 1 8 8 8\") == \"6\"\nassert solution(\"7 6\") == \"0\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 11 2 8\") == 4\nassert solution(\"4 8 8 8\") == 6\nassert solution(\"7 6\") == 0\nassert solution(\"2 7\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 11 2 8\\n\") == \"4\"\nassert solution(\"1 8 8 8\\n\") == \"6\"\nassert solution(\"7 6\\n\") == \"0\"\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 11 2 8') == '4'\nassert solution('4 8 8 8') == '6'\nassert solution('7 6') == '0'\nassert solution('2 7') == '0'\nassert solution('3 4 5 6 7') == '2'\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 11 2 8\\n') == 4\nassert solution('4 1 8 8 8\\n') == 6\nassert solution('7 6\\n') == 0\n\n\"\"\"\n\nn = int(input())\n\nvotes = [int(v) for v in input().split()]\n\nmin_to_bribe = 0\nmax_vote = max(votes)\nmin_to_bribe = n - max_vote"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 11 2 8\") == \"4\"\nassert solution(\"4 1 8 8 8\") == \"6\"\nassert solution(\"2 7 6\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n5 1 11 2 8') == 4\nassert solution('4\\n1 8 8 8') == 6\nassert solution('2\\n7 6') == 0\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n5 1 11 2 8') == '4'\nassert solution('4\\n1 8 8 8') == '6'\nassert solution('2\\n7 6') == '0'\nassert solution('1\\n7') == '0'\n\"\"\""
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == \"NO\"\nassert solution('codeforces') == \"YES\\ncode\"\nassert solution('abc') == \"NO\"\n\n\"\"\""
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"NO\"\nassert solution(\"aaaaa\") == \"NO\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == 'NO'\nassert solution('aaaaa') == 'NO'\nassert solution('abc') == 'YES'\nassert solution('bbb') == 'YES'\nassert solution('aabb') == 'YES'\n"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') == \"NO\"\nassert solution('aaaaa') == \"NO\"\nassert solution('a') == \"YES\"\nassert solution('c') == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == 'YES'\nassert solution('aaaaa') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"code\"\nassert solution(\"aaaaa\") == \"NO\"\n\n\"\"\"\n\nimport string\nfrom collections import Counter"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('codeforces') == 'code', \"First\"\nassert solution('aaaaa') == 'NO', \"Second\"\nassert solution('baba') == 'NO', \"Third\"\nassert solution('aabbb') == 'NO', \"Fourth\"\nassert solution('ababa') == 'YES', \"Fifth\"\n"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"YES\"\nassert solution(\"aaaaa\") == \"NO\"\nassert solution(\"z\") == \"NO\"\n\"\"\"\nimport collections\n\ns = input()\n\nans = \"NO\"\nfor i in range(len(s) - 1):\n    if len(s[i]) == len(s[i + 1]):\n        continue\n    if len(s[i]) > len(s[i + 1]):\n        if s[i][-1] == s[i + 1][0]:\n            continue\n    else:\n        if s[i][0] == s[i + 1][-1]:\n            continue\n    ans = \"YES\"\n    break"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == 'YES'\nassert solution(\"aaaaa\") == 'NO'\n\n\"\"\""
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('codeforces') == 'YES\\ncode'\nassert solution('aaaaa') == 'NO'\n\"\"\""
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n\") == \"\"\"+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\"\"\"\n\nassert solution(\"20\\n\") == \"\"\"+------------------------+\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.#.#.#.#.#.|.|)\n+------------------------+\"\"\"\n\nassert solution(\"1\\n\") == \"\"\"+------------------------+\n|O.O.#.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\"\"\"\n\nassert solution(\"0\\n\") == \"\"\"+------------------------+\n|O.O.#.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\"\"\"\n\nassert solution(\"-1\\n\") == \"\"\"+------------------------+\n|O.O.#.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\"\"\"\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\") == '\\n'.join([\n    '+-------+',\n    '|O.O.O.#|',\n    '|O.O.O.#|',\n    '|O.O.O.#|',\n    '|O.O.O.#|',\n    '|O.O.O.#|',\n    '|O.O.O.#|',\n    '+-------+',\n    'D'\n])\n\nassert solution(\"20\") == '\\n'.join([\n    '+------------------------+',\n    '|O.O.O.O.O.O.O.#.#.#.#.|D|)',\n    '|O.O.O.O.O.O.#.#.#.#.#.|.|',\n    '|O.......................|',\n    '|O.O.O.O.O.O.#.#.#.#.#.|.|)',\n    '+------------------------+'\n])\n\n-----Notes-----\nThe last row is numbered \"34\".\n\"\"\"\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\") == '\\n+------------------------+\\n|O.O.O.#.#.#.#.#.#.#.|D|)\\n|O.O.O.#.#.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.#.#.#.#.#.#.#.#.|.|)\\n+------------------------+\\n'\nassert solution(\"20\") == '\\n+------------------------+\\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\\n|O.O.O.O.O.O.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.O.O.O.O.#.#.#.#.#.|.|)\\n+------------------------+\\n'\n\n\"\"\"\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\") == \"\"\"\\\n+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\nassert solution(\"20\") == \"\"\"\\\n+------------------------+\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\nprint(solution(\"9\"))\nprint(solution(\"20\"))\n\"\"\"\n\nThe last round of Bayan Programming Contest will be held in Tehran, and the participants will be carried around with a yellow bus. The bus has 34 passenger seats: 4 seats in the last row and 3 seats in remaining rows.  [Image] \n\nThe event coordinator has a list of k participants who should be picked up at the airport. When a participant gets on the bus, he will sit in the last row with an empty seat. If there is more than one empty seat in that row, he will take the leftmost one. \n\nIn order to keep track of the people who are on the bus, the event coordinator needs a figure showing which seats are going to be taken by k participants. Your task is to draw the figure representing occupied seats.\n\n\n-----Input-----\n\nThe only line of input contains integer k, (0 \u2264 k \u2264 34), denoting the number of participants.\n\n\n-----Output-----\n\nPrint the figure of a bus with k passengers as described in sample tests. Character '#' denotes an empty seat, while 'O' denotes a taken seat. 'D' is the bus driver and other characters in the output are for the purpose of beautifying the figure. Strictly follow the sample test cases output format. Print exactly six lines. Do not output extra space or other characters.\n\n\n-----Examples-----\nInput\n9\n\nOutput\n+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\n\nInput\n20\n\nOutput\n+------------------------+\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\""
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9') == \"\"\"+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\nassert solution('20') == \"\"\"+------------------------+\n|O.O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\") == \"+------------------------+\\n|O.O.O.#.#.#.#.#.#.#.|D|)  \\n|O.O.O.#.#.#.#.#.#.#.|.|  \\n|O.......................|  \\n|O.O.#.#.#.#.#.#.#.#.|.|  \\n+------------------------+\\n\\n\"\n\nassert solution(\"20\") == \"+------------------------+\\n|O.O.O.O.O.O.O.O.#.#.#.#.|D|)  \\n|O.O.O.O.O.O.#.#.#.#.#.|.|  \\n|O.......................|  \\n|O.O.O.O.O.O.#.#.#.#.#.|.|  \\n+------------------------+\\n\\n\"\n\"\"\"\n\n\nimport sys\nimport os\nimport re\n\nscript_dir = os.path.dirname(__file__)\ninput_file = os.path.join(script_dir, \"input.txt\")\n\nwith open(input_file, \"r\") as file:\n    input_raw = file.read()\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9\\n') == '\\n' + '+------------------------+\\n' \\\n    '|O.O.O.#.#.#.#.#.#.#.|D|)\\n' \\\n    '|O.O.O.#.#.#.#.#.#.#.|.|\\n' \\\n    '|O.....................|\\n' \\\n    '|O.O.#.#.#.#.#.#.#.#.|.|)\\n' \\\n    '+------------------------+\\n'\n\nassert solution('20\\n') == '\\n' + '+------------------------+\\n' \\\n    '|O.O.O.O.O.O.O.#.#.#.#.|D|)\\n' \\\n    '|O.O.O.O.O.O.#.#.#.#.#.|.|\\n' \\\n    '|O.....................|\\n' \\\n    '|O.O.O.O.O.O.#.#.#.#.#.|.|)\\n' \\\n    '+------------------------+\\n'\n\n\n-----Problem-----\nBayan Programming Contest\n\n'''\nimport math\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\") == (\n    +------------------------+\\n'\n    |O.O.O.#.#.#.#.#.#.#.#.|D|)\\n'\n    |O.O.O.#.#.#.#.#.#.#.#.|.|\\n'\n    |O.......................|\\n'\n    |O.O.#.#.#.#.#.#.#.#.#.|.|)\\n'\n    +------------------------+\n)\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\") == \"+------------------------+\\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\\n|O.O.O.#.#.#.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\\n+------------------------+\\n\"\n\nassert solution(\"20\") == \"+------------------------+\\n|O.O.O.O.O.O.O.O.#.#.#.#.|D|)\\\\n|O.O.O.O.O.O.#.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.O.O.O.O.#.#.#.#.#.#.|.|)\\\\n+------------------------+\"\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9') == '\\n+------------------------+\\n|O.O.O.#.#.#.#.#.#.#.|D|)\\n|O.O.O.#.#.#.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.#.#.#.#.#.#.#.#.#.#.|.|)\\n+------------------------+'\nassert solution('20') == '\\n+------------------------+\\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\\n|O.O.O.O.O.O.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.O.O.O.O.#.#.#.#.#.#.|.|)\\n+------------------------+'\n\n'''\n\nk = int(input())\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 1 1\\n\") == '9'\nassert solution(\"77 7 7\\n\") == '7'\nassert solution(\"114 5 14\\n\") == '6'\nassert solution(\"1 1 2\\n\") == '0'"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"4 1 10\") == \"2\"\nassert solution(\"1 10 10\") == \"1\"\nassert solution(\"9 3 15\") == \"8\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 1 1\") == \"9\"\nassert solution(\"77 7 7\") == \"7\"\nassert solution(\"114 5 14\") == \"6\"\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"1\"\nassert solution(\"1 1 2 1\") == \"1\"\nassert solution(\"1 1 2 1 1\") == \"2\"\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 1 1\") == \"9\"\nassert solution(\"77 7 7\") == \"7\"\nassert solution(\"114 5 14\") == \"6\"\nassert solution(\"1 1 2\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 1 1\") == '9'\nassert solution(\"77 7 7\") == '7'\nassert solution(\"114 5 14\") == '6'\nassert solution(\"1 1 2\") == '0'"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 1 1\") == \"9\"\nassert solution(\"77 7 7\") == \"7\"\nassert solution(\"114 5 14\") == \"6\"\n\nprint(\"Well done!\")\n\n\"\"\"\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 1 1\") == \"9\"\nassert solution(\"77 7 7\") == \"7\"\nassert solution(\"114 5 14\") == \"6\"\n\"\"\"\n\nfrom math import ceil, floor\n\nw, m, k = [int(x) for x in input().split()]"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1\\n') == '0'\nassert solution('1 2 3\\n') == '0'\nassert solution('7 3 2\\n') == '3'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 1 1\") == \"9\"\nassert solution(\"77 7 7\") == \"7\"\nassert solution(\"114 5 14\") == \"6\"\nassert solution(\"1 1 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '10'\nassert solution('123') == '113'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10''') == '10'\nassert solution('''123''') == '113'\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '10'\nassert solution('123') == '113'\n\"\"\""
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '10'\nassert solution('123') == '113'\nassert solution('1234') == '1234'\nassert solution('12345') == '1234'\nassert solution('123456') == '1234'\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '10'\nassert solution('123') == '113'\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '10'\nassert solution('123') == '113'\n\n\"\"\""
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"123\") == \"113\""
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"123\") == \"113\""
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123\") == \"113\"\nassert solution(\"10\") == \"10\"\n\"\"\""
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"123\") == \"113\"\nassert solution(\"123456789\") == \"7065\"\nassert solution(\"1000000009\") == \"1\"\nassert solution(\"2520843072\") == \"7\"\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 6 18\") == 3\n\"\"\""
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 6 18') == 3\nassert solution('2 5 6 18') == 2\nassert solution('2 5 11 18') == 2\nassert solution('2 5 10 18') == 2\nassert solution('2 6 10 18') == 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 6 18') == 3\n\nassert solution('1 1 1 1') == 1\n\"\"\"\n\nx, y, a, b = list(map(int, input().split()))\n\nprint(sum((a <= i <= b) & (i % 2 == 0) for i in range(x, y + 1, x)))\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 3 6 18''') == 3\n'''\nx = 2\ny = 3\na = 6\nb = 18\n\nbricks = ['red','red', 'pink','red', 'pink']\n\nprint(bricks)\n\n6\n8\n10\n12\n14\n16\n18\n\n1\n6\n12\n18\n\n2\n3\n6\n9\n12\n15\n18\n\n0\n2\n3\n5\n8\n12\n16\n18\n\n0\n2\n3\n5\n8\n12\n16\n18\n\n0\n2\n3\n5\n8\n12\n16\n18\n\n1\n3\n6\n9\n12\n15\n18\n\n2\n6\n12\n18\n\n1\n3\n6\n9\n12\n15\n18\n'''\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 6 18\") == \"3\"\n\"\"\"\n\nimport sys\n\nx, y, a, b = map(int, sys.stdin.readline().split())\n\nprint(len([i for i in range(a, b+1) if i % x == 0 or i % y == 0]))\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 6 18') == 3\n\"\"\"\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 6 18\") == \"3\"\nassert solution(\"2 3 5 17\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 6 18\") == 3\n\"\"\""
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 6 18\") == \"3\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 5 10\") == \"1\"\nassert solution(\"1 1 3 10\") == \"0\"\nassert solution(\"1 1 3 6 9\") == \"3\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n3 3 3 3 3\") == \"10\"\n\nassert solution(\"3 5\\n1 2 4\") == \"3\"\n\nassert solution(\"5 5\\n2 3 1 4 4\") == \"9\"\n\nassert solution(\"1 1000\\n548\") == \"0\"\n\nassert solution(\"3 3\\n3 1 1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 6\n3 3 3 3 3\"\"\") == \"10\"\nassert solution(\"\"\"5 6\n2 3 1 4 4\"\"\") == \"9\"\n\"\"\""
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n3 3 3 3 3\\n\") == \"10\"\nassert solution(\"3 5\\n1 2 4\\n\") == \"3\"\nassert solution(\"5 5\\n2 3 1 4 4\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n3 3 3 3 3\") == \"10\"\n-----\n5 6\n3 3 3 3 3\n\n10\n\n-----\n3 5\n1 2 4\n\n3\n\n-----\n1 1000\n548\n\n0\n\n-----\n3 3\n3 1 1\n\n1\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n3 3 3 3 3') == '10'\n\nassert solution('1 1000\\n548') == '0'\n\nassert solution('5 5\\n2 3 1 4 4') == '9'\n\nassert solution('5 6\\n3 1 1 4 4') == '3'"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''5 6\n3 3 3 3 3'''\n) == '10'\n\nassert solution(\n'''1 1000\n548'''\n) == '0'\nassert solution(\n'''3 3\n3 1 1'''\n) == '1'\nassert solution(\n'''5 5\n2 3 1 4 4'''\n) == '9'\nassert solution(\n'''1 1000\n548'''\n) == '0'\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 6\n3 3 3 3 3\n\"\"\") == \"10\"\nassert solution(\"\"\"5 6\n3 3 3 3 3\n\"\"\") == \"9\"\nassert solution(\"\"\"1 1000\n548\n\"\"\") == \"0\"\nassert solution(\"\"\"3 3\n3 1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n3 3 3 3 3\\n\") == \"10\"\n\nassert solution(\"3 5\\n1 2 4\\n\") == \"3\"\n\nassert solution(\"5 5\\n2 3 1 4 4\\n\") == \"9\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n3 3 3 3 3\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n3 3 3 3 3') == '10'\nprint(solution('5 6\\n3 3 3 3 3'))\nassert solution('3 5\\n1 2 4') == '3'\nprint(solution('3 5\\n1 2 4'))\nassert solution('5 5\\n2 3 1 4 4') == '9'\nprint(solution('5 5\\n2 3 1 4 4'))\nassert solution('1 1000\\n548') == '0'\nprint(solution('1 1000\\n548'))\nassert solution('3 3\\n3 1 1') == '1'\nprint(solution('3 3\\n3 1 1'))\n\"\"\"\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\") == \"yes\"\nassert solution(\"4 3 2 1\") == \"yes\"\nassert solution(\"4 3 2 1\") == \"yes\"\nassert solution(\"3 2 1\") == \"yes\"\n\nprint(solution(\"3 2 1\"))\nprint(solution(\"4 3 2 1\"))\nprint(solution(\"4 3 2 1\"))\nprint(solution(\"3 2 1\"))\n\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 1') == 'yes'\nassert solution('4 3 2 1') == 'yes'\nassert solution('3 1 2 4') == 'no'\nassert solution('2 1 3 4') == 'yes'\nassert solution('1 2') == 'yes'\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"yes 1 3\"\nassert solution(\"4 1 3 2\") == \"yes 1 1\"\nassert solution(\"1 2\") == \"yes 1 1\"\n\"\"\"\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == 'yes\\n1 3'\nassert solution('4 1 3 2') == 'no\\n'\nassert solution('2 1') == 'yes\\n1 1'\n\"\"\"\n\n\"\"\"\nimport collections\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 1') == 'yes'\nassert solution('4 2 1 3') == 'yes'\nassert solution('4 3 1 2') == 'no'\nassert solution('2 1') == 'yes'\nassert solution('1 1') == 'yes'\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"yes\\n1 3\"\nassert solution(\"4 1 3 4\") == \"yes\\n1 1\"\nassert solution(\"1 2\") == \"yes\\n1 1\"\nassert solution(\"1 2 1\") == \"no\"\nassert solution(\"2 1 1\") == \"yes\\n1 1\"\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1\") == \"yes\\n1 3\"\nassert solution(\"4 2 1 3\") == \"yes\\n1 2\"\nassert solution(\"2 1 3 4\") == \"yes\\n1 1\"\nassert solution(\"4 3 2 1\") == \"no\"\n\"\"\""
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 1\") == 'yes\\n1 3'\nassert solution(\"4\\n2 1 3 4\") == 'yes\\n1 2'\nassert solution(\"4\\n3 1 2 4\") == 'no'\nassert solution(\"2\\n1 2\") == 'yes\\n1 1'\n\"\"\"\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"yes\"\nassert solution(\"4 2 1 3\") == \"yes\"\nassert solution(\"3 1 2 4\") == \"no\"\nassert solution(\"2 1 3 4\") == \"yes\"\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 1') == 'yes\\n1 3'\nassert solution('4 1 3 2') == 'yes\\n1 1'\nassert solution('2 1') == 'yes\\n1 1'\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2') == '6'\nassert solution('3 5') == '-1'\nassert solution('3 0') == '1'\nassert solution('3 1') == '1'\nassert solution('10 4') == '-1'\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\") == \"6\"\nassert solution(\"3 5\") == \"-1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2\") == \"6\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"10 1\") == \"6\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2') == 6\nassert solution('3 5') == -1\nassert solution('9 5') == 5\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\") == 6\nassert solution(\"3 5\") == -1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2\") == \"6\"\nassert solution(\"3 5\") == \" -1\"\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == 6\nassert solution(\"3 5\") == -1\nassert solution(\"1 1\") == -1\n\"\"\""
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\") == 6\nassert solution(\"3 5\") == -1\n\"\"\"\n\nimport math\n\nstdin = input().split(' ')\nn, m = int(stdin[0]), int(stdin[1])\n\nres = int(math.ceil(n / m)) * m\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == 6\nassert solution('3 5') == -1\nassert solution('10 2') == 6\nassert solution('1 0') == -1\n\"\"\"\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 2') == '6'\nassert solution('3 5') == '-1'\n\n\"\"\""
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == 8\nassert solution('11') == 14\nassert solution('22') == 20\n\"\"\"\n\n\n\n\"\"\"\nThe first one seems to be the correct one. I can't interpret the explanation and I'm quite sure that it's wrong.\n\"\"\"\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '8'\nassert solution('11') == '14'\nassert solution('22') == '20'\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '14'\nassert solution('4') == '8'\nassert solution('22') == '20'\nassert solution('7') == '8'\n\n\"\"\"\n\nfrom math import sqrt, ceil"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '8'\nassert solution('11') == '14'\nassert solution('22') == '20'\n\"\"\"\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == 14\nassert solution(\"22\") == 20\nassert solution(\"4\") == 8\n\"\"\"\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '8'\nassert solution('11') == '14'\nassert solution('22') == '20'\n\"\"\"\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"11\") == \"14\"\nassert solution(\"22\") == \"20\"\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == 14\nassert solution(\"4\") == 8\nassert solution(\"22\") == 20\n\n\"\"\""
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(4) == 8\nassert solution(11) == 14\nassert solution(22) == 20\n\"\"\"\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == 8\nassert solution(\"11\") == 14\nassert solution(\"22\") == 20\n\"\"\""
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == '4'\nassert solution(\"1 2 2 5\") == '3'\nassert solution(\"500000 500000 500000 500000\") == '1'\n\"\"\""
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 2 5\") == \"3\"\nassert solution(\"500000 500000 500000 500000\") == \"1\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 2 5') == '3'\nassert solution('500000 500000 500000 500000') == '1'\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 2 5\") == \"3\"\nassert solution(\"500000 500000 500000 500000\") == \"1\"\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == '4'\nassert solution(\"1 2 2 5\") == '3'\nassert solution(\"500000 500000 500000 500000\") == '1'\n\nsolution(\"1 2 2 5\")\nsolution(\"1 2 2 3\")\n\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == '4'\nassert solution(\"1 2 2 5\") == '3'\nassert solution(\"500000 500000 500000 500000\") == '1'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 2 5\") == \"3\"\nassert solution(\"500000 500000 500000 500000\") == \"1\"\nassert solution(\"1 2 2 5\") == \"3\"\n\n\n\"\"\"\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == '4'\nassert solution(\"1 2 2 5\") == '3'\nassert solution(\"500000 500000 500000 500000\") == '1'\nassert solution(\"1 2 3 5\") == '0'\nassert solution(\"1 2 4 5\") == '0'\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 2 5') == '3'\nassert solution('500000 500000 500000 500000') == '1'\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 2 5\") == \"3\"\nassert solution(\"500000 500000 500000 500000\") == \"1\"\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 7 11 15') == '5563'\nassert solution('3 7 11 8') == '3688'\nassert solution('3 7 11 3') == '3688'\nassert solution('3 7 11 1') == '3688'\nassert solution('3 7 11 0') == '3688'\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 6 1007\") == \"37111519\"\nassert solution(\"4 3 6 1001\") == \"5563\"\nassert solution(\"3 3 6 1001\") == \"5563\"\nassert solution(\"3 3 5 1001\") == \"5563\"\nassert solution(\"4 4 4 1001\") == \"5563\"\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 4 10007\") == \"5563\"\n\n\"\"\"\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n7\\n11\\n15\\n19\\n\") == \"37111519\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3 4 10007''') == '5563'\n\"\"\""
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 4 10007\") == \"5563\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '5 3 4 10007'\n) == '5563'\nassert solution(\n    '2 2 1 3'\n) == '1'\nassert solution(\n    '6 8 5 9'\n) == '0'\nassert solution(\n    '1 2 3'\n) == '0'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 4 10007\") == '5563'\n\"\"\""
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 4 10007\") == \"5563\"\nassert solution(\"5 6 8 10007\") == \"5665\"\n\"\"\""
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 4 10007\") == \"5563\"\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1 5 5 5\") == \"15\"\nassert solution(\"8 4 3 2 10 5 2\") == \"32\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1 5 5 5') == '15'\nassert solution('8 4 3 2 10 5 2') == '32'\nassert solution('8 4 3 2 10 5 2') == '32'\nassert solution('8 4 3 2 10 5 2') == '32'\n\"\"\"\n\nimport sys\nimport collections\n\nk, n_1, n_2, n_3, t_1, t_2, t_3 = map(int, sys.stdin.readline().split())\n\nwash_machine, dryer, fold_machine = [collections.deque() for _ in range(3)]\nfor _ in range(k):\n    wash_machine.append(t_1)\n    dryer.append(t_2)\n    fold_machine.append(t_3)\n\nwash_machine.popleft()\ndryer.popleft()\nfold_machine.popleft()\n\ncnt = 0\nwhile k > 0:\n    # print(wash_machine, dryer, fold_machine)\n    cnt += 1\n    while len(wash_machine) > 0 and wash_machine[0] == cnt:\n        wash_machine.popleft()\n        if len(dryer) > 0:\n            dryer.popleft()\n        else:\n            dryer.append(fold_machine.popleft())\n    while len(dryer) > 0 and dryer[0] == cnt:\n        dryer.popleft()\n        if len(wash_machine) > 0:\n            wash_machine.popleft()\n        else:\n            wash_machine.append(fold_machine.popleft())\n    if len(fold_machine) > 0 and fold_machine[0] == cnt:\n        fold_machine.popleft()\n        if len(dryer) > 0:\n            dryer.popleft()\n        else:\n            dryer.append(wash_machine.popleft())\n    k -= 1\nprint(cnt)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 4 3 2 10 5 2\") == \"32\"\n\"\"\""
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1 1 1') == '15'\nassert solution('8 4 3 2 10 5 2') == '32'\n\"\"\"\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1 5 5 5\") == \"15\"\nassert solution(\"8 4 3 2 10 5 2\") == \"32\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1 5 5 5\") == 15\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 1 1 1 10 5 2') == 32\n\"\"\"\n\nk, n_1, n_2, n_3, t_1, t_2, t_3 = [int(i) for i in input().split()]\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1 5 5 5\") == 15\nassert solution(\"8 4 3 2 10 5 2\") == 32\n\"\"\"\n\n\n\nimport math\nimport sys\nfrom typing import List"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1 5 5 5') == '15'\nassert solution('8 4 3 2 10 5 2') == '32'\nassert solution('8 4 3 2 10 1 1 1') == '32'\nassert solution('8 4 3 2 10 2 5 2') == '32'\nassert solution('8 4 3 2 10 5 2 1 1') == '32'\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 4 3 2 10 5 2') == '32'\n\"\"\"\n\nimport sys\nimport math\nfrom collections import deque, Counter\n\nsys.setrecursionlimit(10 ** 6)\nINF = float('inf')\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n4 6 7\") == 8\nassert solution(\"2 12\\n1 10\") == 9\nassert solution(\"2 7\\n3 4\") == 6\nassert solution(\"1 9\\n2 7\") == 8\n\n\n\n-----\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n4 6 7\") == \"8\"\nassert solution(\"2 12\\n1 10\") == \"9\"\nassert solution(\"2 7\\n3 4\") == \"6\""
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10\\n4 6 7') == 8\nassert solution('2 12\\n1 10') == 9\nassert solution('2 7\\n3 4') == 6\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\nmax_sum = 0\n\nfor i in range(n):\n    sum_start = 0\n    sum_end = 0\n    for j in range(i, n):\n        sum_end += a[j] - a[i]\n        sum_start = max(sum_start, sum_end)\n    max_sum = max(max_sum, sum_start)\n\nfor i in range(n):\n    sum_start = 0\n    sum_end = 0\n    for j in range(0, i):\n        sum_end += a[j] - a[i]\n        sum_start = max(sum_start, sum_end)\n    max_sum = max(max_sum, sum_start)\n\nprint(max_sum)\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\") == \"8\"\nassert solution(\"2 12\") == \"9\"\nassert solution(\"3 4\") == \"6\"\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10\") == \"8\"\nassert solution(\"3 7\") == \"6\"\nassert solution(\"2 12\") == \"9\"\nassert solution(\"1 10\") == \"9\""
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 7\\n3 4\") == \"6\"\nassert solution(\"1 10\\n3 4\") == \"9\"\nassert solution(\"2 12\\n1 10\") == \"9\"\n\n\"\"\"\n\nn, m = input().split(\" \")\na = [int(i) for i in input().split(\" \")]\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\") == \"8\"\n\nassert solution(\"2 7\") == \"6\"\n\nassert solution(\"2 12\") == \"9\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 12\\n1 10\") == \"9\"\nassert solution(\"3 7\\n3 4\") == \"6\"\nassert solution(\"2 7\\n3 4\") == \"6\""
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 10\n4 6 7''') == '8'\nassert solution('''2 12\n1 10''') == '9'\nassert solution('''2 7\n3 4''') == '6'\nprint('Passed')\n\n-----Problem-----\n\nA good program is a program that can be updated to every possible optimal value.\n\nFor example, if there is a program [2, 5, 7], then program can be extended to [2, 5, 7, 10] and [2, 5, 7, 9]. Another example, if program is [2, 5], then it can be extended to [2, 5, 10] and [2, 6].\n\nThe task is to find a good program that can be extended to optimal value by any number of insertions.\n\nInput\n\nThe first line contains two integers n and m \u2014 the length and the maximum value of a program.\n\nThe second line contains n space-separated integers a1, a2,..., an (0 \u2264 ai \u2264 m) \u2014 the program.\n\nOutput\n\nPrint a single integer \u2014 the maximum possible length of the extended program.\n\nConstraints\n\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^9\n1 \u2264 ai \u2264 m\n\nExamples\nInput\n\nOutput\n\n2 10\n4 6 7\n\n4\n\nInput\n\nOutput\n\n3\n\n2 5 7\n3 4\n\n6\n\nInput\n\nOutput\n\n4\n\n2 6 10\n3 4\n\n5\n\n\n\n-----Tutorial-----\n\nGot this solution from the discussion. It was very fast and it's actually very cool.\n\nThe first solution is too slow.\n\nThe idea is that if we have to extend program to optimal length, then we can get rid of some of its values. The idea is that we can do this if there is such value that we can insert between it and all values after it. For example, if we have program [3, 4, 6, 7] and we can't add between the last 2 values.\n\nSo, for each element of program, we can find such value x, that we can insert it and get new program [a, x, b]. We can do this for all elements of program, and we can do this until we get new program, that is equal to original program.\n\nWhy it is so fast?\n\nWe have program [a, b, c, d] and we want to add another element e to it. We have two possible options:\n\nwe add e between a and b: [a, e, b]\nwe add e between c and d: [a, b, e, c]\nNow, we have two new programs: [a, b, e, c] and [a, b, e, d].\n\nIf we try to add e between a and c, we will have a loop, because new program [a, e, b, c] is the same as program [a, b, e, c].\n\nBecause program is circular, we can have the same program in program at the beginning and in the end.\n\nIf we try to extend program by adding new element to the beginning of the program, we will have the same program at the beginning and the end.\n\nThus, we have loop only once.\n\nIn the second solution, we have O(N^2) complexity, but the code is much shorter and much more readable."
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\") == \"8\"\nassert solution(\"2 12\") == \"9\"\nassert solution(\"2 7\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n4 1\\n3\") == \"2 1\\n3 1\"\nassert solution(\"1 2\\n4 1\\n3\\n4 1 3\") == \"2 1\\n3 1\\n4 1 3\"\nassert solution(\"1 2\\n4 1\\n3\\n4 1 3\\n5 1 6\\n7 8\\n9 10 11\") == \"2 1\\n3 1\\n4 1 3\\n5 1 6\\n7 8\\n9 10 11\"\nassert solution(\"1 2\\n4 1\\n3\\n4 1 3\\n5 1 6\\n7 8\\n9 10 11\\n12 13 14 15\") == \"2 1\\n3 1\\n4 1 3\\n5 1 6\\n7 8\\n9 10 11\\n12 13 14 15\"\nassert solution(\"1 2\\n4 1\\n3\\n4 1 3\\n5 1 6\\n7 8\\n9 10 11\\n12 13 14 15\\n16 17 18 19 20\") == \"2 1\\n3 1\\n4 1 3\\n5 1 6\\n7 8\\n9 10 11\\n12 13 14 15\\n16 17 18 19 20\"\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n1\\n2\\n4 1\\n3\\n4 1 3\") == \"1 2\"\nassert solution(\"1\\n1\\n2\\n4 1\\n3\\n4 1 3\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1\\n2\\n4 1\\n3\\n4 1 3\") == \"1 2\"\nassert solution(\"1\\n5\\n7 2 8\") == \"1 5 4 8 7 2 3 6\"\n\"\"\"\n\n\"\"\"\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u0435\u0435, \u0447\u0435\u043c \u0432\u044b \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c. \u0415\u0441\u043b\u0438 \u0443\u0433\u043e\u0434\u043d\u043e, \u0438 \u0435\u0441\u043b\u0438 \u0443\u0433\u043e\u0434\u043d\u043e, \u0445\u043e\u0442\u044f \u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443, \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0435\u0435 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443. \u0412 \u043c\u043e\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u044d\u0442\u043e \u0431\u044b\u043b\u043e \u0432\u0441\u0435\u0433\u043e \u043b\u0438\u0448\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043a\u0430\u043a \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c, \u043f\u043e\u043b\u0443\u0447\u0430\u044f \u043e\u0434\u043d\u043e \u043b\u0438\u0448\u044c \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435.\n\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0435\u0435 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443. \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0444\u0430\u0439\u043b.\n\n\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u0447\u0438\u0441\u0435\u043b, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0432\u0443\u044e \u0446\u0438\u0444\u0440\u0443. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438. \u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0443\u0442 \u0434\u0432\u0430 \u043f\u0440\u043e\u0431\u0435\u043b\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043f\u0435\u0440\u0432\u044b\u0439 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u0442\u0440\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430.\n\n\u0418\u0442\u0430\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0448\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e 8, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b. \u042d\u0442\u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430. \u041f\u0440\u0438\u0447\u0435\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439.\n\n\u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u0447\u0438\u0441\u0435\u043b. \u041f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u2014 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0442\u0440\u0438\u0446\u044b. \u0421\u043e\u0441\u0435\u0434\u043d\u0438\u0435 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u2014 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c \u0441\u0442\u0440\u043e\u043a\u0438. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e 8 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0441\u0442\u0440\u043e\u043a\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \\n.\n\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u0415\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u043e\u0434\u043d\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0447\u043a\u0430, \u0437\u043d\u0430\u0447\u0438\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442. \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u043f\u0438\u0441\u043a\u0438, \u043e\u0434\u043d\u0430\u043a\u043e \u0432\u0441\u0435 \u043e\u043d\u0438 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c\u0438, \u0438\u0437-\u0437"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n2\\n4\\n1 3\\n\") == \"1 2\"\nassert solution(\"4\\n1\\n2\\n4\\n1 3\\n\")!= \"1 4\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n\") == \"1 2 3 4 5\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n\")!= \"1 2 4 5 3\"\nassert solution(\"7\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n\") == \"1 2 3 4 5 6 7\"\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3\") == \"1 2 3\"\nassert solution(\"4\") == \"-1\"\nassert solution(\"2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"1 5 7 2 8\") == \"-1\"\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3\\n2 3 4 5\") == \"1 2\"\nassert solution(\"5\\n1 5 7 2 8\") == \"1 3 6 5 4 2\"\nassert solution(\"6\\n1 6 2 3 5 4 7 8\") == \"1 2 3 6 5 4 7 8\"\nassert solution(\"3\\n1 3 2\") == \"1 2 3\"\nassert solution(\"1\\n2\") == \"1 2\"\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n1\n1\n2\n4 1\n\"\"\") == '1 2'\nassert solution(\"\"\"\n5\n1\n1\n2\n4 1\n3\n4 1 3\n\"\"\") == '-1'\nassert solution(\"\"\"\n5\n1\n1\n2\n4 1\n3\n4 1 3\n\"\"\") == '1 2'\nassert solution(\"\"\"\n2\n3\n3\n1\n1\n\"\"\") == '-1'\nassert solution(\"\"\"\n2\n2\n1\n1\n1\n\"\"\") == '1 1'\n\"\"\"\n    def solution(stdin):\n        pass\n    "
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n1\\n2\\n4 1 3\\n3\\n4 1 3\\n4\") == \"1 2\\n-1\\n4 5 1 2 3 6\\n-1\"\nassert solution(\"5\\n1\\n1\\n2\\n4 1 3\\n3\\n4 1 3\\n4\") == \"1 2\\n-1\\n4 5 1 2 3 6\\n-1\"\nassert solution(\"3\\n1\\n1\\n2\\n4 1 3\\n3\\n4 1 3\\n4\") == \"1 2\\n-1\\n4 5 1 2 3 6\\n-1\"\nassert solution(\"3\\n1\\n1\\n2\\n4 1 3\\n3\\n4 1 3\\n4\") == \"1 2\\n-1\\n4 5 1 2 3 6\\n-1\"\nassert solution(\"5\\n1\\n1\\n2\\n4 1 3\\n3\\n4 1 3\\n4\") == \"1 2\\n-1\\n4 5 1 2 3 6\\n-1\"\n\"\"\"\n\nimport sys\nimport pprint\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 3') == '1 2 3'\nassert solution('2 3 4 5') == '-1'\nassert solution('1 5 7 2 8') == '1 2 3 5 6 7 8'\n\"\"\"\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1\") == \"1\\n1\"\nassert solution(\"2\\n2\") == \"-1\\n1\\n1\\n1\"\nassert solution(\"3\\n3\") == \"-1\\n1\\n1\\n1\\n1\"\nassert solution(\"4\\n4\") == \"-1\\n1\\n1\\n1\\n1\"\nassert solution(\"5\\n5\") == \"-1\\n1\\n1\\n1\\n1\"\n\"\"\"\n\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"3\\n2 4 6\") == \"6\"\nassert solution(\"5\\n45 12 27 30 18\") == \"15\"\n\n\n\n--- Testcase OK\nLast executed input:\n2\n1 2\n\nLast executed output:\n2\n\n---Testcase OK\nLast executed input:\n3\n2 4 6\n\nLast executed output:\n6\n\n---Testcase OK\nLast executed input:\n2\n12 18\n\nLast executed output:\n12\n\n---Testcase OK\nLast executed input:\n5\n45 12 27 30 18\n\nLast executed output:\n15\n\n---Testcase OK\nLast executed input:\n4\n43 79 36 23\n\nLast executed output:\n89\n\n---Testcase OK\nLast executed input:\n5\n64 36 84 22 9\n\nLast executed output:\n46"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"3\\n2 4 6\") == \"6\"\nassert solution(\"2\\n12 18\") == \"12\"\nassert solution(\"5\\n45 12 27 30 18\") == \"15\"\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('3\\n2 4 6') == '6'\nassert solution('5\\n45 12 27 30 18') == '15'\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n12 18\") == \"12\"\nassert solution(\"3\\n45 12 27 30 18\") == \"15\"\nassert solution(\"5\\n45 12 27 30 18\") == \"15\"\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\nlines = [line.strip() for line in lines]\nn = int(lines[0])\nnums = [int(line) for line in lines[1:]]"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('3\\n2 4 6') == '6'\nassert solution('5\\n45 12 27 30 18') == '15'\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 1\\n') == '2'\nassert solution('4 2 1\\n') == '2'\nassert solution('4 2 1\\n') == '2'\nassert solution('4 2 1\\n') == '2'\nassert solution('4 2 1\\n') == '2'\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('3\\n2 4 6') == '6'\nassert solution('5\\n45 12 27 30 18') == '15'\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == 2\nassert solution(\"3 12 27\") == 15\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2\\n') == '2'\nassert solution('3\\n2 4 6\\n') == '6'\nassert solution('5\\n45 12 27 30 18\\n') == '15'\nassert solution('1\\n9\\n') == '0'\nassert solution('3\\n9 9 9\\n') == '0'\n\"\"\""
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"11\") == \"YES\"\nassert solution(\"1\") == \"YES\"\n\"\"\"\n\nn = int(stdin.readline().strip())\nstr_ = stdin.readline().strip()\nstr_list = [item for item in str_]\n\ncounter_dict = {'S': 0, 'F': 0}\nfor item in str_list:\n    counter_dict[item] += 1\n\ncount_s = counter_dict['S']\ncount_f = counter_dict['F']"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('SSFFSFFSFF') == 'YES'\n\"\"\""
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"10\") == \"YES\"\n\"\"\""
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SSFFSFFSFF\") == \"YES\"\nassert solution(\"SF\") == \"YES\"\nassert solution(\"FFF\") == \"NO\"\nassert solution(\"FFFFFF\") == \"NO\"\nassert solution(\"FFFFFFF\") == \"YES\"\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SSFFSFFSFF\") == \"NO\"\nassert solution(\"FSSF\") == \"NO\"\nassert solution(\"FFFFFFFFFF\") == \"NO\"\nassert solution(\"SSFFSFFSFF\") == \"YES\"\nassert solution(\"FSSF\") == \"YES\"\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"10\") == \"YES\"\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"NO\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"10\") == \"NO\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == \"NO\"\nassert solution('10') == \"YES\"\nassert solution('10') == \"NO\"\nassert solution('10') == \"YES\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"NO\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"10\") == \"YES\"\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == 'YES'\nassert solution('FFFFFFF') == 'NO'\nassert solution('SSSSSS') == 'YES'\nassert solution('FFF') == 'YES'\nassert solution('FFFFFFFFFFFF') == 'NO'\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == 6\nassert solution(\"3 3\") == 0\nassert solution(\"4 0\") == 24\nassert solution(\"1337 42\") == 807905441\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2') == 6\n\n\"\"\""
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2') == 6\nassert solution('3 3') == 0\nassert solution('4 0') == 24\nassert solution('1337 42') == 807905441\nassert solution('1 2') == 0\n\nprint('Hello, world.')\n\"\"\""
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 0\") == \"24\"\n\"\"\""
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n3 4') == 2\nassert solution('5 4\\n1 2 3 4 5') == 8\nassert solution('3 2\\n1 3\\n3 2') == 2\nassert solution('6 7\\n4 5 6 7 8 9\\n3 6 4 5') == 55\nassert solution('7 8\\n4 5 6 7 8 9 10 11 12\\n3 6 4 5\\n6 7 9 12\\n9 10 11\\n13 14 15 16\\n17 18 19 20\\n21 22 23 24\\n25 26 27 28\\n29 30 31 32') == 1344\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == 6\nassert solution(\"3 3\") == 0\nassert solution(\"4 0\") == 24\nassert solution(\"1337 42\") == 807905441\nassert solution(\"33 1\") == 487999\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2') == '6'\nassert solution('3 3') == '0'\nassert solution('4 0') == '24'\nassert solution('1337 42') == '807905441'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2') == 6\nassert solution('3 3') == 0\nassert solution('4 0') == 24\n\"\"\"\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == 6\nassert solution(\"3 3\") == 0\nassert solution(\"4 0\") == 24\nassert solution(\"1337 42\") == 807905441\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0\\n2\\n2 0 1\") == \"1\"\nassert solution(\"1 3\\n3\\n3 2 -2 3 6 -2 7 10\") == \"0.5\"\n\n\"\"\""
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\\n2\\n2 0 1\") == '1.0'\nassert solution(\"1 3\\n3\\n3 3 2\") == '0.5'"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0\\n2\\n2 0 1\") == \"1\"\nassert solution(\"1 3\\n3\\n3 3 2\\n-2 3 6\\n-2 7 10\") == \"0.5\"\n\n\"\"\"\n\nimport sys\nimport math\n\nA, B = [int(x) for x in sys.stdin.readline().split()]\n\ntaxi = []\nfor _ in range(int(sys.stdin.readline())):\n    taxi.append([int(x) for x in sys.stdin.readline().split()])\n\ntaxi.sort(key=lambda x: x[2])\n\nt = 0\n\nfor i in taxi:\n    t += i[0] + i[1] * i[2]\n    if A < i[0] and B < i[1]:\n        print(t)\n        break\n\n\"\"\"\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0\\n2\\n2 0 1\\n0 2 2\") == \"1\"\nassert solution(\"1 3\\n3\\n3 3 2\\n-2 3 6\\n-2 7 10\") == \"0.5\"\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n2 0 1\\n0 2 2') == '1'\nassert solution('3\\n3 0 1\\n-2 3 6\\n-2 7 10') == '0.5'\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n2 1 1\") == '1.0'\nassert solution(\"3 1\\n2 1 1\") == '0.5'\nassert solution(\"1 3\\n3 3 2\") == '0.5'\n\"\"\""
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0\\n2\\n2 0 1\\n0 2 2\\n') == '1'\nassert solution('1 3\\n3\\n3 3 2\\n-2 3 6\\n-2 7 10\\n') == '0.5'\nassert solution('0 0\\n2\\n0 0 1\\n') == '1'\nassert solution('1 3\\n3\\n3 3 2\\n-2 3 6\\n-2 7 10\\n') == '0.5'\nassert solution('0 0\\n2\\n0 0 1\\n') == '1'\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0\\n2\\n2 0 1\\n0 2 2') == '1'\nassert solution('1 3\\n3\\n3 3 2\\n-2 3 6\\n-2 7 10') == '0.5'\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2\\n2\\n1 0 1\\n0 2 2') == '1'\nassert solution('3\\n3\\n1 0 1\\n0 2 2\\n-2 3 6\\n-2 7 10') == '0.5'\nassert solution('1\\n1\\n1 0 1\\n0 1 2') == '0'\nassert solution('0\\n0\\n0 0 1\\n0 2 2') == '0'\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '0'\nassert solution('1\\n0\\n') == '0'\nassert solution('1\\n0\\n2\\n') == '0'\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5 3\n0 2 4\n1 3 1\n0 8 3\n0 20 10\n1 5 5\"\"\") == \"4\"\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == '4'\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"4\"\n\"\"\"\n\nimport sys\nimport itertools\n\nn, x = map(int, sys.stdin.readline().split())\n\nh_m_pairs = []\nfor i in range(n):\n    t, h, m = map(int, sys.stdin.readline().split())\n    h_m_pairs.append([h, m])\n\nh_m_pairs = sorted(h_m_pairs, key=lambda x: x[0])\n\nh_m_pairs_dict = {}\nfor h, m in h_m_pairs:\n    h_m_pairs_dict[h] = h_m_pairs_dict.get(h, 0) + m\n\nh_m_pairs_list = list(h_m_pairs_dict.items())\nh_m_pairs_list.sort(key=lambda x: x[0])\n\nprint(h_m_pairs_list)\n\ncurrent_height = 0\ncurrent_height_max = 0\ncount = 0\nfor h, m in h_m_pairs_list:\n    if h >= current_height:\n        current_height_max = max(current_height_max, m)\n        count += 1\n        current_height = h + m\nprint(count)\n\nprint(current_height_max)\n\n\"\"\"\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5') == '4'\n\"\"\"\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\\n') == 4\n\n-----Tests-----\n\n1.    Input:\n5 3\n0 2 4\n1 3 1\n0 8 3\n0 20 10\n1 5 5\nOutput:\n4\n\n2.    Input:\n5 3\n0 0 4\n1 3 1\n0 8 3\n0 20 10\n1 5 5\nOutput:\n5\n\n3.    Input:\n5 3\n0 0 4\n1 1 1\n0 8 3\n0 20 10\n1 5 5\nOutput:\n3\n\n4.    Input:\n5 3\n0 2 4\n1 1 1\n0 8 3\n0 20 10\n1 5 5\nOutput:\n4\n\n5.    Input:\n5 3\n0 2 4\n0 0 4\n1 3 1\n0 8 3\n0 20 10\n1 5 5\nOutput:\n5\n\n6.    Input:\n5 3\n0 2 4\n0 0 4\n1 3 1\n0 8 3\n0 20 10\n1 5 5\nOutput:\n3\n\n7.    Input:\n5 3\n0 2 4\n1 1 1\n0 8 3\n0 20 10\n0 1 1\nOutput:\n4\n\n8.    Input:\n5 3\n0 0 4\n1 1 1\n0 8 3\n0 20 10\n1 5 5\nOutput:\n5\n\n9.    Input:\n5 3\n0 0 4\n1 1 1\n0 0 4\n0 8 3\n1 5 5\nOutput:\n3\n\n10.    Input:\n5 3\n0 0 4\n0 0 4\n1 3 1\n0 8 3\n0 20 10\n1 5 5\nOutput:\n5\n\n11.    Input:\n5 3\n0 0 4\n1 1 1\n0 0 4\n0 8 3\n1 5 5\nOutput:\n5\n\n12.    Input:\n5 3\n0 0 4\n0 0 4\n1 3 1\n0 8 3\n0 20 10\n1 5 5\nOutput:\n5\n\n13.    Input:\n5 3\n0 0 4\n0 0 4\n1 3 1\n0 0 4\n0 20 10\n1 5 5\nOutput:\n3\n\n14.    Input:\n5 3\n0 0 4\n0 0 4\n1 3 1\n0 0 4\n1 5 5\nOutput:\n5\n\n15.    Input:\n5 3\n0 0 4\n1 1 1\n0 0 4\n1 3 1\n1 5 5\nOutput:\n3\n\n16.    Input:\n5 3\n0 0 4\n0 0 4\n1 3 1\n0 0 4\n0 20 10\n1 5 5\nOutput:\n5\n\n17.    Input:\n5 3\n0 0 4\n1 1 1\n0 0 4\n1 3 1\n1 5 5\nOutput:\n3\n\n18.    Input:\n5 3\n0 0 4\n1 1 1\n1 3 1\n0 0 4\n1 5 5\nOutput:\n5\n\n19.    Input:\n5 3\n0 0 4\n1 1 1\n1 3 1\n0 0 4\n1 5 5\nOutput:\n3\n\n20.    Input:\n5 3\n0 0 4\n1 1 1\n0 0 4\n1 3 1\n0 20 10\n1 5 5\nOutput:\n5\n\n21.    Input:\n5 3\n0 0 4\n0 0 4\n1 3 1\n1 3 1\n0 20 10\n1 5 5\nOutput:\n5\n\n22.    Input:\n5 3\n0 0 4\n1 1 1\n1 3 1\n1 5 5\n0 0 4\nOutput:\n5\n\n23.    Input:\n5 3\n0 0 4\n1 1 1\n1 3 1\n0 0 4\n1 5 5\nOutput:\n5\n\n24.    Input:\n5 3\n0 0 4\n0 0 4\n1 3 1\n1 3 1\n0 0 4\nOutput:\n5\n\n25.    Input:\n5 3\n0 0 4\n0 0 4\n0 0 4\n1 3 1\n1 3 1\nOutput:\n5\n\n26.    Input:\n5 3\n0 0 4\n0 0 4\n0 0 4\n1 3 1\n0 0 4\nOutput:\n5\n\n27.    Input:\n5 3\n0 0 4\n0 0 4\n1 3 1\n0 0 4\n1 5 5\nOutput:\n5\n\n28.    Input:\n5 3\n0 0 4\n0 0 4\n1 3 1\n1 3 1\n1 5 5\nOutput:\n3\n\n29.    Input:\n5 3\n0 0 4\n0 0 4\n0 0 4\n1 3 1\n0 0 4\nOutput:\n5\n\n30.    Input:\n5 3\n0 0 4\n1 1 1\n1 3 1\n0 0 4\n0 20 10\n1 5 5\nOutput:\n3\n\n31.    Input:\n5 3\n0 0 4\n0 0 4\n1 1 1\n0 0 4\n0 20 10\n1 5 5\nOutput:\n5\n\n32.    Input:\n5 3\n0 0 4\n0 0 4\n1 3 1\n1 3 1\n0 0 4\n1 5 5\nOutput:\n5\n\n33.    Input:\n5 3\n0 0 4\n0 0 4\n0 0 4\n1 3 1\n1 3 1\n1 5 5\nOutput:\n5\n\n34.    Input:\n5 3\n0 0 4\n0 0 4\n0 0 4\n0 0 4\n1 3 1\n0 20 10\nOutput:\n3\n\n35.    Input:\n5 3\n0 0 4\n0 0 4\n0 0 4\n1 3 1\n1 3 1\n1 5 5\nOutput:\n5\n\n36.    Input:\n5 3\n0 0 4\n1 1 1\n1 1 1\n1 1 1\n0 0 4\n1 5 5\nOutput:\n3\n\n37.    Input:\n5 3\n0 0 4\n0 0 4\n1 1 1\n1 1 1\n0 0 4\n0 0 4\nOutput:\n5\n\n38.    Input:\n5 3\n0 0 4\n0 0 4\n1 1 1\n0 0 4\n0 0 4\n1 5 5\nOutput:"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('7 7 5') == ''\nassert solution('5 7 3') == ''\nassert solution('5 3') == ''\nassert solution('5 3 7 9') == ''\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\\n\") == 4\n\"\"\"\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5') == '4'\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == 4\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 4 4 4 4\") == -1\nassert solution(\"3 2 2 3 2 2\") == 2\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 1 1 4 6\") == \"1 2 4\"\nassert solution(\"6 2 1 1 4 6\") == \"1 2 4\"\nassert solution(\"6 2 1 1 4 6\") == \"1 2 4\"\nassert solution(\"6 2 1 1 4 6\") == \"1 2 4\"\nassert solution(\"6 2 1 1 4 6\") == \"1 2 4\"\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 1 1 2 2 2') == '-1\\n'\nassert solution('6\\n2 2 1 1 4 6') == '1 2 4\\n1 2 6\\n'\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 1 1 2 2 2\") == '-1'\nassert solution(\"6 1 1 2 2 2\") == '1 2 4'\nassert solution(\"6 1 1 2 2 2\") == '1 2 4'\nassert solution(\"6 1 1 2 2 2\") == '1 2 4'\nassert solution(\"6 1 1 2 2 2\") == '1 2 4'\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1 2 2 2\") == \"-1\"\nassert solution(\"6 1 1 2 2 2\") == \"1 2 4\"\nassert solution(\"12 3 1 2 3 4 5 6\") == \"1 2 4 6\"\nassert solution(\"3 4 1 2 3\") == \"-1\"\nassert solution(\"12 3 1 2 3 4 5 6\") == \"1 2 4 6\"\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 1 1 2 2 2') == '-1'\nassert solution('6\\n1 1 1 2 2 2') == '-1'\nassert solution('6\\n2 2 1 1 4 6') == '1 2 4'\nassert solution('6\\n3 3 3 3 3 3 3') == '-1'\nassert solution('6\\n3 3 3 3 3 3 3') == '-1'\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 7 2 9') == '-1'\nassert solution('3 5 1 2 6') == '1 2 3'\nassert solution('4 5 1 2 6') == '1 2 3 4'\nassert solution('5 6 1 2 9') == '1 2 4 5'\nassert solution('5 6 1 2 3') == '1 2 3 4 5'\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 1 1') == '1 2 4'\n\"\"\""
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 1 1 2 2 2') == '-1\\n1 2 4\\n1 2 6'\nassert solution('2\\n2 1 1') == '1 2\\n1 2'\nassert solution('3\\n1 2 3') == '1 2\\n3'\nassert solution('4\\n1 2 3 4') == '1 2\\n3 4'\nassert solution('8\\n1 1 1 2 2 2 3 3 4 4') == '-1\\n1 2 4\\n1 2 6\\n1 2 7\\n3 4\\n3 7\\n4 8'\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 2 1 1\\n\") == \"1 2\\n1 2\\n\"\nassert solution(\"4\\n1 1 2 2\\n\") == \"2 1\\n2 1\\n\"\n\"\"\""
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 2\nassert solution('zzzzz') == 1\nassert solution('abcde') == 3\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == 2\nassert solution('zzzzz') == 1\nassert solution('abcde') == 3\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('zzzzz') == 1\nassert solution('abacaba') == 2\nassert solution('abcde') == 3\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == 2\nassert solution(\"zzzzz\") == 1\nassert solution(\"abcde\") == 3\n\n-----Solution-----\n\ntime complexity O(n)\n\n\"\"\"\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == r\n\n\"\"\"\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 2\nassert solution(\"zzzzz\") == 1\nassert solution(\"abcde\") == 3\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacaba') == 2, 'WA'\nassert solution('zzzzz') == 1, 'WA'\nassert solution('abcde') == 3, 'WA'"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == 2\nassert solution(\"zzzzz\") == 1\nassert solution(\"abcde\") == 3\n\"\"\"\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacaba') == 2\nassert solution('zzzzz') == 1\nassert solution('abcde') == 3\nassert solution('aaabaa') == 2\nassert solution('abc') == 3\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == 2\nassert solution(\"zzzzz\") == 1\nassert solution(\"abcde\") == 3\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\") == \"38\"\nassert solution(\"10 9\") == \"210\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n') == '10'\nassert solution('15 6\\n') == '38'\n\nsolution(stdin)\n\n'''"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5') == '10'\nassert solution('15 6') == '38'\n\"\"\"\n\nn, k = map(int, input().split())\nprint(n*k//3)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"10\"\nassert solution(\"15 6\") == \"38\"\n\n\"\"\"\nimport math\n\nimport sys\n\nimport unittest\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5') == '10'\nassert solution('15 6') == '38'\n\"\"\"\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5') == '10'\nassert solution('15 6') == '38'\n\"\"\"\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"10\"\nassert solution(\"15 6\") == \"38\"\n\n\n\n-----TEMPLATE-----"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5') == '10'\nassert solution('15 6') == '38'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"10\"\nassert solution(\"15 6\") == \"38\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\") == \"38\"\nassert solution(\"15 6\") == \"38\"\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 1\\n\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 3\n2 3 2 1''') == 3\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n2 3 2 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '4 3\\n2 3 2 1'\n) == '3'\n\"\"\"\n\nn, m = [int(x) for x in stdin.readline().split()]\n\narr = [int(x) for x in stdin.readline().split()]\n\narr.sort()\n\nresult = 0\n\ni = 0\n\nwhile i < n:\n    k = i + 1\n    s = arr[i]\n    while k < n and s + arr[k] <= m:\n        s += arr[k]\n        k += 1\n    i = k\n    result += 1\n\nprint(result)"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 2 1\\n1 2 1\\n') == '3'\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n2 3 2 1\") == \"3\"\n\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4 4\\n1 2 1 2 1\") == \"2\"\nassert solution(\"5 2\\n1 1\") == \"2\"\nassert solution(\"6 2\\n2 2 3 3 4 4\") == \"2\"\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n2 3 2 1') == 3\n\"\"\"\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n2 3 2 1') == '3'\nassert solution('3 4\\n1 2 1') == '1'\nassert solution('3 3\\n1 2 1') == '0'\n\"\"\""
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n2 3 2 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('2 3 2 1') == '3'\nassert solution('1 2 1') == '1'\nassert solution('1 2 2') == '1'"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"XS\") == \"XL\"\nassert solution(\"XS\") == \"XL\"\nassert solution(\"XS\") == \"XL\"\nassert solution(\"XL\") == \"M\"\nassert solution(\"XS\") == \"XL\"\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"XS\\nXS\\nM\\nXL\") == 2\nassert solution(\"XS\\nXS\\nM\\nS\") == 0\nassert solution(\"XXXL\\nXXL\\nXXL\\nXXXS\") == 1\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nXS\\nXS\\nM\\nXL\\nS\") == \"2\"\nassert solution(\"2\\nXXXL\\nXXL\\nXXL\\nXXXS\") == \"1\"\nassert solution(\"2\\nM\\nXS\\nXS\\nM\") == \"0\"\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nXS\\nXS\\nM\") == \"2\"\nassert solution(\"2\\nXXXL\\nXXL\\nXXL\\nXXXS\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"XS\") == \"2\"\nassert solution(\"XXXL\") == \"1\""
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"XS XS M XL\") == \"2\"\nassert solution(\"M XXL\") == \"1\"\nassert solution(\"XS XS M XS\") == \"0\"\nassert solution(\"XS M XS XS\") == \"1\"\nassert solution(\"M M M\") == \"0\"\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"XS\\nXS\\nM\\nXL\\nS\\nXS\") == 2\nassert solution(\"XS\\nXS\\nM\\nXXXL\\nS\\nXS\") == 1\nassert solution(\"M\\nXS\\nXS\") == 0\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"XS\\nXS\\nM\\nXL\\nS\\nXS\\n\") == \"2\"\nassert solution(\"XXXL\\nXXL\\nXXL\\nXXXS\\n\") == \"1\"\nassert solution(\"M\\nXS\\nXS\\nM\\n\") == \"0\"\n\n\n\"\"\""
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"XS\") == \"2\"\nassert solution(\"M\") == \"0\"\nassert solution(\"XXS\") == \"1\"\nassert solution(\"XS\") == \"2\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nM\\nS\\nM\\nL\") == \"2\"\nassert solution(\"2\\nXXXL\\nXXL\\nXXL\\nXXXS\") == \"1\"\nassert solution(\"2\\nM\\nXS\\nXS\\nM\") == \"0\"\nassert solution(\"1\\nS\\nS\\nS\\nS\") == \"0\"\nassert solution(\"2\\nM\\nS\\nS\\nS\") == \"0\"\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3 2\") == \"1/4\"\nassert solution(\"1 1 3 2\") == \"1/3\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2 2\") == \"1/4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\nassert solution(\"4 3 2 2\") == \"1/4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2 2\") == \"1/4\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 2 2') == '1/4'\n\n\"\"\"\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 3 2') == '1/3'\nassert solution('4 3 2 2') == '1/4'"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 3 2') == '1/4'\nassert solution('2 1 3 2') == '1/3'\nassert solution('1 1 3 2') == '1/3'\nassert solution('4 3 2 2') == '1/4'\n\"\"\"\nfrom fractions import Fraction"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\nassert solution(\"4 3 2 2\") == \"1/4\""
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2 2\") == \"1/4\"\n\"\"\"\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RRRRR\") == 4\n\"\"\"\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRRRR\") == 4\n\nassert solution(\"RRG\") == 1\n\nassert solution(\"RBRGBRBRG\") == 2\n\nassert solution(\"RRR\") == 0\n\nassert solution(\"RG\") == 0"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3RRR') == 1\nassert solution('5RRRR') == 4\nassert solution('3RBR') == 1\nassert solution('4RRGB') == 0\n\n\"\"\""
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RRRRR\") == 4\nassert solution(\"RRBBRRRRRG\") == 4\nassert solution(\"RBRRRRGGGGG\") == 6\n\"\"\"\nimport re"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RRG') == 1\nassert solution('RRRRR') == 4\nassert solution('BRBG') == 0\n\n\"\"\""
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('RRRRR') == 4\n\"\"\""
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRG\") == 1\nassert solution(\"RRRRR\") == 4\nassert solution(\"BBRRRR\") == 0\n\n\"\"\"\n\n\"\"\"\n1,2,3,4,5\nR,R,R,G,R\n\"\"\""
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RRG') == 1\nassert solution('RRRRR') == 4\n\"\"\""
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRG\") == 1\nassert solution(\"RRRRR\") == 4\nassert solution(\"BBRBGBR\") == 0\nassert solution(\"RRRRR\") == 4\nassert solution(\"BBBRGGRRR\") == 1\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRG\") == 1\nassert solution(\"RRRRR\") == 4\nassert solution(\"BBRBG\") == 0\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"12\") == \"3\"\nassert solution(\"5\") == \"1\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"12\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '3'"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '3'\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e \u0438\u0433\u0440\u0443 \u00ab\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u00bb \u0438\u0437-\u0437\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0443\u043c\u0435\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043c\u043e\u043c\u0435\u043d\u0442 \u0447\u0442\u043e \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0438\u0433\u0440\u043e\u043a \u043f\u043e\u0431\u0435\u0434\u0438\u0442. \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u043e\u0439 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u0447\u043a\u043e\u0432 \u0438\u0433\u0440\u043e\u043a\u0430. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435:\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0438\u0433\u0440\u043e\u043a \u043f\u043e\u0431\u0435\u0434\u0438\u0442. \u0418\u0433\u0440\u043e\u043a \u0432 \u0438\u0433\u0440\u0435 \u043e\u0431\u044f\u0437\u0430\u043d \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u0432\u0440\u0430\u0433\u043e\u0432 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u0418\u0433\u0440\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f, \u0433\u0434\u0435 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0437\u0430 \u043a\u0440\u0443\u043f\u043d\u043e\u0433\u043e \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f \u0438\u0433\u0440\u043e\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0447\u043a\u0430. \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0438\u0433\u0440\u043e\u043a \u043f\u043e\u0431\u0435\u0434\u0438\u0442 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f. \u0421\u043e\u0431\u044b\u0442\u0438\u044f \u0438\u043c\u0435\u044e\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430: \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435. \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u043d \u0431\u044b\u0442\u044c \u0442\u0435\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0435\u0442 \u0438\u0433\u0440\u043e\u043a\u0430 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u0435. \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0432 \u043e\u0434\u043d\u0443 \u0438\u0437 \u0441\u0442\u043e\u0440\u043e\u043d \u0434\u043e\u0441\u043a\u0438.\n\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u0445 \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u0443 \u0438\u0433\u0440\u043e\u043a\u0430 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043d\u0435 \u0441\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0438\u0433\u0440\u043e\u043a \u0441 \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044e \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0441 \u0441\u043e\u0431\u044b\u0442\u0438\u0435\u043c, \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043d \u0440\u0435\u0448\u0430\u0435\u0442 \u0434\u043e\u0441\u0442\u0438\u0447\u044c. \u0418 \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0435\u0441\u0442\u044c, \u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0438\u0437 \u043a\u0430\u043a\u043e\u0433\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u0434\u0432\u0435\u0440\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0438\u0433\u0440\u043e\u043a \u0432 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435. \u0414\u0432\u0435\u0440\u044c \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u0441\u044f \u0438\u0433\u0440\u043e\u043a \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0430 \u043e\u0442\u043a\u0440\u044b\u0442\u0430\u044f \u0434\u0432\u0435\u0440\u044c \u0442\u043e\u0436\u0435 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0439. \u0412\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u043c \u0434\u043b\u044f \u043b\u044e\u0431\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430. \u041f\u0440\u0438\u043c\u0435\u0440: \u0412\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043e\u0431\u0440\u0430\u0437\u0446\u0443 \u0441\u043e\u0431\u044b\u0442\u0438\u044f. \u0418\u0433\u0440\u043e\u043a \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u043a\u0440\u0443"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"12\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"12\") == \"3\"\n\"\"\""
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"12\") == \"3\"\nassert solution(\"7\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '3'\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"12\") == \"3\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"12\") == \"3\"\n\"\"\""
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n15 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n16 20 30 40 50 60 70 80 90\") == \"15\"\nassert solution(\"9\\n7 20 88\") == \"35\""
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n7 20 88\") == \"35\"\nassert solution(\"9\\n16 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n15 20 30 40 50 60 70 80 90\") == \"90\"\n\n\"\"\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n7 20 88\") == \"35\"\nassert solution(\"9\\n16 20 30 40 50 60 70 80 90\") == \"90\""
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n7 20 88\") == \"35\"\nassert solution(\"9\\n15 20 30 40 50 60 70 80 90\") == \"90\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 20 88\") == \"35\"\nassert solution(\"9 15 20 30 40 50 60 70 80 90\") == \"90\"\n\"\"\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 20 88\") == \"35\"\nassert solution(\"9 15 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9 16 20 30 40 50 60 70 80 90\") == \"90\"\n\nassert solution(\"8 14 18 22 24 27 30 33 36 37 38 40 41 43 44 45\") == \"45\"\nassert solution(\"9 15 20 30 40 50 60 70 80 90\") == \"90\"\n\"\"\"\n\nn = int(input())\nints = list(map(int, input().split()))\ncounter = 0\nfor i in range(n - 1):\n    if ints[i + 1] - ints[i] == 1:\n        counter += 1\n    else:\n        counter = 0\nprint(counter + 1 + (n - 1 - counter) * 15)\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n7 20 88') == '35'\nassert solution('9\\n15 20 30 40 50 60 70 80 90') == '90'\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n7 20 88\") == \"35\"\nassert solution(\"9\\n15 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n16 20 30 40 50 60 70 80 90\") == \"90\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n7 20 88') == '35'\nassert solution('9\\n15 20 30 40 50 60 70 80 90') == '90'\nassert solution('9\\n16 20 30 40 50 60 70 80 90') == '90'\n\"\"\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n15 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n16 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n20 16 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n20 15 16 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n20 15 20 16 30 40 50 60 70 80 90\") == \"90\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 2\\n3 3 2 4\") == \"2\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 3\\n3 1 2') == '1'\nassert solution('4 7 2\\n3 3 2 4') == '2'\nassert solution('5 5 1\\n1 3 1 2 1') == '-1'\n\"\"\"\n\nn, m, k = [int(x) for x in input().split()]\nf = [int(x) for x in input().split()]\ns = [0 for x in range(m)]\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 2\\n3 3 2 4\") == \"2\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 3\\n3 1 2') == 1\nassert solution('4 7 2\\n3 3 2 4') == 2\nassert solution('5 5 1\\n1 3 1 2 1') == -1\nassert solution('3 4 3\\n2 2 2') == -1\nassert solution('3 4 3\\n3 1 2') == 1\n\"\"\""
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 3\\n3 1 2') == '1'\nassert solution('4 7 2\\n3 3 2 4') == '2'\nassert solution('5 5 1\\n1 3 1 2 1') == '-1'"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 3\\n3 1 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 3\\n3 1 2\") == \"1\"\nassert solution(\"4 7 2\\n3 3 2 4\") == \"2\"\nassert solution(\"5 5 1\\n1 3 1 2 1\") == \"-\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 3\\n3 1 2') == '1'\nassert solution('4 7 2\\n3 3 2 4') == '2'\nassert solution('5 5 1\\n1 3 1 2 1') == '-1'\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3\\n3 1 2\") == \"1\"\nassert solution(\"4 7 2\\n3 3 2 4\") == \"2\"\nassert solution(\"5 5 1\\n1 3 1 2 1\") == \"-1\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 5 3''') == 1\nassert solution('''4 7 2''') == 2\nassert solution('''5 5 1''') == -1"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RBR\") == 2\nassert solution(\"RBBR\") == 6\nassert solution(\"RBBRR\") == 6\n\"\"\"\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RBBR\") == 6\n\"\"\"\n\nn = int(input())\n\ns = input()\n\nred, blue = 0, 0\n\nfor i in range(n):\n    if s[i] == \"R\":\n        red += 1\n    elif s[i] == \"B\":\n        blue += 1\n\nops = (n - red) // 2 + (red - blue) // 2\n\nprint(ops)\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RBR\") == \"2\"\nassert solution(\"RBBR\") == \"6\"\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RBR\") == 2\nassert solution(\"RBR\") == 2\n\n\"\"\""
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n        \"4\", \n        \"RBBR\"\n    ) == 6\n\nassert solution(\n        \"5\", \n        \"RBBRR\"\n    ) == 6\n\nassert solution(\n        \"1\", \n        \"B\"\n    ) == 0\n\nassert solution(\n        \"3\", \n        \"RB\"\n    ) == 2\n\nassert solution(\n        \"5\", \n        \"RRRBB\"\n    ) == 6"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RBR\") == 2\nassert solution(\"RBBR\") == 6\n\n\"\"\""
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RBR') == '2'\nassert solution('RBBR') == '6'\nassert solution('RRRR') == '4'\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RBR') == '2'\nassert solution('RBBR') == '6'\n\n\"\"\"\n\nn = int(input())\na = input()\nb = []\ncount = 0\ni = 0\nwhile i < n:\n    if a[i] == 'R':\n        if b:\n            b.pop()\n        else:\n            count += 1\n    else:\n        b.append('B')\n    i += 1\nprint(count)\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RBR\") == \"3\"\nassert solution(\"RBBR\") == \"3\"\nassert solution(\"RRRR\") == \"0\"\nassert solution(\"RRRBRR\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RBR\") == 2\nassert solution(\"RBBR\") == 6\nassert solution(\"RRRBB\") == 2\n\"\"\""
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"19 00\\n255 1 100 1\") == \"25200.0000\"\nassert solution(\"17 41\\n1000 6 15 11\") == \"1365.0000\""
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('19 00\\n255 1 100 1') == '25200.0'\nassert solution('17 41\\n1000 6 15 11') == '1365.0'\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"19 00\") == \"25200.0\"\nassert solution(\"17 41\") == \"1365.0\"\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('19 0') == '25200.0000'\nassert solution('17 41') == '1365.0000'"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"19 00\\n255 1 100 1\") == \"25200.0\"\n\n\"\"\"\n\n\nimport sys\nfrom typing import List, Tuple, Union\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('19 00\\n255 1 100 1') == '25200.0'\nassert solution('17 41\\n1000 6 15 11') == '1365.0'\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('19 00') == '25200.0'\nassert solution('17 41') == '1365.0'\n\"\"\"\nfrom typing import List, Tuple\n\nInput = List[Tuple[int, int, int, int]]\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''19 00\n255 1 100 1''') == '25200.0'\nassert solution('''17 41\n1000 6 15 11''') == '1365.0'\nassert solution('''20 00\n255 1 100 1''') == '25200.0'\nassert solution('''20 21\n1000 6 15 11''') == '1365.0'\nassert solution('''20 20\n1000 6 15 11''') == '1365.0'"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"19 00\\n255 1 100 1\") == \"25200.0\"\nassert solution(\"17 41\\n1000 6 15 11\") == \"1365.0\"\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"19 00\") == \"25200.0000\"\nassert solution(\"17 41\") == \"1365.0000\""
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaba') == 6\nassert solution('aaabbbb') == 6\n\"\"\"\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaabbbb') == 6\n\"\"\""
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abracadabra\") == 20\nassert solution(\"aaba\") == 6\nassert solution(\"abcad\") == 4\n\"\"\"\n\n\"\"\"\nSolution:\n* iterate over s backwards, moving from right to left\n* for each character, store it's position (i) in a dict\n* iterate over s again, finding tandem repeats\n\"\"\"\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaba') == '6'\nassert solution('aaabbbb') == '6'\nassert solution('abracadabra') == '20'\n\"\"\"\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abracadabra') == 20\nassert solution('abc') == 3\nassert solution('a') == 1\nassert solution('aab') == 2\nassert solution('abab') == 2\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaba') == 6\nassert solution('aaabbbb') == 6\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaabbbb') == 6\nassert solution('aaba') == 6\nassert solution('abracadabra') == 20\nassert solution('abracadabraaaaa') == 20\nassert solution('ab') == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == 3\nassert solution(\"abracadabra\") == 8\nassert solution(\"a\") == 1\nassert solution(\"a\" + \"abra\"*10000) == 2\nassert solution(\"a\" + \"ab\"*100000) == 2\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaba\") == 4\nassert solution(\"abracadabra\") == 8\nassert solution(\"abab\") == 2\nassert solution(\"aaabbbb\") == 6\nassert solution(\"aaaaaaaa\") == 0\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaaaa') == 1\nassert solution('aaba') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 1 2 1\") == \"4\"\nassert solution(\"5 0 -1 -1 -1 -1\") == \"4\""
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 2 1\") == \"4\"\nassert solution(\"5\\n0 -1 -1 -1 -1\") == \"4\"\n"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 1 2 1') == '4'\nassert solution('5\\n0 -1 -1 -1 -1') == '4'\nassert solution('8\\n2 1 2 1 2') == '8'\nassert solution('9\\n2 1 -1 2 1') == '6'\nassert solution('10\\n-2 -3 -1 -1 1') == '6'\n\n\"\"\"\n"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 1 2 1\\n') == '4'\n\nassert solution('5\\n0 -1 -1 -1 -1\\n') == '4'\n\n\"\"\""
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 1 2 1\") == \"4\"\nassert solution(\"5\\n0 -1 -1 -1 -1\") == \"4\"\n"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1 2 1\") == \"4\"\nassert solution(\"5 0 -1 -1 -1 -1\") == \"4\""
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4\n2 1 2 1\"\"\") == '4'\n\nassert solution(\"\"\"5\n0 -1 -1 -1 -1\"\"\") == '4'\n"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 1\\n2 1 2 1\") == \"4\"\nassert solution(\"5 0 -1 -1 -1 -1\\n0 -1 -1 -1 -1\") == \"4\"\n\n'''"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 1 2 1') == 4\n\"\"\""
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 1 2 1\") == \"4\"\nassert solution(\"5\\n0 -1 -1 -1 -1\") == \"4\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10\\n1 3 2 4\\n') == '0'\nassert solution('6 100\\n1 2 3 4 5 6\\n') == '2'\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4\\n1 2 5 10 15 20\") == \"1\"\nassert solution(\"4 10\\n1 3 2 4\") == \"0\"\nassert solution(\"6 100\\n1 2 3 4 5 6\") == \"2\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 4\\n1 2 5 10 15 20') == '1'\nassert solution('4 10\\n1 3 2 4') == '0'\nassert solution('6 100\\n1 2 3 4 5 6') == '2'\n\"\"\"\n\nfrom typing import List, Tuple, Callable, Set\nimport unittest\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 100\\n1 2 3 4 5 6\") == \"2\"\nassert solution(\"6 4\\n1 2 5 10 15 20\") == \"1\"\nassert solution(\"10 10\\n1 3 2 4 5 6 7 8 9 10\") == \"0\"\n\"\"\""
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 4\\n1 2 5 10 15 20\") == \"1\"\nassert solution(\"4 10\\n1 3 2 4\") == \"0\"\nassert solution(\"6 100\\n1 2 3 4 5 6\") == \"2\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100\") == \"1\"\nassert solution(\"6 100\") == \"0\"\nassert solution(\"1 2 3 4 5 6\") == \"2\"\nassert solution(\"1 2 5 10 15 20\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 4\\n1 2 5 10 15 20\") == \"1\\n\"\nassert solution(\"4 10\\n1 3 2 4\") == \"0\\n\"\nassert solution(\"6 100\\n1 2 3 4 5 6\") == \"2\\n\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4\\n1 2 5 10 15 20\") == \"1\"\nassert solution(\"6 100\\n1 2 3 4 5 6\") == \"0\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == \"0\"\nassert solution(\"6 100\") == \"2\"\nassert solution(\"6 100\") == \"2\""
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10\\n1 3 2 4') == '0'\nassert solution('6 100\\n1 2 3 4 5 6') == '2'\nassert solution('5 3\\n1 2 3 4 5') == '1'\nassert solution('4 10\\n1 5 2 3 4') == '0'\nassert solution('5 3\\n2 4 5 4 5') == '1'\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 2 1\") == \"16\"\n\n\"\"\""
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 2 1\") == \"16\"\nassert solution(\"2\\n1 1\") == \"4\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 2 1\") == \"16\"\n\"\"\""
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 2 1\") == \"16\"\nassert solution(\"2\\n1 1\") == \"4\"\n\"\"\"\n\nimport sys\n\nn = int(input().strip())\na = [int(a_temp) for a_temp in input().strip().split(' ')]\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 2 1\") == \"16\"\n\n\"\"\"\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n0 2 1') == '16'\nassert solution('2\\n1 1') == '4'\nassert solution('4\\n1 1 3 1') == '6'\n\n\"\"\"\nimport sys\nfrom typing import List\n\nMAX_FLOOR = 100\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 1') == 4\nassert solution('3 2\\n0 0 0') == 0\nassert solution('3 2\\n1 1 1') == 4\nassert solution('3 2\\n1 2 1') == 5\nassert solution('3 3\\n0 0 0') == 0\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\") == 4\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 2 1\") == \"16\"\nassert solution(\"2\\n1 1\") == \"4\"\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1010\") == 3\nassert solution(\"0101\") == 1\n\"\"\"\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1010\") == \"3\"\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1010\") == 3\nassert solution(\"1111\") == 0\nassert solution(\"10101010\") == 2\nassert solution(\"10101010\") == 2\nassert solution(\"10101010\") == 2\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1010\") == 3\n\"\"\"\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1010') == 3\nassert solution('10111110') == 8\nassert solution('1011111') == 7\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1010') == 3\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1010\") == 3\nassert solution(\"11110\") == 1\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1010') == 3\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1010') == 3\n\"\"\""
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1010') == '3'\nassert solution('1100') == '3'\nassert solution('1111') == '1'\nassert solution('1011010') == '5'\nassert solution('101101110') == '5'\n\"\"\""
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 2\") == 2\nassert solution(\"5 4 7\") == 1\nassert solution(\"6 2 3\") == 1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 2\") == 2\nassert solution(\"5 4 7\") == 1\nassert solution(\"6 2 3\") == 1\nassert solution(\"1 1 1\") == 0\nassert solution(\"1 1 2\") == 1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 2\") == \"2\"\nassert solution(\"5 4 7\") == \"1\"\nassert solution(\"6 2 3\") == \"1\"\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 2\") == 2\nassert solution(\"5 4 7\") == 1\nassert solution(\"6 2 3\") == 1\n\n\"\"\"\n\nimport math\nimport sys\n\n_, s, t, _ = map(int, sys.stdin.readline().strip().split())\nres = int(math.ceil(s / (t - s)))\nprint(res)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 2') == '2'\nassert solution('5 4 7') == '1'\nassert solution('6 2 3') == '1'\n\"\"\""
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 2\") == 2\nassert solution(\"5 4 7\") == 1\nassert solution(\"6 2 3\") == 1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1\") == \"2\"\nassert solution(\"5 4 7\") == \"1\"\nassert solution(\"6 2 3\") == \"1\"\n\n\"\"\"\n\nT, S, q = [int(x) for x in stdin.readline().split()]\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 2\") == \"2\"\nassert solution(\"5 4 7\") == \"1\"\nassert solution(\"6 2 3\") == \"1\"\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1\") == \"3\"\nassert solution(\"5 4 7\") == \"1\"\nassert solution(\"6 2 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3, 1, 1) == 1\nassert solution(3, 2, 1) == 0\nassert solution(3, 3, 1) == 0\nassert solution(4, 3, 3) == 0\nassert solution(3, 5, 1) == 2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ababa') == 'Yes'\nassert solution('zzcxx') == 'Yes'\nassert solution('yeee') == 'No'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\nassert solution(\"yeee\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ababa') == 'Yes'\nassert solution('zzcxx') == 'Yes'\nassert solution('yeee') == 'No'\nassert solution('aaa') == 'Yes'\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == 'Yes' or solution(input()) == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'Yes'\nassert solution('ababa') == 'Yes'\nassert solution('ababaa') == 'No'\nassert solution('zzcxx') == 'Yes'\n\nimport sys"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\nassert solution(\"yeee\") == \"No\"\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ababa\") == 'Yes'\nassert solution(\"zzcxx\") == 'Yes'\nassert solution(\"yeee\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\nassert solution(\"yeee\") == \"No\""
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\nassert solution(\"yeee\") == \"No\"\nassert solution(\"abcd\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('zzcxx') == 'Yes'\nassert solution('ababa') == 'Yes'\nassert solution('yeee') == 'No'\nassert solution('bbc') == 'No'\n\nprint('Hooray!')\n\"\"\"\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n10 9 5 8 7\") == 1\nprint(solution(\"4 2\\n1 3 3 7\"))"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3 3 7\") == 2\n\"\"\"\n\nimport sys\n\nx_str_list = sys.stdin.readline().rstrip().split()\nx_list = [int(x) for x in x_str_list]\nz = int(sys.stdin.readline())\n\ncount = 0\n\nfor i in range(len(x_list)):\n    for j in range(i+1, len(x_list)):\n        if abs(x_list[i] - x_list[j]) >= z:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 3 3 7') == '2'\nassert solution('5 5\\n10 9 5 8 7') == '1'\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n10 9 5 8 7\") == \"1\"\nassert solution(\"5 5\\n10 9 5 8 7\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 3 5 8 7') == '1'\nassert solution('4 2\\n1 3 3 7') == '2'\n\"\"\"\n\nfrom sys import stdin\nfrom typing import List, Tuple\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3 3 7\") == 2\nassert solution(\"5 5\\n10 9 5 8 7\") == 1\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 1\\n1 2') == '1'\nassert solution('1 1\\n1 2\\n2 2') == '0'\nassert solution('1 1\\n1 2\\n2 2\\n3 3') == '1'\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 3 3 7') == 2\nassert solution('5 5\\n10 9 5 8 7') == 1\nassert solution('5 5\\n1 1 2 1 2') == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 3 3 7\") == 2\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 2\n1 3 3 7''') == 2\nassert solution('''5 5\n10 9 5 8 7''') == 1\n\n'''\n\nfrom typing import List, Set, Dict, Tuple"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2\\nYYY\\nNNN\\nYNY\\n\") == '2'\n"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\\nYYY\\nNNN\\nYNY\") == 2\n\"\"\""
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 2\\nNNY\\nNNY\\nNYN') == '2'\n"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 2\\nYYY\\nNNN\\nYNY\\n') == '2'\n\nassert solution('4 4 1\\nNNNY\\nNNYN\\nYNNN\\nYNNN\\n') == '4'\n\n\"\"\""
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 3 2\nYYY\nNNN\nYNY\n''') == 2\n\nassert solution('''4 4 1\nNNNY\nNNYN\nNYNN\nYNNN\n''') == 4\n\nprint(solution(input()))"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('YNY') == 1\nassert solution('NNNY') == 0\nassert solution('NYNN') == 0\n'''"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 2\\nYYY\\nNNN\\nYNY\\n') == '2'\nassert solution('4 4 1\\nNNNY\\nNNYN\\nNYNN\\nYNNN\\n') == '4'\n\"\"\"\n\nimport sys\n\nf, i, t = list(map(int, sys.stdin.readline().strip().split(' ')))\n\nfriend_dict = {}\nfor _ in range(f):\n    likes_list = list(sys.stdin.readline().strip())\n    friend_dict[likes_list[0]] = likes_list[1:]\n\nlikes_count = 0\nfor _ in range(i):\n    if sys.stdin.readline().strip() in friend_dict.keys():\n        likes_count += len(set(friend_dict[sys.stdin.readline().strip()]))\n\nprint(likes_count)\n"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\\nYYY\\nNNN\\nYNY\") == '2'\nassert solution(\"4 4 1\\nNNNY\\nNNYN\\nYNNN\\nYNNN\") == '4'\n"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\\nYYY\\nNNN\\nYNY\") == \"2\"\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 0\") == \"2\"\nassert solution(\"2 3 7\") == \"-1\"\nassert solution(\"1 3 7\") == \"2\"\n\n\"\"\"\nimport sys\nfrom math import gcd"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 0') == '2'\nassert solution('2 3 7') == '-1'\nassert solution('1 1 1') == '-1'\n\"\"\""
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 0\") == \"2\"\nassert solution(\"2 3 7\") == \"-\"\n\"\"\"\n\na, b, c = map(int, stdin.split())\n\ntry:\n    print(str(a).index(str(c)) + 1)\nexcept ValueError:\n    print(\"-1\")\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 0\") == \"2\"\nassert solution(\"2 3 7\") == \"2\"\nassert solution(\"3 4 2\") == \"3\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 3 4\") == \"4\"\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 0') == '2'\nassert solution('2 3 7') == '-1'\n\"\"\"\nimport math\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 7\") == \"2\"\nassert solution(\"1 2 0\") == \"2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 0') == \"2\"\nassert solution('2 3 7') == '-1'\nassert solution('2 3 6') == \"3\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 0\") == \"2\"\nassert solution(\"2 3 7\") == \"-\"\n\n\"\"\"\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 0') == '2'\nassert solution('2 3 7') == '-1'\n\n\n\"\"\"\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 0') == '2'\nassert solution('2 3 7') == '-1'\nassert solution('1 2 0') == '2'\nassert solution('2 3 7') == '-1'\nassert solution('1 2 0') == '2'\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 1 0 1 0\") == \"3\"\nassert solution(\"5\\n1 1 0 0 1\") == \"4\"\nassert solution(\"2\\n0 0\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 1 0 1 0\") == '3'\nassert solution(\"5\\n1 1 0 0 1\") == '4'\nassert solution(\"2\\n0 0\") == '0'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nlist_n = sys.stdin.readline().strip().split(\" \")\n\nm = len(list_n)"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n0 1 0 1 0') == 3\nassert solution('5\\n1 1 0 0 1') == 4\nassert solution('2\\n0 0') == 0\nassert solution('3\\n1 1') == 0\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n0 1 0 1 0\\n') == 3\nassert solution('2\\n0 0\\n') == 0\nassert solution('5\\n1 1 0 0 1\\n') == 4\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 0 0 1') == '3'\n\nassert solution('0 0') == '0'\n\nassert solution('1 0') == '0'\n\nassert solution('1 1 0 0 1') == '4'\n\nassert solution('1 1 0 0 1') == '4'"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 1 0 1 0\") == \"3\"\nassert solution(\"5\\n1 1 0 0 1\") == \"4\"\nassert solution(\"2\\n0 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 0 0 1 0\") == \"3\"\nassert solution(\"1 1 0 0 1\") == \"4\"\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 1 0 1 0\") == \"3\"\nassert solution(\"5\\n1 1 0 0 1\") == \"4\"\nassert solution(\"2\\n0 0\") == \"0\"\nassert solution(\"5\\n1 1 0 0 1\") == \"4\""
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0 1 0 1 0\") == \"3\"\nassert solution(\"5\\n1 1 0 0 1\") == \"4\"\nassert solution(\"2\\n0 0\") == \"0\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nstate = sys.stdin.readline().split()\n\nopen_count = 0\nread_count = 0\n\nfor s in state:\n    if s == \"0\":\n        open_count += 1\n    else:\n        read_count += 1"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 1 0 1 0\") == \"3\"\nassert solution(\"5\\n1 1 0 0 1\") == \"4\"\nassert solution(\"2\\n0 0\") == \"0\"\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    3 2 3\n    1 8 4\n    \"\"\"\n    ) == \"Yes\\n1 4\"\n\nassert solution(\n    \"\"\"\n    4 3 5\n    2 7 7 7\n    \"\"\"\n    ) == \"No\"\n\nassert solution(\n    \"\"\"\n    4 3 5\n    2 7 7 7\n    \"\"\"\n    ) == \"No\"\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'No'\nassert solution('4 3 3') == 'No'\nassert solution('5 3 5') == 'Yes'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 3\\n1 8 4\\n\") == 'Yes\\n1 4'"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\") == \"Yes\\n1 4\\n\"\nassert solution(\"4 2 3\") == \"Yes\\n1 4\\n\"\nassert solution(\"3 2 3\") == \"No\"\nassert solution(\"2 2 3\") == \"No\"\n\"\"\"\nimport itertools\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 3\\n1 8 4\\n') == 'Yes\\n1 4'\nassert solution('4 3 5\\n2 7 7 7\\n') == 'No'\n\n\"\"\""
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 3\\n1 8 4\\n') == 'Yes\\n1 4'\nassert solution('4 3 5\\n2 7 7 7\\n') == 'Yes\\n2 7 7'"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 5\\n2 7 7 7') == 'Yes\\n2 7 7'\nassert solution('4 3 5\\n2 7 7 4') == 'No'\nassert solution('2 7 3\\n1 5 7 7') == 'Yes\\n1 7 5'\nassert solution('4 3 3\\n1 8 4') == 'No'\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'No'\nassert solution('2 7 7 7') == 'Yes\\n2 7 7'\nassert solution('1 8 4') == 'Yes\\n1 4'\nassert solution('1 8 1') == 'Yes\\n1 1'\nassert solution('1 8 1\\n1 1') == 'Yes\\n1 1'\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 3\\n1 8 4\") == \"Yes\\n1 4\"\nassert solution(\"4 3 5\\n2 7 7 7\") == \"Yes\\n2 7 7\"\n\"\"\""
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 5\\n2 7 7 7\") == \"Yes\\n2 7 7\"\nassert solution(\"4 3 4\\n1 8 4\") == \"No\"\nassert solution(\"4 3 5\\n1 1 1 1\") == \"No\"\nassert solution(\"2 2 1\\n2 2 2\") == \"Yes\\n2 2 2\"\nassert solution(\"2 2 1\\n2 2 3\") == \"No\"\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 0 0\\n0 0 0\\n0 0 1') == '010\\n010\\n100'\nassert solution('1 0 1\\n8 8 8\\n2 0 3') == '010\\n011\\n100'"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0 1\\n8 8 8\\n2 0 3\") == \"010\\n011\\n100\"\n\n------Solution------\n\n'''\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 0 0\\n0 0 0\\n0 0 1') == '010\\n010\\n100'\nassert solution('1 0 1\\n8 8 8\\n2 0 3') == '010\\n011\\n100'\n\"\"\""
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    1 0 0\n    0 0 0\n    0 0 1\n    \"\"\"\n) == \"\"\"\n    1 0 1\n    010\n    100\n    \"\"\"\n\nprint(solution(\n    \"\"\"\n    1 0 1\n    8 8 8\n    2 0 3\n    \"\"\"\n))\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 0 0\\n0 0 0\\n0 0 1\\n') == '010\\n010\\n100'\nassert solution('1 0 1\\n8 8 8\\n2 0 3\\n') == '010\\n011\\n100'\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\\n\") == \"010\\n010\\n100\"\n\"\"\"\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\") == \"001\"\nassert solution(\"1 0 1\\n8 8 8\\n2 0 3\") == \"010\"\nprint(\"Passed all test cases!\")\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\") == \"001\"\nassert solution(\"1 0 1\\n8 8 8\\n2 0 3\") == \"010\"\n\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 2\\n3 4 5\\n6 7 8\") == \"010\\n011\\n100\"\nassert solution(\"1 0 0\\n0 0 0\\n0 0 1\") == \"010\\n010\\n100\"\nassert solution(\"0 1 0\\n0 0 0\\n0 0 1\") == \"010\\n010\\n010\"\nassert solution(\"1 1 1\\n1 1 1\\n1 1 1\") == \"110\\n110\\n110\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\") == \"010\\n010\\n100\"\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0\\n1 1 3 2\\n2 1 3 2\") == \"3\"\nassert solution(\"3 1\\n1 1 3 2\\n2 1 3 2\") == \"5\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"9\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"-1\"\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 0\\n1 1 3 2\\n2 1 3 2\") == \"3\"\nassert solution(\"3 1\\n1 1 3 2\\n2 1 3 2\") == \"5\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"9\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0\\n\") == \"3\"\nassert solution(\"3 1\\n1 1 3 2\\n2 1 3 2\\n\") == \"5\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\\n\") == \"-1\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\\n\") == \"9\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\\n\") == \"9\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 0') == '3'\nassert solution('3 1') == '5'\nassert solution('3 2') == '-1'\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0\") == \"3\"\nassert solution(\"3 1\") == \"5\"\nassert solution(\"3 2\") == \"9\"\nassert solution(\"3 3\") == \"-1\"\nassert solution(\"3 4\") == \"13\"\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 0\") == \"3\"\nassert solution(\"3 1\") == \"5\"\nassert solution(\"3 2\") == \"9\"\n\nimport sys\n\n_, n, q = map(int, sys.stdin.readline().split())\nfor _ in range(q):\n    t, l, r, v = map(int, sys.stdin.readline().split())\n    if l == r:\n        if t == 2:\n            print(-1)\n        else:\n            print(0)\n    else:\n        if t == 2:\n            print(v)\n        else:\n            print(v**2)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 0\\n1 1 3 2\\n2 1 3 2\") == \"3\"\nassert solution(\"3 1\\n1 1 3 2\\n2 1 3 2\") == \"5\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"9\"\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0\\n1 1 3 2\\n2 1 3 2\\n\") == \"3\"\nassert solution(\"3 1\\n1 1 3 2\\n2 1 3 2\\n\") == \"5\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\\n\") == \"-1\"\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 0\\n1 1 3 2\\n2 1 3 2\") == '3'\nassert solution(\"3 1\\n1 1 3 2\\n2 1 3 1\") == '5'\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == '-1'\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 0\\n\") == \"3\"\nassert solution(\"3 1\\n1 1 3 2\") == \"5\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"9\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"9\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"9\"\n"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7 6\") == \"2/5\"\nassert solution(\"7 2 4\") == \"7/2\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7 6\") == \"2/5\"\n\"\"\"\n"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 7 6') == '2/5'\nassert solution('7 2 4') == '7/2'\n\"\"\"\nimport sys"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7 6') == '2/5'\nassert solution('7 2 4') == '7/2'\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7 6\") == \"2/5\"\nassert solution(\"7 2 4\") == \"7/2\"\n\n\n\n-----Test1-----\n\nInput\n3 7 6\n\nOutput\n2/5\n\n-----Test2-----\n\nInput\n7 2 4\n\nOutput\n7/2\n\n\n\"\"\"\n\nfrom fractions import Fraction\n"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7 6\") == \"2/5\"\nassert solution(\"7 2 4\") == \"7/2\"\nassert solution(\"1/2 1/3 2/7\") == \"1/2\"\nassert solution(\"2/4 3/5 4/7 5/11\") == \"3/5\"\nassert solution(\"3/7 9/11 13/17\") == \"3/7\"\n"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 7 6') == '2/5'\n"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7 6') == '2/5'\nassert solution('7 2 4') == '7/2'\n"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7 6') == '2/5'\n\nassert solution('7 2 4') == '7/2'"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7 6\") == \"2/5\"\nassert solution(\"7 2 4\") == \"7/2\"\nassert solution(\"1 4 6\") == \"2/5\"\nassert solution(\"1 1 6\") == \"1/1\"\nassert solution(\"7 7 7\") == \"1/1\"\n\nprint(solution(\"3 7 6\"))\nprint(solution(\"7 2 4\"))\nprint(solution(\"1 4 6\"))\nprint(solution(\"1 1 6\"))\nprint(solution(\"7 7 7\"))\nprint(solution(\"7 5 7\"))"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\") == '1'\nassert solution(\"5 1 2\\n2\\n1 2\\n2 4\") == '2'\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\") == '1'\nassert solution(\"7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\") == '1'\nassert solution(\"5 1 2\\n2\\n1 2\\n2 4\") == '2'\nassert solution(\"5 1 2\\n2\\n1 2\\n2 4\") == '2'\n\"\"\""
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\\n\") == '1'\nassert solution(\"5 1 2\\n2\\n1 2\\n2 4\\n\") == '2'\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1') == '1'\nassert solution('7 2 5\\n2\\n1 2\\n2 5\\n5 7\\n7 1') == '2'"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\\n') == '1'\nassert solution('7 3 4\\n2\\n1 2\\n2 5\\n5 7\\n7 1\\n') == '1'\nassert solution('7 3 4\\n2\\n3 5\\n5 7\\n7 1\\n') == '3'\nassert solution('7 3 4\\n1\\n1 2\\n2 5\\n5 7\\n7 1\\n') == '2'\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 3 4\n3 4 6\n1 2\n2 5\n5 7\n7 1''') == '1'\nassert solution('''5 1 2\n2\n1 2\n2 4''') == '2'\nassert solution('''5 1 2\n2\n1 2\n2 4''') == '2'\nassert solution('''5 2 4\n4 2\n3 4\n1 2\n1 3''') == '3'\nassert solution('''5 2 4\n4 2\n3 4\n1 2\n1 3''') == '3'\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\") == '1'\nassert solution(\"5 1 2\\n2\\n1 2\\n2 4\") == '2'\nassert solution(\"5 1 2\\n2\\n1 2\\n2 4\") == '2'"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\") == \"1\"\nassert solution(\"5 1 2\\n2\\n1 2\\n2 4\") == \"2\"\nassert solution(\"7 5 5\\n2\\n2 3\\n3 1\\n3 4\\n4 5\\n5 7\\n7 1\\n7 3\") == \"1\"\nassert solution(\"7 2 3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 1\\n7 3\") == \"2\"\nassert solution(\"5 2 3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 1\\n7 3\") == \"2\"\n\n-----Test-----\n\n-----Benchmark-----\n\n\"\"\""
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n7 3 4\n3 4 6\n1 2\n2 5\n5 7\n7 1\n''') == '1'\n\"\"\""
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7 3 4\n3 4 6\n1 2\n2 5\n5 7\n7 1''') == '1'\nassert solution('''5 1 2\n2\n1 2\n2 4''') == '2'"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == \"3 14\"\n\"\"\"\n\nstdin = \"\"\"2 1 1\n4\n5 USB\n6 PS/2\n3 PS/2\n7 PS/2\n\"\"\""
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 1\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == '3 14'\nassert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == '3 16'\n\"\"\"\n\na, b, c = map(int, input().split())\n\nmouse_list = []\ncount = 0\ncost = 0\n\nfor i in range(a):\n    mouse_list.append([int(i) for i in input().split()])\n\nmouse_list = sorted(mouse_list, key=lambda x: x[0], reverse=True)\n\nfor i in mouse_list:\n    if b > 0 and i[1] == 'USB':\n        count += 1\n        cost += i[0]\n        b -= 1\n    elif c > 0 and i[1] == 'PS/2':\n        count += 1\n        cost += i[0]\n        c -= 1\n    elif b > 0 and c > 0:\n        if i[1] == 'PS/2':\n            count += 1\n            cost += i[0]\n            c -= 1\n        elif i[1] == 'USB':\n            count += 1\n            cost += i[0]\n            b -= 1\n\nprint(count, cost)\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == \"3 14\"\nassert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == \"3 14\"\n\n\n\"\"\"\n\n\nfrom typing import List\nimport sys\nimport functools\n\n\nclass Mouse:\n    def __init__(self, cost: int, port: str):\n        self.cost = cost\n        self.port = port\n\n    def __repr__(self):\n        return f\"Mouse: {self.cost} {self.port}\"\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == \"3 14\"\n\"\"\"\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == expected_output"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == \"3 14\"\n\"\"\"\nimport sys"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2') == '3 14'\n\nassert solution('1 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2') == '0 10'\n\nassert solution('2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2') == '2 12'\n\nassert solution('2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2') == '3 13'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '2 1 1\\n'\n    '4\\n'\n    '5 USB\\n'\n    '6 PS/2\\n'\n    '3 PS/2\\n'\n    '7 PS/2'\n    ) == '3 14'\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == \"3 14\"\n\"\"\"\n\na, b, c = [int(i) for i in stdin.split()]\n\nm = 0\nmouse = []\nfor i in range(int(stdin)):\n    mouse.append(tuple([int(i) for i in stdin.split()]))\n\nmouse.sort(key=lambda x: x[0])\n\ni = 0\nj = 0\ncost = 0\ncount = 0\nwhile j < len(mouse) and i < len(mouse):\n    if mouse[j][1] == \"USB\" and c > 0:\n        cost += mouse[j][0]\n        c -= 1\n        j += 1\n        count += 1\n    elif mouse[j][1] == \"PS/2\" and b > 0:\n        cost += mouse[j][0]\n        b -= 1\n        j += 1\n        count += 1\n    else:\n        i += 1\nprint(count, cost)\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2') == '3 14'\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 1\n\nassert solution('hi') == 76\n\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aa\") == \"1\"\nassert solution(\"ab\") == \"2\"\nassert solution(\"abc\") == \"3\"\nassert solution(\"abcd\") == \"4\"\nassert solution(\"abcde\") == \"5\"\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"51\"\nassert solution(\"hi\") == \"76\""
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == 51\nassert solution(\"hi\") == 76\n\"\"\"\n\n\nimport string\n\ns = list(string.ascii_lowercase)"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 52\nassert solution('hi') == 77\n\n\"\"\""
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == 51\n\"\"\"\n\nimport collections\n\ns = input()\n\ncounts = collections.Counter(s)\ncounts = counts.values()\n\ntotal = 0\nfor num in counts:\n    total += num * (num-1) // 2\n\nprint(total)\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 51\nassert solution('hi') == 76\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 26\nassert solution('ab') == 51\nassert solution('abc') == 76\nassert solution('abcd') == 91\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hi\") == \"76\"\n\"\"\"\n\n\nfrom collections import defaultdict, Counter, OrderedDict, deque"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 1\nassert solution('ab') == 2\nassert solution('aab') == 3\nassert solution('abca') == 5\nassert solution('abc') == 3\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 0') == '9'\nassert solution('3 1') == '1'\nassert solution('4 1') == '3'\n\"\"\"\n\nfrom collections import deque\nfrom copy import deepcopy\nfrom math import gcd"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 0\") == \"9\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"4 1\") == \"3\"\n\"\"\"\n\n\nimport collections\nimport copy\nimport re"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0\\n2 > 3\") == \"1\"\nassert solution(\"3 1\\n2 > 3\\n1 = 1\") == \"2\"\n\"\"\"\n\n\n\n\"\"\"\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n2 > 3\\n\") == \"1\"\nassert solution(\"3 1\\n2 > 3\\n2 < 3\\n\") == \"0\"\nassert solution(\"4 1\\n3 = 6\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 0') == '9'\nassert solution('3 1') == '1'\nassert solution('4 1') == '3'\n\"\"\""
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 0') == '9'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n2 > 3\\n\") == \"1\"\nassert solution(\"4 1\\n3 = 6\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n3 = 6\\n\") == 3\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 0\\n') == '9'\nassert solution('3 1\\n2 > 3') == '1'\nassert solution('4 1\\n3 = 6') == '3'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"1111\"\nassert solution(\"4 2\") == \"22\"\nassert solution(\"1 2 3 4 5\") == \"11111222211\"\n\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 1\nassert solution('10') == 3\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"3\"\n\"\"\""
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(10) == 5\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == 1\nassert solution('6') == 2\nassert solution('10') == 3"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 1\nassert solution('10') == 3\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == 1\nassert solution(10) == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 1\nassert solution('10') == 3\nassert solution('100') == 10\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom itertools import combinations_with_replacement\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '3'\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430:\n\u0412 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043f\u043e\u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0434\u043b\u0438\u043d\u0443 \u0441\u0430\u043c\u043e\u0439 \u0434\u043b\u0438\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u0438\u0437 \u0441\u0443\u043c\u043c \u0434\u0432\u0443\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c\u0441\u044f \u0441 \u044d\u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430. \u0418 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 11 \u0434\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b (\u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0445).\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u0430 3 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432, \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c 10, \u0438 \u0442.\u0434.\n\n\u0412\u044b\u0432\u043e\u0434:\n\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0439\u0434\u0435\u043d.\n\"\"\"\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '3'\n\n\"\"\""
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 1\nassert solution('10') == 3\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0840\") == '17 7 7 7 -1 2 17 2 7'\nassert solution(\"35862\") == '2 2 1 2 1 2 2 2 0 1'\nassert solution(\"4356\") == '7 7 7 5 7 9 2 17 2 3'\nassert solution(\"964\") == '2 2 2 2 2 0 2 2 2'\nassert solution(\"03\") == '2 2 1 2 1 2 2 0 1'\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0840\") == \"17 17 7 7 7 -1 2 17 2 7\"\n\"\"\"\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0840') == '-1 17 7 7 7 -1 2 17 2 7'\n\"\"\"\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0840\") == \"17 17 7 7 7 -1 2 17 2 7\"\nassert solution(\"0919\") == \"1 9 -1 9 1 -1 9 1 -1 1 9 1 -1 9 -1 9 1 -1 1 9 1 -1 1 9 -1 9 1 -1 -1 9 -1 1 9 -1 1 1 -1 9 -1 1 1 -1 9 -1 1 1 -1 1 9 -1 1 1 -1 -1 9 -1 1 9 -1 1 1 -1 1 9 -1 1 1 -1 -1 1 9 -1 1 1 -1 -1 1 9 -1 1 1 -1 -1 1 9 -1 1 1 -1 -1 1 9 -1 1 1 -1 -1 1 9 -1 1 1 -1 -1 1 1 -1 1 9 -1 1 1 -1 -1 1 1 -1 1 9 -1 1 1 -1 -1 1 1 -1 1 9 -1 1 1 -1 -1 1 1 -1 1 9 -1 1 1 -1 -1 1 1 -1 1 1 -1 1 9 -1 1 1 -1 -1 1 1 -1 1 1 -1 1 9 -1 1 1 -1 -1 1 1 -1 1 1 -1 1 9 -1 1 1 -1 -1 1 1 -1 1 1 -1 1 9 -1 1 1 -1 -1 1 1 -1 1 1 -1 1 9 -1 1 1 -1 -1 1 1 -1 1 1 -1 1 9 -1 1 1 -1 -1 1 1 -1 1 1 -1 1 9 -1 1 1 -1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -1 1 1 -"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('0840') == '8'\nassert solution('08040') == '-1 8 8 4 0'\nassert solution('084021') == '-1 8 8 4 0 2 2 2'\nassert solution('084021010') == '8 8 4 0 2 2 2 0 1'\n\"\"\"\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0840\") == '2 2 1 2 1 2 2 0 1'\nassert solution(\"01110\") == '0 0 0 0 0 0 0 0 0'\nassert solution(\"101010\") == '0 0 0 0 0 0 0 0 0'\nassert solution(\"10101010\") == '0 0 0 0 0 0 0 0 0'\nassert solution(\"1010101010\") == '0 0 0 0 0 0 0 0 0'\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0840\") == '17 17 7 7 7 -1 2 17 2 7'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0840') == '17 7 7 7 -1 2 17 2 7'\n\"\"\"\nimport re"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0840') == '2 2 1 2 1 2 2 0 1'\nassert solution('1040') == '7 7 7 7 -1 2 9 2 7'\nassert solution('1024') == '7 7 7 5 7 9 2 17 2 3'\nassert solution('0') == '-1 17 7 7 7 -1 2 17 2 7'\nassert solution('07') == '-1 17 7 5 5 5 2 7 2 7'\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0840') == '17 7 7 7 -1 2 17 2 7'\n\n\"\"\""
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\") == \"YES\"\nassert solution(\"WBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\") == \"NO\"\nassert solution(\"BBBBBBWW\\nWBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\") == \"YES\"\nassert solution(\"BBBBBBWB\\nWBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\") == \"NO\"\nassert solution(\"BBBBBBBB\\nWBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\") == \"YES\"\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"WBWBWBWB\"\n) == 'YES'\nassert solution(\n\"WBWBWBWB\"\n) == 'NO'\nassert solution(\n\"BWBWBWBW\"\n) == 'YES'\nassert solution(\n\"BWBWBWBW\"\n) == 'NO'\nassert solution(\n\"BWBWBWBW\"\n) == 'YES'\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\") == \"YES\"\nassert solution(\"BWBWBWBW\\nWBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\") == \"NO\"\nassert solution(\"BWBWBWBW\\nWBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\") == \"NO\"\nassert solution(\"WBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\") == \"YES\"\nassert solution(\"BBBBBBWW\\nWWBBBBBW\\nBWBWBWBW\\nBWBWBWBW\\nBBBBBBWW\\nWWBBBBBW\\nBWBWBWBW\\nBWBWBWBW\") == \"YES\""
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\nWWWWWWBB\nBBBWWWBW\nBBBWWWBW\nBWBWWWBW\nWBWWWWBB\nWWWWWWBB\nBBBWWWBW\nBBBWWWBW\nBWBWWWBW\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"\nWWWWWWBB\nBBBWWWBW\nBBBWWWBW\nBWBWWWBW\nWBWWWWBB\nWWWWWWBB\nBBBWWWBW\nBBBWWWBW\nBWBWWWBW\n\"\"\"\n) == \"NO\"\n\nassert solution(\n\"\"\"\nWWWWWWBB\nBBBWWWBW\nBBBWWWBW\nBWBWWWBW\nWBWWWWBB\nWWWWWWBB\nBBBWWWBW\nBBBWWWBW\nBWBWWWBW\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"\nWWWWWWBB\nBBBWWWBW\nBWBWWWBW\nBBBWWWBW\nBWBWWWBW\nWBWWWWBB\nWWWWWWBB\nBBBWWWBW\nBWBWWWBW\nBWBWWWBW\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"\nWWWWWWBB\nWWWWWWBB\nBBBWWWBW\nBWBWWWBW\nBWBWWWBW\nBWBWWWBW\nBWBWWWBW\nBBBWWWBW\nWWWWWWBB\nBBBWWWBW\nBWBWWWBW\n\"\"\"\n) == \"NO\""
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''WBWBWBWB\nBWBWBWBW\nBWBWBWBW\nBWBWBWBW\nWBWBWBWB\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB\n''') == 'YES'\n\nassert solution('''WBWBWBWB\nBWBWBWBW\nBWBWBWBW\nBWBWBWBW\nWBWBWBWB\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB\n''') == 'NO'\n\nassert solution('''BBBBBBWB\nWBWBWBWB\nBWBWBWBW\nBWBWBWBW\nBWBWBWBW\nWBWBWBWB\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB\n''') == 'YES'\n\nassert solution('''WBWBWBWB\nBWBWBWBW\nBWBWBWBW\nBWBWBWBW\nBWBWBWBW\nWBWBWBWB\nBWBWBWBW\nBWBWBWBW\nWBWBWBWB\n''') == 'NO'\n\nassert solution('''BBBBBBWW\nBWBWBWBW\nBWBWBWBW\nBWBWBWBW\nBWBWBWBW\nBWBWBWBW\nBWBWBWBW\nBWBWBWBW\nWBWBWBWB\n''') == 'YES'"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WBWBWBWB\\n\"\n                \"BWBWBWBW\\n\"\n                \"BWBWBWBW\\n\"\n                \"BWBWBWBW\\n\"\n                \"WBWBWBWB\\n\"\n                \"WBWBWBWB\\n\"\n                \"BWBWBWBW\\n\"\n                \"WBWBWBWB\") == \"YES\"\nassert solution(\"WBWBWBWB\\n\"\n                \"BWBWBWBW\\n\"\n                \"BWBWBWBW\\n\"\n                \"BWBWBWBW\\n\"\n                \"WBWBWBWB\\n\"\n                \"WBWBWBWB\\n\"\n                \"BWBWBWBW\\n\"\n                \"WBWBWBWB\") == \"NO\"\nassert solution(\"WBBBBBWW\\n\"\n                \"BBBBBBWW\\n\"\n                \"BBBBBBBW\\n\"\n                \"BBBBBBWW\\n\"\n                \"WBBBBBBW\\n\"\n                \"WBBBBBBW\\n\"\n                \"BBBBBBWW\\n\"\n                \"WBBBBBBW\") == \"YES\"\nassert solution(\"WBBBBBWW\\n\"\n                \"BWBWBWBW\\n\"\n                \"BBBBBBWW\\n\"\n                \"BWBWBWBW\\n\"\n                \"WBBBBBBW\\n\"\n                \"WBBBBBBW\\n\"\n                \"BBBBBBWW\\n\"\n                \"WBBBBBBW\") == \"NO\""
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\\n\") == \"YES\"\nassert solution(\"BBBBBBWW\\nWWWBWBW\\nWBWBWBW\\nWBWBWBW\\nWBWBWBW\\nWBWBWBW\\nWBWBWBW\\nWBWBWBW\\n\") == \"NO\"\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\") == \"YES\"\nassert solution(\"WBWBWBWB\\nWBBWBWBW\\nBWBWBWBW\\nBBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\") == \"NO\"\nassert solution(\"WWBBBBWW\\nWWBBBBWB\\nBBBBBWWW\\nBWWBBBWW\\nBWWBBBWW\\nWWBBBBWW\\nWWBBBBWB\\nBBBBBWWW\\nWWWWBBWW\") == \"YES\"\nassert solution(\"WWWWBBWW\\nWWBBBBWB\\nBBBBBWWW\\nBWWBBBWW\\nBWWBBBWW\\nWWBBBBWW\\nWWBBBBWB\\nBBBBBWWW\\nWWWWBBWW\") == \"NO\"\nassert solution(\"WWBBBBWB\\nWWBBBWBW\\nBWWBWBWB\\nBWWBBBWB\\nWWBBBBWB\\nWWBBBBWB\\nBWWBWBWB\\nWWBWBWBW\\nWWBBBBWB\") == \"YES\"\nassert solution(\"WBBBBBWB\\nWBBBBBWB\\nWBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBBBBBWB\\nWBBBBBWB\") == \"NO\"\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WWWWWWWBBBBBBBWWWWBBWWWWW\") == \"YES\"\nassert solution(\"WBWBWBWBWWBWBWBWBWWBWBWBW\") == \"NO\"\nassert solution(\"WBWBWBWBWBWBWBWBWBWBWBWW\") == \"YES\"\nassert solution(\"WBWBWBWBWWBWBWBWBWWBWBWBW\") == \"NO\"\nassert solution(\"WWWWWWWBBBBBBBWWWWBBWWWWW\") == \"YES\"\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 6 12\") == \"3\\n4 6 12\"\nassert solution(\"2 3\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 6 12') == '3'\n\"\"\"\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '-1'\nassert solution('2 4 6 12') == '3'\nassert solution('2 3') == '-1'\nassert solution('2 3 4') == '-1'\nassert solution('2 4 6 12') == '3'\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 6 12\") == \"3 4 6 12\"\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 6 12\") == \"3 4 6 12\"\nassert solution(\"2 3\") == \"-1\"\nassert solution(\"2 3 4 5\") == \"2 3 4 5\"\n\"\"\"\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6 12\") == \"3 4 6 12\"\nassert solution(\"2 3\") == \"-1\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 6 12') == '3\\n4 6 12'\nassert solution('2 3') == '-1'\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6 12') == '3\\n4 6 12'\nassert solution('2 3') == '-1'\n\"\"\""
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 4 6 12\") == \"3\\n4 6 12\"\nassert solution(\"2\\n2 3\") == \"-1\"\nassert solution(\"3\\n4 6 12\") == \"3\\n4 6 12\"\nassert solution(\"4\\n2 4 6 12\") == \"3\\n4 6 12\"\n\n----"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 6 12\") == \"3 4 6 12\"\nassert solution(\"2 3\") == \"-1\"\nassert solution(\"2 1\") == \"1 2\"\nassert solution(\"2\") == \"-1\"\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 3 1 2''') == '3 2 0 2 0'\nassert solution('''4\n3 2 1 4''') == '2 3 4 0'\n\"\"\"\n\n\nfrom bisect import bisect_left\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 1 2\\n\") == \"3 2 0 2 0\"\n\"\"\""
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 1 2\\n\") == '3 2 0 2 0'\n\"\"\""
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 1 2\") == \"3 2 0 2 0\"\nassert solution(\"4\\n3 2 1 4\") == \"2 3 4 0\"\n\nassert solution(\"6\\n1 2 3 4 5 6\") == \"5 0 0 5 0\"\n\nassert solution(\"2\\n2 2\") == \"0 0\"\n\n\n-----Input-----\n\n5\n1 2 3 1 2\n\n-----Output-----\n\n3 2 0 2 0\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 1 2') == '3 2 0 2 0'\nassert solution('4\\n3 2 1 4') == '2 3 4 0'\n\"\"\""
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 1 2\") == \"3 2 0 2 0\"\nassert solution(\"4\\n3 2 1 4\") == \"2 3 4 0\""
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '2 3 4 0'\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 1 2\") == \"3 2 0 2 0\""
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 1 2\") == \"3 2 0 2 0\"\nassert solution(\"4\\n3 2 1 4\") == \"2 3 4 0\"\n\"\"\""
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 162') == 'YES\\n5\\n2 4 8 81 162'\nassert solution('4 42') == 'NO'\nassert solution('100 40021') == 'YES\\n5\\n100 200 2001 4002 40021'\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 162\") == \"YES\\n5\\n2 4 8 81 162\"\nprint(solution(\"2 162\"))\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 162') == 'YES\\n5\\n2 4 8 81 162'\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 8 81 162\") == \"YES\\n5\\n2 4 8 81 162\"\n\n\"\"\""
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 162\") == \"YES\\n5\\n2 4 8 81 162\"\nassert solution(\"4 42\") == \"NO\"\nassert solution(\"100 40021\") == \"YES\\n5\\n100 200 2001 4002 40021\""
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 40021\") == 'YES\\n5\\n100 200 2001 4002 40021'\n\"\"\""
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 162\") == \"YES\\n5\\n2 4 8 81 162\"\nassert solution(\"4 42\") == \"NO\"\nassert solution(\"100 40021\") == \"YES\\n5\\n100 200 2001 4002 40021\"\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 162\") == 'YES\\n5\\n2 4 8 81 162'\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 162') == 'YES\\n5\\n2 4 8 81 162'\n\n\"\"\"\n\n\"\"\"\nAnswer:\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 162') == 'YES\\n5\\n2 4 8 81 162'\nassert solution('4 42') == 'NO'\nassert solution('100 40021') == 'YES\\n5\\n100 200 2001 4002 40021'\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 5\") == \"18\"\nassert solution(\"2 4 4\") == \"16\"\n\nprint(\"Success\")"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 5\\n') == '18\\n3 6'\nassert solution('2 4 4\\n') == '16\\n4 4'\nprint('Success')\n\n\"\"\"\n\nimport sys\nimport ast\nfrom ast import literal_eval\n\nstdin = sys.stdin.readline().strip()\n\nn, a, b = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n\nprint(int(n * a * b / 6))\nprint(a + b)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(input()).split(\" \")\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 5\") == \"18\"\nassert solution(\"2 4 4\") == \"16\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 2 2\") == \"4\"\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 5\\n') == '18\\n3 6\\n'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 5\\n\") == \"18\\n3 6\\n\"\nassert solution(\"2 4 4\\n\") == \"16\\n4 4\\n\"\nassert solution(\"1 1 1\\n\") == \"2\\n1 1\\n\"\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 5\") == '18'\n\nassert solution(\"2 4 4\") == '16'\n\nassert solution(\"2 4 4\") == '16'\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"1 1\"\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 5\") == \"18 3 6\"\nassert solution(\"2 4 4\") == \"16 4 4\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\\n2 2 2\\n3 3 3\") == \"3 3\\n1 1 1\"\nassert solution(\"2 2 2\\n3 3 3\") == \"3 3\\n1 1 1\"\nassert solution(\"1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\") == \"3 3\\n4 4\\n2 2 2\"\nassert solution(\"1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\") == \"3 3\\n4 4\\n2 2 2\\n6 6 6\"\nassert solution(\"1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\\n7 7 7\") == \"3 3\\n4 4\\n2 2 2\\n6 6 6\\n7 7 7\"\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"Impossible\"\nassert solution(\"1\\n\") == \"Impossible\"\nassert solution(\"2\\n\") == \"Impossible\"\nassert solution(\"3\\n1 1\") == \"Impossible\"\nassert solution(\"3\\n-1 1\") == \"Infinity\"\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-7 1\\n5 2\\n8 2\") == \"1907\"\nassert solution(\"2\\n57 1\\n22 2\") == \"Impossible\"\nassert solution(\"1\\n-5 1\") == \"Infinity\"\nassert solution(\"4\\n27 2\\n13 1\\n-50 1\\n8 2\") == \"1897\"\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n-7 1\\n5 2\\n8 2') == '1907'\nassert solution('2\\n57 1\\n22 2') == 'Impossible'\nassert solution('1\\n-5 1') == 'Infinity'\n\"\"\"\nimport math"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n-7 1\") == \"1907\"\nassert solution(\"2\\n57 1\") == \"Impossible\"\nassert solution(\"1\\n-5 1\") == \"Infinity\"\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n-7 1\\n5 2\\n8 2\") == \"1907\"\nassert solution(\"2\\n57 1\\n22 2\") == \"Impossible\"\nassert solution(\"1\\n-5 1\") == \"Infinity\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-7 1\\n5 2\\n8 2\") == \"1907\"\nassert solution(\"2\\n57 1\\n22 2\") == \"Impossible\"\nassert solution(\"1\\n-5 1\") == \"Infinity\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430:\n\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430\n\u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 mmm \u0438 nnn (m>nm>n). \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 mmm \u0434\u043e nnn \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f, \u0441\u0440\u0435\u0434\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043e\u0434\u043d\u043e \u043d\u0443\u043b\u0435\u0432\u043e\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 mmm \u0438 nnn, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0415\u0441\u043b\u0438 \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0435\u0442, \u0442\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e.\n\nSample Input 1:\n\n0\n\nSample Output 1:\n\n0\n\nSample Input 2:\n\n3\n1\n10\n\nSample Output 2:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\nSample Input 3:\n\n4\n-8\n4\n\nSample Output 3:\n\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n\nSample Input 4:\n\n-6\n-10\n\nSample Output 4:\n\n-6\n-5\n-4\n-3\n-2\n-1\n0\n\nSample Input 5:\n\n4\n10\n0\n-1\n\nSample Output 5:\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\nSample Input 6:\n\n0\n\nSample Output 6:\n\n0\n\"\"\"\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n-7 1\\n5 2\\n8 2') == \"1907\"\nassert solution('2\\n57 1\\n22 2') == \"Impossible\"\nassert solution('1\\n-5 1') == \"Infinity\"\n\n\n\"\"\"\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 1\") == \"1907\"\nassert solution(\"5 2\") == \"Impossible\"\nassert solution(\"8 2\") == \"1897\"\nassert solution(\"27 1\") == \"Impossible\"\nassert solution(\"-5 1\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\") == \"1892\"\nassert solution(\"5 2\") == \"Impossible\"\nassert solution(\"2 1\") == \"Impossible\"\nassert solution(\"5 2\") == \"Impossible\"\nassert solution(\"5 1\") == \"1892\"\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-7 1\\n5 2\\n8 2\") == \"1907\"\nassert solution(\"2\\n57 1\\n22 2\") == \"Impossible\"\nassert solution(\"1\\n-5 1\") == \"Infinity\"\nassert solution(\"4\\n27 2\\n13 1\\n-50 1\\n8 2\") == \"1897\"\nassert solution(\"6\\n49 1\\n8 2\\n1 2\\n3 2\\n4 2\\n5 2\") == \"Infinity\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abca') == 'YES\\na\\nb\\nc\\na'\nassert solution('aaacas') == 'YES\\naa\\na\\na\\na\\na\\cas'\nassert solution('abc') == 'NO'\nassert solution('aabaaac') == 'NO'\nassert solution('ab') == 'YES\\na\\nb'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abca\") == \"YES\"\nassert solution(\"aaacas\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == expected_output_1\nassert solution(test_input_2) == expected_output_2\nassert solution(test_input_3) == expected_output_3\nassert solution(test_input_4) == expected_output_4\nassert solution(test_input_5) == expected_output_5"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abca\") == \"YES\"\nassert solution(\"aaacas\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\nprint('Success')\n\n\"\"\"\nfrom collections import defaultdict\nimport itertools"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abca\") == \"YES\"\nassert solution(\"aaacas\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abca') == 'YES\\naaaca'\nassert solution('aaacas') == 'YES\\naaa\\ncas'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"YES\"\nassert solution(\"aaacas\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abca\") == \"YES\"\nassert solution(\"aaacas\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\nassert solution(\"aaaca\") in (\"aaa\", \"s\")\nassert solution(\"aaa\") in (\"aaa\", \"s\")\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abca\") == \"YES\\nabca\"\nassert solution(\"aaacas\") == \"YES\\naaa\\ncas\"\n\nassert solution(\"a\") == \"YES\\na\\na\\na\\na\\na\"\nassert solution(\"ab\") == \"YES\\na\\na\\na\\nb\\na\\nb\\nb\\na\\nb\\nb\"\nassert solution(\"abc\") == \"YES\\na\\na\\na\\nb\\na\\nb\\nb\\nc\\na\\nb\\nb\\nc\\nb\\nc\\nb\\nc\\nb\\nc\\nb\\nc\\nc\\nb\\nc\\nb\\nc\\nb\\nc\\nb\\nc\\nb\\nc\\nb\\nc\\nb\\nc\\nb\\nc\\nb\\nc\\nb\\c\\nb\\c\\b\\c\\b\\b\\c\\b\\c\\b\\c\\b\\c\\b\\c\\b\\c\\b\\c\\c\\c\\c\\c\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abca\") == 'YES\\nabca'\nassert solution(\"aaacas\") == 'YES\\naaa\\ncas'\nassert solution(\"abc\") == 'NO'\n\"\"\"\n\nimport itertools\nimport sys\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A221033\") == 21\nassert solution(\"A223635\") == 22\nassert solution(\"A232726\") == 23\n\"\"\""
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(A221033) == 21\nassert solution(A223635) == 22\nassert solution(A232726) == 23\n\"\"\"\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A221033\") == \"21\"\nassert solution(\"A223635\") == \"22\"\nassert solution(\"A232726\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A221033\") == \"21\"\nassert solution(\"A223635\") == \"22\"\nassert solution(\"A232726\") == \"23\"\n\"\"\""
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A221033\") == 21\nassert solution(\"A223635\") == 22\nassert solution(\"A232726\") == 23\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A221033') == '21'\nassert solution('A223635') == '22'\nassert solution('A232726') == '23'\nassert solution('A223635A223635A223635A223635') == '21'\nassert solution('A223635A223635A223635A223635A223635') == '22'\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A221033\") == 21\nassert solution(\"A223635\") == 22\nassert solution(\"A232726\") == 23\n\"\"\"\nimport re\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A221033\") == 21\nassert solution(\"A223635\") == 22\nassert solution(\"A232726\") == 23\n\"\"\""
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A221033\") == 21\nassert solution(\"A223635\") == 22\nassert solution(\"A232726\") == 23\n\nprint(\"Passed all tests\")\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A221033') == 21\nassert solution('A223635') == 22\nassert solution('A232726') == 23\n\"\"\"\n\n\"\"\"\nThe only line of the input is a string of 7 characters. The first character is letter A, followed by 6 digits. The input is guaranteed to be valid (for certain definition of \"valid\").\n\nThe input string is guaranteed to have a valid solution, i.e. the sum of the digits is always even.\n\nWrite 5 lines of code to test the correctness of solution:\n-----Input-----\n\nThe only line of the input is a string of 7 characters. The first character is letter A, followed by 6 digits. The input is guaranteed to be valid (for certain definition of \"valid\").\n\n-----Output-----\n\nOutput a single integer.\n\n\n-----Examples-----\nInput\nA221033\n\nOutput\n21\n\nInput\nA223635\n\nOutput\n22\n\nInput\nA232726\n\nOutput\n23\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('47') == '1'\nassert solution('47') == '1'\nassert solution('4') == '1'\nassert solution('77') == '6'\nassert solution('77') == '6'\n\nprint('Example 1:')\nprint('Input : ')\nprint('47')\nprint('Exception :')\nprint('1')\nprint('Output :')\nprint(str(solution('47')))\nprint()\n\nprint('Example 2:')\nprint('Input : ')\nprint('77')\nprint('Exception :')\nprint('6')\nprint('Output :')\nprint(str(solution('77')))\nprint()\n\nprint('Example 3:')\nprint('Input : ')\nprint('4')\nprint('Exception :')\nprint('1')\nprint('Output :')\nprint(str(solution('4')))\nprint()\n\"\"\""
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('47') == '1'\nassert solution('744') == '2'\nassert solution('4') == '1'\n\"\"\"\n\n\"\"\"\nRuntime: 100 ms, faster than 94.53% of Python3 online submissions for The Lucky Number.\nMemory Usage: 14.5 MB, less than 16.67% of Python3 online submissions for The Lucky Number.\n\"\"\"\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"77\") == \"6\"\nassert solution(\"744\") == \"2\"\nassert solution(\"17\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"77\") == \"2\"\nassert solution(\"1000\") == \"8\"\nassert solution(\"777\") == \"7\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"17\") == \"2\"\nassert solution(\"467\") == \"6\"\n\"\"\"\n\nfrom math import *\n\nnumber = int(stdin.read())\n\nnumber_string = str(number)"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"744\") == \"2\"\nassert solution(\"77\") == \"6\"\nassert solution(\"4777\") == \"5\"\n\n\n\"\"\"\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('77') == 6\n\"\"\""
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('47') == 1\nassert solution('4') == 1\nassert solution('4747') == 2\nassert solution('7777') == 2\nassert solution('7847') == 4\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('47') == '1'\nassert solution('4') == '1'\nassert solution('77') == '6'\nassert solution('77777') == '1'\nassert solution('7777777') == '1'\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"744\") == \"2\"\nassert solution(\"47\") == \"1\"\n\"\"\""
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\") == \"35\"\n\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n7 1\n5 7 6 8 10 3 2\n3 5 7 6 1 10 2\n\"\"\") == \"35\"\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10') == '35'\nassert solution('8 2\\n2 4 1 4 7 8 2 9 2') == '18'\nassert solution('5 1\\n4 5 3 4 1') == '4'\nassert solution('5 4\\n4 5 1 3 2') == '0'\nassert solution('4 3\\n1 2 3 2') == '1'\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n1 3 4 2\\n1 1 1') == '3'\nassert solution('5 1\\n1 2 3 4 5\\n1 1 1') == '9'\nassert solution('5 1\\n1 2 3 4 5\\n1 3 5 4 2') == '13'\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, k, d = map(int, stdin.split(' '))\n        a = list(map(int, stdin.split(' ')))\n        e = [n+1 for _ in range(n)]\n        for i in range(k):\n            x, y, z = map(int, stdin.split(' '))\n            e[x-1] -= z\n            e[y-1] += z\n            if e[y-1] < n:\n                e[e[y-1]-1] -= (n-e[y-1])\n        return str(max(a[i]+e[i] for i in range(n)))\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 5 2 3\\n\") == \"4\\n\"\n\"\"\""
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\") == \"35\"\nassert solution(\"5 2\\n5 6 7 8 10 2\\n3 5 6 7 1 10\") == \"25\"\n\"\"\""
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\") == \"35\"\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == expected_result\n\n\"\"\""
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\\n6 7 8 9 10\\n\") == \"35\"\n\n\"\"\"\nimport sys\nimport bisect\nimport itertools"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n1 5 3 4\\n1') == '5'"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1100') == '3'\nassert solution('1111') == '4'\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1100') == '3'\nassert solution('1111') == '4'\n\n\"\"\"\nimport re"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1100') == '3'\nassert solution('1111') == '4'\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1100') == '3'\nassert solution('1111') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1100\") == \"3\"\nassert solution(\"1111\") == \"4\"\n\nsolution(stdin)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1100') == '3'\nassert solution('1111') == '4'\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1100\") == 3\n\"\"\"\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1100\") == \"3\"\nassert solution(\"1111\") == \"4\"\nassert solution(\"101010\") == \"10\"\nassert solution(\"100110\") == \"2\"\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1100\") == 3\nassert solution(\"1111\") == 4\n\nsolution()"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1100\") == \"3\"\nassert solution(\"1111\") == \"4\"\nassert solution(\"101010\") == \"5\"\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10\\n-1 5 0 -5 3\") == \"0\"\nassert solution(\"3 4\\n-10 0 20\") == \"-1\"\nassert solution(\"5 10\\n-5 0 10 -11 0\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"5 10\n-1 5 0 -5 3\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"3 4\n-10 0 20\"\"\"\n) == \"-1\"\nassert solution(\n\"\"\"5 10\n-1 5 0 -5 3\n-1 -1 -1 1\"\"\"\n) == \"2\""
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10\\n-1 5 0 -5 3\") == '0'\n\nassert solution(\"3 4\\n-10 0 20\") == '-1'\n\nassert solution(\"5 10\\n-5 0 10 -11 0\") == '2'\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0 1 0 2 3 4') == '1'\nassert solution('10 5 0 -5 3') == '1'\nassert solution('1 10 0 -10') == '-1'\nassert solution('1 10 0 -10 5') == '0'\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10\\n-1 5 0 -5 3\") == \"0\"\nassert solution(\"5 10\\n-5 0 10 -11 0\") == \"2\"\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 10\\n-1 5 0 -5 3\\n') == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10\\n-1 5 0 -5 3\") == \"0\"\nassert solution(\"5 10\\n-5 0 10 -11 0\") == \"-1\"\n\"\"\"\n\nn, d = [int(x) for x in stdin.split()]\nl = [int(x) for x in stdin.split()]\n\nmoney = 0\nday = 0\n\nfor a in l:\n    money += a\n    if money > d:\n        money = 0\n        day += 1\n    if money == 0:\n        day = 0"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10\\n-5 0 10 -11 0\") == \"2\"\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10\\n-5 0 10 -11 0\") == \"2\"\n\"\"\""
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10\\n-1 5 0 -5 3\") == '0'\n\"\"\"\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 3\\n3 1\") == 3\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 3\\n3 1') == 3\n\nsolution = lambda s, t: len(set([tuple(set(i) for i in s), tuple(set(j) for j in t)]))"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 3\\n3 1') == '3'\n\nsolution('2 2\\n1 3\\n3 1') == '3'\n\nsolution('1 1\\n1') == '0'\n\nsolution('2 2\\n1 3\\n3 1') == '3'\n\nsolution('2 2\\n1 3\\n3 1') == '3'\n\nsolution('2 3\\n1 3\\n1') == '0'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('3 3\\n1 3\\n1') == '0'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('1 10\\n11') == '0'\n\nsolution('1 10\\n11') == '0'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1') == '1'\n\nsolution('2 3\\n1 3\\n3 1')"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == '1'\nassert solution('aa') == '2'\nassert solution('aab') == '3'\nassert solution('aabb') == '4'\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 3\\n3 1') == '3'\n\"\"\""
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 4\\n2 3\\n3 1\") == \"3\"\nassert solution(\"4 3\\n2 1 3\\n2 3 1\") == \"3\"\nassert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"0\"\nassert solution(\"4 3\\n1 1 3\\n1 3 2\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 3\\n3 1') == '3'\n\"\"\"\n\nimport sys\n\n\"\"\"\nS_lst, T_lst = sys.stdin.read().split('\\n')[:2]\n\ns_lst, t_lst = [int(x) for x in S_lst.split(' ')], [int(x) for x in T_lst.split(' ')]\n\"\"\""
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n1 3\n3 1\n''') == '3'\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 3\\n3 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 3\\n3 1\") == \"3\"\nassert solution(\"2 3\\n3 2\\n1 2\") == \"1\"\nassert solution(\"1 3\\n3 1\") == \"0\"\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 2 1 3 1\") == \"2 1 3 1 1 2\"\nassert solution(\"1 1\") == \"-1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n[1, 2, 2, 1, 3, 1]) == [2, 1, 3, 1, 1, 2]\nassert solution(\n[1, 1]) == -1\nassert solution(\n[1, 2, 3, 4]) == -1\nassert solution(\n[1, 1, 1, 1, 1, 1, 1, 1]) == -1\nassert solution(\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [-1, -1]\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 2 1 3 1\\n') == '2 1 3 1 1 2'\nassert solution('1\\n1 1\\n') == '-1'\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2 1 3 1\") == \"2 1 3 1 1 2\"\nassert solution(\"1 1\") == \"-1\"\nassert solution(\"4 2 2 1 3 1\") == \"4 2 1 3 1 1 2\"\nassert solution(\"2 2 2 1 1\") == \"-1\"\nassert solution(\"1 2 1 3 3 1\") == \"1 2 1 3 3 1 2\"\n\"\"\"\nimport math\nimport sys\nimport os\nfrom typing import List, Tuple, Union, Optional\nfrom copy import deepcopy\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '-1'\nassert solution('2 2 2 1 3 1') == '2 1 3 1 1 2'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nm = len(a) // 2"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '-1'\nassert solution('1 2 2 1 3 1') == '2 1 3 1 1 2'\n\"\"\"\n\n\"\"\"\nInput:\n3\n1 2 2 1 3 1\n\nOutput:\n2 1 3 1 1 2\n\"\"\"\nn = int(input())\narr = list(map(int, input().split()))\narr = arr[:n] + arr[n:]\nfor i in range(n):\n    print(arr[i], end=' ')"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"-1\"\nassert solution(\"1 2 2 1 3 1\") == \"2 1 3 1 1 2\"\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 2 1 3 1\\n') == '2 1 3 1 1 2'\nassert solution('1\\n1 1\\n') == '-1'\nassert solution('1\\n3\\n') == '-1'\nassert solution('1\\n2\\n') == '-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution(str(input()))), 'Wrong solution'\n\nIf you want to test the code on your local machine, you can run it here: https://ide.geeksforgeeks.org/H7mbRrQX8\n\nYou can also test it using https://py.checkio.org/\n\n\n\"\"\"\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"-1\"\nassert solution(\"1 2 2 1 3 1\") == \"2 1 3 1 1 2\"\n\"\"\""
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('74') == '35'\n\"\"\"\n\nimport math"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == 1\nassert solution(\"74\") == 35\n\"\"\""
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == 1\nassert solution(\"74\") == 35\n\n\"\"\""
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 1\nassert solution('74') == 35\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == 1\nassert solution('74') == 35\n\nprint(solution(input()))\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == 1\nassert solution('74') == 35\n\"\"\"\n\nimport itertools\nimport math\nimport unittest\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 1\nassert solution('74') == 35\n\"\"\"\n\nimport math"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '4'\n\"\"\"\n\n\"\"\"\n6\n2\n\n-1\n\n5\n\n\"\"\"\n\"\"\"\n\"\"\"\n\nn = int(input())\nsum = 0\nfor a in range(1, n + 1):\n    for b in range(a, n + 1):\n        c = pow((a ** 2) + (b ** 2), 0.5)\n        if c == int(c) and a < b and c <= n:\n            sum += 1\n\nprint(sum)\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"74\") == \"35\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == 1\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"123 456789\") == \"689974806\"\nassert solution(\"1 2\") == \"2\"\n\nprint(solution(\"2 2\"), \"7\")\nprint(solution(\"123 456789\"), \"689974806\")\nprint(solution(\"1 2\"), \"2\")"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"123 456789\") == \"689974806\"\n\"\"\"\n\nn, k = input().split()\nn, k = int(n), int(k)\n\nres = 0\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        if i + j <= k:\n            res += 1\nprint(res % (10**9 + 7))\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 2 2\") == \"2\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"2 3\") == \"4\"\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == 7\nassert solution(\"123 456789\") == 689974806\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"123 456789\") == \"689974806\"\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == 7\nassert solution('123 456789') == 689974806\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nmod = 10**9 + 7\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 1\\n2 2') == 7\nassert solution('123 456789\\n123 456 7890') == 689974806\n\n\"\"\"\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"123 456789\") == \"689974806\"\n\n\"\"\""
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"123 456789\") == \"689974806\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == 7\n\nassert solution('123 456789') == 689974806\n\n\n\n'''"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 2 1\\n1 2 3 59\\n') == '111'\n\"\"\""
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1\\n2'\nassert solution('2\\n1 2\\n1 2') == '1\\n2\\n3\\n4\\n3\\n4\\n5\\n6\\n5\\n6\\n7\\n8\\n7\\n8\\n9\\na\\nb\\nc\\nd\\na\\nb\\nc\\nd\\ne\\nf\\ng\\ne\\nf\\ng\\nh\\nh\\ni\\nj\\nj\\nk\\nl\\nm\\nz\\nx\\ny\\n0\\nz')\nassert solution('3\\n1 2 3\\n1 2 3') == '1\\n2\\n3\\n6\\n9\\n12\\n15\\n18\\n21\\n24\\n27\\n30\\n33\\n36\\n39\\n42\\n45\\n48\\n51\\n54\\n57\\n60\\n63\\n66\\n69\\n72\\n75\\n78\\n81\\n84\\n87\\n90\\n93\\n96\\n99\\n102\\n105\\n108\\n111\\n114\\n117\\n120\\n123\\n126\\n129\\n132\\n135\\n138\\n141\\n144\\n147\\n150\\n153\\n156\\n159\\n162\\n165\\n168\\n171\\n174\\n177\\n180\\n183\\n186\\n189\\n192\\n195\\n198\\n201\\n204\\n207\\n210\\n213\\n216\\n219\\n222\\n225\\n228\\n231\\n234\\n237\\n240\\n243\\n246\\n249\\n252\\n255\\n258\\n261\\n264\\n267\\n270\\n273\\n276\\n279\\n282\\n285\\n288\\n291\\n294\\n297\\n300\\n303\\n306\\n309\\n312\\n315\\n318\\n321\\n324\\n327\\n330\\n333\\n336\\n339\\n342\\n345\\n348\\n351\\n354\\n357\\n360\\n363\\n366\\n369\\n372\\n375\\n378\\n381\\n384\\n387\\n390\\n393\\n396\\n399\\n402\\n405\\n408\\n411\\n414\\n417\\n420\\n423\\n426\\n429\\n432\\n435\\n438\\n441\\n444\\n447\\n450\\n453\\n456\\n459\\n462\\n465\\n468\\n471\\n474\\n477\\n480\\n483\\n486\\n489\\n492\\n495\\n498\\n501\\n504\\n507\\n510\\n513\\n516\\n519\\n522\\n525\\n528\\n531\\n534\\n537\\n540\\n543\\n546\\n549\\n552\\n555\\n558\\n561\\n564\\n567\\n570\\n573\\n576\\n579\\n582\\n585\\n588\\n591\\n594\\n597\\n600\\n603\\n606\\n609\\n612\\n615\\n618\\n621\\n624\\n627\\n630\\n633\\n636\\n639\\n642\\n645\\n648\\n651\\n654\\n657\\n660\\n663\\n666\\n669\\n672\\n675\\n678\\n681\\n684\\n687\\n690\\n693\\n696\\n699\\n702\\n705\\n708\\n711\\n714\\n717\\n720\\n723\\n726\\n729\\n732\\n735\\n738\\n741\\n744\\n747\\n750\\n753\\n756\\n759\\n762\\n765\\n768\\n771\\n774\\n777\\n780\\n783\\n786\\n789\\n792\\n795\\n798\\n801\\n804\\n807\\n810\\n813\\n816\\n819\\n822\\n825\\n828\\n831\\n834\\n837\\n840\\n843\\n846\\n849\\n852\\n855\\n858\\n861\\n864\\n867\\n870\\n873\\n876\\n879\\n882\\n885\\n888\\n891\\n894\\n897\\n900\\n903\\n906\\n909\\n912\\n915\\n918\\n921\\n924\\n927\\n930\\n933\\n936\\n939\\n942\\n945\\n948\\n951\\n954\\n957\\n960\\n963\\n966\\n969\\n972\\n975\\n978\\n981\\n984\\n987\\n990\\n993\\n996\\n999\\n'''\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4 2 1\\n1 2 3 59') == '111'\nassert solution('3 4 2 1\\n1 2 3 59') == '111'\nassert solution('1 1 1 1\\n1 1 1 1') == '1'\nassert solution('2 2 1 1\\n1 1 1 1') == '2'\nassert solution('2 3 1 1\\n1 1 1 1') == '2'\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 4 2 1\n1 2 3 59''') == '111'\nassert solution('''3 4 2 1\n1 2 3 59''') == '111'\nassert solution('''3 4 2 1\n1 2 3 59\n1 2 3 59''') == '111'\nassert solution('''3 4 2 1\n1 2 3 59\n1 2 3 59\n1 2 3 59''') == '111'\n\n'''\n3 4 2 1\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1 2 3 59\n1"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2 1\\n1 2 3 59\") == '111'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 4 2 1\n1 2 3 59''') == '111'\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 2 1\\n1 2 3 59\\n') == '111'\n\"\"\""
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 2 1\\n1 2 3 59\\n\") == '111'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 2 1\\n1 2 3 59\\n') == '111'\n\n\n-----Hints-----\n\n* Think about how to loop through each row and column.\n* Think about how to go through each cell in a subrectangle of size $a \\times b$.\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 2 1\\n1 2 3 59') == '111'\n\"\"\"\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"4 1 1\") == \"Impossible\"\nassert solution(\"4 2 5\") == \"Impossible\"\n\n\nsolution(\"3 4 5\")"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"4 1 1\") == \"Impossible\"\nassert solution(\"4 4 4\") == \"Impossible\"\nassert solution(\"1 1 1\") == \"Impossible\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"4 1 1\") == \"Impossible\"\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 2') == '0 1 1'\nassert solution('3 4 5') == '1 3 2'\nassert solution('4 1 1') == 'Impossible'\n\n\"\"\"\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 2') == '0 1 1'\nassert solution('3 4 5') == '1 3 2'\nassert solution('4 1 1') == 'Impossible'\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 2') == '0 1 1'\nassert solution('3 4 5') == '1 3 2'\nassert solution('4 1 1') == 'Impossible'\n\n\n\"\"\""
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 2') == '0 1 1'\nassert solution('3 4 5') == '1 3 2'\nassert solution('4 1 1') == 'Impossible'\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 1\") == \"Impossible\"\nassert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"3 4 5\") == \"Impossible\"\nassert solution(\"4 1 1\") == \"Impossible\"\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 1') == 'Impossible'\nassert solution('3 4 5') == '1 3 2'\nassert solution('1 1 2') == '0 1 1'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n0 1 2 3 4') == '10'\nassert solution('5\\n1 1 0 1 1') == '1'\nassert solution('5\\n1 3 1') == '4'\nassert solution('3\\n1 3 1') == '0'\nassert solution('1\\n12') == '0'"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n0 1 2 3 4') == 10\nassert solution('5\\n1 1 0 1 1') == 1\nassert solution('3\\n1 3 1') == 4\n\"\"\"\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 1 2 3 4\\n\") == \"10\"\nassert solution(\"5\\n1 1 0 1 1\\n\") == \"1\"\nassert solution(\"3\\n1 3 1\\n\") == \"4\"\nassert solution(\"1\\n12\\n\") == \"0\"\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 1\\n\") == \"4\"\n\nassert solution(\"1 1 0 1 1\\n\") == \"1\"\n\nassert solution(\"3 1 1\\n\") == \"0\"\n\nassert solution(\"1 2 4 2\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('0 0 0 0 0') == 0\nassert solution('1 2 3 4 5') == 10\nassert solution('12 0 1 0 1') == 1\nassert solution('1 1 0 1 1') == 1\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 1 2 3 4\") == \"10\"\nassert solution(\"5\\n1 1 0 1 1\") == \"1\"\nassert solution(\"3\\n1 3 1\") == \"4\"\nassert solution(\"1\\n12\") == \"0\"\nassert solution(\"5\\n1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n0 1 2 3 4\n''') == '10'\nassert solution('''5\n1 1 0 1 1\n''') == '1'\nassert solution('''3\n1 3 1\n''') == '4'\nassert solution('''1\n12\n''') == '0'\nassert solution('''7\n0 0 1 0 1 1 0\n''') == '1'\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 1 2 3 4\") == \"10\"\nassert solution(\"5\\n1 1 0 1 1\") == \"1\"\nassert solution(\"3\\n1 3 1\") == \"4\"\nassert solution(\"1\\n12\") == \"0\""
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0 1 2 3 4\") == \"10\"\nassert solution(\"5\\n1 1 0 1 1\") == \"1\"\nassert solution(\"3\\n1 3 1\") == \"4\"\nassert solution(\"1\\n12\") == \"0\"\n\"\"\""
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 2 3\") == \"10\"\nassert solution(\"5\\n0 1 2 3 4\") == \"10\"\nassert solution(\"5\\n1 1 0 1 1\") == \"1\"\nassert solution(\"3\\n1 3 1\") == \"4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open('input.txt').read()) == open('output.txt').read()\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input_test) == output_test\nassert solution(input_test2) == output_test2\nassert solution(input_test3) == output_test3\nassert solution(input_test4) == output_test4\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 0\\n0 2\\n-2 2\\n0 -2\\n') == '135.0000000000'\n\nassert solution('3 0\\n0 2\\n-2 0\\n0 -2\\n') == '90.0000000000'\n\nassert solution('2 2\\n1 1\\n0 0\\n') == '36.8698976458'\n\nassert solution('4 0\\n0 2\\n-2 0\\n0 -2\\n') == '270.0000000000'"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2 0\\n0 2\\n-2 2\\n') == '90.0'\nassert solution('3\\n2 0\\n0 2\\n-2 2\\n') == '135.0'\nassert solution('4\\n2 0\\n0 2\\n-2 0\\n0 -2\\n') == '270.0'\n\"\"\"\n\nfrom math import acos, degrees\nfrom typing import List\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\n'''"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0\\n0 2\\n-2 2\\n0 -2\") == \"90.0\"\nassert solution(\"3 2\\n0 2\\n-2 2\\n0 -2\") == \"135.0\"\nassert solution(\"4 2\\n0 2\\n-2 0\\n0 -2\") == \"270.0\"\n\"\"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 0\\n0 2\\n-2 2\") == \"135.0\"\nassert solution(\"3 0\\n0 2\\n-2 0\\n0 -2\") == \"270.0\"\nassert solution(\"4 0\\n0 2\\n-2 0\\n0 -2\") == \"360.0\"\nassert solution(\"2 1\\n1 2\") == \"36.8698976458\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n\"\"\""
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\nassert solution(str(sample_input_2)) == str(sample_output_2)\nassert solution(str(sample_input_3)) == str(sample_output_3)\nassert solution(str(sample_input_4)) == str(sample_output_4)\nassert solution(str(sample_input_5)) == str(sample_output_5)"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 2\\n2 0') == '90.0'\n\nassert solution('3 0\\n0 2\\n-2 2') == '135.0'\n\nassert solution('4 2\\n2 0\\n0 2\\n-2 0\\n0 -2') == '270.0'\n\nassert solution('2 1\\n1 2') == '36.8698976458'\n\nassert solution('3 0\\n0 2\\n-2 2') == '135.0'"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2 0\\n0 2\\n-2 2\\n\") == \"90.0000000000\"\nassert solution(\"3\\n2 0\\n0 2\\n-2 0\\n0 -2\\n\") == \"135.0000000000\"\nassert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\\n\") == \"270.0000000000\""
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 2\") == 3\nassert solution(\"1 3 4\") == 6\n\"\"\"\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2\") == 3\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 2') == 3\n\n\"\"\"\nimport collections\nimport sys"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 2') == 3\nassert solution('1 4 3 1 2') == 6\n\"\"\""
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('5 1 4 3 1 2') == '6'\nassert solution('1 3 2') == '3'\nassert solution('1 2 3') == '6'\nassert solution('1 2 1 1 2') == '2'\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 2\") == \"3\"\nassert solution(\"2 2 1\") == \"3\"\nassert solution(\"1 1 1 1 1\") == \"2\"\nassert solution
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2') == '3'\nassert solution('5\\n1 4 3 1 2') == '6'\nassert solution('5\\n1 5 5 5 5') == '0'\nassert solution('8\\n5 4 1 2 3 4 2 4') == '7'\n\"\"\""
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n 1 3 2') == 3\nassert solution('5\\n 1 4 3 1 2') == 6\n\nstdin = \"\"\"3\n1 3 2\"\"\"\nsolution(stdin)\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 3 2') == '3'\nassert solution('4\\n1 4 3 2') == '6'\nassert solution('2\\n1 2') == '2'\nassert solution('4\\n1 2 3 4') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaBCCe') == 3\n\nassert solution('bcAAcbc') == 2\n\nassert solution('aAa') == 1\n\nassert solution('aAaA') == 2\n\nassert solution('aAaAaA') == 3"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nAaA\") == 2\nassert solution(\"7\\nbcAAcbc\") == 3\nassert solution(\"6\\naaBCCe\") == 5"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nAaA\") == \"2\"\n\nassert solution(\"7\\nbcAAcbc\") == \"3\"\n\nassert solution(\"6\\naaBCCe\") == \"5\""
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2A\") == \"2\"\nassert solution(\"3Aa\") == \"2\"\nassert solution(\"3AaA\") == \"3\"\nassert solution(\"5AaCdEf\") == \"5\"\nassert solution(\"5AaCdEfG\") == \"6\"\n\"\"\""
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nAaA\") == \"2\"\nassert solution(\"7\\nbcAAcbc\") == \"3\"\nassert solution(\"6\\naaBCCe\") == \"5\"\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nAaA\") == \"2\"\nassert solution(\"7\\nbcAAcbc\") == \"3\"\nassert solution(\"6\\naaBCCe\") == \"5\""
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7\nbcAAcbc''') == '3'\nassert solution('''6\naaBCCe''') == '5'\nassert solution('''3\nAaA''') == '2'\nassert solution('''6\naacbcc''') == '5'\nassert solution('''5\naabbbc''') == '3'\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\nbcAAcbc\") == 3\n\"\"\"\n\nn = int(input())\nlst = list(input())\n\nlst = [i.lower() for i in lst]\nlst_set = set(lst)\ndct = dict(map(lambda x: (x, lst.count(x)), lst_set))\n\nres = 0\nfor key in dct.keys():\n    if dct[key] > 1:\n        res += dct[key] - 1\nprint(res)\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('Ab') == 'Ab'\nassert solution('Aa') == 'A'\nassert solution('Abc') == 'Abc'\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AaA') == 2\n\nassert solution('bcAAcbc') == 3\n\nassert solution('aaBCCe') == 5"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xxXx\") == \"1\"\nassert solution(\"XxXx\") == \"XxXx\"\nassert solution(\"xXXxXx\") == \"0\"\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('xxXx') == '1'\nassert solution('XX') == '0'\nassert solution('xxx') == '1'\nassert solution('xxxx') == '2'\nassert solution('xxxxx') == '3'\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xxXx\") == \"1\\nXxXx\"\nassert solution(\"xxXx\") == \"1\\nXxXx\"\nassert solution(\"xxXx\") == \"1\\nXxXx\"\n\nassert solution(\"xXXxXx\") == \"0\\nxXXxXx\"\nassert solution(\"xXXxXx\") == \"0\\nxXXxXx\"\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('xxXx') == '1'\nassert solution('XxXx') == '1'\n\nassert solution('XX') == '1'\nassert solution('xX') == '1'\n\nassert solution('xxxXx') == '0'\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxXx\") == \"1\"\nassert solution(\"XX\") == \"1\"\nassert solution(\"xxxXx\") == \"0\"\nassert solution(\"xxxxxXx\") == \"0\"\nassert solution(\"xxXxxXx\") == \"1\"\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xxXx') == '1'\nassert solution('XX') == '1'\nassert solution('xxXxXx') == '0'\nassert solution('XxXx') == '1'\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('xxXx') == '1'\nassert solution('XxXx') == 'XxXx'\nassert solution('xxxXx') == '0'\nassert solution('xxxxXx') == 'XxXx'\n\nassert solution('xxxxXXx') == '0'\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('xxXx') == '1\\nXxXx'\nassert solution('XX') == '0\\nxX'\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xxXx\") == \"1\"\nassert solution(\"XX\") == \"1\"\nassert solution(\"xXXxXx\") == \"0\"\nassert solution(\"xxxXxX\") == \"1\"\nassert solution(\"xxxxXx\") == \"1\"\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xxXx\") == \"1\"\nassert solution(\"XX\") == \"1\"\nassert solution(\"xxxxx\") == \"5\"\n\nprint(solution(\"xxXx\"))\nprint(solution(\"XX\"))\nprint(solution(\"xxxxx\"))\n\n\"\"\"\nfrom typing import Dict\n\n__all__ = ['solution']\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"yandex\") == \"0\"\nassert solution(\"google\") == \"impossible\"\nassert solution(\"yahoo\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"yandex\") == '0'\nassert solution(\"google\") == '1'\nassert solution(\"yahoo\") == '1'\nassert solution(\"google\") == '1'\n\"\"\"\n\ns = input()\nk = int(input())\n\nalp = set(list(s))"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"yandex\") == \"0\"\nassert solution(\"google\") == \"impossible\"\nassert solution(\"yahoo\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0\\n'\nassert solution('yandex') == '0\\n'\nassert solution('yahoo') == '1\\n'\nassert solution('google') == 'impossible\\n'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('yandex') == '0'\nassert solution('yahoo') == '1'\nassert solution('google') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('yandex') == '0'\nassert solution('yahoo') == '1'\nassert solution('google') == 'impossible'\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('yandex') == '0'\nassert solution('yahoo') == '1'\nassert solution('google') == 'impossible'\nassert solution('hello') == 'impossible'"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('yahoo') == '1'\nassert solution('google') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"yandex\") == \"0\"\nassert solution(\"yahoo\") == \"1\"\nassert solution(\"google\") == \"impossible\"\nassert solution(\"sstttt\") == \"impossible\"\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('yandex') == '0'\nassert solution('yahoo') == '1'\nassert solution('google') == 'impossible'\n\nprint('all tests passed')"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 10\\n1 5\\n7 15\\n\") == \"3\"\nassert solution(\"3\\n0 10\\n1 5\\n7 15\\n\") == \"3\"\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0 10\\n1 5\\n7 15\\n') == '3'\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 5\\n1 2\\n5 6\\n7 8\\n3 4\\n3 5\") == \"3\"\n\"\"\""
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 10\\n1 5\\n7 15\\n2 8\\n3 9\\n4 11\") == \"4\"\nassert solution(\"3\\n0 10\\n1 5\\n7 15\\n2 8\\n3 9\\n4 11\") == \"3\"\nassert solution(\"3\\n0 10\\n1 5\\n7 15\\n2 8\\n3 9\\n4 11\") == \"3\"\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 5\\n2 8\\n1 6\\n\") == 1\nassert solution(\"3\\n0 10\\n1 5\\n7 15\\n\") == 3"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n0 10\\n1 5\\n7 15\\n') == '3'\n\"\"\""
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n5\\n2\\n8\") == 3\nassert solution(\"3\\n0\\n10\\n1\\n5\\n7\\n15\") == 3\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 10\\n1 5\\n7 15') == '3'\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 10\n1 5\n7 15\n''') == '1'\nassert solution('''\n3\n0 10\n1 5\n7 15\n''') == '3'\n\n\"\"\""
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 10\\n1 5\\n7 15') == '3'\nassert solution('3\\n0 5\\n2 8\\n1 6') == '1'\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 3\") == \"3\"\nassert solution(\"3 2 2\") == \"1\"\nassert solution(\"9 9 99\") == \"711426616\"\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 3\") == \"3\"\nassert solution(\"3 2 2\") == \"1\"\nassert solution(\"9 9 99\") == \"711426616\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 2\") == \"3\"\nassert solution(\"3 2 2\") == \"1\"\nassert solution(\"9 9 99\") == \"711426616\"\n\"\"\""
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 3\") == 3\nassert solution(\"3 2 2\") == 1\nassert solution(\"9 9 99\") == 711426616\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('2 1 3') == 3\nassert solution('3 2 2') == 1\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 3\") == \"3\"\nassert solution(\"3 2 2\") == \"1\"\nassert solution(\"9 9 99\") == \"711426616\"\n\n\n\"\"\""
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 3\\n') == '3'\nassert solution('3 2 2\\n') == '1'\nassert solution('9 9 99\\n') == '711426616'\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 5') == '2'\nassert solution('3 2 2') == '1'\nassert solution('9 9 99') == '711426616'\nassert solution('5 8 3') == '0'"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3\") == \"3\"\nassert solution(\"5 2 3\") == \"1\"\nassert solution(\"3 2 2\") == \"1\"\nassert solution(\"9 9 99\") == \"711426616\"\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 3') == '3'\nassert solution('3 2 2') == '1'\nassert solution('9 9 99') == '711426616'\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n5 10 7 3 20\") == 3\n\"\"\""
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n5 10 7 3 20\") == 3\nassert solution(\"6 2\\n100 1 10 40 10 40\") == 97\nassert solution(\"3 0\\n1 2 3\") == 0\n\n---\n\nn = int(stdin.readline())\nr = list(map(int, stdin.readline().strip().split()))\nc = int(stdin.readline())"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1\\n5 10 7 3 20') == '3'\nassert solution('6 2\\n100 1 10 40 10 40') == '97'\nassert solution('3 0\\n1 2 3') == '0'"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(5, 1) == 3\nassert solution(6, 2) == 97\nassert solution(3, 0) == 0"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\\n5 10 7 3 20\") == \"3\"\nassert solution(\"6 2\\n100 1 10 40 10 40\") == \"97\"\n\"\"\""
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n5 10 7 3 20\") == 3\nassert solution(\"6 2\\n100 1 10 40 10 40\") == 97\nassert solution(\"3 0\\n1 2 3\") == 0\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n5 10 7 3 20\") == 3\nassert solution(\"6 2\\n100 1 10 40 10 40\") == 97\nassert solution(\"3 0\\n1 2 3\") == 0"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\\n5 10 7 3 20\") == \"3\"\nassert solution(\"6 2\\n100 1 10 40 10 40\") == \"97\"\nassert solution(\"3 0\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n5 10 7 3 20\") == 3\nassert solution(\"6 2\\n100 1 10 40 10 40\") == 97\nassert solution(\"3 0\\n1 2 3\") == 0\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1\\n5 10 7 3 20') == 3\nassert solution('6 2\\n100 1 10 40 10 40') == 97\nassert solution('3 0\\n1 2 3') == 0\nassert solution('7 4\\n2 3 4 5 6 7') == 6\nassert solution('7 4\\n2 1 4 5 6 7') == 8\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('.100') == '1E-1'\nassert solution('100') == '1E2'\nassert solution('1.23400') == '1.234'\nassert solution('16') == '1.6E1'\nassert solution('0.1') == '1E-1'\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('.100') == '1E-1'\n\n\"\"\"\nimport re\nfrom decimal import Decimal\nfrom math import log10, floor\nfrom typing import Match\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == '1E2'\nassert solution('01.23400') == '1.234'\nassert solution('16') == '1.6E1'\nassert solution('1.23400') == '1.234'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"16\") == \"1.6E1\"\nassert solution(\"01.23400\") == \"1.234\"\nassert solution(\"100.\") == \"1E2\"\nassert solution(\".100\") == \"1E-1\"\nassert solution(\".\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"1.6E1\"\nassert solution(\"01.23400\") == \"1.234\"\nassert solution(\".100\") == \"1E-1\"\nassert solution(\"100.\") == \"1E2\"\n\"\"\"\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".100\") == \"1E-1\"\nassert solution(\"100.\") == \"1E2\"\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('100.') == '1E2'\nassert solution('0') == '0'"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100.0') == '1E2'\nassert solution('100') == '1E2'\nassert solution('100.100') == '1E3'\nassert solution('1.00') == '1E-2'\nassert solution('1.0') == '1E-1'\n\"\"\"\n\nimport math\n\nx = input()\nx = float(x)\ne = int(math.log10(x))\nprint(str(int(x)) + 'E' + str(e))\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"1.6E1\"\nassert solution(\"01.23400\") == \"1.234\"\nassert solution(\".100\") == \"1E-1\"\nassert solution(\"100.\") == \"1E2\"\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.23400\") == \"1.234\"\nassert solution(\"01.23400\") == \"1.234\"\nassert solution(\"100.\") == \"1E1\"\nassert solution(\"0.100\") == \"1E-1\"\nassert solution(\"100\") == \"1E2\"\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 4 0\") == \"NO\"\nassert solution(\"7 2 2 5\") == \"BBGBGBB\"\nassert solution(\"5 1 3 2\") == \"GBGBG\"\n\nprint('The code ran Correctly')\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 5\") == \"GBGBG\"\nassert solution(\"7 2 2 5\") == \"BBGBGBB\"\nassert solution(\"3 4 4 0\") == \"NO\"\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 1 3 2''') == '''GBGBG'''\nassert solution('''7 2 2 5''') == '''BBGBGBB'''\nassert solution('''4 3 4 0''') == '''NO'''\nassert solution('''5 1 3 2''') == '''GBGBG'''\nprint('All tests passed.')"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 3 2\") == \"GBGBG\"\n\"\"\"\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3 2\") == \"BBGBGBB\"\n\nassert solution(\"7 2 2 5\") == \"BBGBGBB\"\n\nassert solution(\"4 1 3 2\") == \"BBGBGBB\"\nassert solution(\"4 2 2 5\") == \"BBGGBGB\"\nassert solution(\"4 2 1 2\") == \"BGBGGB\"\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 3 2\") == \"GBGBG\"\nassert solution(\"7 2 2 5\") == \"BBGBGBB\"\nassert solution(\"4 3 4 0\") == \"NO\""
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 2\") == \"GBGBG\"\nassert solution(\"7 2 2 5\") == \"BBGBGBB\"\nassert solution(\"4 3 4 0\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 4 0\") == \"NO\"\nassert solution(\"7 2 2 5\") == \"BBGBGBB\"\n\"\"\"\nfrom typing import Dict, List, Set, Tuple"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 3 2\") == \"GBGBG\"\nassert solution(\"7 2 2 5\") == \"BBGBGBB\"\nassert solution(\"4 3 4 0\") == \"NO\"\nassert solution(\"6 2 3 5\") == \"BBBBG\"\nassert solution(\"8 6 2 5\") == \"GGGBGBB\"\n\"\"\"\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"5 1 3 2\"\"\") == \"GBGBG\"\nassert solution(\n\"\"\"7 2 2 5\"\"\") == \"BBGBGBB\"\nassert solution(\n\"\"\"4 3 4 0\"\"\") == \"NO\"\nassert solution(\n\"\"\"12 1 3 0\"\"\") == \"GGGGGBBB\"\nassert solution(\n\"\"\"100 1 3 0\"\"\") == \"GGGGGBBB\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 3\") == 1\n\"\"\""
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 3\") == 1\nassert solution(\"2 3 10\") == 165\n\n\"\"\"\n"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 3\\n') == '1'\nassert solution('2 3 10\\n') == '165'\nassert solution('2 3 4\\n') == '23\\n'\n\"\"\"\nimport math\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom math import inf, isinf\n\nfrom sys import stdin\n\nstdin = open(__file__.replace('.py','- test cases.txt'))\n"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 3\\n') == 1\nassert solution('2 3 10\\n') == 165\nassert solution('2 3 10\\n') == 165\n\"\"\""
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3 3\\n') == 1\n\"\"\""
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 3\") == 1\nassert solution(\"2 3 10\") == 165"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 3') == 1\n\nassert solution('2 3 10') == 165"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 3\") == 1\nassert solution(\"2 3 10\") == 165\nassert solution(\"1 3 5\") == 130\n"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 3\") == 1\nassert solution(\"2 3 10\") == 165\nprint('Hooray!')"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 3\") == 1\nassert solution(\"2 3 10\") == 165\n\n\"\"\"\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(4, 2) == 7\nassert solution(6, 3) == 8\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\n\nprint((a + b - 2) * 2)\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"8\"\nprint(\"Test 1\")\nprint(\"OK\") if solution(\"2 3\") == \"8\" else print(\"ERROR\")\n\nassert solution(\"4 2\") == \"7\"\nprint(\"Test 2\")\nprint(\"OK\") if solution(\"4 2\") == \"7\" else print(\"ERROR\")\n\nassert solution(\"6 3\") == \"8\"\nprint(\"Test 3\")\nprint(\"OK\") if solution(\"6 3\") == \"8\" else print(\"ERROR\")\n\nassert solution(\"1 1\") == \"1\"\nprint(\"Test 4\")\nprint(\"OK\") if solution(\"1 1\") == \"1\" else print(\"ERROR\")\n\nassert solution(\"1 2\") == \"3\"\nprint(\"Test 5\")\nprint(\"OK\") if solution(\"1 2\") == \"3\" else print(\"ERROR\")"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"5\"\nprint(solution(\"4 3\"))\nassert solution(\"2 2\") == \"8\"\nprint(solution(\"3 4\"))\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2') == '7'\n\"\"\"\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == 7\n\"\"\"\n\na, b = list(map(int, input().split()))\nhours = a * 2 + b\nprint(hours)\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2') == 7\n\"\"\"\n\na, b = list(map(int, input().split()))\nprint((b - 1) * (a - 1))\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2') == '7'\n\nassert solution('6 3') == '8'\n\"\"\"\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2') == 7\nassert solution('6 3') == 8\n\n\"\"\""
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 5 6\") == \"1\\n2\\n-1\"\n\"\"\"\nfrom collections import deque\n\nn = int(input())\narr = deque(map(int, input().split()))\n\nans = -1\n\nfor i, a in enumerate(arr):\n    if all(a == i * v for v in arr):\n        ans = i\n        break\nprint(ans)\n"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 6 8 7 4\") == '4'\n\"\"\""
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 6 8 7 4\") == '4'\n\"\"\"\nfrom typing import List\n\nn = int(input())\nb = list(map(int, input().split()))\n\narithmetical_progression = False\n\nfor i in range(len(b) - 1):\n    if not arithmetical_progression:\n        for j in range(i + 1, len(b)):\n            if b[i] == b[j] - i:\n                arithmetical_progression = True\n                break\n    if arithmetical_progression:\n        break"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 6 8 7 4\") == \"4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"1\"\nassert solution(\"4\\n1 2 4 8\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 6 8 7 4\") == \"4\"\n\"\"\"\n\nfrom typing import List\n\nimport sys\n"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 6 8 7 4\") == \"4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"1\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\n"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 6 8 7 4') == '4'\nassert solution('1 2 3 4 5 6 7 8') == '1'\nassert solution('1 2 4 8') == '-1'\n\"\"\"\n"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n2 6 8 7 4\n''') == '4'\nassert solution('''8\n1 2 3 4 5 6 7 8\n''') == '1'\nassert solution('''4\n1 2 4 8\n''') == '-1'\n\n\"\"\""
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 6 8 7 4\") == \"4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"1\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\""
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 6 8 7 4') == '4'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1'\nassert solution('4\\n1 2 4 8') == '-1'\n\"\"\"\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 2 3\n1 2\n2 3 4''') == '1 1 2 2'\n\nassert solution('''5 5 2\n3 4 1 2 5\n2 3''') == '1 1 1 1 1'\n\nassert solution('''1 1\n2''') == '1 1'\n\nassert solution('''5 2\n3 4\n1 2''') == '1 1 1 1 1'\n\nassert solution('''2 2\n1 2\n1 2''') == '1 1'"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3\\n1 2\\n2 3 4') == '1 1 2 2'\nassert solution('5 5 2\\n3 4 1 2 5\\n2 3') == '1 1 1 1 1'"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3\\n1 2\\n2 3 4\") == '1 1 2 2'\n\"\"\"\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2 3\n1 2\n2 3 4''') == '1 1 2 2'\nassert solution('''5 5 2\n3 4 1 2 5\n2 3''') == '1 1 1 1 1'\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 2 3\n1 2\n2 3 4''') == '1 1 2 2'\nassert solution('''5 5 2\n3 4 1 2 5\n2 3''') == '1 1 1 1 1'\nassert solution('''5 5 2\n3 5 1 2 4''') == '1 2 2 2 3'"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3\\n1 2\\n2 3 4') == '1 1 2 2'\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\\n1 2\\n2 3 4\") == '1 1 2 2'\n\"\"\""
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\\n1 2\\n2 3 4\") == \"1 1 2 2\"\nassert solution(\"5 5 2\\n3 4 1 2 5\\n2 3\") == \"1 1 1 1 1\"\nassert solution(\"10 10 2\\n9 8 7 6 5 4 3 2 1 0\") == \"1 1 1 1 1 1 1 1 1 1\"\n\"\"\""
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 2 3\n1 2\n2 3 4''') == '1 1 2 2'\nassert solution('''5 5 2\n3 4 1 2 5\n2 3''') == '1 1 1 1 1'\nassert solution('''4 3 3\n3 2 1 2\n2 3\n3 4\n1 3''') == '1 1 1 1'\nassert solution('''5 5 2\n3 4 1 2 5\n2 3\n3 4\n1 3\n3 3''') == '1 1 1 1'\nassert solution('''2 2 2\n2 2\n1 1\n2 2\n2 2\n1 1\n2 2\n2 1''') == '1 1 1'\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3\\n1 2\\n2 3 4') == '1 1 2 2'\n\"\"\"\n"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 2 1 2') == '1 2 2 3'\nassert solution('3\\n2 3 8') == '2 3 8'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == expected_output\n\n\"\"\""
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 1 2\") == \"1 2 2 3\"\nassert solution(\"3\\n2 3 8\") == \"2 3 8\"\n"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 1 2\") == \"1 2 2 3\"\n\"\"\"\n"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 1 2\") == \"1 2 2 3\"\nassert solution(\"3\\n2 3 8\") == \"2 3 8\"\nprint(\"Passed\")\n\"\"\"\n"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 2 1 2') == '1 2 2 3'\nassert solution('3\\n2 3 8') == '2 3 8'\n\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 2\") == \"1 2 2 3\"\nassert solution(\"3 2 1 2\") == \"2 3 8\"\n\"\"\""
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 1 2\") == \"1 2 2 3\"\nassert solution(\"3\\n2 3 8\") == \"2 3 8\"\n"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 2 1 2') == '1 2 2 3'\nassert solution('3\\n2 3 8') == '2 3 8'\nassert solution('4\\n3 2 1 2') == '1 2 2 3'\nassert solution('3\\n2 3 8') == '2 3 8'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1 2\") == \"1 2 2 3\"\nassert solution(\"3 2 1 2\") == \"2 3 8\"\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"50 30 10 10\") == \"50\"\nassert solution(\"100 50 10 21\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 30 10 10\") == \"50\"\nassert solution(\"100 50 10 21\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"50 30 10 10\") == \"50\"\nassert solution(\"100 50 10 21\") == \"-1\"\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('50 30 10 10') == '50\\n30\\n10\\n'\nassert solution('100 50 10 21') == '-1'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"50 30 10 10\") == \"50\"\nassert solution(\"100 50 10 21\") == \"-1\"\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 50 10 21') == '-1'\nassert solution('50 30 10 10') == '50'\nassert solution('10 10 10 10') == '10'\n\"\"\"\n\nV = input().split()\n\na = int(V[0])\nb = int(V[1])\nc = int(V[2])"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('50 30 10 10') == '50'\nassert solution('100 50 10 21') == '-1'\nassert solution('100 200 300 400') == '-1'\n\"\"\""
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"50 30 10 10\") == \"50\"\nassert solution(\"100 50 10 21\") == \"-1\"\n\n'''\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 50 10 21\") == \"50\"\nassert solution(\"100 50 10 30\") == \"50\"\nassert solution(\"100 50 10 31\") == \"50\"\nassert solution(\"100 50 10 32\") == \"50\"\nassert solution(\"100 50 10 33\") == \"50\"\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('50 30 10 10') == '50 30 10'\nassert solution('100 50 10 21') == '-1'\n\"\"\"\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == 1\nassert solution('5 1 2 3 4 1') == 2\n\"\"\"\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n3 4') == '1'\nassert solution('5 1 2 3 4 1\\n5') == '2'\n\"\"\"\n\n\"\"\"\nn, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndic = {0:0}\nfor ai in a:\n    dic[ai] = dic.get(ai, 0) + 1\n\nans = 0\nfor ai in a:\n    b = x - ai\n    if b in dic:\n        ans += dic[ai] * dic[b]\n\nprint(ans)\n\"\"\"\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == 1\nassert solution(\"6 1\") == 2\n\"\"\""
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == 1\nassert solution(\"6 1 2 3 4 1\") == 2\n\n\"\"\""
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"1\"\nassert solution(\"6 1\") == \"2\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"4 0\") == \"0\"\nassert solution(\"4 3\") == \"0\"\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n1 2\") == 1\nassert solution(\"1 2\\n2 3\") == 0\nassert solution(\"3 2\\n1 2\") == 0\nassert solution(\"6 1\\n5 1 2 3 4 1\") == 2\nassert solution(\"6 1\\n5 1 2 3 4 1\\n5 3 2 1 3\") == 2\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2\") == 1\nassert solution(\"6 1\\n5 1 2 3 4 1\") == 2\n\"\"\"\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2') == 1\nassert solution('6 1') == 2\n\"\"\""
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 2') == '1'\nassert solution('6 1\\n5 1 2 3 4 1') == '2'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nassert solution(input) == output\n\n-----Constraints-----\n\n|s| \\le 10^5\ns consists of lowercase English letters only.\n\n-----Comments-----\n\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\nThis problem is solved using a greedy approach. \n\nWe keep a stack of tuples, with the following format:\n\n(current_word, index_of_last_occurrence_of_pair_of_pairs_end_index,\n index_of_last_occurrence_of_pair_of_pairs_start_index)\n\nWe iterate over the string backwards, popping off the top of the stack if it meets the conditions of the algorithm.\n\"\"\"\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcdd\") == \"abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"abbcdddeaadfortytw\"\nassert solution(\"abcdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdd\") == \"abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"abbcdddeaadfortytw\"\n\n\"\"\""
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcdd\") == '3 abc'\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == '18 abbcd...tw'\nassert solution(\"\") == '0'\nassert solution(\"a\") == '1 a'\nassert solution(\"aaaa\") == '5 aa'\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdd\") == \"abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"abbcdddeaadfortytw\"\n\n\"\"\"\n\ns = input()\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcdd') == '3 abc'\nassert solution('abbcdddeaaffdfouurtytwoo') == '18 abbcd...tw'\nassert solution('abc') == '2 bc'\nassert solution('bcdd') == '2 bc'\nassert solution('cdd') == '1 c'\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcdd\") == 'abc'\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == 'abbcdddeaadfortytw'\n\"\"\"\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbcdddeaaffdfouurtytwoo\") == \"abbcdddeaadfortytw\"\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcdd\") == \"abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"abbcdddeaadfortytw\"\n\n\n\n'''"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"4 abcd\"\nassert solution(\"abcdd\") == \"3 abc\"\nassert solution(\"abcde\") == \"2 bc\"\nassert solution(\"abcdef\") == \"1 c\"\nassert solution(\"abcdefg\") == \"0\"\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == 10080\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == 10080\n\"\"\"\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"2\") == \"10080\"\nassert solution(\"3\") == \"21010\"\nassert solution(\"4\") == \"43200\"\nassert solution(\"5\") == \"10080\""
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == 10080\n\"\"\"\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == 10080\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"10080\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"10080\"\n\"\"\"\n\nn = int(input())\n\ni = 10\n\nwhile i >= n:\n    if i % 2 == 0:\n        i = i // 2\n    elif i % 3 == 0:\n        i = i // 3\n    elif i % 5 == 0:\n        i = i // 5\n    else:\n        print(-1)\n        break\nelse:\n    print(i ** n)\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '7'\nassert solution('5') == '10080'\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"3\") == \"10080\"\n\"\"\""
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '-1'\nassert solution('5') == '10080'\nassert solution('13') == '1310'\nassert solution('1011') == '1011'\nassert solution('101010') == '101010'\n\nprint('PASSED')\n\n\"\"\"\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\\n\") == \"5\"\nassert solution(\"5 1\\n-4 -5 -3 -2 -1\\n\") == \"-5\"\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\") == \"5\"\nassert solution(\"5 1\\n-4 -5 -3 -2 -1\") == \"-5\"\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\") == \"5\"\nassert solution(\"5 1\\n-4 -5 -3 -2 -1\") == \"-5\"\nassert solution(\"5 3\\n-5 -5 -4 -4 -3\") == \"-5\"\nassert solution(\"5 1\\n2\") == \"2\"\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 2 3 4 5') == '5'\nassert solution('5 1\\n-4 -5 -3 -2 -1') == '-5'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2\n1 2 3 4 5''') == '5'\nassert solution('''5 1\n-4 -5 -3 -2 -1''') == '-5'\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 2 3 4 5') == '5'\nassert solution('5 1\\n-4 -5 -3 -2 -1') == '-5'"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 2 3 4 5') == '5'\nassert solution('5 1\\n-4 -5 -3 -2 -1') == '-5'"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 2 3 4 5\\n') == 5\nassert solution('5 1\\n-4 -5 -3 -2 -1\\n') == -5\nassert solution('10 5\\n6 3 2 7 9 -3 -4 -1 -5 0\\n') == 8\nassert solution('5 2\\n1 2 3 4 5\\n') == 5\nassert solution('10 5\\n6 3 2 7 9 -3 -4 -1 -5 0\\n') == 8\n\"\"\"\n\n\nfrom sys import stdin, stdout\nimport collections\nimport math"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 2 3 4 5') == '5'\nassert solution('5 1\\n-4 -5 -3 -2 -1') == '-5'\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '5'\nassert solution('-1 -2 -3 -4 -5') == '-5'\nassert solution('1 2 3 4 -5') == '4'\nassert solution('1 -2 3 4 -5') == '4'\n\nprint('The solution is correct!')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---------------------------\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5\\n2\\n1\\n3\") == \"2\"\nassert solution(\"3\\n6\\n2\\n3\\n2\") == \"3\"\nassert solution(\"2\\n5\\n5\\n10\") == \"1\"\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n2\\n1\\n3\") == \"2\"\nassert solution(\"2\\n5\\n5\\n10\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2\\n1\\n3\") == \"2\"\nassert solution(\"3\\n5\\n2\\n1\\n3\") == \"2\"\nassert solution(\"3\\n6\\n2\\n3\\n2\\n1\") == \"3\"\nassert solution(\"2\\n5\\n5\\n10\") == \"1\"\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n5\n2\n1\n3\n''') == '2'\nassert solution('''3\n6\n2\n3\n2\n''') == '3'\nassert solution('''2\n5\n5\n10\n''') == '1'\n'''\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5\\n2\\n1\\n3\") == \"2\"\nassert solution(\"3\\n6\\n2\\n3\\n2\") == \"3\"\nassert solution(\"2\\n5\\n5\\n10\") == \"1\"\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5\\n2\\n1\\n3') == '2'\n\"\"\"\n\nfrom collections import namedtuple\nfrom typing import List\n\nResult = namedtuple(\"Result\", [\"amount_drives\", \"size_file\"])"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2\\n1\\n3\") == \"2\"\nassert solution(\"3\\n6\\n2\\n3\\n2\") == \"3\"\nassert solution(\"2\\n5\\n5\\n10\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2\\n1\\n3\\n\") == \"2\"\nassert solution(\"3\\n6\\n2\\n3\\n2\\n\") == \"3\"\nassert solution(\"2\\n5\\n5\\n10\\n\") == \"1\"\n\"\"\"\n\nn = int(input())\nm = int(input())\n\na = list(map(int, input().split()))\n\ndp = [0 for _ in range(m+1)]\n\nfor i in range(n):\n    for j in range(a[i], m+1):\n        dp[j] = max(dp[j], dp[j - a[i]] + 1)\n\nprint(dp[m])"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n2\\n1\\n3\") == \"2\"\nassert solution(\"3\\n6\\n2\\n3\\n2\\n\") == \"3\"\nassert solution(\"2\\n5\\n5\\n10\") == \"1\"\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n2\\n1\\n3\") == '2'\nassert solution(\"3\\n6\\n2\\n3\\n2\") == '3'\nassert solution(\"2\\n5\\n5\\n10\") == '1'"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 1 2\") == \"First\"\nassert solution(\"3 3 1 1 1\") == \"Second\"\nassert solution(\"4 5 3 1 5\") == \"Friendship\"\n"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 1 1 1') == 'Second'\nassert solution('5 5 3 1 5') == 'Friendship'\nassert solution('4 5 3 1 5') == 'First'\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport time\nfrom collections import Counter\n\n\"\"\""
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == \"First\"\nassert solution(input()) == \"Second\"\nassert solution(input()) == \"Friendship\"\n"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 1 2\") == \"First\"\nassert solution(\"3 3 1 1 1\") == \"Second\"\nassert solution(\"4 5 3 1 5\") == \"Friendship\""
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 2 1 2') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'\nassert solution('11 1 2 2 3') == 'Second'\nassert solution('13 2 1 1 1') == 'First'\n\n'''\n"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 2 1 2') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'\nassert solution('10 9 9 6 1') == 'First'\nassert solution('8 9 9 7 1') == 'Second'\n"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 2 1 2') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'\n"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 2 1 2') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'\n"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 1 2\") == \"First\"\nassert solution(\"3 3 1 1 1\") == \"Second\"\nassert solution(\"4 5 3 1 5\") == \"Friendship\""
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 1 2\") == 'First'\nassert solution(\"3 3 1 1 1\") == 'Second'\nassert solution(\"4 5 3 1 5\") == 'Friendship'\nassert solution(\"5 5 5 5 5\") == 'Friendship'\nassert solution(\"5 1 2 1 2\") == 'First'\n\n\"\"\""
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 10\") == \"10\"\nassert solution(\"1 2 5\") == \"2\"\nassert solution(\"2 3 9\") == \"1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 10\") == 10\nassert solution(\"1 2 5\") == 2\nassert solution(\"2 3 9\") == 1\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 10\") == \"10\"\nassert solution(\"1 2 5\") == \"2\"\nassert solution(\"2 3 9\") == \"1\"\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_1) == 10\nassert solution(test_2) == 2\nassert solution(test_3) == 1\n\nprint(\"Check done.\")\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 10\") == 10\nassert solution(\"1 2 5\") == 2\nassert solution(\"2 3 9\") == 1\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 10') == 10\nassert solution('1 2 5') == 2\nassert solution('2 3 9') == 1\n\"\"\"\nimport re\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('1 2 5') == '2'\nassert solution('2 3 9') == '1'\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 10\") == \"10\"\nassert solution(\"1 2 5\") == \"2\"\nassert solution(\"2 3 9\") == \"1\"\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 10') == 10\nassert solution('1 2 5') == 2\nassert solution('2 3 9') == 1\nassert solution('1 1 1') == 0\nassert solution('1 1 3') == 2\n\"\"\""
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1 1 10\n\"\"\") == \"10\"\nassert solution(\n\"\"\"\n1 2 5\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n2 3 9\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n5 5 1\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n5 5 5\n\"\"\") == \"0\"\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1, 0) == 0\nassert solution(0, 0) == 0\nassert solution(0, 1) == 2\nassert solution(-1, -1) == 3\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '2'\nassert solution('-1 -1') == '3'\nprint('PASSED')\n\"\"\"\n\nx, y = map(int, input().split())\n\nturns = 0\nwhile x!= 0 and y!= 0:\n    if x > 0 and y > 0:\n        turns += abs(x / y)\n        x = x % y\n    elif x < 0 and y < 0:\n        turns += abs(x / y)\n        x = x % y\n    elif x > 0 and y < 0:\n        turns += abs(abs(x) / abs(y))\n        x = abs(x) % abs(y)\n    elif x < 0 and y > 0:\n        turns += abs(abs(x) / abs(y))\n        x = abs(x) % abs(y)\nprint(turns)\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 0') == '0'\nassert solution('0 1') == '0'\nassert solution('-1 -1') == '3'\n\"\"\"\nimport math\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"2\"\nassert solution(\"-1 -1\") == \"3\"\nprint(\"Passed\")\n\"\"\"\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '2'\nassert solution('-1 -1') == '3'"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '2'\nassert solution('-1 -1') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"2\"\nassert solution(\"-1 -1\") == \"3\"\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"2\"\nassert solution(\"-1 -1\") == \"3\"\n\nassert solution(\"4 4\") == \"8\"\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"2\"\nassert solution(\"-1 -1\") == \"3\"\n\n\n\"\"\""
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '2'\nassert solution('-1 -1') == '3'"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"((()))\") == 6\nassert solution(\"())\") == 0\nassert solution(\"))(\") == 0\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"()()()\") == 6\nassert solution(\"(()())\") == 7\nassert solution(\"((()))\") == 0\n\n\"\"\""
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"((()))\") == 6\nassert solution(\"((()))()\") == 7\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(())()\") == 6\nassert solution(\"()()()\") == 7\n\n\"\"\""
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"))\") == 0\nassert solution(\"()\") == 1\nassert solution(\"()()\") == 2\nassert solution(\"(()())\") == 2\nassert solution(\"((()))\") == 1\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(')(()())') == '6'\nassert solution(')()())') == '6'\nassert solution(')())())') == '7'\nassert solution('((()))') == '6'\nassert solution('((()))') == '6'\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(()))\") == 0\nassert solution(\"((()\")) == 7\n\"\"\"\n\n\n\nfrom typing import List, Set"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"())\") == 0\nassert solution(\"((()))\") == 6\nassert solution(\"()()()\") == 7\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, stdin: str) -> None:\n        self.stdin = stdin\n\n    def solution(self) -> int:\n        return 0\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"((()))\") == 6\nassert solution(\"(()()())\") == 7\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()()\") == 6\nassert solution(\"(()()\") == 7\n\n\"\"\"\n\ns = list(input())\n\nd = {'(': 2, ')': -2}\n\nres = 0\n\nfor i in range(len(s)):\n    res += d[s[i]]\n\nprint(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('24') == '3'\n\"\"\"\n\nimport math\n\nimport pytest\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"24\") == \"3\"\n\"\"\"\n\nfrom math import log\nfrom typing import List\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"24\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('24') == '3'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"24\") == \"3\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('24') == 3\n\"\"\"\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"24\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"10\") == \"1\"\nassert solution(\"24\") == \"3\"\n\"\"\""
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution) == 1\n\"\"\"\n\nimport math\n\nN = int(input())\n\nmax_step = 0\nwhile N > 1:\n    max_step += 1\n    n = N\n    p = None\n    e = None\n    while n % 2 == 0:\n        if p == None:\n            p = 2\n            e = 1\n        else:\n            p *= 2\n            e += 1\n        n //= 2\n    if n > 1:\n        if p == None:\n            p = math.ceil(math.sqrt(N))\n            e = 1\n        else:\n            p *= 2\n            e += 1\n    if p is not None:\n        N = N // p\n\nprint(max_step)\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12') == '3'\nassert solution('24') == '3'\n\"\"\""
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('10') == '6'\nassert solution('100') == '29'\nassert solution('1000') == '37'\n"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '3'\n\n\"\"\"\n\nn = int(stdin.readline())\n\ntotal_cost = 0\n\nlog_cost = 1\n\nwhile n > 0:\n    total_cost += log_cost\n    n -= 1\n    log_cost += 1\n\nprint(total_cost)\n"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '3'\n"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '3'\n\"\"\""
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"3\"\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nprint(n)\n"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '3'\n\"\"\""
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(4)) == '3'\n\"\"\""
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('8') == '9'\nassert solution('9') == '17'\n\"\"\"\n"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3\n\"\"\") == \"3\"\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10111101110011110') == '111111111111111111111111'\n\"\"\""
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1011\") == \"9999999999\"\n\n\"\"\"\n\nfrom math import log10\n"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"110011\") == \"11\"\nassert solution(\"1100110011\") == \"22\"\nassert solution(\"110011001100110011\") == \"33\"\nassert solution(\"1100110011001100110011\") == \"44\"\nassert solution(\"1100110011001100110011110\") == \"55\"\n"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1011') == '2'\nassert solution('111') == '2'\n\"\"\"\n"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1011\n''') == '9999999999'\nassert solution('''\n1\n1011\n''') == '1011'\nassert solution('''\n5\n1010\n''') == '1110'\nassert solution('''\n1\n10\n''') == '10'\nassert solution('''\n3\n110\n''') == '110'\n"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1011') == '9999999999'\nassert solution('110110110') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1011\") == \"9999999999\"\nassert solution(\"111\") == \"1111\"\nassert solution(\"10\") == \"100\"\n\"\"\"\n\n\"\"\"\nIn this problem, we'll look for anagrams of a pattern, and the pattern itself will be hardcoded in the code.\n\nThis problem should help you understand the sliding window paradigm of problem solving, and how it can be useful to use a Hash Table to maintain a window of some fixed size.\n\nFor this problem, we'll use a hash table to keep track of the frequency of each item in the sliding window.\n\nFor example, suppose our string is \"ababc\", and our pattern is \"abc\". Let's analyze the first window, starting at i = 0:\n\nThe window contains three items: a, b, and c. We're looking for \"abc\" as a pattern, so we add this to the Hash Table.\nWe also check if there is any overlap between our current window and our previous windows, where the previous windows are defined by i_previous.\nIf there is, we know we have a pattern match, so we return i, the start of our window.\n\nIn order to maintain the size of our window, we remove the leftmost character in the window every time we increase i.\nThe new character that enters the window is a, and since we've already checked if there is any overlap, we don't have to do it again.\n\"\"\"\n\n\"\"\"\nWe'll use a Python builtin library called Counter which will allow us to keep track of the frequency of each item in the sliding window.\n\nTo use it, we'll need to import it, then create an instance of Counter, and finally, we'll use.update() to add the frequency of each new item in the window.\n\"\"\"\n\n\"\"\"\nTo analyze the frequency of each new item, we'll first need to create an instance of Counter for it.\n\"\"\"\n\nfrom collections import Counter\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        need, window = Counter(p), Counter()\n        start, result = 0, []\n        for end, char in enumerate(s):\n            if char in need:\n                window[char] += 1\n                if end > len(p) - 1:\n                    result.append(start)\n                    if window[s[start]] == 1:\n                        del window[s[start]]\n                    else:\n                        window[s[start]] -= 1\n                    start += 1\n        return result\n\n\nsolution = Solution()\nprint(solution.findAnagrams(\"abab\", \"ab\"))"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1011\") == '9999999999'"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1011') == '9999999999'\n\"\"\"\nimport math"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n2 0 2') == '1'\n\"\"\"\nimport sys\nfrom collections import deque\n\nn, s = map(int, sys.stdin.readline().split())\n\nworkers = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n2 0 2') == 1\nassert solution('5 3\\n1 0 0 4 1') == 2\nassert solution('5 3\\n3 0 2 3') == 3\nassert solution('5 3\\n2 0 0 3') == 3\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1, 1) == 0\nassert solution(2, 1) == 0\nassert solution(2, 2) == 0\nassert solution(2, 3) == 1\nassert solution(3, 3) == 0\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 0 2\") == \"1\"\nassert solution(\"5 3 0 4 1\") == \"2\"\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 0 0 4 1\") == 2\nassert solution(\"7 5\\n0 3 1 5 4 2\") == 1\nassert solution(\"8 6\\n3 0 3 6 5 1 4\") == 3\n\n\"\"\""
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n2 0 2\") == \"1\"\nassert solution(\"5 3\\n1 0 0 4 1\") == \"2\"\n\"\"\"\nfrom collections import deque\n\nn, s = input().split()\nn, s = int(n), int(s)\n\nrelations = [set() for _ in range(n)]\n\nfor _ in range(n - 1):\n    x, y = input().split()\n    relations[int(x) - 1].add(int(y) - 1)\n    relations[int(y) - 1].add(int(x) - 1)\n\nsons = [0] * n\nchecked = [0] * n\n\nqueue = deque()\nqueue.append(s - 1)\nchecked[s - 1] = 1\n\nwhile len(queue) > 0:\n    n = queue.pop()\n    for son in relations[n]:\n        if checked[son] == 0:\n            checked[son] = 1\n            sons[son] += 1\n            queue.append(son)\n\nfor son in range(n):\n    if son!= s - 1:\n        print(sons[son])\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 0 2\") == \"1\"\nassert solution(\"5 3\\n1 0 0 4 1\") == \"2\"\n\"\"\"\n\nn, s = [int(i) for i in input().split()]"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 0 0 4 1\") == \"2\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2 0 2\") == \"1\"\nassert solution(\"5 3\\n1 0 0 4 1\") == \"2\"\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n2 0 2\") == 1\n\"\"\"\n"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100010\") == \"2\"\nassert solution(\"1111110\") == \"4\"\nassert solution(\"100011\") == \"2\"\nassert solution(\"1111111\") == \"3\"\nassert solution(\"1001010\") == \"3\"\n"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11101101\") == \"1 1\"\nassert solution(\"1111\") == \"1 1\"\nassert solution
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100101\") == '1 2'\nassert solution(\"1110011\") == '1 2 0 1 0 1'\nassert solution(\"1100100110\") == '2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10011\") == \"2 1 0\"\nassert solution(\"11101110\") == \"2 1 0\"\nassert solution(\"11101110\") == \"2 1 0\"\nassert solution(\"11101110\") == \"2 1 0\"\nassert solution(\"11001100110011001100\") == \"6 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"1 0\"\nassert solution(\"101\") == \"2 1 1\"\nassert solution(\"11101\") == \"3 1 1 1\"\nassert solution(\"1110\") == \"2 1 0\"\n"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"110\") == \"2\"\nassert solution(\"011\") == \"1 0\"\nassert solution(\"1111111111111\") == \"11\"\nassert solution(\"110110110111\") == \"2 1 1 0\"\nassert solution
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100010110110111\") == \"3\"\nassert solution(\"110011001010\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"111011111111011011011110110111101111111101111111101111111111011111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('110010') == '2'\nassert solution('100010') == '2'\nassert solution('1111') == '1'\nassert solution('11110') == '1'\nassert solution('111100') == '1'\n"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"110010\") == \"2\"\nassert solution(\"101010\") == \"1 0\"\nassert solution(\"10011\") == \"2\"\nassert solution(\"110011110\") == \"3\"\nassert solution(\"111011110\") == \"2 1 0\"\n"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1110110101110011') == '2 1 0'\nassert solution('110011') == '1 1 0'\nassert solution('10101010101010101010101010101010') == '5 1 0'\nassert solution('111111') == '1 1 0'\nassert solution('101101101101101101101101101101101') == '13 1 0'\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n5 8 5\\n\") == \"0 2\\n2 1\\n2 3\\n2 3\"\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n5 8 5\\n\") == \"0 2\\n2 1\\n2 3\"\n\nassert solution(\"5 3\\n2 2 4\\n\") == \"1 1\\n3 2\\n1 3\"\n\"\"\"\n\n\nimport sys\nimport heapq\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n5 8 5\\n\") == \"0 2\\n2 1\\n2 3\\n2 3\"\nassert solution(\"3 4\\n2 2 4\\n\") == \"1 1\\n3 2\\n3 2\"\nassert solution(\"5 3\\n8 3 2 6 3\\n\") == \"3 3\\n1 3\\n1 2\\n1 3\"\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n5 8 5\") == \"0 2\\n2 1\\n2 3\"\nassert solution(\"3 4\\n2 2 4\") == \"1 1\\n3 2\\n1 3\"\nassert solution(\"5 3\\n8 3 2 6 3\") == \"3 3\\n1 3\\n1 2\\n1 3\"\n\"\"\"\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n8 3 2 6 3') == '3 3'\nassert solution('5 4\\n2 2 4') == '1 1'\nassert solution('5 5\\n8 3 2 6 3') == '3 3'\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n5 8 5') == '0 2'\nassert solution('3 4\\n2 2 4') == '1 1'\nassert solution('5 3\\n8 3 2 6 3') == '3 3'\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n8 3 2 6 3') == '3 3'\nassert solution('3 4\\n2 2 4') == '1 1'\nassert solution('5 3\\n8 3 2 6 3') == '3 3'"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n5 8 5\\n\") == \"0 2\\n2 1\\n2 3\\n\"\nassert solution(\"5 3\\n8 3 2 6 3\\n\") == \"3 3\\n1 3\\n1 2\\n1 3\"\n\"\"\"\nimport sys\n\nn, k = map(int, sys.stdin.readline().strip().split())\nlst = list(map(int, sys.stdin.readline().strip().split()))\n\ns, m = 0, 0\n\nfor i in range(k):\n    x, y = map(int, sys.stdin.readline().strip().split())\n    s += abs(lst[x - 1] - lst[y - 1])\n    lst[x - 1] = 0\n    m = max(m, i)\n\nprint(s, m + 1)\nfor i in range(m + 1):\n    print(i + 1,''.join(map(str, lst[i::m + 1])))\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"1 1\"\nassert solution(\"5 3\") == \"3 2\"\nassert solution(\"5 4\") == \"3 2\"\nassert solution(\"6 5\") == \"3 2\"\nassert solution(\"7 6\") == \"1 2\"\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\") == \"7 1\"\nassert solution(\"4 4\") == \"0 0\"\nassert solution(\"4 2\") == \"3 2\"\n\"\"\"\n\n\nimport sys\nimport heapq\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bbaze\") == 8\nassert solution(\"abacaba\") == 18\nassert solution(\"xyz\") == -1\n\n\n'''\n\n'''\n    t = stdin.split()[0]\n    n = int(stdin.split()[1])\n    prices = []\n    \n    for i in range(n):\n        line = stdin.split()[i+2].split(' ')\n        prices.append((line[0], int(line[1])))\n        \n    prices.sort(key = lambda x : x[1], reverse = True)\n    \n    min_prices = [0]*len(prices)\n    \n    for i in range(len(prices)):\n        for j in range(i, len(prices)):\n            if prices[i][1] > prices[j][1]:\n                min_prices[i] = max(min_prices[i], min_prices[j])\n            else:\n                min_prices[i] = max(min_prices[i], min_prices[j] + prices[i][1])\n    \n    max_sum = 0\n    for i in range(len(prices)):\n        max_sum = max(max_sum, prices[i][1] + min_prices[i])\n        \n    print(max_sum)\n'''\n\n\n'''\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bbaze\") == 8\n\nassert solution(\"abacaba\") == 18\n\nassert solution(\"xyz\") == -1\n\nassert solution(\"ababab\") == -1\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bbaze\") == 8\nassert solution(\"abacaba\") == 18\nassert solution(\"xyz\") == -1\nassert solution(\"caa\") == -1\n\n\n\n'''\n\n'''\n\n\u041f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a\n\n\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0438\u043a\u043b\u0430 for\n\n'''\n\nfor i in range(1, 6):\n    print(i)\n\nprint()\n\nfriends = [\"Joseph\", \"Glenn\", \"Sally\"]\nfor friend in friends:\n    print(\"Happy new year: \", friend)\nprint()\n\nprint(\"The smallest number is: \")\nfor num in [1, 2, 3, 4, 5, 6]:\n    print(num, end = \" \")\nprint()\n\nprint(\"The numbers divisible by 2 are: \")\nfor num in [1, 2, 3, 4, 5, 6]:\n    if num % 2 == 0:\n        print(num, end = \" \")\nprint()\n\n'''\n\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438.\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u0438\u043d \u0432\u0432\u043e\u0434\u043d\u044b\u0439 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u043a\u043e\u0434\u0430, \u0438 \u0441\u0430\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 0 \u0434\u043e 100 \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0442\u044c\u0441\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u0441\u043b\u043e\u0432\u043e\u043c \"Done\" \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430 \u043a\u043e\u0434\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430:\n\nEnter the number: 5\n0 1 1 2 3\n\nEnter the number: 99\n0 1 1 2 3 \nDone\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430:\n\nEnter the number: 5\n0 1 1 2 3\nDone\n'''"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bbaze\") == 8\nassert solution(\"abacaba\") == 18\nassert solution(\"xyz\") == -1\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bbaze\") == 8\nassert solution(\"abacaba\") == 18\nassert solution(\"xyz\") == -1\nassert solution(\"\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\nabacaba\n4\naba 2\nbcc 1\ncaa 2\nbbb 5\n''') == '8'\n\nassert solution('''\nxyz\n4\naxx 8\nza 1\nefg 4\nt 1\n''') == '-1'\n\nassert solution('''\nbbaze\n3\nbzb 2\naeb 3\nba 10\n''') == '8'\n\nassert solution('''\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == t\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bbaze\") == 8\nassert solution(\"abacaba\") == 18\n\n\"\"\"\nimport operator as op\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacaba') == -1\nassert solution('bbaze') == 8\nassert solution('xyz') == -1\n\"\"\"\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('bbaze') == 8\n\nassert solution('abacaba') == 18\n\nassert solution('xyz') == -1\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n2 4\\n5 4\\n100 5\") == \"5\"\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n100 42\\n42 100\\n5 42\\n100 5\") == 5\nassert solution(\"2\\n1 2\\n1 2\") == 0\n\"\"\""
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n2 4\\n3 4\\n100 5\") == \"5\"\nassert solution(\"3\\n1 2\\n2 4\") == \"0\""
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2\n2 4\n3 4''') == '1'\n\nassert solution('''4\n100 42\n42 100\n5 42\n100 5''') == '5'\n\nassert solution('''2\n1 2\n1 2''') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 42\\n42 100\\n5 42\\n100 5\\n1 2\\n1 2\") == \"5\"\nassert solution(\"2 1\\n1 2\\n\") == \"0\"\nassert solution(\"4 42\\n42 100\\n5 42\\n100 5\\n1 2\\n1 2\") == \"5\"\n\"\"\"\n\nn = int(input())\nhome_guest = [list(map(int, input().split())) for _ in range(n)]\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if home_guest[i][0] == home_guest[j][1] and home_guest[i][1] == home_guest[j][0]:\n            ans += 1\nprint(ans)\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n2 4\") == \"1\"\nassert solution(\"4\\n100 42\\n42 100\\n5 42\\n100 5\") == \"5\""
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 4\") == \"1\"\nassert solution(\"100 42\\n42 100\") == \"5\"\nassert solution(\"5 42\\n100 5\") == \"0\"\nassert solution(\"1 2\\n2 1\") == \"0\"\nassert solution(\"1 2\\n2 3\") == \"0\"\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n2 4\\n5 42\\n100 5\") == \"5\"\nassert solution(\"3\\n1 2\\n2 4\") == \"0\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n\"\"\"\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2\n2 4\n3 4''') == '1'\n\nassert solution('''4\n100 42\n42 100\n5 42\n100 5''') == '5'\n\nassert solution('''2\n1 2\n1 2''') == '0'\n\nassert solution('''4\n100 42\n42 100\n5 42\n100 5''') == '5'\n\nassert solution('''2\n1 2\n1 2''') == '0'"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n3 4\") == \"1\"\nassert solution(\"4\\n100 42\\n42 100\\n5 42\\n100 5\") == \"5\"\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nassert solution('1 2') == '2'\n\nassert solution('1 5') == '8'\n\nassert solution('1 5\\n2 3') == '8'\n\nassert solution('1 5\\n2 3\\n4 3') == '8'"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 5\\n2 3') == '8'\nassert solution('5 10\\n3 20\\n2 20\\n1 20\\n4 20') == '60'"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 5\n1 5\n2 3\n3 4\n4 5\n\"\"\") == \"16\"\n\nassert solution(\"\"\"\n5 10\n1 5\n2 3\n3 4\n4 5\n5 10\n\"\"\") == \"60\"\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 5\\n2 3') == '8'\nassert solution('5 10\\n3 20\\n2 20\\n1 20\\n4 20\\n5 20') == '60'\n\n'''"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 10') == '60'\nassert solution('3 20') == '24'\nassert solution('2 20') == '18'\nassert solution('1 20') == '20'\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 5\\n2 3\\n1 5') == '8'\nassert solution('5 10\\n3 20\\n2 20\\n1 20\\n4 20\\n5 20') == '60'\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 3\\n2 3\\n3 2\\n4 3\") == \"6\"\nassert solution(\"7 10\\n1 10\\n1 9\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\") == \"10\"\nassert solution(\"5 10\\n3 20\\n1 20\\n1 20\\n1 20\\n1 20\") == \"50\"\nassert solution(\"5 10\\n3 20\\n3 20\\n3 20\\n3 20\") == \"50\"\nassert solution(\"1 10\\n1 10\\n1 10\\n1 10\\n1 10\") == \"10\"\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 5\\n2 3') == '8'\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 5\\n2 3\\n\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 5\\n2 3\\n1 5\\n4 20\\n5 20\") == 8\nassert solution(\"5 10\\n3 20\\n2 20\\n1 20\\n4 20\\n5 20\") == 60\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\") == '2'\nassert solution(\"2 3 1\") == '2'\nassert solution(\"4 3 2\") == '2'\nassert solution(\"5 4 3\") == '3'\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 2 4\") == '1'\nassert solution(\"3\\n2 3 3\") == '2'\nassert solution(\"3\\n2 3 1\") == '3'\n\n\n-----\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"1\"\nassert solution(\"3\\n2 3 1\") == \"2\"\nassert solution(\"3\\n2 3 1\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"1\"\nassert solution(\"3\\n2 3 1\") == \"2\"\nassert solution(\"3\\n2 3 1\") == \"2\"\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 2 4') == '1'\nassert solution('3\\n2 3 1') == '2'\nassert solution('3\\n2 3 1') == '3'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"1\"\nassert solution(\"3\\n2 3 1\") == \"2\"\nassert solution(\"3\\n2 3 1\") == \"2\"\nassert solution(\"3\\n2 3 1\") == \"2\"\nassert solution(\"3\\n2 3 1\") == \"2\"\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 1\nassert solution('3') == 2\nassert solution('3') == 3\nassert solution('1 2 3 4') == 1\nassert solution('2 3 1') == 2\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 2 4') == '1'\nassert solution('3\\n2 3 3') == '2'\nassert solution('3\\n2 3 1') == '3'\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"BBBSSS\"\n) == \"2\"\nassert solution(\n    \"BBSSS\"\n) == \"2\"\nassert solution(\n    \"BBBBS\"\n) == \"3\"\nassert solution(\n    \"BSSSS\"\n) == \"2\"\nassert solution(\n    \"SSS\"\n) == \"1\"\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BBBS\") == 2\nassert solution(\"BBS\") == 1\nassert solution(\"SSS\") == 0\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('BSC') == '200000000001'\n\n\"\"\""
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BBBSSSCC\") == \"2\"\nassert solution(\"BBBCCC\") == \"0\"\nassert solution(\"BSSSCC\") == \"7\"\nassert solution(\"BBBCSCC\") == \"4\"\nassert solution(\"BSCSCC\") == \"5\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom math import ceil"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BBBSCC\") == \"2\"\nassert solution(\"BBSCCC\") == \"3\"\nassert solution(\"SSSSSS\") == \"0\"\nassert solution(\"SSSSSSSS\") == \"1\"\nassert solution(\"SSSSSSSSSS\") == \"1\"\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BBBSCC\") == 2\nassert solution(\"BBSC\") == 3\nassert solution(\"BBBCC\") == 3\n\"\"\"\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBBSSC\") == \"2\"\nassert solution(\"BBC\") == \"7\"\nassert solution(\"BSC\") == \"200000000001\"\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"BBBSSC\"\n) == 2\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BBBSCC\") == \"2\"\nassert solution(\"BSBBBS\") == \"1\"\nassert solution(\"SSSSBB\") == \"2\"\nassert solution(\"SSSSSS\") == \"1\"\nassert solution(\"SSSSSBC\") == \"0\"\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BBBSSS') == '2'\nassert solution('BBSS') == '2'\n\"\"\"\nfrom collections import deque\n\nfrom typing import Deque, Tuple\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"-1\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"6 10\") == \"2\"\nassert solution(\"6 13\") == \"0\"\nassert solution(\"7 10\") == \"2\"\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 6\\nHSHSHS\") == '1'\nassert solution(\"14 100\\nHHHSSS...SH\") == '0'\nassert solution(\"23 50\\nHHSS.......SSHHHHHHHHHH\") == '8'"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 6\\nHSHSHS\\n\") == \"1\"\nassert solution(\"14 100\\nHHSSSS...SH\\n\") == \"0\"\nassert solution(\"23 50\\nHHSS.......SSHHHHHHHHHH\\n\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 6\\nHSHSHS\") == '1'\nassert solution(\"14 100\\n...HHHSSS...SH\") == '0'\nassert solution(\"23 50\\nHHSS.......SSHHHHHHHHHH\") == '8'\n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 6\") == \"1\"\nassert solution(\"14 100\") == \"0\"\nassert solution(\"23 50\") == \"8\"\nassert solution(\"HHSS.......SSHHHHHHHHHH\") == \"8\"\n\"\"\""
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 6\\nHSHSHS\\n\") == '1'\n\"\"\"\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n..H..S\") == \"1\"\nassert solution(\"9 10\\n...SS...S..H..S\") == \"0\"\nassert solution(\"6 10\\nHHSSHSSS\") == \"-1\"\nassert solution(\"14 100\\nHHSSHHHHHHSSHHHHHHHHH\") == \"8\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"-1\"\nassert solution(\"2 5\") == \"2\"\nassert solution(\"1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 6\\nHSHSHS\") == \"1\"\nassert solution(\"14 100\\nHHHSSS...SH\") == \"0\"\nassert solution(\"23 50\\nHHSS.......SSHHHHHHHHHH\") == \"8\"\nprint(\"The last two examples for testing\")\nassert solution(\"23 100\\nHHSS.......SSHHHHHHHHHH\") == \"-1\"\nassert solution(\"6 3\\nHSSSSSS\") == \"3\"\nprint(\"The last two examples for testing\")\nprint(\"The last two examples for testing\")\nprint(\"The last two examples for testing\")"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 6\\nHHHSHS\\n\") == \"1\"\nassert solution(\"14 100\\nHHSSSSSSSSHHHHSSSS.....SH\\n\") == \"0\"\nassert solution(\"23 50\\nHHSSSSSSSSHHHHHHHHHSSS...SSHHHHHHHHHH\\n\") == \"8\"\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 1 1\") == \"4\"\nprint(\"test passed\")\n\"\"\""
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 1 1\\n') == '4'\n\"\"\""
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 1 1\\n') == '4'\nassert solution('8 1 10\\n') == '8'\n\"\"\"\n\nimport sys\nfrom typing import List, Dict, Tuple\nfrom collections import deque, defaultdict\nfrom math import ceil\n\nimport numpy\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 1 1') == 4\nassert solution('8 1 10') == 8\nassert solution('8 0 1') == 8\nassert solution('8 10 10') == 10\n\n\"\"\"\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 1 1\\n') == '4'\nassert solution('8 1 10\\n') == '8'\nassert solution('8 5 3\\n') == '8'\nassert solution('8 5 10\\n') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 1 10') == '8'\nassert solution('8 1 1') == '4'\nassert solution('8 1 10') == '8'\nassert solution('8 1 100') == '8'\nassert solution('8 10 10') == '8'\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 1 1\") == \"4\"\n\n\"\"\"\n\nn, x, y = list(map(int, stdin.split()))\n\nprint((n*x + n*y)//2)\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 1 1') == '4'"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 1 1') == '4'\nassert solution('8 1 10') == '8'\nassert solution('8 1 20') == '12'\nassert solution('8 10 1') == '8'\nassert solution('8 10 10') == '12'\n"
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n0\\n\") == 1\nassert solution(\"2 3\\n1 0 1\\n0 1 0\\n\") == 8"
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n0\") == \"1\"\nassert solution(\"2 3\\n1 0 1\\n0 1 0\") == \"8\"\n\"\"\""
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 0 1\\n0 1 0\") == \"8\"\n\"\"\""
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n0\") == 1\nassert solution(\"2 3\\n1 0 1\\n0 1 0\") == 8"
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n0') == '1'\nassert solution('2 3\\n1 0 1\\n0 1 0') == '8'\n\n\"\"\""
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n0') == '1'\nassert solution('2 3\\n1 0 1\\n0 1 0') == '8'\nassert solution('2 3\\n1 1 1\\n1 1 1') == '0'\n\"\"\""
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n0\") == 1\nassert solution(\"2 3\\n1 0 1\\n0 1 0\") == 8\n\"\"\""
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n0') == '8'\n\"\"\"\n"
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n0\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 1\n0\n''') == '1'\nassert solution('''2 3\n1 0 1\n0 1 0\n''') == '8'\nassert solution('''1 1\n0\n''') == '1'\nassert solution('''2 3\n1 0 1\n0 1 0\n''') == '2'\n\nassert solution('''3 3\n1 0 1\n0 0 0\n1 1 1\n''') == '4'\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"23 154 5\") == \"32\"\nassert solution(\"43 21 18 2\") == \"620\"\n\"\"\""
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 0 9\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n7 0 0 0 0\") == \"32\"\nassert solution(\"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\") == \"620\"\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 43 21 18 2\") == \"620\"\nassert solution(\"7 0 21 11 65\") == \"620\"\nassert solution(\"0 0 0 0 9\") == \"32\"\nassert solution(\"0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0') == '620'\nassert solution('0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0') == '620'\nassert solution('0 0 0 0 9\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n7 0 0 0 0') == '32'\nassert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '0'\nassert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '0'\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 43 21 18 2\") == \"620\"\n\"\"\"\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 43 21 18 2') == '620'"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0') == 620\nassert solution('0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0') == 620\nassert solution('0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0') == 620\nassert solution('0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0') == 620\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 0 9\") == 32\nassert solution(\"0 0 0 0 0\") == 0\nassert solution(\"0 43 21 18 2\") == 620\n\n\"\"\"\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        assert solution(\"0 0 0 0 9\") == 32\n        assert solution(\"0 0 0 0 0\") == 0\n        "
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"0 0 0 0 9\"\"\") == \"32\"\nassert solution(\"\"\"0 43 21 18 2\"\"\") == \"620\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\") == \"620\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1000000000\\n1\\n1000000000\\n\") == \"2000000000\"\nprint(solution(stdin))\n"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1000000000\\n1\\n1000000000\\n') == '2000000000'\n\n\"\"\"\nimport math"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1000000000') == '2000000000'\n"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n4 3 5 6\\n11 12 14 20') == '3'\n\nassert solution('4 3\\n4 3 5 6\\n11 12 14 20') == '0'\n\nassert solution('4 3\\n4 3 5 6\\n11 12 14 20') == '3'\n\nassert solution('2 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000') == '1'\n\nassert solution('4 3\\n4 3 5 6\\n11 12 14 20') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1000000000\\n1\\n1000000000\\n') == '2000000000'\n\n-----\n\n\"\"\""
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n4 3 5 6\\n11 12 14 20\") == \"4\"\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nans = 0\n\nfor i in range(n):\n    if (k - a[i]) % b[i] == 0:\n        ans += (k - a[i]) // b[i]\n    else:\n        ans += (k - a[i]) // b[i] + 1\nprint(ans)\n"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1\\n1 1 1 1 1\\n5 6\\n') == '3'\nassert solution('3 1\\n1 1 1\\n5 6\\n') == '4'\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort(reverse=True)\nb.sort(reverse=True)\n\nsum_a = sum(a)\nsum_b = sum(b)"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1000000000\\n1\\n1000000000\\n\") == \"2000000000\"\nassert solution(\"10 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1 1 1 1 1 1 1 1 1 1 1\\n\") == \"0\"\nassert solution(\"4 3\\n4 3 5 6\\n11 12 14 20\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1000000000\\n1\\n1000000000\\n') == '2000000000'\nassert solution('10 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1 1 1 1 1 1 1 1 1 1 1\\n') == '0'\nassert solution('3 1\\n4 3 5 6\\n11 12 14 20\\n') == '4'\nprint('Test pass.')\n\n-----\n\n2.\n\nWrite 5 lines of code to test the correctness of solution:\nThe term of this problem is the same as the previous one, the only exception \u2014 increased restrictions.\n\n\n-----Input-----\n\nThe first line contains two positive integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9) \u2014 the number of ingredients and the number of grams of the magic powder.\n\nThe second line contains the sequence a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where the i-th number is equal to the number of grams of the i-th ingredient, needed to bake one cookie.\n\nThe third line contains the sequence b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 10^9), where the i-th number is equal to the number of grams of the i-th ingredient, which Apollinaria has.\n\n\n-----Output-----\n\nPrint the maximum number of cookies, which Apollinaria will be able to bake using the ingredients that she has and the magic powder.\n\n\n-----Examples-----\nInput\n1 1000000000\n1\n1000000000\n\nOutput\n2000000000\n\nInput\n10 1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n1 1 1 1 1 1 1 1 1 1 1\n\nOutput\n0\n\nInput\n3 1\n2 1 4\n11 3 16\n\nOutput\n4\n\nInput\n4 3\n4 3 5 6\n11 12 14 20\n\nOutput\n3\n\nInput\n5 2\n1 2 3 4 5\n11 12 14 20 21\n\nOutput\n0\n\n\n-----\n\n3.\n\nWrite 5 lines of code to test the correctness of solution:\nThe term of this problem is the same as the previous one, the only exception \u2014 increased restrictions.\n\n\n-----Input-----\n\nThe first line contains two positive integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9) \u2014 the number of ingredients and the number of grams of the magic powder.\n\nThe second line contains the sequence a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where the i-th number is equal to the number of grams of the i-th ingredient, needed to bake one cookie.\n\nThe third line contains the sequence b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 10^9), where the i-th number is equal to the number of grams of the i-th ingredient, which Apollinaria has.\n\n\n-----Output-----\n\nPrint the maximum number of cookies, which Apollinaria will be able to bake using the ingredients that she has and the magic powder.\n\n\n-----Examples-----\nInput\n1 1000000000\n1\n1000000000\n\nOutput\n2000000000\n\nInput\n10 1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n1 1 1 1 1 1 1 1 1 1 1\n\nOutput\n0\n\nInput\n3 1\n2 1 4\n11 3 16\n\nOutput\n4\n\nInput\n4 3\n4 3 5 6\n11 12 14 20\n\nOutput\n3\n\nInput\n5 2\n1 2 3 4 5\n11 12 14 20 21\n\nOutput\n0\n\n\n-----\n\n4.\n\nWrite 5 lines of code to test the correctness of solution:\nThe term of this problem is the same as the previous one, the only exception \u2014 increased restrictions.\n\n\n-----Input-----\n\nThe first line contains two positive integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9) \u2014 the number of ingredients and the number of grams of the magic powder.\n\nThe second line contains the sequence a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where the i-th number is equal to the number of grams of the i-th ingredient, needed to bake one cookie.\n\nThe third line contains the sequence b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 10^9), where the i-th number is equal to the number of grams of the i-th ingredient, which Apollinaria has.\n\n\n-----Output-----\n\nPrint the maximum number of cookies, which Apollinaria will be able to bake using the ingredients that she has and the magic powder.\n\n\n-----Examples-----\nInput\n1 1000000000\n1\n1000000000\n\nOutput\n2000000000\n\nInput\n10 1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n1 1 1 1 1 1 1 1 1 1 1\n\nOutput\n0\n\nInput\n3 1\n2 1 4\n11 3 16\n\nOutput\n4\n\nInput\n4 3\n4 3 5 6\n11 12 14 20\n\nOutput\n3\n\nInput\n5 2\n1 2 3 4 5\n11 12 14 20 21\n\nOutput\n0\n\n\n-----\n\n5.\n\nWrite 5 lines of code to test the correctness of solution:\nThe term of this problem is the same as the previous one, the only exception \u2014 increased restrictions.\n\n\n-----Input-----\n\nThe first line contains two positive integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9) \u2014 the number of ingredients and the number of grams of the magic powder.\n\nThe second line contains the sequence a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where the i-th number is equal to the number of grams of the i-th ingredient, needed to bake one cookie.\n\nThe third line contains the sequence b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 10^9), where the i-th number is equal to the number of grams of the i-th ingredient, which Apollinaria has.\n\n\n-----Output-----\n\nPrint the maximum number of cookies, which Apollinaria will be able to bake using the ingredients that she has and the magic powder.\n\n\n-----Examples-----\nInput\n1 1000000000\n1\n1000000000\n\nOutput\n2000000000\n\nInput\n10 1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n1 1 1 1 1 1 1 1 1 1 1\n\nOutput\n0\n\nInput\n3 1\n2 1 4\n11 3 16\n\nOutput\n4\n\nInput\n4 3\n4 3 5 6\n11 12 14 20\n\nOutput\n3\n\nInput\n5 2\n1 2 3 4 5\n11 12 14 20 21\n\nOutput\n0\n\n\n-----\n\n6.\n\nWrite 5 lines of code to test the correctness of solution:\nThe term of this problem is the same as the previous one, the only exception \u2014 increased restrictions.\n\n\n-----Input-----\n\nThe first line contains two positive integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9) \u2014 the number"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1\") == \"113337\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n1') == '113337'\nassert solution('10\\n
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\\n\") == \"1337\"\n\"\"\"\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1') == '113337'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2\n6\n1\n'''.strip()) == '1337'\n\nassert solution('''\n1\n5\n5\n'''.strip()) == '113337'\n\nassert solution('''\n1\n2\n3\n'''.strip()) == '1337'\n\nassert solution('''\n2\n2\n3\n'''.strip()) == '1337'\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '11'\nassert solution('2') == '13'\nassert solution('3') == '113'\nassert solution('4') == '131'\nassert solution('5') == '132'\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"4\"\n) == \"33\"\n\nassert solution(\n    \"6\"\n) == \"337\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5\\n1') == '113337'\nassert solution('5\\n3') == '113337'\nassert solution('5\\n7') == '113337'\n\"\"\"\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1') == '113337'\nassert solution('5\\n2') == '1337'\nassert solution('8\\n2') == '1337'\nassert solution('6\\n2') == '1337'\nassert solution('5\\n2') == '1337'\n\"\"\"\nfrom collections import Counter\nfrom functools import reduce\nfrom operator import mul"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n2\") == \"1337\"\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '11'\n\"\"\"\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '11'\nassert solution('10') == '1001'\nassert solution('10^100000') == '1001001001'\nassert solution('10^100000 + 1') == '1001001001001'\nassert solution('10^100000 + 2') == '1001001001001001001001'\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '11'\nassert solution('10') == '1001'\nassert solution('50') == '222222'\nassert solution('100') == '2222222'\nassert solution('200') == '333333'\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '1001'\nassert solution('1') == '11'\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '1001'\nassert solution('1') == '11'\nassert solution('4') == '1222'\nassert solution('0') == '11'\nassert solution('-1') == '11'\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\") == \"11\"\nassert solution(\"33\") == \"33\"\nassert solution(\"1\") == \"11\"\n\"\"\""
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"22\"\nassert solution(\"10\") == \"1001\"\nassert solution(\"1\") == \"11\"\n\n-----\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '11'\nassert solution('10') == '1001'\n\"\"\"\n\nn = input()\nstart = 0\n\nwhile n > 0:\n    n //= 10\n    start += 1"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == '11'\nassert solution('22') == '22'\nassert solution('33') == '33'\nassert solution('44') == '33'\nassert solution('55') == '33'\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '22'\n\"\"\""
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n>><\\n1 2\") == \"FINITE\"\nassert solution(\"3\\n>>>>\\n2 1 1\") == \"INFINITE\"\n\n\u0414\u0430\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u044b\u043b\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u0430 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0431\u043b\u043e\u043a\u0435 \u0441\u0442\u0435\u043f\u0438\u043a\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0443\u0442\u0430\u0442\u044c\u0441\u044f \u0441 \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u0434\u043e\u0431\u0430\u0432\u0438\u043b \u0432\u0442\u043e\u0440\u043e\u0439 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430, \u0447\u0442\u043e\u0431\u044b \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u043b\u0430 \u0438\u0433\u0440\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043b\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442\n"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"FINITE\"\nassert solution(\"2 1 1\") == \"INFINITE\"\nassert solution(\"3 >><\") == \"INFINITE\"\nassert solution(\"2 1 2\") == \"FINITE\"\nassert solution(\"2 1 1\") == \"FINITE\"\n\n\"\"\""
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n><\\n1 2') == 'FINITE'\nassert solution('3\\n>><\\n2 1 1') == 'INFINITE'\nassert solution('4\\n>>><\\n2 1 1 2') == 'INFINITE'\nassert solution('5\\n>>><><\\n2 1 1 2 2') == 'INFINITE'\nassert solution('6\\n>>><><><\\n2 1 1 2 2 2') == 'INFINITE'\n"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n><\\n1 2\") == \"FINITE\"\nassert solution(\"3\\n>><\\n2 1 1\") == \"INFINITE\"\n"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n>><\\n2 1 1\") == \"INFINITE\"\n\nassert solution(\"5\\n>><\\n2 1 1 1 1\") == \"INFINITE\"\n\nassert solution(\"2\\n><\\n1 1\") == \"FINITE\"\n"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n><\\n1 2\") == \"INFINITE\"\nassert solution(\"3\\n>><\\n2 1 1\") == \"FINITE\"\nassert solution(\"2\\n><\\n1 2\") == \"INFINITE\"\nassert solution(\"3\\n>><\\n2 1 1\") == \"FINITE\"\n\"\"\""
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n><\\n1 2') == 'INFINITE'\nassert solution('3\\n>><\\n2 1 1') == 'FINITE'\nassert solution('3\\n>>\\n2 1 1') == 'INFINITE'\nassert solution('3\\n>><\\n2 1 1') == 'FINITE'\n\nimport re"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n>><\\n2 1 1\") == \"INFINITE\"\nassert solution(\"3\\n>><\\n2 1 2\") == \"FINITE\"\n"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\">\") == \"INFINITE\"\nassert solution(\"<<\") == \"INFINITE\"\nassert solution(\">>\") == \"INFINITE\"\nassert solution(\"<>\") == \"INFINITE\"\nassert solution(\"<<<\") == \"INFINITE\"\n"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n><\\n1 2\") == \"FINITE\"\nassert solution(\"3\\n>><\\n2 1 1\") == \"INFINITE\"\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11010111') == 4\n\n\"\"\"\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11010111') == 4\nassert solution('111') == 0\n\"\"\"\n\nn = int(input())\ns = input()\ncount = 0\nans = 0\n\nfor i in range(n):\n    if s[i] == '1':\n        count += 1\n    else:\n        count = 0\n\n    ans = max(ans, count)"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(11010111) == 4\nassert solution(\"111\") == 0\nassert solution(11111111) == 0\nassert solution(\"10101010\") == 7\nassert solution(111101010) == 10\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\n\nassert solution('1') == 1\n\nassert solution('11') == 2\n\nassert solution('110') == 2\n\nassert solution('11110') == 3"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11010111\") == 4\nassert solution(\"11011011\") == 2\nassert solution(\"11101111\") == 1\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1110111\") == 4\nassert solution(\"1110011\") == 0\nassert solution(\"1111011\") == 0\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11010111') == 4\nassert solution('111') == 0\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11010111') == 4\nassert solution('111') == 0\n\nprint(solution('11010111'))\nprint(solution('111'))\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11010111') == 4\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11010111\") == 4\nassert solution(\"111\") == 0\nassert solution(\"100010\") == 3\nassert solution(\"10101010\") == 6\nassert solution(\"1111\") == 1\n\"\"\""
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"R\", \"s;;upimrrfod;pbr\") == \"allyouneedislove\"\n\nInput\nL\nyjksgft;gqej\n\nOutput\nmaprehtoio\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('R') =='really?'\n\"\"\"\n\nfrom itertools import zip_longest\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"R\") == \"lyouneedislove\"\nassert solution(\"L\") == \"allyouneedislove\"\n\"\"\"\n\nwith open(\"input.txt\") as f:\n    command, message = f.read().split(\"\\n\")\ncommand = command.replace(\"\\n\", \"\")\n\nshift = ord(command) - ord(\"L\")\n\nresult = \"\"\nfor letter in message:\n    result += chr((ord(letter) - shift - 97) % 26 + 97)\nprint(result)\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('R') =='s;;upimrrfod;pbr'"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('R','s;;upimrrfod;pbr') == 'allyouneedislove'\n\nInput\nL\niimmmqqyyfz;aiqdvv\n\nOutput\nsomemmmmmqqyyfz;aiqdvv"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('R','s;;upimrrfod;pbr') == 'allyouneedislove'\n\"\"\""
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('R') == 'vbzryjouqwirhyjfr'\nassert solution('L') == 'tqjkqrnsrquctejgp'\nassert solution('R') == 'vbzryjouqwirhyjfr'\n\n\"\"\""
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('R') == 'uryouneedislove'\nassert solution('L') == 'youlneedislove'\n\"\"\"\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('R','s;;upimrrfod;pbr') == 'allyouneedislove'\n\nassert solution('R', 'y;o;u;n;d;i;s;a;l;e') == 'youneedislove'\n\nassert solution('L', 'y;o;u;n;d;i;s;a;l;e') == 'youneedislove'\n\n\n-----Test-----\n\nRun the test cases in your IDE, fill in solution method and check does it pass all the test cases.\n\nYour code will be evaluated with hidden tests only available on site.\n\nYou can upload only one file for testing purpose.\n\nFor questions contact ttokas@protonmail.com\n\n-----Solution-----"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"R\") == \"ryouneedislove\"\nassert solution(\"L\") == \"lfyouneedislove\"\n\nInput\nL\nwjvxglveobnjbxqshnrpqj\n\nOutput\nufyakzjdelsgxtqrhb\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n4 3 1 2\\n\") == \"1 1 3 4 4\"\n\nassert solution(\"5 5\\n5 4 3 2 1\\n\") == \"1 2 3 4 5\"\n\n\"\"\"\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 1 2\") == \"1 1 3 4 4\"\n\"\"\"\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 3 2 1\") == '1 1 3 4 4'\nassert solution(\"5 5 4 3 2 1\") == '1 2 3 4 5'\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n4 3 1 2') == '1 1 3 4 4'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 1 2') == '1 1 3 4 4'\nassert solution('5 5') == '1 2 3 4 5'\nassert solution('5 4 3 2 1') == '1 2 3 4 5'\nassert solution('5 4 3 2 1 5 4 3 2 1') == '1 2 3 4 5'\n\"\"\"\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('5 5\\n5 4 3 2 1') == '1 2 3 4 5'\n\nprint('Success')"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 4\n4 3 1 2\n''') == '1 1 3 4 4'\n\nassert solution('''5 5\n5 4 3 2 1\n''') == '1 2 3 4 5'\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n5 4 3 2 1') == '1 2 3 4 5'\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 1 2\") == \"1 1 3 4 4\"\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 3 2 1\") == \"1 2 3 4 4\"\nassert solution(\"5 5\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n-2 -2\") == \"2\"\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n-1 1 2') == '1'\nassert solution('2 3\\n-2 -2') == '2'\nassert solution('3 2\\n-1 1 2') == '1'\nassert solution('3 2\\n-1 1 2') == '1'"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n-1 1 2\") == \"1\"\nassert solution(\"2 3\\n-2 -2\") == \"2\"\n\"\"\""
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n-1 1 2\") == \"1\"\nassert solution(\"2 3\\n-2 -2\") == \"2\""
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n-1 1 2\") == \"1\"\nassert solution(\"2 3\\n-2 -2\") == \"2\"\n\nprint(\"Success\")\n\n'''"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n-1 1 2') == '1'\nassert solution('2 3\\n-2 -2') == '2'\nassert solution('1 100\\n100') == '0'\nassert solution('2 3\\n-2 -2') == '2'\nassert solution('3 2\\n-1 1 2') == '1'\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n-1 1 2\") == \"1\"\nassert solution(\"2 3\\n-2 -2\") == \"2\""
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2\n-1 1 2''') == '1'\nassert solution('''2 3\n-2 -2''') == '2'\nassert solution('''1 1\n-1 1''') == '0'\nassert solution('''2 3\n-2 -2\n3 2''') == '1'\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n-1 1 2\") == \"1\"\nassert solution(\"2 3\\n-2 -2\") == \"2\""
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"-1\"\nassert solution(\"3 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"3\\n1 2\\n2 3\\n3 1\"\nassert solution(\"2 1\") == \"-1\"\nassert solution(\"4 3\") == \"4\\n3 1\\n2 3\\n4 2\"\nassert solution(\"1 1\") == \"-1\"\nassert solution(\"1 2\") == \"-1\"\n\nprint(solution(\"4 3\"))\nprint(solution(\"2 2\"))\nprint(solution(\"4 4\"))\nprint(solution(\"5 5\"))\n\nprint(solution(\"10 6\"))\nprint(solution(\"11 6\"))\nprint(solution(\"11 7\"))\nprint(solution(\"12 7\"))\nprint(solution(\"10 8\"))\n\nprint(solution(\"10 8\"))\nprint(solution(\"13 8\"))\nprint(solution(\"13 9\"))\nprint(solution(\"14 9\"))\nprint(solution(\"15 9\"))\n\nprint(solution(\"20 10\"))\nprint(solution(\"21 10\"))\nprint(solution(\"21 11\"))\nprint(solution(\"22 11\"))\nprint(solution(\"23 11\"))\n\nprint(solution(\"1000 5\"))\nprint(solution(\"1001 5\"))\nprint(solution(\"1002 5\"))\nprint(solution(\"1003 5\"))\nprint(solution(\"1004 5\"))\n\nprint(solution(\"1000 6\"))\nprint(solution(\"1001 6\"))\nprint(solution(\"1002 6\"))\nprint(solution(\"1003 6\"))\nprint(solution(\"1004 6\"))\n\nprint(solution(\"1000 7\"))\nprint(solution(\"1001 7\"))\nprint(solution(\"1002 7\"))\nprint(solution(\"1003 7\"))\nprint(solution(\"1004 7\"))\n\nprint(solution(\"1000 8\"))\nprint(solution(\"1001 8\"))\nprint(solution(\"1002 8\"))\nprint(solution(\"1003 8\"))\nprint(solution(\"1004 8\"))\n\nprint(solution(\"1000 9\"))\nprint(solution(\"1001 9\"))\nprint(solution(\"1002 9\"))\nprint(solution(\"1003 9\"))\nprint(solution(\"1004 9\"))\n\nprint(solution(\"1000 10\"))\nprint(solution(\"1001 10\"))\nprint(solution(\"1002 10\"))\nprint(solution(\"1003 10\"))\nprint(solution(\"1004 10\"))\n\nprint(solution(\"1000 11\"))\nprint(solution(\"1001 11\"))\nprint(solution(\"1002 11\"))\nprint(solution(\"1003 11\"))\nprint(solution(\"1004 11\"))\n\nprint(solution(\"1000 12\"))\nprint(solution(\"1001 12\"))\nprint(solution(\"1002 12\"))\nprint(solution(\"1003 12\"))\nprint(solution(\"1004 12\"))\n\nprint(solution(\"1000 13\"))\nprint(solution(\"1001 13\"))\nprint(solution(\"1002 13\"))\nprint(solution(\"1003 13\"))\nprint(solution(\"1004 13\"))\n\nprint(solution(\"1000 14\"))\nprint(solution(\"1001 14\"))\nprint(solution(\"1002 14\"))\nprint(solution(\"1003 14\"))\nprint(solution(\"1004 14\"))\n\nprint(solution(\"1000 15\"))\nprint(solution(\"1001 15\"))\nprint(solution(\"1002 15\"))\nprint(solution(\"1003 15\"))\nprint(solution(\"1004 15\"))\n\nprint(solution(\"1000 16\"))\nprint(solution(\"1001 16\"))\nprint(solution(\"1002 16\"))\nprint(solution(\"1003 16\"))\nprint(solution(\"1004 16\"))\n\nprint(solution(\"1000 17\"))\nprint(solution(\"1001 17\"))\nprint(solution(\"1002 17\"))\nprint(solution(\"1003 17\"))\nprint(solution(\"1004 17\"))\n\nprint(solution(\"1000 18\"))\nprint(solution(\"1001 18\"))\nprint(solution(\"1002 18\"))\nprint(solution(\"1003 18\"))\nprint(solution(\"1004 18\"))\n\nprint(solution(\"1000 19\"))\nprint(solution(\"1001 19\"))\nprint(solution(\"1002 19\"))\nprint(solution(\"1003 19\"))\nprint(solution(\"1004 19\"))\n\nprint(solution(\"1000 20\"))\nprint(solution(\"1001 20\"))\nprint(solution(\"1002 20\"))\nprint(solution(\"1003 20\"))\nprint(solution(\"1004 20\"))\n\nprint(solution(\"1000 21\"))\nprint(solution(\"1001 21\"))\nprint(solution(\"1002 21\"))\nprint(solution(\"1003 21\"))\nprint(solution(\"1004 21\"))\n\nprint(solution(\"1000 22\"))\nprint(solution(\"1001 22\"))\nprint(solution(\"1002 22\"))\nprint(solution(\"1003 22\"))\nprint(solution(\"1004 22\"))\n\nprint(solution(\"1000 23\"))\nprint(solution(\"1001 23\"))\nprint(solution(\"1002 23\"))\nprint(solution(\"1003 23\"))\nprint(solution(\"1004 23\"))\n\nprint(solution(\"1000 24\"))\nprint(solution(\"1001 24\"))\nprint(solution(\"1002 24\"))\nprint(solution(\"1003 24\"))\nprint(solution(\"1004 24\"))\n\nprint(solution(\"1000 25\"))\nprint(solution(\"1001 25\"))\nprint(solution(\"1002 25\"))\nprint(solution(\"1003 25\"))\nprint(solution(\"1004 25\"))\n\nprint(solution(\"1000 26\"))\nprint(solution(\"1001 26\"))\nprint(solution(\"1002 26\"))\nprint(solution(\"1003 26\"))\nprint(solution(\"1004 26\"))\n\nprint(solution(\"1000 27\"))\nprint(solution(\"1001 27\"))\nprint(solution(\"1002 27\"))\nprint(solution(\"1003 27\"))\nprint(solution(\"1004 27\"))\n\nprint(solution(\"1000 28\"))\nprint(solution(\"1001 28\"))\nprint(solution(\"1002 28\"))\nprint(solution(\"1003 28\"))\nprint(solution(\"1004 28\"))\n\nprint(solution(\"1000 29\"))\nprint(solution(\"1001 29\"))\nprint(solution(\"1002 29\"))\nprint(solution(\"1003 29\"))\nprint(solution(\"1004 29\"))\n\nprint(solution(\"1000 30\"))\nprint(solution(\"1001 30\"))\nprint(solution(\"1002 30\"))\nprint(solution(\"1003 30\"))\nprint(solution(\"1004 30\"))\n\nprint(solution(\"1000 31\"))\nprint(solution(\"1001 31\"))\nprint(solution(\"1002 31\"))\nprint(solution(\"1003 31\"))\nprint(solution(\"1004 31\"))\n\nprint(solution(\"1000 32\"))\nprint(solution(\"1001 32\"))\nprint(solution(\"1002 32\"))\nprint(solution(\""
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n1 2') == '1 2\\n2 3'\n\nassert solution('3 1\\n1 2\\n2 3') == '-1'\n\nassert solution('3 2\\n1 2\\n2 3\\n1 3') == '-1'\n\nassert solution('3 3\\n1 2\\n1 3\\n2 3') == '1 1\\n2 1\\n3 2'\n\nassert solution('4 3\\n1 2\\n2 3\\n2 4\\n3 4') == '-1'"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1') == '3'\n\"\"\"\n\nN, K = map(int, input().split())"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == '2 1 3'\nassert solution(\"1 2\") == '-1'\nassert solution(\"1 1\") == '-1'\nassert solution(\"1 1 1 1\") == '-1'\nassert solution(\"1 1 1 2\") == '-1'\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"3\"\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"3 1\") == \"1 2\"\nassert solution(\"3 2\") == \"-1\"\nassert solution(\"3 3\") == \"-1\"\nassert solution(\"3 3\") == \"1 2\""
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == '3'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 2\") == \"0.666666666667\"\n\"\"\"\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 2 1 2''') == '0.666666666667'\n'''\nassert solution('''1 3 1 2''') == '0.5'\nassert solution('''1 3 1 3''') == '0'\n'''\nassert solution('''1 3 1 7''') == '0'\nassert solution('''1 3 1 8''') == '0.333333333333'\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 1 2\\n') == '0.666666666667'\nassert solution('1 3 2 1\\n') == '1.0'\n\"\"\"\n\nimport sys\n\na, b, c, d = map(int, sys.stdin.readline().split())\n\nprint(1 - (a / b) / (c / d))\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 2 1 2''') == '0.666666666667'\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 1 2') == 0.666666666667\nprint(solution(stdin))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----\n\"\"\"\n\n\n\"\"\"\nFor the input 1 2 1 2, the answer is 0.666666666667. This is because at the first turn, the probability of SmallR shooting the target is 0.5, and the probability of Zanoes shooting the target is 1, and the probability that SmallR wins is 0.5 / (0.5 + 1) = 0.5, and the probability that Zanoes wins is 1 / (0.5 + 1) = 0.25. In the second turn, the probability of SmallR shooting the target is 0.25, and the probability of Zanoes shooting the target is 0.75, and the probability that SmallR wins is 0.25 / (0.25 + 0.75) = 0.2, and the probability that Zanoes wins is 0.75 / (0.25 + 0.75) = 0.4. In the third turn, the probability of SmallR shooting the target is 0.2, and the probability of Zanoes shooting the target is 0.8, and the probability that SmallR wins is 0.2 / (0.2 + 0.8) = 0.39999999999999994, and the probability that Zanoes wins is 0.8 / (0.2 + 0.8) = 0.39999999999999994. In the fourth turn, the probability of SmallR shooting the target is 0.39999999999999994, and the probability of Zanoes shooting the target is 0.69999999999999995, and the probability that SmallR wins is 0.39999999999999994 / (0.39999999999999994 + 0.69999999999999995) = 0.39999999999999994, and the probability that Zanoes wins is 0.69999999999999995 / (0.39999999999999994 + 0.69999999999999995) = 0.69999999999999995. In the last turn, the probability of SmallR shooting the target is 0.39999999999999994, and the probability of Zanoes shooting the target is 0.69999999999999995, and the probability that SmallR wins is 0.39999999999999994 / (0.39999999999999994 + 0.69999999999999995) = 0.39999999999999994, and the probability that Zanoes wins is 0.69999999999999995 / (0.39999999999999994 + 0.69999999999999995) = 0.69999999999999995. Therefore the probability that SmallR wins is 0.3333333333333333.\n\nSo the probability that SmallR wins is 0.3333333333333333.\n\nInput\n\n1 2 1 2\nOutput\n\n0.3333333333333333\n\n\"\"\"\n\n\n\nimport os\nfrom io import BytesIO, IOBase\nimport math"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2\") == 0.666666666667\n\nassert solution(\"1 2 3 4\") == 0.0\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 1 2') == '0.666666666667'\n\"\"\""
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 2\") == 0.666666666667\n\n\"\"\"\n\nimport sys\nimport os\n\nDEBUG_MODE = False"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 2\") == \"0.666666666667\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"10 5 10 20\") == \"0.5\"\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 1 2') == '0.66666667'\n\nInput\n3 1 1 1\n\nOutput\n0.33333333333\nassert solution('3 1 1 1') == '0.33333333333'\n\nInput\n2 2 2 2\n\nOutput\n0.0\nassert solution('2 2 2 2') == '0.0'\n\nInput\n0 0 0 0\n\nOutput\n0.0\nassert solution('0 0 0 0') == '0.0'\n\n\"\"\"\n"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n100 10 1 0') == 4\nassert solution('3\\n2 70 3') == 2\nassert solution('3\\n70 30 3') == 0\nassert solution('4\\n2 70 3') == 2\nassert solution('4\\n2 70 3') == 2\n"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n100 10 1 0') == '4\\n0 1 10 100'\nassert solution('3\\n2 70 3') == '2\\n2 70'\nprint('Success')"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'4\\n100 10 1 0'\n) == '4\\n0 1 10 100'\nassert solution(\n'3\\n2 70 3'\n) == '2\\n2 70'\n\"\"\"\n"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n100 10 1 0\") == '4\\n0 1 10 100'\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n100 10 1 0') == '4\\n0 1 10 100'\nassert solution('3\\n2 70 3') == '2\\n2 70'\n\"\"\""
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '4\\n100 10 1 0') == '4\\n0 1 10 100'\nassert solution(\n    '3\\n2 70 3') == '2\\n2 70'\n\nprint(solution(input()))\n"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4\n100 10 1 0\n''') == '4\\n0 1 10 100'\n\nassert solution('''\n3\n2 70 3\n''') == '2\\n2 70'\n'''\n"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10 100') == '4'\n"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 10 1 0\") == \"4\"\n\"\"\"\nimport sys\nsys.path.append(\"./\")\nfrom utils.decorators import *\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"01010\") == \"3\"\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('010') == '1'\nassert solution('01010') == '3'\n\"\"\"\n\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"01010\") == \"3\"\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('010') == '1'\nassert solution('01010') == '3'\n\"\"\"\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"0101010\") == \"3\"\n\"\"\"\n\nn, k = map(int, input().split())\ns = input()\n\nbreak_time = 0\nprev_break = 0\nfor i in range(n):\n    if s[i] == \"1\":\n        break_time = max(break_time, prev_break)\n        break_time += 1\n        prev_break = break_time\nprint(break_time)\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('010') == '1'\nassert solution('0101010') == '3'\n\"\"\"\nimport collections\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"01010\") == \"3\"\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\narr = list(map(int, stdin.readline()))\n\nans = 0\nfor i in range(k):\n    ans = max(ans, arr[i] - arr[i - 1])\n\nprint(ans)\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('010') == 1\nassert solution('01010') == 2\n\"\"\""
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('010') == '1'\nassert solution('01010') == '3'\nassert solution('01101010') == '5'\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\ndata = list(map(int, stdin.readline()))\n\ntime = [0] * n\nbreak_time = 0\n\nfor i in range(n):\n    if data[i] == 0:\n        time[i] = 1\n    else:\n        break_time += 1\n\nmax_time = k + break_time\n\nfor i in range(1, max_time):\n    for j in range(i, n):\n        if data[j] == 0 and data[j - i] == 1:\n            data[j] = 1\n        elif data[j] == 1 and data[j - i] == 0:\n            data[j] = 0\n        if data[j] == 0:\n            time[j] = i + 1\n\nfor i in range(n):\n    print(time[i], end=' ')\nprint()\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"101010\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\\n1 0\") == \"No\"\nassert solution(\"5 2 3\\n1 2 3 2 2\") == \"Yes\"\nassert solution(\"1 2 3 2 2\\n4 3 4\") == \"Yes\"\nassert solution(\"7 2 3\\n3 0 2 1 3 0 1\") == \"No\"\nassert solution(\"4 4 3 0 2 4 2\\n5 2 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1\\n1 0') == 'Yes'\nassert solution('5 2 3\\n1 2 3 2 2') == 'No'\nassert solution('1 2 3 2 2\\n4 3 4') == 'Yes'\nassert solution('0 2 4 3\\n2 3 5') == 'No'\nassert solution('7 2 3\\n3 0 2 1 3 0 1') == 'Yes'\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\\n1 0\\n5 2 3\") == \"Yes\"\nassert solution(\"2 1 1\\n1 0\\n5 2 2 2\") == \"No\"\nassert solution(\"2 1 1\\n1 0\\n5 2 3\") == \"Yes\"\nassert solution(\"2 1 1\\n1 0\\n5 2 2 2\") == \"No\"\nassert solution(\"2 1 1\\n1 0\\n5 2 3\") == \"Yes\"\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1\\n1 0\\n5 2 3') == 'Yes'\nassert solution('1 2 3 2 2\\n4 3 4') == 'Yes'\nassert solution('0 2 4 3\\n2 3 5') == 'No'\nassert solution('1 2 3 2 2\\n4 3 4') == 'No'\nassert solution('3 0 2 1 3 0 1\\n7 2 3') == 'Yes'\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\\n1 0\\n5 2 3\") == \"Yes\"\nassert solution(\"2 1 1\\n1 0\\n5 2 4\") == \"No\"\nassert solution(\"2 1 1\\n1 0\\n5 2 5\") == \"Yes\"\nassert solution(\"2 1 1\\n1 0\\n5 3 3\") == \"No\"\nassert solution(\"2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\") == \"Yes\"\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 2 1\n1 0\n5 2 3\n1 2 3 2 2\n4 3 4\n0 2 4 3\n2 3 5\n3 0\n7 2 3\n3 0 2 1 3 0 1\n7 1 4\n4 4 3 0 2 4 2\n5 2 3\n1 2 3 2 2\n''') == 'Yes'\n\nassert solution('''\n2 1 1\n1 0\n5 2 3\n1 2 3 2 2\n4 3 4\n0 2 4 3\n2 3 5\n3 0\n7 2 3\n3 0 2 1 3 0 1\n7 1 4\n4 4 3 0 2 4 2\n5 2 3\n1 2 3 2 2\n''') == 'No'\n\nassert solution('''\n2 1 1\n1 0\n5 2 3\n1 2 3 2 2\n4 3 4\n0 2 4 3\n2 3 5\n3 0\n7 2 3\n3 0 2 1 3 0 1\n7 1 4\n4 4 3 0 2 4 2\n5 2 3\n1 2 3 2 2\n''') == 'Yes'\n'''"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7\n2 1 1\n1 0\n5 2 3\n1 2 3 2 2\n4 3 4\n0 2 4 3\n2 3 5\n3 0\n7 2 3\n3 0 2 1 3 0 1\n7 1 4''') == 'Yes'\n\nassert solution('''8\n2 1 1\n1 0\n5 2 3\n1 2 3 2 2\n4 3 4\n0 2 4 3\n2 3 5\n3 0\n7 2 3\n3 0 2 1 3 0 1\n7 1 4''') == 'No'\n\nassert solution('''1\n0\n5 2 3\n1 2 3 2 2\n4 3 4''') == 'Yes'\n\nassert solution('''7\n2 1 1\n1 0\n5 2 3\n1 2 3 2 2\n4 3 4\n0 2 4 3\n2 3 5\n3 0\n7 2 3\n3 0 2 1 3 0 1\n7 1 4''') == 'No'\n\nassert solution('''2\n1 0\n5 2 3\n1 2 3 2 2\n4 3 4''') == 'No'"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\\n3 0\\n7 2 3\\n3 0 2 1 3 0 1\\n7 1 4\\n4 4 3 0 2 4 2\") == \"Yes\"\nassert solution(\"2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\\n3 0\\n7 2 3\\n3 0 2 1 3 0 1\\n7 1 4\\n4 4 3 0 2 4 2\") == \"No\"\nassert solution(\"1 2 1\\n0 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\\n3 0\\n7 2 3\\n3 0 2 1 3 0 1\\n7 1 4\\n4 4 3 0 2 4 2\") == \"Yes\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"Yes\"\nassert solution(\"1 2 3 2 2\") == \"No\"\nassert solution(\"1 2 3 2 2\") == \"Yes\"\nassert solution(\"2 3 4\") == \"No\"\nassert solution(\"2 1 2 1 2\") == \"Yes\"\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\\n1 0\") == \"No\"\nassert solution(\"5 2 3\\n1 2 3 2 2\") == \"No\"\nassert solution(\"1 2 3 2 2\\n4 3 4\") == \"Yes\"\nassert solution(\"4 4 3 0 2 4 2\\n5 2 3\") == \"Yes\"\nassert solution(\"0 2 4 3\\n2 3 5\") == \"No\"\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5 0 5 0') == '0'\nassert solution('11\\n5 5 5 5 5 5 5 5 0 5 5') == '5555555550'"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 5 0\") == \"0\"\nassert solution(\"11 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\n\"\"\"\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5 0 5 0') == '0'\nassert solution('11\\n5 5 5 5 5 5 5 5 0 5 5') == '5555555550'\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5 0 5 0') == '0'\nassert solution('11\\n5 5 5 5 5 5 5 5 0 5 5') == '5555555550'\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5 0 5 0\") == \"0\"\nassert solution(\"11\\n5 5 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\n\"\"\""
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n5 0 5 0') == '0'\nassert solution('11\\n5 5 5 5 5 5 5 5 0 5 5') == '5555555550'\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n5 5 5 5 5 5 5 5 5 0 5 5''') == '5555555550'\nassert solution('''4\n5 0 5 0''') == '0'\nassert solution('''11\n5 5 5 5 5 5 5 5 5 0 5 5''') == '5555555550'\nassert solution('''8\n5 0 5 0 5 5 5 5 5 5 5''') == '5555555550'\nassert solution('''9\n5 5 5 5 5 5 5 5 5 5 0 5''') == '5555555550'"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5 0 5 0\") == \"0\"\nassert solution(\"11\\n5 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5 0 5 0\") == \"0\"\nassert solution(\"11\\n5 5 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n0 0 5''') == '0'\nassert solution('''5\n5 0 5 0''') == '0'\nassert solution('''4\n5 5 5 5''') == '5'\nassert solution('''8\n5 5 5 5 5 5 5 5 5''') == '5555555550'\nassert solution('''10\n5 5 5 5 5 5 5 5 5 5 5 5 5''') == '55555555550'\n\n\"\"\"\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 38\") == \"10\"\nassert solution(\"5 21\") == \"6\"\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 21\\n2 4 100 2 6') == 6\n\"\"\"\n\nimport io\nimport sys\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 38\") == 10\n\"\"\""
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 5\\n2 4 100 2 6') == 10\nassert solution('5 21\\n2 4 100 2 6') == 6\nassert solution('5 38\\n2 4 100 2 6') == 10\n\n\"\"\"\n\n\nimport unittest"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 38\\n5 2 5\") == 10\n\"\"\"\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('3 38\\n5 2 5') == 10\n\nprint(solution(stdin))\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 38\") == 10\nassert solution(\"5 21\") == 6\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 38\\n5 2 5') == 10\nassert solution('5 21\\n2 4 100 2 6') == 6"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('5 21') == 1\nassert solution('5 2 5') == 5\nassert solution('5 2 1') == 3\nassert solution('1 2 3 4 5') == 0\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 38\") == \"10\"\nassert solution(\"5 21\") == \"6\"\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2\") == \"1 9\"\nassert solution(\"8 1 1\\n2 2 1\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\") == \"5 2\"\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2\\n') == '1 9'\nassert solution('8 1 1\\n2 2 1\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\\n') == '0 0'\n\"\"\"\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2\") == \"1 9\"\nassert solution(\"8 1 1\\n2 2 1\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\") == \"5 2\""
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 1 1\\n2 2 2\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\\n2 2 2\") == \"0 0\"\nassert solution(\"5 1 1\\n1 2 2\\n2 2 2\\n2 2 2\\n1 2 2\\n2 2 2\\n2 2 2\") == \"0 0\"\nassert solution(\"10 1 1\\n2 2 2\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\\n2 2 2\") == \"1 9\""
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2\") == \"1 9\"\nassert solution(\"8 1 1\\n2 2 1\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\") == \"5 2\"\nassert solution(\"5 1 1\\n1 2 2\\n2 2 2\\n2 2 2\\n1 2 2\\n2 2 2\") == \"0 0\"\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2\") == \"1 9\"\nassert solution(\"8 1 1\\n2 2 1\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\") == \"0 0\"\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2\") == \"1 9\"\nassert solution(\"8 1 1\\n2 2 1\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\") == \"5 2\"\nassert solution(\"5 1 1\\n1 2 2\\n2 2 2\\n2 2 2\\n1 2 2\") == \"0 0\"\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"10 2 1\n1 1 1\n1 1 1\n1 1 1\n2 2 2\n2 2 2\n2 2 2\n\"\"\") == \"1 9\"\nassert solution(\"\"\"8 1 1\n2 2 1\n3 3 1\n3 1 3\n1 1 1\n2 1 1\n1 2 3\n\"\"\") == \"5 2\"\nassert solution(\"\"\"5 1 1\n1 2 2\n2 2 2\n2 2 2\n1 2 2\n2 2 2\n2 2 2\n\"\"\") == \"0 0\"\n\nassert solution(\"\"\"5 1 1\n1 2 2\n2 2 2\n2 2 2\n1 2 2\n2 2 2\n2 2 2\n\"\"\") == \"0 0\"\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1 1\") == \"0 0\"\nassert solution(\"8 1 1\") == \"5 2\"\n\"\"\""
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n-199 192\\n5 19\\n5 -1 4 2 0\\n1 2\\n69\") == \"391 0\\n0 6 1 3 5\\n0\"\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n-199 192\") == \"391 0\"\nassert solution(\"2 1\\n-199 192\") == \"391 0\"\nassert solution(\"1 1\\n-199 192\") == \"391 0\"\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n-199 192\") == \"391 0\"\nassert solution(\"5 19\\n5 -1 4 2 0\") == \"0 6 1 3 5\"\nassert solution(\"5 1\\n5 -1 4 2 0\") == \"0 6 1 3 5\"\n\"\"\"\nfrom typing import List\nfrom collections import deque\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n-199 192\\n5 19\\n5 -1 4 2 0\\n1 2\\n69') == '391 0\\n0 6 1 3 5'"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n-199 192\") == \"391 0\"\n\"\"\"\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n -1 2 1 3\") == \"0 6 1 3 5\"\nassert solution(\"3 1\\n 5 -1 4 2 0\") == \"0 6 1 3 5\"\nassert solution(\"4 1\\n -1 2 1 3\") == \"0 6 1 3 5\"\n\nprint(\"Success!\")\n\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\n\nfor _ in range(T):\n    N, K = [int(x) for x in sys.stdin.readline().strip().split()]\n    a = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    d = max(a)\n    for i in range(1, N + 1):\n        a[i - 1] = d - a[i - 1]\n    for _ in range(K):\n        x = int(sys.stdin.readline().strip())\n        a[x - 1] = d\n    print(' '.join([str(i) for i in a]))\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n-199 192\") == \"391 0\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-199 192\\n5 19\\n5 -1 4 2 0\\n1 2\\n69\") == \"391 0\\n0 6 1 3 5\\n0\"\n\"\"\"\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n-199 192\") == \"391 0\"\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n-199 192\") == \"391 0\"\n\"\"\""
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n3 5 7 1 6 2 8\\n1 2 7\") == \"7 1 2\"\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\") == \"1 0\"\n\"\"\"\n"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n3 5 7 1 6 2 8\\n1 2 7\") == \"7 1 2\"\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\") == \"1 0\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n3 5 7 1 6 2 8\\n1 2 7\\n\") == \"7 1 2\"\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\\n\") == \"1 0\"\n"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n3 4 1 0\\n0 1 7 9\\n') == '1 0'\nassert solution('7 3\\n3 5 7 1 6 2 8\\n1 2 7\\n') == '7 1 2'\n"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n3 5 7 1 6 2 8\\n1 2 7\") == \"7 1 2\"\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\") == \"1 0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"7 3\"\n\"3 5 7 1 6 2 8\"\n\"1 2 7\"\n) == \"7 1 2\"\nassert solution(\n\"4 4\"\n\"3 4 1 0\"\n\"0 1 7 9\"\n) == \"1 0\"\n\"\"\"\n"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 1 0\\n0 1 7 9') == '1 0'\nassert solution('7 3 1 6 2 8') == '7 1 2'\n\"\"\"\n"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n1 2 7\\n1 2 7\") == \"7 1 2\"\nassert solution(\"7 3\\n1 2 7\\n1 2 7\") == \"7 1 2\"\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\") == \"1 0\"\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\") == \"1 0\"\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\") == \"1 0\"\n"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n3 5 7 1 6 2 8\\n1 2 7\\n\") == '7 1 2'\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\\n\") == '1 0'\n\"\"\"\n"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n''') == '7 1 2'\nassert solution('''\n4 4\n3 4 1 0\n0 1 7 9\n''') == '1 0'\nassert solution('''\n2 3\n2 1\n''') == '2 1'\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n'''\n4 4\n3 4 1 0\n0 1 7 9\n'''\n\n'''\n2 3\n2 1\n'''\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3\n3 5 7 1 6 2 8\n1 2 7\n'''\n\n\n\n'''\n7 3"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 1\nassert solution(\"100\") == 49\nassert solution(\"0\") == 0\nassert solution(\"-10\") == 1\nassert solution(\"-1\") == 1\n"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"3\") == 1\nassert solution(\"99\") == 49\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"2\") == 0\nassert solution(\"3\") == 1\nassert solution(\"4\") == 1\nassert solution(\"5\") == 2\n"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '0'\nassert solution('3\\n') == '1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"99\") == \"49\"\n"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '1'\nassert solution('99') == '49'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n') == '0'\nassert solution('5\\n') == '1'\nassert solution('3\\n') == '1'\nassert solution('99\\n') == '49'\nassert solution('999\\n') == '499'\nprint('All tests passed.')\n\n\"\"\"\n"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"99\") == \"49\"\n"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"99\") == \"49\"\n\n\"\"\""
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"99\") == \"49\"\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+--\") == \"0.5\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+++\") == \"0.25\"\nassert solution(\"??-\") == \"0.5\"\nassert solution(\"+-?\") == \"0.5\"\nassert solution(\"+-???\") == \"0.5\"\nassert solution(\"?--\") == \"0.5\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"++++\") == \"1.0\"\nassert solution(\"+-??\") == \"0.5\"\nassert solution(\"+++\") == \"0.0\"\nassert solution(\"??-\") == \"0.0\"\n\"\"\"\n"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"++++\") == 1\nassert solution(\"+-??\") == 0.5\nassert solution(\"+++\") == 0\nassert solution(\"??-\") == 0\n\n\"\"\"\n\nimport random"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('+++') == '0.5'\nassert solution('?-') == '0.5'\nassert solution('??') == '0'\nassert solution('++-') == '0'\n\"\"\"\n\nimport re"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == '0.5'\nassert solution(\"+-?\") == '0.0'\nassert solution(\"+?+?\") == '1.0'\nassert solution(\"?????\") == '0.0'\nassert solution(\"???????\") == '0.0'\n"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('++-') == '1.000000000000'\nassert solution('+??') == '0.500000000000'\nassert solution('??-') == '0.000000000000'\nassert solution('?-??') == '0.500000000000'\n\"\"\"\n\ns1 = '++-?'\ns2 = '?-??'\n"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+-\") == \"0.5\"\nassert solution(\"+-?\") == \"0.0\"\nassert solution(\"--\") == \"0.0\"\n\nassert solution(\"?+\") == \"0.5\"\nassert solution(\"??\") == \"0.5\"\n"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"++-\") == \"0.5\"\nassert solution(\"???\") == \"0.5\"\nassert solution(\"+-?\") == \"0.5\"\n\nprint('The code ran Correctly')\n\n\n\"\"\""
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('+-??') == '0.5'\nassert solution('??-') == '0.5'\nassert solution('+++') == '0'\n\"\"\"\nfrom typing import List\nimport math\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 3 0 1\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"4\\n0 2 1 1\") == \"Impossible\"\nassert solution(\"4\\n0 2 1 2\") == \"Impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'Impossible'\nassert solution('4\\n2 1 3 0 1\\n') == 'Possible'\nassert solution('9\\n0 2 3 4 1 1 0 2 2\\n') == 'Possible'"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 3 0 1\") == 'Possible\\n4 5 1 3 2'\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == 'Possible\\n7 5 2 1 6 8 3 4 9'\nassert solution(\"4\\n0 2 1 1\") == 'Impossible'\n\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == 'Possible\\n7 5 2 1 6 8 3 4 9'\nassert solution(\"9\\n0 1 0 2 2 3 4 5 6 7\") == 'Impossible'\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 1 3 0 1') == 'Possible\\n4 5 1 3 2'\nassert solution('9\\n0 2 3 4 1 1 0 2 2') == 'Possible\\n7 5 2 1 6 8 3 4 9'\nassert solution('4\\n0 2 1 1') == 'Impossible'\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 3 0 1\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"4\\n0 2 1 1\") == \"Impossible\"\n\nsolution(\"9\\n0 2 3 4 1 1 0 2 2\")\nsolution(\"4\\n0 2 1 1\")\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 3 0 1\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"9 0 2 3 4 1 1 0 2 2\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"4 0 2 1 1\") == \"Impossible\"\n\"\"\"\n\n\n\nimport itertools\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 3 0 1') == 'Possible\\n4 5 1 3 2'\nassert solution('9\\n0 2 3 4 1 1 0 2 2') == 'Possible\\n7 5 2 1 6 8 3 4 9'\nassert solution('4\\n0 2 1 1') == 'Impossible'\nassert solution('3\\n0 2 1') == 'Impossible'\nassert solution('9\\n0 1 2 3 4 1 1 0 2 2') == 'Possible\\n7 5 2 1 6 8 3 4 9'\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n2 1 3 0 1\n''') == 'Possible\\n4 5 1 3 2'\nassert solution('''9\n0 2 3 4 1 1 0 2 2\n''') == 'Possible\\n7 5 2 1 6 8 3 4 9'\nassert solution('''4\n0 2 1 1\n''') == 'Impossible'\nassert solution('''4\n0 1 1 1\n''') == 'Impossible'\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 3 0 1\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"4\\n0 2 1 1\") == \"Impossible\"\nassert solution(\"0\\n0 2 1 1\") == \"Impossible\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == \"Impossible\"\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 3 0 1\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"4\\n0 2 1 1\") == \"Impossible\"\nassert solution(\"2\\n0 0\") == \"Impossible\"\n\n\"\"\"\n\nfrom typing import List\n\nN = int(input())\narr = list(map(int, input().split()))\n\nteam = {i: [] for i in range(N)}\nteam_cnt = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        if i in team and j in team[i]:\n            continue\n        if arr[i] < arr[j]:\n            team[j].append(i)\n        elif arr[i] > arr[j]:\n            team[i].append(j)\n        else:\n            team_cnt += 1"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n2\") == \"2.0\"\nassert solution(\"2 2\\n4\") == \"5.4142135624\"\n"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 2''') == '5.4142135624'\nassert solution('''1 1''') == '2.0000000000'\n'''\n\n\n\n'''"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 1''') == '2.0000000000'\nassert solution('''2 2''') == '5.4142135624'\nassert solution('''2 3''') == '5.4772255721'\nassert solution('''3 3''') == '5.72413793103'\nassert solution('''10 2''') == '15.6524593064'\n"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == 2.0\n\"\"\""
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '2.0000000000'\nassert solution('2 2\\n') == '5.4142135624'\n\"\"\"\n"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"2.0000000000\"\n\"\"\"\n"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == 2.0\nassert solution(\"2 2\") == 5.4142135624\n"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == '2.0000000000'\n\"\"\"\n\nm, R = map(int, input().split())"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 2\") == \"5.4142135624\"\nassert solution(\"3 3\") == \"9.84848484848\"\nassert solution(\"5 10\") == \"26.6794497678\"\nassert solution(\"6 11\") == \"32.5454545455\"\n"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == '2.0'\nassert solution('2 2') == '5.4142135624'\n\"\"\"\n\nimport math\n\nm, r = map(int, input().split())\nprint(m * r * 2 * math.pi)\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 2 0') == '3'\nassert solution('2\\n10 10') == '1'\nassert solution('6\\n5 2 6 5 7 4') == '6'\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 6 5 7 4\") == \"3\"\nassert solution(\"2 10\") == \"1\"\nassert solution(\"6 5 2 6 5 7 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 2 0') == 3\nassert solution('6\\n5 2 6 5 7 4') == 6\nassert solution('2\\n10 10') == 1\nassert solution('1\\n10 10') == 0\n\"\"\""
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 2 0\") == 3\nassert solution(\"10 10\") == 1\nassert solution(\"6 5 2 6 5 7 4\") == 6\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 2 0\") == \"3\"\nassert solution(\"2\\n10 10\") == \"1\"\nassert solution(\"6\\n5 2 6 5 7 4\") == \"6\"\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 2 0') == 3\nassert solution('10 10') == 1\nassert solution('5 2 6 5 7 4') == 6\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 2 0\") == '3'\nassert solution(\"2\\n10 10\") == '1'\nassert solution(\"6\\n5 2 6 5 7 4\") == '6'\n\n\"\"\"\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3 0\") == \"3\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"6 5 2 6 5 7 4\") == \"6\"\nassert solution(\"5 2 6 5 7 4\") == \"6\"\nassert solution(\"5 10 3 2 1 7\") == \"7\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 2 0') == '3'\nassert solution('10\\n10') == '1'\nassert solution('6\\n5 2 6 5 7 4') == '6'\nassert solution('2\\n10 10') == '1'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nqueue = list(map(int, sys.stdin.readline().split()))\ncurrent = queue.index(0)\nres = 0\n\nwhile queue[current]!= 0:\n    current = (current + 1) % N\n    res += 1\n\nprint(res + current + 1)\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 30\\n10 35\\n05:20\") == \"5\"\nassert solution(\"60 120\\n24 100\\n13:00\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == '0'\nassert solution('a\\nb\\nc') == '1'\nassert solution('a\\nb\\nc\\n\\nd') == '1'\nassert solution('a\\nb\\nc\\nd\\ne\\nf\\n\\ng\\nh') == '4'\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 30\\n10 35\\n05:20\") == \"5\"\nassert solution(\"60 120\\n24 100\\n13:00\") == \"9\"\n\nprint(\"Well done!\")\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30\\n10 35\\n05:20\") == \"5\"\nassert solution(\"60 120\\n24 100\\n13:00\") == \"9\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 30\\n10 35\\n05:20') == '5'\nassert solution('60 120\\n24 100\\n13:00') == '9'\n\"\"\"\nimport math\nfrom typing import List\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 30\\n10 35\\n05:20\") == \"5\"\n\"\"\""
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 30\\n10 35\\n05:20\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 30\\n10 35\\n05:20') == '5'\n\nassert solution('60 120\\n24 100\\n13:00') == '9'\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"10 30\"\n\"10 35\"\n\"05:20\"\n) == \"5\"\nassert solution(\n\"60 120\"\n\"24 100\"\n\"13:00\"\n) == \"9\"\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 30\\n10 35\\n05:20\") == \"5\"\nassert solution(\"60 120\\n24 100\\n13:00\") == \"9\"\nassert solution(\"60 120\\n24 100\\n13:40\") == \"9\"\n"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10\\n1 5 2 1 1 1 2 5 7 2') == '2'\n\nassert solution('100 1\\n1') == '0'\n\nassert solution('2 5\\n5 4 3 2 1') == '1'\n\nassert solution('3 9\\n42 42 42 42 42 42 42 42 42') == '3'\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\ndp = [0] * (m + 1)\n\nfor i in range(n):\n    if dp[a[i]] + 1 > dp[a[i]]:\n        dp[a[i]] = dp[a[i]] + 1\n\nans = 0\n\nfor i in range(1, m + 1):\n    if dp[i] > ans:\n        ans = dp[i]\n\nprint(ans)"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10\\n1 5 2 1 1 1 2 5 7 2') == '2'\nassert solution('100 1\\n1') == '0'\nassert solution('2 5\\n5 4 3 2 1') == '1'\nassert solution('3 9\\n42 42 42 42 42 42 42 42 42') == '3'\n\n\n\n\n\"\"\""
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10\\\\n1 5 2 1 1 1 2 5 7 2') == '2'\n\nassert solution('100 1\\\\n1') == '0'\n\nassert solution('3 9\\\\n42 42 42 42 42 42 42 42 42') == '3'\n\"\"\"\n\nn, m = map(int, input().split())\nstdin = input()\nfoods = list(map(int, stdin.split()))\n\nunique = set(foods)\n"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10\\n1 5 2 1 1 1 2 5 7 2') == 2\nassert solution('100 1\\n1') == 0\nassert solution('2 5\\n5 4 3 2 1') == 1"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10\\n1 5 2 1 1 1 2 5 7 2\\n\") == \"2\"\nassert solution(\"100 1\\n1\\n\") == \"0\"\nassert solution(\"2 5\\n5 4 3 2 1\\n\") == \"1\"\nassert solution(\"3 9\\n42 42 42 42 42 42 42 42 42\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10\\n1 5 2 1 1 1 2 5 7 2') == '2'\n\n'''\n"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\\n1 5 2 1 1 1 2 5 7 2\") == 2\nassert solution(\"100 1\\n1\") == 0\nassert solution(\"2 5\\n5 4 3 2 1\") == 1\nassert solution(\"3 9\\n42 42 42 42 42 42 42 42 42\") == 3\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\\n1 5 2 1 1 1 2 5 7 2\\n\") == \"2\"\n\nassert solution(\"100 1\\n42\\n\") == \"0\"\n\nassert solution(\"2 5\\n5 4 3 2 1\\n\") == \"1\"\n"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 10\\n1 5 2 1 1 1 2 5 7 2') == '2'\nassert solution('100 1\\n42') == '0'\nassert solution('2 5\\n5 4 3 2 1') == '1'\nassert solution('3 9\\n42 42 42 42 42 42 42 42 42') == '3'\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\narr = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10\\n1 5 2 1 1 1 2 5 7 2\\n\") == 2\nassert solution(\"100 1\\n1\\n\") == 0\nassert solution(\"2 5\\n5 4 3 2 1\\n\") == 1\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 60\n10 10\n100 100''') == '110'\nprint(\"Tests completed.\")\n'''\nGiven a stream of integers, count the number of pairs of integers in the stream whose difference is k.\n\n-----Constraints-----\n - 1 \\leq n \\leq 100 000\n - 1 \\leq k \\leq 1000\n - 1 \\leq A[i] \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nThe first line of input contains T, the number of test cases.\nThe first line of each test case contains n, the number of elements in the stream.\nThe second line contains n space-separated integers A_1, A_2,..., A_n.\n\n-----Output-----\nFor each test case, count the number of pairs of integers (A_i, A_{i+1} ) in the stream, such that A_i - A_{i+1} = k.\n\n-----Sample Input-----\n4\n5\n4 2 1 3 4\n2\n1 3\n3 2\n5\n1 1 2 2 3 3\n\n-----Sample Output-----\n4\n2\n0\n5\n4\n\n'''\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 60\\n10 10') == '110'\n\"\"\"\n\nimport sys\n\ntest_cases = int(sys.stdin.readline().strip())\nfor _ in range(test_cases):\n    N, T = list(map(int, sys.stdin.readline().strip().split()))\n    dishes = {}\n    for dish_num in range(N):\n        dish_name, dish_val = sys.stdin.readline().strip().split()\n        dishes[dish_name] = dish_val\n    if N == 1:\n        print(int(dishes['0']))\n    else:\n        dishes_ordered = {dish_name: int(dishes[dish_name]) for dish_name in dishes.keys()}\n        for i in range(T):\n            if len(dishes_ordered) == N:\n                break\n            dishes_ordered = {dish_name: int(dishes[dish_name]) for dish_name in dishes.keys()}\n            for j in range(i+1, T):\n                if i % 0.5 == 0:\n                    try:\n                        dishes_ordered[list(dishes_ordered.keys())[-1]] = int(dishes_ordered[list(dishes_ordered.keys())[-1]]) + int(dishes[list(dishes_ordered.keys())[-1]])\n                    except:\n                        continue\n                else:\n                    try:\n                        dishes_ordered[list(dishes_ordered.keys())[-1]] = int(dishes_ordered[list(dishes_ordered.keys())[-1]])\n                    except:\n                        continue\n        print(sum(dishes_ordered.values()))"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 60\") == \"110\"\n\"\"\"\n\nN, T = map(int, stdin.readline().split())\nnums = []\nfor _ in range(N):\n    nums.append(list(map(int, stdin.readline().split())))\nnums.sort(key = lambda x: (x[1], x[0]))\nans = 0\ncurrent = 0\nfor x, y in nums:\n    current += y\n    ans = max(ans, current)\n    if current > T:\n        break\nprint(ans)\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 60\\n10 10\\n100 100\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 60\\n10 10\\n100 100\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 2\n1 1\n2 3\n3 4''') == '3'\nassert solution('''2 1\n1 1\n1 1''') == '2'\nassert solution('''2 1\n1 2\n1 2''') == '1'\nassert solution('''2 1\n3 1\n2 3\n3 3''') == '4'\nassert solution('''2 1\n1 2\n2 1\n2 1''') == '1'\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 2\\n2 3\\n3 4\\n4 1\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10\") == \"110\"\nassert solution(\"10 100\") == \"110\"\nassert solution(\"100 100\") == \"110\"\nassert solution(\"3 1000\") == \"0\"\n\"\"\"\n\nimport math\n\ninput = [list(map(int, i.split())) for i in input().split(':')]\n\nn = input[0][0]\nt = input[0][1]"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 60\\n10 10\") == \"110\"\nprint(\"PASSED\")\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 60\\n10 10\\n100 100\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == '2'\n\"\"\"\n\nimport numpy as np\nimport sys"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 3\n''') == '2'\nassert solution('''2 2\n''') == '1'\n\"\"\""
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3') == '2'\nassert solution('5 3') == '4'\nassert solution('3 5') == '4'\nassert solution('4 4') == '0'\nassert solution('1 1') == '1'\n\"\"\""
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == 2\n\"\"\"\n\nfrom collections import defaultdict\n\nn, m = map(int, input().split())\n\ncache = defaultdict(dict)\n"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3') == '2'\n\"\"\""
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"2\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3, 3) == 2\n\"\"\""
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"8 8\") == \"8\"\nassert solution(\"2 5\") == \"0\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 2\nassert solution(\"5\") == 3\n"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"4\") == 2\nassert solution(\"10\") == 5\nassert solution(\"100\") == 5\nassert solution(\"1000\") == 10\n"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('9') == '2'\nassert solution('10') == '3'\n\n\"\"\""
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == 2\n\"\"\""
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 2\n\"\"\"\n\nfrom tools import timing\n\nn = int(input())"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '2'\nassert solution('10') == '5'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 2\nassert solution(\"5\") == 3\n"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"2\"\n\"\"\"\n\nimport sys\nimport os\nfrom functools import reduce"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"4\"\n\"\"\""
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '8'\nassert solution('2') == '4'\n"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"4\"\nprint('Test pass.')"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '8'\nassert solution('2') == '4'\n\"\"\""
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '8'\nassert solution('2') == '4'\nassert solution('3') == '1'\nassert solution('4') == '9'\n"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"4\"\n\"\"\""
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '8'\nassert solution('2') == '4'\nassert solution('10') == '8'\nassert solution('100') == '8'\nassert solution('1000') == '8'\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"1 1\"\n\nassert solution(\"2 3\") == \"2 0\"\n\nassert solution(\"7 3\") == \"3 2\"\n\nassert solution(\"1 10\") == \"0 9\"\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\n\"\"\"\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '1 1'\nassert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\n\"\"\"\n\na, b = list(map(int, input().split()))\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '1 1'\nassert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\n\"\"\""
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"1 1\"\nassert solution(\"2 3\") == \"2 0\"\nassert solution(\"7 3\") == \"3 2\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '1 1'\nassert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1 1'\nassert solution('7 3') == '3 2'\nassert solution('7 2') == '1 1'\n\n\"\"\"\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '1 1'\nassert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3 1) == '1 1'\nassert solution(2 3) == '2 0'\nassert solution(7 3) == '3 2'\n\n\n-----\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == '1 1'\nassert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\nassert solution('7 4') == '4 3'\nassert solution('3 1') == '1 1'\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 9 1 2\") == \"2.6666666666666665\"\nassert solution(\"2 6 2 2\") == \"1.0\"\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 6 2 2\") == '1'\nassert solution(\"1 9 1 2\") == '2'\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6 2 2\") == \"1.00000000000000000000\"\nassert solution(\"1 9 1 2\") == \"2.66666666666666650000\"\n\"\"\"\n\nfrom collections import namedtuple\nimport math\n\nPoint = namedtuple('Point', 'x y')\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 6 2 2\") == \"1.0\"\nassert solution(\"1 9 1 2\") == \"2.6666666666666665\"\nassert solution(\"0 1 1 1\") == \"1.0\"\nassert solution(\"5 1 3 1\") == \"3.0\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 6 2 2\") == \"1\"\nassert solution(\"1 9 1 2\") == \"2.6666666666666665\"\n\"\"\"\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 6 2 2\") == \"1.00000000000000000000\"\nassert solution(\"1 9 1 2\") == \"2.66666666666666650000\"\n\nimport math\n\nd, L, v_1, v_2 = map(int, input().split())"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6 2 2\") == \"1.00000000000000000000\"\nassert solution(\"1 9 1 2\") == \"2.66666666666666650000\"\n\"\"\""
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 9 1 2\") == \"2.66666666666666650000\"\nassert solution(\"2 6 2 2\") == \"1.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 6 2 2') == '1.00000000000000000000'\nassert solution('1 9 1 2') == '2.66666666666666650000'\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''\n2 6 2 2\n'''\n) == '1.00000000000000000000'\nassert solution(\n'''\n1 9 1 2\n'''\n) == '2.66666666666666650000'\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 60\\n0 0\\n1 20\") == \"6 1\"\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 60\\n0 0\\n1 20\\n3 21\\n5 0\\n19 30\\n23 40\") == \"6 1\"\nassert solution(\"16 50\\n0 30\\n1 20\\n3 0\\n4 30\\n6 10\\n7 50\\n9 30\\n11 10\\n12 50\\n14 30\\n16 10\\n17 50\\n19 30\\n21 10\\n22 50\\n23 59\") == \"24 50\"\nassert solution(\"3 17\\n0 30\\n1 0\\n12 0\") == \"0 0\"\n\"\"\"\nimport sys\n\nfrom tools import timing\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 60\\n0 0\\n1 20\\n3 21\\n5 0\\n19 30\\n23 40\\n') == '6 1'\n\nassert solution('16 50\\n0 30\\n1 20\\n3 0\\n4 30\\n6 10\\n7 50\\n9 30\\n11 10\\n12 50\\n14 30\\n16 10\\n17 50\\n19 30\\n21 10\\n22 50\\n23 59\\n') == '24 50'\n\nassert solution('3 17\\n0 30\\n1 0\\n12 0\\n') == '0 0'\n\n\"\"\"\n\nfrom typing import Tuple, List\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 17\\n0 30\\n1 0\\n12 0\") == \"0 0\"\nassert solution(\"6 60\\n0 0\\n1 20\\n3 21\\n5 0\\n19 30\\n23 40\") == \"6 1\"\nassert solution(\"16 50\\n0 30\\n1 20\\n3 0\\n4 30\\n6 10\\n7 50\\n9 30\\n11 10\\n12 50\\n14 30\\n16 10\\n17 50\\n19 30\\n21 10\\n22 50\\n23 59\") == \"24 50\"\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n6 60\n0 0\n1 20\n3 21\n5 0\n19 30\n23 40\n\"\"\"\n) == '6 1'\n\nassert solution(\n\"\"\"\n16 50\n0 30\n1 0\n12 0\n\"\"\"\n) == '0 0'\n\nassert solution(\n\"\"\"\n3 17\n0 30\n1 0\n12 0\n\"\"\"\n) == '0 0'\n\nassert solution(\n\"\"\"\n3 17\n0 30\n1 0\n12 0\n\"\"\"\n) == '0 0'\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 60\"\n    \"0 0\"\n    \"1 20\"\n    \"3 21\"\n    \"5 0\"\n    \"19 30\"\n    \"23 40\"\n) == \"6 1\"\n\nassert solution(\n    \"6 50\"\n    \"0 30\"\n    \"1 0\"\n    \"12 0\"\n) == \"0 0\"\n\nassert solution(\n    \"3 17\"\n    \"0 30\"\n    \"1 0\"\n    \"12 0\"\n) == \"0 0\"\n\n\nimport datetime"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 60\\n0 0\\n1 20\\n3 21\\n5 0\\n19 30\\n23 40\\n\") == \"6 1\"\nassert solution(\"16 50\\n0 30\\n1 20\\n3 0\\n4 30\\n6 10\\n7 50\\n9 30\\n11 10\\n12 50\\n14 30\\n16 10\\n17 50\\n19 30\\n21 10\\n22 50\\n23 59\\n\") == \"24 50\"\nassert solution(\"3 17\\n0 30\\n1 0\\n12 0\") == \"0 0\"\n\"\"\"\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 60\\n0 0\\n1 20\\n3 21\\n5 0\\n19 30\\n23 40\\n\") == \"6 1\"\nassert solution(\"16 50\\n0 30\\n1 20\\n3 0\\n4 30\\n6 10\\n7 50\\n9 30\\n11 10\\n12 50\\n14 30\\n16 10\\n17 50\\n19 30\\n21 10\\n22 50\\n23 59\") == \"24 50\"\nassert solution(\"3 17\\n0 30\\n1 0\\n12 0\\n\") == \"0 0\"\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 60\") == \"6 1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 60\\n0 0\\n1 20\\n3 21\\n5 0\\n19 30\\n23 40') == '6 1'\nassert solution('16 50\\n0 30\\n1 0\\n12 0\\n') == '0 0'\nassert solution('3 17\\n0 30\\n1 0\\n12 0') == '0 0'\n\"\"\""
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 7') == '1 4 7'\n\n\"\"\""
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 7\") == \"1 4 7\"\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 7\") == \"1 4 7\"\nassert solution(\"2 1 1\") == \"1 1\"\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 7\") == \"1 4 7\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 1 1\") == \"1 1 1\"\nassert solution(\"2 1 7\") == \"1 2 7\"\nassert solution(\"1 4 7\") == \"1 4 7\"\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 7\") == \"1 4 7\"\nassert solution(\"1 1\") == \"1 1\"\n\"\"\""
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '1 1'"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 1 7\") == \"1 4 7\"\nassert solution(\"2 1 1\") == \"1 1\"\n\n\n-----Test Input-----\n\n1 3 5 2 6 7 8 9 0 1 2\n9 4 6 5 3 2 1 8 7 0 1\n3 4 1 7\n4 1 7\n5 1 7\n6 1 7\n7 1 7\n8 1 7\n9 1 7\n0 1 7\n1 1\n1 1\n2 1\n3 1\n1 2\n1 1\n1 1\n1 1\n\n-----Test Output-----\n\n1 3 5 2 6 7 8 9 0 1 2\n9 4 6 5 3 2 1 8 7 0 1\n1 3 5 7 2 6 9 4 8 1 0 1\n4 1 7\n5 1 7\n6 1 7\n7 1 7\n8 1 7\n9 1 7\n0 1 7\n1 1\n1 1\n2 1\n3 1\n1 2\n1 1\n1 1\n1 1\n\"\"\""
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1 1'\nassert solution('1 2') == '1 2'\nassert solution('1 3') == '1 3'\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 7\") == \"1 4 7\"\n\nimport collections\nfrom typing import *\n\nimport sys"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2\\n1\") == \"13\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(8) == 13\nassert solution(5) == 13\nassert solution(1) == 13\nassert solution(2) == 13\nassert solution(3) == 13\n"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('82195') == 13\n\n-----"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"82195\") == 13\n"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8219564723\") == 13\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nl = list(sys.stdin.readline())\nl1 = sys.stdin.readline()\nl2 = sys.stdin.readline()\n\nc = 0\nfor i in range(n):\n    if l1[i]!= l[i]:\n        c += 1\n        l[i] = l1[i]\nprint(c)"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"82195\") == \"13\"\n\nassert solution(\"64723\") == \"3\"\n\n\n\n----"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('82195') == 13\nassert solution('64723') == 13\nassert solution('123456789') == 1\nassert solution('123876') == 5\nassert solution('1238766') == 8\n"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"82195\") == 13\n\"\"\"\n\nimport math"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('32') == '3'\nassert solution('88') == '0'\nassert solution('881') == '1'\nassert solution('8899') == '2'\nassert solution('98899') == '3'\n"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"82695\") == 13\nassert solution(\"567\") == 3\nassert solution(\"64723\") == 13\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import permutations, accumulate"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '2 1 4 3'\nassert solution('5') == '2 1 4 3'\nassert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1 3 2\"\nassert solution(\"5\") == \"1 3 2 4 5\"\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == '1 2'\nassert solution(\"3\") == '1 2 3'\nassert solution(\"4\") == '1 2 3 4'\nassert solution(\"5\") == '1 2 3 4 5'\n\nassert solution(\"5\") == '1 2 3 4 5'\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n\") == \"-1\"\nassert solution(\"2\\n\") == \"2 1\"\nassert solution(\"4\\n\") == \"2 1 4 3\"\nassert solution(\"20\\n\") == \"2 1 4 3 19 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == '2 1 4 3'\nassert solution(\"5\") == '2 1 3 4 5'\nassert solution(\"1\") == '1'\nassert solution(\"2\") == '2 1'\nassert solution(\"3\") == '1 2 3'\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2 1 4 3\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"2 1 4 3\"\nassert solution(\"1\") == \"-1\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"3\") == \"2 1 3\"\nassert solution(\"4\") == \"2 1 4 3\"\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '2 1 4 3'\n\"\"\""
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '-1'\nassert solution('3') == '2 1 3'\nassert solution('4') == '2 1 4 3'\nassert solution('2') == '1 2'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"2 1 4 3\"\n\"\"\"\n\nn = int(stdin.read())"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('12') == '1 2\\n1 3\\n2 3'\nassert solution('ab') == '1 2\\n1 3'\nassert solution('abc') == '1 2\\n1 3\\n2 3'\nassert solution('*aba') == '1 2\\n1 3'\n"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 3 4\\n*aba\\na*ab\\nba*b\\nabb*') == '1\\n4 1'\nassert solution('4\\n2 3 4\\n*abc\\na*ab\\nba*b\\ncbb*') == '-1'\n\n\nimport unittest\nclass TestPart1(unittest.TestCase):\n    def test_sample_1(self):\n        self.assertEqual(solution('4\\n2 3 4\\n*aba\\na*ab\\nba*b\\nabb*'), '1\\n4 1')\n\n    def test_sample_2(self):\n        self.assertEqual(solution('4\\n2 3 4\\n*abc\\na*ab\\nba*b\\ncbb*'), '-1')\n\n    def test_sample_3(self):\n        self.assertEqual(solution('4\\n1 2 3\\n*aab\\na*aba\\n*aba\\n*aaa'), '2\\n3 1\\n3 2')\n\n    def test_sample_4(self):\n        self."
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 4\\n*aba\\na*ab\\nba*b\\nabb*') == '1\\n4 1'\nassert solution('4\\n2 3 4\\n*abc\\na*ab\\nba*b\\ncbb*') == '-1'\n"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\\n*aba\\na*ab\\nba*b\\nabb*\") == \"1\\n4 1\"\nassert solution(\"4 2 3\\n*abc\\na*ab\\nba*b\\ncbb*\") == \"-1\"\nassert solution(\"4 2 3\\n*abc\\na*ab\\nba*b\\nbb*\") == \"-1\"\nassert solution(\"4 2 3\\n*a*\\na*ab\\nba*b\\nbb*\") == \"-1\"\nassert solution(\"4 2 3\\n*a*\\na*ab\\n*ba\\nbb*\") == \"-1\"\n"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3\\n*aba\\na*ab\\nba*b\\nabb*\") == \"1\\n4 1\"\nassert solution(\"4 2 3\\n*abc\\na*ab\\nba*b\\ncbb*\") == \"-1\""
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 4\\n*aba\\na*ab\\nba*b\\nabb*\") == \"1\\n4 1\"\n"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n*aba\\na*ab\\nba*b\\nabb*\") == \"1\\n4 1\"\nassert solution(\"4\\n*abc\\na*ab\\nba*b\\ncbb*\") == \"-1\""
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 4\\n*aba\\na*ab\\nba*b\\nabb*\") == \"1\\n4 1\"\nassert solution(\"4\\n2 3 4\\n*abc\\na*ab\\nba*b\\ncbb*\") == \"-1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 4\\n*aba\\na*ab\\nba*b\\nabb*\") == \"1\\n4 1\"\nassert solution(\"4\\n2 3 4\\n*abc\\na*ab\\nba*b\\ncbb*\") == \"-1\"\n\n\n\n\"\"\""
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3\\n*aba\\na*ab\\nba*b\\nabb*\") == \"1\\n4 1\"\nassert solution(\"4 3 4\\n*aba\\na*ab\\nba*b\\nabb*\") == \"1\"\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(int(input()))\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\") == \"1\"\nassert solution(\"3 6\\n1 1 1\") == \"2\"\nassert solution(\"3 1\\n1 0 1\") == \"0\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 6\") == \"2\"\nassert solution(\"3 1\") == \"0\"\nprint(\"All tests passed.\")"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 6') == '2'\nassert solution('1 1') == '0'\nassert solution('3 1') == '0'\nassert solution('4 5') == '4'\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7') == '3'\nassert solution('3 1') == '0'\nassert solution('3 5') == '0'\n\"\"\""
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == '0'\nassert solution('6 6') == '1'\nassert solution('100 100') == '1'\nassert solution('1 1000000000') == '1'\nassert solution('100 1 0') == '1'\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 1\\n') == '1'\nassert solution('3 6\\n1 1 1\\n') == '2'\nassert solution('3 1\\n1 0 1\\n') == '0'\n\"\"\"\n\nimport sys\n\nn, k = [int(s) for s in sys.stdin.readline().strip().split()]\na = [int(s) for s in sys.stdin.readline().strip().split()]\n\nbest = 0\nfor x in range(n):\n    if a[x] >= k:\n        best = x\n        break\n\nprint(best)\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6') == '2'\nassert solution('2 2') == '1'\nassert solution('3 6') == '2'\nassert solution('1 1') == '0'\nassert solution('1 1 1') == '0'\n\n'''"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 1\n1 0 1''') == '0'\nassert solution('''2 6\n1 1 1''') == '2'\nassert solution('''5 2\n5 5 5 5 5''') == '4'\nassert solution('''1 2\n1 2''') == '1'\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 6\") == \"2\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 1 1\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        "
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2\\n3 4') == '1'\nassert solution('5 2\\n1 4\\n5 2') == '2'\nassert solution('3 2\\n3 1\\n3 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 4\\n5 2\") == '2'\nassert solution(\"3 3\\n1 2\\n2 3\\n1 3\") == '0'\n\"\"\"\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n3 1\\n3 2\") == \"1\"\nassert solution(\"5 2\\n1 4\\n5 2\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 4\\n5 2') == '2'\nassert solution('3 3\\n1 2\\n2 3\\n1 3') == '0'\nassert solution('3 2\\n3 1\\n3 2') == '1'\n\"\"\"\n\nimport sys\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 4\\n5 2\") == \"2\"\nassert solution(\"3 3\\n1 2\\n2 3\\n1 3\") == \"0\"\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 2\n1 4\n5 2''') == '2'\n\nassert solution('''3 2\n3 1\n3 2\n''') == '0'\n\nassert solution('''3 3\n1 2\n2 3\n1 3\n''') == '1'\n\nassert solution('''5 2\n1 4\n5 2\n''') == '2'\n\nassert solution('''3 2\n3 1\n3 2\n''') == '1'"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n5\") == \"4\"\nassert solution(\"2\\n2\\n3\\n3\\n3\\n3\\n4\\n4\\n5\") == \"5\"\nassert solution(\"3\\n1\\n2\\n3\\n4\\n5\") == \"0\"\nassert solution(\"3\\n1\\n3\\n2\\n5\") == \"1\"\nassert solution(\"3\\n1\\n2\\n3\\n4\\n4\\n4\\n5\") == \"1\"\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 4\\n5 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 4\") == \"2\"\nassert solution(\"3 2\\n3 1\\n3 2\") == \"0\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"1\""
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\\n3 4\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 2\\n1 3\\n2 3\") == \"1\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(100010)"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_stdin) == test_stdout\nassert solution(input) == output\n\n\n'''"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == \"Infinite\"\nassert solution('5\\n1 2 3 4 5') == \"Finite\"\nassert solution('6\\n1 2 3 4 5 6') == \"Infinite\"\nassert solution('2\\n1 2') == \"Finite\"\nassert solution('2\\n2 2') == \"Finite\"\n"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 3') == 'Finite'\nassert solution('3 1 2') == 'Infinite'\nassert solution('3 2 3') == 'Finite'\nassert solution('3 3 3') == 'Finite'\nassert solution('3 1 3') == 'Finite'\n"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == 'Finite'\nassert solution('3\\n1 2 1') == 'Infinite'\nassert solution('2\\n1 2') == 'Finite'\nassert solution('3\\n1 2 2') == 'Infinite'\n\nassert solution('3\\n1 2 3') == 'Finite'\n"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == 'Finite'\nassert solution(3, [1, 2, 3]) == 'Finite'\nassert solution(3, [1, 2, 1]) == 'Infinite'\nassert solution(3, [1, 3, 2]) == 'Finite'\nassert solution(3, [2, 1, 3]) == 'Finite'\n"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == 'Finite'\nassert solution('3\\n1 1 3') == 'Infinite'\n\"\"\""
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 1 3\") == \"Finite\\n7\"\nassert solution(\"2\\n2 1 3\") == \"Infinite\"\n\n\"\"\""
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n2 1 3''') == 'Finite'\nassert solution('''3\n2 1 3''') == 'Finite'\nassert solution('''3\n1 2 3''') == 'Infinite'\nassert solution('''3\n1 2 2''') == 'Infinite'\nassert solution('''3\n1 2 3\n1 3 2''') == 'Infinite'\n"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == 'Finite'\nassert solution('3\\n1 1 3') == 'Infinite'\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split(' ')]\ns = 0\n\nfor i in range(n):\n    s += abs(i - (n - 1))"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == 'Finite'\nassert solution(\"3\\n1 1 3\") == 'Infinite'\nassert solution(\"3\\n2 1 3\") == 'Finite'\n\"\"\""
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1 1 2 2 3 2 5') == '1 2 5 8'\nassert solution('7\\n1 1 2 3 4 3') == '1 3 7'\nassert solution('6\\n1 1 2 3 4 5') == '1 2 3 4 5 6'\n\n\"\"\"\n"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 1 2 2 3 2 5\\n') == '1 2 5 8'\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom typing import Deque, List\n\nn = int(input())\n\nlinks = defaultdict(set)\nfor _ in range(n - 1):\n    first, second = map(int, input().split())\n    links[first].add(second)\n    links[second].add(first)\n\nparents = {}\nq = deque()\nq.append(1)\nwhile len(q) > 0:\n    node = q.popleft()\n    parents[node] = True\n    for child in links[node]:\n        if child not in parents:\n            q.append(child)\n\nfor node in parents:\n    if node in links:\n        print(node, end=' ')\n        for child in links[node]:\n            if child not in parents:\n                print(child, end=' ')\n        print()\n"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 2') == '1 2'\nassert solution('1 1 2 2 3') == '1 2 5 8'\n"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n1 1 2 2 3 2 5') == '1 2 5 8'\nassert solution('6\\n1 2 3 4 5') == '1 2 3 4 5 6'\nassert solution('7\\n1 1 2 3 4 3') == '1 3 7'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('20\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'\n"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n1 1 2 2 3 2 5') == '1 2 5 8'\nassert solution('7\\n1 1 2 3 4 3') == '1 3 7'\nassert solution('6\\n1 1 2 3 4 5') == '1 2 3 4 5 6'\n\"\"\""
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 2 3') == '1 2 3'\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\n\nmy_list = list(map(int, input().split()))\n\ngraph = [[] for _ in range(n)]\nfor i, j in enumerate(my_list[:-1]):\n    graph[i+1].append(j)\n\nstart = 1\n\nq = deque([start])\nvisited = set([start])\n\nwhile q:\n    c_vertex = q.popleft()\n    for i in graph[c_vertex]:\n        if i not in visited:\n            visited.add(i)\n            q.append(i)\nprint(*visited)"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 1 2 2 3 2 5\") == \"1 2 5\"\nassert solution(\"6\\n1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"7\\n1 1 2 3 4 3\") == \"1 3 7\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\np = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == expected_output\nprint(solution(input()))\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n1 1 2 2 3 2 5\\n') == '1 2 5 8\\n'\n\"\"\"\nimport sys"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 3 4 5\\n\") == '1 2 3 4 5 6'\nassert solution(\"7\\n1 1 2 3 4 3\\n\") == '1 3 7'\nassert solution(\"8\\n1 2 3 4 5 6\\n\") == '1 2 5 8'\n\"\"\"\n\nn = int(input())\np = list(map(int, input().split()))\ncache = {}\n\nfor i in range(n):\n    cache[p[i]] = i"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '56'\nassert solution('10') == '30052700'\n\"\"\"\n\nimport sys\n\nclass MyClass:\n    def __init__(self, n):\n        self.n = n\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 9\nassert solution(4) == 56\nassert solution(5) == 30052700\n\"\"\""
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"56\"\nassert solution(\"10\") == \"30052700\"\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '56'\nassert solution('10') == '30052700'\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '56'\nassert solution('10') == '30052700'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 9\nassert solution(\"4\") == 56\nassert solution(\"10\") == 30052700\n\n\n\n-----\n\n### take 0.5 second to come up with a solution"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"56\"\nassert solution(\"10\") == \"30052700\"\nassert solution(\"4\") == \"56\"\nassert solution(\"4\") == \"56\"\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"56\"\nassert solution(\"10\") == \"300527\"\n\n\"\"\"\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"56\"\nassert solution(\"10\") == \"30052700\"\nprint(\"You are ready for the tests!\")\n\n\n\n\"\"\"\nimport sys\nimport math\nimport cmath"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"56\"\nassert solution(\"10\") == \"30052700\"\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 2 2 3') == '2'\nassert solution('7 3 4 4 4 3 3') == '2'\nassert solution('1 3 5') == '3'\nassert solution('1000') == '1'\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 3 2 2 3\") == \"2\"\nassert solution(\"7\\n3 3 4 4 4 3 3\") == \"2\"\nassert solution(\"1\\n1000\") == \"1\"\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 4 4 4 3 3\") == \"2\"\nassert solution(\"1 3 5\") == \"3\"\nassert solution(\"1000\") == \"1\"\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2 2 3') == 2\nassert solution('3 3 4 4 4 3 3') == 2\nassert solution('1 3 5') == 3\n\"\"\"\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 6') == '3'\nassert solution('3 5 6 1') == '3'\nassert solution('1 3 5') == '3'\nassert solution('5 1') == '1'\nassert solution('10 9 8 7 6 5 4 3 2 1') == '10'\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2 2 3\") == \"2\"\nassert solution(\"7 3 3 4 4 4 3 3\") == \"2\"\nassert solution(\"1 3 5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 3 2 2 3\") == 2\nassert solution(\"7\\n3 3 4 4 4 3 3\") == 2\nassert solution(\"3\\n1 3 5\") == 3\nassert solution(\"1\\n1000\") == 1\nassert solution(\"1\\n1000\\n1\\n1\\n1\\n1\\n1\") == 1\n\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\nlst = list(map(int, input().split()))\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_stdin) == test_solution\nprint(solution(stdin))\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3 3 4 4 4 3 3\") == \"2\\n\"\nassert solution(\"1\\n1000\") == \"1\\n\"\nassert solution(\"7\\n3 3 4 4 4 3 3\") == \"2\\n\"\nassert solution(\"1\\n1000\") == \"1\\n\"\nassert solution(\"5\\n4 3 2 2 3\") == \"2\\n\"\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4 3 2 2 3') == '2'\nassert solution('7 4 3 2 2 3 3') == '2'\nassert solution('3 4 5') == '3'\nassert solution('1 1000') == '1'\n\"\"\"\n\nn = int(input())\nlst = [int(i) for i in input().split()]\n\ni = 0\n\nwhile i < len(lst) - 1:\n    if lst[i] == lst[i + 1]:\n        lst[i] += 1\n        del lst[i + 1]\n    else:\n        i += 1\n\nprint(len(lst))"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"winlose???winl???w??\", \"win\") == 5\nassert solution(\"glo?yto?e??an?\", \"or\") == 3\nassert solution(\"??c?????\", \"abcab\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"winlose???winl???w??\") == \"winlosewinwinlwinwin\"\nassert solution(\"glo?yto?e??an? or\") == \"glorytoreorand\"\nassert solution(\"??c?????\") == \"abcab\"\n\n\n\"\"\"\n\ns = stdin\nt = stdin\n"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"winlose???winl???w??\") == \"winlosewinwinlwinwin\"\nassert solution(\"glo?yto?e??an? \") == \"or\"\nassert solution(\"??c????? \") == \"abcab\""
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"winlose???winl???w??\") == \"winlosewinwinlwinwin\"\nassert solution(\"glo?yto?e??an?\") == \"glorytoreorand\"\nassert solution(\"??c?????\") == \"abcabcab\"\nassert solution(\"??c???\") == \"abc\"\nassert solution(\"??c???\") == \"abc\"\n\n\"\"\"\n\n\nfrom typing import List, Dict, Tuple\n"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('winlose???winl???w??') == '5'\nassert solution('glo?yto?e??an?') == '3'\nassert solution('??c?????') == 'abcab'\n"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('winlose???winl???w??') == 5\nassert solution('glo?yto?e??an?') == 3\nassert solution('??c?????') == 2\n"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"glo?yto?e??an?\") == \"3\"\nassert solution(\"??c?????\") == \"2\"\nassert solution(\"winlose???winl???w??\") == \"5\"\n\n\"\"\"\n\nimport re\nimport collections"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == output\n\nprint(solution(stdin))\n\"\"\"\n\nimport re"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"winlose???winl???w??\") == 5\nassert solution(\"glo?yto?e??an? \") == 3\nassert solution(\"??c????? \") == 2\n"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"winlose???winl???w??\"\n\"win\"\n) == 5\nassert solution(\n\"glo?yto?e??an?\nor\"\n) == 3\nassert solution(\n\"??c?????\nabcab\"\n) == 2"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3''') == '3'\nassert solution('''1''') == '1'\nassert solution('''2''') == '2'\nassert solution('''2 4''') == '2'\nassert solution('''1 2''') == '2'\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"1 5\") == \"0\"\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1\") == \"3\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"1\\n3 5\") == \"3\"\nassert solution(\"2\\n3 5\") == \"3\"\nassert solution(\"2\\n2 4\") == \"2\"\n\"\"\"\nimport math"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == 3\nassert solution(\"1 1\") == 3\nassert solution(\"4 4\") == 1\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n1 2 3\\n1 2 3\") == \"3\"\n\nassert solution(\"2 4\\n1 3\\n1 4\") == \"2\"\n\nassert solution(\"4 8\\n1 2 3 4\\n1 2 3 4\") == \"1\"\n\nassert solution(\"1 2\\n2 1\") == \"0\"\n\nassert solution(\"4 5\\n1 3 5\\n2 3 4\") == \"4\""
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1\") == \"3\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"2\\n3 5\") == \"3\"\nassert solution(\"2\\n4 5\") == \"2\"\n\"\"\"\n\n\nfrom itertools import combinations"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 3 5\") == \"3\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"3 2 1\") == \"2\"\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n1') == '3'\nassert solution('2\\n1 2') == '2'\nassert solution('2\\n3 5') == '3'\nassert solution('1\\n2') == '2'\nassert solution('2\\n2') == '1'\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n1') == '3'\nassert solution('2\\n1') == '2'\nassert solution('1\\n2') == '1'\nassert solution('2\\n2') == '1'\nassert solution('1\\n3') == '1'\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1\\n1 2 2\") == \"8\"\nassert solution(\"1 1 1\\n1 2 2\") == \"8\"\nassert solution(\"1 3 5\\n6 2 9\") == \"3264\"\nassert solution(\"6 2 9\\n1 1 1\") == \"813023575\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == \"8\"\nassert solution(\"1 2 2\") == \"63\"\n\"\"\"\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '8'\nassert solution('1 2 2') == '63'\n\"\"\"\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"8\"\nassert solution(\"1 2 2\") == \"63\"\nassert solution(\"1 3 5\") == \"3264\"\nassert solution(\"6 2 9\") == \"813023575\"\nassert solution(\"5 1 3\") == \"71\"\n\"\"\""
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == '8'\nassert solution(\"1 2 2\") == '63'\nassert solution(\"1 3 5\") == '3264'\n\"\"\"\n\na, b, c = map(int, input().split())\n\nMOD = 998244353\n\nans = 1\nfor i in range(a + b + c):\n    ans *= i + 1\n    ans %= MOD\n\nfor i in range(a):\n    ans *= i + 1\n    ans %= MOD\n\nfor i in range(b):\n    ans *= i + 1\n    ans %= MOD\n\nprint(ans)\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == \"8\"\nassert solution(\"1 2 2\") == \"63\"\nassert solution(\"1 3 5\") == \"3264\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"8\"\nassert solution(\"1 2 2\") == \"63\"\nassert solution(\"1 3 5\") == \"3264\"\n\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"8\"\nassert solution(\"1 2 2\") == \"63\"\nassert solution(\"1 3 5\") == \"3264\"\n\"\"\"\n\nfrom itertools import product\n\nn_red, n_blue, n_purple = map(int, input().split())\nbridge = {\n    'r': [list(range(n_red)), list(range(n_blue))],\n    'b': [list(range(n_blue)), list(range(n_purple))],\n    'p': [list(range(n_purple)), list(range(n_red))]\n}"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\") == \"8\"\nassert solution(\"1 2 2\") == \"63\"\nassert solution(\"1 3 5\") == \"3264\"\nassert solution(\"6 2 9\") == \"813023575\"\n\"\"\"\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"8\"\nassert solution(\"1 2 2\") == \"63\"\nassert solution(\"1 3 5\") == \"3264\"\nassert solution(\"6 2 9\") == \"813023575\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n3 2\") == \"3\"\nassert solution(\"3 1\\n2 3\") == \"11\"\nassert solution(\"4 3\\n3 4\\n1 2\\n2 3\") == \"23\"\nassert solution(\"4 4\\n4 3\\n3 4\\n3 2\\n1 3\") == \"123\"\nassert solution(\"4 4\\n4 3\\n3 4\\n3 2\\n4 1\\n1 2\") == \"1412\"\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2\n2 3\n3 1\n''') == 11\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n3 2') == '3'\nassert solution('3 2\\n1 2') == '8'\nassert solution('1 2\\n1 3') == '5'\n\"\"\"\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n3 2\") == '11'\n\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom functools import reduce\nfrom operator import or_\nfrom typing import Dict, List, Tuple\n\nfrom icecream import ic\n\nfrom main import Solution\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == 3\nassert solution(\"3 2\") == 11\n\"\"\"\n\nfrom typing import List, Tuple, Dict, Set\n\n\nclass Graph:\n    def __init__(self, vertices: List[int]):\n        self.vertices = set(vertices)\n        self.edges: Dict[int, Set[int]] = {}\n        for vertex in self.vertices:\n            self.edges[vertex] = set()\n\n    def add_edge(self, v: int, w: int) -> None:\n        if v!= w and v in self.vertices:\n            self.edges[v].add(w)\n            self.edges[w].add(v)\n\n\nclass Solution:\n    def solve(self, G: Graph) -> int:\n        pass\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\\n3 2\") == \"3\"\n\"\"\"\n\nfrom typing import List\nimport sys"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n3 2\") == \"3\"\nassert solution(\"3 1\\n3 2\") == \"11\"\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2\") == \"3\"\nassert solution(\"3\\n1 2\\n3 2\") == \"11\"\n\"\"\"\nimport sys\n\ninputs = []\nfor line in sys.stdin:\n    inputs.append(line)\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n3 2\") == \"3\"\nassert solution(\"3 10\\n2 3\\n3 3\") == \"22\"\nassert solution(\"3 10\\n2 3\\n3 3\") == \"22\"\n\"\"\"\nimport functools\n\nimport collections\nimport sys\nimport math\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1357997531') == '-1'\nassert solution('527') == '572'\nassert solution('4573') == '3574'\nassert solution('0') == '0'\n\n\"\"\""
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1357997531') == '-1'\nassert solution('4573') == '3574'\n"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"527\") == \"572\"\nassert solution(\"4573\") == \"3574\"\nassert solution(\"1357997531\") == \"-1\"\n\n\"\"\"\n\nfrom typing import Union"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"527\") == \"572\"\nassert solution(\"4573\") == \"3574\"\n\nassert solution(\"1357997531\") == \"-1\"\n\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('527') == '572'\nassert solution('4573') == '3574'\nassert solution('1357997531') == '-1'\n"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('527') == '572'\n\"\"\""
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1357997531\") == \"3574\"\nassert solution(\"4573\") == \"3574\"\nassert solution(\"527\") == \"572\"\nassert solution(\"1357997531\") == \"3574\"\nassert solution(\"4573\") == \"3574\"\n\"\"\"\n\nfrom collections import Counter\nfrom math import factorial"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"527\") == \"572\"\nassert solution(\"4573\") == \"3574\"\nassert solution(\"1357997531\") == \"-1\""
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"527\") == \"572\"\nassert solution(\"4573\") == \"3574\"\nassert solution(\"1357997531\") == \"-1\""
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"527\") == \"572\"\nassert solution(\"4573\") == \"3574\"\nassert solution(\"1357997531\") == \"-1\"\n\"\"\"\n\nimport collections\nimport itertools\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"YES\"\nassert solution(\"3 1 0\") == \"NO\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nans = \"YES\" if a[0] == 0 else \"NO\"\nfor i in range(1, n):\n    if a[i] == 1:\n        ans = \"NO\"\nprint(ans)\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 0 0\") == \"YES\"\nassert solution(\"4\\n1 1 1 1\") == \"YES\"\nassert solution(\"3\\n1 0 0\") == \"NO\"\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 0 1\\n\") == 'YES'\nassert solution(\"3\\n1 0 0\\n\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 0 0\\n\") == \"YES\"\nassert solution(\"3\\n0 1 1\\n\") == \"NO\"\nassert solution(\"3\\n0 1 0\\n\") == \"YES\"\nassert solution(\"2\\n0 0\\n\") == \"YES\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1\") == \"YES\"\nassert solution(\"3 0 0\") == \"NO\"\n\"\"\"\n\nn = int(input())\n\nnums = [int(x) for x in input().split()]\n\nprint(\"YES\" if nums.count(1) == 1 else \"NO\")\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 0 0') == 'NO'\nassert solution('3\\n1 0 1') == 'YES'\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 0 0\") == \"NO\"\nassert solution(\"3\\n1 0 1\") == \"YES\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 0 0\") == \"YES\"\nassert solution(\"3\\n1 0 1\") == \"NO\"\n\"\"\"\n\nn = int(stdin.readline().rstrip())\n\nlst = list(map(int, stdin.readline().rstrip().split()))\n\nlst_set = set()\n\nlst_set.add(0)\n\nfor i in lst:\n    if i == 1:\n        lst_set.add(1)"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 0 0') == 'NO'\nassert solution('4\\n1 0 0 0') == 'YES'\n\"\"\""
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 0 0') == 'YES'\nassert solution('3\\n1 0 1') == 'NO'\nassert solution('3\\n0 0 1') == 'NO'\n"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 1 3\") == \"3\"\nassert solution(\"3 2 4 1\") == \"2\"\nassert solution(\"4 3 2 1\") == \"4 3\"\nassert solution(\"4 3 1 2\") == \"4 1 2 3\"\n\n\"\"\"\nfrom collections import Counter\n\n\nclass Solution:\n    def solution(self, stdin):\n        p = list(map(int, stdin.split(\"\\n\")[0].split()))\n        s = list(map(int, stdin.split(\"\\n\")[1].split()))\n        cache = {}\n\n        def f(i, j, p, s):\n            if p[i] == s[j] and p[j] == s[i]:\n                return 0\n            elif p[i] == s[j] or p[j] == s[i]:\n                return 1\n            else:\n                return f(i - 1, j, p, s) + 1\n\n        def f2(i, p, s):\n            if i == 0:\n                return 0\n\n            if (i, p, s) in cache:\n                return cache[(i, p, s)]\n\n            r = f(i - 1, i - 1, p, s) + 1\n            for j in range(i - 1, len(s)):\n                if j == i - 1 or f(i - 1, j, p, s) == r - 1:\n                    cache[(i, p, s)] = min(r, f2(j, p, s))\n                    return cache[(i, p, s)]\n\n        return f2(len(p), p, s)\n"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n4 2 1 3\n3 2 4 1''') == 3\n\nassert solution('''4\n4 2 1 3\n3 2 4 1''') == 2\n\nassert solution('''4\n4 2 1 3\n4 2 1 3''') == 0\n\nassert solution('''4\n4 2 1 3\n4 2 3 1''') == 0\n\nassert solution('''4\n4 2 1 3\n4 2 3 1''') == 1"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 1 3\\n3 2 4 1') == '3'\n"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 1 3') == '3'\nassert solution('3 2 4 1') == '2'\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\n\"\"\"\n\u0412\u044b\u0431\u043e\u0440 2: \u0414\u0435\u0440\u0435\u0432\u044c\u044f. \u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u0441\u0430\u0439\u0442\u0430, \u043d\u0435 \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c\nhttps://geekbrains.ru/posts/kolokvij-ot-dvij-popitok-k-lugvih-dvij-zadach/\n\u0417\u0434\u0435\u0441\u044c \u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438, \u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \n\u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043c\u044b \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0435\u043c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044e \u0432\u043d\u0438\u0437, \u0442\u0435\u043c \u0441\u043b\u043e\u0436\u043d\u0435\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u043d\u044f\u0442\u044c \u0432\u0432\u0435\u0440\u0445, \u0442\u0430\u043a \u0447\u0442\u043e \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \n\u0434\u0430 \u0438 \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u043a\u043e\u0434\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0448\u0430\u0433\u043e\u0432. \n\"\"\""
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1 3\") == \"3\"\nassert solution(\"3 2 4 1\") == \"2\"\n"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 3\") == 3\n"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n4 2 1 3\n3 2 4 1\n''') == '3\n2\n4 3\n3 1'''"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 1 3\\n3 2 4 1') == '3\\n2\\n4 3'\n\"\"\"\n\n\nfrom collections import defaultdict\n\n\nclass DSU:\n    def __init__(self, N):\n        self.p = list(range(N))\n        self.r = [0] * N\n\n    def find(self, x):\n        if self.p[x]!= x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n\n    def union(self, x, y):\n        xr, yr = self.find(x), self.find(y)\n        if xr == yr:\n            return False\n        elif self.r[xr] > self.r[yr]:\n            xr, yr = yr, xr\n        self.p[yr] = xr\n        self.r[xr] += self.r[yr]\n        self.r[yr] = 0\n        return True\n"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 1 3') == '3'\nassert solution('3 2 4 1') == '2'\n\n\"\"\"\n\n\"\"\"\nsolution-3\n\nYou can use the idea of dynamic programming, but not using additional memory, like in solution-2.\n\nInstead, you can use the following strategy:\n\n1. For each swap operation we count the number of coins, which are needed to get the permutation s. We maintain a table of size n\u00d7n, and each cell of the table contains the minimum number of coins needed to get permutation s from permutation p on the current swap step.\n\n2. The table is filled bottom-up, we make the last swap operation.\n\n3. The last swap operation is the last line of the table, and each line of the table contains the minimum number of coins needed to get permutation s from permutation p on the current swap step.\n\nComplexity:\nO(n^3) time, O(n^2) space.\n\n\"\"\"\n\nn = int(input())\np = list(map(int, input().split()))\ns = list(map(int, input().split()))\n\ndp = [[float('inf')] * n for _ in range(n)]\n\nfor step in range(n):\n    for i in range(n):\n        j = (i + step) % n\n        dp[i][j] = dp[i][j - 1] + abs(p[j] - p[i])\n\nprint(min(dp[i][j] for i in range(n) for j in range(n)))"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"####\\n....\\n####\\n....\") == \"YES\"\nassert solution(\"#####\\n....\\n#####\\n....\") == \"NO\"\n\n'''\n"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"#..#\\n####\\n....\") == \"YES\"\nassert solution(\"####\\n....\\n####\\n....\") == \"NO\"\nassert solution(\"...#\\n...#\\n....\") == \"YES\"\nassert solution(\"####\\n....\\n####\\n....\") == \"YES\"\nassert solution(\"####\\n....\\n...#\\n....\") == \"NO\"\n"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".#..\") == \"YES\"\nassert solution(\".#.#\") == \"YES\"\nassert solution(\".####\") == \"YES\"\nassert solution(\"####\") == \"YES\"\nassert solution(\"####.\") == \"YES\"\n"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"####\\n#.#\\n#.#\\n####\") == \"YES\"\nassert solution(\"####\\n#.#\\n#.#\\n###\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"####\\n....\\n####\") == 'YES'\nassert solution(\"####\\n....\\n####\\n....\") == 'NO'\nassert solution(\"####\\n#..#\\n####\\n....\") == 'NO'\nassert solution(\"####\\n#..#\\n####\\n....\\n....\") == 'YES'\nassert solution(\"####\\n#..#\\n#..#\\n....\\n....\") == 'YES'\n"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".#..\\n####\\n....\") == \"YES\"\nassert solution(\"####\\n....\\n####\\n....\") == \"NO\"\n\"\"\""
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"####\\n.#..\\n####\\n....\") == \"YES\"\nassert solution(\"####\\n....\\n####\\n....\") == \"NO\"\nassert solution(\"###\\n.##\\n###\\n###\") == \"NO\"\nassert solution(\"###\\n##.\\n###\\n###\") == \"YES\"\nassert solution(\"##.\\n###\\n.#.\\n###\\n###\") == \"YES\"\n"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"#.#\") == \"YES\"\nassert solution(\"#.#\") == \"YES\"\nassert solution(\"####\") == \"NO\"\nassert solution(\"#.#.#\") == \"YES\"\nassert solution(\"#.#.#\") == \"YES\"\n"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".#..\") == \"YES\"\nassert solution(\".#..\") == \"YES\"\nassert solution(\"....\") == \"NO\"\nassert solution(\"#.#.\") == \"YES\"\nassert solution(\"....\") == \"NO\"\n"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"####\\n#..#\\n#..#\") == 'YES'\nassert solution(\"####\\n....\\n....\") == 'NO'\nassert solution(\"####\\n....\\n#..#\") == 'NO'\nassert solution(\"####\\n#..#\\n#..#\") == 'YES'\nassert solution(\"####\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\\n#..#\") == 'YES'\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 6 1\\n1 2 3\\n') == '2'\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 25 35 10\\n10 10 20 10 20\") == 6\nassert solution(\"4 40 50 10\\n10 10 20 10 20\") == 2\nassert solution(\"5 25 35 10\\n10 10 20 30 25\") == 2\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 6 1\\n1 2 3\\n') == '2'\nassert solution('4 40 50 10\\n10 10 20 10 20\\n') == '6'\nassert solution('5 25 35 10\\n10 10 20 10 20\\n') == '6'\nassert solution('4 100 100 1\\n100 100 100 100\\n') == '3'\nassert solution('3 100 200 1\\n1 200\\n') == '2'\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 6 1\\n1 2 3\\n') == 2\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 5 6 1''') == '2'\nassert solution('''4 40 50 10''') == '2'\nassert solution('''5 25 35 10''') == '6'\nassert solution('''5 25 35 10''') == '6'\nassert solution('''4 20 10 10''') == '6'\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 40 50 10\\n10 20 30 25') == '2'\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 6 1\\n1 2 3') == '2'\nassert solution('4 40 50 10\\n10 10 20 10 20') == '6'\nassert solution('5 25 35 10\\n10 10 20 10 20') == '6'\nassert solution('5 25 35 10\\n10 10 20 10 20') == '6'\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 6 1\\n1 2 3') == '2'\nassert solution('5 25 35 10\\n10 10 20 10 20') == '6'\nassert solution('5 25 35 10\\n10 10 20 10 20') == '6'\nassert solution('4 40 50 10\\n10 10 20 10 20') == '2'\n\"\"\"\n\nn, l, r, x = map(int, input().split(' '))\nc = list(map(int, input().split(' ')))\nc.sort()\n\nans = 0\nleft, right = 0, 0\nfor i in range(n):\n    while right < n and c[right] - c[i] <= x:\n        right += 1\n    ans += (right - left)\n    left = right\n\nwhile right < n:\n    right += 1\nans += (right - left)\nprint(ans)"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 6 1\\n1 2 3\\n') == '2'\nassert solution('4 40 50 10\\n10 20 30 25\\n') == '2'\nassert solution('5 25 35 10\\n10 10 20 10 20\\n') == '6'\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 6 1\") == \"2\"\nassert solution(\"40 50 20 10 20\") == \"6\"\nassert solution(\"25 35 10 10\") == \"6\"\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('WBWBW') == 'BWBWBW'\nassert solution('BBWBW') == 'BBWBWW'\nassert solution('WWBWBW') == 'WWBWBWW'\nassert solution('BWBWBW') == 'BWBWBW'\nassert solution('WWBWBB') == 'WWBWBB'\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"6 1\\nWBWBW\"\n) == \"BWBW\"\nassert solution(\n    \"7 3\\nBWBWBW\"\n) == \"WWWBWWW\"\nassert solution(\n    \"6 4\\nBWBWBW\"\n) == \"BWBWBW\"\nassert solution(\n    \"7 3\\nWWWBWW\"\n) == \"WWWBWWW\"\nassert solution(\n    \"7 4\\nWWWBWW\"\n) == \"WWWBWWW\"\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 1\nWBW''') == 'WBW'\n\nassert solution('''4 2\nWWB''') == 'WWB'\n\nassert solution('''7 3\nBWB''') == 'BWB'\n\nassert solution('''7 4\nWBB''') == 'WBB'\n\nassert solution('''6 4\nWWB''') == 'BWW'"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WBWBWW\") == \"WWWBWWW\"\nassert solution(\"BWBWBW\") == \"BWBWBW\"\n\"\"\""
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BWBWBW\") == \"BWBWBW\"\nassert solution(\"BWBBWW\") == \"BWBWBW\"\n\"\"\""
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BWBBWW\") == \"WWBWBWW\"\nassert solution(\"BWBWBW\") == \"BWBWBW\"\n\n-----\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WBWBWBW\") == \"WWBWBWW\"\nassert solution(\"BWBWBW\") == \"BWBWBW\"\nassert solution(\"BWBWBW\") == \"BWBWBW\"\nassert solution(\"BWBWBW\") == \"BWBWBW\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BWBWBW\") == \"WBWBWB\"\n\nassert solution(\"BWBBWW\") == \"WBBBWWW\"\n\nassert solution(\"BWBWBW\") == \"WBWBWB\"\n\nprint(\"Success\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BWBWBW\") == \"WBWBWB\"\nassert solution(\"BWBBWW\") == \"WBBBWWW\"\nassert solution(\"WBWBWBW\") == \"WWBWBWW\"\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BBBBBWBW\") == \"WBWBWBW\"\nassert solution(\"BWBWBWBW\") == \"BWBWBWW\"\nassert solution(\"WWBBBWBW\") == \"BWBWBWW\"\nassert solution(\"WWBBBBWBW\") == \"WWBBBBBW\"\nassert solution(\"BBBBBBBBW\") == \"BWBWBWWW\"\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7\") == \"5 2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 8\\n6 2 9 2 7 2 3\") == \"6 5\\n1 2 4 6 7\"\nassert solution(\"6 4\\n2 2 2 3 3 3\") == \"2 3\\n1 2 3\""
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\") == \"3 1\"\nassert solution(\"7 8\") == \"6 5\"\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 3 4\") == \"3 3\"\nassert solution(\"6 4\\n2 2 3 3 3 3\") == \"3 3\"\nassert solution(\"7 6\\n6 2 9 2 7 2 3\") == \"6 5\"\nassert solution(\"7 8\\n6 2 9 2 7 2 3\") == \"6 5\"\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 4\\n2 2 2 3 3 3') == '2 3\\n1 2 4 6 7'\nassert solution('7 8\\n6 2 9 2 7 2 3') == '6 5\\n1 2 4 6 7'\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\nfrom itertools import chain\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"6 4\\n2 2 2 3 3 3\") == '2 3\\n1 2 4 6 7'\nassert solution(\n\"6 7\\n2 2 9 2 7 2 3\") == '2 5\\n1 2 4 6 7'\n\"\"\"\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 8\\n6 2 9 2 7 2 3') == '6 5\\n1 2 4 6 7'\n\"\"\"\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 8\n6 2 9 2 7 2 3\n''') == '6 5', 'Test 1'\nassert solution('''\n7 8\n6 2 9 2 7 2 3\n''') == '6 5', 'Test 2'\nassert solution('''\n7 8\n1 2 2 3 3 3\n''') == '2 3', 'Test 3'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\nassert solution('7 8\\n6 2 9 2 7 2 3\\n') == '6 5', 'Test 1'\nassert solution('7 8\\n6 2 9 2 7 2 3\\n') == '6 5', 'Test 2'\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(input()).split()\n\nprint(solution(str(input())))\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 4\\n2 1 3 2\\n1 2\\n1 3\\n3 4') == '8'\nassert solution('0 3\\n1 2 3\\n1 2\\n2 3\\n3 4') == '3'\nassert solution('4 8\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4') == '41'"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n1 2\\n1 3\\n3 4\") == \"8\"\nassert solution(\"0 3\\n1 2 3\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\") == \"3\"\nassert solution(\"4 8\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\") == \"41\"\n\n\"\"\"\n\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n3 4\\n\") == \"8\"\nassert solution(\"0 3\\n1 2 3\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\\n\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"8\"\n\"\"\"\n\n\"\"\"\n\ubb38\uc81c \ud480\uc774 \uc544\uc774\ub514\uc5b4\n- \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\ub97c \uc904\uc774\uae30 \uc704\ud574\uc11c \ud2b8\ub9ac\ub97c \ubcf8\ub2e4\n- \ud2b8\ub9ac\ub97c \ucc3e\ub294 \uacfc\uc815\uc5d0\uc11c \ubcf8\ub2e4\n\"\"\""
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 3\\n1 2 3\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\") == \"41\"\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\\n') == '41'\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict\n\nsys.setrecursionlimit(100000)\n\nclass Tree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = defaultdict(list)\n\n    def insert(self, u, v):\n        self.tree[u].append(v)\n        self.tree[v].append(u)"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 4\\n2 1 3 2\\n1 2\\n1 3\\n3 4\") == \"8\"\nassert solution(\"0 3\\n1 2 3\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\\n\") == \"41\"\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"1 4\\n2 1 3 2\\n1 2\\n1 3\\n3 4\"\n) == \"8\"\nassert solution(\n    \"1 2\\n1 3\\n3 4\"\n) == \"3\"\nassert solution(\n    \"4 8\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\"\n) == \"41\"\n\n\"\"\"\n\nd, n = map(int, input().split())\na = list(map(int, input().split()))\nedges = [[int(j) for j in input().split()] for i in range(n - 1)]\ngraph = {}\nfor i in range(n):\n    graph[i] = []\nfor u, v in edges:\n    graph[u - 1].append(v - 1)\n    graph[v - 1].append(u - 1)\ncount = 0\nfor i in range(n):\n    start = i\n    queue = [start]\n    visited = set()\n    for j in range(d):\n        temp = []\n        for node in queue:\n            visited.add(node)\n            for child in graph[node]:\n                if child not in visited:\n                    temp.append(child)\n        queue = temp\n    if len(queue) == 0:\n        continue\n    count += (a[start] - a[queue[0]] + 1) * len(queue)\nprint(count % 1000000007)\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n1 2\\n3 4\\n2 1\\n1 3\\n3 5\\n3 4') == '8'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\nassert solution(\"-10 5\") == \"-15 0 0 15\"\n\n'''\n\n\nimport math\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 5') == '0 15 15 0'\n\nassert solution('-10 5') == '-15 0 0 15'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\nassert solution(\"-10 5\") == \"-15 0 0 15\"\n\n\"\"\"\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\nassert solution(\"-10 5\") == \"-15 0 0 15\"\n\"\"\"\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\nassert solution(\"-10 5\") == \"-15 0 0 15\"\n\n\"\"\"\n\nimport math\n\na, b = map(int, input().split())\n\nl = math.sqrt((a ** 2 + b ** 2) / 2)\n\nx1 = math.ceil(a / l) * l\ny1 = math.ceil(b / l) * l\n\nx2 = math.floor(a / l) * l\ny2 = math.floor(b / l) * l\n\nprint(int(x1), int(y1), int(x2), int(y2))\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10\") == \"0 15 15 0\"\n\n[Image]\nFigure to the second sample\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\nassert solution(\"-10 5\") == \"-15 0 0 15\"\nprint(\"Tests passed\")\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\nassert solution(\"-10 5\") == \"-15 0 0 15\"\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\n\nimport sys\nassert solution(sys.stdin.read()) == 0\n"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 7 8 3 8\") == \"3\"\n\"\"\"\nfrom math import ceil\n\nn = int(stdin.readline())\nt = [int(x) for x in stdin.readline().split()]\nt.sort()\nT = int(stdin.readline())\n\np, q = t[0], t[n - 1]\ni, j = 0, n - 1\n\nwhile i < j:\n    if t[i] + t[j] < T:\n        i += 1\n    elif t[i] + t[j] > T:\n        j -= 1\n    else:\n        i += 1\n        j -= 1\n\nprint(j + 1)\n"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 3 4 1\") == 3\nassert solution(\"4 4 5 2 4\") == 2\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\narr = list(map(int, input().split()))\nT = int(input())\n\nstdin = Counter(arr)\n\nans = 0\nfor key in stdin:\n    if stdin[key] > 0:\n        stdin[key] -= 1\n        ans += 1\n        if key <= T:\n            break\n\nprint(ans)\n"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 1 7 8 3 8\") == 3\nassert solution(\"1\\n1\") == 1\n\"\"\"\n"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n4 1 7 8 3 8\") == 3\nassert solution(\"6\\n8 3 5 7 1 8\") == 3\nassert solution(\"6\\n8 3 5 7 1 6\") == 2\nassert solution(\"6\\n8 3 5 7 1 7\") == 1\nassert solution(\"6\\n8 3 5 7 1 8\") == 0\n"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n4 1 7 8 3 8\") == 3\n"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 7 8 3 8\\n1\") == 3\nprint(solution(\"5 2 6 6 3 3\\n3\"))\n\n-----\n6\n5 2 6 6 3 3\n5\n\n-----\n4 1 7 8 3 8\n2\n\n-----\n4 1 7 8 3 8\n4\n\n-----\n4 1 7 8 3 8\n2\n\n-----\n4 1 7 8 3 8\n2\n\n-----\n5 2 6 6 3 3\n0\n\n-----\n5 2 6 6 3 3\n1\n\n-----\n5 2 6 6 3 3\n1\n\n-----\n5 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n0\n\n-----\n6 2 6 6 3 3\n1\n\n-----\n6 2"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 7 8 3 8\") == 3\n\"\"\""
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n6\n4 1 7 8 3 8\n1\n    '''\n) == 3\nassert solution(\n    '''\n6\n4 1 7 8 3 8\n5\n    '''\n) == 2\nassert solution(\n    '''\n6\n1 1 2 3 4 5\n5\n    '''\n) == 0\nassert solution(\n    '''\n6\n4 1 1 1 1 1\n5\n    '''\n) == 0\nassert solution(\n    '''\n6\n4 1 1 1 1 1\n1\n    '''\n) == 3\n"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 7 8 3 8\\n1') == '3'\n\"\"\"\n"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n2 9\\n5 3 13\") == \"YES\\n3 4 5\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\") == \"NO\"\n"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) in ({'YES', 'NO'})\nassert solution(a) == solution(b)"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n2 9\\n5 3 13\") == 'YES\\n3 4 5\\n6 7 8'\nassert solution(\"3 3\\n1 7 6\\n2 15 12\") == 'NO'\n\"\"\"\n\nimport sys\nimport re\n\nDEBUG = False\n"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 7 6\\n2 15 12\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n2 9\\n5 3 13\") == \"YES\\n3 4 5\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\") == \"NO\"\n\"\"\"\n\nfrom typing import List\nfrom itertools import zip_longest\n"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n2 9\\n5 3 13\\n') == 'YES\\n3 4 5\\n6 7 8'\nassert solution('3 3\\n1 7 6\\n2 15 12\\n') == 'NO'\nassert solution('1 1\\n1\\n1') == 'YES\\n2'\nassert solution('1 1\\n1\\n1') == 'YES\\n1'\nassert solution('1 1\\n1\\n1') == 'YES\\n1'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n2 9\\n5 3 13\") == \"YES\\n3 4 5\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\") == \"NO\"\nassert solution(\"2 3\\n2 9\\n5 3\\n13\\n14\") == \"NO\"\nprint(\"Passed!\")"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n2 9\\n5 3 13\") == \"YES\\n3 4 5\\n6 7 8\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\") == \"NO\""
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n2 9\\n5 3 13\") == \"YES\\n3 4 5\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\") == \"NO\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom operator import xor\nimport sys\n"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'2 3\\n2 9\\n5 3 13') == 'YES\\n3 4 5'\nassert solution(\n'3 3\\n1 7 6\\n2 15 12') == 'NO'"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n0\\n1\") == \"500000004\"\nassert solution(\"1 2\\n1\\n0\") == \"0\"\nassert solution(\"7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\") == \"230769233\"\n\n\n\"\"\""
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n1 2\n0\n1\n\"\"\"\n) == \"500000004\"\nassert solution(\n\"\"\"\n1 2\n1\n0\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n7 26\n0 15 12 9 13 0 14\n11 1 0 13 15 12 0\n\"\"\"\n) == \"230769233\"\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n1\\n0\") == \"500000004\"\nassert solution(\"7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\") == \"230769233\"\nassert solution(\"7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\") == \"230769233\"\n\n\"\"\"\n\nfrom sys import stdin\nfrom collections import Counter\nfrom fractions import gcd\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n0\\n1\") == \"500000004\"\nassert solution(\"1 2\\n1\\n0\") == \"0\"\nassert solution(\"7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\") == \"230769233\"\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(int(input()) % (10 ** 9 + 7))\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n0\\n1\\n\") == \"500000004\"\nassert solution(\"1 2\\n1\\n0\\n\") == \"0\"\nassert solution(\"7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\\n\") == \"230769233\"\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n0\\n1\") == \"500000004\"\nassert solution(\"1 2\\n1\\n0\") == \"0\"\nassert solution(\"7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\") == \"230769233\"\n\n\"\"\"\n\nfrom fractions import gcd\nimport sys\n\nn, m = tuple(map(int, sys.stdin.readline().split()))\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\ngcd_num = gcd(n, m)\nn, m = n // gcd_num, m // gcd_num\n\n\"\"\"\ncount = 0\nfor i in range(m):\n    if (a[0] * m + i) % (n + 1) == b[0] % (n + 1):\n        count += 1\n        print(count)\n        break\n\"\"\""
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n1\\n0\") == \"500000004\"\nassert solution(\"1 2\\n1\\n0\") == \"0\"\nassert solution(\"7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\") == \"230769233\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n1\\n0\") == \"500000004\"\nassert solution(\"1 2\\n1\\n0\") == \"0\"\nassert solution(\"1 2\\n1\\n0\") == \"0\"\nassert solution(\"1 2\\n1\\n0\") == \"0\"\nassert solution(\"1 2\\n1\\n0\") == \"0\"\n"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 14') == '2'\n\"\"\""
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 24\\n\") == \"1\"\nassert solution(\"8 10\\n\") == \"2\"\nassert solution(\"1 1\\n\") == \"1\"\n\n------Test Case 0-----\n3 14\n\n-----Test Case 1-----\n8 10\n\n------Test Case 2-----\n1 1\n\n-----Test Case 3-----\n5 24\n\n------Test Case 4-----\n8 10\n\"\"\"\n"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 15\") == \"1\"\nassert solution(\"12 31\") == \"1\"\nassert solution(\"1000 1\") == \"1000\"\nassert solution(\"6 24\") == \"2\"\nassert solution(\"2 31\") == \"1\"\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na = sorted(a, reverse=True)\n\ncurr = 1\ni = 0\nwhile a[i] >= curr:\n    curr *= a[i]\n    i += 1\n\nprint(curr)\n"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 14') == '2'\n\"\"\"\n\nfrom __future__ import annotations\n\nimport unittest\n\n\nclass Solution:\n    \"\"\"\n    >>> solution('3 14')\n    2\n    \"\"\"\n\n    def maxGCD(self, a: int, b: int) -> int:\n        while a!= b:\n            a, b = (a, b) if a > b else (b, a)\n            if b % a == 0:\n                return a\n\n\nclass TestSolution(unittest.TestCase):\n    def testMaxGCD(self):\n        self.assertEqual(Solution().maxGCD(3, 14), 2)\n"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 14\") == \"2\"\nassert solution(\"3 2\") == \"1\"\n\"\"\"\n\nN, M = map(int, input().split(' '))"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 9\\n3 9') == '1'\nassert solution('8 5\\n6 9') == '2'\nassert solution('3 9\\n1 7') == '1'\nassert solution('3 9\\n4 3') == '3'\n\"\"\""
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 14') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 14\") == 2\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 14\\n') == '2'\nassert solution('3 14\\n') == '2'\n\"\"\""
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 2 1\\n1 3 1\\n2 3 3\\n') == '1'\n"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 1\\n1 3 1\\n2 3 3\") == \"1\"\nassert solution(\"4 4\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 3\\n2 4 3\\n3 4 4\") == \"2\"\n"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2 1\\n2 3 1\\n3 4 1\") == '1'\n\n-----\nN M  \na_1 b_1 c_1  \na_2 b_2 c_2\n:  \na_M b_M c_M  \n\nN M\na_1 b_1 c_1  \na_2 b_2 c_2\n:  \na_M b_M c_M\n\n9 3\n1 2 1\n1 3 1\n2 3 3\n3 4 1\n5 6 1\n6 7 1\n7 8 1\n8 9 1\n9 10 1\n\n5 4\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n\n3 4\n1 2 1\n2 3 1\n3 4 1\n\n2 3\n1 2 1\n2 3 1\n\n\"\"\"\nimport sys\nimport math\n\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2 1\\n1 3 1\\n2 3 3') == '1'"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 1\\n1 3 1\\n2 3 3\\n') == '1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 1\\n1 3 1\\n2 3 3\") == \"1\"\nassert solution(\"5 5\\n1 2 1\\n1 3 1\\n1 4 1\\n4 5 1\\n2 4 3\\n3 4 3\") == \"2\"\nassert solution(\"4 4\\n1 2 1\\n1 3 1\\n2 3 1\\n3 4 1\\n2 4 2\") == \"0\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 1\\n1 3 1\\n2 3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1') == '1'\nassert solution('3 3 1 2 1') == '1'\nassert solution('5 4 1 2 3 3') == '3'\n"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2 1\\n1 3 1\\n2 3 3') == '1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 1\\n1 3 1\\n2 3 3\") == \"1\"\n"
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"??2??5\") == \"768\""
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('?2??5') == '768'\n\"\"\"\n\nimport re\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"???2??5\") == \"768\"\n\n\"\"\""
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"??2??5\") == '768'\n\"\"\""
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"??2??5\") == \"768\"\n\n\"\"\""
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2??5') == '768'\n\"\"\""
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"??2??5\") == \"768\"\n\"\"\"\n"
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"?2??5\") == \"768\"\n\"\"\""
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"?2??5\") == \"768\"\n"
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12??3??5\") == \"7\"\nassert solution(\"??2??5\") == \"768\"\nassert solution(\"??0??0??0??0??0??0??0\") == \"0\"\nassert solution(\"??0??0??0??0??0??0??0\") == \"0\"\nassert solution(\"?0???0???0???0???0???0\") == \"0\"\n\n\"\"\"\n\nfrom re import sub"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\") == \"YES\"\nassert solution(\"5 2\\n5 3 -2 1 -1 5\") == \"NO\"\nassert solution(\"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 2\\n1 -3\\n4 -2 3 2 -3\"\n) == \"YES\"\nassert solution(\n    \"5 2\\n5 3 -2 1 -1 5\"\n) == \"NO\"\nassert solution(\n    \"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\"\n) == \"YES\"\nassert solution(\n    \"7 2\\n7 -5 4 2 4 7 -3 4\"\n) == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\\n\") == \"YES\"\nassert solution(\"5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\\n\") == \"NO\"\nassert solution(\"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\\n\") == \"YES\"\nassert solution(\"7 2\\n3 1 6 7\\n7 -5 4 2 4 7 -3 4\\n\") == \"NO\"\nassert solution(\"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 3 4\\n\") == \"YES\"\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\") == \"YES\"\nassert solution(\"5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\") == \"NO\"\n\"\"\"\n\nn, m = map(int, input().split())\ngroups = [list(map(int, input().split())) for _ in range(m)]\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 -3\\n4 -2 3 2 -3\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\") == \"YES\"\nassert solution(\"5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\") == \"NO\"\nassert solution(\"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\") == \"YES\"\n\nassert solution(\"4 2\\n1 3\\n4 -2 3 2\") == \"NO\"\nassert solution(\"5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\") == \"NO\"\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\\n\") == \"YES\"\nassert solution(\"5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\\n\") == \"NO\"\n\n\"\"\"\n\nn, m = map(int, input().split())\nr = [0] * m\nm = [0] * m\nfor i in range(m):\n    k, *v = map(int, input().split())\n    r[i] = k\n    for j in v:\n        if j < 0:\n            m[i] -= 1\n        else:\n            m[i] += 1\n\nn = len(set(m))\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\\n\") == \"YES\"\nassert solution(\"5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\") == \"YES\"\nassert solution(\"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\") == \"YES\"\nassert solution(\"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\") == \"NO\"\nassert solution(\"8 4\\n5 3 -2 1 -1 5\\n3 -5 2 5\") == \"NO\"\nassert solution(\"9 1\\n-2\") == \"YES\"\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\\n\") == 'YES'\nassert solution(\"5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\\n\") == 'NO'\nassert solution(\"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\\n\") == 'YES'"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 2\\n') == 2\nassert solution('4 2\\n3 1 2 4\\n') == 3\nassert solution('6 2\\n6 5 3 1 2 4\\n') == 6\nassert solution('2 10000000000\\n2 1\\n') == 2\n\n\"\"\"\n\nfrom math import log10, ceil\n\nstdin = open('./input.txt', 'r').read().split('\\n')\n\nn, k = list(map(int, stdin[0].split()))\n\npowers = list(map(int, stdin[1].split()))\n\nwinner = None\n\ncurrent = 0\n\nfor power in powers:\n    current = power\n    while power + current < k:\n        current = 2 * current\n    if current > k:\n        winner = power\n        break\n\nprint(winner)"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 2\") == \"2\"\nassert solution(\"4 2\\n3 1 2 4\") == \"3\"\nassert solution(\"6 2\\n6 5 3 1 2 4\") == \"6\"\n\"\"\"\nimport unittest"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n3 4\") == \"1\"\nassert solution(\"2 2\\n1 2\") == \"2\"\nassert solution(\"4 2\\n3 1 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 2\") == 2\nassert solution(\"4 2\\n6 5 3 1 2 4\") == 6\nassert solution(\"6 2\\n6 5 3 1 2 4\") == 6\n"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"3\"\nassert solution(\"6 2\\n6 5 3 1 2 4\") == \"6\"\nassert solution(\"2 10000000000\\n2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 2') == '2'\nassert solution('4 2\\n3 1 2 4') == '3'\nassert solution('6 2\\n6 5 3 1 2 4') == '6'\n"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"6 2\") == \"6\""
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2\\n\") == 2\nassert solution(\"4 2\\n6 5 3 1 2 4\\n\") == 6\nassert solution(\"6 2\\n6 5 3 1 2 4\\n\") == 6\n\"\"\""
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2\\n\") == \"2\"\nassert solution(\"4 2\\n3 1 2 4\\n\") == \"3\"\nassert solution(\"6 2\\n6 5 3 1 2 4\\n\") == \"6\"\nassert solution(\"2 10000000000\\n2 1\\n\") == \"2\""
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 2) == 5\nassert solution(5, 5) == 3\nassert solution(7, 7) == 5\n\nprint(\"Test pass.\")"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3') == '5'\nassert solution('7 7') == '3'\nassert solution('10 10') == '2'\nassert solution('8 5') == '8'\nassert solution('1 3 5') == '5'\n"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 3 5\") == \"5\"\nassert solution(\"5 5\\n1 2 1 1 1\") == \"3\"\nassert solution(\"7 7\\n4 1 2 4 3 4 4\") == \"5\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3 5\") == \"5\"\nassert solution(\"7 7\\n4 1 2 4 3 4 4\") == \"5\"\nassert solution(\"7 7\\n4 1 2 4 3 4 5\") == \"3\"\nassert solution(\"3 2\\n1 3 5\") == \"5\"\n\nprint(\"Passed\")\n\"\"\"\n\nfrom typing import List\n\nn_k: List[int] = list(map(int, stdin.readline().split()))\nn: int = n_k[0]\nk: int = n_k[1]\n\na: List[int] = list(map(int, stdin.readline().split()))\n\nmedian: int = int(n / 2)"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3') == '3'\nassert solution('7 7') == '3'\n\"\"\"\n\nimport heapq\nfrom collections import Counter\n"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"3\"\nassert solution(\"7 7\") == \"5\"\n"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 3 5') == '5'\nassert solution('7 7\\n4 1 2 4 3 4 4') == '5'\nassert solution('7 5\\n4 1 2 4 3 4 4') == '3'\nassert solution('1 1\\n1') == '1'\nassert solution('2 2\\n1 1') == '1'\n\nimport sys"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 3 5') == '5'\nassert solution('5 5\\n1 2 1 1 1') == '3'\nassert solution('7 7\\n4 1 2 4 3 4 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 3 5\") == \"5\"\nassert solution(\"7 7\\n4 1 2 4 3 4 4\") == \"5\"\nassert solution(\"7 7\\n1 1 2 4 3 4 4\") == \"3\"\nassert solution(\"3 2\\n1 3 5\") == \"5\"\nassert solution(\"3 2\\n1 3 2\") == \"3\""
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 2\n1 3 5\n\"\"\") == '5'\n\nassert solution(\"\"\"5 5\n1 2 1 1 1\n\"\"\") == '3'\n\nassert solution(\"\"\"7 7\n4 1 2 4 3 4 4\n\"\"\") == '5'"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('NonZero') == 5\nassert solution('Harbour Space University') == 1\n\"\"\"\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\nNonZERO') == '5'\nassert solution('24\\nHarbour Space University') == '0'\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nNonZERO\") == \"5\"\nassert solution(\"24\\nthis is zero answer text\") == \"0\"\nassert solution(\"24\\nHarbour Space University\") == \"1\"\n\n\"\"\"\n\nn = int(input())\ntext = input().split()"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\nNonZERO\") == \"5\"\n\"\"\""
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 2 1 0 2 0 0 3') == '2', 'error'\n\nassert solution('NonZERO') == '5', 'error'\n\nassert solution('this is zero answer text') == '0', 'error'\n\nassert solution('Harbour Space University') == '1', 'error'\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"NonZERO\") == 5\nassert solution(\n\"this is zero answer text\") == 0\nassert solution(\n\"Harbour Space University\") == 1\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"NonZERO\") == 5\nassert solution(\"this is zero answer text\") == 0\nassert solution(\"Harbour Space University\") == 1\nassert solution(\"Hello world\") == 0\nassert solution(\"\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"NonZERO\") == \"5\"\nassert solution(\"Harbour Space University\") == \"0\"\n\"\"\"\nimport math"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('NonZero') == '5'\nassert solution('this is zero answer text') == '0'\nassert solution('Harbour Space University') == '1'\n\n\"\"\""
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin_lines) == expected_stdout\n\n\"\"\"\n\nn = int(input())\n\ns = input().strip()\n\nmax_capital = 0\n\nfor i in s.split():\n    cur_capital = 0\n    for j in i:\n        if j.isupper():\n            cur_capital += 1\n    if cur_capital > max_capital:\n        max_capital = cur_capital\n\nprint(max_capital)\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\nassert solution(\"5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\") == -1\n\n'''\n\nimport sys"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\nassert solution(\"5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\") == -1\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"./tests/fixtures/test1.txt\") == \"50\"\n\n\"\"\"\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10') == '4'\nassert solution('5 5') == '-1'\nassert solution('5 10') == '5'\nassert solution('5 10') == '5'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\") == \"2\"\nassert solution(\"5 5\") == \"-1\"\n\n-----\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0') == \"50\"\n\"\"\""
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 -1') == 1\nassert solution('1 3 1') == 1\nassert solution('3 3 -1') == 16\n\n\"\"\""
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '1'\nassert solution('1 1 -1') == '1'\nassert solution('1 3 1') == '1'\nassert solution('3 3 -1') == '16'\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == 1\nassert solution(\"1 2 3\") == 0\nassert solution(\"3 2 1\") == 16\n\n\"\"\"\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 -1') == '1'\nassert solution('1 3 1') == '1'\nassert solution('3 3 -1') == '16'\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 1\") == \"1\"\nassert solution(\"1 3 -1\") == \"1\"\nassert solution(\"3 3 -1\") == \"16\"\nassert solution(\"1 1 -1\") == \"1\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 -1\") == 1\nassert solution(\"1 3 1\") == 1\nassert solution(\"3 3 -1\") == 16\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 1\\n') == 1\nassert solution('1 3 -1\\n') == 1\nassert solution('1 1 -1\\n') == 1\nassert solution('3 3 -1\\n') == 16\n\"\"\"\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 -1\") == \"1\"\nassert solution(\"3 3 -1\") == \"16\"\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 1\") == 1\nassert solution(\"1 1 -1\") == 1\nassert solution(\"3 3 -1\") == 16\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 -1\") == \"1\"\nassert solution(\"1 3 1\") == \"1\"\nassert solution(\"3 3 -1\") == \"16\"\n\n\"\"\"\n"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"NO\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"YES\"\nassert solution(\"300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n\") == \"YES\""
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"NO\"\nassert solution(\"300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n\") == \"YES\"\n"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"NO\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"YES\"\nassert solution(\"300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"YES\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"YES\"\n\nprint(solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\"))\n"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES'\nassert solution('2 3\\n2 4') == 'YES'\nassert solution('1 2\\n2 3\\n2 4\\n1 3\\n1 4') == 'NO'\nassert solution('5 4\\n1 2\\n2 3\\n3 4\\n4 5') == 'YES'\n\n'''"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'3 2\\n1 1\\n2 2\\n1 2\\n1 3\\n1 2\\n2 2'\n) == 'NO'\n\nassert solution(\n'3 3\\n1 1\\n2 2\\n1 2\\n1 2\\n1 3\\n2 2\\n1 2\\n2 2'\n) == 'NO'\n\nassert solution(\n'3 2\\n2 3\\n1 2\\n1 2\\n2 2\\n1 2\\n2 2'\n) == 'NO'\n\nassert solution(\n'3 3\\n2 3\\n2 3\\n2 3\\n1 2\\n1 2\\n2 2\\n1 2\\n2 2\\n1 2\\n1 2\\n1 2'\n) == 'YES'\n\nassert solution(\n'3 2\\n2 3\\n1 2\\n1 2\\n2 2\\n1 2\\n2 2\\n1 2\\n2 2'\n) == 'YES'\n"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"NO\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"YES\"\nassert solution(\"300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"YES\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('5 3') == 'YES'\nassert solution('300000 5') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('1 2\\n2 3') == 'YES'\n"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n2 3\\n3 4\\n4 5') == 'NO'\nassert solution('1 2\\n2 3\\n3 4\\n4 5\\n6 7') == 'YES'\nassert solution('1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7') == 'YES'\nassert solution('1 2\\n2 3\\n3 4\\n4 5\\n6 7\\n7 8') == 'YES'\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5ae35c3dbdcf25f9dc0007a9/train/python\n\nToad has $m$ pairs of integers, each integer is between $1$ and $n$, inclusive. The pairs are $(a_1, b_1), (a_2, b_2), \\ldots, (a_m, b_m)$. \n\nToad wants to choose two integers $x$ and $y$ ($1 \\leq x < y \\leq n$) so that in each pair at least one integer is equal to $x$ or $y$.\n\nToad can check this by using the following code:\n\nfor i in range(m):\n    if a[i] == x or a[i] == y:\n        return \"YES\"\n\nreturn \"NO\"\n\n\n-----Input-----\n\nThe first line contains two space-separated integers $n$ and $m$ \u2014 the upper bound on the values of integers in the pairs, and the number of given pairs.\n\nThe next $m$ lines each contain two space-separated integers $a_i$ and $b_i$ \u2014 the integers in the $i$-th pair.\n\n\n-----Output-----\n\nPrint \"YES\" if there exists an $x$ and $y$ such that in each pair there exists at least one integer which is equal to $x$ or $y$. Otherwise, print \"NO\".\n\n\n-----Examples-----\nInput\n4 2\n1 2\n2 3\n3 4\n\nOutput\nYES\n\nInput\n1 2\n1 2\n3 4\n\nOutput\nNO\n\nInput\n1 2\n2 3\n2 4\n\nOutput\nNO\n\nInput\n4 5\n1 2\n3 4\n4 5\n2 3\n\nOutput\nNO\n\nInput\n1 2\n2 3\n3 4\n4 5\n\nOutput\nNO\n\nInput\n5 4\n1 2\n1 2\n2 3\n3 4\n4 5\n\nOutput\nYES\n\"\"\""
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\"\n) == \"NO\"\n\nassert solution(\n\"\"\"\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\"\n) == \"YES\"\n\nassert solution(\n\"\"\"\n300000 5\n1 2\n1 2\n1 2\n1 2\n1 2\n\"\"\"\n) == \"YES\""
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"NO\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"YES\"\nassert solution(\"300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"YES\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 1\\nba\\nac\") == \"1\"\nassert solution(\"3\\n3 1\\nac\\naa\") == \"-1\"\nassert solution(\"2\\n3 5\\nba\\nac\") == \"1\"\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2') == '1'\nassert solution('3\\n1 3 1') == '1'\nassert solution('2\\n3 3') == '-1'\nassert solution('3\\n3 3') == '-1'\nassert solution('3\\n5 5') == '-1'\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\naaa\\nba\\nac\") == -1\nassert solution(\"2 5 5\\nba\\nac\") == 1\nassert solution(\"3 3\\naaa\\nba\\nac\") == -1\n\"\"\"\n\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == -1\nassert solution(\"1 2\") == 1\nassert solution(\"5 5\") == 1\nassert solution(\"aaa aa\") == -1\nassert solution(\"bba bb\") == -1\n\n\"\"\"\n\n\nimport unittest\nimport collections\nimport heapq\nimport itertools\nimport functools\nimport re\nfrom copy import deepcopy\nfrom collections import deque, Counter, OrderedDict, defaultdict\nfrom itertools import permutations, combinations, product\nfrom operator import itemgetter, mul, add, xor\nfrom itertools import accumulate\nfrom math import ceil, floor, gcd, log, sqrt, pi, factorial  # prod, comb\nfrom functools import reduce\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right\nfrom array import array\n\nimport math"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4\\nba\\nac') == '1'\nassert solution('2\\n1 1\\nba\\nac') == '-1'\nassert solution('3\\n1 3 1\\nba\\nac') == '-1'\nassert solution('3\\n1 3 1\\naaa\\nba\\nac') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\") == \"1\"\nassert solution(\"3 3 1\") == \"-1\"\nassert solution(\"2 5 1\") == \"1\"\nassert solution(\"3 5 1\") == \"-1\"\nassert solution(\"1 2 3\") == \"1\"\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\nba\\nac') == '-1'\nassert solution('2 5\\nbbb\\naaa') == '1'\nassert solution('2 5\\naaa\\nba') == '-1'\nassert solution('3 2\\na\\naaa\\n') == '1'\nassert solution('1 2\\nab\\n') == '1'\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\naa\\nba') == 1\nassert solution('3 3\\naa\\nbb') == 1\nassert solution('3 3\\nba\\nbb') == -1\nassert solution('2 5\\nbb\\nbb') == -1\nassert solution('1 2\\nac') == 1\n\"\"\""
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2\\nba\") == 1\nassert solution(\"3\\n1 3 1\\naa\\nba\") == 1\nassert solution(\"2\\n5 5\\nbbb\\naa\") == -1\nassert solution(\"3\\n5 5\\naaa\\nba\") == -1\nassert solution(\"4\\n5 5\\nbbb\\nccc\\naaa\") == -1\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\naaa\\nba\") == -1\nassert solution(\"2 5\\nba\\nac\") == -1\nassert solution(\"1 3 1\\nac\") == 1\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\") == \"9\""
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\") == \"9\"\nassert solution(\"1\\n2\\n7\") == \"9\"\nassert solution(\"2\\n10\\n3\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"9\"\n\"\"\"\n\na, b, c = map(int, input().split())\nprint((a + b + c - 1) * (a + b + c - 2) // 2)\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"9\"\nassert solution(\"1 10 3\") == \"60\"\nassert solution(\"1 2 20\") == \"100\"\nassert solution(\"2 10 3\") == \"60\"\nassert solution(\"2 20 3\") == \"100\"\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"9\""
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 3\") == \"60\"\nassert solution(\"2 10 3\") == \"60\"\n\"\"\"\n\na, b, c = map(int, input().split())\nprint(a+b+c-min(a, b, c))\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1, 2, 3) == 7\nassert solution(2, 3, 1) == 5\nassert solution(3, 2, 1) == 6\nassert solution(2, 3, 4) == 24\nassert solution(1, 4, 5) == 9\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"9\"\nassert solution(\"1 2 -3\") == \"3\"\nassert solution(\"2 10 -3\") == \"17\"\n\nprint(solution(\"1 2 3\"))\nprint(solution(\"2 10 3\"))\nprint(solution(\"2 10 -3\"))\nprint(solution(\"1 2 3\"))\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '9'\nassert solution('1 10 2') == '60'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '9'\nassert solution('1 10 3') == '60'\nassert solution('1 10 2') == '10'\nassert solution('1 10 3') == '60'\nassert solution('1 2 10') == '20'\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 2\\n\") == \"0 3\"\nassert solution(\"8 4 3\\n\") == \"7 8 3\"\nassert solution(\"10 2 2\\n\") == \"0\"\nassert solution(\"8 6 3\\n\") == \"-1\"\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 2\\n') == '-1'\nassert solution('8 4 3\\n') == '7 8 3\\n0 1 4\\n6 0 5\\n0 2 0'\nassert solution('10 2 2\\n') == '-1'\n\"\"\"\nimport sys\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 2\") == \"0 3\"\nassert solution(\"8 4 3\") == \"7 8 3\"\nassert solution(\"10 2 2\") == \"-1\"\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 2\\n\") == \"0 3\\n1 2\"\nassert solution(\"8 4 3\\n\") == \"7 8 3\\n0 1 4\\n6 0 5\\n0 2 0\\n\"\nassert solution(\"10 2 2\\n\") == \"-1\"\nassert solution(\"3 1 2\\n\") == \"0 1\\n2 0\"\n\"\"\"\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 2\") == \"0 3\"\nassert solution(\"8 4 3\") == \"7 8 3\"\nassert solution(\"10 2 2\") == \"0 1 0\"\n\"\"\"\n\nn, a, b = [int(i) for i in input().split()]\na = a * b"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 2\") == \"0 3\"\n\nassert solution(\"8 4 3\") == \"7 8 3\"\n\nassert solution(\"10 2 2\") == \"0 1 4\"\n\n\n\n\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 2') == '0 3'\nassert solution('8 4 3') == '7 8 3'\nassert solution('10 2 2') == '-1'\nassert solution('1 1 1') == '0 0 0'\n\"\"\"\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 2\\n') == '0 3'\nassert solution('8 4 3\\n') == '7 8 3'\nassert solution('10 2 2\\n') == '-1'\n\"\"\"\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 2\") == \"0 3\"\nassert solution(\"8 4 3\") == \"7 8 3\"\nassert solution(\"10 2 2\") == \"-1\"\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == -1\nassert solution('1 1') == 0\nassert solution('3 2 2') == -1\nassert solution('8 4 3') == 7\nassert solution('10 2 2') == -1\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 2\n50 85 250\n10 15 25''') == 'Limak'\nassert solution('''8 1\n10 20 30 40 50 60 70 80\n8 10 58 63 71 72 75 76''') == 'Tie'\nassert solution('''3 6\n50 85 250\n10 15 25''') == 'Radewoosh'\n\n'''\n[Analysis]\n\nmaze(n,c) represents the number of minutes we need to finish solving all problems\n\nThe algorithm is recursive and calls itself inside itself.\n\nAt the beginning maze(n,c) = n\n\nThe recursive call is\nmaze(n,c) = min(maze(n-1,c),maze(n-1,c-1))\n\nNote: since all problems are equal, we need to ensure that we are not comparing with some minimum value as that value will always be better than 0.\n\nThe variable 'best' stores the minimum value of maze(n,c) and 'best_index' stores the index of the min value.\n\nTime complexity: O(n)\nSpace complexity: O(n)\n\n'''\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n10 15 25\") == \"Limak\"\nassert solution(\"3 6\\n10 15 25\") == \"Radewoosh\"\nassert solution(\"8 1\\n10 20 30 40 50 60 70 80\") == \"Tie\"\nassert solution(\"8 1\\n10 20 30 40 50 60 70 80\") == \"Tie\"\n\n\"\"\"\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n50 85 250\\n10 15 25\") == \"Limak\"\nassert solution(\"3 6\\n50 85 250\\n10 15 25\") == \"Radewoosh\"\nassert solution(\"8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76\") == \"Tie\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n50 85 250\\n10 15 25\") == \"Limak\"\nassert solution(\"8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76\") == \"Tie\"\nassert solution(\"3 6\\n50 85 250\\n10 15 25\") == \"Radewoosh\"\n\"\"\"\n\nn, c = [int(i) for i in input().split()]\np = [int(i) for i in input().split()]\nt = [int(i) for i in input().split()]\n\npp = [0]\ntt = [0]\nfor i in range(n):\n    pp.append(p[i] + pp[i])\n    tt.append(t[i] + tt[i])\n\ndp = [[0 for i in range(c + 1)] for j in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, c + 1):\n        if j - tt[i] >= 0:\n            dp[i][j] = max(dp[i - 1][j], pp[i] - j)\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[n][c])\n\nfor i in range(n, 0, -1):\n    if dp[i][c] == dp[i - 1][c]:\n        print('Tie')\n    else:\n        print('Limak')\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(input()).strip()\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n50 85 250\\n10 15 25') == 'Limak'\nassert solution('8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76') == 'Tie'\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n50 85 250\\n10 15 25') == 'Limak'\nassert solution('3 6\\n50 85 250\\n10 15 25') == 'Radewoosh'\nassert solution('8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76') == 'Tie'\n\nprint(solution('8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76'))\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"Limak\"\nassert solution(\"8 1\") == \"Tie\"\nassert solution(\"3 6\") == \"Radewoosh\"\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n50 85 250\\n10 15 25') == 'Limak'\nassert solution('3 6\\n50 85 250\\n10 15 25') == 'Radewoosh'\nassert solution('8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76') == 'Tie'\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n50 85 250\\n10 15 25') == 'Limak'\nassert solution('3 6\\n50 85 250\\n10 15 25') == 'Radewoosh'\nassert solution('8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76') == 'Tie'\n\"\"\""
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\\n2 1 1\\n2\\n100 76 8\\n76 75 36 67 41 74 10 77\\n\") == \"2\"\n\"\"\"\n\n\nimport sys\nimport functools\n\n\n@functools.lru_cache(maxsize=None)\n"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 3\\n1 2 3\\n4 3 3\\n4 1 2') == '2'\nassert solution('10 2 6\\n1 2 3 4 5 7') == '0'\nassert solution('76 75 36 67 41 74 10 77\\n2 1 1') == '4'\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\") == \"2\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\") == \"0\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\") == \"0\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\") == \"0\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\") == \"0\"\n"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\\n2 1 1\\n2\\n100 76 8\\n76 75 36 67 41 74 10 77\") == \"2\\n0\\n4\\n0\\n2\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\\n2 1 1\\n2\") == '2'"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\nassert solution('2 2 1') == '0'\n\nassert solution('2 3 1') == '0'\n\nassert solution('4 3 3') == '0'\n\nassert solution('5 1 2') == '1'"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\\n2 1 1\\n2\\n100 76 8\\n76 75 36 67 41 74 10 77\") == \"2\\n0\\n4\\n0\""
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7') == '2'\nassert solution('5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7') == '0'\nassert solution('5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7') == '4'"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3\\n1 2 3\\n4 3 3\\n4 1 2') == '2'\nassert solution('5 2 3\\n1 2 3\\n4 3 3\\n4 1 2') == '0'\nassert solution('5 2 3\\n1 2 3\\n4 3 3\\n4 1 2') == '0'\n\nassert solution('10 2 6\\n1 2 3 4 5 7') == '2'\nassert solution('10 2 6\\n1 2 3 4 5 7') == '0'\n"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n2 3 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\") == \"2\"\nassert solution(\"1 2 3\\n2 3 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\") == \"0\"\nassert solution(\"1 2 3\\n2 3 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n1 1 1 1\n1 1 1 1\n''') == '-1'\nassert solution('''3\n0 0 0\n0 0 0\n''') == '-1'\nassert solution('''9\n1 0 0 0 0 0 0 0 1\n0 1 1 0 1 1 1 1 0\n''') == '4'\n\n'''\nThe first line contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of problems.\n\nThe second line contains $n$ integers $r_1$, $r_2$,..., $r_n$ ($0 \\le r_i \\le 1$). $r_i = 1$ means that the \"Robo-Coder Inc.\" robot will solve the $i$-th problem, $r_i = 0$ means that it won't solve the $i$-th problem.\n\nThe third line contains $n$ integers $b_1$, $b_2$,..., $b_n$ ($0 \\le b_i \\le 1$). $b_i = 1$ means that the \"BionicSolver Industries\" robot will solve the $i$-th problem, $b_i = 0$ means that it won't solve the $i$-th problem.\n'''"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 1 1 0 0\\n0 1 1 1 1\\n') == '3'\nassert solution('3\\n0 0 0\\n0 0 0\\n') == '-1'\nassert solution('4\\n1 1 1 1\\n1 1 1 1\\n') == '-1'\nassert solution('9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\\n') == '4'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 1 1\") == 3\nassert solution(\"9 0 0 0 0 0 0 0 1\") == 4\nassert solution(\"9 1 0 0 0 0 0 0 1\") == -1\nassert solution(\"9 1 1 1 1 1 1 1 1\") == -1\n\"\"\"\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 1 0 0\\n0 1 1 1 1\") == \"3\"\nassert solution(\"3\\n0 0 0\\n0 0 0\") == \"-1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1\") == \"-1\"\nassert solution(\"9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\") == \"4\"\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 1 0 0\\n0 1 1 1 1\\n\") == 3\nassert solution(\"3\\n0 0 0\\n0 0 0\\n\") == -1\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1\\n\") == -1\nassert solution(\"9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\\n\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 1 0 0\\n0 1 1 1 1\") == '3'\nassert solution(\"3\\n0 0 0\\n0 0 0\") == '-1'\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1\") == '-1'\n\n\"\"\"\n\nimport sys\n\nfrom collections import Counter"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 1 0 0\\n0 1 1 1 1\\n\") == '3'\nassert solution(\"3\\n0 0 0\\n0 0 0\\n\") == '-1'\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1\\n\") == '-1'\nassert solution(\"9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\\n\") == '4'\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 0 0\\n1 1 1 1\") == \"3\"\nassert solution(\"9\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\") == \"4\"\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 1 0 0\") == \"3\"\nassert solution(\"3 0 0\") == \"-1\"\nassert solution(\"9 0 0 0 0 0 0 0 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 1 0 0\\n0 1 1 1 1\\n\") == \"3\"\nassert solution(\"3 0 0\\n0 0 0\\n\") == \"-1\"\nassert solution(\"4 1 1 1\\n1 1 1 1\\n\") == \"-1\"\nassert solution(\"9 1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\\n\") == \"4\"\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"banana\") == \"2nab\"\nassert solution(\"bananas\") == \"3nabn\"\nassert solution(\"bananasplice\") == \"3nabnsp\"\nassert solution(\"bananasplices\") == \"3nabnspc\"\nassert solution(\"bananasplicesplice\") == \"3nabnspcsp\"\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"banana\") == \"2aba\"\n\n\"\"\"\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"banana\") == \"2aba\"\nassert solution(\"banana\") == \"3nab\"\nassert solution(\"banana\") == \"3nab\"\nassert solution(\"banana\") == \"3nab\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"banana\") == \"2\"\nassert solution(\"ab\") == \"-1\"\nassert solution(\"aba\") == \"3\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('banana') == '2'\nassert solution('banana') == '2'\nassert solution('banana') == '2'\nassert solution('banana') == '2'\nassert solution('banana') == '2'\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"banana\") == \"2aba\"\n\n\"\"\"\nimport sys\n\ns = sys.stdin.readline().rstrip()\nn = sys.stdin.readline()\ncount = 0\n\nwhile True:\n    if len(s) == len(set(s)):\n        count += 1\n    else:\n        break\n    s += s[:len(s) - 1]"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"banana\") == \"2nab\"\nassert solution(\"banana\") == \"2nab\"\n\"\"\""
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('banana') == '2'\nassert solution('ababa') == '-1'\nassert solution('abaaba') == '3'\n\"\"\""
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"banana\") == \"2naba\"\nassert solution(\"an\") == \"a\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"aaa\") == \"-1\"\nassert solution(\"aaba\") == \"ababa\"\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcde') == 'codeforces'\nassert solution('abcded') == 'codeforces'\nassert solution('abcdef') == 'codeforces'\n\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'codeforcesisawesome'\nassert solution('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz') == 'codeforcesisawesome'\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"codeforces\"\nassert solution(\"2\") == \"codeforcesisawesome\"\nassert solution(\"3\") == \"codeforcesisawesome\"\nassert solution(\"5\") == \"codeforcesisawesomeisawesome\"\nassert solution(\"10\") == \"codeforcesisawesomeisawesomeisawesome\"\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'codeforces'\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"codeforcesisawesome\") == \"codeforcesisawesome\"\nassert solution(\"codeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesis"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'codeforces'\nassert solution('3') == 'codeforcesisawesome'\n\"\"\"\n\n\"\"\"\nwhile itertools.permutations(iterable, r)\nlen(iterable)\niterable.length\niterable.substrings()\niterable.substrings(2)\niterable.substrings(3)\niterable.substrings(5)\n\"\"\"\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"codeforcesss\") == \"codeforcesisawesome\"\nassert solution(\"codeforcesisawesome\") == \"codeforcesisawesome\"\nassert solution(\"codeforcesisawesomeisawesome\") == \"codeforcesisawesomeisawesome\"\n\"\"\"\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'codeforces'\nassert solution('2') == 'codeforcesss'\nassert solution('3') == 'codeforcesssssssssssssssssssssssss'\n\"\"\"\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"codeforcesisawesome\") == \"codeforcesisawesome\"\nassert solution(\"codeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesisawesomecodeforcesis"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"aacabdkacaa\") == \"acab\"\nassert solution(\"codeforcesisawesome\") == \"codeforcesisawesome\"\nassert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"codeforcesisawesome\") == \"codeforcesisawesome\"\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"codeforces\"\n\"\"\""
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\\n1 1\\n\") == '1'\nassert solution(\"3\\n1 2 3\\n1 1\\n\") == '0'\nassert solution(\"8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\\n\") == '4'\n\"\"\"\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 2 3\\n1 1\") == \"1\"\nassert solution(\"8\\n7 2 2 5 4 3 1 1\") == \"4\"\nassert solution(\"8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\") == \"4\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3\\n1 1') == '0'\nassert solution('8\\n7 2 2 5 4 3 1 1') == '4'\nassert solution('8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6') == '0'\n\"\"\"\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3\\n1 1\\n') == '4'\nassert solution('3\\n2 2 3\\n1 1\\n') == '0'\nassert solution('4\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\\n') == '4'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, deque\n\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.children = []\n        self.leaf = False\n        self.apples = 0\n        self.parent = -1\n\n    def add_children(self, *args):\n        for child in args:\n            self.children.append(child)\n\n    def __str__(self):\n        return f'{self.val}: {self.apples}, {self.leaf}'\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\\n1 1\\n\") == \"1\"\nassert solution(\"8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\\n\") == \"4\""
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\\n1 1\") == \"0\"\nassert solution(\"3\\n1 2 3\\n1 1 1\") == \"0\"\nassert solution(\"8\\n7 2 2 5 4 3 1 1\") == \"4\"\nassert solution(\"8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\") == \"0\"\n\nimport sys; input = sys.stdin.readline\nn = int(input())\narr = list(map(int, input().split()))\nparent = list(map(int, input().split()))\nm = len(parent)\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3\") == \"1\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"3 2 1\") == \"4\"\nassert solution(\"8 7 2 2 5 4 3 1 1\") == \"4\""
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 2 3\\n1 1') == '1'\nassert solution('3\\n2 2 3\\n1 1') == '0'\nassert solution('8\\n7 2 2 5 4 3 1 1') == '4'\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 2 3\\n1 1\") == \"1\"\nassert solution(\"3\\n2 2 3\\n1 1\") == \"0\"\nassert solution(\"3\\n2 2 3\\n1 1\") == \"1\"\nassert solution(\"8\\n7 2 2 5 4 3 1 1\") == \"4\"\nassert solution(\"8\\n7 2 2 5 4 3 1 1\") == \"4\"\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 2 3\\n1 1') == '1'\nassert solution('3\\n1 1\\n1 2 3') == '0'\nassert solution('8\\n7 2 2 5 4 3 1 1') == '4'\nassert solution('8\\n1 1 1 4 4 5 6') == '4'\n\n\"\"\""
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\") == 14\nassert solution(\"4 10 2\\n2 3 8\\n3 4 7\") == 262\nassert solution(\"1 1 1\\n1 1 1\") == 0\nassert solution(\"4 10 2\\n1 1 1\\n1 1 1\") == 0\nassert solution(\"4 10 2\\n3 4 7\") == 262\n"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\") == \"14\"\nassert solution(\"4 10 2\\n2 3 8\\n3 4 7\") == \"262\"\n\"\"\""
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10 2\\n2 3 8\\n3 4 7\") == \"262\"\nassert solution(\"3 3 2\\n1 1 1\\n2 2 3\") == \"14\"\n"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\\n') == '14'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\") == \"14\"\nassert solution(\"4 10 2\\n2 3 8\\n3 4 7\") == \"262\"\n\n\"\"\""
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\") == '14'\nassert solution(\"4 10 2\\n2 3 8\\n3 4 7\") == '262'\nassert solution(\"4 10 2\\n3 4 7\") == '262'\n"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test) == test_result"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\\n2 3 8\\n3 4 7\\n\") == \"14\"\nassert solution(\"4 10 2\\n2 3 8\\n3 4 7\\n\") == \"262\"\nassert solution(\"4 10 2\\n2 3 8\\n3 4 7\\n\") == \"262\"\n\"\"\"\nimport sys\nimport pprint"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\\n\") == \"14\"\n\nassert solution(\"4 10 2\\n2 3 8\\n3 4 7\\n\") == \"262\"\n\n\"\"\""
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10 2\\n2 3 8\\n3 4 7\\n') == '262'\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503') == 'Sidorov Ivanov\\nAndreev Semenov'\nassert solution('5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503') == '?\\nSemenov Semenov'\nassert solution('5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503') == '?\\nSemenov Semenov'\nassert solution('5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503') == '?\\nSidorov Ivanov'\nassert solution('5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503') == '?\\nSidorov Ivanov'\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"Sidorov Ivanov\\nAndreev Semenov\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"?\"\n\n\"\"\"\n\nn, m = map(int, input().split())\n\nres = {}\nfor i in range(n):\n    surname, region, points = input().split()\n    res[surname] = res.get(surname, []) + [(region, points)]\n\nfor region in range(1, m + 1):\n    for (region2, points) in res.get(input(), []):\n        if region2!= region:\n            if points > int(res[input()][0][1]):\n                print(\"?\\n\" + input())\n            else:\n                print(input() + \"\\n\" + input())\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\\n\") == \"Sidorov Ivanov\"\nassert solution(\"5 2\\nIvanov 1 800\\nAndreev 2 763\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503\\n\") == \"?\\nSemenov Andreev\""
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\nSidorov 1 763\\nSemenov 2 503\\nIvanov 1 790\\nAndreev 2 800\") == \"Sidorov\"\nassert solution(\"5 2\\nIvanov 1 800\\nAndreev 2 763\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503\") == \"?\\nSidorov\"\nassert solution(\"4 2\\nSidorov 1 763\\nSemenov 2 503\\nIvanov 1 790\\nAndreev 2 800\") == \"?\\n\"\nassert solution(\"5 2\\nSidorov 1 763\\nSemenov 2 503\\nIvanov 1 790\\nAndreev 2 800\") == \"Sidorov\"\n\n\"\"\"\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"Sidorov Ivanov\\nAndreev Semenov\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 763\\nPetrov 1 763\\nSidorov 1 790\\nSemenov 2 763\") == \"?\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 763\\nPetrov 1 763\\nSidorov 1 790\\nSemenov 2 763\") == \"?\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 763\\nPetrov 1 763\\nSidorov 1 790\\nSemenov 2 763\") == \"?\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 763\\nPetrov 1 763\\nSidorov 1 790\\nSemenov 2 763\") == \"?\"\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503''') == '''Sidorov Ivanov\nAndreev Semenov'''\n\nassert solution('''5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503''') == '?\\nAndreev Semenov'\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503\n\"\"\") == \"\"\"\nSidorov Ivanov\nAndreev Semenov\"\"\"\n\nassert solution(\"\"\"\n5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\n\"\"\") == \"\"\"\n?\nAndreev Semenov\"\"\"\n\n\n\"\"\"\n7 7\nBesedin 814\nDjordjev 514\nDjordjev 418\nDjordjev 386\nDjordjev 384\nDjordjev 352\nGorodjev 475\nGorodjev 468\nGorodjev 466\nGorodjev 464\nGorodjev 462\nGorodjev 460\nGorodjev 448\nGorodjev 446\nGorodjev 444\nGorodjev 442\nGorodjev 440\nGorodjev 438\nGorodjev 436\nGorodjev 434\nGorodjev 432\nGorodjev 430\nGorodjev 428\nGorodjev 426\nGorodjev 424\nGorodjev 422\nGorodjev 420\nGorodjev 418\nGorodjev 416\nGorodjev 414\nGorodjev 412\nGorodjev 410\nGorodjev 408\nGorodjev 406\nGorodjev 404\nGorodjev 402\nGorodjev 400\nGorodjev 398\nGorodjev 396\nGorodjev 394\nGorodjev 392\nGorodjev 390\nGorodjev 388\nGorodjev 386\nGorodjev 384\nGorodjev 382\nGorodjev 380\nGorodjev 378\nGorodjev 376\nGorodjev 374\nGorodjev 372\nGorodjev 370\nGorodjev 368\nGorodjev 366\nGorodjev 364\nGorodjev 362\nGorodjev 360\nGorodjev 358\nGorodjev 356\nGorodjev 354\nGorodjev 352\nGorodjev 350\nGorodjev 348\nGorodjev 346\nGorodjev 344\nGorodjev 342\nGorodjev 340\nGorodjev 338\nGorodjev 336\nGorodjev 334\nGorodjev 332\nGorodjev 330\nGorodjev 328\nGorodjev 326\nGorodjev 324\nGorodjev 322\nGorodjev 320\nGorodjev 318\nGorodjev 316\nGorodjev 314\nGorodjev 312\nGorodjev 310\nGorodjev 308\nGorodjev 306\nGorodjev 304\nGorodjev 302\nGorodjev 300\nGorodjev 298\nGorodjev 296\nGorodjev 294\nGorodjev 292\nGorodjev 290\nGorodjev 288\nGorodjev 286\nGorodjev 284\nGorodjev 282\nGorodjev 280\nGorodjev 278\nGorodjev 276\nGorodjev 274\nGorodjev 272\nGorodjev 270\nGorodjev 268\nGorodjev 266\nGorodjev 264\nGorodjev 262\nGorodjev 260\nGorodjev 258\nGorodjev 256\nGorodjev 254\nGorodjev 252\nGorodjev 250\nGorodjev 248\nGorodjev 246\nGorodjev 244\nGorodjev 242\nGorodjev 240\nGorodjev 238\nGorodjev 236\nGorodjev 234\nGorodjev 232\nGorodjev 230\nGorodjev 228\nGorodjev 226\nGorodjev 224\nGorodjev 222\nGorodjev 220\nGorodjev 218\nGorodjev 216\nGorodjev 214\nGorodjev 212\nGorodjev 210\nGorodjev 208\nGorodjev 206\nGorodjev 204\nGorodjev 202\nGorodjev 200\nGorodjev 198\nGorodjev 196\nGorodjev 194\nGorodjev 192\nGorodjev 190\nGorodjev 188\nGorodjev 186\nGorodjev 184\nGorodjev 182\nGorodjev 180\nGorodjev 178\nGorodjev 176\nGorodjev 174\nGorodjev 172\nGorodjev 170\nGorodjev 168\nGorodjev 166\nGorodjev 164\nGorodjev 162\nGorodjev 160\nGorodjev 158\nGorodjev 156\nGorodjev 154\nGorodjev 152\nGorodjev 150\nGorodjev 148\nGorodjev 146\nGorodjev 144\nGorodjev 142\nGorodjev 140\nGorodjev 138\nGor"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"Sidorov Ivanov\\nAndreev Semenov\"\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"Sidorov Ivanov\\nAndreev Semenov\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 763\\nPetrov 1 763\\nSidorov 1 790\\nSemenov 2 503\") == \"?\\nAndreev Sidorov\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 1 763\\nPetrov 1 763\\nSidorov 1 790\\nSemenov 2 503\") == \"?\\nAndreev Sidorov\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"Sidorov Ivanov\\nAndreev Semenov\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 763\\nPetrov 1 763\\nSidorov 1 763\\nSemenov 2 503\") == \"?\\nAndreev Sidorov\"\n\"\"\"\n"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xyabd\") == \"29\"\nassert solution(\"problem\") == \"34\"\nassert solution(\"abaabbaaabbb\") == \"1\"\nassert solution(\"ab\") == \"-1\"\n\"\"\"\nimport string\n"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('xyabd') == '29'\n\nassert solution('ab') == '-1'\n\nassert solution('abaabbaaabbb') == '1'\n\nassert solution('problem') == '34'\n\nassert solution('belo') == '34'"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xyabd\") == \"29\"\nassert solution(\"ab\") == -1\nassert solution(\"aaaaa\") == -1\nassert solution(\"bbbbb\") == -1\nassert solution(\"abbb\") == \"2\"\n"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xyabd\") == \"29\"\nassert solution(\"problem\") == \"34\"\nassert solution(\"abaabbaaabbb\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xyabd\") == \"29\"\nassert solution(\"abaabbaaabbb\") == \"1\"\nassert solution(\"abaabbaaabbb\") == \"1\"\nassert solution(\"ab\") == \"1\"\n\"\"\""
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xyaabbb') == '29'\nassert solution('ab') == '-1'\n"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xyabd\") == \"29\"\nassert solution(\"problem\") == \"34\"\n\n\"\"\""
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xyabd\") == 29\nassert solution(\"abaabbaaabbb\") == 1\nassert solution(\"problem\") == 34\nassert solution(\"belo\") == -1\n"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('xyabd') == 29\nassert solution('abaabbaaabbb') == 1\nassert solution('problem') == 34\nassert solution('ab') == -1\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n5 6 5 6\\n6 6 7 7\\n5 8 6 6\\n9 9 9 9\\n\") == \"1 5 5\"\n\"\"\"\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 6 5 6\\n6 6 7 7\\n5 8 6 6\\n9 9 9 9') == '1 5 5'\nassert solution('5 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3') == '-1'\n\nprint('Success')\n\n\"\"\"\n\nimport sys\nimport math\nimport heapq"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n5 6 5 6\\n6 6 7 7\\n5 8 6 6\\n9 9 9 9\") == \"1 5 5\"\nassert solution(\"5\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\") == \"3 4 6\"\n\n\"\"\"\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nn = int(input())\n\npost1_choc_min, post1_juice_min, post2_choc_min, post2_juice_min = map(int, input().split())\n\nchoc_min = min(post1_choc_min, post2_choc_min)\njuice_min = min(post1_juice_min, post2_juice_min)"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6 5 6\\n6 6 7 7\\n5 8 6 6\\n9 9 9 9\\n') == '1 5 5'\nassert solution('6 6 6 6\\n7 7 7 7\\n4 4 4 4\\n8 8 8 8\\n') == '3 4 6'\nassert solution('3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n') == '-1'\nassert solution('3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n') == '-1'\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 5 5\"\n\"\"\"\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n6\\n5\\n6\") == \"1 5 5\"\nassert solution(\"10\\n6\\n6\\n6\\n7\") == \"3 4 6\"\nassert solution(\"5\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\") == \"3 4 6\"\nassert solution(\"10\\n6\\n6\\n6\\n7\") == \"1 5 5\"\nassert solution(\"10\\n6\\n6\\n6\\n7\") == \"3 4 6\"\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n5 6 5 6\\n6 6 7 7\\n5 8 6 6\\n9 9 9 9\") == \"1 5 5\"\n\nassert solution(\"10\\n6 6 6 6\\n7 7 7 7\\n4 4 4 4\\n8 8 8 8\") == \"3 4 6\"\n\nassert solution(\"5\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\") == \"-1\"\n\n\"\"\"\n\nfrom collections import deque\nfrom itertools import combinations\nfrom typing import Iterable, Deque, List, Generator, Optional, Set, Union\n\nN = int(input())\n\nchoc_min = [\n    int(input()),\n    int(input()),\n    int(input()),\n    int(input()),\n]\n\njuice_min = [\n    int(input()),\n    int(input()),\n    int(input()),\n    int(input()),\n]\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n5 6 5 6\\n6 6 7 7\\n5 8 6 6\\n9 9 9 9\") == \"1 5 5\"\nassert solution(\"10\\n6 6 6 6\\n7 7 7 7\\n4 4 4 4\\n8 8 8 8\") == \"3 4 6\"\nassert solution(\"5\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\") == \"-1\"\nassert solution(\"10\\n6 6 6 6\\n7 7 7 7\\n4 4 4 4\\n8 8 8 8\") == \"3 4 6\"\n\"\"\"\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 5 6 5 6') == \"1 5 5\"\nassert solution('10 6 6 6') == \"1 5 5\"\nassert solution('5 8 6 6') == \"3 4 6\"\nassert solution('10 9 9 9') == \"1 4 6\"\n\nassert solution('6 6 6 6') == \"3 4 6\"\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10\") == \"6 4\"\nassert solution(\"4 4\") == \"1 1 1 1\"\nassert solution(\"3 10\") == \"-1\"\nassert solution(\"1 1 1 1\") == \"1 1 1 1\"\n\"\"\"\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\") == \"1 1 1 1\"\nassert solution(\"3 10\") == \"1 1 1 1\"\nassert solution(\"2 10\") == \"-1\"\n\"\"\""
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10\\n8 7\") == \"6 4\"\nassert solution(\"4 4\\n1 1 1 1\") == \"1 1 1 1\"\nassert solution(\"3 10\\n9 8 10\") == \"-1\"\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10\\n8 7\") == \"6 4\"\nassert solution(\"4 4\\n1 1 1 1\") == \"1 1 1 1\"\nassert solution(\"3 10\\n9 8 10\") == \"-1\"\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10\") == \"6 4\"\nassert solution(\"4 4\") == \"1 1 1 1\"\nassert solution(\"3 10\") == \"1 1 1 1\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution([\"4 10\", \"1 1 1 1\"]) == \"1 1 1 1\"\nassert solution([\"4 10\", \"1 1 1 1\"]) == \"1 1 1 1\"\nassert solution([\"4 10\", \"9 8 10\"]) == \"-1\"\nassert solution([\"3 10\", \"9 8 10\"]) == \"-1\"\nassert solution([\"3 10\", \"9 10 10\"]) == \"1 1 1 1\"\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10\\n8 7\") == \"6 4\"\nassert solution(\"4 4\\n1 1 1 1\") == \"1 1 1 1\"\nassert solution(\"3 10\\n9 8 10\") == \"-1\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 10\") == \"1 2\"\nassert solution(\"7 10\") == \"1 1 1 1\"\nassert solution(\"4 10\") == \"1 1 1 1\"\nassert solution(\"8 10\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\\n9 8 10\\n\") == \"1 1 1 1\"\nassert solution(\"4 4\\n1 1 1 1\\n\") == \"1 1 1 1\"\nassert solution(\"3 10\\n9 8 10\\n\") == \"1 1 1 1\"\nassert solution(\"3 10\\n9 8 10\\n\") == \"1 1 1 1\"\nassert solution(\"3 10\\n9 8 10\\n\") == \"1 1 1 1\"\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10\\n8 7') == '6 4'\nassert solution('4 4\\n1 1 1 1') == '1 1 1 1'\nassert solution('3 10\\n9 8 10') == '-1'\nassert solution('1 1\\n0') == '0'\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 8''') == '3 3'\nassert solution('''1 3''') == '4'\nassert solution('''2 3''') == '0 1'\nassert solution('''2 3''') == '0 1'"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 8\\n4 4\") == \"3 3\"\nassert solution(\"1 3\\n5\") == \"4\"\nassert solution(\"2 3\\n2 3\") == \"0 1\"\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 8\\n4 4\") == \"3 3\"\nassert solution(\"1 3\\n5\") == \"4\"\nassert solution(\"2 3\\n2 3\") == \"0 1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 8\\n4 4\") == \"3 3\"\nassert solution(\"1 3\\n5\") == \"4\"\nassert solution(\"2 3\\n2 3\") == \"0 1\"\n\"\"\""
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n4 4') == [0, 1, 0, 1]\nassert solution('1 3\\n5') == [4]\nassert solution('2 3\\n2 3') == [0, 1]\n\nsolution('2 8\\n4 4')\n\"\"\"\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4') == '3 3'\nassert solution('3 3') == '0 1'\nassert solution('1 3') == '4'\n\"\"\""
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 3\"\nassert solution(\"3 3\\n1 2 3\") == \"0 1\"\nassert solution(\"2 3\\n2 3\") == \"0 1\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n4 4') == '0 1 2 3'\nassert solution('2 3\\n2 3') == '0 1'\nassert solution('1 3\\n5') == '4'\nassert solution('2 3\\n2 3') == '0 1'\nassert solution('2 3\\n2 3') == '0 1'\n\"\"\"\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n4 5\") == \"3 3\"\nassert solution(\"1 10\\n1\") == \"0 1\"\nassert solution(\"2 8\\n4 4\") == \"3 3\"\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 8\\n4 4') == '3 3'\nassert solution('1 3\\n5') == '4'\nassert solution('2 3\\n2 3') == '0 1'\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 1 4 3') == 'Yes'\nassert solution('0 2 3 1') == 'No'\n\n\"\"\"\n\n\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 0 0\\n\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\\n\") == \"Yes\"\nassert solution(\"4\\n0 2 3 1\\n\") == \"No\"\nassert solution(\"5\\n4 2 1 4 3\\n\") == \"Yes\"\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 0 0\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\") == \"Yes\"\nassert solution(\"4\\n0 2 3 1\") == \"No\"\nprint(\"Check done.\")\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 0 0\") == 'Yes'\nassert solution(\"5\\n4 2 1 4 3\") == 'Yes'\nassert solution(\"4\\n0 2 3 1\") == 'No'"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 4 3\") == \"Yes\"\nassert solution(\"5 2 1 4 3\") == \"Yes\"\nassert solution(\"3 2 1 4 3\") == \"No\"\nassert solution(\"4 2 1 4 0\") == \"Yes\"\nassert solution(\"4 2 1 4 3\") == \"No\"\n\n\"\"\"\n\nimport math\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1 4 3') == 'Yes'\nassert solution('0 2 3 1') == 'No'"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 0 0\\n\") == \"Yes\"\nassert solution(\"4\\n4 2 1 4 3\\n\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\\n\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\") == \"No\"\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 0 0\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\") == \"Yes\"\nassert solution(\"4\\n0 2 3 1\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 2 1 4 3\") == \"Yes\"\nassert solution(\"4\\n0 2 3 1\") == \"No\"\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 0 0\") == \"Yes\"\nassert solution(\"4\\n4 2 1 4 3\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\") == \"No\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 3\\n2 3 6\") == 1\nassert solution(\"0 1 3\\n0 1 5\") == 2\nassert solution(\"0 0 0\\n1 2 2\") == 1\nassert solution(\"0 0 1\\n0 0 0\") == 1\nassert solution(\"1 1 1\\n1 2 1\") == 2\n"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 3\\n2 3 6\") == 1\n\"\"\"\n\nfrom collections import defaultdict\n\nl_a, r_a, t_a = [int(i) for i in input().split()]\nl_b, r_b, t_b = [int(i) for i in input().split()]\n"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 1 3\\n2 3 6') == '1'\nassert solution('0 2 5\\n1 3 5') == '2'\nassert solution('0 1 3\\n2 3 6') == '1'\nassert solution('0 1 3\\n2 3 6') == '1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 3\\n1 3 6\") == \"1\"\nassert solution(\"0 2 5\\n1 3 5\") == \"2\"\nassert solution(\"0 1 3\\n2 3 6\") == \"0\"\nassert solution(\"0 1 3\\n2 3 6\\n0 2 5\") == \"2\"\nassert solution(\"0 1 3\\n2 3 6\\n0 2 5\\n1 3 5\") == \"2\"\n"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 3\", \"2 3 6\", [0,1,2,3,4,5]) == 1\nassert solution(\"0 2 5\", \"1 3 5\", [0,1,2,3,4,5]) == 2\n"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2 5\\n1 3 5\") == \"2\"\n\nassert solution(\"0 1 3\\n2 3 6\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 2 5\\n1 3 5\") == 2\nassert solution(\"0 1 3\\n2 3 6\") == 1\nassert solution(\"0 1 1\\n1 1 1\") == 1\nassert solution(\"0 1 2\\n0 1 2\") == 1\nassert solution(\"0 1 2\\n1 1 1\") == 1\n"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 1 3\\n2 3 6') == '1'\n\nassert solution('0 1 3\\n2 3 5') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 2 5\\n1 3 5\") == \"2\"\nassert solution(\"0 1 3\\n2 3 6\") == \"1\"\nassert solution(\"0 1 3\\n2 3 6\\n0 1 1\") == \"2\"\nassert solution(\"0 2 5\\n1 3 5\\n0 1 1\") == \"1\"\nassert solution(\"0 2 5\\n1 3 5\\n0 1 1\\n0 1 2\") == \"0\""
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 3\\n2 3 6\") == \"1\"\nassert solution(\"0 1 5\\n1 3 5\") == \"2\"\n\n\"\"\"\n\nimport os\nfrom io import StringIO\nfrom typing import List\nimport unittest\n\nclass Test_class_task(unittest.TestCase):\n\n    def test_task_1(self):\n        self.assertEqual(solution(\"0 1 3\\n2 3 6\"), \"1\")\n\n    def test_task_2(self):\n        self.assertEqual(solution(\"0 1 5\\n1 3 5\"), \"2\")\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"89\") == 2\nassert solution(\"00\") == 4\nassert solution(\"73\") == 15\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"89\") == 2\n\"\"\""
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"89\") == 2\nassert solution(\"73\") == 15\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('89') == 2\nassert solution('00') == 4\nassert solution('73') == 15\n\"\"\"\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"89\") == 2\nassert solution(\"00\") == 4\nassert solution(\"73\") == 15\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"89\") == \"2\"\nassert solution(\"00\") == \"4\"\nassert solution(\"73\") == \"15\"\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('89') == 2\nassert solution('00') == 4\nassert solution('73') == 15\n\n\"\"\"\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"89\") == 2\n\"\"\"\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('89') == '2'\nassert solution('00') == '4'\nassert solution('73') == '15'\n\"\"\"\n\n\"\"\"\nThe digits are always in the range 0-99\n\nThe only broken stick was the one at floor 88\n\nThe only good number is 00\n\nThe only good number is 99\n\nThe only good number is 19\n\nThe only good number is 97\n\nThe only good number is 00\n\nThe only good number is 99\n\nThe only good number is 99\n\nThe only good number is 99\n\"\"\""
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"89\") == 2\nassert solution(\"00\") == 4\nassert solution(\"73\") == 15\n\"\"\"\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\\n3 3 4\") == \"1\\n1\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\n\n\"\"\""
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\") == \"1\\n1\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\nassert solution(\"10\\n10 10 10\\n10 10 10\\n10 10 10\\n10 10 10\\n10 10 10\\n10 10 10\\n10 10 10\\n10 10 10\\n10 10 10\") == \"0\"\n\nassert solution(\"10\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"6\"\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 5 5\n3 2 4\n1 4 1\n2 1 3\n3 2 4\n3 3 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10 7 8\n5 10 3\n4 2 6\n5 5 5\n10 2 8\n4 2 1\n7 7 7\n\"\"\") == \"2 1\"\nassert solution(\"\"\"\n10 7 8\n5 10 3\n4 2 6\n5 5 5\n10 2 8\n4 2 1\n7 7 7\n\"\"\") == \"2 1 5\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\") == \"1\\n1\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\n\n----"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\\n3 3 4\") == \"1\\n1\"\n\"\"\"\n\nfrom collections import deque\n\nclass Rect:\n    def __init__(self, x1, y1, x2, y2):\n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n        self.left = min(x1, x2)\n        self.right = max(x1, x2)\n        self.top = min(y1, y2)\n        self.bottom = max(y1, y2)\n        self.width = x2 - x1\n        self.height = y2 - y1\n        self.area = (x2 - x1) * (y2 - y1)\n        self.centerx = (x1 + x2) // 2\n        self.centery = (y1 + y2) // 2\n\n    def copy(self):\n        return Rect(self.x1, self.y1, self.x2, self.y2)\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}({self.x1}, {self.y1}, {self.x2}, {self.y2})\""
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 7 8\") == \"1\"\nassert solution(\"10 2 8\") == \"1 2\"\nassert solution(\"5 10 3\") == \"2\"\nassert solution(\"4 2 6\") == \"1 5\"\nassert solution(\"5 5 5\") == \"1\"\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\") == \"1\\n1\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\n\n\"\"\"\n\nn = int(input())\nres = []\n\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    res.append((a, b, c))\n\nres.sort()\n\nres = res[::-1]\n\nk = 0\na, b, c = 0, 0, 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        a, b, c = res[i]\n    else:\n        a, b, c = res[i]\n        k += 1"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 4\\n1 2 3\\n1 4 1\") == \"1 2\"\n\nprint(solution(\"2 3 4\\n1 2 3\\n1 4 1\"))\nassert solution(\"2 3 4\\n1 2 3\\n1 4 1\") == \"1 2\"\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\\n3 3 4\") == \"1\\n1\"\nassert solution(\"10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\nassert solution(\"7 7 7\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\nassert solution(\"7 7 7\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\nassert solution(\"7 7 7\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\n\n\"\"\""
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1\\n2 1 3\\n3 2 4\") == \"1 2\\n1 5\"\nassert solution(\"7 7 7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2 1\\n1 5\"\n\n\n\n\"\"\""
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 4\") == \"777773\"\n\n\"\"\"\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 4\\n3 7 8 4\") == \"777773\"\n\"\"\"\nfrom typing import List, Tuple\n\nnumbers = {1: 2, 2: 5, 3: 5, 4: 4, 5: 5, 6: 3, 7: 7, 8: 6, 9: 6}"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''20 4\n3 7 8 4''') == '777773'\nassert solution('''20 4\n3 7 8 4''') == '777773'\nassert solution('''20 4\n3 7 8 4''') == '777773'\nassert solution('''20 4\n3 7 8 4''') == '777773'\nassert solution('''20 4\n3 7 8 4''') == '777773'\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == '77777', 'incorrect result'\nassert solution('4 3') == '7777', 'incorrect result'\nassert solution('5 6') == '77777', 'incorrect result'\nassert solution('3 7 8 4') == '77777', 'incorrect result'\nassert solution('4 3 3 2') == '7777', 'incorrect result'\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7 8 4\\n\") == \"77777\"\nassert solution(\"3 7 8 4\\n\") == \"77777\"\nassert solution(\"2 5 5 4\\n\") == \"9999\"\nassert solution(\"4 5 5 4\\n\") == \"99999\"\nassert solution(\"10 20 30 40 50\\n\") == \"999999999\"\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4') == '1234'\n\nassert solution('3 1') == '23'\n\nassert solution('3 2') == '543'\n\nassert solution('4 3') == '12345'\n\nassert solution('3 5') == '2357'"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 4\\n3 7 8 4\") == \"777773\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 4\\n3 7 8 4\") == \"777773\"\n\"\"\"\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 4\\n3 7 8 4\") == \"777773\"\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 4\\n3 7 8 4\") == '777773'\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10\\n6 1 2 7') == '2'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10\\n6 1 2 7') == '2'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\\n6 1 2 7\") == \"2\"\n\"\"\"\n\nimport sys\n\nfrom icecream import ic"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\\n6 1 2 7\") == \"2\"\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 10\n6 1 2 7''') == '2'\n"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\\n6 1 2 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\\n6 1 2 7\") == \"2\"\n\"\"\"\n\nN, K = [int(x) for x in input().split()]\nA = list(map(int, input().split()))\n\ncurr_sum = 0\nans = 0\n\nfor i in range(N):\n    curr_sum += A[i]\n    if curr_sum >= K:\n        ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10\\n6 1 2 7') == '2'\n\"\"\"\n\n\"\"\"\nYou are given a sequence A = a_1, a_2,..., a_N, consisting of N integers.\nWe consider the sequence as a game (in the sense of Vieneuve's theorem), where A[i] represents the points scored by player 1 in the i-th turn.\nIn the game, A plays optimally, and her optimal strategy is to maximize the score in each turn.\nLet s(i) denote the score of A after the i-th turn.\nFor example, if the sequence is 5,2,4,6,1,3, then s(1)=5, s(2)=2, s(3)=4, s(4)=6, s(5)=1, and s(6)=3.\nLet's define C as the number of consecutive turns in which A[i]>=A[i+1] for 1\u2264i<N. For example, in the sequence 5,2,4,6,1,3, C is equal to 2.\nGiven the sequence A, find and print the value of C.\n\n-----Constraints-----\n - 1 \\leq A_i \\leq 10^5\n - 1 \\leq N \\leq 10^5\n\n-----Input-----\nThe first line of the input contains one integer T denoting the number of test cases.\nThe description of T test cases follows.\nEach test case contains two lines.\nThe first line contains two space-separated integers N and K.\nThe second line contains N space-separated integers A_1,A_2,...,A_N.\n\n-----Output-----\nPrint C for each test case in a separate line.\n\n-----Sample Input-----\n2\n6 10\n5 2 4 6 1 3\n5 4\n5 2 4 6 1\n\n-----Sample Output-----\n2\n3\n\nThe test case 2:\nIf A[1] = 5, A[2] = 2, A[3] = 4, A[4] = 6, A[5] = 1, A[6] = 3, then s(1)=5, s(2)=2, s(3)=4, s(4)=6, s(5)=1, s(6)=3.\nIn this game, A plays optimally. We can see that in the second turn, A must choose the number that is greater than or equal to A[6].\nIn the third turn, A must choose the number that is greater than or equal to A[5].\nIn the fourth turn, A must choose the number that is greater than or equal to A[4].\nIn the fifth turn, A must choose the number that is greater than or equal to A[3].\nIn the sixth turn, A must choose the number that is greater than or equal to A[2].\nIn the seventh turn, A must choose the number that is greater than or equal to A[1].\nSince s(1)=5, s(2)=2, s(3)=4, s(4)=6, s(5)=1, s(6)=3, then C is equal to 2.\n\"\"\""
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\\n6 1 2 7\") == \"2\"\n\"\"\"\n\nfrom math import inf\nfrom typing import List, Dict, Tuple, Any, Callable, Union\n\nNumber = Union[int, float]\n\nCONSTRAINT_OP = \">\"\n"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10\\n6 1 2 7') == '2'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 2 1\\n0 1 1\") == \"3\\n2 2 2 3\\n1 1 1 2\\n1 3 1 2\"\n\n\"\"\""
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3\n1 2 3\n0 1 1''') == '3\\n2 2 2 3\\n1 1 1 2\\n1 3 1 2\\n'\n"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n0 1 1\\n1 0 1\") == \"2 2 2 3\\n1 1 1 2\\n1 3 1 2\"\nassert solution(\"2 2\\n0 1 1\") == \"3 1 2\\n1 1 1 2\"\nassert solution(\"3 3\\n1 2 3\\n0 1 1\") == \"0 0 0 1\\n1 1 1 2\\n1 2 1 2\"\n\"\"\""
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(example_input) == example_output\n\"\"\""
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 2 3\\n0 1 1\\n') == '3\\n2 2 2 3\\n1 1 1 2\\n1 3 1 2'\n"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2 3\\n0 1 1\\n\") == \"3\\n2 2 2 3\\n1 1 1 2\\n1 3 1 2\\n\"\nprint(\"PASSED\")"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 2 3\\n0 1 1') == '3\\n2 2 2 3\\n1 1 1 2\\n1 3 1 2'\nassert solution('2 3\\n1 2 3\\n0 1 1') == '1\\n2 2 2 3\\n1 1 1 2'\n"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 3\n1 2 3\n0 1 1''') == '3\nassert solution('''2 3\n1 2 3\n0 1 1''') == '3\nassert solution('''1 1\n1 1''') == '0 0'\nassert solution('''3 2\n1 1\n1 3\n1 1''') == '1 3 1 2'\nassert solution('''5 2\n1 3\n2 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2 1 2 3 3\\n2 1 2 2 2 1\") == \"3\\n2 2 2 2 3\\n1 1 1 1 2\"\nassert solution(\"1 1\\n2 2\") == \"3\\n2 1\"\n"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n') == '10'\nassert solution('4 4\\n') == '4'\nassert solution('6 10\\n') == '18'\n\"\"\""
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"10\"\n\"\"\"\nimport numpy as np\n\nclass Solution:\n    def __init__(self, n: int, k: int):\n        self.n = n\n        self.k = k\n\n    def solve(self):\n        # Pick 0 or 1 for each room\n        # Pick 0, 1, or 2 for each move\n        # Reduce to linear problem:\n        # Choose 0 or 1 for each room\n        # Choose 0, 1, or 2 for each move\n        # All possiblities:\n        # n choose k\n        # n choose k - choose 2\n        # n choose k - choose 1\n        # n choose k - choose 0\n        # n choose k - 2 choose 1\n        # n choose k - 2 choose 0\n        # n choose k - 1 choose 1\n        # n choose k - 1 choose 0\n        # n choose k - 0 choose 1\n        # n choose k - 0 choose 0\n        print(np.math.factorial(self.n) // np.math.factorial(self.k) // np.math.factorial(self.n - self.k))\n        print(np.math.factorial(self.n) // np.math.factorial(self.n - self.k))\n        print(np.math.factorial(self.n) // np.math.factorial(self.n - self.k) // np.math.factorial(2))\n        print(np.math.factorial(self.n) // np.math.factorial(self.n - self.k) // np.math.factorial(1))\n        print(np.math.factorial(self.n) // np.math.factorial(self.n - self.k) // np.math.factorial(0))\n        print(np.math.factorial(self.n) // np.math.factorial(2) // np.math.factorial(1))\n        print(np.math.factorial(self.n) // np.math.factorial(2) // np.math.factorial(0))\n        print(np.math.factorial(self.n) // np.math.factorial(1) // np.math.factorial(1))\n        print(np.math.factorial(self.n) // np.math.factorial(1) // np.math.factorial(0))\n        print(np.math.factorial(self.n) // np.math.factorial(0) // np.math.factorial(1))\n        print(np.math.factorial(self.n) // np.math.factorial(0) // np.math.factorial(0))"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2') == '10'\n\"\"\"\n\nimport sys\nimport collections\n\nclass Building:\n    def __init__(self, n, k):\n        self.n = n\n        self.k = k\n        self.counter = collections.Counter(0 for i in range(n))\n        self.moves = [0 for i in range(n)]\n\n    def solve(self):\n        for i in range(self.k):\n            self.move()\n\n    def move(self):\n        self.counter[0] += 1\n        self.moves[0] += 1\n        for i in range(self.n):\n            self.counter[i] = self.moves[i] - self.moves[i - 1]\n\n    def print_all(self):\n        for i in range(self.n):\n            print('{} {} {}'.format(i, self.moves[i], self.counter[i]))\n\n    def count_all(self):\n        total = 0\n        for i in range(self.n):\n            total += self.counter[i] * (self.counter[i] - 1) // 2\n        print(total % (1e9 + 7))\n"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2') == '10'\n\"\"\""
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"10\"\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"10\"\n"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2') == 10\n\"\"\"\n\n\"\"\"\nA recursive solution\n\"\"\"\n"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"10\"\n\"\"\"\n\nimport math\n\nclass Solution:\n    def __init__(self, n: int, k: int) -> None:\n        self.n = n\n        self.k = k\n        self.cnt = 0\n        self.primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499]\n    \n    def binary_search(self, nums, n, k):\n        l, r = 0, n-1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == k:\n                return True\n            elif nums[mid] > k:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return False\n\n    def get_cnt(self):\n        return self.cnt\n        \n    def modulo(self):\n        return self.cnt % (10 ** 9 + 7)\n\n    def combinations(self, n, k):\n        self.cnt += 1\n        self.cnt %= (10 ** 9 + 7)\n        if n <= 0 or k <= 0:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            if n % 2 == 0:\n                return 1\n            else:\n                return 2\n        if k == n:\n            return 1\n        if self.binary_search(self.primes, n, k):\n            return 1\n        if k <= n // 2:\n            return self.combinations(n-1, k) + self.combinations(n-1, k-1)\n        else:\n            return self.combinations(n-1, k-1) + self.combinations(n-1, k)\n\n    def solution(self) -> str:\n        return str(self.combinations(self.n, self.k))\n"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 2''') == '10'\nassert solution('''3 1''') == '5'\nassert solution('''2 3''') == '1'\nassert solution('''2 1''') == '1'\n\n'''\n[0, 0, 3]\n[0, 1, 2]\n[0, 2, 1]\n[0, 3, 0]\n[1, 0, 2]\n[1, 1, 1]\n[1, 2, 0]\n[2, 0, 1]\n[2, 1, 0]\n[3, 0, 0]\n\n[0, 1, 1]\n[0, 2, 1]\n[0, 3, 1]\n[1, 0, 1]\n[1, 1, 1]\n[1, 2, 1]\n[2, 0, 1]\n[2, 1, 1]\n[3, 0, 1]\n[3, 1, 1]\n\n[0, 2, 1]\n[0, 3, 2]\n[1, 0, 2]\n[1, 1, 1]\n[1, 2, 1]\n[2, 0, 2]\n[2, 1, 2]\n[3, 0, 2]\n[3, 1, 2]\n[3, 2, 1]\n\n[0, 2, 2]\n[0, 3, 3]\n[1, 0, 3]\n[1, 1, 2]\n[1, 2, 2]\n[2, 0, 3]\n[2, 1, 3]\n[2, 2, 2]\n[3, 0, 3]\n[3, 1, 3]\n[3, 2, 3]\n'''"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\nassert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\nassert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\nassert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\nassert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 3 1 1 9') == '1 3'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3 1 1 9\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\n\n\"\"\"\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 1 1 9\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\nassert solution(\"4 4 4 1 1 7\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 4\\n3 3\\n3 2\\n3 1\\n4 4\\n4 3\\n4 2\\n4 1\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3 1 1 9\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 3 1 1 9') == '1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1'\n\"\"\"\n\nimport sys\nimport numpy\n\nn, m, x, y, z, p = [int(n) for n in sys.stdin.readline().split()]\na = [tuple(map(int, sys.stdin.readline().split())) for _ in range(p)]\n\na = numpy.array(a)\na = numpy.rot90(a, k=x, axes=(0, 1))\na = numpy.rot90(a, k=y, axes=(0, 1))\na = numpy.rot90(a, k=z, axes=(0, 1))\n\nprint('\\n'.join([' '.join(list(map(str, row))) for row in a]))\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 3 1 1 9') == '1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1'\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 3 1 1 9') == '1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1'\nassert solution('4 4 4 1 1 9') == '1 4\\n1 3\\n1 2\\n1 1\\n2 4\\n2 3\\n2 2\\n2 1\\n3 4\\n3 3\\n3 2\\n3 1'\nassert solution('4 4 4 1 1 9') == '1 4\\n1 3\\n1 2\\n1 1\\n2 4\\n2 3\\n2 2\\n2 1\\n3 4\\n3 3\\n3 2\\n3 1'\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 3 1 1 9\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\n\n\n-----Algorithm-----\n\n\"\"\""
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 0\n0 0''') == 'NO'\nassert solution('''2 3\n1 1 1\n1 1 1''') == 'YES\\n1 1 1\\n1 1 1'\nassert solution('''2 3\n0 0 0\n1 1 1''') == 'YES\\n0 1 0'\nassert solution('''3 3\n1 0 1 1\n1 0 1 1\n1 0 1 1''') == 'YES\\n1 1 0 1\\n1 0 1 1\\n1 0 1 1'\nassert solution('''2 2\n0 1 0\n1 1 1''') == 'YES\\n0 0 0'\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 0\\n0 0') == 'NO'\nassert solution('2 3\\n1 1 1\\n1 1 1') == 'YES\\n1 1 1\\n1 1 1'\nassert solution('2 3\\n0 1 0\\n1 1 1') == 'YES\\n0 0 0'"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 0\\n0 0\") == \"NO\"\nassert solution(\"2 3\\n1 1 1\\n1 1 1\") == \"YES\\n1 1 1\\n1 1 1\"\nassert solution(\"2 3\\n0 1 0\\n1 1 1\") == \"YES\\n0 0 0\"\n\n\"\"\""
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 0\\n0 0\") == \"NO\"\nassert solution(\"2 3\\n1 1 1\\n1 1 1\") == \"YES\\n1 1 1\\n1 1 1\"\nassert solution(\"2 2\\n0 1 0\\n0 1 0\") == \"YES\\n1 0 1\"\nassert solution(\"3 4\\n0 1 1 1\\n0 1 1 1\\n0 0 1 1\") == \"YES\\n1 0 1 0\\n1 1 1 1\"\nassert solution(\"2 4\\n1 1 1 1\\n1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 0\\n0 0\") == \"NO\"\nassert solution(\"2 3\\n1 1 1\\n1 1 1\") == \"YES\\n1 1 1\\n1 1 1\"\nassert solution(\"2 2\\n0 1 0\\n0 1 0\") == \"NO\""
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 0\\n0 0\") == \"NO\"\nassert solution(\"2 3\\n1 1 1\\n1 1 1\") == \"YES\\n1 1 1\\n1 1 1\"\n\"\"\"\n\nm, n = [int(i) for i in stdin.split(\" \")]\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 0\\n0 0\") == \"NO\"\nassert solution(\"2 3\\n1 1 1\\n1 1 1\") == \"YES\\n1 1 1\\n1 1 1\"\nassert solution(\"2 3\\n0 1 0\\n1 1 1\") == \"YES\\n0 1 0\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 1 1\\n1 1 1\") == \"YES\\n1 1 1\\n1 1 1\"\nassert solution(\"2 3\\n0 1 0\\n1 1 1\") == \"NO\"\nassert solution(\"2 3\\n1 1 1\\n0 1 0\") == \"NO\"\nassert solution(\"2 3\\n0 1 0\\n1 1 1\") == \"YES\\n0 0 0\"\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n1 1 1\n1 1 1\n''') == \"YES\\n1 1 1\\n1 1 1\"\nassert solution('''\n2 3\n0 1 0\n1 1 1\n''') == \"NO\"\nassert solution('''\n2 3\n0 0 0\n1 1 1\n''') == \"YES\\n1 1 1\"\nassert solution('''\n3 4\n1 1 0 1\n0 0 0 0\n0 0 1 1\n0 1 1 1\n''') == \"YES\\n1 1 1\\n0 0 0\\n0 0 1\"\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 2\n1 0\n0 0''') == 'NO'\nassert solution('''2 3\n1 1 1\n1 1 1''') == 'YES\\n1 1 1\\n1 1 1'''\nassert solution('''2 3\n0 1 0\n1 1 1''') == 'YES\\n0 0 0'''\nassert solution('''2 3\n1 1 1\n1 1 1''') == 'YES\\n1 1 1'\nassert solution('''2 2\n0 0\n0 0''') == 'YES\\n0 0 0'\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('helloo') == 'hello'\nassert solution('woooooow') == 'woow'\nassert solution('hello') == 'heloo'\nassert solution('heloo') == 'heloo'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\n\n\"\"\"\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\n\n\"\"\"\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\nassert solution(\"heloo\") == \"heloo\"\nassert solution(\"helloo\") == \"hello\"\n\"\"\"\n\n\nimport string\nimport copy\n\n\nclass Solution:\n    def __init__(self):\n        self.cache = {}\n\n    def check_word(self, word):\n        if word in self.cache:\n            return self.cache[word]\n\n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                for j in range(i + 1, len(word)):\n                    if word[j] == word[j - 1]:\n                        if word[:i] + word[j:] == word:\n                            self.cache[word] = True\n                            return True\n\n        self.cache[word] = False\n        return False\n\n    def delete_char(self, word):\n        if len(word) == 1:\n            return word\n\n        char = word[0]\n        new_word = word[1:]\n\n        while len(new_word) > 0:\n            if self.check_word(new_word):\n                return char + self.delete_char(new_word)\n            new_word = new_word[:-1]\n\n        return char\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('helloo') == 'hello'\nassert solution('woooooow') == 'woow'\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\n\nimport sys\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('helloo') == 'hello'\nassert solution('woooooow') == 'woow'\n\nimport unittest\nimport re\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('helloo'), 'hello')\n        self.assertEqual(solution('woooooow'), 'woow')"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('helloo') == 'hello'"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AS\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\nassert solution(\"3H 4C TH JH AD\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AS\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\nassert solution(\"4D\") == \"YES\"\n"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AS\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\nassert solution(\"AD\") == \"YES\"\n"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AS') == 'YES'\nassert solution('2H') == 'NO'\nassert solution('4D') == 'YES'"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AS\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\nassert solution(\"4D\") == \"YES\"\n\"\"\""
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2H 4C TH JH AD\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\n\"\"\"\n\nimport sys\n\nassert sys.version_info >= (3, 7)\n"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AS') == 'YES'\nassert solution('AH') == 'NO'\nassert solution('AD') == 'YES'\n\nprint('Success')\n"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AS') == 'YES'\nassert solution('2H') == 'NO'\n\"\"\"\n\nimport sys\nimport operator"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AS\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\nassert solution(\"4D\") == \"YES\"\n\"\"\""
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2H 4C TH JH AD\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\nassert solution(\"4D\") == \"YES\"\n"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"Malvika\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\n\"\"\"\n\nn, m = list(map(int, stdin.split()))"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == 'Malvika'\nassert solution('2 3') == 'Malvika'\nassert solution('3 3') == 'Akshat'\n"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"Malvika\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\n"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"Malvika\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"Malvika\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\n\"\"\""
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"Malvika\"\n\n\"\"\""
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"Malvika\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\n\n\"\"\""
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3') == 'Akshat'\nassert solution('2 2') == 'Malvika'\nassert solution('2 3') == 'Malvika'\nassert solution('3 2') == 'Akshat'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == 'Malvika'\nassert solution('2 3') == 'Malvika'\nassert solution('3 3') == 'Akshat'\n\"\"\"\n"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"Akshat\"\nassert solution(\"2 2\") == \"Malvika\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 2\") == \"Akshat\"\n\"\"\"\n"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 2 2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 2 2 1\") == \"2\"\nassert solution(\"9\\n100 200 300 200 100 300 300 100 200\") == \"300\"\n"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 3 2 2 1\n''') == '2'\n\nassert solution('''9\n100 200 300 200 100 300 300 100 200\n''') == '300'\n\nassert solution('''5\n3 3 1 2 2\n''') == '1'\n"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 3 2 2 1\n''') == '2'\n\nassert solution('''\n9\n100 200 300 200 100 300 300 100 200\n''') == '300'\n"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 2 2 1\") == '2'\nassert solution(\"9 100 200 300 200 100 300 300 100 200\") == '300'\n\"\"\"\n"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 3 2 2 1') == '2'\nassert solution('9\\n100 200 300 200 100 300 300 100 200') == '300'"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 2 2 1\") == '2'\n\nassert solution(\"9\\n100 200 300 200 100 300 300 100 200\") == '300'\n\n\nimport io\nimport sys\nfrom collections import defaultdict\nimport collections\n"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 2 2 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4\"\nassert solution(\"2\\n1 1\") == \"1\"\nassert solution(\"4\\n2 4 3 2 4\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 2 2 1') == '2'\nassert solution('9\\n100 200 300 200 100 300 300 100 200') == '300'"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0') == '16'\n\"\"\"\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == 16\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == \"16\"\n\"\"\""
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == 16\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0') == 16\n\"\"\"\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0') == 16\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom math import inf"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 3 5 2 5\\n0 1 1 1\") == 16\n\"\"\""
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 3 5 2 5 4\\n0 1 1 1 0 1 0\\n') == '16'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2 3 4\\n0 0 0 0') == '8'\nassert solution('4 3\\n1 2 3 4\\n1 1 1 0') == '15'\nassert solution('6 3\\n1 2 3 4 5 6 7\\n1 1 1 0 1 0 0') == '14'\n\"\"\"\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0\\n\") == 16\nprint(\"You are correct!\")\n\n\"\"\""
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"9 12\") == \"2 3 6\"\n"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3') == '1'\nassert solution('9 12') == '2'\nassert solution('1 2') == '0'\nassert solution('4 5') == '4'\n\n---"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"9 12\") == \"2\"\n\"\"\""
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == 1\nassert solution(\"9 12\") == 2\nassert solution(\"3 4\") == 1\nassert solution(\"7 8\") == 0\nassert solution(\"4 3\") == 0\n"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3') == '1'\nassert solution('9 12') == '2 3 6'\nassert solution('9 3') == '2 1'\n"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == 1\nassert solution(\"9 12\") == 2\nassert solution(\"1 1\") == 0\n"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"9 12\") == \"2\"\nassert solution(\"7 11\") == \"3\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 12\") == \"2 3 6\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"9 12\") == \"2 3 6\"\nassert solution(\"10 100\") == \"10\"\n\"\"\""
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"9 12\") == \"2\"\nassert solution(\"2 1\") == \"3\""
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"9 12\") == \"2 3 6\"\nassert solution(\"6 12\") == \"2 1 4 5\"\n\nimport sys"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n\") == \"1 2 3 3 2 2 1\"\nassert solution(\"9 3\\n3 6 9\\n2 5 8\\n1 4 7\\n\") == \"1 1 1 2 2 2 3 3 3\"\nassert solution(\"5 2\\n4 1 5\\n3 1 2\\n\") == \"2 3 1 1 3\"\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n\") == \"1 2 3 3 2 2 1\"\nassert solution(\"9 3\\n3 6 9\\n2 5 8\\n1 4 7\\n\") == \"1 1 1 2 2 2 3 3 3\"\n\"\"\"\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n1 2 3\\n1 4 5\\n4 6 7\") == \"1 2 3 3 2 2 1 \"\nassert solution(\"9 3\\n3 6 9\\n2 5 8\\n1 4 7\") == \"1 1 1 2 2 2 3 3 3 \"\nassert solution(\"5 2\\n4 1 5\\n3 1 2\") == \"2 3 1 1 3 \"\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''9 3\n3 6 9\n2 5 8\n1 4 7''') == '1 1 1 2 2 2 3 3 3'\n\"\"\""
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n') == '1 2 3 3 2 2 1'\nassert solution('9 3\\n3 6 9\\n2 5 8\\n1 4 7\\n') == '1 1 1 2 2 2 3 3 3'\nassert solution('5 2\\n4 1 5\\n3 1 2\\n') == '2 3 1 1 3'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\\n1 4 5\\n4 6 7\\n3\\n3\\n2\\n1\\n2\\n2\\n2\\n3\\n1\\n2\\n2\\n2\\n3\\n3\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3\\n4 5 6\") == \"1 2 3 3 2 2 1\"\n\nassert solution(\"9 3\\n3 6 9\\n2 5 8\\n1 4 7\") == \"1 1 1 2 2 2 3 3 3\"\n\nassert solution(\"7 3\\n1 2 3\\n4 5 6\\n4 6 7\") == \"1 1 1 2 2 2 3 3 3\"\n\n\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\ndance = set()\nfor _ in range(m):\n    for dancer in map(int, stdin.readline().split()):\n        dance.add(dancer)\n\ndance = list(dance)\ndance.sort()\n\ndancers = [[] for _ in range(n + 1)]\n\nfor d in dance:\n    dancers[d].append(d)\n\nfor i in range(1, n + 1):\n    if len(dancers[i]) == 1:\n        if dancers[i][0] % 3 == 0:\n            dancers[i] = ['1'] * 3\n        elif dancers[i][0] % 3 == 1:\n            dancers[i] = ['2'] * 3\n        elif dancers[i][0] % 3 == 2:\n            dancers[i] = ['3'] * 3\n\nprint(\" \".join([str(i) for i in dancers[1:]]))\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n\") == \"1 2 3 3 2 2 1\"\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n\") == \"1 2 3 3 2 2 1\"\nassert solution(\"9 3\\n3 6 9\\n2 5 8\\n1 4 7\\n\") == \"1 1 1 2 2 2 3 3 3\"\nassert solution(\"5 2\\n4 1 5\\n3 1 2\\n\") == \"2 3 1 1 3\"\n\nimport sys\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n4 1 5\\n3 1 2\\n\") == '2 3 1 1 3'\nassert solution(\"7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n\") == '1 2 3 3 2 2 1'\n\"\"\"\n\n\nfrom itertools import combinations\n"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == 0\nassert solution(\"2 5 3\") == 1\nassert solution(\"100 10 10\") == 81\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\") == 0\nassert solution(\"2 5 3\") == 1\nassert solution(\"100 10 10\") == 81\n"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"0\"\nassert solution(\"2 5 3\") == \"1\"\nassert solution(\"100 10 10\") == \"81\"\n\"\"\"\n"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 5\") == '0'\nassert solution(\"2 5 3\") == '1'\nassert solution(\"100 10 10\") == '81'\n"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '0'\nassert solution('2 5 3') == '1'\nassert solution('100 10 10') == '81'\n\n\"\"\"\n"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"0\"\nassert solution(\"2 5 3\") == \"1\"\nassert solution(\"100 10 10\") == \"81\"\n\n\"\"\"\n\nimport sys\nimport math\n\n\"\"\"\nstep 1:\nsince the smallest one is 100 and the largest is 100,"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 5') == 0\nassert solution('2 5 3') == 1\nassert solution('100 10 10') == 81\nprint('The solution is correct!')\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == \"0\"\nassert solution(\"2 5 3\") == \"1\"\nassert solution(\"100 10 10\") == \"81\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"0\"\nassert solution(\"2 5 3\") == \"1\"\nassert solution(\"100 10 10\") == \"81\"\n\"\"\"\nimport sys"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13 3\") == 'even'\nassert solution(\"10 9\") == 'odd'\nassert solution(\"99 5\") == 'odd'\nassert solution(\"2 2\") == 'even'\n"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 3\") == \"even\"\nassert solution(\"10 9\") == \"odd\"\nassert solution(\"99 5\") == \"odd\"\nassert solution(\"2 2\") == \"even\""
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13 3\") == \"even\"\nassert solution(\"99 5\") == \"odd\"\nassert solution(\"99 0\") == \"even\"\nassert solution(\"2 2\") == \"even\"\nassert solution(\"1 0\") == \"odd\"\n"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13 3\") == \"even\"\nassert solution(\"10 9\") == \"odd\"\nassert solution(\"99 5\") == \"odd\"\nassert solution(\"2 2\") == \"even\"\nassert solution(\"1 0\") == \"even\"\n\n\nsolution(\"13 3\")\nsolution(\"10 9\")\nsolution(\"99 5\")\nsolution(\"2 2\")\nsolution(\"1 0\")\n\"\"\"\nimport math"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13 3') == 'even'\nassert solution('99 5') == 'odd'\nassert solution('32 92 85 74 4') == 'odd'\nassert solution('1 0') == 'even'\nassert solution('2 2') == 'even'\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13 3') == \"even\"\nassert solution('99 5') == \"odd\"\nassert solution('10 9') == \"odd\"\nassert solution('2 2') == \"even\"\nassert solution('1 0') == \"even\"\n"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 3\") == \"even\"\nassert solution(\"10 9\") == \"odd\"\nassert solution(\"99 5\") == \"odd\"\nassert solution(\"2 2\") == \"even\"\n\n\"\"\"\n\nimport unittest\nfrom collections import defaultdict\nfrom typing import Dict\nfrom typing import List\n\nfrom tools import timing\n\n\nclass Solution:\n    def _is_odd(self, n: int) -> bool:\n        return n % 2 == 1\n\n    def _to_base(self, n: int, base: int) -> int:\n        if self._is_odd(n):\n            return n * base + 1\n        else:\n            return n * base\n\n    def _to_decimal(self, n: int, base: int) -> int:\n        s = 0\n        while n:\n            s, n = s + n % base * 10, n // base\n        return s\n\n    def solve(self, base: int, k: int, a: List[int]) -> int:\n        n = self._to_base(0, base)\n        for i in range(k):\n            n = self._to_base(n, base) + a[i]\n        return self._to_decimal(n, base)\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    @timing.time_it\n    def test_solution(self):\n        assert self.solution.solve(17, 3, [11, 15, 7]) == 3179 + 255 + 7\n        "
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13 3\") == \"even\"\nassert solution(\"99 5\") == \"odd\"\nassert solution(\"2 2\") == \"even\"\n\"\"\"\n\nfrom collections import deque\n\nb, k = [int(i) for i in input().split()]\ns = input()\nn = int(s)"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13 3') == 'even'\nassert solution('10 9') == 'odd'\nassert solution('99 5') == 'odd'\nassert solution('2 2') == 'even'\nassert solution('1 0') == 'even'\n\n\"\"\""
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13 3\\n3 2 7') == 'even'\nassert solution('10 9\\n1 2 3 4 5 6 7 8 9') == 'odd'\nassert solution('99 5\\n32 92 85 74 4') == 'odd'\nassert solution('2 2\\n1 0') == 'even'\nprint('test passed')"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2 2 2\") == \"Possible\\n1 1 2 2 2 \"\nassert solution(\"5 3 2 2 2\") == \"Impossible\"\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2 2 2\") == \"Possible\\n1 1 2 2 2\"\nassert solution(\"5 3 2 2 2\") == \"Impossible\"\nassert solution(\"4 0 1 2 3\") == \"Impossible\"\nassert solution(\"10 1 2 3 4 5 6 7 8 9 10\") == \"Impossible\"\n\nSolution:"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2 2 2\") == \"Possible\"\nassert solution(\"5 3 2 2 2\") == \"Possible\"\nassert solution(\"4 3 2 2 2\") == \"Impossible\"\nassert solution(\"2 1 2 2 2\") == \"Impossible\"\n\n\n'''\n\nimport sys\nimport collections"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 2 2 2\") == \"Possible\"\nassert solution(\"3 3 2 2 2\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2 2 2\") == \"Possible\"\nassert solution(\"5 3 2 2 2\") == \"Impossible\"\nassert solution(\"4 3 2 2 2\") == \"Impossible\"\nassert solution(\"5 1 1 1 1\") == \"Impossible\"\nassert solution(\"4 3 2 2 2\") == \"Impossible\"\n\n\"\"\""
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2 2 2\") == \"Possible\\n1 1 2 2 2\"\nassert solution(\"5 3 2 2 2\") == \"Impossible\"\nassert solution(\"4 0 1 2 3\") == \"Impossible\"\nassert solution(\"5 3 2 2 2\") == \"Impossible\"\n\n\"\"\"\n\nfrom collections import Counter\n\nn = int(stdin.readline())\nhats = list(map(int, stdin.readline().split()))\n\nhats_counter = Counter(hats)"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0 0\\n\") == \"Possible\\n1 1 1\"\nassert solution(\"5\\n3 3 2 2 2\\n\") == \"Possible\\n1 1 2 2 2\"\nassert solution(\"4\\n0 1 2 3\\n\") == \"Impossible\"\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1\") == \"Possible\"\nassert solution(\"3 3 2 2 2\") == \"Possible\"\nassert solution(\"5 3 2 2 2\") == \"Impossible\"\nassert solution(\"4 0 1 2 3\") == \"Impossible\"\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0 0') == 'Possible\\n1 1 1'\nassert solution('5\\n3 3 2 2 2') == 'Possible\\n1 1 2 2 2'\nassert solution('4\\n0 1 2 3') == 'Impossible'\nassert solution('5\\n3 3 2 2 2') == 'Impossible'\n\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, *A = [int(i) for i in stdin.split('\\n')]\n        a = sorted(A)\n        res = []\n        \n        for i in range(1, n+1):\n            m = n\n            for j in range(i):\n                if a[j] >= i:\n                    m = j\n                    break\n            res.append(i - m)\n        \n        return 'Possible\\n' +''.join([str(i) for i in res])\n\n\nclass Solution2:\n    def solution(self, stdin: str) -> str:\n        n, *A = [int(i) for i in stdin.split('\\n')]\n        m = {}\n        for i in range(n):\n            if A[i] not in m:\n                m[A[i]] = [i]\n            else:\n                m[A[i]].append(i)\n        res = []\n        for i in range(1, n+1):\n            if i not in m:\n                res.append(i)\n            else:\n                if len(m[i]) > 1:\n                    res.append(i)\n                    for j in range(1, i):\n                        if j not in m:\n                            res.append(j)\n                else:\n                    res.append(i)\n        \n        return 'Possible\\n' +''.join([str(i) for i in res])\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 1\\n') == 'Possible\\n1 1 1'\nassert solution('5\\n3 3 2 2 2\\n') == 'Impossible'\nassert solution('4\\n0 1 2 3\\n') == 'Impossible'\n\"\"\""
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 2 3') == '6'\nassert solution('5\\n999999999 999999999 999999999 999999999 999999999') == '3999999996'\n\n\"\"\"\n\nn = int(input())\nnum = list(map(int, input().split(' ')))\nnum.sort()\ntotal = 0\nfor i in range(n):\n    total += num[i]\n    if total % 2 == 0:\n        print(total)\n        break"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == expected_result\n\n\"\"\""
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n4 5 6\") == '12'\nassert solution(\"1 2 3 4 5\\n9 9 9 9 9\") == '8'\n\"\"\"\n"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n999999999 999999999 999999999 999999999 999999999\") == \"3999999996\""
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == 6\nassert solution(\"5\\n999999999 999999999 999999999 999999999 999999999\") == 3999999996"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == 6\n\n\"\"\""
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"12\\n\"\nassert solution(\"5\\n2 3 5 4 6\") == \"20\\n\"\n\"\"\"\n"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '9'\nassert solution('3\\n4 5 6') == '12'\n\"\"\""
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '6'\nassert solution('5\\n999999999 999999999 999999999 999999999 999999999') == '3999999996'\n\"\"\"\n"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == '6'\n\nprint(solution(\"5\\n999999999 999999999 999999999 999999999 999999999\"))\n\"\"\"\n\nimport os"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n3 4\") == \"2\\n2 2 1\"\nassert solution(\"6\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\") == \"3\\n1 1\\n2 2 3\"\n\"\"\"\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n3 4\\n3 2\") == \"2\\n2 2 1\"\nassert solution(\"6\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\") == \"3\\n1 1\\n2 2 3\"\nassert solution(\"7\\n5 4\\n3 2\\n1 3\\n4 6\\n5 7\") == \"3\\n1 1\\n2 2 3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n3 4\") == '2\\n2 2 1'\n\"\"\""
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n3 4\") == \"2\\n2 2 1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nroads = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n3 4\") == \"2\\n2 2 1\"\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == expected_result\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n3 4\\n3 2\") == \"2\\n2 2 1\"\n\"\"\""
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n3 4\") == \"2\\n2 2 1\"\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n3 4\") == \"2\\n2 2 1\"\nassert solution(\"6\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\") == \"3\\n1 1\\n2 2 3\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, namedtuple\n\nRoad = namedtuple('Road', ['city1', 'city2'])\n\nn = int(sys.stdin.readline().rstrip())\nroads = []\nfor _ in range(n - 1):\n    city1, city2 = map(int, sys.stdin.readline().rstrip().split())\n    roads.append(Road(city1, city2))\n\ndp = [None] * (n + 1)\ndp[0] = 0\nfor i in range(n + 1):\n    for road in roads:\n        if i + road[1] <= n:\n            if dp[i] is None or dp[i] + 1 < dp[i + road[1]]:\n                dp[i + road[1]] = dp[i] + 1\n\nmin_days = min(dp[n])\ndp = dp[1:]\nfor i in range(min_days):\n    print(min_days, end=' ')\n    print(*[j for j, v in enumerate(dp) if v == min_days])\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2\\n3 4') == '2\\n2 2 1'\nassert solution('6\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6') == '3\\n1 1\\n2 2 3'\n\n\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 10 5 15\") == \"yes\"\nassert solution(\"4\\n0 15 5 10\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 10 5 15\") == \"yes\"\nassert solution(\"4\\n0 15 5 10\") == \"no\"\n\n\"\"\"\n\nimport math\nimport sys\n\nn = int(input())\nlst = list(map(int, input().split()))"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 10 5 15\\n\") == \"yes\"\nassert solution(\"4\\n0 15 5 10\\n\") == \"no\"\n\n\"\"\"\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 10 5 15\") == \"yes\"\nassert solution(\"4\\n0 15 5 10\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 10 5 15\") == \"yes\"\nassert solution(\"4\\n0 15 5 10\") == \"no\"\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n0 10 5 15\n''') == 'yes'\nassert solution('''4\n0 15 5 10\n''') == 'no'\nassert solution('''4\n5 10 10 5\n''') == 'yes'\nassert solution('''4\n10 10 5 5\n''') == 'no'\nassert solution('''6\n0 1 3 5 6\n''') == 'yes'\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 10 5 15\") == \"yes\\n\"\nassert solution(\"4\\n0 15 5 10\") == \"no\\n\"\nassert solution(\"4\\n-10 10 10 10\") == \"yes\\n\"\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 10 5 15\\n') == 'yes'\nassert solution('4\\n0 15 5 10\\n') == 'no'\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 10 5 15') == 'yes'\nassert solution('4\\n0 15 5 10') == 'no'\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 10 5 15') == 'yes'\nassert solution('4\\n0 15 5 10') == 'no'\n\n\n\"\"\"\n"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0 1\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\nassert solution(\"4\\n0 1 1 0\") == \"EASY\"\n\"\"\""
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0 1\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\nassert solution(\"2\\n0 0\") == \"EASY\"\nassert solution(\"3\\n1 1 1\") == \"EASY\"\n\"\"\"\n"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n0\\n0') == 'EASY'\nassert solution('3\\n1\\n1\\n0') == 'HARD'\n\"\"\""
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0 1\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\n\"\"\"\n"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0 1\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\n"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0 1\") == \"HARD\"\nassert solution(\"3\\n0 1 1\") == \"EASY\""
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 1\") == \"HARD\"\nassert solution(\"0\") == \"EASY\"\nassert solution(\"1 0\") == \"EASY\"\nassert solution(\"0 1\") == \"HARD\"\nassert solution(\"1 1\") == \"HARD\"\n\"\"\"\n"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1\\n0\") == \"HARD\"\nassert solution(\"2\\n0\\n1\") == \"EASY\"\nassert solution(\"1\\n0\") == \"EASY\"\n\"\"\""
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\nassert solution(\"5\\n0 0 1 0 0\") == \"HARD\"\nassert solution(\"6\\n0 0 1 0 0 1\") == \"EASY\"\n\"\"\""
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0 1') == 'HARD'\nassert solution('1\\n0') == 'EASY'\n\nprint('Hooray!')\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2 2\"\nassert solution(\"6\") == \"3 3\"\nassert solution(\"9\") == \"3 6\"\n\"\"\"\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '2 2'\nassert solution('6') == '3 3'\nassert solution('9') == '3 6'\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\\n6\") == \"2 2\"\nassert solution(\"4\\n6\") == \"3 3\"\nassert solution(\"9\") == \"3 6\"\n\n\"\"\"\n\n\"\"\"\nTest Cases\n\"\"\"\n\"\"\"\n3\n4\n6\n9\n\"\"\"\n\"\"\"\nOutput\n2 2\n3 3\n3 6\n\"\"\"\n\n\"\"\"\nThe main logic of the problem is in the fact that LCM(a, b) = L*a + b, where L is the least common multiple of a and b. This is because it is possible that LCM(a, b) - L*a = b, which can be rearranged to 0 = b - L*a, which implies that the LCM is L*a + b. \n\"\"\"\n\n\"\"\"\nWe are going to first find all the factors of n, and then try to find the smallest LCM (m) for each pair of integers (a, b). Then for every pair, if m = L*a + b, then we have found the answer. We can achieve this in O(n) time complexity, and O(n) space complexity, since we are using a hash table to store the factors.\n\"\"\""
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n') == '1 2'\nassert solution('2\\n2') == '1 2'\nassert solution('2\\n2\\n') == '1 2'\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n6\\n9') == '2 2\\n3 3\\n3 6'\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n6') == '2 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n6') == '2 2'\nassert solution('9') == '3 6'\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def lcm(self, a, b):\n        return a * b // self.gcd(a, b)\n\n    def gcd(self, a, b):\n        return a if b == 0 else self.gcd(b, a % b)\n\n    def solve(self, n):\n        for i in range(int(n ** 0.5), 0, -1):\n            if n % i == 0:\n                return i, n // i\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n6') == '2 2'\nassert solution('9') == '3 3'"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '2 2'\nassert solution('6') == '3 3'\nassert solution('9') == '3 6'\n\"\"\"\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n6\\n9\") == '2 2'\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\") == \"1\"\nassert solution(\"4 2\\nfac\\ncef\") == \"2\"\nassert solution(\"1 4\\nface\") == \"0\"\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\") == '1'\nassert solution(\"4 2\\nxx\\ncf\\nae\") == '1'\nassert solution(\"1 4\\nface\") == '0'\nassert solution(\"2 3\\nfac\\ncef\") == '2'\nassert solution(\"1 4\\nface\") == '0'\n\"\"\""
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\") == \"1\"\nassert solution(\"4 2\\nfac\\ncef\") == \"2\"\nassert solution(\"1 4\\nface\") == \"0\"\n\nsolution(\"4 2\\nfac\\ncef\")\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\nxxx\\nxfax\\nxcex\\nxxx') == '1'\nassert solution('4 2\\nfac\\ncef') == '2'\nassert solution('1 4\\nface') == '0'\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('fac') == '1'\nassert solution('face') == '2'\nassert solution('xxxx') == '1'\nassert solution('xfax') == '1'\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\") == \"1\"\n\nassert solution(\"4 2\\nfac\\ncef\") == \"2\"\n\nassert solution(\"1 4\\nface\") == \"0\"\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\nfac\\ncef\") == '2'\nassert solution(\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\") == '1'\nassert solution(\"1 4\\nface\") == '0'\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\nfac\\ncef\") == 1\nassert solution(\"1 4\\nface\") == 0\nassert solution(\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\") == 1\nassert solution(\"4 2\\nfac\\ncef\") == 2"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\") == \"1\"\nassert solution(\"4 2\\nfac\\ncef\") == \"2\"\nassert solution(\"1 4\\nface\") == \"0\"\nassert solution(\"2 3\\nfac\\ncef\") == \"2\"\n\n\"\"\"\nimport sys\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\nxxx\\nxfax\\nxcex\\nxxxx\") == \"1\"\nassert solution(\"4 2\\nfac\\ncef\") == \"2\"\nassert solution(\"1 4\\nface\") == \"0\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('61803398874989484820458683436563811772030917980576') == '61803398874989484820458683436563811772030917980576'\n\"\"\"\n\na, b = map(int, input().split())\n\nlcm = a * b // gcd(a, b)\nprint(lcm)\n"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('61803398874989484820458683436563811772030917980576') == '61803398874989484820458683436563811772030917980576'\n"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 2''') == '1'\nassert solution('''61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576''') == '61803398874989484820458683436563811772030917980576'\n"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n') == '1'\nassert solution('61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\\n') == '61803398874989484820458683436563811772030917980576'\nassert solution('12345 12345\\n') == '12345'\nassert solution('6 1803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\\n') == '61803398874989484820458683436563811772030917980576'\nassert solution('1 5\\n') == '1'\n\"\"\""
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n') == '1'\nassert solution('61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\\n') == '61803398874989484820458683436563811772030917980576'\nassert solution('123456789 123456789\\n') == '123456789'\n\n\"\"\""
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 2''') == '1'\nassert solution('''1 9999999''') == '999999'\n\"\"\"\n"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n') == '1'\nassert solution('61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\\n') == '61803398874989484820458683436563811772030917980576'\n"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\") == \"61803398874989484820458683436563811772030917980576\"\n\"\"\""
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1**2\\na3*0\\nc4**\") == \"1\"\nassert solution(\"5 5\\n#*&#\\n*a1c&\\n&q2w*\\n#a3c#\\n*&#*&\") == \"3\""
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n1**2\\na3*0\\nc4**\") == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4') == '1'\nassert solution('5 5') == '3'\nassert solution('5 5') == '3'\nassert solution('5 5') == '3'\nassert solution('5 5') == '3'\n"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"5 5\") == \"3\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n#*&#*\\n*a1c&\\n&q2w*\\n#a3c#\\n*&#*&\") == 3"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n1**2\\na3*0\\nc4**') == '1'\nassert solution('5 5\\n#*&#\\n*a1c&\\n&q2w*\\n#a3c#\\n*&#*&') == '3'\n\"\"\""
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4') == '1'\nassert solution('5 5') == '3'\n"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"5 5\") == \"3\"\n"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\", \"1**2\", \"a3*0\", \"c4**\") == \"1\"\nassert solution(\"5 5\", \"#*&#\", \"*a1c&\", \"&q2w*\", \"#a3c#\", \"*&#*&\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n99') == '0'\n\nassert solution('1\\n1') == '0'\n\n\"\"\"\n\n\nfrom math import ceil"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == '1'\nassert solution('99') == '0'\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n99') == '0'\nassert solution('3\\n111') == '1'\nassert solution('3\\n1011') == '1'\nassert solution('3\\n1101') == '1'\nassert solution('3\\n11101') == '1'\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == '1'\nassert solution('99') == '0'\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n99\") == '0'\nassert solution(\"3\\n11\") == '1'\n\"\"\"\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n11\") == '1'\nassert solution(\"3\\n99\") == '0'\n\n\"\"\"\n\nk, n = list(map(int, input().split('\\n')))\n\nnum_str = str(n)\ni = 0\n\nwhile k > 0:\n    k -= int(num_str[i])\n    i += 1\n    if i > len(num_str) - 1:\n        break\n\nprint(len(num_str) - i)\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n99\") == \"0\"\nassert solution(\"3\\n11\") == \"1\"\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\") == \"2\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '0'\nassert solution('11') == '1'\nassert solution('99') == '0'\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def min_dif_sum(self, n: str, k: int) -> int:\n        if len(n) == 1:\n            if int(n) >= k:\n                return 0\n            else:\n                return 1\n\n        n_list: List[int] = [int(i) for i in n]\n        temp_n_sum: int = 0\n        n_sum: int = 0\n        for i in n_list:\n            temp_n_sum += i\n            n_sum += i\n            if temp_n_sum >= k:\n                break\n        \n        if n_sum - k <= 9:\n            return 0\n        else:\n            return len(n_list) - n_list.index(n_list[-1]) - 1\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"11\") == \"1\"\nassert solution(\"99\") == \"0\"\n\"\"\"\nimport re\nimport sys"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4\") == \"2 2\\n1 3\"\n\"\"\"\n\n\"\"\"\nSample Input\n5 6\n2 1 1\n5 2 6\n2 3 2\n3 4 3\n4 5 5\n1 5 4\n\nSample Output\n2 2\n1 3\n\"\"\"\n\n\"\"\"\nfrom collections import deque\nfrom math import inf\n\nn, m = [int(x) for x in input().split()]\n\nstart = [[] for _ in range(n + 1)]\nend = [[] for _ in range(n + 1)]\ncost = [[] for _ in range(n + 1)]\n\nfor _ in range(m):\n    u, v, c = [int(x) for x in input().split()]\n    start[u].append(v)\n    end[v].append(u)\n    cost[u].append(c)\n    cost[v].append(c)"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4\") == \"2 2\\n1 3\"\nassert solution(\"5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1\") == \"3 3\\n3 4 7\"\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\n\nfrom typing import List\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4\") == '2 2\\n1 3'\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4\") == \"2 2\\n1 3\"\nassert solution(\"5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1\") == \"3 3\\n3 4 7\"\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4\") == \"2 2\\n1 3\"\nassert solution(\"5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1\") == \"3 3\\n3 4 7\"\n\n\"\"\"\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4') == '2 2\\n1 3'\nassert solution('5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1') == '3 3\\n3 4 7'\nassert solution('5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1') == '3 3\\n3 4 7'\n\"\"\"\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1\"\n) == \"3 3\\n3 4 7\"\n\"\"\""
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4\") == \"2 2\\n1 3\"\nassert solution(\"5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1\") == \"3 3\\n3 4 7\""
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1') == '2 2\\n1 3'\nassert solution('5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1') == '3 3\\n3 4 7'\n"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 4 3 6 7 1') == '1 2 4 3 6 7 5'\nassert solution('5 4 3 2 1') == '1 2 3 4 5'\nassert solution('4 2 1 5 3') == '1 2 3 4 5'\n\nfrom collections import Counter, defaultdict, OrderedDict"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 4 3 6 7 1') == '1 2 4 3 6 7 5'\n"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n5 2 4 3 6 7 1\") == \"1 2 4 3 6 7 5\"\nassert solution(\"5\\n4 2 1 5 3\") == \"1 2 3 4 5\"\n\"\"\"\n"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1000001\\n0000000\\n0010000\") == \"1 2 4 3 6 7 5\"\nassert solution(\"5\\n4 2 1 5 3\\n00100\\n00011\\n10010\\n01101\\n01010\") == \"1 2 3 4\"\n"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1001000\\n1001000\\n1001000\") == \"1 2 4 3 6 7 5\"\nassert solution(\"5\\n4 2 1 5 3\\n00100\\n00011\\n10010\\n01101\\n01010\") == \"1 2 3 4\"\n"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n5 2 4 3 6 7 1\") == \"1 2 4 3 6 7 5\"\nassert solution(\"5\\n4 2 1 5 3\") == \"1 2 3 4 5\"\n\"\"\"\nimport sys\n\nassert len(sys.argv) == 3\nn = int(sys.argv[1])\np = list(map(int, sys.argv[2].split(' ')))\na = [[0] * n for i in range(n)]\nfor i in range(n):\n    a[i][p[i] - 1] = 1\nfor line in sys.stdin:\n    row = [int(c) for c in line.split(' ')]\n    assert len(row) == n\n    for i in range(n):\n        if row[i]!= 0:\n            assert a[i][row[i] - 1] == 1\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                "
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 4 3 6 7 1\") == '1 2 4 3 6 7 5'\nassert solution(\"4 2 1 5 3\") == '1 2 3 4 5'\n\nprint(solution('4 2 1 5 3'))"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n5 2 4 3 6 7 1') == '1 2 4 3 6 7 5'\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1000001\\n0000000\\n0010000\") == \"1 2 4 3 6 7 5\"\nassert solution(\"5\\n4 2 1 5 3\\n00100\\n00011\\n10010\\n01101\\n01010\") == \"1 2 3 4\"\n\n-----Problem-----\nUser ainta has a permutation p_1, p_2,..., p_{n}. As the New Year is coming, he wants to make his permutation as pretty as possible.\n\nPermutation a_1, a_2,..., a_{n} is prettier than permutation b_1, b_2,..., b_{n}, if and only if there exists an integer k (1 \u2264 k \u2264 n) such that a_1 = b_1, a_2 = b_2,..., a_{k} - 1 = b_{k} - 1 and a_{k} < b_{k} all holds.\n\nAs known, permutation p is so sensitive that it could be only modified by swapping two distinct elements. But swapping two elements is harder than you think. Given an n \u00d7 n binary matrix A, user ainta can swap the values of p_{i} and p_{j} (1 \u2264 i, j \u2264 n, i \u2260 j) if and only if A_{i}, j = 1.\n\nGiven the permutation p and the matrix A, user ainta wants to know the prettiest permutation that he can obtain.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 300) \u2014 the size of the permutation p.\n\nThe second line contains n space-separated integers p_1, p_2,..., p_{n} \u2014 the permutation p that user ainta has. Each integer between 1 and n occurs exactly once in the given permutation.\n\nNext n lines describe the matrix A. The i-th line contains n characters '0' or '1' and describes the i-th row of A. The j-th character of the i-th line A_{i}, j is the element on the intersection of the i-th row and the j-th column of A. It is guaranteed that, for all integers i, j where 1 \u2264 i < j \u2264 n, A_{i}, j = A_{j}, i holds. Also, for all integers i where 1 \u2264 i \u2264 n, A_{i}, i = 0 holds.\n\n\n-----Output-----\n\nIn the first and only line, print n space-separated integers, describing the prettiest permutation that can be obtained.\n\n\n-----Examples-----\nInput\n7\n5 2 4 3 6 7 1\n0001001\n0000000\n0000010\n1000001\n0000000\n0010000\n1001000\n\nOutput\n1 2 4 3 6 7 5\n\nInput\n5\n4 2 1 5 3\n00100\n00011\n10010\n01101\n01010\n\nOutput\n1 2 3 4\n\n\n\n-----Note-----\n\nIn the first sample, the swap needed to obtain the prettiest permutation is: (p_1, p_7).\n\nIn the second sample, the swaps needed to obtain the prettiest permutation is (p_1, p_3), (p_4, p_5), (p_3, p_4).  [Image] \n\nA permutation p is a sequence of integers p_1, p_2,..., p_{n}, consisting of n distinct positive integers, each of them doesn't exceed n. The i-th element of the permutation p is denoted as p_{i}. The size of the permutation p is denoted as n.\n"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1001000\\n011010') == '1 2 4 3 6 7 5'\nassert solution('7\\n4 2 1 5 3\\n00100\\n00011\\n10010\\n01101\\n01010') == '1 2 3 4 5'\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\") == 4\nassert solution(\"abbc\") == 5\nassert solution(\"abbcdd\") == 10\nassert solution(\"abcd\") == 4\n\n\"\"\""
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\n\"\"\""
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"abcd\"\n) == 4\nassert solution(\n    \"bbb\"\n) == 1\nassert solution(\n    \"yzyz\"\n) == 2\n\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcd') == 4\nassert solution('bbb') == 1\nassert solution('yzyz') == 2\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcd') == 4\nassert solution('bbb') == 1\nassert solution('yzyz') == 2\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\n\n\"\"\"\nimport collections"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\nprint('Success')"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5 C\\n6 B\\n16 BAC\") == \"15\"\nassert solution(\"2\\n10 AB\\n15 BA\") == \"16\"\nassert solution(\"5\\n10 A\\n9 BC\\n11 CA\\n4 A\\n5 B\") == \"13\"\nassert solution(\"6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA\") == \"250\"\nassert solution(\"2\\n5 BA\\n11 CB\") == \"16\"\n\"\"\"\n\n\nimport collections\nimport functools\n"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 C\\n6 B\\n16 BAC\\n4 A\\n\") == \"15\"\nassert solution(\"2\\n5 BA\\n11 CB\\n\") == \"16\"\nassert solution(\"6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA\\n\") == \"250\"\n"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 C\\n6 B\\n16 BAC\\n4 A\") == \"15\"\nassert solution(\"2\\n5 BA\\n11 CB\") == \"16\"\nassert solution(\"5\\n10 A\\n9 BC\\n11 CA\\n4 A\\n5 B\") == \"13\"\nassert solution(\"6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA\") == \"250\"\n\n\"\"\"\n"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5 C\\n6 B\\n16 BAC') == '15'\nassert solution('5\\n10 A\\n9 BC\\n11 CA\\n4 A') == '-1'\nassert solution('6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA') == '250'\nassert solution('2\\n5 BA\\n11 CB') == '16'\n\"\"\"\n\nimport sys\nimport os\nimport time"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5 C\\n6 B\\n16 BAC\") == \"15\\n\"\nassert solution(\"2\\n10 AB\\n15 BA\") == \"16\"\nassert solution(\"5\\n10 A\\n9 BC\\n11 CA\\n4 A\\n5 B\") == \"13\\n\"\nassert solution(\"6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA\") == \"250\"\n\nimport collections"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5 C\\n6 B\\n16 BAC\\n4 A\") == \"15\"\nassert solution(\"2\\n5 BA\\n11 CB\") == \"16\"\nassert solution(\"5\\n10 A\\n9 BC\\n11 CA\\n4 A\\n5 B\") == \"13\"\nassert solution(\"6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA\") == \"250\"\n\nprint(solution(input()))\n\n'''\n\nimport sys\n\nn = int(input())\n\nvitamins = {\"A\", \"B\", \"C\"}\n\nvitamins_qty = [0, 0, 0]\nvitamin_prize = [0, 0, 0]\n\nfor i in range(n):\n    qty, vitamin = input().split()\n    vitamins_qty[vitamins.index(vitamin)] += int(qty)"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5 C\\n6 B\\n16 BAC') == '15\\n'\nassert solution('2\\n10 AB\\n15 BA') == '-1'\nassert solution('5\\n10 A\\n9 BC\\n11 CA\\n4 A') == '13'\nassert solution('6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA') == '250'\n\"\"\""
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10 A\\n9 BC\\n11 CA\\n4 A\\n5 B\\n\") == \"13\"\nassert solution(\"6\\n10 AB\\n15 BA\\n16 AC\\n18 B\\n190 CA\\n\") == \"250\"\n\"\"\""
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 C\\n6 B\\n16 BAC\") == \"15\"\nassert solution(\"5 A\\n6 B\\n16 BAC\") == \"-1\"\nassert solution(\"5 B\\n6 B\\n16 BAC\") == \"16\"\nassert solution(\"5 A\\n9 BC\\n11 CA\\n4 A\\n5 B\\n\") == \"13\"\nassert solution(\"6 C\\n10 BC\\n11 B\\n4 A\\n5 B\\n\") == \"16\"\n"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5 C\\n6 B\\n16 BAC\") == \"15\"\nassert solution(\"2\\n10 AB\\n15 BA\") == \"16\"\nassert solution(\"5\\n10 A\\n9 BC\\n11 CA\\n4 A\\n5 B\") == \"13\"\nassert solution(\"6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA\") == \"250\"\nassert solution(\"2\\n5 BA\\n11 CB\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 51\n10 23\n23 42\n39 42\n10 39\n39 58''') == '10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42'\nprint('\u0420\u0435\u0448\u0435\u043d\u043e!')\n'''\n\u0415\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0434\u0440\u0443\u0437\u044c\u044f\u043c\u0438 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0430. \u0414\u043b"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_expected\n\"\"\"\n\nimport math\n\nm, k = [int(i) for i in input().split()]\nfriends_list = {i: [] for i in range(1, m + 1)}\nfor _ in range(m):\n    a, b = [int(i) for i in input().split()]\n    friends_list[a].append(b)\n    friends_list[b].append(a)\n\nfor _ in range(k):\n    x = int(input())\n    friend_list = set(friends_list[x])"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58\") == \"10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42\"\n\"\"\""
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58') == '10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42'\nassert solution('5 100\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '1: 0\\n2: 0\\n3: 1 4\\n4: 1 3'\n'''\n"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58\") == \"10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42\"\n\"\"\"\n\nm, k = [int(i) for i in input().split()]\n\nd = {}\nfor i in range(m):\n    d[i] = []\n    l = [int(i) for i in input().split()]\n    d[l[0]].append(l[1])\n    for j in range"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58') == '10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42'\nassert solution('5 100\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '1: 0\\n2: 0\\n3: 1 4\\n4: 1 3'\n\"\"\"\n"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0432 \u043c\u0435\u043d\u044e \u00ab\u041f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u0430\u00bb.\n\"\"\"\n\nimport collections"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58\") == \"10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42\"\n\"\"\"\n\nm, k = map(int, input().split())\na = {}\nb = {}\nfor _ in range(m):\n    x, y = map(int, input().split())\n    a[x] = a.get(x, []) + [y]\n    b[y] = b.get(y, [])"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58\") == \"10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42\"\nassert solution(\"5 100\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"1: 0\\n2: 0\\n3: 1 4\\n4: 1 3\\n\"\n\"\"\"\n\n\nimport collections\n\nfriends = {}\n\nfor i in range(int(input())):\n"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 51\n10 23\n23 42\n39 42\n10 39\n39 58''') == '''10: 1 42\n23: 1 39\n39: 1 23\n42: 1 10\n58: 2 10 42'''\n\nassert solution('''5 100\n1 2\n1 3\n1 4\n2 3\n2 4''') == '''1: 0\n2: 0\n3: 1 4\n4: 1 3'''\n\nassert solution('''3 1\n2 2\n3 2''') == '''2: 0\n3: 0'''\n\nassert solution('''"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\nassert solution(\"hiedi\") == \"NO\"\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"abcheaibcdi\"\n) == \"YES\"\n\nassert solution(\n    \"hiedi\"\n) == \"NO\"\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\nassert solution(\"hiedi\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcheaibcdi') == 'YES'\nassert solution('hiedi') == 'NO'\nassert solution('abhecdi') == 'YES'\nassert solution('hdeici') == 'YES'\nassert solution('hedhhee') == 'NO'\n\"\"\""
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\nassert solution(\"hiedi\") == \"NO\"\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\nassert solution(\"hiedi\") == \"NO\"\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcheaibcdi') == 'YES'\nassert solution('hiedi') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcheaibcdi') == 'YES'\nassert solution('hiedi') == 'NO'\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"af\") == \"db\"\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abracadabra', 3) == 'cdr'\nassert solution('abracadabra', 2) == 'cba'\nassert solution('abracadabra', 1) == 'bracada'\nassert solution('abracadabra', 0) == 'a'\nassert solution('aaaaaaa', 0) == 'aaaaaaa'\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"af\") == \"db\"\nassert solution(\"bear\") == \"roar\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"af\") == \"db\"\nassert solution(\"bear\") == \"roar\"\nassert solution(\"qwerty\") == \"pwwkew\"\nassert solution(\"a b c\") == \"d\"\nassert solution(\"aa bb cc dd ee\") == \"ff gg hh ii jj\"\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nassert solution(stdin) == stdout\n\nassert solution(stdin) == stdout\nassert solution(stdin) == stdout\n\nassert solution(stdin) == stdout\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"af\") == \"db\"\nassert solution(\"bear\") == \"roar\"\n\"\"\"\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('af') == 'db'\n\nassert solution('bear') == 'roar'\n\nassert solution('hey') == '-1'\nassert solution('hello') == '-1'\nassert solution('hello, world!') == '-1'\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open('test_00_input.txt').read()) == \"baz\"\nassert solution(open('test_01_input.txt').read()) == \"tazz\"\nassert solution(open('test_02_input.txt').read()) == \"dazz\"\nassert solution(open('test_03_input.txt').read()) == \"bazz\"\n\"\"\"\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"af\", 7) == \"db\"\nassert solution(\"hey\", 1000) == \"-\"\n\"\"\"\nimport sys\nfrom collections import defaultdict, deque"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bear\") == \"roar\"\nassert solution(\"hey\") == \"db\"\nassert solution(\"asd\") == \"asd\"\n\n\"\"\""
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 1000\") == \"2\"\nassert solution(\"4 4 100500\") == \"1\"\nassert solution(\"3 4 7\") == \"3\"\nassert solution(\"4 3 8\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 100500\\n1010\\n0101\\n1001\") == \"1\"\nassert solution(\"3 1 1000\\n011\") == \"2\"\n"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 100500\\n0110\\n1010\\n0101\\n1001\") == 1\nassert solution(\"3 1 1000\\n011\") == 2"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 1000\\n011\\n\") == \"2\"\nassert solution(\"4 4 100500\\n0110\\n1010\\n0101\\n1001\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 1000') == '1'\n\"\"\""
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 100500\\n0110\\n1010\\n0101\\n1001') == 1\nassert solution('4 1 100500\\n0110\\n1010\\n0101\\n1001') == 2\n\n'''\n\nn, m, mod = [int(i) for i in input().split()]\ns = [input() for i in range(m)]\n\ntotal = 0\nfor row in s:\n    ones = sum([row[i] == '1' for i in range(n)])\n    total += 2 * ones - n\nprint(total % mod)"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 1000\") == \"2\"\nassert solution(\"4 4 100500\") == \"1\"\nassert solution(\"2 2 100500\") == \"0\"\n"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1000\") == \"2\"\nassert solution(\"4 4 100500\") == \"1\""
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 100') == '2'\nassert solution('4 4 100500') == '1'\n"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 100500\\n1101\\n1010\\n0101\\n1001\") == \"1\"\nassert solution(\"4 4 100500\\n1101\\n1010\\n0101\\n1001\") == \"1\"\nassert solution(\"3 1 100500\\n101\\n010\\n101\") == \"2\"\nassert solution(\"3 1 100500\\n101\\n010\\n101\") == \"2\"\nassert solution(\"3 1 100500\\n101\\n010\\n101\") == \"2\"\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3') == '11'\nassert solution('1 2') == '3'\nassert solution('4 6') == '10'\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6\") == \"10\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"10 10\") == \"0\"\n\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"6 3\"\n) == \"11\"\n\"\"\""
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n6 3\n\"\"\") == \"11\"\n\nassert solution(\n\"\"\"\n1 2\n\"\"\") == \"3\"\n\nassert solution(\n\"\"\"\n4 6\n\"\"\") == \"10\"\n\nassert solution(\n\"\"\"\n4 1\n\"\"\") == \"1\"\n\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''\n6 3\n''') == '11'\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3') == '11'\nassert solution('1 2') == '3'\nassert solution('4 6') == '10'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3') == '11'\n\nassert solution('1 2') == '3'\n\nassert solution('4 6') == '10'"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\n\nassert solution(\"2 1\\n\") == \"3\"\n\nassert solution(\"4 6\\n\") == \"10\"\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2') == '3'\nassert solution('4 6') == '10'\nassert solution('10 2') == '7'\nassert solution('10 6') == '4'\n\n\"\"\"\n\nn, k = map(int, input().split())\n\nprint((n - 1) // k + 1)\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3') == '11'\nassert solution('1 2') == '3'\n\"\"\"\n\nn, k = input().strip().split(' ')\nn, k = [int(n), int(k)]\n\np = n // k\nq = n % k\n\nprint(min(q * p, (q + 1) * p))\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 2 5 2 3') == 14\nassert solution('5 1 3 1 5 2 4 2 5') == 9\nassert solution('9 5 1 3 1 5 2 4 2 5') == 9\n\n\"\"\"\n\n\nimport math\nfrom functools import reduce\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n4 4 2 5 2 3\") == 14\n\nassert solution(\"9\\n5 1 3 1 5 2 4 2 5\") == 9\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 3 1 5 2 4 2 5') == '9'\nassert solution('4 4 2 5 2 3') == '14'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n4 4 2 5 2 3') == '14'\nassert solution('9\\n5 1 3 1 5 2 4 2 5') == '9'\nprint('The local tests are done. Try Solution Online')\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(4) == 14\nassert solution(9) == 9\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 2 5 2 3') == 14\nassert solution('9 1 3 1 5 2 4 2 5') == 9"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n4 4 2 5 2 3\") == \"14\"\nassert solution(\"9\\n5 1 3 1 5 2 4 2 5\") == \"9\"\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 2 5 2 3\") == \"14\"\nassert solution(\"5 1 3 1 5 2 4 2 5\") == \"9\""
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n4 4 2 5 2 3\") == 14\nassert solution(\"9\\n5 1 3 1 5 2 4 2 5\") == 9\n\n\nfrom functools import reduce"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 2 5 2 3') == 14\nassert solution('9 5 1 3 1 5 2 4 2 5') == 9\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\") == \"3\\n1\\n2\\n4\"\n\"\"\"\n\nimport sys\n\nfrom src.graph.directed_graph import DirectedGraph\nfrom src.priority_queue import PriorityQueue\n"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3') == '3\\n1\\n2\\n4\\n'\n\n\"\"\"\n\nimport sys\nimport numpy as np\nimport pprint\n"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3\") == \"3\\n1\\n2\\n4\"\n\"\"\"\nfrom typing import Dict, List, Set, Tuple\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\n\nN_M = INPUT_LINES[0].split(\" \")\nN = int(N_M[0])\nM = int(N_M[1])\n\nVERTEX_NUMBER = N\nEDGES = []\nVERTEX_TO_EDGES: Dict[int, List[Tuple[int, int]]] = {}\nVERTEX_TO_IN_DEGREE: Dict[int, int] = {}\nVERTEX_TO_OUT_DEGREE: Dict[int, int] = {}\n\nfor i in range(1, N + 1):\n    VERTEX_TO_IN_DEGREE[i] = 0\n    VERTEX_TO_OUT_DEGREE[i] = 0\n\nfor line in INPUT_LINES[1:]:\n    VERTEX_A, VERTEX_B = map(int, line.split(\" \"))\n    EDGES.append((VERTEX_A, VERTEX_B))\n    VERTEX_TO_EDGES.setdefault(VERTEX_A, []).append((VERTEX_A, VERTEX_B))\n    VERTEX_TO_EDGES.setdefault(VERTEX_B, []).append((VERTEX_B, VERTEX_A))\n\n    VERTEX_TO_IN_DEGREE[VERTEX_A] += 1\n    VERTEX_TO_OUT_DEGREE[VERTEX_B] += 1\n\nclass Subgraph:\n    def __init__(self, vertices: Set[int], edges: Set[Tuple[int, int]]) -> None:\n        self.vertices = vertices\n        self.edges = edges\n\n    def __str__(self) -> str:\n        vertices_string = ','.join(str(i) for i in self.vertices)\n        edges_string = ','.join(f\"{i},{j}\" for i, j in self.edges)\n\n        return f\"{len(self.vertices)}\\n{vertices_string}\\n{len(self.edges)}\\n{edges_string}\"\n\n    def contains_vertex(self, vertex: int) -> bool:\n        return vertex in self.vertices"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3\") == \"3\\n1\\n2\\n4\\n\"\n\"\"\"\n"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\") == \"3\\n1\\n2\\n4\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\") == \"3\\n1\\n2\\n4\"\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\") == \"3\\n1\\n2\\n4\"\n\"\"\""
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n4 1\") == \"3\\n1\\n2\\n4\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nimport unittest\n"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3\") == \"3\\n1\\n2\\n4\\n\"\nassert solution(\"4 3\\n1 2\\n2 3\\n2 4\") == \"0\\n\"\nassert solution(\"5 4\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3\") == \"-1\\n\""
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n4 1\") == \"3\\n1\\n2\\n4\"\n\"\"\"\n"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys\nimport networkx as nx"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n2 4') == '3\\n1\\n2\\n4'\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\") == \"4\"\n\"\"\"\n\n\"\"\"\nUseful links:\nhttps://www.geeksforgeeks.org/modulo-operators/\n\n\"\"\""
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 1\\n3 4\\n1 3') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 1\\n3 4') == '4'\n\"\"\"\n\n\"\"\"\nfrom typing import List\nimport unittest\n\n\nclass Solution:\n    def __init__(self):\n        self.MOD = 998244353\n        self.cache = {}\n\n    def solve(self, n: int, k: int, dirs: List[str]):\n        if (n, k) in self.cache:\n            return self.cache[(n, k)]\n\n        if n == k:\n            return 1\n        if k == 0:\n            return 0\n        if dirs[0] == '1':\n            # move right, and right\n            self.cache[(n, k)] = (self.solve(n + 1, k, dirs[1:]) +\n                                  self.solve(n + int(dirs[1]), k - 1, dirs[2:])) % self.MOD\n            return self.cache[(n, k)]\n        if dirs[0] == '2':\n            # move left, and right\n            self.cache[(n, k)] = (self.solve(n + 1, k, dirs[1:]) +\n                                  self.solve(n + 1, k - 1, dirs[2:])) % self.MOD\n            return self.cache[(n, k)]\n\n    def solve_naive(self, n: int, k: int, dirs: List[str]):\n        if n == k:\n            return 1\n\n        if k == 0:\n            return 0\n\n        if dirs[0] == '1':\n            # move right, and right\n            return (self.solve(n + 1, k, dirs[1:]) +\n                    self.solve(n + int(dirs[1]), k - 1, dirs[2:])) % self.MOD\n        if dirs[0] == '2':\n            # move left, and right\n            return (self.solve(n + 1, k, dirs[1:]) +\n                    self.solve(n + 1, k - 1, dirs[2:])) % self.MOD\n\n    def solve_naive2(self, n: int, k: int, dirs: List[str]):\n        # if n == k:\n        #     return 1\n\n        # if k == 0:\n        #     return 0\n\n        # if dirs[0] == '1':\n        #     # move right, and right\n        #     return (self.solve_naive(n + 1, k, dirs[1:]) +\n        #             self.solve_naive(n + int(dirs[1]), k - 1, dirs[2:])) % self.MOD\n        # if dirs[0] == '2':\n        #     # move left, and right\n        #     return (self.solve_naive(n + 1, k, dirs[1:]) +\n        #             self.solve_naive(n + 1, k - 1, dirs[2:])) % self.MOD\n\n        d = int(dirs[0])\n        self.cache[(n, k)] = (self.solve_naive(n + d, k, dirs[1:]) +\n                              self.solve_naive(n + d, k - 1, dirs[2:])) % self.MOD\n\n        return self.cache[(n, k)]\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def tearDown(self):\n        pass\n\n    def test_solution(self):\n        self.assertEqual(\n            self.solution.solve(n=5, k=2, dirs=['1', '1', '2', '3', '4']), 4)\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\") == 4\n\"\"\"\n\nfrom itertools import product\nfrom collections import deque, namedtuple\nfrom bisect import bisect_left\nimport string\nimport sys\nimport math\nimport array"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\\n\") == \"4\"\n\"\"\"\n\nimport itertools\n\nclass Segment:\n    def __init__(self, a: int, b: int) -> None:\n        self.start = a\n        self.end = b\n\n    def __repr__(self) -> str:\n        return f\"{self.start} - {self.end}\""
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\") == \"4\"\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\") == \"4\"\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\") == 4\n\"\"\"\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nl = []\nfor i in range(k):\n    l.append(list(map(int, sys.stdin.readline().split())))\n\ns = set()\nfor i in range(n):\n    s.add(i + 1)\n\nfor i in range(n):\n    for j in range(k):\n        s = s.union({i + l[j][0] + 1, i + l[j][1] + 1})\n\nprint(len(s) % 998244353)\n"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 5 5 2\") == '5'\nassert solution(\"4 4 2 6 4 2\") == '6'\n\"\"\""
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\n\"\"\"\n\n\nimport sys\n\nsys.setrecursionlimit(111111)"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 1 2 5 5 2\"\n    ) == \"5\"\n\nassert solution(\n    \"4 4 2 6 4 2\"\n    ) == \"6\"\n\nassert solution(\n    \"3 4 1 4 3 4 1 1 1 1 1 1 1\"\n    ) == \"1\"\n\n\"\"\"\n\nfrom typing import List\n\nfrom collections import namedtuple\nfrom math import sqrt\nfrom typing import Union"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\n\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\".\n\nSample Input:\n\n\\w denotes word character\nNo slashes are preceded by word characters.\n\nSample Output:\n\n\\w denotes word character\n\"\"\"\n"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 2 6 4 2\") == \"6\"\nassert solution(\"5 1 2 5 5 2\") == \"5\"\n"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\""
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\nassert solution(\"1 1 1 1 1 1\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7\") == \"7\"\n\"\"\""
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\n\"\"\"\nimport math"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(solution(str(input())))"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AFFAAA\") == \"4\"\nassert solution(\"AFI\") == \"1\"\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AFFAAA\") == 4\nassert solution(\"AFI\") == 1\n\"\"\"\n\nn = int(input())\nlist_input = input()\n\nl_in = list(list_input)\n\ncows = 0\n\nfor i in range(len(l_in)):\n    if l_in[i] == \"I\" and (l_in[i+1] == \"I\" or l_in[i+1] == \"F\"):\n        cows += 1\n\nprint(cows)\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6\nAFFAAA\n''') == '4'\nassert solution('''3\nAFI\n''') == '1'\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\nAFFAAA\") == \"4\"\nassert solution(\"3\\nAFI\") == \"1\"\n\"\"\""
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AFI\") == '1'\nassert solution(\"AI\") == '0'\nassert solution(\"A\") == '1'\nassert solution(\"I\") == '1'\nassert solution(\"AFFAAA\") == '4'\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\nAFI\\n\") == \"4\"\nassert solution(\"3\\nAFI\\n\") == \"1\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AFFAAA\") == \"4\"\nassert solution(\"AFI\") == \"1\"\nprint(\"Success\")\n\n-----\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AFFAAA\") == 4\nassert solution(\"AFI\") == 1\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\nAFI\n''') == '1'\nassert solution('''3\nAFI\n''') == '1'\nassert solution('''3\nAFFAAA\n''') == '4'\nassert solution('''4\nAFFAIF\n''') == '4'\nassert solution('''4\nIFFAAF\n''') == '2'\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AAAAFFAAA') == '4'\nassert solution('AI') == '1'\n\n\"\"\""
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1987\") == \"2013\"\nassert solution(\"2013\") == \"2014\"\nassert solution(\"1988\") == \"2009\"\nassert solution(\"2015\") == \"2017\"\nassert solution(\"1908\") == \"1943\"\n"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1987') == '2013'\nassert solution('2013') == '2014'\nassert solution('2007') == '2017'\n\"\"\"\n"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1987\") == \"2013\"\nassert solution(\"2013\") == \"2014\"\nassert solution(\"1970\") == \"2070\"\n\"\"\""
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1987') == '2013'\nassert solution('2013') == '2014'\nassert solution('2020') == '2021'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1987) == 2013\n\"\"\"\nfrom typing import Generator\nfrom math import ceil"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1987\") == \"2013\"\nassert solution(\"2013\") == \"2014\"\n"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1987\") == \"2013\"\nassert solution(\"2013\") == \"2014\"\n\"\"\""
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1987') == '2013'\nassert solution('2013') == '2014'"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1987') == '2013'\nassert solution('2013') == '2014'\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1987') == '2013'\nassert solution('2013') == '2014'"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '5\\n'\n    '5 2 1 3 4\\n'\n) == '2'\nassert solution(\n    '3\\n'\n    '1 2 3\\n'\n) == '0'\nassert solution(\n    '4\\n'\n    '4 3 2 1\\n'\n) == '3'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 1 3 4') == 2\nassert solution('3 1 2') == 0\nassert solution('4 3 2 1') == 3\n\"\"\"\n"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5 2 1 3 4\") == \"2\\n\"\nassert solution(\"3\\n1 2 3\") == \"0\\n\"\nassert solution(\"4\\n4 3 2 1\") == \"3\\n\"\n"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 1 3 4') == '2'\nassert solution('4 3 2 1') == '0'\nassert solution('3 1 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5 2 1 3 4\") == \"2\"\nassert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"4\\n4 3 2 1\") == \"3\"\nassert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"1\\n1\") == \"0\"\n"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1 3 4\") == \"2\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution(\"4 3 2 1\") == \"3\""
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 2 1 3 4\"\n) == \"2\"\nassert solution(\n    \"3 1 2\"\n) == \"0\"\nassert solution(\n    \"4 3 2 1\"\n) == \"3\"\n\n\"\"\""
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1 3 4\") == \"2\"\nassert solution(\"1 2 3\") == \"0\"\n"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 1 3 4') == '2'\nassert solution('3 1 2') == '0'\nassert solution('4 3 2 1') == '3'\n"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n5 2 1 3 4') == 2\n\nassert solution('4\\n4 3 2 1') == 0\n\nassert solution('3\\n1 2 3') == 3\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('gennady korotkevich\\npetr mitrichev\\ngaoyuan chen') == 'YES'\nassert solution('rean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10') == 'YES'\nassert solution('gennady korotkevich\\npetr mitrichev\\ngaoyuan chen') == 'NO'\nassert solution('rean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10') == 'YES'\n\n'''\n\nfrom typing import List\nfrom itertools import permutations\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\\n') == 'NO'\nassert solution('2\\ngalileo galilei\\nnicolaus copernicus\\n2 1\\n') == 'YES'\nassert solution('10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n1 2 3 4 5 6 7 8 9 10\\n') == 'NO'\nassert solution('10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10\\n') == 'YES'\n\n-------"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\") == \"NO\"\nassert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n3 1 2\") == \"YES\"\nassert solution(\"2\\ngalileo galilei\\nnicolaus copernicus\\n2 1\") == \"YES\"\nassert solution(\"10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n1 2 3 4 5 6 7 8 9 10\") == \"NO\"\nassert solution(\"10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10\") == \"YES\"\n\"\"\"\nimport sys\nfrom typing import List\nimport bisect\n\n\nclass CustomException(Exception):\n    pass\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\\n') == 'NO'\nassert solution('10\\ngalileo galilei\\nnicolaus copernicus\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10\\n') == 'YES'\n\n\"\"\""
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\\n\") == \"NO\"\nassert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n3 1 2\\n\") == \"YES\"\nassert solution(\"2\\ngalileo galilei\\nnicolaus copernicus\\n2 1\\n\") == \"YES\"\nassert solution(\"10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n1 2 3 4 5 6 7 8 9 10\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\") == \"NO\"\nassert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\") == \"YES\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"gennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\\n\") == \"NO\"\nassert solution(\"rean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10\\n\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3') == 'NO'\nassert solution('3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n3 1 2') == 'YES'\nassert solution('2\\ngalileo galilei\\nnicolaus copernicus\\n2 1') == 'YES'\nassert solution('10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n1 2 3 4 5 6 7 8 9 10') == 'NO'\nassert solution('10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10') == 'YES'\n\"\"\"\nimport collections\nimport itertools\n\nfrom typing import List\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\") == \"NO\"\nassert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\") == \"NO\"\nassert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\") == \"NO\"\nassert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\") == \"NO\"\nassert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\") == \"NO\"\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ami') == '-1'\nassert solution('no') == '-1'\nassert solution('cba') == '2'\nassert solution('abc') == '2'\nassert solution('cbaabc') == '2'\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"ayrat\") == \"ayrat\"\nassert solution(\"ami\") == -1\nassert solution(\"aaabrytaaa\") == \"aaabrytaaa\"\nassert solution(\"ami\") == -1\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ami\") == -1\n\ns = input()\nt = input()\n\nn = len(t)\n\nans = float(\"-inf\")\n\nfor i in range(len(s) - n + 1):\n    s_sub = s[i:i+n]\n    if s_sub == t:\n        ans = i\n        break\n\nprint(ans)\n\ns = input()\nt = input()\n\nn = len(t)\n\nans = float(\"-inf\")\n\nfor i in range(len(s) - n + 1):\n    s_sub = s[i:i+n]\n    if s_sub == t:\n        ans = i\n        break\n\nprint(ans)"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ami\") == '-1'\nassert solution(\"no\") == '-1'\n\"\"\"\n\n\"\"\"\nstrings = stdin\nt = stdin"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaabrytaaa') == '-1'\nassert solution('ami') == '3'\nassert solution('no') == '-1'\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abc\") == \"cba\"\nassert solution(\"ayrat\") == \"yrat\"\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"ayrat\") == \"yrat\"\nassert solution(\"ami\") == \"no\"\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"cba\") == \"cba\"\nassert solution(\"ayrat\") == \"ayrat\"\nassert solution(\"ami\") == \"ami\"\nassert solution(\"\") == \"\"\n\"\"\""
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"b\"\nassert solution(\"bc\") == \"c\"\nassert solution(\"bcdefg\") == \"bcdefg\"\nassert solution(\"abcdefg\") == \"abcdefg\"\nassert solution(\"ayrat\") == \"at\"\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 2 6\\n') == 2\nassert solution('10\\n1 2 3 4 5\\n') == 10\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2 6\") == \"2\"\nassert solution(\"10\\n1 2 3 4 5\") == \"10\"\nassert solution(\"8\\n1 2 3 4 5 6 7\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2 3 4 5 6 7\") == \"7\"\nassert solution(\"6\\n1 2 6\") == \"2\"\nassert solution(\"10\\n1 2 3 4 5\") == \"10\"\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 6\") == 2\nassert solution(\"1 2 3 4 5\") == 10\nassert solution(\"1 2 3 5 4\") == 7\nassert solution(\"3 2 1 5 4\") == 6\nassert solution(\"1 2 3 5 6 7\") == 4\n\n'''"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 2 6') == '2'\nassert solution('10\\n1 2 3 4 5') == '10'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 3 2') == '1'\nassert solution('4 1 5 4') == '4'\n\nassert solution('2 1 3 2') == '1'\nassert solution('4 1 5 4') == '4'\nassert solution('2 1 3 2 4 3') == '4'\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1\") == \"4\"\nassert solution(\"3 1 3\") == \"3\"\nassert solution(\"3 2 3\") == \"2\"\nassert solution(\"4 2 1\") == \"4\"\nassert solution(\"3 2 3\") == \"2\"\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"1 2 3 4 5\") == \"10\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 3 2 4\n''') == '4'\n\nassert solution('''\n8\n1 2 3 4 5 6 7 8\n''') == '10'\n\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 2 3 4') == '3'\n\"\"\""
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 7 10\") == '1'\nassert solution(\"1 5 10\") == '0'\nassert solution(\"3 10 10\") == '1'\nassert solution(\"1 1 1\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 7 10\\n5 6') == '1'\nassert solution('1 5 10\\n7') == '0'\nassert solution('3 10 10\\n5 7 7') == '1'\nassert solution('1 1 1\\n1') == '0'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 7 10\\n5 6') == '1'\n\"\"\"\n\nn, b, d = map(int, input().split())\n\nqueue = [int(x) for x in input().split()]"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 7 10\\n5 6\") == \"1\"\nassert solution(\"1 5 10\\n7\") == \"0\"\nassert solution(\"3 10 10\\n5 7 7\") == \"1\"\nassert solution(\"1 1 1\\n1\") == \"0\"\nassert solution(\"5 7 7\\n5 7 7\") == \"0\"\n\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 7 10\") == \"1\"\nassert solution(\"1 5 10\") == \"0\"\nassert solution(\"3 10 10\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 7 10\\n5 6\") == \"1\"\n\nassert solution(\"1 5 10\\n7\") == \"0\"\n\nassert solution(\"1 1 1\\n1\") == \"0\"\n\nassert solution(\"1 1 1\\n1\\n1\") == \"0\"\nassert solution(\"1 1 1\\n1\\n2\") == \"1\"\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 7 10\\n5 6\\n') == '1'\nassert solution('1 5 10\\n7\\n') == '0'\nassert solution('3 10 10\\n5 7 7\\n') == '1'\nassert solution('1 1 1\\n1\\n') == '0'\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 7 10\\n5 6') == '1'\nassert solution('1 5 10\\n7') == '0'\nassert solution('3 10 10\\n5 7 7') == '1'\nassert solution('1 1 1\\n1') == '0'\n\"\"\"\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 7 10\\n5 6') == '1'\nassert solution('1 5 10\\n7') == '0'\n\"\"\""
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 7 10\") == \"1\"\nassert solution(\"1 5 10\") == \"0\"\nassert solution(\"3 10 10\") == \"1\"\nassert solution(\"1 1 1\") == \"0\""
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\nassert solution(\"3 1\\nB\") == \"YES\"\nassert solution(\"1 1\\nB\") == \"YES\"\n"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\nassert solution(\"3 1\\nB\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\nassert solution(\"3 1\\nB\\nB\\nW\") == \"YES\""
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\nB\\nB\\nW\") == \"YES\"\nassert solution(\"3 1\\nB\\nB\\nB\") == \"NO\"\nassert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\nassert solution(\"3 4\\nWWBW\\nBWWB\\nWWWB\") == \"NO\"\nassert solution(\"3 4\\nWWBW\\nBWWW\\nWWBB\") == \"YES\"\n"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\n"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == expected_result\n\"\"\""
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\nWWBW\\nBWWW\\nWWWB') == 'NO'\n\nassert solution('3 1\\nB') == 'YES'\n"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\nassert solution(\"3 1\\nB\") == \"YES\"\n"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\nassert solution(\"3 1\\nB\") == \"YES\"\n\"\"\"\n\nn, m = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n\nmat = []\n\nfor i in range(n):\n    mat.append(stdin.split(\"\\n\")[i + 1])\n\nblack = 0\n\nfor i in range(n):\n    for j in range(m):\n        if mat[i][j] == \"B\":\n            black += 1"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\nWWBW\\nBWWW\\nWWWB') == 'NO'\n"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...\\n\") == \"Yes\\n.S...\\n...S.\\nS.D..\\n...S.\\n.S...\\n\"\nassert solution(\"5 5\\nS....\\n...S.\\nS....\\n...S.\\n.S...\\n\") == \"No\\n\"\nassert solution(\"1 2\\nS\\n\") == \"No\\n\"\n\n\"\"\""
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\nS....\\n...S.\\nS....\\n...S.\\nS....') == 'Yes\\n.S..\\n...S\\nS.D.\\n...S'\nassert solution('1 2\\nSW') == 'No'\nassert solution('3 4\\n...S\\nS...\\n...S') == 'Yes\\nS.S\\n...S\\n.S..'\nassert solution('6 6\\n...S.\\n.S.S.\\n.S.S.\\n.S.S.\\n.S.S.\\n.S.S.\\n.S.S.') == 'Yes\\n.S..\\n...S\\n...S\\n.S.S\\nS.S.\\n.S.S\\n...S\\nS.S.S'\n\"\"\"\n"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".S....\") == \"Yes\"\nassert solution(\"..S...\") == \"No\"\nassert solution(\"..S.W...\") == \"Yes\"\nassert solution(\"......\") == \"Yes\"\n\n\"\"\"\n\n\nfrom typing import List, NamedTuple, Callable\nfrom collections import defaultdict, deque\nfrom pprint import pprint\n\n\nclass Coord(NamedTuple):\n    r: int\n    c: int\n\n\nclass Solution:\n    def solution(self, inp_str: str) -> str:\n        R, C = map(int, inp_str.split())\n        d = defaultdict(set)\n        for i in range(R):\n            for j, c in enumerate(inp_str[i * C : (i + 1) * C]):\n                if c == \"S\":\n                    d[Coord(i, j)].add(\"S\")\n                elif c == \"W\":\n                    d[Coord(i, j)].add(\"W\")\n                elif c == \"D\":\n                    d[Coord(i, j)].add(\"D\")\n        pprint(d)\n\n        self.queue = deque()\n        self.queue.append((Coord(0, 0), []))\n\n        def next_step(coord: Coord, path: List[Coord]) -> None:\n            r = coord.r + 1\n            if 0 <= r < R:\n                if inp_str[coord.r * C + coord.c] == \"S\":\n                    self.queue.append((Coord(r, coord.c), path))\n                elif inp_str[coord.r * C + coord.c] == \"W\" and \"S\" in d[Coord(r, coord.c)]:\n                    self.queue.append((Coord(r, coord.c), path + [Coord(r, coord.c)]))\n                elif inp_str[coord.r * C + coord.c] == \"D\" and \"W\" in d[Coord(r, coord.c)]:\n                    self.queue.append((Coord(r, coord.c), path + [Coord(r, coord.c)]))\n                elif inp_str[coord.r * C + coord.c] == \".\" and \"D\" in d[Coord(r, coord.c)]:\n                    self.queue.append((Coord(r, coord.c), path + [Coord(r, coord.c)]))\n\n            c = coord.c + 1\n            if 0 <= c < C:\n                if inp_str[coord.r * C + coord.c] == \"S\":\n                    self.queue.append((Coord(coord.r, c), path))\n                elif inp_str[coord.r * C + coord.c] == \"W\" and \"S\" in d[Coord(coord.r, c)]:\n                    self.queue.append((Coord(coord.r, c), path + [Coord(coord.r, c)]))\n                elif inp_str[coord.r * C + coord.c] == \"D\" and \"W\" in d[Coord(coord.r, c)]:\n                    self.queue.append((Coord(coord.r, c), path + [Coord(coord.r, c)]))\n                elif inp_str[coord.r * C + coord.c] == \".\" and \"D\" in d[Coord(coord.r, c)]:\n                    self.queue.append((Coord(coord.r, c), path + [Coord(coord.r, c)]))\n\n        while self.queue:\n            coord, path = self.queue.popleft()\n            if len(path) == C * R:\n                if \"S\" in d[coord]:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n            next_step(coord, path)\n\n\nsln = Solution()\nassert sln.solution(\".S....\") == \"Yes\"\n"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n..S...\\n...S.\\nS....\\n...S.\\n.S...\\n\") == \"Yes\\n..SD\\n..SDW\\n.SD\\n.DW\\nDDW\\n\"\nassert solution(\"1 2\\nSW\\n\") == \"No\\n\"\nassert solution(\"5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...\\n\") == \"Yes\\n.S...\\n...S.\\nS.D.\\n...S.\\n.S...\\n\"\nassert solution(\"5 5\\n...S.\\n..S...\\n...S.\\n.S...\\n\") == \"No\\n\"\nassert solution(\"5 5\\n.S...\\nS....\\n...S.\\n.S...\\n\") == \"Yes\\n.S...\\nS.D.\\n...S.\\n.S...\\n\"\n"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 6\\n..S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......\") == \"Yes\\n..SD..\\n..SDW.\\n.SD...\\n.DW...\\nDD.W..\\n......\"\nassert solution(\"1 2\\nSW\") == \"No\"\nassert solution(\"5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...\\n\") == \"Yes\\n.S...\\n...S.\\nS.D..\\n...S.\\n.S...\\n\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n6 6\n..S...\n..S.W.\n.S....\n..W...\n...W..\n......\n\"\"\") == 'Yes'\nassert solution(\n\"\"\"\n1 2\nSW\n\"\"\"\n) == 'No'\nassert solution(\n\"\"\"\n5 5\n.S...\n...S.\nS....\n...S.\n.S...\n\"\"\") == 'Yes'\nassert solution(\n\"\"\"\n1 1\nS\n\"\"\") == 'No'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6\\nS...\\n...S\\nS....\\n...S\\n.S...\") == \"Yes\\n..SD\\n..SD\\n.SD\\n..SD\"\nassert solution(\"4 5\\nS...\\n...S\\nS....\\n...S\\n.S...\") == \"No\"\nassert solution(\"1 2\\nS\\n\") == \"No\"\n"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"Yes\"\nassert solution(\"4 6\") == \"No\"\nassert solution(\"2 2\") == \"Yes\"\nassert solution(\"5 5\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == \"Yes\"\nassert solution(test_input_2) == \"No\""
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n..S\\n.S.\") == \"Yes\\n..SD\\n.SD\"\nassert solution(\"1 1\\nS.\") == \"No\"\nassert solution(\"3 3\\n..S\\n..S\\n..S\\n.S\") == \"Yes\\n..S\\n.S\\n..S\"\nassert solution(\"3 3\\n.S\\n..S\\n..S\\nS.\") == \"No\"\nassert solution(\"3 3\\nS.S\\n..S\\n..S\\nS.\") == \"Yes\\nS.S\\n..S\\n..S\\nS.\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\n\") == \"1\"\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n\") == \"2\"\nassert solution(\"2\\nadd 3\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\n\") == \"0\"\n\n--- Note ---\n\n\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b \u0431\u044b\u0432\u0430\u044e\u0442 \u0442\u0430\u043a\u0438\u0435:\n\n7\n\n3\n\n0\n\n--- Note ---\n\n\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u0435\u0441\u0442\u043e \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u0432 \u0444\u0430\u0439\u043b\u0435-\u043e\u0442\u0432\u0435\u0442\u0435, \u043a\u0443\u0434\u0430 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432\u0430\u0448\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f.\n\n\"\"\""
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\n\") == \"1\"\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n\") == \"2\"\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n\") == \"2\"\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n\") == \"2\"\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n\") == \"2\"\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\n\") == \"1\"\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\nadd 1\nremove\nadd 2\nadd 3\nremove\nremove\"\"\") == '1'\nassert solution(\"\"\"7\nadd 3\nadd 2\nadd 1\nremove\nadd 4\nremove\nremove\nremove\nadd 6\nadd 7\nadd 5\nremove\nremove\nremove\"\"\") == '2'\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\n\") == \"1\"\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\n\") == \"1\"\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\nadd 4\\n\") == \"1\"\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove') == '1'\nassert solution('7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove') == '2'\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\nadd 4') == '1'\nassert solution('7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\nadd 2') == '2'\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\nadd 1\\nadd 2\\nadd 3\\nremove\\nremove\\n') == '1'\nassert solution('7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n123\n321''') == '0\\n2'\nassert solution('''3\n231\n102''') == '2\\n0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n123\\n321\") == \"0 2\"\n\"\"\""
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n123\\n321') == '0\\n2'\n\"\"\"\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n123\\n321\") == \"0\\n2\"\nassert solution(\"2\\n88\\n00\") == \"2\\n0\"\n\"\"\"\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('123') == '0'\nassert solution('321') == '0'\nassert solution('111') == '0'\nassert solution('123') == '2'\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n123\\n321\") == '0\\n2'\nassert solution(\"2\\n88\\n00\") == '2\\n0'\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"1234\") == \"0\"\nassert solution(\"1233\") == \"1\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n123\\n321\") == \"0\\n2\"\n\"\"\""
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n123\\n321') == '0\\n2'\nassert solution('2\\n88\\n00') == '2\\n0'\nassert solution('1\\n111') == '1\\n0'\nassert solution('1\\n111\\n0') == '0\\n0'\nassert solution('2\\n11\\n12') == '0\\n1'\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n123\\n321\") == \"0\\n2\"\nprint(solution(\"2\\n88\\n00\"))\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n5 6\\n10 12\") == \"6\"\n\"\"\"\nimport sys"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n5 6\\n10 12\\n') == '6'\nassert solution('1 1\\n1 100000\\n') == '100000'\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n5 6\\n10 12\") == \"6\"\nassert solution(\"1 1\\n1 100000\") == \"100000\"\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 3\n5 6\n10 12''') == '6'\nassert solution('''1 1\n1 100000''') == '100000'\n\"\"\""
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n5 6\\n10 12\") == 6\nassert solution(\"1 1\\n1 100000\") == 100000\n\n-----Complexity-----\n\nO(n)\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n5 6\\n10 12\") == \"6\"\nassert solution(\"1 1\\n1 100000\") == \"100000\"\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n5 6\\n10 12\") == \"6\"\nassert solution(\"1 1\\n1 100000\") == \"100000\""
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n5 6\\n10 12\") == \"6\"\nassert solution(\"1 1\\n1 100000\") == \"100000\"\n\"\"\"\nfrom typing import List, Dict"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('10 3') == '10'\nassert solution('5 6') == '6'\nassert solution('1 100000') == '100000'\n'''\n\n\n'''\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n5 6\\n10 12') == '6'\nassert solution('1 1\\n1 100000') == '100000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('3 1 3') == '1'\nassert solution('6 1 3') == '1, 3'\nassert solution('6 1 6') == '0'"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n9 1 1 1\") == \"2\\n3 4\"\nassert solution(\"5 2\\n1 3 5 6\") == \"0\"\n\nassert solution(\"6 2\\n1 3 5 6\") == \"0\"\nassert solution(\"6 2\\n1 3 5 7\") == \"0\"\nassert solution(\"6 2\\n1 3 6 7\") == \"0\"\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n3 4 5') == '1\\n3'\nassert solution('4 3\\n9 1 1 1') == '0\\n'\nassert solution('4 3\\n9 1 1 1') == '0\\n'\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n9 1 1 1\") == \"0\"\nassert solution(\"3 2\\n3 4 5\") == \"1\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\""
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n3 4 5\") == \"1\\n3\\n\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\\n\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\\n\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n3 4 5') == '1\\n3'\nassert solution('4 3\\n9 1 1 1') == '0'\nassert solution('4 3\\n1 2 3 4') == '2\\n3 4'\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n3 4 5\") == \"1\\n3\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\\n\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\\n\"\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n3 4 5') == '1\\n3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('123') == ''\nassert solution('12') == '3'\nassert solution('12345') == '2'\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n3 4 5\") == \"1\\n3\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\\n\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\\n\"\nassert solution(\"5 4\\n9 1 1 1\") == \"0\\n\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\\n\"\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n.135\\n1247\\n3468\\n5789\") == \"YES\"\nassert solution(\"5\\n.1.\\n1111\\n.1.\\n.1.\\n\") == \"YES\"\nassert solution(\"1\\n....\\n12.1\\n.2..\\n.2..\\n\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".1.\\n1247\\n3468\\n5789\") == \"YES\"\nassert solution(\".1.\\n1111\\n..1.\\n..1.\\n\") == \"YES\"\nassert solution(\".1.\\n12.1.\\n.2..\\n.2..\\n\") == \"NO\"\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n.135\\n1247\\n3468\\n5789') == 'YES'\nassert solution('5\\n..1.\\n1111\\n..1.\\n..1.\\n') == 'YES'\nassert solution('1\\n....\\n12.1\\n.2..\\n.2..\\n') == 'NO'\n\n---"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n12\\n1247\\n3468\\n5789\") == \"YES\"\nassert solution(\"5\\n..1.\\n1111\\n..1.\\n..1.\\n\") == \"YES\"\nassert solution(\"1\\n....\\n12.1\\n.2..\\n.2..\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n123.\\n123.\\n123.\\n123.\") == \"YES\"\nassert solution(\"5\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\n12.1\\"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n12.1\\n.2..\\n.2..\\n1111\") == \"YES\"\nassert solution(\"1\\n1111\\n.2..\\n.2..\\n1111\") == \"NO\"\nassert solution(\"1\\n1111\\n.2..\\n.2..\\n1111\") == \"NO\"\nassert solution(\"1\\n1111\\n.2..\\n.2..\\n1111\") == \"NO\"\nassert solution(\"1\\n1111\\n.2..\\n.2..\\n1111\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".135\") == \"YES\"\nassert solution(\"1247\") == \"YES\"\nassert solution(\"3468\") == \"YES\"\nassert solution(\"5789\") == \"YES\"\nassert solution(\"..1.\") == \"NO\"\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n..1.\\n1247\\n3468\\n5789\") == \"YES\"\nassert solution(\"1\\n...\\n12.1\\n.2..\\n.2..\") == \"YES\"\nassert solution(\"2\\n....\\n12.1\\n.2..\\n.2..\") == \"NO\"\nassert solution(\"1\\n.1.\\n..1\\n..1\\n1247\") == \"YES\"\nassert solution(\"1\\n...\\n...\\n...\\n1247\") == \"NO\"\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n1247\\n3468\\n5789\\n') == 'YES'\nassert solution('5\\n1111\\n..1.\\n1111\\n..1.\\n..1.') == 'YES'\nassert solution('1\\n....\\n12.1\\n.2..\\n.2..') == 'NO'\n\"\"\""
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n..1\\n.2.\\n12.1\\n.2.') == 'YES'\nassert solution('5\\n...\\n12.1\\n..2.\\n..2.') == 'YES'\nassert solution('1\\n1111\\n..1.\\n..1.\\n1111\\n1111\\n1111') == 'NO'\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10\\n8 5\") == \"3\"\nassert solution(\"3 12\\n1 4 5\") == \"0\"\nassert solution(\"3 7\\n1 4 9\") == \"1\"\n\"\"\"\nimport sys\nimport re"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 10\\n8 5') == '3'\nassert solution('3 12\\n1 4 5') == '0'\nassert solution('3 7\\n1 4 9') == '1'\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 10') == '0'\nassert solution('5 8') == '3'\nassert solution('5 5') == '0'\nassert solution('3 7') == '1'\n\"\"\"\n\nfrom __future__ import annotations"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10\\n8 5\") == \"3\"\nassert solution(\"3 12\\n1 4 5\") == \"0\"\nassert solution(\"3 7\\n1 4 9\") == \"1\"\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10\\n8 5\") == \"3\"\nassert solution(\"3 12\\n1 4 5\") == \"0\"\nassert solution(\"3 7\\n1 4 9\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10\\n8 5') == '3'\nassert solution('3 12\\n1 4 5') == '0'\nassert solution('3 7\\n1 4 9') == '1'\n\nimport pytest\n\n@pytest.mark.parametrize(\n    (\"input_s\", \"expected\"),\n    [\n        (\"2 10\\n8 5\", \"3\"),\n        (\"3 12\\n1 4 5\", \"0\"),\n        (\"3 7\\n1 4 9\", \"1\"),\n    ]\n)\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\") == '3'\nassert solution(\"3 7\") == '1'\n\"\"\"\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 10\\n8 5') == '3'\nassert solution('3 12\\n1 4 5') == '0'\nassert solution('3 7\\n1 4 9') == '1'\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10\\n8 5\\n') == '3\\n'\nassert solution('3 12\\n1 4 5\\n') == '0\\n'\nassert solution('3 7\\n1 4 9\\n') == '1\\n'"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"5\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"3 6\") == \"2\"\nassert solution(\"8 3\") == \"0\"\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"acb\") == \"cba\"\nassert solution(\"dcba\") == \"bca\"\nassert solution(\"abcd\") == \"dcba\"\nassert solution(\"dcba\") == \"dcba\"\nassert solution(\"zzzz\") == \"zzzz\"\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 4\nabac\ncaab\nacba''') == 'acab'\nassert solution('''3 4\nkbbu\nkbub\nubkb''') == 'kbub'\nassert solution('''5 4\nabcd\ndcba\nacbd\ndbca\nzzzz''') == -1"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abac') == 'acab'\n\nassert solution('caab') == 'acab'\n\nassert solution('acba') == 'acab'\n\nassert solution('kbbu') == 'kbub'\n\nassert solution('kbub') == 'kbub'"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcdef\") == \"abcdef\"\nassert solution(\"abcdefghijkl\") == \"abcdefghijkl\"\nassert solution(\"abcd\") == \"abcdefghijkl\"\nassert solution(\"aabbcc\") == \"abcdefghijkl\"\nassert solution(\"ababab\") == \"ababacdefgijkl\"\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == \"dcba\"\nassert solution(\"acbd\") == \"dcba\"\nassert solution(\"dcba\") == \"dcba\"\nassert solution(\"zzzz\") == \"-1\"\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abac\") == \"acab\"\nassert solution(\"caab\") == \"acab\"\nassert solution(\"acba\") == \"acab\"\nassert solution(\"kbbu\") == \"kbub\"\nassert solution(\"kbub\") == \"kbub\"\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abac\") == \"acab\"\nassert solution(\"caab\") == \"acab\"\nassert solution(\"acba\") == \"acab\"\n\nassert solution(\"kbbu\") == \"kbub\"\nassert solution(\"kbub\") == \"kbub\"\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abac\") == \"acab\"\nassert solution(\"caab\") == \"acab\"\nassert solution(\"acba\") == \"acab\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nclass Solution:\n    def restoreString(self, s: List[str], indices: List[int]) -> str:\n        return \"\".join([i for i in zip(s, indices)])"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abac') == 'acab'\nassert solution('caab') == 'acab'\nassert solution('acba') == 'acab'\n\nassert solution('kbbu') == 'kbub'\nassert solution('kbub') == 'kbub'\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\nassert solution('abc') == 'cba'\nassert solution('abcc') == 'cba'\nassert solution('aba') == 'bca'\n\nassert solution('abac') == 'acab'\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5555\"\nassert solution(\"2\\n9 11 1 12 5 8 9 10 6\") == \"33\"\nassert solution(\"0\\n1 1 1 1 1 1 1 1 1\") == \"-1\"\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4 3 2 1 2 3 4 5\") == \"55555\"\nassert solution(\"9 11 1 12 5 8 9 10 6\") == \"33\"\n\"\"\"\n\nv = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n5 4 3 2 1 2 3 4 5') == '55555'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4 3 2 1 2 3 4 5') == '55555'\nassert solution('9 11 1 12 5 8 9 10 6') == '33'\nassert solution('0 1 1 1 1 1 1 1 1') == '-1'\nassert solution('1 1 1 1 1 1 1 1 1') == '-1'\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 3 2 1 2 3 4 5\") == \"55555\"\nassert solution(\"0\\n1 1 1 1 1 1 1 1 1\") == \"-1\"\nassert solution(\"2\\n9 11 1 12 5 8 9 10 6\") == \"33\"\nassert solution(\"0\\n0 0 0 0 0 0 0 0 0\") == \"-1\"\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n5 4 3 2 1 2 3 4 5\") == \"55555\"\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 4 3 2 1 2 3 4 5\") == \"55555\"\n\"\"\""
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 1 1 1 1 1 1 1\") == \"55555\"\nassert solution(\"2\\n9 11 1 12 5 8 9 10 6\") == \"33\"\n\"\"\""
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4 3 2 1 2 3 4 5\") == \"55555\"\nassert solution(\"9 11 1 12 5 8 9 10 6\") == \"33\"\nassert solution(\"0 1 1 1 1 1 1 1 1\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 3 2 1 2 3 4 5\") == \"55555\"\nassert solution(\"9 11 1 12 5 8 9 10 6\") == \"33\"\nassert solution(\"0 1 1 1 1 1 1 1 1\") == \"-\"\nassert solution(\"0 1 2 3 4 5 6 7 8 9\") == \"99\"\n"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"120 150\") == \"YES\"\n\n\n\n\n-----------------------\n\nimport math\n\nt = int(stdin.readline().strip())\n\nfor _ in range(t):\n    n, m = [int(i) for i in stdin.readline().strip().split()]\n    a = 0\n    for i in range(1, m + 1):\n        if m % i == 0:\n            a = i\n    b = int(math.floor(m / a))\n    c = m % a\n    if (c < b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1 2\\n') == 'NO'\nassert solution('3 2\\n') == 'NO'\nassert solution('3 4\\n') == 'YES'\n"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"120 150\") == \"YES\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1) == 'YES'\nassert solution(2) == 'NO'\n\"\"\"\n"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"NO\"\nassert solution(3) == \"YES\""
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"120 150\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\n3 4\n1 2\n120 150\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n3\n3 4\n1 2\n120 150\n\"\"\"\n) == \"NO\"\nassert solution(\n\"\"\"\n3\n3 4\n1 2\n120 150\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n3\n3 4\n1 2\n120 150\n\"\"\"\n) == \"NO\"\n\"\"\"\n\n[Solution]\n\nSame as first problem.\n\n\"\"\""
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n1 2\\n120 150\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n10 20\") == \"NO\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2\\n120 150') == 'NO'\nassert solution('3\\n1 2\\n1 2\\n1 1') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\nassert solution(test_2) == test_2_result\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 3\") == \"30\"\nassert solution(\"5 1 2 -3\") == \"12\"\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 3\") == 30\nassert solution(\"5 1 2 -3\") == 12\n\n\n\n\n\n\n\n\n\n\n\n-----"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 2 3\\n1 2 3 4 5') == '30'\nassert solution('5 1 2 -3\\n-1 -2 -3 -4 -5') == '12'\n\"\"\"\n\nimport sys\n\nn, p, q, r = [int(i) for i in sys.stdin.readline().split()]\narr = [int(i) for i in sys.stdin.readline().split()]\n\nmax_val = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        for k in range(j + 1, n):\n            val = p * arr[i] + q * arr[j] + r * arr[k]\n            max_val = max(max_val, val)\n\nprint(max_val)\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 2 3\\n1 2 3 4 5') == 30\nassert solution('5 1 2 -3\\n-1 -2 -3 -4 -5') == 12\n\"\"\"\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 3\\n1 2 3 4 5\") == \"30\"\n\n\"\"\"\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 3\\n1 2 3 4 5\") == \"30\"\nassert solution(\"5 1 2 -3\\n-1 -2 -3 -4 -5\") == \"12\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 2 3\\n1 2 3 4 5') == 30\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 3\\n1 2 3 4 5\") == \"30\"\n\"\"\""
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 3\") == '30'\nassert solution(\"5 1 2 -3\") == '12'\nassert solution(\"5 1 2 3\") == '30'\nassert solution(\"5 1 2 3\") == '30'\nassert solution(\"5 1 2 3\") == '30'\n\n-----\n3 3 3\n1 2 3\n\n7 8 9\n\n10 20 30 40 50 60 70\n\n-----"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 3\\n1 2 3 4 5\") == \"30\"\nassert solution(\"5 1 2 -3\\n-1 -2 -3 -4 -5\") == \"12\"\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\") == '2'\nassert solution(\"8\\n6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\") == '1'\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3\n15 -1 -1\n10 1 3\n5 -1 -1\n\"\"\") == \"2\"\n\nassert solution(\n\"\"\"\n8\n6 2 3\n3 4 5\n12 6 7\n1 -1 8\n4 -1 -1\n5 -1 -1\n14 -1 -1\n2 -1 -1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\") == \"2\"\nassert solution(\"8\\n6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\") == \"1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\") == '2'\n\"\"\"\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 1\") == \"5\\n2\\n1\\n0\\n0\\n0\"\n\n\"\"\"\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\\n\") == '2'\nassert solution(\"8\\n6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\\n\") == '1'\n\n'''\n\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\\n\") == \"2\"\nassert solution(\"8\\n6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\\n\") == \"1\""
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\") == \"2\"\nassert solution(\"8\\n6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\") == \"1\"\n\n\"\"\"\n\n\nfrom typing import Tuple, List\n\n\nclass Node:\n    def __init__(self, value: int, left: int, right: int) -> None:\n        self.value: int = value\n        self.left: int = left\n        self.right: int = right\n\n    def __str__(self) -> str:\n        return f\"{self.value} {self.left} {self.right}\"\n\n\nclass Tree:\n    def __init__(self, root: Node) -> None:\n        self.root: Node = root\n\n    def __str__(self) -> str:\n        return f\"{self.root}\"\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('15 -1 -1\\n10 1 3\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1') == '2'\n\n\"\"\"\n\nimport sys\n\nfrom typing import List\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n15 -1 -1\n10 1 3\n5 -1 -1\n''') == '2'\nassert solution('''8\n6 2 3\n3 4 5\n12 6 7\n1 -1 8\n4 -1 -1\n5 -1 -1\n14 -1 -1\n2 -1 -1\n''') == '1'\nassert solution('''10\n6 2 3\n3 4 5\n12 6 7\n1 -1 8\n4 -1 -1\n5 -1 -1\n14 -1 -1\n2 -1 -1\n''') == '1'\nassert solution('''10\n6 2 3\n3 4 5\n12 6 7\n1 -1 8\n4 -1 -1\n5 -1 -1\n14 -1 -1\n2 -1 -1\n''') == '1'\nassert solution('''8\n6 2 3\n3 4 5\n12 6 7\n1 -1 8\n4 -1 -1\n5 -1 -1\n14 -1 -1\n2 -1 -1\n''') == '1'"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n1 5\\n3 3\\n5 1\\n5 5\") == \"6\"\nassert solution(\"3 1\\n2 3\\n3 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == expected"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\\n1 5\\n3 3\\n5 1\\n5 5\") == 6\n\nassert solution(\"3 1\\n2 3\\n3 5\") == 0\n\"\"\"\n\nfrom typing import Dict\n"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 1\\n1 5\") == 6\nassert solution(\"2 3\\n1 1\\n1 5\\n3 3\\n5 1\\n5 5\") == 6\nassert solution(\"1 1\\n2 3\\n3 5\") == 0"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1\\n1 5\\n3 3\\n5 1\\n5 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 1\n1 5\n3 3\n5 1\n5 5\n''') == '6'\nassert solution('''\n3\n1 1\n2 3\n3 5\n''') == '0'\n"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1\\n2 3\\n3 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 1\\n1 5\\n3 3\\n5 1\\n5 5') == 6\nassert solution('3\\n1 1\\n2 3\\n3 5') == 0\n"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1\\n1 2\\n2 3\\n3 4\") == \"4\\n\"\nassert solution(\"5\\n1 1\\n1 2\\n3 3\\n5 1\\n5 5\") == \"6\\n\"\n"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1\\n1 5\\n3 3\\n5 1\\n5 5\\n\") == 6\n\"\"\"\n\nn = int(input())\n\ncnt = 0\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    for j in range(i + 1, n):\n        x1, y1 = list(map(int, input().split()))\n        if abs(x - x1) == abs(y - y1):\n            cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 80\\n1 2 2 1\") == \"2\"\nassert solution(\"4 1\\n1 2 2 1\") == \"3\"\nassert solution(\"4 2\\n1 2 3 1\") == \"3\"\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 80\\n1 2 2 1') == '2'\nassert solution('4 1\\n1 2 2 1') == '3'\n\"\"\"\n\nfrom itertools import permutations\n\nn, k = list(map(int, input().split()))\nbooks = list(map(int, input().split()))\n\nprint(min([sum([abs(books[i]-books[j]) for j in range(len(books)) if i!= j]) for i in range(n)]))"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 2\n1 2 3 1''') == '3'\n\nassert solution('''4 1\n1 2 2 1''') == '3'\n\nassert solution('''4 2\n1 2 3 1''') == '3'\n\nassert solution('''4 2\n1 2 3 1''') == '3'\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('4 10') == '4'\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1') == 3\nassert solution('4 2') == 3\nassert solution('4 3') == 3\nassert solution('4 5') == 3\nassert solution('4 6') == 5\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 80\\n1 2 2 1\") == \"2\"\nassert solution(\"4 1\\n1 2 2 1\") == \"3\"\nassert solution(\"4 2\\n1 2 3 1\") == \"3\"\n\"\"\"\n\n\"\"\"\nLongest subsequence\n\nWrite a program that receives a sequence of n numbers from standard input, determines the longest sequence of numbers,\nwhose sum equals 0 and prints the longest sequence on the standard output.\n\nInput\n\nThe first line of input contains the number n (1 \u2264 n \u2264 100) \u2013 the number of numbers.\n\nThe second line contains n integers a_1, a_2,..., a_n (1 \u2264 a_i \u2264 100) \u2014 the sequence of numbers.\n\nOutput\n\nPrint the longest sequence of numbers, whose sum equals 0. If several such sequences exist, print the one that has the longest length. If no such sequence exists, print -1.\n\nExamples\nInput\n4\n1 -2 2 1\n\nOutput\n-1\n\nInput\n3\n-1 -2 3\n\nOutput\n-1\n\nInput\n5\n3 -4 2 1 5\n\nOutput\n2 -1\n\"\"\"\n\n\"\"\"\nCheck if array is sorted\n\nWrite a program that receives a sequence of n integers from standard input,\nchecks whether the sequence is sorted (in increasing order) and prints \"YES\" if it is and \"NO\" otherwise.\n\nInput\n\nThe first line of input contains an integer n (1 \u2264 n \u2264 100) \u2013 the number of integers.\n\nThe second line contains n integers a_1, a_2,..., a_n (1 \u2264 a_i \u2264 100) \u2014 the sequence of numbers.\n\nOutput\n\nPrint \"YES\" if the sequence is sorted, and \"NO\" otherwise.\n\nExamples\nInput\n4\n1 2 1 3\n\nOutput\nNO\n\nInput\n4\n2 1 1 3\n\nOutput\nNO\n\nInput\n3\n1 1 1\n\nOutput\nYES\n\"\"\"\n\n\"\"\"\nThe sequence a1, a2,..., an is called arithmetic if the following conditions are met:\n\nai+1 = ai + ki for some k, i = 1, 2,..., n \u2212 1\na_i is divisible by ai+1 for some k, i = 1, 2,..., n \u2212 1\n\nWrite a program that receives a sequence of n integers from standard input,\nchecks whether it is arithmetic and prints \"YES\" if it is and \"NO\" otherwise.\n\nInput\n\nThe first line of input contains an integer n (1 \u2264 n \u2264 100) \u2013 the number of integers.\n\nThe second line contains n integers a_1, a_2,..., a_n (1 \u2264 a_i \u2264 100) \u2014 the sequence of numbers.\n\nOutput\n\nPrint \"YES\" if the sequence is arithmetic and \"NO\" otherwise.\n\nExamples\nInput\n4\n1 2 3 4\n\nOutput\nNO\n\nInput\n4\n1 1 1 1\n\nOutput\nNO\n\nInput\n3\n1 1 1\n\nOutput\nYES\n\"\"\"\n\n\"\"\"\nThe sequence a1, a2,..., an is called geometric if the following conditions are met:\n\nai = ki^i for some i = 1, 2,..., n \u2212 1\na_i is divisible by ai+1 for some i = 1, 2,..., n \u2212 1\n\nWrite a program that receives a sequence of n integers from standard input,\nchecks whether it is geometric and prints \"YES\" if it is and \"NO\" otherwise.\n\nInput\n\nThe first line of input contains an integer n (1 \u2264 n \u2264 100) \u2013 the number of integers.\n\nThe second line contains n integers a_1, a_2,..., a_n (1 \u2264 a_i \u2264 100) \u2014 the sequence of numbers.\n\nOutput\n\nPrint \"YES\" if the sequence is geometric and \"NO\" otherwise.\n\nExamples\nInput\n3\n1 2 3\n\nOutput\nYES\n\nInput\n4\n1 1 1 1\n\nOutput\nNO\n\"\"\"\n\n\"\"\"\nThe sequence a1, a2,..., an is called harmonic if the following conditions are met:\n\na_i = 1/i for some i = 1, 2,..., n \u2212 1\na_i is divisible by ai+1 for some i = 1, 2,..., n \u2212 1\n\nWrite a program that receives a sequence of n integers from standard input,\nchecks whether it is harmonic and prints \"YES\" if it is and \"NO\" otherwise.\n\nInput\n\nThe first line of input contains an integer n (1 \u2264 n \u2264 100) \u2013 the number of integers.\n\nThe second line contains n integers a_1, a_2,..., a_n (1 \u2264 a_i \u2264 100) \u2014 the sequence of numbers.\n\nOutput\n\nPrint \"YES\" if the sequence is harmonic and \"NO\" otherwise.\n\nExamples\nInput\n3\n1 1 1\n\nOutput\nYES\n\nInput\n4\n1 1 1 1\n\nOutput\nNO\n\"\"\"\n\n\"\"\"\nCheck if sequence is decreasing\n\nWrite a program that receives a sequence of n integers from standard input,\nchecks whether the sequence is decreasing and prints \"YES\" if it is and \"NO\" otherwise.\n\nInput\n\nThe first line of input contains an integer n (1 \u2264 n \u2264 100) \u2013 the number of integers.\n\nThe second line contains n integers a_1, a_2,..., a_n (1 \u2264 a_i \u2264 100) \u2014 the sequence of numbers.\n\nOutput\n\nPrint \"YES\" if the sequence is decreasing and \"NO\" otherwise.\n\nExamples\nInput\n4\n1 1 1 2\n\nOutput\nYES\n\"\"\"\n\n\"\"\"\nCheck if sequence is increasing\n\nWrite a program that receives a sequence of n integers from standard input,\nchecks whether the sequence is increasing and prints \"YES\" if it is and \"NO\" otherwise.\n\nInput\n\nThe first line of input contains an integer n (1 \u2264 n \u2264 100) \u2013"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 80\\n1 2 2 1') == '2'\nassert solution('4 1\\n1 2 2 1') == '3'\nassert solution('4 2\\n1 2 3 1') == '3'\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2 3 1\\n') == '3'\n\"\"\"\n\nn, k = list(map(int, input().split(' ')))\nrequests = list(map(int, input().split(' ')))\n\nans = 0\nday = 0\nbooks = 0\nfor i in requests:\n    if books + i > k:\n        ans += (i - (k - books))\n        books = 0\n    else:\n        books += i\n        ans += 1\n        day += 1\n\nprint(ans)\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 80\\n1 2 2 1\") == \"2\"\nassert solution(\"4 1\\n1 2 2 1\") == \"3\"\nassert solution(\"4 2\\n1 2 3 1\") == \"3\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 80\\n1 2 2 1\\n') == '2'\nassert solution('4 1\\n1 2 2 1\\n') == '3'\nassert solution('4 2\\n1 2 3 1\\n') == '3'\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 6\\n1 2 3 4 5 6 7 8 9\\n1 4\\n4 7\\n2 5\\n5 8\\n3 6\\n6 9\") == \"7 8 9 4 5 6 1 2 3\"\nprint(\"OK\")\n\"\"\""
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2\\n3 4\\n4 3\\n2 3\\n2 1\\n3 1\\n') == '7 8 9 4 5 6 1 2 3'\nassert solution('6 1\\n1 2\\n3 4\\n4 5\\n5 6\\n6 1\\n') == '1 2 3 4 5 6 7'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n4 7\\n7 4') == '4 7\\n7 4'\nprint(solution(stdin))\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2\\n3 1\\n2 3\\n1 2\\n3 1\\n2 3\\n1 2\") == \"2 3 1 3 2 1 2\"\nassert solution(\"5 5\\n4 5\\n1 4\\n2 3\\n3 2\\n2 1\\n5 1\\n4 2\\n3 5\\n2 4\\n1 3\\n4 5\\n1 2\\n3 4\") == \"3 4 2 1 5 3 1 2 4 5\"\n\n\"\"\"\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n3 4\\n5 6\\n7 8\\n1 2\\n\") == \"7 8 9 4 5 6 1 2 3\"\nassert solution(\"6 4\\n1 2\\n4 5\\n2 3\\n4 6\\n1 2\\n4 6\\n3 5\\n4 5\\n\") == \"7 8 9 4 5 6 1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 6\\n1 2 3 4 5 6 7 8 9\\n1 4\\n4 7\\n2 5\\n5 8\\n3 6\\n6 9') == '7 8 9 4 5 6 1 2 3'\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2 5\\n1 5\\n3 6\\n1 4\\n5 3\\n5 1\\n4 3\\n3 5\\n2 4\\n3 4\") == \"7 8 9 4 5 6 1 2 3\"\n\"\"\"\n\nimport itertools\n\nn, m = map(int, stdin.readline().split())\np = list(map(int, stdin.readline().split()))\n\nfor pair in map(lambda x: map(int, x), itertools.zip_longest(stdin.read().split('\\n'), stdin.read().split('\\n'), fillvalue='')):\n    pair = list(pair)\n    if pair[0] < pair[1]:\n        for i in range(pair[0], pair[1]):\n            p[i] = p[pair[1]] - 1\n\nprint(' '.join(map(str, p)))\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3') == '123'\nassert solution('2\\n1\\n1\\n1') == '21'\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == '11'\nassert solution('2\\n2\\n2\\n2\\n2\\n2') == '22'\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''9 6\n1 2 3 4 5 6 7 8 9\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9''') == '7 8 9 4 5 6 1 2 3'\n'''\n\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n'''\n4 4\n1 2 3 4\n1 2\n3 4\n3 4\n1 2\n3 4\n'''\n\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n'''\n8 4\n1 2 3 4 5 6 7 8\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n'''\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n'''\n\n'''\n9 4\n1 2 3 4 5 6 7 8 9\n1 2\n3 4\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9\n7 8\n\n3 6\n6 9\n1 2\n3 4\n1 4\n4 7\n2 5"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3\\n2 3\\n4 3\") == \"1 3 2 4\"\n\"\"\"\n\n\"\"\"\n\u0414\u0430\u043d \u0444\u0430\u0439\u043b, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0442\u0435\u043a\u0441\u0442. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u043d\u043e \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u043b\u043e\u0432: \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u0441\u043a\u043e\u0431\u043a\u0443. \n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0441\u043a\u043e\u0431\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u0441\u043a\u043e\u0431\u043a\u0443. \u0421\u043a\u043e\u0431\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u044b \n\u043a\u0430\u043a \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u043c\u0438, \u0442\u0430\u043a \u0438 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u043c\u0438\u0441\u044f. \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0438 \u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u0440\u0435\u043f\u0438\u043d\u0430\u043d\u0438\u044f.\n\"\"\"\n\nfrom collections import deque\nimport sys\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"*-**-**\\n**-**-**\\n**-**-**\\n**-**-*\\n**-**-**\\n**-**-**\") == \"**-**-*\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\\n**-**-**\"\nassert solution(\"**-**-**\\n*-*-**\\n*-*-**\\n**-**-*\\n*-**-**\\n**-*-**\") == \"**-**-*\\n*-**-**\\n*-**-**\\n**-P-**\\n**-**-*\\n*-**-**\"\nassert solution(\"**-**-*\\n**-**-**\\n**-**-**\\n**-**-*\\n*-**-**\\n**-**-**\") == \"**-**-*\\n*-**-**\\n**-P-**\\n*-**-**\\n**-**-**\\n**-**-*\"\nassert solution(\"*-*-**\\n**-*-**\\n**-*-**\\n**-**-*\\n*-**-**\") == \"**-**-*\\n*-**-**\\n**-P-**\\n**-**-*\\n*-**-**\"\nassert solution(\"*-**-*\\n*-**-**\\n*-**-**\\n**-*-**\\n*-**-**\") == \"**-**-*\\n*-**-**\\n**-P-**\\n*-**-**\\n*-**-**\"\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('**-**-**') == '**-**-**'\nassert solution('**-**-**\\n**-**-**') == '**-**-**'\nassert solution('**-**-**\\n**-**-**\\n**-**-**') == '**-**-**'\nassert solution('**-**-**\\n**-**-**\\n**-**-**\\n**-**-**') == '**-**-**'\nassert solution('**-**-**\\n**-**-**\\n**-**-**\\n**-**-**') == '**-**-**'\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"*-**-*\\n**-**-**\\n**-**-**\\n**-*-**\\n*-**-**\\n**-**-*\") == \"*-**-**\\n**-**-**\\n**-P-**\\n**-**-*\"\nassert solution(\"**-*-**\\n**-**-**\\n*-**-**\\n*-**-**\\n**-*-**\") == \"**-*-**\\n**-P-**\\n**-**-*\"\nassert solution(\"**-**-**\\n**-**-**\\n*-**-**\\n*-**-**\\n**-**-*\") == \"**-**-**\\n**-P-**\\n*-**-**\\n**-**-*\"\n\n\"\"\"\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-P-**\\n**-**-**\\n**-**-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\"\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-P-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-*-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-P\\n**-**-**\\n**-**-**\"\nassert solution(\"**-*-**\\n**-*-**\\n**-*-**\\n**-*-**\\n**-*-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-P\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-*-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\"\nassert solution(\"**-**-*\\n**-**-*\\n**-*-**\\n**-*-**\\n**-**-*\") == \"**-**-**\\n**-P-**\\n**-*-**\\n**-**-**\\n**-**-*\"\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"**-**-**\") == \"**-**-**\"\nassert solution(\"**-**-**\") == \"**-**-**\"\nassert solution(\"**-**-**\") == \"**-**-**\"\nassert solution(\"**-**-**\") == \"**-**-**\"\nassert solution(\"**-**-**\") == \"**-**-**\"\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\") == \"**-**-**\\n**-**-**\\n..-**-P\\n**-**-**\\n..-**-..\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\") == \"**-**-**\\n**-**-**\\n..-**-P\\n**-**-**\\n..-**-P\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n..-**-P\\n**-**-**\\n..-**-P\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\"\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"**-**-*.\\n*.-*-**\\n**-**-**\\n**-**-**\\n..-..-..\\n..-**-..\") == \"**-**-**\\n**-**-**\\n..-P-..\\n**-**-**\\n..-**-..\"\n\nassert solution(\"**-**-*.\\n*.-*-**\\n**-**-**\\n**-**-**\\n..-..-..\\n..-P-..\") == \"**-**-*.\\n*P-**-**\\n**-**-**\\n**-**-**\\n..-..-..\"\n\nassert solution(\"**-**-*.\\n*.-*-**\\n**-**-**\\n**-**-**\\n..-P-..\\n..-**-..\") == \"**-**-*.\\n*.-*-**\\n**-**P-**\\n**-**-**\\n..-..-..\"\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('**-**-**') == '**-**-**'\nassert solution('**-**-**') == '**-**-**'\nassert solution('**-**-**') == '**-**-**'\nassert solution('**-**-**') == '**-**-**'\nassert solution('**-**-**') == '**-**-**'\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-..-..\\n..-**-..') == '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-P-..\\n..-**-..'\nassert solution('**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-..-..\\n..-**-..') == '**-**-**\\n**-**-**\\n..-P-**\\n**-**-**\\n..-**-..\\n..-**-..'\nassert solution('**-**-*.\\n*.-*.-**\\n**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**') == '**-**-*.\\n*.-P-**\\n**-**-**\\n**-**-**\\n..-P-**\\n**-**-**'\n\"\"\"\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n3 1 7 5') == '2'\n\"\"\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n3 1 7 5') == '2'\nassert solution('3 10\\n100 100 100') == '0'\nassert solution('10 9\\n4 5 5 7 5 4 5 2 4 3') == '1'\n\"\"\""
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n3 1 7 5') == '2'\nassert solution('3 10\\n100 100 100') == '0'\nassert solution('10 9\\n4 5 5 7 5 4 5 2 4 3') == '1'\n\n\nimport sys\nassert sys.maxsize == 2147483647\nassert int(2e7) == 2e7\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\nassert solution('10 10\\n1 2 3 4 5 6 7 8 9 10') == '0'\nassert solution('5 3\\n3 3 3') == '0'\nassert solution('5 10\\n4 5 5 6 7 8 9 10') == '1'\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('1 2 2') == '0'\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 9\") == \"1\"\nassert solution(\"4 5 5 7 5 4 5 2 4 3\") == \"1\"\nassert solution(\"100 100 100\") == \"0\"\n\"\"\""
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n3 1 7 5\") == \"2\"\nassert solution(\"3 10\\n100 100 100\") == \"0\"\nassert solution(\"10 9\\n4 5 5 7 5 4 5 2 4 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n3 1 7 5\") == \"2\"\nassert solution(\"3 10\\n100 100 100\") == \"0\"\nassert solution(\"10 9\\n4 5 5 7 5 4 5 2 4 3\") == \"1\"\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n3 1 7 5') == '2'\nassert solution('10 9\\n4 5 5 7 5 4 5 2 4 3') == '1'"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3\n1 2\n2 3\n1\n1 3\n\"\"\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\na_1 b_1\\n2 3\\na_2 b_2\\n1\\na_3 b_3') == '3'\nprint('Test pass.')\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n1\\n1 3\") == \"3\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n1\\n1 3\") == \"6\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2\n2 3\n1\n1 3''') == '3'\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\na_1 b_1\\n: \\nb_2 b_2\\na_2 b_2\\n2\\na_1 b_1\\n1\\na_2 b_2\\n1\\n\") == \"3\"\nassert solution(\"3\\na_1 b_1\\n: \\nb_2 b_2\\na_2 b_2\\n2\\na_1 b_1\\n1\\na_2 b_2\\n1\\n\") == \"3\"\nassert solution(\"3\\na_1 b_1\\n: \\nb_2 b_2\\na_2 b_2\\n2\\na_1 b_1\\n1\\na_2 b_2\\n1\\n\") == \"3\"\nassert solution(\"3\\n1 2\\n2 3\\n1\\n1 3\\n\") == \"0\"\nassert solution(\"3\\n1 2\\n2 3\\n1\\n1 3\\n\") == \"0\"\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2\n2 3\n1\n1 3''') == '3'\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n1\\n1 3\") == \"3\"\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3\\n2 3\\n4 1\\n2 1\\n2 2\\n1 1\\n2 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\ntest_input = \"\"\"\n3\n1 2\n2 3\n1\n1 3\n\"\"\"\n\ntest_output = 3\n\nassert solution(test_input) == test_output\n\ntest_input = \"\"\"\n4\n1 2\n1 3\n2 3\n1\n1 3\n\"\"\"\n\ntest_output = 1\n\nassert solution(test_input) == test_output\n\ntest_input = \"\"\"\n5\n1 2\n2 3\n1 3\n2 4\n1 5\n\"\"\"\n\ntest_output = 4\n\nassert solution(test_input) == test_output\n\n\"\"\"\n4\n1 2\n2 3\n1 3\n2 4\n\n\"\"\"\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n1 2\n2 3\n1\n1 3\"\"\") == \"3\"\nassert solution(\"\"\"5\n1 2\n2 3\n1\n2 4\n3 4\n1\n1 4\n2 5\n2\n3 5\n4 5\n3\n3 5\n4 5\n4\n2 4\n2\n3 4\n3\n3 4\n3\n3 4\n4 5\n4\n3 4\n1\n2 4\n2\n3 4\n2\n3 4\n3\n3 4\n4 5\n4\n3 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n3 4\n2\n3 4\n1\n2 4\n2\n2 4\n3 4\n2\n3 4\n2\n3 4\n2\n3 4\n2\n3 4\n3\"\"\") == \"20\"\nassert solution(\"\"\"5\n1 2\n2 3\n1\n1 3\n2 4\n2\n3 4\n3\n3 4\n4 5\n4\n3 4\n1\n2 4\n2\n2 4\n3 4\n2\n3 4\n3\n3 4\n4 5\n4\n3 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n3 4\n2\n3 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n3 4\n2\n3 4\n1\n2 4\n2\n2 4\n3 4\n2\n3 4\n3\n3 4\n4 5\n4\n3 4\n1\n2 4\n2\n2 4\n3 4\n2\n3 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n3 4\n2\n3 4\n2\n3 4\n1\n2 4\n2\n2 4\n2\n2 4\n3 4\n2\n3 4\n3\n3 4\n4 5\n4\n3 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n3 4\n2\n3 4\n3\n3 4\n4 5\n4\n3 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n3 4\n2\n3 4\n2\n3 4\n1\n2 4\n2\n2 4\n2\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n3 4\n2\n3 4\n1\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n3 4\n2\n3 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n2\n2 4\n2\n2 4\n1\n2 4\n1\n2 4\n1\n2 4\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\") == \"2\\n14\"\nprint(\"OK\")\n\n\"\"\""
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\\n\") == \"2\\n14\"\n\"\"\"\n\nfrom collections import defaultdict\nimport re\nimport sys\nfrom typing import Callable, DefaultDict, List\n\nColor = str\nRailroad = str\nTime = int\nN = int\nM = int\nS = int\nU = int\nV = int\nA = int\nB = int\nC = int\nD = int\n\nassert re.compile(r\"^([0-9]+)\\s+([0-9]+)\\s+([0-9]+)\\s+([0-9]+)\\s+([0-9]+)\\s+([0-9]+)\\s+([0-9]+)$\")\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\") == \"2\\n14\"\n\n-----Test5-----\nprint(solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\"))\n\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\") == \"2\\n14\"\nprint(\"PASS\")\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '3 2 1\\n'\n    '1 2 1 2\\n'\n    ':\\n'\n    '1 3 2 4\\n'\n    ':\\n'\n    '1 11\\n'\n    '1 2\\n'\n    '2 5\\n'\n) == '2\\n' + '14\\n'\n\n---- Problem ----\nA director of a university wants to create a program that will allow his students to send emails. The university has a very strict protocol on the emails that students should use.\n\nIt is an email if and only if it satisfies the following conditions:\n - It is composed of some uppercase English letters (A to Z) and a special symbol.\n - It does not start with a number.\n - It starts with a non-digit letter and ends with a digit.\n - There is a single dot in the middle.\n - It is at least one character long.\n - It has no special symbols other than the dot.\n - There is a space after the dot, and it is not the last character in the email.\nThe director wants to check whether a given email is an email. The director does not want you to spend too much time on this problem. So, can you write a program that takes an email as input, and checks whether it is an email or not, and print YES or NO according to whether it is an email or not.\n\n----- Constraints -----\n - 1 \\leq T \\leq 10^3\n - Each string consists of a character and a digit.\n - The character is a lowercase English alphabet, a dot, or a space.\n - The digit is an integer from 0 to 9.\n - The dot occurs exactly once.\n - The space occurs exactly once, after the dot.\n\n----- Sample Input -----\n8\n\nSample Output\nYES\n\n----- Explanation -----\nThe emails are as follows:\n - abc1@xyz.edu.au\n - a b c. 3..4\n - abc....4\n - abc....4\n - abc...4\n - abc...4\n - abc.. 4\n - abc. 4\n - abc4\n\nThe first email is a valid email.\n\n\"\"\""
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\\n\") == \"2\\n14\"\nprint('Sample pass.')\n\n\"\"\""
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 2 1\n1 2 1 2\n1 3 2 4\n1 11\n1 2\n2 5\n\"\"\") == \"2\\n14\"\nassert solution(\"\"\"3 2 1\n1 2 1 2\n1 3 2 4\n1 11\n1 2\n2 5\n\"\"\") == \"2\\n14\"\n\"\"\"\n\u0423\u0440\u043e\u043a \u043f\u043e\u0441\u0432\u044f\u0449\u0435\u043d \u0440\u0430\u0431\u043e\u0442\u0435 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0440\u0435\u0439\u0441\u043e\u0432. \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0443\u0440\u043e\u043a\u0430 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0440\u0435\u0439\u0441\u043e\u0432. \u0412 \u044d\u0442\u043e\u043c \u0443\u0440\u043e\u043a\u0435 \u043c\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u0432 \u043f\u0443\u0442\u0438 \u043e\u0442 \u0433\u043e\u0440\u043e\u0434\u0430 1 \u0434\u043e \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0434\u0440\u0443\u0433\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0414\u0435\u0439\u043a\u0441\u0442\u0440\u044b.\n\n\u0412\u0430\u043c \u0434\u0430\u043d \u0444\u0430\u0439\u043b cities.inp \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0433\u043e\u0440\u043e\u0434\u0430\u0445. \u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430. \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0440\u043e\u0434\u043e\u0432 N (1 \\leq N \\leq 50). \u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 N \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 \u043f\u0443\u0442\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0433\u043e\u0440\u043e\u0434\u0443. \u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0442\u0435\u0439 K (0 \\leq K \\leq N(N\u22121)/2), \u0438 \u0437\u0430\u0442\u0435\u043c \u0438\u0434\u0443\u0442 K \u0441\u0442\u0440\u043e\u043a, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u0443\u0442\u0435\u0439. \u0412 \u0441\u0442\u0440\u043e\u043a\u0435 i \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f i \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0443\u0442\u0438 \u043e\u0442 \u0433\u043e\u0440\u043e\u0434\u0430 1 \u0434\u043e i-\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430.\n\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u0439\u043a\u0441\u0442\u0440\u044b \u0432 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435, \u043d\u043e \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python.\n\n\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 K \u0447\u0438\u0441\u0435\u043b \u2013 \u0432\u0440\u0435\u043c\u044f, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0435\u0434\u0435\u0442 \u0433\u043e\u0440\u043e\u0434 i \u043e\u0442 \u0433\u043e\u0440\u043e\u0434\u0430 1 \u0434\u043e i-\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430.\n\n\u0414\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0440\u0435\u0439\u0441\u043e\u0432.\n\n\u0412 \u044d\u0442\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0440\u043e\u0434\u043e\u0432, \u0432\u0442\u043e\u0440\u043e\u0439 \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 1 2') == '2'\nassert solution('1 3 2 4') == '14'\nassert solution('1 11') == '2'\nassert solution('1 2') == '5'\n\n-------SOLUTION-------\nfor i, city in enumerate(stdin.splitlines()):\n    if i == 0:\n        n, m, s = int(city.split()[0]), int(city.split()[1]), int(city.split()[2])\n    else:\n        moves = city.split(':')\n        for move in moves:\n            if move.strip()!= '':\n                type, city = move.split()\n                if type == 'C':\n                    s += int(city)\n                elif type == 'D':\n                    s -= int(city)\n                    if s < 0:\n                        s = 0\n    print(s)\n\n--------------------------\n\"\"\"\nThe railway network in this input is shown in the figure below.\nIn this figure, each city is labeled as follows:\n - The first line: the ID number i of the city (i for City i)\n - The second line: C_i / D_i\nSimilarly, each railroad is labeled as follows:\n - The first line: the ID number i of the railroad (i for the i-th railroad in input)\n - The second line: A_i / B_i\n\nYou can travel from City 1 to City 2 in 2 minutes, as follows:\n - Use the 1-st railroad to move from City 1 to City 2 in 2 minutes.\n\n\nYou can travel from City 1 to City 3 in 14 minutes, as follows:\n - Use the 1-st railroad to move from City 1 to City 2 in 2 minutes.\n - At the exchange counter in City 2, exchange 3 gold coins for 3 silver coins in 6 minutes.\n - Use the 1-st railroad to move from City 2 to City 1 in 2 minutes.\n - Use the 2-nd railroad to move from City 1 to City 3 in 4 minutes.\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2 1\n1 2 1 2\n1 3 2 4\n1 11\n1 2''') == '2\\n14'\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_expected\n\"\"\""
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 4\\n2 2 4\") == 6\n\"\"\"\n\nfrom tools import timing\n\n@timing\n"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 7\") == \"63\"\n\"\"\"\n"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n2 2 4\") == 6\n\"\"\"\n\nfrom itertools import combinations\n\na, s = map(int, input().split())"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"8\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 4\\n\") == 6\n\"\"\"\n\nimport sys\n\nfrom collections import Counter\n"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3, 4, \"2 2 4\") == 6\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u0434 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044f\n\"\"\"\nfrom sys import stdin\n\nN, S = map(int, stdin.readline().split())\nA = list(map(int, stdin.readline().split()))\n\nresult = 0\nfor i in range(2**N):\n    x = []\n    for j in range(N):\n        if i & (1 << j):\n            x.append(j + 1)\n    if len(x) == 0:\n        continue\n    elif sum(A[i] for i in x) == S:\n        result += 1\nprint(result)\n\n\"\"\"\n\u041a\u043e\u0434 \u043e\u0442 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044f\n\"\"\"\nfrom sys import stdin\n\nN, S = map(int, stdin.readline().split())\nA = list(map(int, stdin.readline().split()))\n\nx = {i: 0 for i in range(1, N + 1)}\nfor i in A:\n    x[i] += 1\ns = 0\nfor i in x:\n    if x[i] > 0:\n        s += 2 ** x[i]\nprint(s % 998244353)\n"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"15\"\n\"\"\"\n\nimport numpy as np\nimport random\nimport sys\nfrom itertools import combinations\n\nrandom.seed(12345)\n\ninputs = sys.stdin.readlines()\nn, s = int(inputs[0].split()[0]), int(inputs[0].split()[1])\na = [int(i) for i in inputs[1].split()]"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4\\n\") == 6\n\"\"\"\n"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 5\") == \"3\"\n\"\"\"\n\nN, M = [int(c) for c in stdin.split(\" \")]\ncandies = [int(c) for c in stdin.split(\" \")]\n\nimport numpy as np\n\ncandies_array = np.array(candies)\n\npossible = (candies_array.reshape(-1, N) % M == 0).sum()\n\nprint(possible)\n"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 5\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 5\") == \"3\"\n\"\"\"\n\n\"\"\"\nGolomb Numbers\n\nGolomb numbers are a family of numbers used to encode the number of times that a positive integer occurs in a sequence.\n\nTask:\nA positive integer n is called a Golomb number if there exist positive integers a_1, a_2,..., a_n such that:\n - The numbers a_1, a_2,..., a_n are distinct.\n - a_1 +... + a_n = n\nWrite a function to determine whether or not a positive integer is a Golomb number.\n\nConstraints\n - 1 <= n <= 10^6\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 5\") == \"3\"\n\"\"\""
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 5\\n\") == \"3\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n4 1 5\") == 3\n"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n4 1 5') == '3'\n\"\"\""
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n4 1 5') == '3'\n\"\"\""
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 5\") == \"3\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 5') == '3'\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nA = [int(x) for x in sys.stdin.readline().split()]\n\nsum = 0\ncount = 0\nfor i in range(N):\n    sum += A[i]\n    if sum % M == 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 2\\n2 0\\n7 0\\n8 3\") == \"2\"\nassert solution(\"8 3\\n2 0\\n7 0\\n8 3\") == \"IMPOSSIBLE\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''8 2\n2 0\n7 0\n8 3''') == '2'\nassert solution('''8 3\n2 0\n7 0\n8 3''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n2 0\\n7 0\\n8 3\") == '2'\nassert solution(\"7 2\\n2 0\\n7 0\\n8 3\") == 'IMPOSSIBLE'\n\n\"\"\"\n\n\"\"\"\nThe solution is obvious.\n\"\"\""
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 0\\n4 0\\n7 0\\n3 0\\n\") == \"IMPOSSIBLE\"\nassert solution(\"8 2\\n2 0\\n7 0\\n8 3\\n\") == \"2\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\nlines = stdin.split('\\n')\nlines = [line for line in lines if line]\nn, m = list(map(int, lines[0].split()))\nnotes = []\nfor _ in range(m):\n    notes.append(list(map(int, lines[1 + _].split())))\n\nsorted_notes = []\nfor note in notes:\n    sorted_notes.append([note[1], note[0]])\nsorted_notes.sort()\n\ncurrent_height = sorted_notes[0][0]\ncurrent_day = sorted_notes[0][1]\nmax_height = current_height\nfor day, height in sorted_notes:\n    if height > current_height + 1:\n        current_height = height\n        current_day = day\n    else:\n        if height > max_height:\n            max_height = height\n\nprint(max_height if max_height!= current_height else \"IMPOSSIBLE\")\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 2\\n2 0\\n7 0\\n8 3\") == \"2\"\nassert solution(\"8 3\\n2 0\\n7 0\\n8 3\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n8 2\n2 0\n7 0\n8 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n8 3\n2 0\n7 0\n8 3\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 2\\n2 0\\n7 0\") == \"2\"\nassert solution(\"8 3\\n2 0\\n7 0\\n8 3\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 2\\n2 0\\n7 0\") == \"2\"\nassert solution(\"8 3\\n2 0\\n7 0\\n8 3\") == \"IMPOSSIBLE\"\n\n\"\"\""
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''8 2\n2 0\n7 0\n8 3''') == '2'\n\nassert solution('''8 3\n2 0\n7 0\n8 3''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 2\\n2 0\\n7 0\") == \"2\"\nassert solution(\"8 3\\n2 0\\n7 0\\n8 3\") == \"IMPOSSIBLE\"\n\n\n-----Tests-----"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n') == '3 0'\nassert solution('5 -4 2 1 8\\n') == '5 5 3 2 0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == \"3 0\"\nassert solution(\"5 -4 2 1 8\") == \"5 5 3 2 0\"\nassert solution(\"1\") == \"1\"\n\n\nimport re\n"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n') == '3 0'\n\nassert solution('5 -4 2 1 8\\n') == '5 5 3 2 0'\n\n\"\"\"\n"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 5\n''') == '3 0'\n\nassert solution('''5 -4 2 1 8\n''') == '5 5 3 2 0'\n\nassert solution('''1\n''') == '1'\n\nassert solution('''0\n''') == '1'\n\nassert solution('''7\n3 7 -1 -4 1 20\n''') == '7 7 5 3 1 0'"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"3 0\"\n\n\"\"\"\n"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"3 0\"\nassert solution(\"5 -4 2 1 8\") == \"5 5 3 2 0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"3 0\"\n\"\"\""
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"3 0\"\nassert solution(\"5 -4 2 1 8\") == \"5 5 3 2 0\"\n\"\"\"\n"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5') == '3 0'\nassert solution('5 -4 2 1 8') == '5 5 3 2 0'\n\nimport sys\n\n_stdin = sys.stdin.readline()\n_n = int(_stdin.split()[0])\n_arr = list(map(int, _stdin.split()[1:]))\n\n_solution = solution(_arr)\n_solution = [str(i) for i in _solution]\n_solution =''.join(_solution)\nprint(_solution)"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n') == '3 0'\nassert solution('5 -4 2 1 8\\n') == '5 5 3 2 0'\nassert solution('1\\n') == '1'\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 4\\n101\\n101\\n101\\n101\\n\") == '1'\nassert solution(\"1 1 1\\n100\") == '0'\nassert solution(\"1 1 10\\n0101010101\") == '19'\n"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3\\n111\\n111\\n\") == '2'\nassert solution(\"3 3 3\\n111\\n111\\n111\\n\") == '19'\nassert solution(\"1 1 10\\n0101010101\\n\") == '0'"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3\\n111\\n111\\n111\") == 2\nassert solution(\"3 3 3\\n111\\n111\\n111\\n111\\n111\\n111\") == 19\nassert solution(\"1 1 10\\n0101010101\") == 0\n\nsolution(\"2 2 3\\n111\\n111\\n111\")\nsolution(\"3 3 3\\n111\\n111\\n111\\n111\\n111\\n111\")\nsolution(\"1 1 10\\n0101010101\")\n\"\"\"\nimport sys\nimport itertools"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 3\\n111\\n111') == 2\n"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3\\n110\\n110\") == 2\n\"\"\""
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 3\\n111\\n111\\n111\\n\") == 2\nassert solution(\"2 2 3\\n110\\n110\\n110\\n\") == 0\nassert solution(\"1 1 10\\n11101010110\\n\") == 0\nassert solution(\"3 3 3\\n101010\\n101010\\n101010\\n\") == 19\n"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3\\n111\\n111\\n111\") == 2\nassert solution(\"3 3 3\\n111\\n111\\n111\\n111\\n111\\n111\") == 19\nassert solution(\"1 1 10\\n0101010101\") == 0"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 3\\n111\\n111') == '2'\nassert solution('3 3 3\\n111\\n111\\n111\\n') == '19'\nassert solution('1 1 10\\n01010101010') == '0'"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3\\n111\\n111\") == 2\n"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 3\\n111\\n111\\n111\\n\\n111\\n111\\n111\") == \"19\"\nassert solution(\"1 1 10\\n01010101\\n\\n111\\n111\") == \"0\"\nassert solution(\"2 2 3\\n010\\n110\\n110\\n\\n110\\n110\") == \"0\"\nassert solution(\"3 3 3\\n111\\n111\\n111\\n\\n111\\n111\\n111\") == \"0\"\nassert solution(\"2 2 3\\n010\\n010\\n110\\n110\\n110\\n110\\n\\n110\\n110\") == \"0\"\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,;\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1;\") == \"1\"\n\"\"\"\n\nimport re\nimport unittest\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba,123;1a;0\") == '\"123,0\"\\n\"aba,1a\"'\nassert solution(\"1;;01,a0,\") == '\"1\"\\n\",01,a0,,\"'\nassert solution(\"1\") == '\"1\"\\n\"\"'\nassert solution(\"a\") == '\"-\\n\"a\"'\n\"\"\"\n\ns = input()\nli = s.split(';')\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"\") == \"\"\nassert solution(\"-\") == \"\"\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aba,123;1a;0') == '\"123,0\"\\n\"aba,1a\"'\nassert solution('1;;01,a0,') == '\"1\"\\n\",\"01,a0,\"'\nassert solution('1') == '\"1\"\\n\"\"'\nassert solution('a') == '\"\"\\n\"a\"'\nassert solution(',1') == '\"1\"\\n\"1\"\\n\"\"'\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1;0\") == \"1\"\n\"\"\""
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,;\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"\"\n\"\"\"\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"a\") == \"-\"\nassert solution(\"0\") == \"-\"\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba,123;1a;0\") == '123,0'\nassert solution(\"1;;01,a0,\") == '1'\nassert solution(\"1\") == '1'\nassert solution(\"a\") == 'a'\n\"\"\""
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,;\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1;;01,a0,;\") == \"1\"\nassert solution(\"1;;01,a0,;\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 4\") == \"3 1 3\"\nassert solution(\"3 5\") == \"3 6 1 3\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution( \"2 4\" ) == \"3\"\nassert solution( \"3 5\" ) == \"3\"\nassert solution( \"1 1\" ) == \"0\"\n\n\n\n-------------\n| Subsequence | \n-------------\n\nThe subsequence is a non-empty sequence that contains all the elements of some sequence and their order must be the same as in the original sequence.\n\nFor example, the subsequences of \"abc\" are \"\", \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", \"abc\".\n\n\"\"\"\n\n\n\"\"\"\nclass Solution:\n    def findMaxLength(self, nums: List[int]) -> int:\n    \"\"\"\n    Input:\n    nums = [1, 0, 1, 1, 0, 1, 0, 1]\n    1. Find the start and end of a 1 sequence.\n    2. For each start, we need to find the end.\n    3. If the length of the current 1 sequence is greater than the longest one so far, record the length.\n    4. Use a hash table to record the number of 1s between the start and end.\n    \n    \"\"\"\n    # We can use the above idea to solve the problem.\n    # We can use a hash table to record the number of 1s between the start and end.\n    # We can use a hash table to record the start and end of a 1 sequence.\n    # We can use a hash table to record the number of 1s between the start and end.\n    \"\"\"\n    # Time: O(n)\n    # Space: O(n)\n    # Note: there is a bug in the solution, it will return an incorrect answer.\n    \n    # hash_table = {}\n    # start = 0\n    # longest = 0\n    # hash_table[start] = 0\n    # for i in range(len(nums)):\n    #     if nums[i] == 1:\n    #         hash_table[i] = hash_table[i-1] + 1\n    #         if longest < hash_table[i]:\n    #             longest = hash_table[i]\n    #     else:\n    #         hash_table[i] = hash_table[i-1] - 1\n    #         if hash_table[i] < 0:\n    #             hash_table[i] = 0\n    #     print(hash_table)\n    # return longest\n    \"\"\"\n    # Time: O(n)\n    # Space: O(n)\n    def get_count(subsequence):\n        count = 0\n        for x in subsequence:\n            if x == 1:\n                count += 1\n            else:\n                count -= 1\n        return count\n\n    # The length of the longest 1 sequence in the beginning is 0, \n    # the length of the longest 1 sequence in the end is 0.\n    length = {0:0}\n\n    # The start of the longest 1 sequence in the beginning is 0, \n    # the start of the longest 1 sequence in the end is 0.\n    start = {0:0}\n\n    for i, num in enumerate(nums):\n        count = get_count(nums[:i+1])\n        if count not in length:\n            length[count] = i+1\n        if count - 1 not in length:\n            start[count-1] = i+1\n        if count + 1 not in length:\n            start[count+1] = i+1\n\n    return max(length.values())\n\nassert Solution().findMaxLength([0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1]) == 17\nassert Solution().findMaxLength([1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1]) == 8\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1,2) == \"0\"\nassert solution(1,3) == \"1\"\nassert solution(1,5) == \"3\"\nassert solution(2,4) == \"1 3 1\"\nassert solution(2,5) == \"1 3 1\"\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\") == \"3 1 3\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"3 5\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == 3\nassert solution(\"2 4\") == 3\nassert solution(\"1 1\") == 0\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == '3'\n\"\"\""
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n\") == \"3\\n6 1 3\"\nassert solution(\"2 4\\n\") == \"3\\n1 3 1\"\nassert solution(\"1 1\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"3\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4') == \"0\"\nassert solution('3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4') == \"0\"\nassert solution('3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4') == \"3\"\nassert solution('3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4') == \"3\"\nassert solution('3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4') == \"3\"\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\") == \"3\"\nassert solution(\"3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport os\nimport inspect\nimport io\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\") == 3\n\"\"\"\n\n\"\"\"\n\u0412\u044b \u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435\u0441\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0439 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043f\u0440\u0435\u043c\u0438\u044e \u0432 \u0441\u043f\u043e\u0440\u0442\u0438\u0432\u043d\u043e\u043c \u0448\u0442\u0430\u0431\u0435. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0440\u0430\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0435 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u043c \u0438 \u0432\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 - \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u043d\u0435\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0438\u043c\u0435\u0435\u0442\u0435 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0443 \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445 \u0421\u0428\u0410. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 https://stepik.org/lesson/24473/step/8\n\n\u041e\u0434\u043d\u0430\u0436\u0434\u044b \u0432\u044b \u043d\u0430\u0441\u0442\u0443\u043f\u0438\u043b\u0438 \u043d\u0430 \u0431\u044e\u0434\u0436\u0435\u0442 \u043d\u0430 \u0441\u0442\u0430\u0440\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432 \u0421\u0428\u0410 \u0438 \u043f\u043e\u043d\u044f\u043b\u0438, \u0447\u0442\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0437\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043e \u043a\u043e\u043d\u0446\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 - \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u043d\u0435\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0438\u043c\u0435\u0435\u0442\u0435 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0443 \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445 \u0421\u0428\u0410.\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0430\u0440\u0443 \u0447\u0438\u0441\u0435\u043b, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0434\u043e\u0445\u043e\u0434\u044b \u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0434\u0435\u043d\u044c. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c.\n\n\u0421\u0447\u0438\u0442\u0430\u0435\u043c, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u043c\u044b \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0434\u043d\u0443 \u0437\u0430\u043f\u0438\u0441\u044c, \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0434\u0432\u0435 \u0432\u0435\u0442\u0432\u0438 \u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0432\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.\n\"\"\"\n\n\"\"\"\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043c\u0430\u0441\u0441\u0438\u0432, \u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c.\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430 \u0434\u0432\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438: \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438:"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8') == 3\nassert solution('3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4') == 0\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\") == '3'\nassert solution(\"3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\") == '0'\n\"\"\""
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\") == \"3\"\nassert solution(\"3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4\") == \"0\"\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\\n') == 3\n\n\"\"\"\n\n\nimport sys\nimport typing\n\nn = int(sys.stdin.readline().strip())\nclasses = list()\nfor i in range(n):\n    classes.append(tuple(map(int, sys.stdin.readline().strip().split())))\nm = int(sys.stdin.readline().strip())\nprograms = list()\nfor i in range(m):\n    programs.append(tuple(map(int, sys.stdin.readline().strip().split())))\n\nclass Duration:\n    def __init__(self, left, right):\n        self.left = left\n        self.right = right\n    def __lt__(self, other):\n        return self.left < other.left\n    def __eq__(self, other):\n        return self.left == other.left\n    def __gt__(self, other):\n        return self.left > other.left\n\nclass DurationIntersection:\n    def __init__(self, d1, d2):\n        self.d1 = d1\n        self.d2 = d2\n    def __lt__(self, other):\n        return self.d1 < other.d1 or (self.d1 == other.d1 and self.d2 < other.d2)\n    def __eq__(self, other):\n        return self.d1 == other.d1 and self.d2 == other.d2\n    def __gt__(self, other):\n        return self.d1 > other.d1 or (self.d1 == other.d1 and self.d2 > other.d2)"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\") == \"3\"\nassert solution(\"3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4\") == \"0\"\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\") == \"3\"\nassert solution(\"3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4\") == \"0\"\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8') == '3'\nassert solution('3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == '4'\nassert solution(\"7 6\") == '6'\nassert solution(\"100 100\") == '0'\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == '4'\nassert solution('7 6') == '6'\nassert solution('7 7') == '0'\nassert solution('4 10') == '4'\n\"\"\"\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"7 6\") == \"6\"\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2\\n1 2') == '1'\nassert solution('4 2\\n1 2\\n3 2\\n1 2') == '3'\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2') == '4'\nassert solution('7 6') == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5 1') == '5'\nassert solution('4 6') == '6'\nassert solution('3 3') == '5'\nassert solution('2 2') == '4'\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"7 6\") == \"6\"\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == 4\nassert solution(\"7 6\") == 6"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n\") == \"4\"\nassert solution(\"7 6\\n\") == \"6\"\nassert solution(\"10 5\\n\") == \"10\"\n\n\"\"\"\n\nn, v = list(map(int, input().split()))\n\nfuel = 0\ncity = 1\n\nwhile v > fuel:\n    fuel += city\n    city += 1\n\nprint(city - 1)"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"7 6\") == \"6\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 4 8') == '14'\nassert solution('4\\n1 -7 -2 3') == '-3'\nassert solution('5\\n1 -9 -2 3 -6 5') == '13'\n\"\"\""
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 4 8\") == '14'\nassert solution(\"4\\n1 -7 -2 3\") == '-3'\n\"\"\"\n\nn = int(input())\nstickers = list(map(int, input().split()))\n\ndp = [0] * n\ndp[0] = stickers[0]\ndp[1] = dp[0] + stickers[1]\n\nfor i in range(2, n):\n    dp[i] = max(stickers[i] + dp[i - 2], dp[i - 1])\n\nprint(dp[-1])\n"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 4 8\") == '14'\n\nassert solution(\"4\\n1 -7 -2 3\") == '-3'\n\n\"\"\""
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 4 8') == 14\nassert solution('4\\n1 -7 -2 3') == -3\nprint('Test finished')"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 4 8\") == 14\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 -7 -2 3\") == -3\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 4 8\") == \"14\"\nassert solution(\"4\\n1 -7 -2 3\") == \"-3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 4 8\") == \"14\"\nassert solution(\"4\\n1 -7 -2 3\") == \"-3\"\n"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 4 8\") == 14\nassert solution(\"4\\n1 -7 -2 3\") == -3\n\n\"\"\"\nimport math"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 4 8 1 9') == '7\\n4'\n\"\"\""
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 30\\n2 2 1\") == \"5\"\n"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 30\\n2 1 1') == '5'\nassert solution('3 20\\n2 1 1') == '-1'\nassert solution('1 1\\n1') == '-1'\n"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 30\\n2 2 1\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 30\\n2 1 1') == '5'\nassert solution('3 20\\n2 1 1') == '-1'\n\"\"\""
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 30\\n2 2 1\") == \"5\"\nassert solution(\"3 20\\n2 1 1\") == \"0\"\nassert solution(\"3 5\\n2 1 1\") == \"2\"\nassert solution(\"5 5\\n2 1 1\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 30\\n2 1 1\\n\") == \"5\"\nassert solution(\"3 20\\n2 1 1\\n\") == \"-1\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 20\\n2 1 1\") == \"-1\"\nassert solution(\"3 30\\n2 2 1\") == \"5\"\nassert solution(\"5 10\\n2 3 1 2 1 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1\") == 5\nassert solution(\"3 20\") == -1\n\"\"\"\n"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 30\\n2 2 1\") == \"5\"\nassert solution(\"3 20\\n2 1 1\") == \"-1\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 30\\n2 2 1') == '5'\nassert solution('3 20\\n2 1 1') == '-1'\n\n-----SUMMARY-----\n\n\"\"\"\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == '3'\nassert solution('9 3') == '13'\n\n\"\"\"\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('3 2') == 3\nassert solution('1 1') == 0\nassert solution('2 2') == 3\n\n'''"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == 3\nassert solution('9 3') == 13\nassert solution('1 1') == 1\nassert solution('1 10') == 9\nassert solution('9 100') == 891\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2') == '3'\nassert solution('4 3') == '4'\nassert solution('9 3') == '13'\n\nprint('Hooray!')\n\n\"\"\"\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 2') == '3'\nassert solution('9 3') == '13'\nassert solution('11 4') == '12'\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 3') == '13'\nassert solution('1 1') == '1'\nassert solution('4 1') == '4'\nassert solution('1 2') == '2'\nassert solution('1 3') == '3'\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 3\") == 13\nassert solution(\"2 2\") == 3\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '3'\nassert solution('9 3') == '13'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"9 3\") == \"13\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"9 3\") == \"13\"\n\"\"\"\n\nn, m = map(int, input().split())\ns = []\ncnt = 0\nfor i in range(n):\n    s.append(i + 1)\n\nfor i in range(m):\n    if len(s) == 0:\n        cnt += 1\n        continue\n    s.pop(0)\n    s.append(s.pop(0))\n\nprint(cnt + 1)\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 7 -7 3 -1 -3\") == \"1\"\nassert solution(\"1 7 -7 3 -1 -3\") == \"1\"\nassert solution(\"1 7 -7 3 -1 -3\") == \"1\"\n\nassert solution(\"2 5 -5 5 -5 -2\") == \"-1\"\nassert solution(\"2 5 -5 5 -5 -2\") == \"-1\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-8 1 1\\n\") == \"2\\n-1\"\nassert solution(\"6\\n1 7 -7 3 -1 -3\\n\") == \"1\\n6\"\nassert solution(\"6\\n2 5 -5 5 -5 -2\\n\") == \"1\\n-1\"\nassert solution(\"6\\n-2 5 -5 5 -5 -2\\n\") == \"-1\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 7 -7 3 -1 -3\") == '1\\n6\\n'\nassert solution(\"8\\n1 -1 1 2 -1 -2 3 -3\") == '2\\n2 6\\n'\nassert solution(\"6\\n2 5 -5 5 -5 -2\") == '-1'\nassert solution(\"3\\n-8 1 1\") == '-1'\n\n\"\"\""
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 1 2 -1 -2 3 -3\") == \"2\\n2 6\"\nassert solution(\"3\\n-8 1 1\") == \"0\"\nassert solution(\"6\\n1 7 -7 3 -1 -3\") == \"-1\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n4 -1\\n-1 -1\\n4 -1') == '1\\n2 1 2'\nassert solution('4\\n4 -1\\n-1 -1\\n4 -1') == '-1'\nassert solution('7\\n-1 1 -1\\n1 2 -1\\n2 -1 3\\n-1 -1 4\\n4 5 -1') == '1\\n5 2'\nassert solution('5\\n0 1 -1\\n2 3 -1\\n3 -1 4\\n-1 -1 5') == '-1'\nassert solution('5\\n0 1 -1\\n2 -1 3\\n-1 -1 5') == '-1'\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 7 -7 3 -1 -3\") == \"1\\n6\\n\"\nassert solution(\"8\\n1 -1 1 2 -1 -2 3 -3\") == \"2\\n2 6\\n\"\nassert solution(\"6\\n2 5 -5 5 -5 -2\") == \"-1\\n\"\nassert solution(\"3\\n-8 1 1\") == \"-1\\n\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 7 -7 3 -1 -3\") == \"1\"\nassert solution(\"8 1 1\") == \"2\"\nassert solution(\"6 2 5 -5 5 -5 -2\") == \"1\"\nassert solution(\"6 1 -1 1\") == \"2\"\nassert solution(\"3 -8 1 1\") == \"-1\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 7 -7 3 -1 -3') == '1'\nassert solution('8\\n1 -1 1 2 -1 -2 3 -3') == '2'\nassert solution('6\\n2 5 -5 5 -5 -2') == '-1'\nassert solution('3\\n-8 1 1') == '-1'\n\n\"\"\"\nfrom typing import List, Dict\nfrom collections import Counter\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5 -5 5 -5 -2\") == \"-1\"\nassert solution(\"8 1 1\") == \"-1\"\nassert solution(\"6 2 5 -5 5 -5 -2\") == \"-1\"\nassert solution(\"7 -1 1 -1 6 6 6\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 7 -7 3 -1 -3\") == '1'\nassert solution(\"8\\n1 -1 1 2 -1 -2 3 -3\") == '2'\nassert solution(\"6\\n2 5 -5 5 -5 -2\") == '-1'\nassert solution(\"3\\n-8 1 1\") == '-1'\nassert solution(\"3\\n-8 1 1\") == '-1'\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5 2 2\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1\") == \"2\\n1\\n4\\n5\"\nassert solution(\"4\\n10 8 6 4\\n10 8 6 4\") == \"5\\n1\\n4\\n5\"\nassert solution(\"5\\n1\\n5\\n3\\n1\\n2\\n3\\n3\\n2\\n1\\n1\\n1\\n1\") == \"3\\n1\\n4\\n5\"\nassert solution(\"5\\n2\\n1\\n5\\n3\\n1\\n2\\n3\\n3\\n2\\n1\\n1\\n1\\n1\") == \"3\\n1\\n4\\n5\"\nassert solution(\"4\\n10 8 6 4\") == \"5\\n1\\n4\\n5\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1 1\\n1') == '2'\nassert solution('9 8 9') == '1'\nassert solution('4 9 10 1 3 2 3 1 1') == '2'\nassert solution('10 8 6 4') == '5'\n\"\"\""
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 9 3\") == \"1\"\nassert solution(\"3 9 2\") == \"2\"\nassert solution(\"5 10 4\") == \"3\"\nassert solution(\"6 10 6\") == \"3\"\nassert solution(\"3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n4 9\\n2 3 2 3\\n2 3 2 3') == '2'\nassert solution('1\\n1 1 1 1\\n1') == '0'\nassert solution('3\\n1 1 1 1\\n1 1 1 1') == '4'\n\n-----Explanation-----\n\nIn the first test case, there is only one possible solution: buy a subscription for the show $1$ and a subscription for the show $2$.\n\nIn the second test case, there is only one possible solution: buy subscriptions for all shows.\n\nIn the third test case, you can buy subscriptions for any of the shows: $1$, $2$, $3$, $4$, $5$, $6$, $7$.\n\nIn the fourth test case, you can buy subscriptions for any of the shows: $1$, $2$, $3$, $4$, $5$, $6$, $7$, $8$, $9$.\n\nIn this case you have only four consecutive days, so in this case you can't get any of the subscriptions.\n\n\n\"\"\""
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 2\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1') == '2'\nassert solution('4 10 4\\n10 8 6 4') == '5'\nassert solution('16 9 8\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3') == '5'\n\"\"\"\n\nfrom sys import stdin, stdout\n\nt = int(stdin.readline())\n\nfor _ in range(t):\n    n, k, d = [int(i) for i in stdin.readline().split()]\n    shows = [int(i) for i in stdin.readline().split()]\n    last = d\n    c = 0\n\n    for i in range(n):\n        if shows[i] == k:\n            c += 1\n            last = d\n        else:\n            last = min(shows[i], last)\n\n        if last == d:\n            break\n\n    stdout.write(str(c) + '\\n')\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 2\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1\\n4 10 4\\n10 8 6 4\\n16 9 8\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\") == \"2 1 1 4\\n\"\n\"\"\"\n\nimport re\nfrom sys import stdin"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 2\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1') == '2\\n1\\n4'\nassert solution('5 2 2\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1') == '1\\n1\\n4'\nassert solution('4 10 4\\n10 8 6 4\\n16 9 8\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3') == '5\\n5\\n4'\n\"\"\"\n\n\"\"\"\nimport collections\n\nclass Solution:\n    def min_shows(self, stdin):\n        n, k, d = map(int, stdin.readline().split())\n        shows = list(map(int, stdin.readline().split()))\n        counter = collections.Counter(shows)\n        count = sum([1 for key, value in counter.items() if value == 1])\n        days = max(shows) * 2 + 1\n        min_shows = 0\n        while days <= n:\n            for show in counter:\n                if show * 2 <= days:\n                    counter[show] -= 1\n                    if counter[show] == 0:\n                        count -= 1\n            min_shows += 1\n            if count == 0:\n                break\n            days += 1\n        return min_shows\n\nassert Solution().min_shows('4 2 2\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1') == '2\\n1\\n4'\nassert Solution().min_shows('5 2 2\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1') == '1\\n1\\n4'\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5\\n4 3 2\\n9 1 2 1 2 1\\n1\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\\n') == '2 1 1 4'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(read_input_lines()) == write_output_line()\n\"\"\"\n\n\n\nimport os\nfrom typing import List, Union\nimport pytest\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 9 3\\n3 2 1 2 1\\n1 2 1 2 1') == '2\\n1\\n4\\n5'\n\"\"\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n#...\\n####.\\n.####\\n...#.\\n.....\") == \"YES\"\nassert solution(\"4\\n####\\n####\\n####\\n####\") == \"NO\"\nassert solution(\"6\\n.#..#\\n######\\n.####.\\n.####.\\n######\\n.#..#.\") == \"YES\"\nassert solution(\"6\\n.#..#.\\n######\\n.####.\\n.####.\\n######\\n.#..#.\") == \"NO\"\nassert solution(\"3\\n...\\n...\\n...\\n\") == \"YES\"\n\"\"\""
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n####\\n####\\n####\\n####\\n') == 'YES'\nassert solution('5\\n.#...\\n####.\\n#.....\\n######\\n.#....\\n') == 'YES'\nassert solution('2\\n.###\\n##.#') == 'NO'\nassert solution('5\\n.#...\\n####.\\n#.....\\n######\\n.#....\\n') == 'NO'\nassert solution('4\\n.##.\\n..##\\n###.\\n.##.') == 'YES'\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n.#...\\n####.\\n.####\\n...#.\\n.....') == 'YES'\nassert solution('4\\n####\\n####\\n####\\n####') == 'YES'\nassert solution('6\\n.#..#\\n######\\n.####\\n.####\\n######\\n.#..#') == 'NO'\n\"\"\""
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n.##.\\n##.#\\n####\\n.#.#') == 'YES'\nassert solution('3\\n#.#.\\n.#.#\\n#.#.\\n') == 'YES'\nassert solution('3\\n.##.\\n#.#.\\n#.#.\\n') == 'NO'\n\n\"\"\""
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n.#.\\n..#\") == \"YES\"\nassert solution(\"5\\n.#.\\n#.#\\n.##\\n.#.\") == \"YES\"\nassert solution(\"4\\n#....\\n#....\\n#....\\n#....\") == \"NO\"\nassert solution(\"5\\n.#.\\n#.#\\n.##\\n.#.\") == \"NO\"\nassert solution(\"6\\n.#.\\n#.#\\n.##\\n.#.\") == \"YES\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n.#...\\n####.\\n.####\\n...#.\\n.....') == \"YES\"\nassert solution('4\\n####\\n####\\n####\\n####') == \"NO\"\nassert solution('6\\n.#..#\\n######\\n.####\\n.####\\n######\\n.#..#') == \"YES\"\nassert solution('6\\n.#..#\\n######\\n.####\\n.####\\n######\\n.#..#') == \"YES\"\nassert solution('3\\n...\\n...\\n...') == \"YES\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n.####\\n####.#\\n.####\\n####.#\\n####.#\\n.####\\n.###.\\n###.#\\n#.##.\\n###.#\\n###.#') == 'YES'\nassert solution('4\\n#.#.\\n###.\\n#.#.\\n###.\\n#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.') == 'NO'\nassert solution('4\\n#.#.\\n###.\\n#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.\\n#.#.') == 'NO'\nassert solution('5\\n#.....\\n##...#\\n#...#.\\n#.....\\n#.....\\n######\\n#..#.#\\n#...#.\\n#...#.\\n#.###.\\n#.#.##\\n#.....') == 'YES'\nassert solution('4\\n#...#\\n#.#.#\\n#.#.#\\n#.#.#\\n#.#.#\\n#.#.#\\n#.#.#\\n#.#.#\\n#.#.#\\n#.#.#') == 'YES'\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n.#..#.\\n######\\n.#..#.\\n######\\n.#..#.\\n######\\n.####.\") == \"NO\"\nassert solution(\"5\\n.###.\\n.#..#\\n#...#\\n#.#.#\\n#..#.\") == \"YES\"\nassert solution(\"5\\n.###.\\n.#..#\\n#...#\\n#.#.#\\n#.###\") == \"YES\"\nassert solution(\"3\\n.###\\n#..#\\n#.#.\") == \"YES\"\nassert solution(\"4\\n#..#\\n#..#\\n#..#\\n#..#\") == \"YES\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('..#\\n###\\n#.#') == \"YES\"\nassert solution('#..\\n.#.\\n..#') == \"NO\"\nassert solution('#.\\n#.\\n#.') == \"NO\"\nassert solution('#.\\n#.\\n#.') == \"YES\"\nassert solution('#.#\\n#.#\\n#.') == \"YES\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n...\\n####\\n.###\") == 'YES'\nassert solution(\"3\\n...\\n#.#\\n###\") == 'NO'\nassert solution(\"4\\n#....\\n####.\\n#.##\\n######\\n#..#.\\n\") == 'YES'\nassert solution(\"4\\n#....\\n#####\\n#.##\\n######\\n#..#.\\n\") == 'NO'\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 100\\n5 30') == '15'\nassert solution('3 100\\n7 901\\n10 15\\n100 501\\n200 4000') == '1199'\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 100\") == \"15\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 100\\n\") == \"33\"\nassert solution(\"5 30\\n\") == \"15\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 100\") == \"33\"\nassert solution(\"5 30\") == \"15\"\n\"\"\"\n\nk, p = input().split(' ')\nk, p = int(k), int(p)\n\nresult = 0\n\nfor i in range(1, k + 1):\n    if str(i) == str(i)[::-1]:\n        result += i * 10 ** len(str(i))\n\nprint(result % p)\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 100\\\\n') == '33'\nassert solution('5 30\\\\n') == '15'"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 11\") == \"18\"\nassert solution(\"5 11\") == \"15\"\nassert solution(\"5 1\") == \"0\"\nassert solution(\"7 1\") == \"0\"\nassert solution(\"3 1\") == \"0\"\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 100\\n5 30\") == \"15\"\n\"\"\"\n\nfrom sys import stdin\nfrom typing import List\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 100') == '33'\nassert solution('5 30') == '15'\n\n\"\"\"\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(12345) == 13\n\"\"\"\nimport os\nimport sys\nimport time\nimport pytest\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\n\nfrom aoc import utils"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"5 30\") == \"15\"\nassert solution(\"2 100\") == \"33\"\nassert solution(\"5 30\") == \"15\"\nassert solution(\"5 200\") == \"25\"\n\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"saddas\") == \"NO\"\nassert solution(\"tavvat\") == \"YES\"\nassert solution(\"abab\") == \"NO\"\nassert solution(\"ababa\") == \"YES\"\n\n'''"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"saba\") == \"NO\"\nassert solution(\"saddastavvat\") == \"YES\""
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == \"NO\"\nassert solution(\"abcddcba\") == \"YES\"\nassert solution(\"abcbaba\") == \"NO\"\nassert solution(\"abcddde\") == \"NO\"\n\"\"\""
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"NO\""
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abab\") == \"NO\"\nassert solution(\"ababa\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == \"YES\" or solution(s) == \"NO\"\n\nprint(solution(stdin))\n\n\n\"\"\""
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sabaa\") == \"YES\"\nassert solution(\"saddastavvat\") == \"YES\"\nassert solution(\"sababa\") == \"NO\"\nassert solution(\"ss\") == \"NO\"\nassert solution(\"s\") == \"YES\"\n"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"abba\"\n) == \"YES\"\nassert solution(\n    \"ababa\"\n) == \"NO\"\nassert solution(\n    \"abcdefghhgfedecba\"\n) == \"NO\"\nassert solution(\n    \"aabbccddee\"\n) == \"NO\"\nassert solution(\n    \"abcdedcba\"\n) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"sad\") == \"NO\"\nassert solution(\"saddastavvat\") == \"YES\"\nassert solution(\"aaa\") == \"NO\"\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbad\") == \"NO\"\nassert solution(\"abbbdd\") == \"NO\"\nassert solution(\"abbbbaa\") == \"YES\"\nassert solution(\"saxsaxsax\") == \"YES\"\nassert solution(\"saxsaxsaxsax\") == \"YES\"\n"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n2 5\") == '7'\nassert solution(\"4 3\\n2 3 5 9\") == '9'\nassert solution(\"3 2\\n3 5 7\") == '8'\n\"\"\""
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n3 5 7') == '8'\n"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n2 5\") == \"7\"\nassert solution(\"4 3\\n2 3 5 9\") == \"9\"\nassert solution(\"3 2\\n3 5 7\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n2 5') == '7'\nassert solution('4 3\\n2 3 5 9') == '9'\nassert solution('3 2\\n3 5 7') == '8'\n\"\"\""
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n2 5\\n') == '7'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n2 5') == '7'\nassert solution('4 3\\n2 3 5 9') == '9'\nassert solution('3 2\\n3 5 7') == '8'\n\n\"\"\""
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2, 1) == \"7\"\nassert solution(4, 3) == \"9\"\nassert solution(3, 2) == \"8\"\n\"\"\""
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2 1) == \"7\"\nassert solution(4 3) == \"9\"\nassert solution(3 2) == \"8\"\nassert solution(4 1) == \"2\"\n"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n2 3 5 9\") == \"9\"\nassert solution(\"3 2\\n3 5 7\") == \"8\"\nassert solution(\"4 2\\n2 5 9\") == \"9\"\n"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n2 5') == '7'\nassert solution('4 3\\n2 3 5 9') == '9'\n\"\"\"\nimport sys"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 1 0\") == \"1\"\nassert solution(\"5\\n1 0 1 0 1\") == \"4\"\nprint(\"All cases passed!\")"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 1 0\") == \"1\"\nassert solution(\"5\\n1 0 1 0 1\") == \"4\"\nprint('The code ran Correctly')"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 0 1\\n') == '4'\nassert solution('5\\n1 0 1 0 1\\n') == '3'"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 11 0\") == \"1\"\nassert solution(\"101 11 1\") == \"3\"\nassert solution(\"101 11\") == \"4\"\nassert solution(\"11 101 1\") == \"0\"\nassert solution(\"11 101\") == \"3\"\n"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == '4'\n\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\nm = sum(arr)\n"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 1 0\") == \"1\"\nassert solution(\"5\\n1 0 1 0 1\") == \"4\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 0\") == \"1\"\nassert solution(\"5 1 0 1 0 1\") == \"4\"\nprint(\"Test Completed\")\n\n\n\n'''"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 0 1 0 1''') == '4'\nassert solution('''3\n1 0 1''') == '1'\nassert solution('''5\n0 1 0 1''') == '1'\nassert solution('''5\n0 1 0 1''') == '0'\nassert solution('''5\n1 0 1 0''') == '0'\n"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 1 0 1') == '4'\nassert solution('3\\n0 1 0') == '1'\nassert solution('3\\n0 0 1') == '1'\nassert solution('3\\n1 0 1') == '1'\nassert solution('3\\n1 1 1') == '1'\n"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 1 0\") == \"1\"\nassert solution(\"5\\n1 0 1 0 1\") == \"4\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3\\n2\\n5 6') == '9:6'\n"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5\\n2\\n1\\n2\") == \"15:10\"\nassert solution(\"1\\n4\\n5\") == \"9:4\"\nassert solution(\"1\\n4\\n5\\n1\\n2\\n3\\n1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\") == \"9:4\"\n"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2\\n3') == '9:6'\n\"\"\""
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\\n2\\n5 6\") == '9:6'\n\nassert solution(\"5\\n6 7 8 9 10\\n5\\n1 2 3 4 5\") == '15:10'"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3\\n2\\n5 6') == '9:6'\n\n\"\"\""
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2\\n3') == '9:6'\nassert solution('5\\n6\\n7\\n8\\n9\\n10') == '15:10'"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\\n2\\n5 6\") == \"9:6\"\nassert solution(\"5\\n6 7 8 9 10\\n5\\n1 2 3 4 5\") == \"15:10\"\n\"\"\""
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3\\n2\\n5 6') == '9:6'\n\"\"\"\n\n\"\"\"\n3\n1 2 3\n2\n5 6\n\n9:6\n\n3\n1 2 3\n2\n5 6\n\n15:10\n\n5\n6 7 8 9 10\n5\n1 2 3 4 5\n\n15:10\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\\n2\\n5 6\") == \"9:6\"\nassert solution(\"5\\n6 7 8 9 10\\n5\\n1 2 3 4 5\") == \"15:10\"\n\"\"\"\n"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3\\n2\\n5 6') == '9:6'\n\"\"\""
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aa') == '-1'\nassert solution('abacaba') == 'abaacba'\nassert solution('xdd') == 'xdd'\n\"\"\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"xdd\") == \"xdd\"\nassert solution(\"aa\") == -1\nassert solution(\"aba\") == -1\n\"\"\"\nimport re\nfrom collections import Counter\n\ns = stdin.read().split('\\n')[1:]\n\nr = []\n\nfor i in s:\n    if Counter(i)['a'] > 1:\n        r.append('-1')\n        continue\n    t = list(i)\n    t.sort()\n    r.append(''.join(t))\n\nprint('\\n'.join(r))"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aa\") == \"abaacba\"\nassert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"xdd\") == \"xdd\"\n\"\"\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"aa\") == -1\nassert solution(\"xdd\") == \"xdd\""
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == res\n\n---Problem 622. Maximum Sum of 3 Non-Overlapping Subarrays\n\n\nThe sequence of numbers a1, a2,..., an is called arithmetic if the difference between any two consecutive elements is the same. More formally, ai + aj = aj + ai for 1 <= i < j <= n.\n\nFor example, in array [1, 2, 3, 4], 3 + 4 = 1 + 2, and thus it is arithmetic.\n\nThe function should return the number of arithmetic subarrays of length l.\n\nExample\n\nFor n = 7 and l = 3, the output should be\nmaxSumOfThreeArithmeticSubarrays(n, l) = 3.\n\nThere are three arithmetic subarrays of length l: [1, 2, 3], [2, 3, 4] and [1, 2, 3].\n\nFor n = 9 and l = 2, the output should be\nmaxSumOfThreeArithmeticSubarrays(n, l) = 6.\n\nThere are six arithmetic subarrays of length l: [1, 2], [2, 3], [3, 4], [4, 5], [5, 6] and [1, 2, 3, 4, 5, 6].\n\nThe best answer is 3, as it occurs for the subarrays [1, 2, 3], [2, 3, 4] and [1, 2, 3].\n\n'''"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aa') == '-1'\nassert solution('abacaba') == 'abaacba'\nassert solution('xdd') == 'xdd'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"xdd\") == \"xdd\"\nassert solution(\"aa\") == \"abaacba\"\n\"\"\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aa') == 'abaacba'\nassert solution('abacaba') == 'abaacba'\nassert solution('xdd') == 'xdd'\n\"\"\""
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aa') == 'abaacba'\nassert solution('abacaba') == '-1'\nassert solution('xdd') == 'xdd'\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aa\") == -1\nassert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"xdd\") == \"xdd\"\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n0 1 1\\n0 1 0\") == '4'\nassert solution(\"3 3\\n0 0 1\\n0 0 0\\n1 0 0\") == '2'\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n0 0 0\\n0 0 1\\n0 0 0\\n\") == \"4\"\n\"\"\"\n\nstdin = input()\n\nn, m = [int(s) for s in stdin.split()]\n\ntable = [[int(x) for x in input().split()] for _ in range(n)]\n\ngood_cells = [i for i in range(n) for j in range(m) if table[i][j]]"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n0 0 0\\n0 1 0\\n0 0 0\\n') == '4'\nassert solution('4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\\n') == '2'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3\n0 0 0\n0 0 1\n0 0 0''') == '4'\nassert solution('''4 3\n0 0 0\n0 0 1\n1 0 0\n0 0 0''') == '2'\nassert solution('''5 4\n0 0 0 0\n0 0 1 0\n0 0 0 0\n0 0 0 0\n0 0 1 0''') == '7'"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\\n\") == \"2\"\nassert solution(\"4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\\n\") == \"2\""
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4 3\n0 0 0\n0 0 1\n1 0 0\n0 0 0\"\"\") == \"2\"\n\nassert solution(\"\"\"3 3\n0 0 0\n0 0 1\n1 0 0\n0 0 0\"\"\") == \"4\"\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n0 0 0\\n0 0 1\\n0 0 0\\n0 0 0\") == \"4\"\nassert solution(\"4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\\n\") == \"2\"\n\"\"\"\nimport sys\nfrom itertools import combinations"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n0 0 0\\n0 0 1\\n0 0 0\") == \"4\"\nassert solution(\"4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\") == \"2\"\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0') == '2'\nassert solution('4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0') == '4'\n\nassert solution('3 3\\n0 0 0\\n0 0 1\\n0 0 0') == '4'\nassert solution('3 3\\n0 0 0\\n0 0 1\\n0 0 0') == '2'\n\nassert solution('5 5\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '4'\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"white\"\nassert solution(\"3\") == \"black\"\nassert solution(\"5\") == \"white\"\nassert solution(\"2\") == \"white\"\nassert solution(\"4\") == \"white\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'white'\nassert solution('1') == 'black'\nassert solution('2') == 'white'\nassert solution('3') == 'black'\nassert solution('4') == 'white'\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"white\"\nassert solution(\"2\") == \"black\""
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 'white'\n\"\"\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == \"black\"\nassert solution(2) == \"white\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"white\"\nassert solution(\"3\") == \"black\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"2\"\n    ) == \"white\"\n\nassert solution(\n    \"3\"\n    ) == \"black\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"white\"\nassert solution(\"5\") == \"black\"\nassert solution(\"6\") == \"white\"\nassert solution(\"7\") == \"black\"\nassert solution(\"8\") == \"white\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n2 1\") == \"white\"\n\"\"\"\n\nN = int(input())\n\nx1, y1 = None, None\nx2, y2 = None, None\n\nfor i in range(N):\n    line = input().split()\n    x, y = line[0], line[1]\n    if 'Q' in line:\n        x1, y1 = x, y\n    if 'q' in line:\n        x2, y2 = x, y"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"white\"\nassert solution(\"3\") == \"black\"\n\"\"\""
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 0 0 0 1\") == \"0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 0 0 0 1\\n\") == \"0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 0 0 0 1\\n\") == '0 2 3 3 3 3 3 3 3 3 3 3 3'\nassert solution(\"12\\n0 0 0 0 1 1 1 1 0 1 1 0\\n\") == '9 12 13 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15'\n"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 0 0 0 1\") == \"0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 0 0 0 1\\n') == '0 2 3 3 3 3 3 3 3 3 3 3'\nassert solution('12\\n0 0 0 0 1 1 1 1 0 1 1 0\\n') == '9 12 13 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15'\n"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 0 0 0 1\") == \"0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 0 0 0 1\") == \"0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 0 0 0 1 1\\n\") == \"0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 0 0 1') == '0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 0 0 0 1\") == \"0 2 3 3 3 3 3 3 3 3 3\"\n"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 0\\n2 1') == '1'\nassert solution('3 2\\n1 2\\n2 3') == '4'"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"4\"\nassert solution(\"3 2\\n1 2\\n3 2\") == \"4\"\nassert solution(\"5 2\\n3 1\\n3 2\\n4 2\\n5 1\") == \"8\"\n\"\"\"\n\nimport sys\nimport os\nimport ast\nimport inspect\nimport io\n\ncurrentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))\nparentdir = os.path.dirname(currentdir)\nsys.path.insert(0, parentdir)\nfrom Code import DoublyLinkedList"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0\\n1 2\") == 1\nassert solution(\"2 1\\n1 2\") == 2\nassert solution(\"3 2\\n1 2\\n2 3\") == 4\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == 8\n\"\"\"\n\nimport collections\nfrom itertools import combinations\nfrom math import comb"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 2\") == 2\nassert solution(\"3 2\\n1 2\\n2 3\") == 4\nassert solution(\"5 6\\n2 3\\n4 5\\n6 1\") == 32\n"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n1 2\") == \"2\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"4\"\nassert solution(\"3 2\\n1 2\\n2 3\\n3 1\") == \"4\"\n"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == 4\n\nassert solution(\"3 2\\n1 2\\n2 3\\n3 1\") == 2\n\nassert solution(\"3 2\\n1 3\\n3 1\") == 4\n\nassert solution(\"3 2\\n1 3\\n2 3\") == 4\n\nassert solution(\"1 0\\n1 1\") == 1"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 2\") == 2\nassert solution(\"3 2\\n1 2\\n2 3\") == 4"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 2\") == 2\nassert solution(\"3 2\\n1 2\\n2 3\") == 4\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == 6\nassert solution(\"3 2\\n1 3\\n3 2\\n2 1\") == 4\n"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1\\n1 2') == '2'\nassert solution('3 2\\n1 2\\n2 3') == '4'\n\"\"\"\nimport sys"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n 1 2\\n 2 3') == '4'\nassert solution('2 1\\n 1 2') == '2'\nassert solution('2 2\\n 1 2\\n 2 3') == '4'\n\"\"\"\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('4') == '3'"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n\"\"\"\n\nn = int(input())\n\ni = 1\n\nwhile n!= 1:\n    if n % 2 == 0:\n        n = n // 2\n        i += 1\n    else:\n        n = 3 * n + 1\n        i += 1\n\nprint(i)"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 3 3\") == \"2\"\nassert solution(\"5\\n5 4 5 4 4\") == \"5\"\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3\") == \"2\"\nassert solution(\"5 4 5 4 4\") == \"5\"\nassert solution(\"5 5 5 5 5\") == \"5\"\nassert solution(\"5 4 5 4 4\") == \"5\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 3 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3 3 3\") == \"2\"\nassert solution(\"5\\n5 4 5 4 4\") == \"5\"\nassert solution(\"10\\n3 5 6 9 1 4 8 2 7 1\") == \"7\"\n\"\"\""
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 3') == '2'\nassert solution('5 4 5 4 4') == '5'\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n3 3 3') == '2'\nassert solution('5\\n5 4 5 4 4') == '5'\nassert solution('3\\n1 2 3') == '2'\nassert solution('3\\n2 1 3') == '2'\nassert solution('3\\n3 2 1') == '2'\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3\") == \"2\"\nassert solution(\"5 4 5 4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3\") == \"2\"\nassert solution(\"5 4 5 4 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 3\") == \"2\"\nassert solution(\"5 4 5 4 4\") == \"5\"\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 3\") == 2\n\nprint(solution(\"5 4 5 4 4\")) # 5\n\n\"\"\""
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '1 3'\nassert solution('12') == '5 7'\nassert solution('123456789') == '8 9'\n"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '1 3'\nassert solution('12') == '5 7'\n\n\"\"\"\n\nn = int(input())\nprint(\"1\", n - n % 2 - 1, n - n % 2)\n"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1 2'\n\"\"\"\nimport math"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1 2\"\nassert solution(\"4\") == \"1 3\"\nassert solution(\"12\") == \"5 7\"\nassert solution(\"1000\") == \"41 10\"\nassert solution(\"9\") == \"3 1\"\n\n\"\"\"\nimport unittest\nimport math\n"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(3)) == '1 2'\nassert solution(str(4)) == '1 3'\nassert solution(str(12)) == '5 7'\n"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '1 3'\nassert solution('12') == '5 7'\n\"\"\""
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '1 3'\nassert solution('12') == '5 7'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '1 3'\nassert solution('12') == '5 7'\nassert solution('20') == '7 9'\nassert solution('600') == '59 19'\n"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n''') == '1 2'\nassert solution('''4\n''') == '1 3'\nassert solution('''12\n''') == '5 7'\nassert solution('''7\n''') == '5 1'\nassert solution('''10\n''') == '3 6'"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '1 1'\nassert solution('5') == '1 1'\nassert solution('2') == '1 1'\nassert solution('1 1') == '1 1'\nassert solution('3') == '1 1'\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1\") == \"8\"\nassert solution(\"7 9 1\") == \"28\"\nassert solution(\"7 9 2\") == \"40\"\nprint('All tests passed.')\n\nsolution(stdin)\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1\") == \"8\"\nassert solution(\"7 9 1\") == \"28\"\nassert solution(\"7 9 2\") == \"40\"\n\n\"\"\"\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 1') == 8\nassert solution('7 9 1') == 28\nassert solution('7 9 2') == 40\n\"\"\"\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1\") == \"8\"\nassert solution(\"7 9 1\") == \"28\"\nassert solution(\"7 9 2\") == \"40\""
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 3 1''') == '8'\nassert solution('''7 9 1''') == '28'\nassert solution('''7 9 2''') == '40'\n\"\"\"\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 1') == '8'\nassert solution('7 9 1') == '28'\nassert solution('7 9 2') == '40'\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1\") == \"8\"\nassert solution(\"7 9 1\") == \"28\"\nassert solution(\"7 9 2\") == \"40\"\nprint('test passed')\n\n\"\"\"\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 1') == '6'\nassert solution('2 3 1') == '12'\nassert solution('2 3 2') == '28'\nassert solution('2 2 2') == '8'\n\"\"\"\n\nw, h, k = [int(i) for i in input().split()]\n\nprint(w*h - (k - 1) * 4)\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 9 1') == '28'\nassert solution('7 9 2') == '40'\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 9 1\") == \"28\"\n\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().split(\" \")\na = [int(x) for x in a]"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2 4 12\") == \"Yes\"\nassert solution(\"7 15 10 12\") == \"Yes\"\nassert solution(\"7 15 10 12\") == \"No\"\n\"\"\""
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 4\\n1 2 3\") == \"Yes\"\nassert solution(\"3 4 4\\n1 2 3\") == \"No\""
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"3\", \"4\", \"4\", \"1\", \"2\"]) == \"Yes\"\nassert solution([\"3\", \"4\", \"4\", \"1\", \"2\"]) == \"Yes\"\nassert solution([\"5\", \"10\", \"1\", \"4\", \"1\", \"0\", \"1\"]) == \"Yes\"\nassert solution([\"3\", \"4\", \"4\", \"1\", \"2\"]) == \"Yes\"\nassert solution([\"5\", \"10\", \"1\", \"4\", \"1\", \"0\", \"1\"]) == \"Yes\"\n"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 4 12\") == 'Yes'\nassert solution(\"7 15 10 12\") == 'Yes'\nassert solution(\"7 2 4 12\") == 'Yes'\nassert solution(\"7 2 4 12\") == 'Yes'\nassert solution(\"4 4 4\") == 'No'\n"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 4\\n1 2 3\") == \"No\"\nassert solution(\"7 2 4 12\") == \"Yes\"\nassert solution(\"7 15 10 12\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2 4 12\\n7 15 10 12') == 'Yes'\nassert solution('7 4 4\\n1 2 3') == 'No'\n"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4 4\\n1 2 3') == 'Yes'\nassert solution('3 4 4\\n1 2 3') == 'No'\n\n\"\"\"\n\nimport sys\nimport functools"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 4\\n1 2 3\") == \"No\"\nassert solution(\"4 4 4\\n4 4 4\") == \"Yes\"\nassert solution(\"7 2 4 12\\n7 15 10 12\") == \"Yes\"\nassert solution(\"5 3 7 14 2\\n9 1 3 7 2\") == \"No\"\nassert solution(\"5 3 7 14 2\\n1 3 7 14 2\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 4\\n1 2 3\") == 'No'\nassert solution(\"7 2 4 12\\n7 15 10 12\") == 'Yes'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 4') == 'Yes'\nassert solution('7 2 4 12') == 'Yes'\nassert solution('7 15 10 12') == 'No'\nassert solution('3 4 4') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n0 0 1 1 2\\n2 0 1 0 0') == 'YES\\n1 3 1 2 1'\nassert solution('4\\n0 0 2 0\\n1 1 1 1') == 'NO'\nassert solution('3\\n0 0 0') == 'YES\\n1 1 1'\n\n\"\"\"\n\nn = int(input())\nlst = [int(x) for x in input().split()]\nr = [int(x) for x in input().split()]\nl = [0] * n\nfor i in range(n):\n    for j in range(i):\n        if lst[i] < lst[j] and r[i] < r[j]:\n            l[i] += 1\n\nprint('YES' if l == r else 'NO')\nprint(' '.join([str(x) for x in l]))\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 0 1 1 2\\n2 0 1 0 0\\n\") == \"YES\\n1 3 1 2 1\"\nassert solution(\"4\\n0 0 2 0\\n1 1 1 1\\n\") == \"NO\"\nassert solution(\"3\\n0 0 0\\n0 0 0\\n\") == \"YES\\n1 1 1\"\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n0 0 1 1 2\n2 0 1 0 0''') == 'YES\\n1 3 1 2 1'\nassert solution('''4\n0 0 2 0\n1 1 1 1''') == 'NO'\nassert solution('''3\n0 0 0\n0 0 0''') == 'YES\\n1 1 1'''"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '5\\n0 0 1 1 2\\n2 0 1 0 0\\n'\n) == 'YES\\n1 3 1 2 1\\n'\nassert solution(\n    '4\\n0 0 2 0\\n1 1 1 1\\n'\n) == 'NO\\n'\nassert solution(\n    '3\\n0 0 0\\n0 0 0\\n'\n) == 'YES\\n1 1 1\\n'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 0 1 1 2\\n2 0 1 0 0\") == \"YES\\n1 3 1 2 1\"\nassert solution(\"4\\n0 0 2 0\\n1 1 1 1\") == \"NO\"\nassert solution(\"3\\n0 0 0\\n0 0 0\") == \"YES\\n1 1 1\"\n\nimport ast\n\na = ast.literal_eval(input())\nb = ast.literal_eval(input())\n\nc = zip(a,b)"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n0 0 1 1 2\n2 0 1 0 0''') == \"YES\\n1 3 1 2 1\"\nassert solution('''4\n0 0 2 0\n1 1 1 1''') == \"NO\"\nassert solution('''3\n0 0 0\n0 0 0''') == \"YES\\n1 1 1\"\n\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\nl = list(map(int, input().split()))\nr = list(map(int, input().split()))\n\nl_r = Counter()\nfor i, j in zip(l, r):\n    l_r[i] += j\nprint(l_r)\n\nfor k in l_r:\n    if l_r[k] > k:\n        print('NO')\n        break\nelse:\n    print('YES')\n    print(*[l_r[i] for i in l_r], sep=' ')\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 0 1 0 0\\n1 1 1 1 1\") == \"YES\\n1 3 1 2 1\"\nassert solution(\"4\\n0 0 2 0\\n1 1 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 0 1 0\\n1 1 1 1') == 'NO'\nassert solution('4\\n0 0 1 0\\n1 1 1 1') == 'YES'\nassert solution('4\\n0 0 2 0\\n1 1 1 1') == 'NO'\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 0 1 1 2\\n2 0 1 0 0\\n\") == \"YES\\n1 3 1 2 1\\n\"\nassert solution(\"4\\n0 0 2 0\\n1 1 1 1\\n\") == \"NO\\n\"\nassert solution(\"3\\n0 0 0\\n0 0 0\\n\") == \"YES\\n1 1 1\\n\""
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 4 4 2\\n1 10\\n10 20\") == \"1000000003\"\nassert solution(\"4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000\") == \"1000000003\"\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint(\"Test cases passed!\")"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10\") == \"11\"\nassert solution(\"2 2 4 4 2\\n1 10\\n10 20\") == \"-1\"\nassert solution(\"4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000\") == \"1000000003\"\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(expected_result)\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000') == '1000000003'\nassert solution('2 2 4 4 2\\n1 10\\n10 20') == '-1'\nassert solution('4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000') == '1000000003'\n\n\"\"\"\n\n\nfrom typing import List, Set\n\nimport sys\n\nDEBUG = False\n\n\nclass Node:\n    def __init__(self, value: int) -> None:\n        self.value = value\n        self.next: Node = None\n\n    def __repr__(self) -> str:\n        return f'Node({self.value})'\n\n\nclass LinkedList:\n    def __init__(self) -> None:\n        self.head: Node = None\n        self.tail: Node = None\n\n    def __repr__(self) -> str:\n        node = self.head\n        nodes = []\n        while node is not None:\n            nodes.append(node.value)\n            node = node.next\n        nodes.append('None')\n        return'-> '.join(str(n) for n in nodes)\n\n    def push_front(self, value: int) -> None:\n        new_node = Node(value)\n        new_node.next = self.head\n        self.head = new_node\n        if self.tail is None:\n            self.tail = self.head\n\n    def push_back(self, value: int) -> None:\n        new_node = Node(value)\n        if self.head is None:\n            self.head = new_node\n            return\n        self.tail.next = new_node\n        self.tail = new_node\n\n    def pop_front(self) -> None:\n        if self.head is None:\n            return\n        if self.head.next is None:\n            self.head = None\n            self.tail = None\n            return\n        second_head = self.head.next\n        self.head = second_head\n        second_head.next = None\n\n    def pop_back(self) -> None:\n        if self.head is None:\n            return\n        if self.head.next is None:\n            self.head = None\n            self.tail = None\n            return\n        node = self.head\n        while node.next.next is not None:\n            node = node.next\n        tail = node\n        node.next = None\n        self.tail = tail\n\n    def remove(self, value: int) -> None:\n        if self.head is None:\n            return\n        if self.head.next is None:\n            if self.head.value == value:\n                self.head = None\n                self.tail = None\n            return\n        if self.head.value == value:\n            self.pop_front()\n            return\n        node = self.head\n        while node.next is not None:\n            if node.next.value == value:\n                break\n            node = node.next\n        if node.next is None:\n            return\n        node.next = node.next.next\n        node.next.next = None\n        if node.next is None:\n            self.tail = node\n\n    def insert(self, index: int, value: int) -> None:\n        if index == 0:\n            self.push_front(value)\n            return\n        if self.head is None:\n            self.push_back(value)\n            return\n        new_node = Node(value)\n        node = self.head\n        prev_node = self.head\n        for i in range(index - 1):\n            prev_node = node\n            node = node.next\n            if node is None:\n                break\n        if node is None:\n            self.push_back(value)\n            return\n        if node.next is None:\n            self.tail = new_node\n        new_node.next = node\n        prev_node.next = new_node\n        node.next = node.next.next\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000\") == \"1000000003\"\nassert solution(\"2 2 4 4 2\\n1 10\\n10 20\") == \"11\"\nassert solution(\"4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000\") == \"1000000003\"\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10\") == \"11\"\nassert solution(\"2 2 4 4 2\\n1 10\\n10 20\") == \"1000000003\"\n\n'''\n\nfrom collections import deque\n\nn, m, t_a, t_b, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10\\n\") == \"11\"\nassert solution(\"2 2 4 4 2\\n1 10\\n10 20\\n\") == \"1000000003\"\nassert solution(\"4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000\\n\") == \"1000000003\"\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10\") == \"11\"\nassert solution(\"2 2 4 4 2\\n1 10\\n10 20\") == \"-1\"\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10\\n\") == \"11\"\n\nassert solution(\"2 2 4 4 2\\n1 10\\n10 20\\n\") == \"-1\"\n\nassert solution(\"4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000\\n\") == \"1000000003\""
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 3 1') == '1.916666666666666666666666666667'\n\"\"\"\n\nfrom math import factorial\nfrom fractions import Fraction"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n-----Test Case-----\n\n\"\"\"\n\nn = int(input())\ninp = input()\ninp = inp.split()\n\nans = 0\n\nfor i in range(n):\n    for j in range(i+1,n):\n        if inp[i] > inp[j]:\n            ans += 1\n\nprint(\"%.9f\" % (ans/n))\n"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1\") == \"1.916666666666666666666666666667\"\n\"\"\"\n\nfrom collections import Counter\nfrom math import factorial\n\nn = int(input())\npermutation = list(map(int, input().split()))\n"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"1.0\"\n\"\"\"\n\nimport unittest\nimport math\nimport random\n\nclass Solution:\n    def __init__(self, length, n):\n        self.n = n\n        self.inversions = 0\n        self.expected_inversions = 0\n        self.expected_permutations = math.factorial(length)\n\n    def numberOfInversions(self, length):\n        if length <= 1:\n            return 0\n        self.numberOfInversionsHelper(0, length)\n        return self.inversions\n\n    def numberOfInversionsHelper(self, start, end):\n        if start >= end:\n            return\n        length = end - start\n        mid = start + length // 2\n        self.numberOfInversionsHelper(start, mid)\n        self.numberOfInversionsHelper(mid + 1, end)\n        self.mergeAndCountInversions(start, mid, end)\n\n    def mergeAndCountInversions(self, start, mid, end):\n        left = start\n        right = mid + 1\n        temp = []\n        for _ in range(end - start + 1):\n            if left > mid:\n                temp.append(right)\n                right += 1\n            elif right > end:\n                temp.append(left)\n                left += 1\n            elif self.n[left] < self.n[right]:\n                temp.append(left)\n                left += 1\n            else:\n                temp.append(right)\n                right += 1\n                self.inversions += mid - left + 1\n        for i, x in enumerate(temp):\n            self.n[start + i] = x\n\n    def expectedNumberOfInversions(self):\n        return self.expected_inversions / self.expected_permutations\n\nclass TestSolution(unittest.TestCase):\n\n    def setUp(self):\n        self.solution = Solution\n        self.n = [1, 2, 3, 4]\n        self.result = 1.0\n\n    def testExpectedNumberOfInversions(self):\n        self.assertEqual(self.solution.expectedNumberOfInversions(self.n), self.result)"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 1\") == 1.916666666666666666666666666667\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 1\") == '1.916666666666666666666666667'\n\"\"\"\n"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3 1\") == '1.916666666666666666666666666667'\nassert solution(\"4\\n2 3 1 4\") == '2.8333333333333333333333333333'\nassert solution(\"7\\n2 4 6 7 3 5 1\") == '5.6'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 3 1') == '1.916666666666666666666666666667'\n\"\"\"\n\n\nimport unittest\n\nimport numpy as np\n"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1\") == \"1.916666666666666666666666666667\"\n"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 1') == '1.916666666666666666666666666667'\n'''"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\\n\") == \"3\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\\n\") == \"1\"\nassert solution(\"1\\n1 1\\n\") == \"0\""
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == \"3\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"1\"\nassert solution(\"1\\n1 1\") == \"0\"\n\"\"\"\n\nn = int(input())\nx, y = [], []\n\nfor _ in range(n):\n    x_, y_ = map(int, input().split())\n    x.append(x_)\n    y.append(y_)\n\npoints = dict(zip(x, y))\npoints = list(points.items())\n\nl = len(points)\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == 3\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == 1\nassert solution(\"1\\n1 1\") == 0\n\"\"\"\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == '3'\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == '1'\nassert solution(\"1\\n1 1\") == '0'\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == \"3\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"1\"\nassert solution(\"1\\n1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n1 1\\n2 0\\n2 2\\n') == '3'\nassert solution('3\\n0 0\\n1 1\\n2 0\\n') == '1'\nassert solution('1\\n1 1\\n') == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n0 0\n1 1\n2 0\n2 2''') == '3'\nassert solution('''3\n0 0\n1 1\n2 0''') == '1'\nassert solution('''1\n1 1''') == '0'\nassert solution('''5\n0 0\n1 1\n2 0\n2 2\n3 0\n3 0\n3 3\n3 3\n4 4\n4 4\n4 4''') == '4'\n\nimport unittest\nfrom collections import Counter\n\nclass Test(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution('''4\n0 0\n1 1\n2 0\n2 2'''), '3')\n        self."
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == \"3\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"1\"\nassert solution(\"1\\n1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == 3\n\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == 1\n\nassert solution(\"1\\n1 1\") == 0\n\"\"\"\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == \"3\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"1\"\nassert solution(\"1\\n1 1\") == \"0\"\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n10 7 1 9 10 15\") == \"26\"\nassert solution(\"1\\n400000\") == \"400000\"\nassert solution(\"7\\n8 9 26 11 12 29 14\") == \"55\"\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n10 7 1 9 10 15\\n\") == \"26\"\n\nassert solution(\"1\\n400000\\n\") == \"400000\"\n\nassert solution(\"7\\n8 9 26 11 12 29 14\\n\") == \"55\"\n\nassert solution(\"1\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n10 7 1 9 10 15') == '26'\nassert solution('1\\n400000') == '400000'\nassert solution('7\\n8 9 26 11 12 29 14') == '55'\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 6 6 9 12\") == \"6\"\nassert solution(\"4 10 6 6 9 12\") == \"9\"\nassert solution(\"5 10 6 6 9 12\") == \"6\"\nassert solution(\"7 10 6 6 9 12\") == \"9\"\nassert solution(\"8 10 6 6 9 12\") == \"9\"\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 7 1 9 10 15') == '26'\nassert solution('400000') == '400000'\nassert solution('7 8 26 11 12 29 14') == '55'\nassert solution('1') == '1'\nassert solution('3 1 2 4 6 5') == '9'\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n10 7 1 9 10 15') == 26\nassert solution('1\\n400000') == 400000\nassert solution('7\\n8 9 26 11 12 29 14') == 55"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n10 7 1 9 10 15\\n') == '26'\nassert solution('1\\n400000\\n') == '400000'\nassert solution('7\\n8 9 26 11 12 29 14\\n') == '55'\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn = int(stdin.readline().strip())\nb = list(map(int, stdin.readline().strip().split()))"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 9 26 11 12 29 14\\n\") == \"55\"\nassert solution(\"4 9 26 11 12 29 14\\n\") == \"55\"\nassert solution(\"6 9 26 11 12 29 14\\n\") == \"55\"\nassert solution(\"8 9 26 11 12 29 14\\n\") == \"55\"\n\n\"\"\"\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 7 1 9 10 15\\n') == 26\nassert solution('400000\\n') == 400000\nassert solution('7 8 26 11 12 29 14\\n') == 55\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n10 7 1 9 10 15\") == \"26\"\nassert solution(\"1\\n400000\") == \"400000\"\nassert solution(\"7\\n8 9 26 11 12 29 14\") == \"55\"\n"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n0 1 1 0 0 0 0 0 0 0 7 0 0 0 0\n''') == '4'\nassert solution('''\n5 1 1 1 1 0 0 0 0 0 0 0 0 0 0\n''') == '8'"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == \"4\"\n\"\"\"\n\nstdin = \"0 1 1 0 0 0 0 0 0 7 0 0 0 0\"\n\na = [int(x) for x in stdin.split(' ')]\n\nprint(sum(filter(lambda x: x % 2 == 0, a)))\n"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == \"4\"\nassert solution(\"5 1 1 1 1 0 0 0 0 0 0 0 0 0\") == \"8\""
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == 4\n"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == \"4\"\nassert solution(\"5 1 1 1 1 0 0 0 0 0 0 0 0 0\") == \"8\"\n"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 1 0 0 0 0 0 0 7 0 0 0 0') == 4\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == 8\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1') == 0\nassert solution('0 1 1 0 0 0 0 0 0 7 0 0 0 0') == 4\n"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == \"4\"\nassert solution(\"5 1 1 1 1 0 0 0 0 0 0 0 0 0\") == \"8\""
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''0 1 1 0 0 0 0 0 0 7 0 0 0 0''') == '4'\nassert solution('''5 1 1 1 1 0 0 0 0 0 0 0 0 0''') == '8'\nassert solution('''0 1 1 1 1 0 0 0 0 0 0 0 0 0''') == '8'\nassert solution('''0 1 1 1 1 0 0 0 0 0 0 0 0 0''') == '8'\nassert solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0'\n"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 1 0 0 0 0 0 7 0 0 0 0 0\") == \"4\"\n\"\"\"\n\n\nfrom typing import List, Tuple\nfrom collections import defaultdict\n"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == \"4\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == \"10 10\"\nassert solution(\"3 2\") == \"1 1\"\nassert solution(\"6 3\") == \"3 6\"\n\"\"\""
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1 1'\nassert solution('6 3') == '3 6'\nassert solution('5 1') == '10 10'\nassert solution('1 1') == '1 1'\nassert solution('6 5') == '3 5'\n"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1') == '10 10'\nassert solution('3 2') == '1 1'\nassert solution('6 3') == '3 6'\n\n\"\"\""
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1 1'\nassert solution('6 3') == '3 6'\n"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"10 10\"\nassert solution(\"3 2\") == \"1 1\"\nassert solution(\"6 3\") == \"3 6\"\n"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == \"10 10\"\nassert solution(\"3 2\") == \"1 1\"\nassert solution(\"6 3\") == \"3 6\"\n\n\"\"\"\n"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == (0, 0)\nassert solution('3 2') == (1, 1)\nassert solution('6 3') == (3, 6)\n\"\"\""
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\") == \"10 10\"\nassert solution(\"3 2\") == \"1 1\"\nassert solution(\"6 3\") == \"3 6\"\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1\\n') == '10 10'\nassert solution('3 2\\n') == '1 1'\nassert solution('6 3\\n') == '3 6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"10 9\") == \"7\"\nassert solution(\"100 99\") == \"99 10\"\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9555\") == '4'\nassert solution(\"10000000005\") == '2'\nassert solution(\"800101\") == '3'\nassert solution(\"45\") == '1'\nassert solution(\"19992000\") == '1'\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9555') == '4'\nassert solution('10000000005') == '2'\nassert solution('800101') == '3'\nassert solution('45') == '1'\nassert solution('19992000') == '1'\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('800101') == 3\n\"\"\"\n\nfrom typing import List\nfrom math import gcd"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9555') == '4'\nassert solution('1000000000000001223300003342220044555') == '17'\nassert solution('800101') == '3'\nassert solution('45') == '1'\nassert solution('19992000') == '1'\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9555\") == \"4\"\nassert solution(\"10000000005\") == \"2\"\nassert solution(\"800101\") == \"3\"\nassert solution(\"45\") == \"1\"\nassert solution(\"19992000\") == \"1\"\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9555\") == \"4\"\nassert solution(\"10000000005\") == \"2\"\nassert solution(\"800101\") == \"3\"\nassert solution(\"45\") == \"1\"\nassert solution(\"19992000\") == \"1\"\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9555') == 4\nassert solution('10000000005') == 2\nassert solution('800101') == 3\nassert solution('45') == 1\nassert solution('19992000') == 1\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9555') == '4'\nassert solution('10000000005') == '2'\nassert solution('800101') == '3'\nassert solution('45') == '1'\nassert solution('19992000') == '1'\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9555') == 4\nassert solution('10000000005') == 2\nassert solution('800101') == 3\nassert solution('45') == 1\nassert solution('19992000') == 1\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 9 5 6\") == \"7\"\nassert solution(\"99 5 88 5 7\") == \"9\"\nassert solution(\"786539\") == \"9\"\nassert solution(\"9995776538742396\") == \"9\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"17 5 2\") == \"<< 3 4 (5) 6 7 >>\"\nassert solution(\"6 5 2\") == \"<< 3 4 (5) 6 >>\"\nassert solution(\"6 1 2\") == \"(1) 2 3 >>\"\nassert solution(\"6 2 2\") == \"1 (2) 3 4 >>\"\nassert solution(\"9 6 3\") == \"<< 3 4 5 (6) 7 8 9\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"17 5 2\") == \"<< 3 4 (5) 6 7 >>\"\n\"\"\""
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5 2\") == \"<< 3 4 (5) 6 >>\"\nassert solution(\"6 1 2\") == \"(1) 2 3 >>\"\nassert solution(\"9 6 3\") == \"<< 3 4 5 (6) 7 8 9 >>\"\nassert solution(\"8 5 4\") == \"1 2 3 4 (5) 6 7 8\"\n\"\"\""
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"17 5 2\") == \"<< 3 4 (5) 6 7 >>\"\nassert solution(\"6 5 2\") == \"<< 3 4 (5) 6 >>\"\nassert solution(\"6 1 2\") == \"(1) 2 3 >>\"\nassert solution(\"6 2 2\") == \"1 (2) 3 4 >>\"\nassert solution(\"8 5 4\") == \"1 2 3 4 (5) 6 7 8\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"17 5 2\") == \"<< 3 4 (5) 6 7 >>\"\nassert solution(\"6 5 2\") == \"<< 3 4 (5) 6 >>\"\nassert solution(\"6 1 2\") == \"(1) 2 3 >>\"\nassert solution(\"6 2 2\") == \"1 (2) 3 4 >>\"\nassert solution(\"9 6 3\") == \"<< 3 4 5 (6) 7 8 9\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5 2\") == \"<< 3 4 (5) 6 >>\"\nassert solution(\"6 1 2\") == \"(1) 2 3 >>\"\nassert solution(\"9 6 3\") == \"<< 3 4 5 (6) 7 8 9 >>\"\nassert solution(\"8 5 4\") == \"1 2 3 4 (5) 6 7 8\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('17 5 2') == '<< 3 4 (5) 6 7 >>'\nassert solution('6 5 2') == '<< 3 4 (5) 6 >>'\nassert solution('6 1 2') == '(1) 2 3 >>'\nassert solution('6 2 2') == '1 (2) 3 4 >>'\nassert solution('9 6 3') == '<< 3 4 5 (6) 7 8 9'\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('17 5 2') == '<< 3 4 (5) 6 7 >>'\nassert solution('6 5 2') == '<< 3 4 (5) 6 >>'\nassert solution('6 1 2') == '(1) 2 3 >>'\nassert solution('6 2 2') == '1 (2) 3 4 >>'\nassert solution('9 6 3') == '<< 3 4 5 (6) 7 8 9'\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == expected_output\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('17 5 2') == '<< 3 4 (5) 6 7 >>'\nassert solution('6 5 2') == '<< 3 4 (5) 6 >>'\nassert solution('6 1 2') == '(1) 2 3 >>'\nassert solution('6 2 2') == '1 (2) 3 4 >>'\nassert solution('9 6 3') == '<< 3 4 5 (6) 7 8 9'\n"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 5 1\") == \"\"\"      / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n          \\   \n\"\"\"\n\nassert solution(\"3 1 5 1\") == \"\"\"     / \\     \n  \\       \\   \n   \\   \\   \n    \\  /  \n     \\ / \n    /   \n\"\"\"\n\n\n-----Instructions-----\n\nThe sequence of integers a_1, a_2,..., a_{n} is given.\n\nDraw a cardiogram using ASCII graphics by printing ASCII graphics characters for each element of the cardiogram.\n\nPlease print spaces between the different lines.\n\nMake sure to avoid unnecessary leading and trailing spaces.\n\nNote: you can use escape sequences to print the slash and backslash characters.\n\nExamples of correct sequences:\n\n5 1 2 5 1\n5\\ 1\\ 2\\ 5\\ 1\n\n3 1 5 1\n3\\ 1\\ 5\\ 1\n\n\n-----Challenge-----\n\nIn this problem, your task is to paint the cardiogram by printing ASCII graphics characters for each element of the cardiogram.\n\nTo get a better understanding of the solution, see the sample tests.\n\"\"\"\n"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 1 2 5 1') == \"\"\"\\\n/ \\     \n  \\    \n   \\   \n    \\  \n     \\ /\"\"\n\n\"\"\"\n\n\"\"\"\nSolution:\n1. We have to start from the top of the triangle, and we can paint the line \"up\" or \"down\"\n2. If we go \"up\", then we have to increase the index of the next vertex and decrease the index of the previous\n3. If we go \"down\", we have to decrease the index of the next vertex and increase the index of the previous\n4. We must start with the vertex that is at the top and paint the line from this vertex to the last vertex\n5. We must start with the vertex that is at the bottom and paint the line from this vertex to the first vertex\n\"\"\"\n"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2 5 1\") == \"\"\"\n  / \\     \n  \\    \n   \\   \n   / \\  \n  / \\ / \n /   \\  \n\"\"\", solution(\"3 1 2 5 1\") == \"\"\"\n/ \\\n\\ /\n \\\n \\\n/\n\n\"\"\"\nprint(solution(\"3 1 2 5 1\"))\n\n\nInput\n7\n5 7 1 8 5 6 6\n\nOutput\n      / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n/         /  \\     \n\\         /   \\  \n \\       /    \\ \n  \\     /      \\ \n   \\    /        \\ \n    \\    /       /\n     \\    /     \n      \\    /  \n      / \\     \n     /   \\  \n      \\   \\ \n       \\   \\ \n        \\   \\ \n         \\   \\ \n          \\   \\ \n           \\   \\ \n            \\   \\ \n             \\   \\ \n              \\   \\ \n               \\   \\ \n                \\   \\ \n                 \\   \\ \n                  \\   \\ \n                   \\   \\ \n                    \\   \\ \n                     \\   \\ \n                      \\   \\ \n                       \\   \\ \n                        \\   \\ \n                         \\   \\ \n                          \\   \\ \n                           \\   \\ \n                            \\   \\ \n                             \\   \\ \n                              \\   \\ \n                               \\   \\ \n                                 \\   \\ \n                                  \\   \\ \n                                   \\   \\ \n                                     \\ \n                                      \\ \n                                       \\ \n                                        \\ \n                                          \\ \n                                           \\ \n                                            \\ \n                                              \\ \n                                               \\ \n                                                \\ \n                                                  \\ \n                                                   \\ \n                                                    \\ \n                                                      \\ \n                                                       \\ \n                                                         \\ \n                                                          \\ \n                                                           \\ \n                                                             \\ \n                                                               \\ \n                                                                \\ \n                                                                  \\ \n                                                                  \\ \n                                                                    \\ \n                                                                     \\ \n                                                                      \\ \n                                                                         \\ \n                                                                            \\ \n                                                                               \\ \n                                                                                  \\ \n                                                                                     \\ \n                                                                                       \\ \n                                                                                        \\ \n                                                                                           \\ \n                                                                                            \\ \n                                                                                               \\ \n                                                                                               \\ \n                                                                                                 \\ \n                                                                                                    \\ \n                                                                                                      \\ \n                                                                                                       \\ \n                                                                                                        \\ \n                                                                                                         \\ \n                                                                                                          \\ \n                                                                                                           \\ \n                                                                                                            \\ \n                                                                                                             \\ \n                                                                                                                \\ \n                                                                                                                 \\ \n                                                                                                                  \\ \n                                                                                                                   \\ \n                                                                                                                    \\ \n                                                                                                                     \\ \n                                                                                                                      \\ \n                                                                                                                       \\ \n                                                                                                                        \\ \n                                                                                                                         \\ \n                                                                                                                          \\ \n                                                                                                                           \\ \n                                                                                                                            \\ \n                                                                                                                             \\ \n                                                                                                                              \\ \n                                                                                                                               \\ \n                                                                                                                                 \\ \n                                                                                                                                  \\ \n                                                                                                                                    \\ \n                                                                                                                                      \\ \n                                                                                                                                        \\ \n                                                                                                                                           \\ \n                                                                                                                                            \\ \n                                                                                                                                              \\ \n                                                                                                                                                \\ \n                                                                                                                                                  \\ \n                                                                                                                                                       \\ \n                                                                                                                                                         \\ \n                                                                                                                                                          \\ \n                                                                                                                                                            \\ \n                                                                                                                                                             \\ \n                                                                                                                                                               \\ \n                                                                                                                                                                \\ \n                                                                                                                                                                  \\ \n                                                                                                                                                                   \\ \n                                                                                                                                                                   \\ \n                                                                                                                                                                    \\ \n                                                                                                                                                                     \\ \n                                                                                                                                                                      \\ \n                                                                                                                                                                       \\ \n                                                                                                                                                                        \\ \n                                                                                                "
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 2 5 1') == '    / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n    \nassert solution('3 1 5 1') =='/ \\     \n       / \\ /   \\    \n      /       \\   \n     /         \\  \n       \\   /  \\ \n      /         \\  \n     /          \\ / \n\nassert solution('1 5 1') =='/ \\     \n       / \\ /   \\    \n      /       \\   \n     /         \\  \n       \\   /  \\ \n      /         \\  \n     /          \\ / \n\n-----Explanation-----\n\nThe first line of the input contains the number n. The next line contains a sequence of n integers a_1, a_2,..., a_n (1 \u2264 a_{i} \u2264 1000). It is guaranteed that the sum of all a_{i} doesn't exceed 1000.\n\nThe test checks if the sum of the a_{i} is equal to the last point of the cardiogram:\n\nThe first and the last points (a_{1} and a_{n}) are equal, so the last point of the cardiogram is (a_{1} + a_{2} + a_{3} +... + a_{n}).\n\nWe need to paint the cardiogram using only ASCII graphics.\n\nThe cardiogram looks like this:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       \u2502\n\u2502       \u2502\n\u2502       \u2502\n\u2502       \u2502\n\u2502       \u2502\n\u2502       \u2502\n\u2502       \u2502\n\u2502       \u2502\n\u2502       \u2502\n\u2502       \u2502\n\u2502       \u2502\n\u2502       \u2502\n\u2502       \u2502\n\u2502       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSo, the maximum distance between two adjacent points is equal to the sum of all a_{i} for i = 1, 2,..., n.\n\nSince the sum of all a_{i} for i = 1, 2,..., n is equal to (a_{1} + a_{2} +... + a_{n}), it means that the maximum distance between adjacent points is equal to the sum of all a_{i} for i = 1, 2,..., n.\n\nSo, the answer is the maximum distance between two adjacent points.\n\n'''"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n3 1 2 5 1''') == '''  / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n'''\n\nassert solution('''3\n1 5 1''') == ''' / \\     \n  \\    \n   \\   \n    \\  \n     \\ /\n'''\n\nprint('PASSED')\n\n-----\nInput\n5\n1 2 3 4 5\n\nOutput\n    /     \n  / \\     \n / \\ /   \\    \n/     \\   \\  \n\\       \\   \\ \n \\ / \\   \\ / \n  \\       \\ \n   \\   \\  \n    \\   \\ \n     \\ / \\\n      \\ \n\nInput\n3\n1 5 1\n\nOutput\n / \\     \n  \\    \n   \\   \n    \\  \n     \\ /\n'''\n"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 5 1\") == \"      / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n\nassert solution(\"1 5 1\") == \" / \\     \n  \\       \\   \n   \\       \\  \n    \\        \\ /\n     \\ /      \n\"\"\"\n\nimport sys"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5, [3, 1, 2, 5, 1]) == '\\\\ \\\\ / \\\\ \\n \\\\/     \\\\/     \\\\/     \\\\/     \\\\/     \\\\/ \\n / /     \\\\/     \\\\/     \\\\/     \\\\/     \\\\/'\nassert solution(3, [1, 5, 1]) =='/ \\\\     \\n     \\\\/     \\n \\\\/     \\n /     \\n     \\n     \\n / \\n'\n\n\n-----Test data-----\n\nThe test data can be found in your course.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 2 5 1') == '    / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3 1 2 5 1') =='/ \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n\nassert solution('3\\n1 5 1') =='/ \\     \n  \\       \n   \\   \n    \\  \n     \\ /\n"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 3 5 1\") == \"      / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n\nassert solution(\"3 1 2 5 1\") == \"     / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n\nassert solution(\"1 5 1\") == \" / \\     \n  \\       \\   \n   \\   \\   \n    \\  \\  \n     \\ /\n\"\"\""
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n3 4 5\") == '1\\n3'\nassert solution(\"4 3\\n9 1 1 1\") == '0'\nassert solution(\"3 2\\n1 1000000000 1 999999999\") == '1\\n999999998'\nassert solution(\"4 3\\n2 3 5 6\") == '2\\n3 4'\n\n\"\"\"\n\nfrom sys import stdin\n\nn, p = [int(i) for i in stdin.readline().split()]\na = [int(i) for i in stdin.readline().split()]"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2 3\\n\") == '1\\n3'\nassert solution(\"4 3\\n1 2 3 5 6\\n\") == '2\\n3 4'\nassert solution(\"3 2\\n9 1 1 1\\n\") == '0'\n\n\"\"\"\n\nimport sys\nfrom math import gcd\n\nlines = sys.stdin.readlines()\n\na = [int(x) for x in lines[1].split()]\nN, P = int(lines[0].split()[0]), int(lines[0].split()[1])\n\nres = 0\n\nfor x in range(1, N + 1):\n    if x % P!= 0:\n        res += gcd(x, P)\n\nsys.stdout.write(str(res))\nsys.stdout.write(\"\\n\")\n\nfor x in range(1, N + 1):\n    if x % P!= 0:\n        sys.stdout.write(str(x))\n        sys.stdout.write(\" \")\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n9 1 1 1\\n\") == \"2\"\nassert solution(\"4 3\\n9 1 1 1\\n\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n3 4 5\") == \"1\\n3\\n\"\nassert solution(\"4 3\\n2 3 5 6\") == \"2\\n3\\n4\\n\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\\n\"\nassert solution(\"3 2\\n1000000000 1 999999999\") == \"1\\n999999998\\n\"\n\"\"\"\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1000000000 1 999999999\") == \"1\\n999999998\"\nassert solution(\"4 3\\n2 3 5 6\") == \"2\\n3 4\"\nassert solution(\"3 2\\n9 1 1 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n9 1 1 1\") == '2'\nassert solution(\"2 1\\n1 1000000000\") == '0'\nassert solution(\"3 2\\n1 999999999\") == '1'\nassert solution(\"4 3\\n9 1 1 1\") == '0'\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2 3\") == \"1\\n3\\n\"\nassert solution(\"4 3\\n1 1 1 1\") == \"0\\n\"\nassert solution(\"4 3\\n1 2 3 4\") == \"2\\n3\\n4\\n\"\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 0 1\") == \"1\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\"\nassert solution(\"3 2\\n1000000000 1 999999999\") == \"1\"\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 99999999\\n\") == '1\\n99999998'\n\nassert solution(\"4 3\\n9 1 1 1\\n\") == '0\\n1\\n2\\n3'\n\nassert solution(\"3 2\\n1 1 1\\n\") == '0\\n1'\n\nassert solution(\"4 3\\n9 1 1 1\\n\") == '0\\n1\\n2\\n3'\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 5 6\") == \"1\"\nassert solution(\"1000000000 1 999999999\") == \"999999998\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 8\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 8\") == \"3\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 8\") == \"3\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 8\") == \"3\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 8') == '3'\n\"\"\""
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == '3'\nassert solution(\"6 8\") == '3'\n\"\"\"\n\nimport math"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n6 8') == '3'\nassert solution('5 2\\n6 7') == '3'\nassert solution('5 2\\n6 6') == '4'\nassert solution('5 2\\n6 5') == '2'\nassert solution('5 2\\n5 8') == '2'\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n\") == \"3\"\nassert solution(\"6 8\\n\") == \"3\""
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 8') == '3'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 2 8\\n4 6\\n1 5\\n3 8') == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'\n\"\"\"\n\nX, Y, Z, K = map(int, stdin.readline().split())\nA = [int(n) for n in stdin.readline().split()]\nB = [int(n) for n in stdin.readline().split()]\nC = [int(n) for n in stdin.readline().split()]\n\ndp = [0] * K\ndp[0] = sum(A) + sum(B) + sum(C)\n\nfor i in range(1, K):\n    #print(i, dp)\n    A[0] -= 1\n    if A[0] >= 0:\n        dp[i] = dp[i - 1] - A[0]\n    else:\n        dp[i] = dp[i - 1]\n\n    A[1] -= 1\n    if A[1] >= 0:\n        dp[i] += B[0] + C[0]\n    else:\n        dp[i] = dp[i - 1]\n\n    A[2] -= 1\n    if A[2] >= 0:\n        dp[i] += B[1] + C[0]\n    else:\n        dp[i] = dp[i - 1]\n\n    B[0] -= 1\n    if B[0] >= 0:\n        dp[i] += A[0] + C[1]\n    else:\n        dp[i] = dp[i - 1]\n\n    B[1] -= 1\n    if B[1] >= 0:\n        dp[i] += A[1] + C[1]\n    else:\n        dp[i] = dp[i - 1]\n\n    C[0] -= 1\n    if C[0] >= 0:\n        dp[i] += A[0] + B[0]\n    else:\n        dp[i] = dp[i - 1]\n\n    C[1] -= 1\n    if C[1] >= 0:\n        dp[i] += A[1] + B[1]\n    else:\n        dp[i] = dp[i - 1]\n\nfor i in range(K):\n    print(dp[i])"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 2 8\\n4 6\\n1 5\\n3 8\\n') == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'\nassert solution('1 1 1 1\\n1 1 1 1\\n1 1 1 1') == '0'\n\n\"\"\""
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 2 8\\n4 6\\n1 5\\n3 8') == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'\n"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2 8\\n4 6\\n1 5\\n3 8\") == \"19\\n17\\n15\\n14\\n13\\n12\\n10\\n8\"\n"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2 8\\n4 6\\n1 5\\n3 8\") == \"19\\n17\\n15\\n14\\n13\\n12\\n10\\n8\"\nassert solution(\"3 2 2 8\\n4 6\\n1 5\\n3 8\") == \"23\\n19\\n15\\n14\\n13\\n12\\n10\\n8\"\nassert solution(\"2 3 2 8\\n4 6\\n1 5\\n3 8\") == \"17\\n13\\n11\\n9\"\nassert solution(\"3 3 2 8\\n4 6\\n1 5\\n3 8\") == \"15\\n9\\n7\"\nassert solution(\"1 2 1 8\\n4 6\\n1 5\\n3 8\") == \"5\\n3\\n2\"\n"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\\n1 5\\n3 8\") == \"19\\n17\\n15\\n14\\n13\\n12\\n10\\n8\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2 8\\n4 6\\n1 5\\n3 8\") == \"19\\n17\\n15\\n14\\n13\\n12\\n10\\n8\"\n\"\"\"\n\nimport collections\nimport math"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 8\") == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'\nprint(\"PASSED\")\n"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2 8\\n4 6\\n1 5\\n3 8\") == \"19\\n17\\n15\\n14\\n13\\n12\\n10\\n8\"\n\"\"\"\n\nimport os"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2 8\\n4 6\\n1 5\\n3 8\") == \"19 17 15 14 13 12 10 8\"\n"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''12 18''') == '''3'''\nprint(solution(stdin))"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12 18') == '3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 18') == '3'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom itertools import product"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 18\") == \"3\"\n\"\"\"\n\nfrom typing import List\nimport collections\n"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(12) == 3\nassert solution(18) == 3\n\"\"\""
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 18') == '3'\n\"\"\""
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 18\") == \"3\"\n\"\"\"\n\nimport sys\nimport math\nimport gmpy2"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 18\") == '3'\n\n-------\n\nWrite the necessary code to print the correct solution.\nPrint the number of common divisors the two integers have.\nIf the two integers have no common divisors, print 0.\n\n----Input\n12 18\n\n----Output\n3\n\n----Explanation\n12 and 18 have the following positive common divisors: 1, 2, and 3.\n'''"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 18\") == \"3\"\n\"\"\"\nfrom sys import stdin\n\nstdin = stdin.read().split('\\n')\n\na, b = [int(x) for x in stdin[0].split(' ')]\n"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 18\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RPS') == 'P'\nassert solution('RPSR') == 'R'\nassert solution('RPSRS') == 'R'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RPS\") == \"P\"\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RPS\") == \"P\"\nassert solution(\"RPSS\") == \"P\"\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RPS') == 'P'\nassert solution('RPSR') == 'R'\n\nassert solution('SPSRPSRPS') == 'R'\nassert solution('SPSRPSRPSS') == 'P'\n\nassert solution('RRRPSRPSR') == 'S'\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RPS') == 'P'\nassert solution('RPSPP') == 'R'\nassert solution('RPSS') == 'S'\nassert solution('RPSSP') == 'P'\nassert solution('RPSSPS') == 'R'\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('RPS') == 'P'\nassert solution('RPSRPSRPS') == 'S'\nassert solution('RPSRPSRPSS') == 'P'\nassert solution('RPSS') == 'R'\nassert solution('RPSSRS') == 'R'\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RPS\") == \"P\"\nassert solution(\"RPSRPSRPS\") == \"R\"\nassert solution(\"RPSRPSRPSS\") == \"S\"\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RPS\") == 'P'"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RPS') == 'P'\nassert solution('RRPS') == 'R'\nassert solution('RRRPS') == 'S'\nassert solution('RRRRPS') == 'R'\nassert solution('RRRRRPS') == 'P'"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RPS\") == \"R\"\nassert solution(\"RPSRPSRPS\") == \"P\"\nassert solution(\"RPSRPSRPSS\") == \"R\"\nassert solution(\"RPSRPSRPSRPS\") == \"S\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 4 2') == 20\n\"\"\""
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == 20\nassert solution(\"1 3 4 2\") == 20\n\"\"\""
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 4 2') == '20'\n\"\"\"\n\n\"\"\"\nTime: O(N)\nSpace: O(1)\n\"\"\"\n"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 4 2\\n') == 20\n\"\"\"\n\nfrom collections import deque\nfrom functools import lru_cache\n\n\nclass Node:\n    def __init__(self, val: int, dist: int):\n        self.val = val\n        self.dist = dist\n"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 4 2\") == 20\n\"\"\""
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3''') == '4'\nassert solution('''2\n3 2''') == '0'\nassert solution('''3\n1 2 5''') == '14'\n"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 4 2') == 20\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\nprint(solution(input))\n"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 4 2\") == 20\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 4 2\") == 20\n"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4') == '5'\n\"\"\""
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"5\"\n\"\"\"\n\na, b = map(int, stdin.split())\n\ns = 0\nfor i in range(a, b + 1):\n    s ^= i\n\nprint(s)\n"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4') == '5'\n\n\"\"\""
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4') == '5'\n\"\"\"\n\nfrom typing import List, Dict, Union\n\nfrom utils import timing\n\nBASE_10 = 10\nBASE_2 = 2\n"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == '5'\n\n\"\"\"\n\nfrom math import ceil\nfrom typing import List, Set\n"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == '5'"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"5\""
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4''') == '''3\n2\n4\n'''\n\nassert solution('''10\n4 2 3\n1 2 1\n2 5 2\n3 6 3\n4 7 4\n5 8 5\n6 9 6\n7 10 7\n8 11 8\n9 12 9\n10 13 10\n''') == '''7\n6\n9\n10\n'''\n\nassert solution('''5\n4 2 3\n1 2 1\n2 5 2\n3 6 3\n4 7 4\n''') == '''3\n2\n4\n'''\n\nassert solution('''5\n2 1 1\n2 3 1\n3 4 1\n3 1\n2 4''') == '''3\n2\n4\n'''\n\nassert solution('''5\n4 2 3\n1 2 1\n2 5 2\n3 6 3\n4 7 4\n''') == '''3\n2\n4\n'''"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\") == \"3\\n2\\n4\\n\"\n\n\"\"\"\n\n\n\"\"\"\nimport math\nimport sys\nimport numpy as np\nfrom collections import deque\nfrom itertools import permutations, combinations\nfrom copy import deepcopy\n\nsys.setrecursionlimit(100000000)\nINF = float('inf')"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n1\") == \"3\"\n\n---\n1\n2\n1\n2\n\n---\n3\n2\n4\n\n+++\n3\n2\n4\n\n+++\n4\n2\n3\n\n+++\n4\n2\n3\n\n+++\n4\n2\n3"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\") == \"3\\n2\\n4\\n\"\nassert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\") == \"2\\n2\\n4\\n\"\n"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5''') == '''3\n2\n4\n'''\n\nassert solution('''5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5''') == '''3\n2\n4\n'''\n\nassert solution('''8\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n5 6 1\n6 7 1\n7 8 1\n''') == '''3\n2\n4\n'''\n\nassert solution('''10\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n5 6 1\n6 7 1\n7 8 1\n8 9 1\n9 10 1\n9 1\n''') == '''3\n2\n4\n'''\n\nassert solution('''6\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5''') == '''3\n2\n4\n'''"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\") == \"3\\n2\\n4\\n\"\n"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5') == '3\\n2\\n4\\n', 'error'\n\n\"\"\""
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5') == '3\\n2\\n4\\n'\n"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\\n\") == \"3\\n2\\n4\\n\"\nassert solution(\"6\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\\n\") == \"3\\n2\\n4\\n\"\nassert solution(\"8\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\\n\") == \"3\\n2\\n4\\n\"\nassert solution(\"6\\n2 5 1\\n1 6 1\\n2 3 1\\n1 2 1\\n5 4 1\\n1 4 1\\n2 3\\n2 5\\n3 1\\n1 3\\n2 6\\n\") == \"3\\n2\\n4\\n\"\nassert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n\") == \"3\\n2\\n4\\n\"\n"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n\"\"\") == '3\\n2\\n4\\n'\n\nassert solution(\"\"\"\n4\n3 1 1\n4 1 1\n3 2 1\n1 3 1\n\"\"\") == '2\\n1\\n1\\n'\n\nassert solution(\"\"\"\n4\n1 3 1\n3 2 1\n2 4 1\n1 4 1\n\"\"\") == '3\\n1\\n1\\n1\\n'\n\nassert solution(\"\"\"\n4\n1 3 1\n1 4 1\n2 3 1\n2 4 1\n\"\"\") == '4\\n1\\n1\\n1\\n'\n\nassert solution(\"\"\"\n4\n2 1 2\n2 3 2\n2 4 2\n3 1 2\n\"\"\") == '3\\n1\\n1\\n2\\n'"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('icefox') == 'ice'\n"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"icefox\") == \"ice\"\n\n\"\"\""
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"icefox\") == \"ice\"\nassert solution(\"ice\") == \"ice\"\nassert solution(\"\") == \"\"\nassert solution(\"fox\") == \"fox\"\nassert solution(\"foxice\") == \"fox\"\n\"\"\"\n"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('icefox') == 3\n\"\"\""
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('icefox') == 'ice'\nassert solution('hippopotamus') == 'hippo'\nassert solution('magnificent') =='magnific'\nassert solution('composite') == 'composi'\nassert solution('empty') == 'empty'"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"icefox\") == \"ice\"\n\n---------------------------------------------------------------\n\nSolving the problem with DP\n\nThe optimal solution can be calculated using the recursion formula for knapsack problems. Given the following recursion:\nS(i,j) = 0 if i > j else\nS(i,j) = min(S(i,j-1),\n             S(i-1,j-1)+1 if x(i) == y(j) else\n             S(i-1,j))\n\nWe can see that the first argument is always 0 because we can never remove the first string. The second argument is\nS(i,0) which is always 0 because we cannot remove a substring of length 0. The third argument is S(0,j) which is always\nequal to 0 because we can't remove a substring of length j. The final argument is S(i,j-1) because the minimal solution\nof the problem is to remove the last letter from the string. So we're left with\nS(i,j-1) = min(S(i,j-1),\n             S(i-1,j-1)+1 if x(i) == y(j) else\n             S(i-1,j))\n\nThe recursion formula gives us a bottom up solution, where we calculate the minimum number of operations for\nstrings of lengths 1 through N and append them to a list. Then we calculate the minimum number of operations for\nstrings of lengths 2 through N and append them to a list. Then we calculate the minimum number of operations for\nstrings of lengths 3 through N and append them to a list. And so on until we calculate the minimum number of\noperations for strings of lengths N through N. We then return the minimum of all the lists.\n\nfrom math import inf\n"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('icefox') == 'ice'\nassert solution('abc') == 'abc'\nassert solution('abba') == 'abba'\nassert solution('bba') == 'ba'\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('icefox') == 'ice'\n\n\"\"\"\n\nimport sys\nimport re\n\nstdin = sys.stdin.read()\nstdin = stdin.split(\"\\n\")\n\nregex = re.compile(r'\\d+')\n\nfor i in range(0, len(stdin)):\n    stdin[i] = regex.findall(stdin[i])\n    stdin[i] = list(map(int, stdin[i]))"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"icefox\") == \"ice\"\nprint(\"All test cases passed.\")\n\n-----Problem-----\nTaken from Codewars Kata Series: Easy\n\nGiven a string S of lowercase English letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.\n\nWe repeatedly make duplicate removals on S until we no longer can.\n\nReturn the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.\n\n\n-----Solution-----\n"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s = 'icefox') == 'ic'\n\"\"\""
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('30\\n314159') == 'YES'\nassert solution('6\\n314159') == 'NO'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(inputs[0]) == outputs[0]\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('314159') == 'NO'\n\nassert solution('012345') == 'YES'\nassert solution('011023') == 'YES'\nassert solution('0110111') == 'YES'\nassert solution('0110101010') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('314159') == 'NO'\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('314159') == 'YES'\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('314159') == 'NO'\nassert solution('6') == 'YES'\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('314159') == 'NO'\nassert solution('100100') == 'YES'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100000\") == \"YES\"\nassert solution(\"111111\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"314159\") == \"NO\"\n\"\"\""
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 9') == '3'\nassert solution('5 8') == '0'"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 9\\n') == '3'\nassert solution('5 8\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 8') == '0'\nassert solution('3 9') == '3'\nassert solution('7 3') == '0'\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 9\") == 3\nassert solution(\"5 8\") == 0\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\") == \"0\"\nassert solution(\"3 9\") == \"3\"\nassert solution(\"5 8\") == \"0\"\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 3') == '1'\nassert solution('1 3 9') == '1'\nassert solution('3 9') == '3'\nassert solution('3 9 10') == '0'\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 9\") == '3'\nassert solution(\"5 8\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 9\") == 3\nassert solution(\"5 8\") == 0\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 9') == '3'\nassert solution('5 8') == '0'\nassert solution('11 2') == '0'\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 9\") == \"3\"\nassert solution(\"5 8\") == \"0\"\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(read_input()) == read_expected()\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n3 9 1 -1''') == '0'\nassert solution('''8\n11 -1 13 19 24 7 17 5''') == '12'\nassert solution('''8\n-1 13 19 24 7 17 5''') == '14'\nassert solution('''8\n11 13 19 24 7 17 5''') == '13'\nassert solution('''8\n11 13 -1 7 17 5''') == '10'\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 9 1 -1\") == \"0\"\nassert solution(\"8\\n11 -1 13 19 24 7 17 5\") == \"12\"\n\n\"\"\""
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 9 1 -1\") == \"0\"\nassert solution(\"8\\n11 -1 13 19 24 7 17 5\") == \"12\"\n\"\"\""
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 9 1 -1\") == \"0\"\nassert solution(\"8\\n11 -1 13 19 24 7 17 5\") == \"12\"\n\"\"\"\nimport math\n\nfrom collections import Counter\n\nNUM_BOXERS = int(stdin.readline().strip())\n\nbribes = list(map(int, stdin.readline().strip().split()))\n\nassert len(bribes) == NUM_BOXERS\n\ndp = [math.inf for _ in range(NUM_BOXERS + 1)]\ndp[0] = 0\n\nboxer_strength = Counter()\n\nfor i in range(1, NUM_BOXERS + 1):\n    boxer_strength[i] = bribes[i - 1]\n\nfor i in range(1, NUM_BOXERS + 1):\n    for j in range(1, i):\n        if boxer_strength[j] > boxer_strength[i]:\n            if dp[i] > dp[j] + 1:\n                dp[i] = dp[j] + 1"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 9 1 -1') == '0'\nassert solution('8\\n11 -1 13 19 24 7 17 5') == '12'\n\"\"\"\nimport math\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_str_1) == \"0\"\nassert solution(test_str_2) == \"12\"\n\n\"\"\"\n\nfrom math import log2\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"4\\n\" +\n    \"3 9 1 -1\"\n) == \"0\"\nassert solution(\n    \"8\\n\" +\n    \"11 -1 13 19 24 7 17 5\"\n) == \"12\"\n\"\"\"\nfrom typing import List\nimport math"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 9 1 -1') == '0'\nassert solution('8\\n11 -1 13 19 24 7 17 5') == '12'\n\n\"\"\"\n\nn = int(input())\nlst = list(map(int, input().split()))\n\ndp = [0] * n\nfor i in range(n):\n    if lst[i] == -1:\n        dp[i] = 0\n        continue\n    if i == 0:\n        dp[i] = abs(lst[0] - lst[1])\n        continue\n    if dp[i] == 0:\n        continue\n    if lst[i] < lst[i-1]:\n        dp[i] = dp[i-1] + abs(lst[i-1] - lst[i])\n    else:\n        dp[i] = dp[i-1]\n\nprint(dp[n-1])\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 9 1 -1\") == \"0\"\nassert solution(\"8\\n11 -1 13 19 24 7 17 5\") == \"12\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2\"\nassert solution(\"5\\n1 1 5 1 1\") == \"2\"\nassert solution(\"5\\n1 1 5 1 1\") == \"2\"\n\n\n    def cycle(a_array: list[int]) -> int:\n        i = 0\n        n = len(a_array)\n        while i < n - 1:\n            if a_array[i] <= 1:\n                return 0\n            else:\n                if a_array[i] % 2 == 0:\n                    a_array[i] -= 1\n                    i += 1\n                else:\n                    a_array[i] /= 2\n                    i += 1\n        return 1\n\n    assert cycle([1, 2, 3]) == 1\n    assert cycle([1, 2, 5, 1, 1]) == 1\n    "
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5 6 4 7\") == \"1\"\nassert solution(\"5\\n1 1 5 1 1\") == \"2\"\nassert solution(\"3\\n1 2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n\") == \"2\"\nassert solution(\"1 1 5 1 1\\n\") == \"2\"\nassert solution(\"1 1 5 1 1\\n\") == \"1\"\nassert solution(\"1 1 5 1 1\\n\") == \"2\""
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 3 2') == '2'\nassert solution('1 1 5 1 1') == '2'\nassert solution('5 1 1 1 1') == '2'\nassert solution('5 1 1 1 1') == '2'\nassert solution('1 1 1 1 1') == '2'\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2') == '2'\nassert solution('7 1 1 1 1 1 1') == '2'\nassert solution('8 1 1 1 1 1 1 1 1') == '1'\nassert solution('9 1 1 1 1 1 1 1 1 1') == '1'\nassert solution('10 1 1 1 1 1 1 1 1 1 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\\n2 3 2\\n3 1 1\\n\") == \"2\\n1\\n1\\n2\\n2\\n2\\n2\\n\"\nassert solution(\"1 1 5 1 1\\n\") == \"2\\n2\\n2\\n2\\n2\\n\"\nassert solution(\"5 4 3 2 1\\n\") == \"1\\n1\\n1\\n1\\n1\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 1\") == \"2\"\nassert solution(\"5\\n1 1 5 1 1\") == \"2\"\nassert solution(\"5\\n1 1 5 1 1\") == \"2\"\nassert solution(\"5\\n1 1 5 1 1\") == \"2\"\nassert solution(\"5\\n1 1 5 1 1\") == \"2\"\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1\\n1') == '2\\n2\\n1\\n1'\nassert solution('5\\n1 1 5 1 1') == '2\\n2\\n2\\n2\\n2'\nassert solution('3\\n1 1\\n1') == '2\\n1\\n1\\n1'"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"5\n1 1 5 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"5\n1 1 5 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"5\n1 1 2 2 1\n\"\"\") == \"2\"\nassert solution(\"\"\"5\n1 1 2 3 2 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 5 1 1\") == \"2\"\nassert solution(\"3\\n1 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '0'\nassert solution('1') == '1'\nassert solution('15') == '4'\nassert solution('25') == '4'\nassert solution('80') == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == '4'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('10') == '4'\n"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4''') == '1'\n\nassert solution('''25''') == '4'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"25\") == \"4\"\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"25\") == \"4\"\n\"\"\""
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"25\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == 4\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('5') == '3'\nassert solution('5') == '3'\nassert solution('10') == '5'\n"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"6\"\nassert solution(\"25\") == \"4\"\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == answer\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 2 3\") == \"1\"\nassert solution(\"5\\n0 1 2 2 3\") == \"-1\"\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(test_cases[0])) == '2'\nassert solution(str(test_cases[1])) == '-1'\nassert solution(str(test_cases[2])) == '0'\n\n\"\"\"\n\ntest_cases = [\n    [6, \"0 1 7 1 7 10\"],\n    [3, \"1 1 1\"],\n    [1, \"0\"],\n    [1, \"0\"]\n]"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n0 1 7 1 7 10\\n') == '2'\n\nassert solution('3\\n1 1 1\\n') == '-1'\n\nassert solution('1\\n0\\n') == '0'\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n0 1 7 1 7 10\\n\") == 2\nassert solution(\"3\\n1 1 1\\n\") == -1\nassert solution(\"1\\n0\\n\") == 0\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 1 2 3 4\\n0 2\\n0 3\\n0 4\") == \"1\\n\"\nassert solution(\"5\\n0 1 2 3 4\\n1 1\\n1 2\\n1 3\\n1 4\") == \"2\\n\"\nassert solution(\"5\\n0 1 2 3 4\\n0 2\\n0 3\\n0 4\\n1 1\\n1 2\\n1 3\\n1 4\") == \"2\\n\"\nassert solution(\"3\\n0 1\\n1 2\\n1 3\") == \"0\\n\"\nassert solution(\"3\\n1 1\\n1 2\\n0 3\") == \"0\\n\"\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n0 1 7 1 7 10\") == 2\nassert solution(\"3\\n1 1 1\") == -1\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('1 2') == 0\nassert solution('1 1 2') == -1\nassert solution('1 1 1 2') == -1\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n0 1 7 1 7 10\") == \"2\"\nassert solution(\"3\\n1 1 1\") == \"-1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 2 3 4 5\") == \"2\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"2\\n1 1\") == \"1\"\n"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\") == \"1 1 1 1 1 1 1 1 1\"\nassert solution(\"10\") == \"1 1 1 1 1 1 1 1 1\"\nassert solution(\"32\") == \"10 11 11\"\nassert solution(\"7\") == \"11 11\"\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\") == \"1 1 1 1 1 1 1 1 1\"\nassert solution(\"32\") == \"10 11 11\"\nassert solution(\"100\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9') == '9', 'Test #1'\nassert solution('32') == '3', 'Test #2'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\") == \"9\"\nassert solution(\"3\") == \"10 11 11\"\n\"\"\"\n\nfrom math import log10, ceil"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"32\") == \"10 11 11\"\nassert solution(\"9\") == \"1 1 1 1 1 1 1 1 1\""
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9') == '9'\nassert solution('32') == '10 11 11'\n"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\") == \"1 1 1 1 1 1 1 1 1\"\n\n\"\"\""
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\") == \"1 1 1 1 1 1 1 1 1\"\nassert solution(\"32\") == \"10 11 11\"\n\"\"\"\n"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9') == '9\\n1 1 1 1 1 1 1 1 1'\nassert solution('32') == '3\\n10 11 11'\nassert solution('1') == '1'\nassert solution('10001') == '5\\n10 11 11 11 11'\nassert solution('3432') == '3\\n10 11 11 11 11 11 11 11 11'\n"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\") == \"9\"\nassert solution(\"32\") == \"3 10 11\"\nassert solution(\"100\") == \"10 10 10\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"11\"\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"LDUR\") == \"4\"\nassert solution(\"RRRUU\") == \"0\"\nassert solution(\"LLRRRR\") == \"4\"\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('UDUU') == '1'\nassert solution('LDRRRR') == '0'\n\"\"\""
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"LLRRRR\") == \"0\"\nassert solution(\"LDUR\") == \"4\"\n\"\"\""
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('LLR') == '2'\nassert solution('RUD') == '3'\nassert solution('UDUDUD') == '4'\n\"\"\"\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('RU') == '0'\nassert solution('DLLUDU') == '3'\nassert solution
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"UUUUUUU\") == 8\nassert solution(\"UDUDDDUUDLULRULDDD\") == 4\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('LDUR') == '4'\nassert solution('RRRUU') == '0'\nassert solution('LLRRRR') == '4'\n\"\"\"\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LDUR\") == 4\nassert solution(\"RRRUU\") == 0\n\"\"\"\n\nfrom itertools import groupby\nfrom operator import itemgetter\n\nprint(max(len(list(g)) for _, g in groupby(stdin)))\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"LDUR\") == \"4\"\nassert solution(\"RRRUU\") == \"0\"\nassert solution(\"LLRRRR\") == \"4\"\nprint('Passed')\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"LLRRRR\") == \"4\"\nassert solution(\"LLRRRRUUUU\") == \"8\"\nassert solution(\"LLRRRRUUUUUUU\") == \"4\"\nassert solution
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n10\\n00\") == \"2\"\nassert solution(\"4 1\\n0100\\n\") == \"1\"\nassert solution(\"4 5\\n1101\\n1111\\n0110\\n1011\\n1111\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1101\") == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n1101\\n1111\\n0110\\n1011\\n1111\\n') == '2'\n"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n10\\n00\") == \"2\"\nassert solution(\"4 1\\n1011\\n1111\\n0110\\n1011\") == \"1\"\n"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n1101\\n1111\\n0110\\n1011\\n1111') == '2'\nassert solution('4 1\\n0100\\n1110') == '1'\n"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '2'\nassert solution('0100') == '1'\nassert solution('1101') == '2'\nassert solution('1111') == '1'\nassert solution('1011') == '1'\n"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11010\") == \"2\"\nassert solution(\"1010\") == \"1\"\nassert solution(\"101110101111101010110111\") == \"10\"\nassert solution(\"01110111111110111111\") == \"8\"\n\nprint('Success')"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n1101\\n1111\\n0110\\n1011\\n1111') == '2'\n\nprint(solution(stdin))"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n01010\") == 2\n\nassert solution(\"4\\n1101\") == 1\n\nassert solution(\"4\\n1011\") == 2\n\nassert solution(\"5\\n101010\") == 2\n\nassert solution(\"1\\n11\") == 1"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n10\\n00') == '2'\nassert solution('4 1\\n0100\\n1111\\n0110\\n1011\\n1111') == '2'\n"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 8 6') == \"Yes\"\nassert solution('3 9 3') == \"Yes\"\nassert solution('8 5 20') == \"No\"\n"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8 6\") == \"Yes\"\nassert solution(\"3 9 3\") == \"Yes\"\nassert solution(\"8 5 20\") == \"No\"\n\"\"\"\n\nfrom sys import stdin\n\nN, M, K = [int(i) for i in stdin.readline().split()]\npens = M\nnotebooks = K"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 8 6\\n') == 'Yes'\nassert solution('3 9 3\\n') == 'Yes'\nassert solution('8 5 20\\n') == 'No'\n\nprint(solution('5 8 6\\n'))\nprint(solution('3 9 3\\n'))\nprint(solution('8 5 20\\n'))\n\nprint(\"Success\")\n"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8 6\") == \"Yes\"\nassert solution(\"3 9 3\") == \"Yes\"\nassert solution(\"8 5 20\") == \"No\"\n\n---\n\n\u6709\u95ee\u9898\uff01\n\nimport sys\n\nstdin = sys.stdin.readline()\nn, m, k = list(map(int, stdin.split()))\n\nc = min(k, m)\nm = m - c\nk = k - c\n\nprint(\"No\" if c < k else \"Yes\")"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8 6\") == \"Yes\"\nassert solution(\"3 9 3\") == \"Yes\"\nassert solution(\"8 5 20\") == \"No\"\n\"\"\""
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\n"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\n\n-----Hints-----\n\n1. Try to use the mathematical formula of the number of combinations.\n2. The number of combinations of $n$ elements with exactly $k$ of the same elements is given by the binomial coefficient $\\binom{n}{k}$.\n3. Binomial coefficient $\\binom{n}{k}$ can be calculated using the general formula $\\binom{n}{k} = \\frac{n!}{k!\\left(n-k\\right)}$.\n4. If the number of combinations exceeds the total number of participants, it is impossible to give each participant at least one pen and at least one notebook.\n5. For example, if $n$ is equal to $6$, and $k$ is equal to $5$, the number of combinations with exactly $5$ is $\\frac{6!}{5!\\left(6-5\\right)} = \\frac{6!}{5!} = 5$.\n\n\"\"\"\nimport math"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8 6\") == \"Yes\"\nassert solution(\"3 9 3\") == \"Yes\"\nassert solution(\"8 5 20\") == \"No\"\n"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8 6\") == \"Yes\"\nassert solution(\"3 9 3\") == \"Yes\"\nassert solution(\"8 5 20\") == \"No\"\n\nprint(\"Hooray!\")"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\") == \"3\"\nassert solution(\"5\\n16 23 8 15 4\") == \"0\"\nassert solution(\"3\\n14 15 92\") == \"67\"\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28') == '3'\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\") == \"3\"\n\"\"\""
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\") == \"3\"\n\"\"\""
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\") == \"3\"\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28') == '3'\n\n'''\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\") == \"3\"\nassert solution(\"5\\n16 23 8 15 4\") == \"0\"\nassert solution(\"3\\n14 15 92\") == \"67\"\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\\n\") == \"3\"\nassert solution(\"5\\n16 23 8 15 4\\n\") == \"0\"\nassert solution(\"3\\n14 15 92\\n\") == \"67\"\n\n\"\"\"\n\nimport sys\n\nK = int(sys.stdin.readline())\nr = list(map(int, sys.stdin.readline().split()))\n\nres = set()\nres.add(K)\nfor i in range(K):\n    res.add(r[i])\n    if K - 1 - i > K - i - len(res):\n        res.add(r[K - 1 - i])\n\nprint(K - len(res))\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''25\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28''') == '3'\nassert solution('''5\n16 23 8 15 4''') == '0'\nassert solution('''3\n14 15 92''') == '67'\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(25, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28) == 3\nassert solution(5, 16, 23, 8, 15, 4) == 0\nassert solution(3, 14, 15, 92) == 67\n\n\"\"\"\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"4 2\") == \"7\"\nassert solution(\"5 3\") == \"31\"\nassert solution(\"5 4\") == \"76\"\n\nprint(\"Passed\")\n\"\"\"\nimport math"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1') == '1'\nassert solution('4 2') == '7'\nassert solution('5 3') == '31'\nassert solution('5 4') == '76'\nassert solution('6 5') == '126'\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1') == '1'\nassert solution('4 2') == '7'\n\"\"\"\nimport collections\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1') == '1'\nassert solution('4 2') == '7'\nassert solution('5 3') == '31'\nassert solution('5 4') == '76'\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"1\"\n\nassert solution(\"4 2\") == \"7\"\n\nassert solution(\"5 3\") == \"31\"\n\nassert solution(\"5 4\") == \"76\"\n\n\"\"\"\n\nfrom itertools import permutations\n\nn, k = map(int, input().split())"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == 1\nassert solution(\"4 2\") == 7\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == '1'\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\n\na = (n - k) + 1\nb = (n - k)\n\nprint(a*b)\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1') == 1\nassert solution('4 2') == 7\nassert solution('5 3') == 31\nassert solution('5 4') == 76\n\nprint('PASSED')\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"4 2\") == \"7\"\nassert solution(\"5 3\") == \"31\"\nassert solution(\"5 4\") == \"76\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"4 2\") == \"7\"\nassert solution(\"5 3\") == \"31\"\nassert solution(\"5 4\") == \"76\"\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '4'\nassert solution('12\\n') == '5'\nassert solution('10\\n') == '15'\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '4'\nassert solution('5') == '5'\nassert solution('6') == '6'\nassert solution('7') == '7'\nassert solution('8') == '8'\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == '4'\nassert solution('6\\n') == '2'\nassert solution('2\\n') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == 4\n\n\"\"\""
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == 4\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '4'\n\"\"\""
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"4\"\n\"\"\""
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '4'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == 4\n\"\"\"\n"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 0\\n0 3\") == \"9\"\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 0\\n2 2\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n0 0\\n0 3') == '9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2 0\\n0 3\") == \"9\""
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 0\\n0 3\") == \"9\"\n\"\"\"\n\nn = int(input())\nminx = miny = 10**9\nfor _ in range(n):\n    x, y = map(int, input().split())\n    minx = min(minx, x)\n    miny = min(miny, y)\nprint(max(minx, miny)**2)\n"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0\\n0 3\") == \"9\"\n"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == solution(b)\n"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 5 2 7\\n7 3\\n3 8 5\") == \"9\"\nassert solution(\"4\\n2 2 7 3\\n7 3\\n3 8 5\") == \"9\"\n"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n0 3') == '9'\nassert solution('2\\n0 0\\n2 2') == '4'"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 2 4\") == 4\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == 2\nassert solution(\"4\\n7 6 5 4\") == 1\n"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n7 6 5 4\") == \"1\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4\\n7 6 5 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8\n11 12 1 2 13 14 3 4''') == '2'\nassert solution('''4\n7 6 5 4''') == '1'\nassert solution('''4\n1 2 2 4''') == '4'"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 2 4') == '4'\nassert solution('8\\n11 12 1 2 13 14 3 4') == '2'\nassert solution('4\\n7 6 5 4') == '1'\n\n\"\"\""
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"4\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4\\n7 6 5 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 2 4') == '4'\nassert solution('8\\n11 12 1 2 13 14 3 4') == '2'\nassert solution('4\\n7 6 5 4') == '1'\n\"\"\"\nimport math\nfrom typing import List"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"4\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4\\n7 6 5 4\") == \"1\"\n\n\n\n-----"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 2 4\") == 4\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == 2\nassert solution(\"4\\n7 6 5 4\") == 1\n"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"4\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4\\n7 6 5 4\") == \"1\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(15000)\n"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4\\n7 6 5 4\") == \"1\"\nassert solution(\"4\\n6 4 5 3\") == \"3\"\n\"\"\"\n\nfrom sys import stdin\n\nmax_len = 0\nmin_element = 100\n\nfor line in stdin:\n    line = line.split()\n\n    n = int(line[0])\n    numbers = list(map(int, line[1:]))\n\n    if n > max_len:\n        max_len = n\n    else:\n        for i in range(1, n):\n            if numbers[i] < numbers[i - 1]:\n                numbers = numbers[i:]\n                break\n    \n    if n > 1:\n        for i in range(1, n):\n            if numbers[i] < numbers[i - 1]:\n                numbers = numbers[i:]\n                break\n\n    if n <= min_element:\n        min_element = min(min_element, numbers[0])\n        numbers = numbers[1:]\n\n    if n > 0:\n        for i in range(1, n):\n            if numbers[i] < numbers[i - 1]:\n                numbers = numbers[i:]\n                break\n\n    if len(numbers) > max_len:\n        max_len = len(numbers)\n\nprint(max_len)\n"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 3 0 0 4 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n') == '33.0476190476'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"20.2591405923\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"15.9047592939\"\n"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\n\"\"\"\n\nfrom collections import defaultdict\n\nimport numpy as np\n\ninput_raw = stdin.strip()\n\ninput_list = [int(x) for x in input_raw.split(\"\\n\")]\ninput_list = np.array(input_list).reshape(-1, 10)\n\nladders = np.where(input_list == 0, 0, input_list)\n\nsource = np.zeros_like(input_list)\ntarget = np.ones_like(input_list) * 9\n\nladders_dict = defaultdict(list)\n\nfor i in range(input_list.shape[0]):\n    for j in range(input_list.shape[1]):\n        if input_list[i][j]!= 0:\n            ladders_dict[input_list[i][j]].append([i, j])"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"20.2591405923\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"15.9047592939\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 3 0 0 4 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 4 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 4 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 9 0\\n\") == \"33.0476190476\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 3 0 0 4 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 4 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 4 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 9 0\\n\") == \"20.2591405923\""
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0''') == '33.0476190476'\nassert solution('''0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0''') == '20.2591405923'\nassert solution('''0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0''') == '15.9047592939'"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '0 0 0 0 0 0 0 0 0 0'\n) == '33.0476190476'\nassert solution(\n    '0 0 0 0 0 0 0 0 0 0'\n) == '20.2591405923'\nassert solution(\n    '0 0 0 0 0 0 0 0 0 0'\n) == '15.9047592939'\n"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 6 6 6 6 6 6 0 0 0 0\n1 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n''') == '33.0476190476'\n\nassert solution('''0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 6 6 6 6 6 6 0 0 0 0\n1 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n''') == '20.2591405923'\n\nassert solution('''0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 6 6 6 6 6 6 0 0 0 0\n1 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n''') == '15.9047592939'\n\nassert solution('''0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\n\nfrom typing import List, Tuple\nimport itertools\nimport functools\nfrom collections import Counter"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 3 0 0 4 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 4 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 4 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 9 0\\n\") == '33.0476190476'\n\nassert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 6 6 6 6 6 6 0 0 0\\n1 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n\") == '15.9047592939'\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"az\") == 3\nassert solution(\"aacdeee\") == 6\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"aacdeee\") == 6\nassert solution(\"az\") == 3\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"aacdeee\") == 6\nassert solution(\"az\") == 3\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"aacdeee\") == 6\nassert solution(\"az\") == 3\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"aacdeee\") == 6\nassert solution(\"az\") == 3\nassert solution(\"\") == 0\nassert solution(\"aa\") == 1\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"az\") == 3\n\"\"\""
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"aacdeee\") == 6\nassert solution(\"az\") == 3\n\nprint(solution(\"abaa\"))\nprint(solution(\"aacdeee\"))\nprint(solution(\"az\"))\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"aacdeee\") == 6\nassert solution(\"az\") == 3\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s=\"abaa\") == 6\nassert solution(s=\"aacdeee\") == 6\nassert solution(s=\"az\") == 3\n\"\"\""
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"az\") == 3\n"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n2 1 4\\n1 2 4\\n3 4 4\\n2 8 3\\n3 16 3\\n1 32 2\") == \"63\"\nassert solution(\"7\\n1 100000 1\\n1 100000 2\\n1 100000 2\\n4 50000 3\\n3 50000 4\\n4 50000 4\\n3 50000 3\") == \"300000\"\nassert solution(\"4\\n1 1000 1\\n2 500 2\\n3 250 3\\n4 125 4\") == \"1000\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n2 1 4\\n1 2 4\\n3 4 4\\n2 8 3\\n3 16 3\\n1 32 2\\n\") == \"63\"\nassert solution(\"7\\n1 100000 1\\n1 100000 2\\n1 100000 2\\n4 50000 3\\n3 50000 4\\n4 50000 4\\n3 50000 3\\n\") == \"300000\"\nassert solution(\"4\\n1 1000 1\\n2 500 2\\n3 250 3\\n4 125 4\\n\") == \"1000\"\nassert solution(\"input.txt\") == \"56005060408105766\""
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 1 2\") == \"3\"\nassert solution(\"1\\n2\") == \"1\"\nassert solution(\"2\\n2 1 1\") == \"1\"\nassert solution(\"4\\n1 100000 1\") == \"100000\"\nassert solution(\"1\\n100000 1\") == \"100000\"\n"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"6\n2 1 4\n1 2 4\n3 4 4\n2 8 3\n3 16 3\n1 32 2\n\"\"\") == \"63\"\nassert solution(\"\"\"7\n1 100000 1\n1 100000 2\n1 100000 2\n4 50000 3\n3 50000 4\n4 50000 4\n3 50000 3\n\"\"\") == \"300000\"\nassert solution(\"\"\"4\n1 1000 1\n2 500 2\n3 250 3\n4 125 4\n\"\"\") == \"1000\"\nassert solution(\"\"\"4\n1 1000 1\n2 500 2\n3 250 3\n4 125 4\n\"\"\") == \"1000\"\nassert solution(\"\"\"4\n1 1000 1\n2 500 2\n3 250 3\n4 125 4\n\"\"\") == \"1000\"\n"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 4\") == \"63\"\nassert solution(\"1 2 4\") == \"63\"\nassert solution(\"3 4 4\") == \"63\"\nassert solution(\"2 8 3\") == \"63\"\nassert solution(\"3 16 3\") == \"63\"\n"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n2 1 4\\n1 2 4\\n3 4 4\\n2 8 3\\n3 16 3\\n1 32 2') == '63'\nassert solution('7\\n1 100000 1\\n1 100000 2\\n1 100000 2\\n4 50000 3\\n3 50000 4\\n4 50000 4\\n3 50000 3') == '300000'\nassert solution('4\\n1 1000 1\\n2 500 2\\n3 250 3\\n4 125 4') == '1000'\nprint('Test pass.')"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n2 1 4\\n1 2 4\\n3 4 4\\n2 8 3\\n3 16 3\\n1 32 2\") == \"63\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 4\") == \"63\"\nassert solution(\"1 2 4\") == \"63\"\nassert solution(\"3 4 4\") == \"63\"\nassert solution(\"2 8 3\") == \"63\"\nassert solution(\"3 16 3\") == \"63\"\n"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2\") == \"100\"\nassert solution(\"4 5 2\") == \"1000\"\nassert solution(\"1 100 2\") == \"100\"\nassert solution(\"1 100 1\") == \"100\"\nassert solution(\"1 100 2\") == \"200\"\n"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 4\\n1 2 4\\n3 4 4\\n2 8 3\\n3 16 3\\n1 32 2\\n\") == \"63\"\nassert solution(\"1 100000 1\\n1 100000 2\\n1 100000 2\\n4 50000 3\\n3 50000 4\\n4 50000 4\\n3 50000 3\\n\") == \"300000\"\nassert solution(\"1 1000 1\\n2 500 2\\n3 250 3\\n4 125 4\\n\") == \"1000\"\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('7') == '-1'\n\"\"\"\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7') == '-1'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == 'aeiou'\nassert solution('3') == 'ae'\nassert solution('1') == 'a'\nassert solution('2') == '-1'\n\n\"\"\""
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"-1\"\nassert solution(\"36\") == \"agoeuioaeiruuimaeoieauoweouoiaouimae\"\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7') == '-1'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('7') == '-1'\n\"\"\""
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7') == '-1'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"-\"\nassert solution(\"36\") == \"agoeuioaeiruuimaeoieauoweouoiaouimae\"\nassert solution(\"1\") == \"a\"\nassert solution(\"2\") == \"ae\"\nassert solution(\"3\") == \"aei\"\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"-\"\nassert solution(\"36\") == \"agoeuioaeiruuimaeoieauoweouoiaouimae\"\nassert solution(\"6\") == \"-\"\n\n\n\"\"\""
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == '-1'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\n\"\"\"\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 4 6 8 10 18 21 24\") == '3'\nassert solution(\"8\\n3 4 6 8 10 18 21 24\") == '3'\n\"\"\"\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 4 6 8 10') == '3'\nassert solution('8\\n3 4 6 8 10 18 21 24') == '3'\n\"\"\"\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n3 4 6 8 10 18 21 24\") == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n3 4 6 8 10 18 21 24\") == \"3\"\n\"\"\"\nfrom math import sqrt\n\nN = int(input())\nA = list(map(int, input().split()))"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 4 6 8 10 18 21 24') == '3'\nassert solution('4\\n1 2 3 4 5') == '1'\nassert solution('8\\n3 4 6 8 10 18 21 24') == '3'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1'\nassert solution('8\\n1 2 3 4 5 6 8 7') == '1'\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n3 4 6 8 10 18 21 24') == '3'\nassert solution('8\\n3 4 6 8 10 18 21 24\\n1') == '1'\nassert solution('8\\n3 4 6 8 10 18 21 24\\n2') == '2'\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n3 4 6 8 10 18 21 24\") == \"3\"\nprint(solution(\"8\\n3 4 6 8 10 18 21 24\"))"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"3\"\nassert solution(\"4\\n2 4 6 8\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 5 6 7\") == \"3\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"6\"\nassert solution(\"7\\n2 3 5 7 6 1 4\") == \"5\"\nassert solution(\"7\\n2 3 5 7 6 4 1\") == \"5\"\nassert solution(\"5\\n2 5 4 6 3 7\") == \"3\"\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 6 8 10 18 21 24\") == \"3\"\nassert solution(\"1 1 1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"8 8 8 8 8 8 8 8 8\") == \"8\"\n"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == 3\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == 1\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == 0\n"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '3'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"1\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"3\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"5\"\n\"\"\""
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '1'\nassert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '0'\nassert solution('0 0 0 0 0\\n1 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '1'\nassert solution('0 0 0 0 0\\n0 0 0 0 0\\n1 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '1'\n\n\"\"\""
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '1'\n\"\"\"\n"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"3\"\n\"\"\"\n\nfrom typing import List\n\nMatrix = List[List[int]]"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 0 0\\\\n0 0 0 0 1\\\\n0 0 0 0 0\\\\n0 0 0 0 0\\\\n0 0 0 0 0\\\\n0 0 0 0 0\\\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == 3\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == 1\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 1 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == 0\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 0 0\\\\n0 0 0 0 1\\\\n0 0 0 0 0\\\\n0 0 0 0 0\\\\n0 0 0 0 0\\\\n0 0 0 0 0\") == '3'\n\"\"\"\nimport math\nfrom typing import List\n\nstdin = \"\"\"0 0 0 0 0\\\\n0 0 0 0 0\\\\n0 0 0 0 0\\\\n0 0 0 0 0\\\\n0 0 0 0 0\"\"\"\n\nmatrix = [list(map(int, line.split(' '))) for line in stdin.split('\\n')]\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"pergament\") == \"1\"\nassert solution(\"permanent\") == \"4 6\"\nassert solution(\"wookie\") == \"1 2\"\nassert solution(\"cookie\") == \"1 2\"\nassert solution(\"double\") == \"2 4\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"pergament\\npermanent\") == \"1\\n4 6\"\nassert solution(\"wookie\\ncookie\") == \"1\\n-1 -1\"\nassert solution(\"petr\\negor\") == \"2\\n1 2\"\nassert solution(\"double\\nbundle\") == \"2\\n4 1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"permanent\") == \"4 6\"\nassert solution(\"wookie\") == \"1 2\"\nassert solution(\"cookie\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"pergament\") == 1\nassert solution(\"permanent\") == 4\nassert solution(\"wookie\") == 1\nassert solution(\"cookie\") == -1\nassert solution(\"petr\") == 2\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"pergament\") == 1\nassert solution(\"permanent\") == 4\nassert solution(\"wookie\") == 1\nassert solution(\"cookie\") == -1\nassert solution(\"double\") == 2\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution([\"8\", \"peter\", \"peter\", \"george\", \"peter\", \"george\", \"mike\"]) == (\"4\", \"6\")\nassert solution([\"3\", \"pergament\", \"permanent\", \"go\", \"gone\", \"good\", \"gon\"]) == (\"1\", \"4 6\")\nassert solution([\"2\", \"petr\", \"egor\", \"knights\", \"crusaders\", \"cannons\", \"knight\"]) == (\"2\", \"1 2\")\nassert solution([\"3\", \"double\", \"bundle\", \"gold\", \"bun\", \"glod\"]) == (\"2\", \"4 1\")\nassert solution([\"8\", \"double\", \"douc\", \"bundl\", \"bundle\", \"gold\", \"bun\"]) == (\"2\", \"4 1\")\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pergament\") == \"1\"\nassert solution(\"wookie\") == \"1\"\nassert solution(\"cookie\") == \"2\"\nassert solution(\"petr\") == \"2\"\nassert solution(\"egor\") == \"1\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"permanent\") == \"1 6\"\nassert solution(\"cookie\") == \"1 4\"\nassert solution(\"wookie\") == \"1 2\"\nassert solution(\"petr\") == \"2 1\"\nassert solution(\"egor\") == \"2 1\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('pergament') == '1 6'\nassert solution('permanent') == '4 6'\n\"\"\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"permanent\") == \"1 4\"\nassert solution(\"pergament\") == \"1 4\"\nassert solution(\"wookie\") == \"1 2\"\nassert solution(\"cookie\") == \"1 2\"\nassert solution(\"petr\") == \"2 1\"\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\\n?\\n18\\n1?\\n\") == \"YES\\n1\\n18\\n19\\n\"\nassert solution(\n    \"2\\n??\\n?\\n\") == \"NO\\n\"\nassert solution(\n    \"5\\n12224\\n12??5\\n12226\\n?0000\\n?00000\\n\") == \"YES\\n12224\\n12225\\n12226\\n20000\\n100000\\n\"\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1\n18\n1?\n\n''') == 'YES\\n1\\n18'"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n?\\n18\\n1?\\n\") == \"YES\\n1\\n18\\n19\"\nassert solution(\"2\\n??\\n?\\n\") == \"NO\"\nassert solution(\"5\\n12224\\n12??5\\n12226\\n?0000\\n?00000\\n\") == \"YES\\n12224\\n12225\\n12226\\n20000\\n100000\"\n\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import deque\nfrom itertools import dropwhile, takewhile\nfrom typing import Deque, Generator, List, Set, Tuple\n\n\nclass Solution:\n    def __init__(self, seq: List[int], qm: str):\n        self.seq = seq\n        self.qm = qm\n        self.chars = set(qm)\n\n    def solve(self) -> None:\n        chars = self.chars\n        qm = self.qm\n\n        def valid_seq(seq: List[int]) -> bool:\n            if not seq or seq[0] < 0:\n                return False\n            for i, n in enumerate(seq):\n                if i == 0 or n >= seq[i - 1]:\n                    continue\n                if any(n == c for c in qm):\n                    return False\n            return True\n\n        seq = deque(self.seq)\n        qm = deque(qm)\n        chars = deque(chars)\n\n        def gen_seq(seq: Deque[int]) -> Generator[Deque[int], None, None]:\n            for n in seq:\n                if n in qm:\n                    chars.popleft()\n                    seq.remove(n)\n                    yield from gen_seq(seq)\n                    seq.append(n)\n                    chars.appendleft(chars.popleft())\n                else:\n                    yield seq\n\n        def replace_qm(seq: Deque[int], qm: Deque[str]) -> List[int]:\n            nums = deque(map(int, seq))\n            for char in qm:\n                nums.remove(char)\n            return list(nums)\n\n        if valid_seq(seq) and not chars:\n            print(\"YES\")\n            for seq in gen_seq(seq):\n                print(*replace_qm(seq, qm))\n            return\n\n        print(\"NO\")\n\n    def test_solution(self) -> None:\n        self.solve()\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12224\\n12225\\n12226\") == \"YES\\n12224\\n12225\"\n\"\"\"\nfrom __future__ import annotations\nfrom collections import deque\nfrom itertools import islice\nfrom typing import Iterator, List, Tuple\n\nItem = Tuple[int, bool]\n\nSIZE = 4\nCHARS = '1234567890?\\n'\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1?\\n2?\\n3?\\n4?\\n5\") == \"YES\\n1\\n2\\n3\\n4\\n5\"\nassert solution(\"3\\n1?\\n2?\\n3\") == \"YES\\n1\\n2\\n3\"\nassert solution(\"2\\n??\\n??\") == \"NO\""
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1?2345\") == \"1234\"\nassert solution(\"??45\") == \"45\"\nassert solution(\"12224\") == \"12245\"\nassert solution(\"12??5\") == \"12245\"\nassert solution(\"?0?0?0\") == \"0\"\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n?\\n18\\n1?\\n\") == \"YES\\n1\\n18\\n19\"\nassert solution(\"2\\n??\\n?\\n\") == \"NO\"\nassert solution(\"5\\n12224\\n12??5\\n12226\\n?0000\\n?00000\\n\") == \"YES\\n12224\\n12225\\n12226\\n20000\\n100000\"\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n?\\n18\\n1?\\n') == \"YES\\n1\\n18\\n19\"\n\nassert solution('2\\n??\\n?\\n') == \"NO\"\n\nassert solution('5\\n12224\\n12??5\\n12226\\n?0000\\n?00000\\n') == \"YES\\n12224\\n12225\\n12226\\n20000\\n100000\""
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2??5\\n?0\\n?\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n18\\n1?') == 'YES\\n1\\n18\\n19'\nassert solution('2\\n??\\n?\\n') == 'NO'\nassert solution('5\\n12224\\n12??5\\n12226\\n?0000\\n?00000') == 'YES\\n12224\\n12225\\n12226\\n20000\\n100000'\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\\n1 2 3\\n\") == \"6\"\nassert solution(\"5 1 5\\n0\\n3 3 3 3 3\") == \"3\"\nassert solution(\"7 4 3\\n2 4 5 6\\n3 14 15\") == \"-1\""
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 5\\n0\\n3 3 3 3 3\\n') == '-1'\nassert solution('5 2 5\\n0\\n3 3 3 3 3\\n') == '20'\n\"\"\"\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n6 2 3\n1 3\n1 2 3\n\"\"\") == '6'\nassert solution(\n\"\"\"\n4 3 4\n1 2 3\n1 10 100 1000\n\"\"\") == '1000'\nassert solution(\n\"\"\"\n5 1 5\n0\n3 3 3 3 3\n\"\"\") == '-1'\nassert solution(\n\"\"\"\n7 4 3\n2 4 5 6\n3 14 15\n\"\"\") == '-1'\nassert solution(\n\"\"\"\n7 4 3\n2 4 5 6\n3 14 15\n\"\"\") == '-1'\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 4\\n1 2 3\\n3 14 15') == '1000'\nassert solution('6 2 3\\n1 3\\n1 2 3') == '6'\nassert solution('6 3 1\\n1 2\\n1 3') == '-1'\nassert solution('5 1 5\\n0\\n3 3 3 3 3') == '-1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"5\"\nassert solution(\"1 2 3 4 5\") == \"4\"\nassert solution(\"1 2 3 4 5 6\") == \"7\"\n\"\"\"\n\n\"\"\"\n[ 1 - 2 - 3 - 4 - 5 - 6]\n|\n[ 1  1  2  3  4  5]\ns = [1,2,3,4,5,6]\n\n0 1 2 3 4 5 6 \n\ns[2] + s[3] + s[4] + s[5] + s[6] - s[0] - s[1]\n\"\"\"\n\n\"\"\"\n6 2 3\n1 3\n\n6 - 1 - 3 = 4\n\n6\n\n6 - 2 = 4\n\n4 + 2 = 6\n\n6\n\"\"\"\n\nn, m, k = list(map(int, input().split()))"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3\\n1 3\\n2 10 100 1000\") == \"10\\n\"\nassert solution(\"10 5 6\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n14 15 16\") == \"14\"\nassert solution(\"9 9 9\\n1 10 100 1000\\n4 5 6\\n7 8 9\\n10 11 12\\n14 15 16\\n19 20 21\") == \"14\"\nassert solution(\"3 3 3 3\\n1 3\\n2 4\\n4 5\\n6 7\\n7 8\\n9 10\") == \"-1\"\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2 3\\n1 3\\n1 2 3') == '6'\nassert solution('4 3 4\\n1 2 3\\n1 10 100 1000') == '1000'\nassert solution('5 1 5\\n0\\n3 3 3 3 3') == '-1'\nassert solution('7 4 3\\n2 4 5 6\\n3 14 15') == '-1'\nprint('The local tests are done.')"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 4\\n1 2 3\\n3 14 15\") == '1000'\n\"\"\"\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n4 5 6\\n7 8 9\\n\") == '12'\nassert solution(\"1 2 3\\n4 5 6\\n7 8 9\\n\") == '12'\nassert solution(\"1 2 3\\n4 5 6\\n7 8 9\\n\") == '12'\nassert solution(\"1 2 3\\n4 5 6\\n7 8 9\\n\") == '12'\nassert solution(\"1 2 3\\n4 5 6\\n7 8 9\\n\") == '12'\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 3\\n1 3\\n1 2 3\") == 6\nassert solution(\"4 3 4\\n1 2 3\\n1 10 100 1000\") == 1000\nassert solution(\"5 1 5\\n0\\n3 3 3 3 3\") == -1\nassert solution(\"7 4 3\\n2 4 5 6\\n3 14 15\") == -1\n"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 4 5 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('10 2 10 2') == '9'\nassert solution('10 2 10 3') == '8'\nassert solution('10 2 10 4') == '8'\nassert solution('10 2 10 5') == '8'\n"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 5 2\") == \"8\"\nassert solution(\"30 9 4 1\") == \"4\"\n\n\"\"\"\n\nn, k, M, D = map(int, input().split())\nres = 0\nfor i in range(k):\n    res += min(M, n // k) * (n // k) // i * D\n    n //= k\nprint(res)\n"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 4 5 2\") == 8\nassert solution(\"30 9 4 1\") == 4\n\n---Problem---\n\n\u0415\u0441\u0442\u044c \u0434\u0432\u0435 \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0445 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043c\u0430\u0441\u0441\u0438\u0432\u0430: A \u0438 B.\n\n\u041d\u0443\u0436\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u044c A \u0438 B, \u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044e \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u041f\u043e\u0434 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0447\u0438\u0441\u043b\u0430 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u0447\u0438\u0441\u043b\u0430 A \u0438\u043b\u0438 B \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u0433\u043e \u043d\u0430 \u044d\u0442\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043d\u0435\u043f\u0443\u0441\u0442\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u0415\u0441\u043b\u0438 A \u0438 B \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442, \u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0440\u0430\u0432\u043d\u043e \u043d\u0443\u043b\u044e.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u043d\u0430 \u043f\u0440\u043e\u0442\u044f\u0436\u0435\u043d\u0438\u0438 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u044b \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0442\u0432\u0435\u0442\u0430. \u0412\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u044f\u0442\u0441\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u044b \u0434\u043b\u0438\u043d\u043e\u0439 \u0432 $O(n)$, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0432\u043d\u044b\u043c 0 \u0438\u043b\u0438 1.\n\nInput\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 $n$ \u0438 $k$ (1 \\le n \\le 10^{18}, 1 \\le k \\le n$). \u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 $n$ \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u043c\u0430\u0441\u0441\u0438\u0432 \u0410 \u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0412.\n\nOutput\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044e \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u043c \u043f\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u043f\u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u043d\u043e\u043c \u0432\u044b\u0432\u043e\u0434\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u044d\u043a\u0441\u0442\u0440\u0435\u043c\u0430\u043b\u044c\u043d\u044b\u043c, \u0435\u0441\u043b\u0438 \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u044b\u0445 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0435\u0432:\n\n\u0412\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 4 5 2\") == \"8\"\nassert solution(\"30 9 4 1\") == \"4\"\nassert solution(\"3 2 4 5\") == \"5\"\nassert solution(\"30 12 6 3\") == \"6\"\nassert solution(\"30 9 3 5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 4 5 2') == '8'\nassert solution('30 9 4 1') == '4'\n\"\"\"\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 4 5 2\") == \"8\"\nassert solution(\"30 9 4 1\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 4 5 2') == '8'\nassert solution('30 9 4 1') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 4 5 2\") == \"8\"\n\nassert solution(\"30 9 4 1\") == \"4\"\n"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 4 5 2\") == \"8\"\nassert solution(\"30 9 4 1\") == \"4\"\nassert solution(\"99 1 1 1\") == \"1\"\nassert solution(\"10 1 1 1\") == \"9\"\nassert solution(\"20 1 1 1\") == \"9\"\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 7\") == \"6\"\n\"\"\"\n\nn, k = map(int, input().split())\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"5\"\nassert solution(\"7 7\") == \"6\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 3') == '5'\nassert solution('7 7') == '6'\n\"\"\"\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 3') == '5'\nprint(solution('7 7'))\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n10 3\n''') == '5'\nprint('OK')\n\nassert solution('''\n7 7\n''') == '6'\nprint('OK')\n'''\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"2 3 6 7 9\"\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"5\"\nassert solution(\"5 6 7 8 9 10\") == \"10\"\nassert solution(\"6 7 8 9 10\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"3\"\nassert solution(\"7 7\") == \"6\"\n\"\"\""
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3\") == '5'\n\"\"\""
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3\") == \"5\"\nprint(solution(input()))\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n-1 1\") == \"2\"\nassert solution(\"4\\n0 0 0 0\") == \"4\"\nassert solution(\"5\\n-5 -3 5 3 0\") == \"13\"\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 -1\") == \"1\"\nassert solution(\"3 -1 -1\") == \"2\"\nassert solution(\"4 -1 -1 -1\") == \"3\"\n\n\"\"\"\n\nimport sys\nimport os\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n-1 1\\n0 0 0\\n0\") == 4\nassert solution(\"4\\n-1 1\\n0 0 0\\n0\") == 4\nassert solution(\"5\\n-5 -3 5 3 0\\n\") == 13\n\"\"\""
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n-1 1\") == \"2\"\nassert solution(\"4\\n0 0 0 0\") == \"4\"\nassert solution(\"5\\n-5 -3 5 3 0\") == \"13\""
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0 0 0\") == \"4\"\nassert solution(\"2\\n1 1\") == \"0\"\nassert solution(\"5\\n-5 -3 5 3 0\") == \"13\"\nassert solution(\"7\\n-2 -4 -1 0 1 1 1\") == \"4\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 1 -1 0\") == \"2\"\nassert solution(\"2\\n1 1\") == \"0\"\nassert solution(\"4\\n0 0 0 0\") == \"4\"\n\n-----Notes-----\n\nThis problem is similar to the Knapsack problem. But instead of storing the values, we store the amount of coins we need.\n\"\"\"\nimport sys\nimport math\nfrom functools import lru_cache\n\nsys.setrecursionlimit(1000000)\ndebug = True\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4\"\nassert solution(\"4\\n2 1 3 4\") == \"4\"\nassert solution(\"4\\n3 0 1 2\") == \"4\"\nassert solution(\"3\\n1 0 1\") == \"1\"\nassert solution(\"5\\n0 -1 5 3 0\") == \"13\"\n\n\"\"\"\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 -1\\n1 1\") == \"2\"\nassert solution(\"2 -1 1\\n1 -1 1\") == \"1\"\nassert solution(\"3 -1 1 1\\n1 -1 1 1\") == \"0\"\nassert solution(\"2 -1 1\\n1 -1 1\") == \"2\"\nassert solution(\"5 -1 1 1 1 1\\n1 -1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-1 1\") == 2\nassert solution(\"0 0 0 0\") == 4\nassert solution(\"-5 -3 5 3 0\") == 13"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n-1 1\") == \"2\"\nassert solution(\"4\\n0 0 0 0\") == \"4\"\nassert solution(\"5\\n-5 -3 5 3 0\") == \"13\"\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12345168') == '123+45=168'\nassert solution('099') == '0+9=9'\nassert solution('199100') == '1+99=100'\nassert solution('123123123456456456579579579') == '123123123+456456456=579579579'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123123123456456456579579579') == '123123123+456456456=579579579'\nassert solution('199100') == '1+99=100'\nassert solution('123') == '123'\n\"\"\"\n\nimport re\n\nINPUT_STR = stdin.read()\n\nresult = re.search(r'^(\\d+)(\\d+)', INPUT_STR).group(0)\n\nprint(f\"{result[0]}+{result[1]}={result[2]}\")\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123123123\") == \"123123123\"\nassert solution(\"123\") == \"123\"\nassert solution(\"123+\") == \"123+\"\nassert solution(\"123=\") == \"123=\"\nassert solution(\"12=3\") == \"12=3\"\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12345') == '1+2+3+4+5'\n\"\"\""
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12345168\") == \"123+45=168\"\nassert solution(\"099\") == \"0+9=9\"\nassert solution(\"199100\") == \"1+99=100\"\nassert solution(\"123123123456456456579579579\") == \"123123123+456456456=579579579\"\n\nprint(\"Test pass.\")\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123123123456456456579579579') == '123123123+456456456=579579579'\nassert solution('199100') == '1+99=100'\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12345168\") == \"123+45=168\"\n\"\"\"\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123123123456456456579579579') == '123123123456456456+579579579'\nassert solution('199100') == '1+99=100'\nassert solution('12345168') == '123+45=168'\nassert solution('099') == '0+9=9'\nassert solution('123123123456456456579579579') == '123123123456456456+579579579'"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12345168\") == \"123+45=168\"\nassert solution(\"099\") == \"0+9=9\"\nassert solution(\"199100\") == \"1+99=100\"\nassert solution(\"123123123456456456579579579\") == \"123123123+456456456=579579579\"\n\nprint(solution(\"12345168\"))\nprint(solution(\"099\"))\nprint(solution(\"199100\"))\nprint(solution(\"123123123456456456579579579\"))"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123123123456456456579579579') == '123123123456456456+579579579'\nassert solution('099') == '0+9=9'\nassert solution('199100') == '1+99=100'\nassert solution('123123123456456456579579579') == '123123123456456456+579579579'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '4'\nassert solution('1234567890') == '0'\nassert solution('0') == '0'\nassert solution('0123456789') == '0'\n\"\"\"\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"124356983594583453458888889\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"124356983594583453458888889\") == \"4\"\nassert solution(\"\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\n\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '4'\n\"\"\""
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '4'\nassert solution('123') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"124356983594583453458888889\") == \"4\"\nassert solution(\"12\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '4'\nassert solution('124356983594583453458888889') == '0'\nassert solution('9999999999999999999999999999999999') == '0'\n\"\"\"\n\nfrom math import pow\nfrom sys import stdin\n"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8 3\n1 2 3 3 2 1 2 2''') == '4'"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\n1 2 3 3 2 1 2 2\") == \"4\"\n\"\"\"\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n1 2 3 3 2 1 2 2\") == \"4\"\n\"\"\"\nimport sys\n\nassert len(sys.argv) == 3\nn, k = map(int, sys.argv[1:])\nroad = list(map(int, sys.stdin.readline().strip().split()))\n\nvisited = {}\n\nfor house in range(n):\n    if house == 0:\n        visited[house] = 1\n    else:\n        visited[house] = visited.get(house - 1, 0) + 1\n\nans = 0\ni = 0\nj = 0\nwhile j < n:\n    if visited.get(j, 0) < k:\n        if visited.get(j, 0) == 1:\n            ans += 1\n        j += 1\n    else:\n        if i!= j:\n            ans += 1\n        visited[i] -= 1\n        i += 1\n\nprint(ans)\n"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\\n1 2 3 3 2 1 2 2\") == 4\n\nassert solution(\"8 3\\n1 2 2 1 2 2 2 1\") == 2\n\n\n\n\"\"\"\n\nfrom typing import List, Tuple, Dict, Set\n"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_stdin_1) == test_stdin_2\n"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n1 2 1') == 2\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 2 1\\n\") == \"4\"\nassert solution(\"8 3\\n1 2 3 3 2 1 2 2\\n\") == \"4\"\nassert solution(\"8 3\\n1 2 3 4 2 1 2 2\\n\") == \"5\"\n"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\\n1 2 3 3 2 1 2 2\") == 4\n\"\"\"\n\nimport math\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\n1 2 3 3 2 1 2 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 3 2 1 2 2') == '4'\n"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\\n\") == \"YES\"\nassert solution(\"1 1 3\\n2 3 4\\n2\\n\") == \"YES\"\nassert solution(\"1 0 0\\n1 0 0\\n1\\n\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n1\\n\") == \"NO\"\n\nprint(\"All tests passed.\")\n\n\n-----Solution-----\n\na, b, c = map(int, stdin.readline().split())\nn = int(stdin.readline())\n"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1\\n1 1 1\\n4') == 'YES'\nassert solution('1 1 3\\n2 3 4\\n2') == 'YES'\nassert solution('1 0 0\\n1 0 0\\n1') == 'NO'\nassert solution('1 0 0\\n1 0 0\\n1\\n') == 'NO'\nassert solution('1 1 1\\n1 1 3\\n4') == 'NO'\n"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\\n\") == 'YES'\nassert solution(\"1 1 3\\n2 3 4\\n2\\n\") == 'YES'\nassert solution(\"1 0 0\\n1 0 0\\n1\\n\") == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\") == 'YES'\n\nassert solution(\"1 1 3\\n2 3 4\\n2\") == 'YES'\n\nassert solution(\"1 1 3\\n2 3 4\\n1\") == 'NO'\n\nassert solution(\"1 0 0\\n1 0 0\\n1\") == 'YES'\n\nassert solution(\"1 1 1\\n2 3 4\\n2\") == 'NO'"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\\n\") == \"YES\"\nassert solution(\"1 1 3\\n2 3 4\\n2\\n\") == \"YES\"\nassert solution(\"1 0 0\\n1 0 0\\n1\\n\") == \"NO\"\n"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1\\n1 1 1\\n4\\n') == 'YES'\nassert solution('1 1 3\\n2 3 4\\n2\\n') == 'YES'\nassert solution('1 0 0\\n1 0 0\\n1\\n') == 'NO'\nassert solution('1 1 1\\n1 1 1\\n5\\n') == 'NO'\nassert solution('1 2 3\\n0 0 0\\n0\\n') == 'NO'\n"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\\n\") == \"YES\"\nassert solution(\"1 1 3\\n2 3 4\\n2\\n\") == \"YES\"\nassert solution(\"1 0 0\\n1 0 0\\n1\\n\") == \"NO\"\n\"\"\"\n\nimport collections\nimport math\n\na, b, c = map(int, input().split())\nd, e, f = map(int, input().split())\ng, h, i = map(int, input().split())\nj, k, l = map(int, input().split())\nn = int(input())\n\ndic = collections.defaultdict(list)\ndic[1] = [a, b, c]\ndic[2] = [d, e, f]\ndic[3] = [g, h, i]\ndic[4] = [j, k, l]\n\nq = collections.deque([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36], [37, 38, 39], [40, 41, 42], [43, 44, 45], [46, 47, 48], [49, 50, 51], [52, 53, 54], [55, 56, 57], [58, 59, 60], [61, 62, 63], [64, 65, 66], [67, 68, 69], [70, 71, 72], [73, 74, 75], [76, 77, 78], [79, 80, 81], [82, 83, 84], [85, 86, 87], [88, 89, 90], [91, 92, 93], [94, 95, 96], [97, 98, 99], [100, 101, 102], [103, 104, 105], [106, 107, 108], [109, 110, 111], [112, 113, 114], [115, 116, 117], [118, 119, 120], [121, 122, 123], [124, 125, 126], [127, 128, 129], [130, 131, 132], [133, 134, 135], [136, 137, 138], [139, 140, 141], [142, 143, 144], [145, 146, 147], [148, 149, 150], [151, 152, 153], [154, 155, 156], [157, 158, 159], [160, 161, 162], [163, 164, 165], [166, 167, 168], [169, 170, 171], [172, 173, 174], [175, 176, 177], [178, 179, 180], [181, 182, 183], [184, 185, 186], [187, 188, 189], [190, 191, 192], [193, 194, 195], [196, 197, 198], [199, 200, 201], [202, 203, 204], [205, 206, 207], [208, 209, 210], [211, 212, 213], [214, 215, 216], [217, 218, 219], [220, 221, 222], [223, 224, 225], [226, 227, 228], [229, 230, 231], [232, 233, 234], [235, 236, 237], [238, 239, 240], [241, 242, 243], [244, 245, 246], [247, 248, 249], [250, 251, 252], [253, 254, 255], [256, 257, 258], [259, 260, 261], [262, 263, 264], [265, 266, 267], [268, 269, 270], [271, 272, 273], [274, 275, 276], [277, 278, 279], [280, 281, 282], [283, 284, 285], [286, 287, 288], [289, 290, 291], [292, 293, 294], [295, 296, 297], [298, 299, 300], [301, 302, 303], [304, 305, 306], [307, 308, 309], [310, 311, 312], [313, 314, 315], [316, 317, 318], [319, 320, 321], [322, 323, 324], [325, 326, 327], [328, 329, 330], [331, 332, 333], [334, 335, 336], [337, 338, 339], [340, 341, 342], [343, 344, 345], [346, 347, 348], [349, 350, 351], [352, 353, 354], [355, 356, 357], [358, 359, 360], [361, 362, 363], [364, 365, 366], [367, 368, 369], [370, 371, 372], [373, 374, 375], [376, 377, 378], [379, 380, 381], [382, 383, 384], [385, 386, 387], [388, 389, 390], [391, 392, 393], [394, 395, 396], [397, 398, 399], [400, 401, 402], [403, 404, 405], [406, 407, 408], [409, 410, 411], [412, 413, 414], [415, 416, 417], [418, 419, 420], [421, 422, 423], [424, 425, 426], [427, 428, 429], [430, 431, 432], [433, 434, 435], [436, 437, 438], [439, 440, 441], [442, 443, 444], [445, 446, 447], [448, 449, 450], [451, 452, 453], [454, 455, 456], [457, 458, 459], [460, 461, 462], [463, 464, 465], [466, 467, 468], [469, 470, 471], [472, 473, 474], [475, 476, 477], [478, 479, 480], [481, 482, 483], [484, 485, 486], [487, 488, 489], [490, 491, 492], [493, 494, 495], [496, 497, 498], [499, 500, 501], [502, 503, 504], [505, 506, 507], [508, 509, 510], [511, 512, 513], [514, 515, 516], [517, 518, 519], [520, 521, 522], [523, 524, 525], [526, 527, 528], [529, 530, 531], [532, 533, 534], [535, 536, 537], [538, 539, 540], [541, 542, 543], [544, 545, 546], [547, 548, 549], [550, 551, 552], [553, 554, 555], [556, 557, 558], [559, 560, 561], [562, 563, 564], [565, 566, 567], [568, 569,"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 1\\n1 1 1\\n4\\n') == 'YES'\nassert solution('1 1 3\\n2 3 4\\n2\\n') == 'YES'\nassert solution('1 0 0\\n1 0 0\\n1\\n') == 'NO'\nassert solution('1 1 1\\n1 1 3\\n4\\n') == 'NO'\nassert solution('1 1 1\\n1 1 3\\n4\\n') == 'NO'\n"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\") == \"YES\"\nassert solution(\"1 1 3\\n2 3 4\\n2\") == \"YES\"\nassert solution(\"1 1 3\\n4\\n2\") == \"NO\"\n"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\\n\") == \"YES\"\nassert solution(\"1 1 3\\n2 3 4\\n2\\n\") == \"YES\"\nassert solution(\"1 1 1\\n1 1 1\\n4\\n\") == \"NO\"\n\nprint(\"Successfully passed all test cases!\")"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == 0\nassert solution(\"case\") == 2\nassert solution(\"test\") == 4\nassert solution(\"code\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == 0\nassert solution(\"case\") == 2\nassert solution(\"code\") == 4\nassert solution(\"forc\") == 2\nassert solution(\"esco\") == 4\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == 0\nassert solution('case') == 2\nassert solution('test') == 4\nassert solution('code') == 0\nassert solution('forc') == 2\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == 0\n\nassert solution(\"case\") == 2\n\nassert solution(\"test\") == 2\n\nassert solution(\"code\") == 4\n\nassert solution(\"forc\") == 4\n\n\n\"\"\"\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == '0'\nassert solution('case') == '2'\nassert solution('code') == '4'\nassert solution('forc') == '2'\nassert solution('esco') == '4'\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == 0\nassert solution(\"case\") == 2\nassert solution(\"test\") == 4\nassert solution(\"code\") == 4\nassert solution(\"forc\") == 2\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == 0\n\nassert solution(\"case\") == 2\n\nassert solution(\"test\") == 4\n\nassert solution(\"code\") == 4\n\nassert solution(\"codeforces\") == 0"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"0\"\nassert solution(\"case\") == \"2\"\nassert solution(\"test\") == \"4\"\nassert solution(\"code\") == \"4\"\nassert solution(\"forc\") == \"2\"\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('codeforces') == 0\nassert solution('case') == 2\nassert solution('test') == 4\nassert solution('code') == 4"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('codeforces') == '0'\nassert solution('care') == '2'\nassert solution('test') == '2'\nassert solution('code') == '4'\n\"\"\"\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"DLUU\") == 0\nassert solution(\"ULURRD\") == 1\nassert solution(\"URLLDR\") == 2\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('URLLDR') == 2\nassert solution('DLUU') == 0\nassert solution('RLRLRLR') == 12\n\n\"\"\"\n\nimport math\n\nclass Solution:\n    def __init__(self, input: str, output: str):\n        self.__input = input\n        self.__output = output\n\n    def solution(self) -> int:\n        count = 0\n\n        for i in range(len(self.__input)):\n            if self.__input[i] == self.__output[i]:\n                count += 1\n\n        return math.floor(count / 2)\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ULDR\") == 2\nassert solution(\"RLDL\") == 0\nassert solution(\"LL\") == 1\n\"\"\"\n\n\nclass Solution:\n    def solution(self, l):\n        x = []\n        for i in range(0, len(l)):\n            if l[i] == 'U':\n                x.append(0)\n            elif l[i] == 'R':\n                x.append(1)\n            elif l[i] == 'D':\n                x.append(2)\n            else:\n                x.append(3)\n        l = x\n        \n        count = 0\n        l.sort()\n        for i in range(0, len(l)):\n            if i == 0:\n                if l[i] == 0:\n                    count += 1\n            else:\n                if l[i] == l[i - 1]:\n                    count += 1\n                else:\n                    count += 1\n                    l[i] = 0\n        \n        count = count + l.count(0)\n        \n        return count\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('LLUURDDLLU') == '6'\nassert solution('LLRU') == '0'\nassert solution('LLURURURDLLDRRUURRDLLRU') == '14'\n\"\"\"\nimport collections"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"URLLDR\") == 2\nassert solution(\"DLUU\") == 0\nassert solution(\"RLRLRLR\") == 12\n\"\"\"\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"URLLDR\") == 2\nassert solution(\"DLUU\") == 0\nassert solution(\"RLRLRLR\") == 12\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('URLLDR') == 2\nassert solution('DLUU') == 0\nassert solution('RLRLRLR') == 12\nassert solution('RLLLRRU') == 6\n\n\"\"\"\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('URLLDR') == 2\nassert solution('DLUU') == 0\nassert solution('RLRLRLR') == 12\n\"\"\""
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"URLLDR\") == 2\nassert solution(\"DLUU\") == 0\nassert solution(\"RLRLRLR\") == 12\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ULURRDLLU\") == \"3\"\nassert solution(\"DLRUULR\") == \"0\"\n\"\"\"\nfrom collections import defaultdict\nfrom collections import deque\n\ns = input()\n\nresult = defaultdict(int)\nstart = deque([s[0]])\nfor i in range(1, len(s)):\n    start.append(s[i])\n    if len(start) == 2:\n        if start[0] == \"L\" and start[1] == \"R\" or start[0] == \"R\" and start[1] == \"L\":\n            result[\"\".join(start)] += 1\n            start.clear()\n\nprint(result[\"LLL\"] + result[\"RRR\"])\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(123) == '1'\nassert solution(33) == '1'\nassert solution(3) == '0'\nassert solution(65) == '1'\nassert solution(1) == '0'\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('129') == 1\n\"\"\"\nimport re\n\na = input().strip()\nprint(1 if re.search(r'(?:^|\\d)\\d(?:$|\\d)', a) else 0)\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('129') == '1'\n\"\"\"\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('129') == 1\n\"\"\"\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('129') == 1\n\"\"\"\na = input()\nprint(a.count('9'))\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"129\") == 1\n\n\"\"\""
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '1'\nassert solution('7') == '2'\nassert solution('11') == '3'\nassert solution('14') == '3'\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"129\") == 1\n\"\"\"\n\nimport os\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"129\") == \"1\"\n\"\"\"\n\nfrom string import ascii_lowercase\nfrom typing import Dict, List\n\nn = int(input())\n\nalphabet = {\n    \" \": \"0\",\n    \"a\": \"1\",\n    \"b\": \"2\",\n    \"c\": \"3\",\n    \"d\": \"4\",\n    \"e\": \"5\",\n    \"f\": \"6\",\n    \"g\": \"7\",\n    \"h\": \"8\",\n    \"i\": \"9\",\n    \"j\": \"10\",\n    \"k\": \"11\",\n    \"l\": \"12\",\n    \"m\": \"13\",\n    \"n\": \"14\",\n    \"o\": \"15\",\n    \"p\": \"16\",\n    \"q\": \"17\",\n    \"r\": \"18\",\n    \"s\": \"19\",\n    \"t\": \"20\",\n    \"u\": \"21\",\n    \"v\": \"22\",\n    \"w\": \"23\",\n    \"x\": \"24\",\n    \"y\": \"25\",\n    \"z\": \"26\",\n}\n\nshift = 0\ndigit_to_num = \"\"\n\nwhile True:\n    shift += 1\n    num_of_letters = 0\n    num_of_digits = 0\n    for i in range(n):\n        if i % shift == 0:\n            num_of_digits += 1\n        num_of_letters += 1\n    if num_of_digits!= 0:\n        break\n    for char in ascii_lowercase:\n        num_of_letters -= alphabet[char]\n        if num_of_letters < 0:\n            digit_to_num += str(abs(num_of_letters))\n            break"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"129\") == 1\nassert solution(\"128\") == 0\n\"\"\"\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n\") == \"0 1 0\"\n\nassert solution(\"3\\n\") == \"-1\"\n\nassert solution(\"4\\n\") == \"0 1 3 2 0\"\n\nassert solution(\"16\\n\") == \"0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0\""
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"0 1 0\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"4\") == \"0 1 3 2 0\"\nassert solution(\"16\") == \"0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0\"\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '0 1 0'\nassert solution('3\\n') == '-1'\nassert solution('4\\n') == '0 1 3 2 0'\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0 1 0\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"4\") == \"0 1 3 2 0\"\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"0 1 0\"\nassert solution(\"3\") == \"-1\"\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '-1'\nassert solution('0 1') == '0 1'\nassert solution('0 3 1 2 0') == '0 1 3 2 0'\nassert solution('0 1 3 2 0') == '0 1 3 2 0'\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n') == '0 1 3 2 0'\nassert solution('16\\n') == '0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '0 1 0'\nassert solution('3') == '-1'\nassert solution('4') == '0 1 3 2 0'\nassert solution('16') == '0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2\\n1\") == \"0 1 3 2 0\"\nassert solution(\"5\\n2\\n3\") == \"0 1 2 4 3\"\nassert solution(\"9\\n2\\n3\") == \"0 1 5 4 2 6 3 7 8\"\nassert solution(\"16\\n2\\n3\") == \"0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0\"\nassert solution(\"100\\n2\\n3\") == \"0 1 6 4 2 9 7 3 11 10 8 5 12 14 13 17 16 15 18 17 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"0 1 0\"\n\"\"\""
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2 1\\n'\n) == '5'\n\nassert solution(\n    '3 2\\n'\n) == '332748127'\n\nassert solution(\n    '14 9\\n'\n) == '969862773'\n"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1') == '5'\nassert solution('3 2') == '332748127'\nassert solution('14 9') == '969862773'\n\n\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"3 2\") == \"332748127\"\nassert solution(\"14 9\") == \"969862773\"\n\n\n\"\"\"\n"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"3 2\") == \"332748127\"\n"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"3 2\") == \"332748127\"\nassert solution(\"14 9\") == \"969862773\"\n\n\"\"\"\nimport itertools"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1') == '5'\nassert solution('3 2') == '332748127'\nassert solution('14 9') == '969862773'\n\"\"\""
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"5\"\n\nassert solution(\"3 2\") == \"332748127\"\n"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"3 2\") == \"332748127\"\nassert solution(\"14 9\") == \"969862773\"\n\nassert solution(\"2 1\") == \"5\"\nassert solution(\"3 2\") == \"332748127\"\n"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n') == '5'\nassert solution('3 2\\n') == '332748127'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"3 2\") == \"332748127\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Callable, List, Tuple\n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2 3 2\\n') == '2 1\\n1 2 1 2 \nassert solution('4 2\\n1 3 2 2 2 1\\n') == '2 1\\n1 2 1 2 2 1 \nassert solution('7 3\\n1 3 2 2 2 2 1\\n') == '2 1\\n1 3 3 2 2 2 1 \nassert solution('4 4\\n1000000000 100 7 1000000000\\n') == '1 4\\n1 2 3 4 \n'''"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2 1\"\n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"2 1\\n1 2 1 2\"\n\n\"\"\"\n\nimport sys\nimport heapq\n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"2 1\"\nassert solution(\"7 3\\n1 3 2 2 2 2 1\\n\") == \"2 1\"\nassert solution(\"4 4\\n1000000000 100 7 1000000000\\n\") == \"1 4\"\n\n\n\n\n------\nCodeWars Solution\n\nfrom collections import Counter\nimport numpy as np"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"2 1\"\nassert solution(\"4 3\\n1 3 2 2 2 1\\n\") == \"2 1\"\nassert solution(\"7 3\\n1 3 2 2 2 2 1\\n\") == \"2 1\"\n\"\"\""
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"2 1\"\n\nassert solution(\"7 3\\n1 3 2 2 2 2 1\\n\") == \"2 1\"\nassert solution(\"4 4\\n1000000000 100 7 1000000000\\n\") == \"1 4\""
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"2 1\"\nassert solution(\"7 3\\n1 3 2 2 2 2 1\\n\") == \"2 1\"\nassert solution(\"4 4\\n1000000000 100 7 1000000000\\n\") == \"1 4\"\n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"2 1\"\nassert solution(\"4 3\\n1 3 2 2 2 1\\n\") == \"2 1\"\nassert solution(\"4 4\\n1000000000 100 7 1000000000\\n\") == \"1 4\"\nassert solution(\"7 3\\n1 3 2 2 2 2 1\\n\") == \"2 1\"\nassert solution(\"4 5\\n1 5 2 2 2 2 1\\n\") == \"2 1\"\n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == '2 1'\n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 2\n1 2 3 2\n''') == '2 1'\n\nassert solution('''7 3\n1 3 2 2 2 2 1\n''') == '2 1'\n\nassert solution('''4 4\n1000000000 100 7 1000000000\n''') == '1 4'\n\nassert solution('''4 4\n1 2 2 3 4\n''') == '1 2 3 4'\n\nassert solution('''4 4\n1 2 2 2 2 1\n''') == '1 2 1 2 1'\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10\\n-5\\n-5\") == \"5\\n-2\\n-3\"\nassert solution(\"7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\") == \"-3\\n-15\\n0\\n2\\n12\\n-15\\n19\""
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n10\\n-5\\n-5') == '5\\n-2\\n-3'\n\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(10000000)\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1\\n1\\n0\\n0\\n0\\n0\") == \"1\\n0\\n0\\n0\\n0\\n0\"\nassert solution(\"6\\n0\\n0\\n0\\n0\\n0\") == \"0\\n0\\n0\\n0\\n0\\n0\"\nassert solution(\"5\\n1\\n1\\n1\\n1\\n1\") == \"0\\n0\\n0\\n0\\n0\\n0\"\nassert solution(\"4\\n0\\n0\\n0\\n0\") == \"0\\n0\\n0\\n0\"\nassert solution(\"6\\n0\\n0\\n0\\n0\\n0\") == \"0\\n0\\n0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('4\\n-6\\n-1') == '0\\n2'\nassert solution('3\\n10\\n-5\\n-5') == '5\\n-2'\nassert solution('5\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38') == '-3\\n-15\\n0\\n2'\nassert solution('7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38') == '-3\\n-15\\n0\\n2'\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '3\\n10\\n-5\\n-5'\n    ) == '5\\n-2\\n-3'\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\\n2\\n1\\n0\\n\") == \"1\\n1\\n1\\n0\"\nassert solution(\"8\\n-3\\n-5\\n-3\\n-5\\n0\\n3\\n24\\n-29\\n38\\n\") == \"-3\\n-15\\n0\\n2\\n12\\n-15\\n19\"\nassert solution(\"4\\n3\\n2\\n1\\n0\\n\") == \"1\\n1\\n1\\n0\"\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n10\n-5\n-5\n\n\"\"\") == \"5\\n-2\\n-3\"\n\nassert solution(\"\"\"\n7\n-7\n-29\n0\n3\n24\n-29\n38\n\n\"\"\") == \"-3\\n-15\\n0\\n2\\n12\\n-15\\n19\""
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n-5\\n-5\") == \"5\\n-2\\n-3\"\nassert solution(\"7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\") == \"-3\\n-15\\n0\\n2\\n12\\n-15\\n19\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n10\\n-5\\n-5\") == \"5\\n-2\\n-3\"\nassert solution(\"7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\") == \"-3\\n-15\\n0\\n2\\n12\\n-15\\n19\"\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\") == '-3\\n-15\\n0\\n2\\n12\\n-15\\n19'\nassert solution(\"7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\") == '-3\\n-15\\n0\\n2\\n12\\n-15\\n19'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == 1\nassert solution('111') == 2\nassert solution('1101101') == 4\n\nprint('Success')\n"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('10') == '0'\nassert solution('111') == '2'\nassert solution('1101101') == '4'\n\"\"\"\n"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"111\") == \"2\"\nassert solution(\"1101101\") == \"4\"\n\"\"\""
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"111\") == \"2\"\nassert solution(\"1101101\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"111\") == \"2\"\nassert solution(\"1101101\") == \"4\"\n"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"111\") == \"2\"\nassert solution(\"1101101\") == \"4\""
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '1'\nassert solution('111') == '2'\nassert solution('1101101') == '4'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == 1\nassert solution('11') == 2\nassert solution('111') == 4\nassert solution('1101101') == 4\n\"\"\""
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == 2\nassert solution('111') == 2\nassert solution('1010') == 4\n\"\"\""
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == 1\nassert solution('111') == 2\nassert solution('1101101') == 4"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('3 2 3 1 1') == 'NO'\n'''\n\nimport math\n\nn = int(input())\na = list(map(int, input().split(' ')))\n\ncheck = 1\n\nfor i in range(0, len(a)):\n    if a[i] % n!= 0:\n        check = 0"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'NO'\nassert solution('1\\n1') == 'YES'\nassert solution('1\\n1\\n1') == 'YES'\nassert solution('1\\n1\\n1\\n1') == 'NO'\n"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 2\") == 'YES'\nassert solution(\"6 1 2 3 4 5 6\") == 'NO'\n"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 2 2\") == \"YES\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"NO\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\n\n\n-----Explanation-----\n\"\"\"\n"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2 2') == \"YES\"\nassert solution('6 1 2 3 4 5 6') == \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 2 2') == 'YES'\nassert solution('6\\n1 2 3 4 5 6') == 'NO'\n\n\nimport sys\nsys.setrecursionlimit(10**7)"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 2 2\\n\") == \"YES\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import Counter"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n1 1 2 2\n''') == \"YES\"\nassert solution('''6\n1 2 3 4 5 6\n''') == \"NO\"\n\n'''\nclass TestSolution(unittest.TestCase):\n    def test_one(self):\n        pass\n'''"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 2\") == \"YES\"\nassert solution(\"6 1 2 3 4 5 6\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"13\") == \"NO\"\nassert solution(\"24\") == \"NO\"\nassert solution(\"46\") == \"YES\"\nassert solution(\"99\") == \"YES\"\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"13\") == \"NO\"\nassert solution(\"24\") == \"NO\"\nassert solution(\"46\") == \"YES\"\n\"\"\""
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\nassert solution('13') == 'NO'\nassert solution('24') == 'NO'\nassert solution('46') == 'YES'"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5) == \"YES\"\nassert solution(13) == \"NO\"\nassert solution(24) == \"NO\"\nassert solution(46) == \"YES\"\n\"\"\"\n\na = int(input())\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"13\") == \"NO\"\nassert solution(\"24\") == \"NO\"\nassert solution(\"46\") == \"YES\"\n\"\"\""
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == 'YES'\nassert solution('13') == 'NO'\nassert solution('24') == 'NO'\nassert solution('46') == 'YES'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"13\") == \"NO\"\nassert solution(\"24\") == \"NO\"\nassert solution(\"46\") == \"YES\"\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"13\") == \"NO\"\nassert solution(\"24\") == \"NO\"\nassert solution(\"46\") == \"YES\""
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1\\n\") == \"15\"\nassert solution(\"5\\n2 2 2 2\\n\") == \"7\"\n"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"15\"\nassert solution(\"5\\n1 2 4 5 8\") == \"7\"\n"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 4 5 8\n''') == '7'\n\nassert solution('''4\n1 1 1 1\n''') == '2'\n\nassert solution('''3\n1 1 1\n''') == '1'\n\nassert solution('''2\n2 2\n''') == '0'"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"15\"\nassert solution(\"5\\n1 2 4 5 8\") == \"7\"\n\nprint(\"Success\")"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 1 1\") == \"15\"\nassert solution(\"5 2 4 5 8\") == \"7\"\n"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1 1\\n') == '15\\n'\nassert solution('5\\n1 2 4 5 8\\n') == '7\\n'\nassert solution('4\\n2 2 2 2\\n') == '7\\n'"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 1\") == '15'\n\nassert solution(\"5\\n1 2 4 5 8\") == '7'"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"15\"\nassert solution(\"5\\n1 2 4 5 8\") == \"7\""
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 1 1') == '15\\n'\nassert solution('5\\n2 2 2 2') == '7\\n'\n\"\"\"\n"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 1 1\\n\") == \"15\"\nassert solution(\"4 2 2 2\\n\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"0\\n2 1 4\"\nassert solution(\"2\") == \"1\\n1 1\"\n"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 4\") == \"0\"\nassert solution(\"2\\n1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 1 4\") == \"0\\n2 1 4\"\nassert solution(\"2\\n1 1\") == \"1\\n1 1\"\n"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\\n1 4\\n2 3\") == \"0\\n2 1 4\\n\"\nassert solution(\"2\\n1 1\") == \"1\\n1 1\\n\"\nassert solution(\"3\\n1\\n2\") == \"1\\n2\\n\"\n\n\"\"\""
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 1 4\") == \"0\\n2 1 4\"\nassert solution(\"2\\n1 1\") == \"1\\n1 1\"\n\"\"\""
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 1 4\") == \"0\\n2 1 4\"\nassert solution(\"2\\n1 1\") == \"1\\n1 1\""
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2') == '0\\n1\\n1\\n'\n\nassert solution('3\\n2 1 4') == '1\\n1 1\\n'\n\nassert solution('3\\n2 2 3') == '1\\n1 1\\n'\n\nassert solution('4\\n2 1 4 3') == '1\\n2 3\\n'\n\nassert solution('4\\n2 1 3 4') == '1\\n1 2\\n'"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 4\") == \"0\\n2 1 4\"\nassert solution(\"2\") == \"1\\n1 1\"\nassert solution(\"6\\n2 5 1 7 9 10\") == \"1\\n5\"\nassert solution(\"1\\n1\") == \"0\\n1\"\nassert solution(\"7\\n3 6 10 12 5 16 8\") == \"0\\n3 6 10 12 5\"\n"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1 4\\n\") == \"0\\n2 1 4\"\nassert solution(\"2\\n1 1\") == \"1\\n1 1\"\n"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 1 4\") == \"0\\n2 1 4\"\nassert solution(\"2\\n1 1\") == \"1\\n1 1\"\nassert solution(\"6\\n2 3 1 2 3 1\") == \"3\\n2 1 1 3 1\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"1\\n1\"\nassert solution(\"10\\n1 1 2 2 3 3 3 3 3 3 4 4 4 4 4 4\") == \"0\\n1 1 2 2 4 4 4 4 4 4\"\n\nprint(\"Successfully solved!\")\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".#.#..#.\") == \"Yes\"\nassert solution(\".#.#..#.\") == \"Yes\"\nassert solution(\".#.#..#.\") == \"Yes\"\n\nassert solution(\".#.#..#.\") == \"No\"\nassert solution(\".#.#..#.\") == \"No\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('.#.#..#.') == 'Yes'\nassert solution('.#.#..#.') == 'Yes'\nassert solution('.#.#..#.') == 'Yes'\nassert solution('.#.#..#.') == 'Yes'\nassert solution('.#.#..#.') == 'Yes'\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('.#.#..#.') == 'Yes'\nassert solution('.....#..') == 'Yes'\nassert solution('.#.#..#.') == 'Yes'\nassert solution('.....#..') == 'Yes'\nassert solution('....#.#.') == 'Yes'\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\") == 'Yes'\nassert solution(\"5 9\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\") == \"Yes\"\nassert solution(\"5 9\\n........#\\n#........\\n..##.#...\\n.......#.\\n....#.#.#\") == \"No\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..') == 'Yes'\nassert solution('5 9\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\\n') == 'No'\nassert solution('5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 8\\n.#.#..#.') == \"Yes\"\nassert solution('5 5\\n..#..') == \"No\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\\n\") == \"Yes\"\nassert solution(\"5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\") == \"No\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\\n') == 'Yes'\nassert solution('5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\\n') == 'No'\n\"\"\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..') == \"Yes\"\nassert solution('5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..') == \"No\"\n"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\""
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') == '3'\n\"\"\"\n"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == 3\n\"\"\"\n\nn = int(input())\nk = 2\n\nwhile n > 1:\n    if n % k == 0:\n        n /= k\n    else:\n        n -= k\n\nprint(int(n))"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(6) == 3\nassert solution(10) == 4\n\"\"\""
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\"\"\"\n\nn = int(input())\n\nk = 2\n\nwhile n > 1:\n    if n % k == 0:\n        n = n // k\n    else:\n        n -= k\n    k += 1\n\nprint(k - 2)\n"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == '3'\nassert solution('1') == '1'\n\n-----\n6\n3\n\n2\n5\n6\n\n-----\n6\n1\n\n2\n5\n6\n\n-----\n6\n1\n\n2\n5\n6\n\n-----\n6\n1\n\n2\n5\n6\n\n-----\n1\n\n2\n5\n6\n\n-----\n3\n\n2\n5\n6\n\n-----\n3\n\n2\n5\n6\n\n-----\n4\n\n2\n5\n6\n\n-----\n5\n\n2\n5\n6\n\n-----\n6\n\n2\n5\n6\n\n-----\n6\n\n2\n5\n6\n\n3\n\n2\n5\n6\n\n5\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6\n\n2\n5\n6\n\n6"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"6\"\nassert solution(\"7\") == \"3\"\nassert solution(\"8\") == \"7\"\n"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(6) == 3\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6') == 3\n\"\"\"\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2\\n3 4\\n3 4\\n2 1') == '0'\nassert solution('4 4\\n1 2\\n3 4\\n3 4\\n2 1') == '0'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nH, W = map(int, stdin.readline().split())\n\nr, b = [], []\nfor _ in range(H):\n    a, b = map(int, stdin.readline().split())\n    r.append(a)\n    b.append(b)\n\nr.insert(0, 0)\nb.insert(0, 0)\n\nr = [sum(r[:i + 1]) for i in range(H + 1)]\nb = [sum(b[:i + 1]) for i in range(H + 1)]\n\nans = 0\nfor i in range(H):\n    for j in range(W):\n        ans = max(ans, abs(r[i] - b[j]))\n\nprint(ans)\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 2\\n3 4\\n3 4\\n2 1') == '0'\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\\n3 4\\n2 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\\n3 4\\n2 1\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 2\n1 2\n3 4\n3 4\n2 1''') == '0'\n\nassert solution('''4 5\n6 7\n8 9\n10 11\n12 13''') == '1'\n\nassert solution('''5 5\n14 3\n3 9\n1 3\n6 1\n6 8\n9 1\n7 10\n9 10\n4 10''') == '1'\n\nassert solution('''4 3\n7 4\n2 1\n3 7\n2 2\n1 1\n3 2\n5 2\n4 3\n4 6\n8 4\n2 5\n8 5\n6 1\n4 1\n1 2\n3 5\n3 7\n2 6\n5 3\n5 2\n4 5\n4 4\n4 3\n8 6\n7 6\n5 6\n6 5\n2 3\n7 1\n1 2\n1 2\n1 1\n5 2\n5 2\n7 6\n6 5\n2 7\n5 7\n2 3\n5 3\n5 2\n2 5\n6 6\n3 2\n5 6\n4 3\n3 3\n4 3\n2 3\n4 5\n5 1\n6 5\n6 1\n2 2\n7 2\n6 6\n2 5\n4 1\n1 4\n1 5\n1 6\n4 1\n6 2\n1 2\n1 2\n3 2\n1 5\n2 2\n4 6\n1 6\n3 1\n1 2\n5 5\n4 6\n6 5\n3 6\n3 1\n4 3\n5 2\n2 1\n3 2\n4 6\n4 1\n1 4\n2 1\n6 6\n6 6\n4 1\n5 4\n2 2\n4 2\n5 5\n5 4\n5 4\n1 2\n3 4\n1 4\n5 5\n5 1\n6 4\n5 1\n5 4\n6 2\n6 4\n6 6\n6 6\n3 1\n5 1\n4 5\n2 2\n6 1\n6 1\n2 4\n3 4\n5 5\n3 1\n4 4\n1 4\n3 5\n5 3\n1 4\n2 4\n2 3\n1 1\n1 3\n5 3\n5 6\n6 3\n5 3\n6 4\n2 2\n5 2\n6 3\n1 1\n3 5\n3 7\n1 3\n2 1\n2 2\n3 5\n1 4\n6 2\n4 3\n4 1\n2 2\n3 5\n3 7\n1 4\n2 4\n2 6\n4 5\n4 2\n3 2\n4 6\n1 5\n2 2\n4 1\n3 3\n3 1\n4 3\n3 6\n3 7\n1 4\n4 2\n1 6\n6 5\n2 6\n3 2\n1 4\n5 1\n2 6\n2 3\n5 1\n5 4\n5 2\n4 3\n6 5\n4 6\n3 5\n6 4\n6 1\n3 4\n2 5\n3 3\n6 1\n6 4\n2 4\n4 5\n5 4\n6 2\n5 2\n6 5\n6 6\n6 5\n3 6\n6 5\n4 1\n6 3\n6 5\n4 4\n1 5\n2 5\n1 6\n2 6\n6 6\n5 3\n3 2\n4 5\n1 4\n6 2\n3 2\n3 3\n4 6\n5 5\n5 2\n5 3\n4 2\n4 1\n4 1\n1 1\n3 5\n5 3\n1 5\n2 1\n3 4\n5 2\n5 5\n6 5\n2 5\n3 4\n5 2\n5 4\n5 6\n3 3\n1 1\n2 2\n2 2\n5 4\n5 4\n1 5\n1 6\n2 4\n4 4\n6 5\n5 1\n4 5\n2 4\n5 6\n6 5\n6 5\n1 3\n2 2\n1 5\n3 4\n5 1\n2 5\n3 1\n2 6\n6 3\n6 2\n5 6\n5 5\n4 1\n3 4\n2 5\n5 2\n5 2\n1 5\n1 3\n1 5\n2 6\n6 1\n5 1\n5 1\n3 1\n2 2\n6 4\n2 4\n3 1\n3 6\n1 1\n2 4\n3 6\n1 2\n3 2\n2 1\n3 1\n2 2\n1 2\n1 2\n1 1\n6 6\n5 4\n1 1\n2 6\n1 4\n3 6\n3 6\n4 1\n3 5\n4 6\n6 6\n3 1\n4 5\n4 2\n5 4\n3 5\n2 3\n2 5\n1 1\n1 2\n2 1\n1 2\n1 1\n2 6\n2 5\n2 1\n1 4\n6 2\n3 2\n4 3\n5 5\n3 1\n6 6\n5 5\n3 4\n2 5\n5 2\n6 4\n5 3\n1 2\n1 2\n6 3\n3 5\n6 1\n2 6\n3 3\n4 1\n1 1\n1 6\n3 5\n2 1\n1 1\n2 1\n3 3\n3 1\n4 6\n6 1\n5 1\n5 6\n6 5\n4 1\n3 1\n6 1\n2 2\n4 5\n2 5\n5 1\n5 4\n5 2\n2 4\n5 5\n2 1\n1 1\n6 1\n1 1\n2 4\n3 6\n5 3\n6 6\n2 3\n4 1\n1 1\n2 3\n2 5\n4 5\n2 5\n4 2\n5 3\n5 6\n5 4\n1 1\n1 1\n6 2\n4 4\n2 1\n1 2\n2 5\n3 2\n3 4\n3 1\n2 1\n5 5\n6 5\n2 6\n6 1\n5 2\n3 3\n2 1\n5 2\n2 3\n5 1\n4 4\n4 4\n1 4\n5 1\n3 1\n4 5\n5 6\n1 3\n1 6\n1 3\n6 3\n6 3\n5 6\n3 1\n5 4\n6 5\n1 5\n4 1\n6 2\n6 5\n6 3\n6 2\n5 1\n3 2\n2 3\n3 5\n1 2\n1 6\n3 1\n2 2\n6 3\n1 1\n4 1\n5 2\n4 5\n5 4\n5 1\n6 1\n5 6\n3 1\n5 6\n3 6\n2 4\n4 3\n5 3\n4 4\n1 1\n2 4\n2 5\n3 4\n6 3\n1 6\n5 5\n4 6\n4 3\n5 3\n4 5\n3 5\n5 4\n4 1\n5 4\n1 1\n2 2\n4 1\n6 1\n3 1\n3 6\n1 1\n6 2\n3 6\n5 1\n6 4\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 2\n1 2\n3 4\n3 4\n2 1''') == '0'\nassert solution('''3 3\n1 1\n1 1\n1 1''') == '1'\nassert solution('''5 5\n1 1\n1 1\n1 1\n1 1\n1 1''') == '3'"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\\n3 4\\n2 1\") == \"0\"\n\"\"\"\nfrom copy import deepcopy\nimport unittest\n\nH, W = map(int, input().split())\ngrid = []\nfor _ in range(H):\n    grid.append([int(n) for n in input().split()])\n    \nred = 0\nblue = 0\n\nfor i in range(H):\n    for j in range(W):\n        red += grid[i][j]\n        blue += grid[i][j]\n        \n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\\n3 4\\n2 1\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\\n3 4\\n2 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\\n1 6 3\") == \"14\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\\n1 6 3\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 7\\n1 6 3') == '14'\n\n\"\"\""
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7\\n1 6 3') == '14'\n\"\"\"\n\nimport math\nimport sys\n\n_, k = map(int, sys.stdin.readline().strip().split())\nnumbers = list(map(int, sys.stdin.readline().strip().split()))\n\nmax_value = 0\nfor i in range(1, 1 << len(numbers)):\n    result = 0\n    for j in range(len(numbers)):\n        if i & 1 << j:\n            result ^= numbers[j]\n    if result <= k:\n        max_value = max(max_value, result)\n\nprint(max_value)"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\\n1 6 3\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == \"14\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == \"14\"\n\"\"\""
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7\") == '14'\n"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4\\n1 2\\n3 4') == '5'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7\\n1 6 3') == '14'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\\n\") == 12\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 13\\n3 2 7\\n4 8 9\\n1 6 5') == '12'\nassert solution('4 8\\n4 8\\n1 2 3\\n4 8\\n1 2 3') == '0'\n\"\"\"\n\nn, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\nsigma = [[0 for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    sigma[i][i] = 1\n\ncnt = 1\nfor i in range(n):\n    for j in range(i + 1, n):\n        if sum(a[i]) + sum(a[j]) <= k:\n            for x in range(n):\n                for y in range(n):\n                    if x == i or x == j or y == i or y == j:\n                        sigma[x][y] += a[x][y]\n                        sigma[x][y] %= 998244353\n                    else:\n                        sigma[x][y] -= a[x][y]\n                        if sum(a[x]) + sum(a[y]) <= k:\n                            sigma[x][y] += a[x][y]\n                            sigma[x][y] %= 998244353\n                        else:\n                            sigma[x][y] -= a[x][y]\n            cnt += 1\n            cnt %= 998244353\nprint(cnt)\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\"\n\"\"\""
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 13\\n3 2 7\\n4 8 9\\n1 6 5') == '12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == 12\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import reduce\nimport sys\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == 12\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 13\\n3 2 7\\n4 8 9\\n1 6 5') == '12'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n3 1 2 3 4\\n4 1 5 6 4\\n4 5 4 2 3\\n1 2 4 2 2\\n4 3 6 8 6\\n1 4 8 3 7\") == \"36\"\n"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\") == 8\n"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3\") == \"8\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\n\"\"\"\n\nfrom itertools import combinations\nimport re\n\nn, m, k = map(int, re.findall(r'\\d+', stdin))\n\ncosts = {\n    ((i, j), (i, j + 1)): abs(i - j) + abs(i - j + 1),\n    ((i, j), (i + 1, j)): abs(i - j) + abs(i + 1 - j),\n    ((i, j), (i + 1, j + 1)): abs(i - j) + abs(i + 1 - j) + 1\n}\n\nnums = [tuple(map(int, re.findall(r'\\d+', stdin))) for _ in range(k)]"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3\") == \"25\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\") == \"8\"\n"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == '8'\nassert solution('2 2 1') == '4'\nassert solution('2 1 2') == '6'\nassert solution('3 4 5') == '20'\nassert solution('5 4 3') == '10'\n"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 2') == '8'\nprint('assert OK')\nassert solution('1 1 2') == '2'\nprint('assert OK')\nassert solution('1 1 1') == '0'\nprint('"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 2\\n') == '8'\n\"\"\""
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == \"8\"\n\"\"\"\n\n\nfrom itertools import product\nimport functools\n"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('LRLRRL') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"LRLRRL\") == 3\nassert solution(\"LLLLRRLLR\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"LRLRRL\") == 3\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\nS = sys.stdin.readline().strip()"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('LRLRRL') == 3\n\"\"\""
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"LLLLRLRRLRR\") == 3\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('LRLRRL') == 3\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('LRLRRL') == 3\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRLRRL\") == 3\nassert solution(\"RLRRLL\") == 2\n\"\"\"\n\nimport math\n\nn, k = map(int, input().strip().split())\ns = input().strip()\n\nprint(math.floor(n / 2) - math.ceil(k / 2))"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"LRLRRL\") == 3\nassert solution(\"LRLRLR\") == 1\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def max_happy_people(self, people: List[str], k: int) -> int:\n        cur_happy = 0\n        for idx, person in enumerate(people):\n            if person == \"L\":\n                cur_happy -= 1\n            else:\n                cur_happy += 1\n            if idx > 0 and people[idx - 1] == \"L\" and people[idx] == \"R\":\n                cur_happy += 1\n            if idx < len(people) - 1 and people[idx + 1] == \"R\" and people[idx] == \"L\":\n                cur_happy += 1\n            if idx < len(people) - 1 and people[idx + 1] == \"L\" and people[idx] == \"R\":\n                cur_happy -= 1\n            if idx > 0 and people[idx - 1] == \"R\" and people[idx] == \"L\":\n                cur_happy -= 1\n            if cur_happy > 0:\n                k -= 1\n            if k == 0:\n                return idx + 1\n        return -1"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"LRLRRL\") == 3\n\"\"\"\n"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7\") == \"2 5\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n5 7''') == '2 5', 'Test 1 Failed'\n\nassert solution('''3\n10 2 8''') == '1 8', 'Test 2 Failed'\n\nassert solution('''6\n3 8 2 9 4 14''') == '6 9', 'Test 3 Failed'\n\nassert solution('''3\n10 2 8''') == '1 8', 'Test 4 Failed'\n\nassert solution('''6\n3 8 2 9 4 14''') == '6 9', 'Test 5 Failed'"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n\") == \"2 5\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7\\n\") == \"2 5\"\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7\") == \"2 5\"\nassert solution(\"3 8 2 9 4 14\") == \"1 8\"\n"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"2 5\"\nassert solution(\"1 2 3 4\") == \"1 4\"\nassert solution(\"5 7\") == \"2 5\"\nassert solution(\"2 5 8\") == \"2 5\"\nassert solution(\"5 2 4 3 9\") == \"1 9\"\n"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7\\n') == '2 5'\n\"\"\""
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7\") == \"2 5\"\n\"\"\"\n"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7\") == \"2 5\"\n\"\"\"\nimport sys"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7\") == \"2 5\"\n\"\"\""
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4 2\n1 4\"\"\") == 2\nassert solution(\"\"\"3 1\n1\"\"\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n1\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n1\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n1\\n\") == \"1\\n\"\nassert solution(\"4 2\\n1 4\\n\") == \"2\\n\"\nassert solution(\"11 2\\n4 8\\n\") == \"6720\\n\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == '1'\nassert solution('4 2') == '2'\nassert solution('11 2') == '6720'"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1\\n\") == \"1\"\nassert solution(\"4 2\\n1 4\\n\") == \"2\"\nassert solution(\"11 2\\n4 8\\n\") == \"6720\"\nprint(\"Well done!\")\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1') == '1'\nassert solution('11 2') == '6720'\n\n\"\"\"\n\nfrom itertools import combinations\nfrom math import factorial"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1\") == \"1\"\n\nassert solution(\"4 2\\n1 4\") == \"2\"\n\nassert solution(\"11 2\\n4 8\") == \"6720\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n1\\n') == 1\n\"\"\""
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"11 2\") == \"6720\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\nalex\nivan\nroman\nivan''') == 'ivan\\nroman\\nalex'\n\nassert solution('''8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina''') == 'alina\\nmaria\\nekaterina\\ndarya'\n\nassert solution('''2\na\nb''') == 'b\\na'\n\n\nassert solution('''2\na\na''') == 'a\\nb'\n\nassert solution('''4\nalex\nivan\nroman\nivan''') == 'ivan\\nroman\\nalex'"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nalex\\nivan\\nroman\\nivan\") == \"alex\\nroman\\nivan\"\nassert solution(\"8\\nalina\\nmaria\\nekaterina\\ndarya\\nekaterina\\nmaria\\nalina\") == \"alina\\maria\\nekaterina\\ndarya\"\n"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\nalex\nivan\nroman\nivan''') == 'ivan\\nroman\\nalex\\n'\nassert solution('''8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina''') == 'alina\\nmaria\\nekaterina\\ndarya\\n'\n"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nalex\\nivan\\nroman\\nivan\\n\") == \"alex\\nroman\\nivan\\n\"\n"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nalex\\nivan\\nroman\\nivan\\n') == 'ivan\\nroman\\nalex'\nassert solution('8\\nalina\\nmaria\\nekaterina\\ndarya\\nekaterina\\nmaria\\nalina\\n') == 'alina\\nmaria\\nekaterina\\ndarya'"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nalex\\nivan\\nroman\\nivan') == 'ivan\\nroman\\nalex'\n\nassert solution('8\\nalina\\nmaria\\nekaterina\\ndarya\\nekaterina\\nmaria\\nalina') == 'alina\\nmaria\\nekaterina\\ndarya'\n\nassert solution('8\\nalina\\nmaria\\nekaterina\\ndarya\\n') == 'alina\\nmaria\\nekaterina\\ndarya'\n\nassert solution('8\\n') == ''\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('alex\\nivan\\nroman\\nivan') == 'ivan\\nroman\\nalex'\nassert solution('alina\\nmaria\\nekaterina\\ndarya\\nekaterina\\nmaria\\nalina') == 'alina\\nmaria\\nekaterina\\ndarya'\nassert solution('alex\\nivan\\nroman\\nivan') == 'ivan\\nroman\\nalex'\nassert solution('alina\\nmaria\\nekaterina\\ndarya\\nekaterina\\nmaria\\nalina') == 'alina\\nmaria\\nekaterina\\ndarya'\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"alex\\nivan\\nroman\\nivan\") == \"ivan\\nroman\\nalex\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nalex\\nivan\\nroman\\nivan\\n\") == \"alex\\nroman\\nivan\\n\"\nassert solution(\"8\\nalina\\nmaria\\nekaterina\\ndarya\\nekaterina\\nmaria\\nalina\\n\") == \"alina\\nmaria\\nekaterina\\ndarya\\n\"\n"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\nalex\nivan\nroman\nivan''') == 'ivan\\nroman\\nalex'\nassert solution('''8\nalina\nmaria\nekaterina\ndarya\ndarya\nekaterina\nmaria\nalina''') == 'alina\\nmaria\\nekaterina\\ndarya'\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\") == 3\n\"\"\""
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\") == 3\nassert solution(\"5 3\\n1 3 2 3 3\\n2 2 2 2\") == 5\nassert solution(\"5 3\\n3 5 4 6\\n2 3 4\") == 2\nassert solution(\"5 5\\n1 1 1 1 1\\n1 1 1 1\") == 5\nassert solution(\"2 2\\n1 2 2\") == 1\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\\n\") == 3\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\") == \"3\"\nassert solution(\"4 1\\n1 5 6\\n1 3\\n3\") == \"3\"\nassert solution(\"3 2\\n1 5 6\\n1 3\\n3\") == \"2\"\nassert solution(\"3 2\\n1 5 6\\n1 3\\n3\\n4\") == \"2\"\nassert solution(\"3 2\\n1 5 6\\n1 3\\n3\\n4\\n5\") == \"2\"\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\") == 3\n\"\"\"\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\") == 3\nassert solution(\"2 2\\n-1 -2\\n1 1\") == 2\nassert solution(\"2 0\\n1 2\\n2\") == 1\nassert solution(\"5 5\\n0 2 -3 4\\n2 2\") == 4\nassert solution(\"3 10\\n0 -2 -1 3\\n1 5\") == 2\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n1 5 6\\n1 3\\n3\\n') == 3\n\n\"\"\"\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\\n\") == \"3\"\nassert solution(\"2 4\\n1 2\\n2 2\\n3\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\\n\") == 3\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3 1\\n1 5 6\\n1 3\\n3\\n') == '3'\n"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('e4') == '8'\n\"\"\"\n\n\"\"\"\nknight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"e4\") == 8\n\"\"\"\n\nfrom functools import lru_cache\n\n@lru_cache(maxsize = None)\n"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a1') == 1\nassert solution('b2') == 2\nassert solution('a8') == 8\nassert solution('h1') == 1\nassert solution('a2') == 2\n\"\"\""
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"e4\") == 8\n\"\"\""
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"e4\") == 8\n\"\"\"\n\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('e4') == 8\n"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"e4\") == 8\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"e4\") == 8\n\"\"\"\n"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a1\") == 1\nassert solution(\"c6\") == 7\n\"\"\"\nimport math\n\nstdin = input()\n\ncol = stdin[0]\nrow = int(stdin[1])\n\nprint(math.floor((ord(col) - ord('a')) / 2 + 1) + row)\n"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"e4\") == 8\n\"\"\""
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(\"examples/0.txt\", \"r\")) == '3\\n1 3\\n1 2\\n2 6\\n2 4\\n7 4\\n3 5'\n\"\"\"\n\nimport sys\nfrom heapq import heappop, heappush\n"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 3\\n2 3 1\") == \"7\\n1 3\\n2 1\\n2 6\\n2 4\\n7 4\\n3 5\"\nassert solution(\"14 5 6\\n4 4 2 2 1\") == \"14\\n3 1\\n1 4\\n11 6\\n1 2\\n10 13\\n6 10\\n10 12\\n14 12\\n8 4\\n5 1\\n3 7\\n2 6\\n5 9\"\nassert solution(\"7 2 2\\n2 3 1\") == \"7\\n1 3\\n1 6\\n1 5\\n2 6\\n2 4\\n2 5\\n7 4\\n3 5\"\n\"\"\""
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 3\\n2 3 1\") == \"7\"\nassert solution(\"14 5 6\\n4 4 2 2 1\") == \"14\"\nassert solution(\"3 1 1\\n2\") == \"3\"\n\"\"\"\n\nn, t, k = map(int, input().split())\n\na = list(map(int, input().split()))\nc = 0\nr = []\nfor i in range(n):\n    if a[i] == 1:\n        r.append(i + 1)\n    else:\n        c += 1\n"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3') == '4'\nassert solution('3\\n1\\n3') == '4'\nassert solution('3\\n2\\n1') == '4'\nassert solution('7\\n5\\n3') == '4'\n"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 3\\n2 3 1') == '7'\nassert solution('14 5 6\\n4 4 2 2 1') == '14'\nassert solution('3 1 1\\n2') == '-1'\nassert solution('14 5 6\\n4 4 2 2 1\\n1 3\\n2 1\\n2 6\\n2 4\\n7 4\\n3 5') == '14'\n\"\"\"\n"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 3\\n2 3 1\\n\") == \"7\\n1 3\\n2 1\\n2 6\\n2 4\\n7 4\\n3 5\""
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution([\"5 4 2\", \"1 3\", \"1 2\"]) == \"5\\n1 3\\n1 2\"\nassert solution([\"3 3 1\", \"1 2\", \"1 3\"]) == \"3\\n1 2\\n1 3\"\nassert solution([\"1 1 1\", \"2\", \"2\"]) == \"1\\n2\"\nassert solution([\"3 2 3\", \"1 2\", \"1 3\"]) == \"3\\n1 2\\n1 3\"\nassert solution([\"4 2 1\", \"1 2\", \"1 3\"]) == \"4\\n1 2\\n1 3\"\n"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 3\\n2 3 1\") == \"7\"\nassert solution(\"14 5 6\\n4 4 2 2 1\") == \"14\"\n\n\"\"\"\n\nn, t, k = list(map(int, stdin.split()))\nroads = list(map(int, stdin.split()))\n\ndeadends = set()\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if roads[i] + roads[j] == n - 1:\n            deadends.add(i + 1)\n            deadends.add(j + 1)\n\nprint(n - len(deadends))\n\nfor i in range(n - 1):\n    if roads[i] + 1 not in deadends:\n        print(i + 1, roads[i] + 1)\n"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n7 3 3\n2 3 1\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n7 3 3\n2 3 1\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n14 5 6\n4 4 2 2 1\n\"\"\") == \"14\"\n\nassert solution(\"\"\"\n14 5 6\n4 4 2 2 1\n\"\"\") == \"14\"\n\nassert solution(\"\"\"\n14 5 6\n4 4 2 2 1\n\"\"\") == \"14\""
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 3\\n2 3 1\\n\") == \"7\\n1 3\\n2 1\\n2 6\\n2 4\\n7 4\\n3 5\\n\"\n\"\"\"\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n05:43') == '23:59'\nassert solution('4\\n22:00\\n03:21\\n16:03\\n09:59') == '06:37'"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n05:43\") == \"23:59\"\n\nassert solution(\"4\\n22:00\\n03:21\\n16:03\\n09:59\") == \"06:37\"\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"04:59\") == \"21:59\"\nassert solution(\"12:15\") == \"01:45\"\nassert solution(\"23:59\") == \"22:59\"\nassert solution(\"23:57\") == \"22:37\"\n\nassert solution(\"16:07\") == \"07:03\"\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n22:00\\n03:21\\n16:03\\n09:59\") == \"06:37\"\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '23:59'\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0:11:11\\n0:11:12\\n0:11:13\") == \"11:11\"\n\"\"\"\n\nimport datetime\nimport sys\n\nn = int(input())\ntime = []\nres = datetime.datetime.strptime(\"0:00:00\", \"%H:%M:%S\")\n\nfor i in range(n):\n    time.append(datetime.datetime.strptime(input(), \"%H:%M\"))\n\ntime.sort()\n\nfor i in range(len(time) - 1):\n    tmp = res.replace(hour=time[i].hour, minute=time[i].minute, second=0)\n    tmp1 = tmp + datetime.timedelta(hours=24, minutes=1)\n    tmp2 = tmp + datetime.timedelta(hours=24, minutes=1)\n    tmp3 = tmp + datetime.timedelta(hours=24, minutes=1)\n    if time[i + 1] - tmp1 < tmp1 - time[i]:\n        tmp = tmp1\n    elif time[i + 1] - tmp2 < tmp2 - time[i]:\n        tmp = tmp2\n    else:\n        tmp = tmp3\n    res = tmp\n\nprint(res.time().strftime(\"%H:%M\"))\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n05:43\") == \"23:59\"\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n22:00\\n03:21\\n16:03\\n09:59') == '23:59'\n\nassert solution('4\\n22:00\\n03:21\\n16:03\\n09:59') == '06:37'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"05:43\") == \"23:59\"\n\"\"\"\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n05:43\") == \"23:59\"\n\n\"\"\"\n\nfrom datetime import datetime"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == \"1\"\nassert solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == \"0\"\n\"\"\""
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n4 5\\n2 6\\n3 2\\n1 2\\n2 4') == '1'\nassert solution('4\\n2 4\\n4 1\\n3 4') == '0'"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 4\\n2 6\\n3 2\\n1 2\\n2 4\") == '1'\nassert solution(\"4 1\\n3 4\\n\") == '0'\nassert solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == '1'\n"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == '1'\nassert solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == '0'"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"4 5\n2 6\n3 2\n1 2\n2 4\"\"\"\n) == \"1\"\n\nassert solution(\n    \"\"\"4 5\n2 6\n3 2\n1 2\n2 4\"\"\"\n) == \"0\"\n\nassert solution(\n    \"\"\"4 5\n1 5\n2 6\n3 2\n1 2\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == '1'\nassert solution(\"4\\n2 4\\n4 1\\n3 4\") == '0'"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == '1'\nassert solution(\"4 4\\n3 2\\n1 2\\n2 4\") == '0'\n"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == \"1\"\n"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == \"1\"\nassert solution(\"4 5\\n3 2\\n1 2\\n2 4\") == \"0\"\nassert solution(\"6 5\\n2 6\\n4 1\\n3 2\\n1 2\\n5 4\") == \"3\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6\n4 5\n2 6\n3 2\n1 2\n2 4\n''') == '1'\nassert solution('''\n4\n2 4\n4 1\n3 4\n''') == '0'\nassert solution('''\n4\n2 4\n4 1\n3 4\n''') == '0'\nassert solution('''\n5\n4 5\n2 6\n3 2\n1 2\n2 4\n''') == '1'\nassert solution('''\n6\n1 2\n2 4\n4 1\n3 4\n''') == '0'\n"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '9'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == '9'\nassert solution('3') == '1'\n\"\"\"\nimport math"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"9\"\n\"\"\"\nimport math"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n\") == \"9\"\nassert solution(\"3\\n\") == \"1\"\n"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '9'\nassert solution('3') == '1'\nassert solution('5432') == '5'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"9\"\nassert solution(\"3\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == '9'\nassert solution('3') == '1'\n"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"9\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"7\") == \"12\"\nassert solution(\"9\") == \"8\"\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2\\n0100100') == '2'\nassert solution('5 1\\n01010') == '2'\nassert solution('3 2\\n000') == '1'\n\"\"\""
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0100100\") == \"2\"\nassert solution(\"01010\") == \"1\"\nassert solution(\"000\") == \"1\"\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 3\\n1 0 0 0 1 1 0 0 1') == '2'\nassert solution('10 3\\n0 1 1 0 1 0 0 0 1 1') == '3'\nassert solution('10 3\\n0 1 0 0 1 1 1 1 1 0') == '1'\nassert solution('10 3\\n1 0 0 0 0 1 1 1 1 1') == '1'\nassert solution('10 3\\n1 1 1 0 0 0 1 1 1 1') == '2'\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1011110') == '3'\nassert solution('11101010') == '1'\nassert solution('11100010') == '1'\nassert solution('10111101110') == '2'\nassert solution('101111011010') == '1'\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"7 2\\n0100100\"\n) == \"2\"\nassert solution(\n    \"5 1\\n01010\"\n) == \"2\"\nassert solution(\n    \"3 2\\n000\"\n) == \"1\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0111010') == '1'\nassert solution('101110') == '2'\nassert solution('11101010') == '2'\nassert solution('111101010') == '4'\nassert solution('10111101') == '4'\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 2\\n0100100') == '2'\nassert solution('5 1\\n01010') == '2'\nassert solution('3 2\\n000') == '1'\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10111010\") == \"4\"\nassert solution(\"11010\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0100100\") == \"2\"\nassert solution(\"10001\") == \"1\"\nassert solution(\"11100110\") == \"4\"\nassert solution(\"10011101\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"011010\") == '2'\nassert solution(\"101010\") == '0'\nassert solution(\"101110\") == '1'\n\"\"\""
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3\\n1 1 1 0 1 0') == '3'\nassert solution('5 2\\n0 0 0 1 0') == '1'\nassert solution('5 2\\n0 0 0 0 1') == '0'"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\\n1 1 1 0 1 0\") == \"3\"\nassert solution(\"5 2\\n0 0 0 1 0\") == \"1\"\n\n-----\n\"\"\"\n\nn,a = map(int, input().split())\n\ninp = map(int, input().split())\n\nd = [0]*(n+1)\n\nfor i,x in enumerate(inp):\n    d[i+1] = x\n\nprint(d)\n\nans = 0\nfor i in range(n+1):\n    if d[a] > 0:\n        ans+=1\n        d[a] -= 1\n    a = (a+1)%(n+1)\nprint(ans)\n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6 3\n1 1 1 0 1 0\n''') == '3'\n\nassert solution('''5 2\n0 0 0 1 0\n''') == '1'\n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n6 3\n1 1 1 0 1 0\n''') == '3'\nassert solution('''\n5 2\n0 0 0 1 0\n''') == '1'\n\nprint('Success')"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3\\n1 1 1 0 1 0') == 3\nassert solution('5 2\\n0 0 0 1 0') == 1\nassert solution('7 4\\n0 0 1 0 0') == 0\nassert solution('8 7\\n0 0 0 0 0 1 1 1') == 1\nassert solution('6 5\\n0 1 0 1 0 0 1 1') == 2\n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\\n1 1 1 0 1 0\") == 3\n\"\"\"\n\nn, a = [int(x) for x in stdin.split()]\nt = [int(x) for x in stdin.split('\\n')[1].split()]\n\ncnt = 0\nfor i in range(n):\n    cnt += t[i]\n    if i!= a:\n        cnt -= t[i]\n\nprint(cnt)\n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\\n1 1 1 0 1 0\") == 3\nassert solution(\"5 2\\n0 0 0 1 0\") == 1\n\"\"\"\n\n\nfrom sys import stdin"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3\\n1 1 1 0 1 0') == '3'\nassert solution('5 2\\n0 0 0 1 0') == '1'\n\n\"\"\""
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3\\n1 1 1 0 1 0') == '3'\nassert solution('5 2\\n0 0 0 1 0') == '1'\n\"\"\"\n\n\n\nfrom collections import Counter"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 1 1 0 1 0\") == 3\nassert solution(\"5 2 0 0 1 0\") == 1\n\"\"\""
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == 1\nassert solution('8 7 6 5 4 3 2 1') == 8\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 7 6 5 4 3 2 1') == 8\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1 1''') == '1'\nassert solution('''8\n8 7 6 5 4 3 2 1''') == '8'\nassert solution('''24\n1 8 1 2 8 2 3 8 3 4 8 4 5 8 5 6 8 6 7 8 7 8 8 8''') == '17'\n\n'''\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b\u00a0a1,\u00a0a2,..., an.\n\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u0434\u0435\u043b\u044f\u0449\u0438\u0445\u0441\u044f \u043d\u0430 d.\n\u0414\u0435\u043b\u0438\u0442\u0435\u043b\u044c d \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u043e\u043b\u0435\u0439. \u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f d \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u00a0!=.\n\nSample Input:\n\n8\n20 12 16 6 8 12 24 18\nSample Output:\n\n3\n'''\n\n'''\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b\u00a0a1,\u00a0a2,..., an.\n\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n'''"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == 1\nassert solution(\"8 7 6 5 4 3 2 1\") == 8\nassert solution(\"8 7 6 5 4 3 2 1\") == 8\nassert solution(\"8 7 6 5 4 3 2 1\") == 8\nassert solution(\"8 7 6 5 4 3 2 1\") == 8\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == \"8\"\nassert solution(\"24\\n1 8 1 2 8 2 3 8 3 4 8 4 5 8 5 6 8 6 7 8 7 8 8\") == \"17\"\nprint(\"Passed all cases!\")\n\n\"\"\""
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 1') == '1'\nassert solution('8\\n8 7 6 5 4 3 2 1') == '8'\nassert solution('24\\n1 8 1 2 8 2 3 8 3 4 8 4 5 8 5 6 8 6 7 8 7 8 8') == '17'\n\n\nsolution:\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == \"8\"\nassert solution(\"24\\n1 8 1 2 8 2 3 8 3 4 8 4 5 8 5 6 8 6 7 8 7 8 8\") == \"17\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"8 7 6 5 4 3 2 1\") == \"8\"\nassert solution(\"8 7 6 5 4 3 2 1\") == \"8\"\nassert solution(\"8 7 6 5 4 3 2 1\") == \"8\"\nassert solution(\"8 7 6 5 4 3 2 1\") == \"8\"\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 2') == 2\nassert solution('1 1 1') == 1\nassert solution('1 2 1') == 1\nassert solution('1 2 2') == 2\nassert solution('1 1 2 2') == 2\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6 6 7\") == \"3\"\nassert solution(\"7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\") == \"8\"\nassert solution(\"4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\") == \"4\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 3 2\\n1 2 0\") == \"YES\\n1 3 2 0\"\nassert solution(\"3\\n1 3\\n3 2\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\nn = int(input())\nfirst, second = [int(i) for i in input().split()], [int(i) for i in input().split()]\nset1, set2 = set(), set()\n\nfor i in range(n - 1):\n    if first[i] | first[i + 1] == second[i] and first[i] & first[i + 1] == second[i + 1]:\n        set1.add(first[i])\n        set2.add(first[i + 1])\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 3 2\\n1 2 0\") == \"YES\\n1 3 2 0\"\nassert solution(\"3\\n1 3\\n3 2\") == \"NO\"\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 3 2\\n1 2 0\") == 'YES\\n1 3 2 0'\nassert solution(\"4\\n3 3 2\\n1 2 1\") == 'NO'\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\\n1 2 0\") == \"YES\\n1 3 2 0\"\nassert solution(\"3\\n1 3\") == \"NO\"\n\n\n-----Explanation-----\n \nGiven the following arrays:\n\n$a = [3, 3, 2]$\n$b = [1, 2, 0]$\n\nFirst, we can combine the two arrays into one array:\n\n$[3, 3, 2, 1, 2, 0]$\n\nNow, it is easy to check whether this array satisfies the conditions.\n\nFirst, let's consider the elements $t_1$, $t_2$, and $t_3$.\n\n$a_0 = 3$ and $t_1 = 3$ and $t_2 = 3$, so $a_0 | t_1 = (01_2) | (11_2) = (11_2) = 3 = a_1$.\n\n$a_1 = 3$ and $t_2 = 3$ and $t_3 = 2$, so $a_1 | t_2 = (11_2) | (10_2) = (11_2) = 3 = a_2$.\n\n$a_2 = 2$ and $t_3 = 2$, so $a_2 | t_3 = (10_2) | (00_2) = (10_2) = 2 = a_3$.\n\nAll elements of the array satisfy the conditions, so the answer is \"YES\".\n\nThere are no such sequences in the second example, so the answer is \"NO\".\n\"\"\""
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2\") == 'YES\\n1 3 2 0'\nassert solution(\"1 3\") == 'NO'\n\"\"\""
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('1 3 0') == 'YES'\nassert solution('1 3 2') == 'NO'\n\n\"\"\""
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\\n1 2 0\") == 'YES\\n1 3 2 0'\nassert solution(\"4 4 4\\n1 3 2 3 0\") == 'NO'\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 3 2\\n1 2 0\") == 'YES\\n1 3 2 0'\n\"\"\"\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2\\n1 2 0\") == \"YES\\n1 3 2 0\"\nassert solution(\"3 3 2\\n1 2 0\") == \"NO\"\n\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 1\\n1 1\") == \"YES\"\nassert solution(\"4\\n0 1\\n1 1\\n0 1\\n0 2\") == \"NO\"\n\n-----Challenge-----\n\nThe testing system stores a maximum of 10^5 solutions, so the input is guaranteed to be a valid solution.\n\"\"\""
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1\\n1 1\\n0 1\\n0 2\\n\") == \"YES\"\nassert solution(\"4\\n0 1\\n1 1\\n0 2\\n0 2\\n\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"0 1\\n1 1\") == \"YES\"\nassert solution(\"0 1\\n0 1\") == \"NO\"\nassert solution(\"0 1\\n0 1\\n0 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n0 1\n1 1\n0 1\n0 2''') == 'YES'\nassert solution('''4\n0 1\n1 1\n0 1\n0 2''') == 'YES'\nassert solution('''4\n0 1\n0 1\n0 2\n0 3''') == 'YES'\nassert solution('''4\n0 1\n0 1\n0 2\n0 3''') == 'NO'\nassert solution('''4\n0 1\n1 1\n0 1\n0 2''') == 'NO'\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1\\n1 1\\n0 1\\n0 2\") == \"YES\"\nassert solution(\"0 1\\n1 1\\n0 1\\n0 2\") == \"YES\"\nassert solution(\"0 1\\n0 1\\n0 1\\n0 2\") == \"NO\"\nassert solution(\"0 1\\n1 2\\n0 1\\n0 1\") == \"YES\"\nassert solution(\"0 1\\n1 2\\n0 1\\n0 2\") == \"NO\"\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == 'NO'\nassert solution('0 1\\n1 2\\n0 1\\n0 2\\n') == 'YES'\nassert solution('0 1\\n1 2\\n0 1\\n0 2\\n') == 'NO'\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'YES'\nassert solution('\\n1\\n1\\n') == 'NO'\nassert solution('\\n0\\n2\\n1\\n') == 'YES'\nassert solution('\\n1\\n2\\n0\\n') == 'YES'\nassert solution('\\n1\\n0\\n1\\n') == 'NO'\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1\\n1 1\\n0 1\\n0 2\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n0 1\n1 1\n0 1\n0 2''') == 'YES'\nassert solution('''2\n0 1\n1 1''') == 'YES'\nassert solution('''4\n0 1\n1 1\n0 1\n0 2''') == 'NO'\nassert solution('''2\n0 1\n1 1''') == 'NO'\nassert solution('''4\n0 1\n1 2\n1 1\n0 1\n0 2\n''') == 'NO'\n\nprint('Success')\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n0 1\\n1 1') == 'YES'\nassert solution('2\\n0 1\\n1 2') == 'NO'"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\n2 3 5\n''') == '5'\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2 3 4 5 6') == '5'\nassert solution('3\\n1 2 1 3 4 5') == '4'\nassert solution('4\\n1 2 3 4 5 6') == '1'\nassert solution('5\\n1 2 3 4 5 6 7 8 9 10 11 12') == '2'\nassert solution('6\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18') == '3'\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 1 1 1 1\") == \"2\"\nassert solution(\"4 1 1 1 1\") == \"0\"\nassert solution(\"5 2 2 2 2\") == \"3\"\nassert solution(\"10 1 1 1 1 1 1 1 1 1\") == \"9\"\nassert solution(\"8 1 1 1 1 1 1 1 1\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2 3 4 5 6\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2 3 4 5 6\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2 3 4 5 6\") == \"5\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2 3 4 5 6') == '5'\n\"\"\"\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2 3 4 5 6\") == \"5\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2 3 4 5 6\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbba\") == 1\nassert solution(\"abbab\") == 0\nassert solution(\"abbbabbba\") == 2\nassert solution(\"aabbba\") == 1\nassert solution(\"aabbbbba\") == 2\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbba\") == 1\nassert solution(\"abbab\") == 0\n\"\"\""
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\\n\"\n    \"abbba\"\n    ) == \"1\"\nassert solution(\n    \"4\\n\"\n    \"abbab\"\n    ) == \"0\"\nassert solution(\n    \"4\\n\"\n    \"aabba\"\n    ) == \"0\"\nassert solution(\n    \"4\\n\"\n    \"abaaa\"\n    ) == \"0\"\nassert solution(\n    \"4\\n\"\n    \"abbbb\"\n    ) == \"0\"\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbbb\") == 1\nassert solution(\"abbba\") == 0\nassert solution(\"abbab\") == 0\n\nprint(solution(\"abbba\"))\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nabbba\") == \"1\"\nassert solution(\"4\\nabbab\") == \"0\"\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbba\") == \"1\"\nassert solution(\"abbab\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nabbba') == '1'\nassert solution('4\\nabbab') == '0'\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nabbba\") == \"1\"\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nabbba') == '1'\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\n\nlst = deque(list(input()))\n\ndrunk = 0\n\nwhile len(lst) > 0:\n    lst.rotate(-1)\n    drunk += 1\n    if lst[0] == 'a':\n        lst.rotate(-1)\n    else:\n        lst.rotate(1)\n\nprint(drunk)\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\nabbba''') == '1'\nassert solution('''4\nabbab''') == '0'\nassert solution('''4\nabbba\n''') == '1'\nassert solution('''4\nabbbb\n''') == '0'\nassert solution('''4\nbbaa\n''') == '2'\n"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == '0'\nassert solution(\"3\\n1 10\\n0 10\\n10 10\") == '2'"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n1 10\n0 10\n10 10\"\"\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0\\n', 'Test 1'\nassert solution('3\\n1 10\\n0 10\\n10 10') == '2\\n', 'Test 2'\nassert solution('3\\n10 10\\n10 10\\n10 10') == '0\\n', 'Test 3'\n\nprint('All tests passed.')\n\n\"\"\"\n"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\\n0 10\\n10 10\") == \"2\"\n\"\"\"\n\nn = int(stdin.readline())\nrooms = []\nfor _ in range(n):\n    rooms.append(tuple(map(int, stdin.readline().split(\" \"))))\nrooms.sort()\ni, j = 0, 1\nwhile j < n and rooms[i][0] <= rooms[j][1]:\n    i += 1\n    j += 1\nprint(j - i - 1)\n"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n0 10\\n10 10\") == \"0\"\nassert solution(\"1 10\\n0 10\\n10 10\") == \"1\""
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\") == 2\n\n\"\"\""
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == '2'\nassert solution(\"3\\n1 10\\n0 10\\n10 10\") == '2'\nassert solution(\"3\\n10 1\\n0 10\\n10 1\") == '1'"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 10\\n0 10\\n10 10\") == 2\n\n---"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 10\\n0 10\\n10 10') == 2\n\"\"\"\n\nn = int(input())\ncount = 0\nfor i in range(n):\n    a, b = map(int, input().split())\n    if a == b:\n        count += 1\nprint(n - count)\n"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n2 2\\n3 3') == 0\nassert solution('1 10\\n0 10\\n10 10') == 2\nprint(solution(stdin))\n"
    },
    {
        "number": 1109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 2 1 1 2 1') == '1'\nassert solution('1 2 1 1 2 1 1 2 1') == '0'\nassert solution('1 2 1 1 2 1 1 2 1') == '3'\nassert solution('1 1 2 1 1 2 1 1 2 1') == '0'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n\"\"\"\n\nimport sys\nimport time\nfrom typing import List\n"
    },
    {
        "number": 1109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2\\n2 1 2 2 2 1') == '1'\nassert solution('8 4\\n1 1 2 1 1 1 2 1') == '0'\nassert solution('9 3\\n2 1 1 1 2 1 1 1 2') == '3'\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 1109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n2 1 2 2 2 1\") == \"1\"\nassert solution(\"8 4\\n1 1 2 1 1 1 2 1\") == \"0\"\nassert solution(\"9 3\\n2 1 1 1 2 1 1 1 2\") == \"3\"\n"
    },
    {
        "number": 1109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 4\") == \"0\"\nassert solution(\"9 3\") == \"3\"\nassert solution(\"1 1 2 1 1 1 2 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 1109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n2 1 1 2 1 1 1\") == \"3\"\n\nassert solution(\"10 5\\n1 1 2 1 1 1 2 1 1 1 2\") == \"0\"\n\nassert solution(\"7 4\\n1 1 2 1 1 1 2 1\") == \"1\"\n\nassert solution(\"5 2\\n1 1 1 2 1 1\") == \"0\"\n\nassert solution(\"9 3\\n2 1 1 1 2 1 1 1 2\") == \"3\"\n"
    },
    {
        "number": 1109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"1\"\nassert solution(\"8 4\") == \"0\"\nassert solution(\"9 3\") == \"3\"\n"
    },
    {
        "number": 1109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n2 1 2 2 2 1\\n\") == \"1\"\nassert solution(\"8 4\\n1 1 2 1 1 1 2 1\\n\") == \"0\"\nassert solution(\"9 3\\n2 1 1 1 2 1 1 1 2\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 1109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2\\n2 1 2 2 2 1\") == \"1\"\nassert solution(\"8 4\\n1 1 2 1 1 1 2 1\") == \"0\"\nassert solution(\"9 3\\n2 1 1 1 2 1 1 1 2\") == \"3\"\n"
    },
    {
        "number": 1109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 4\\n2 1 1 1 2 1 1 1 2') == '0'\nassert solution('9 3\\n2 1 1 1 2 1 1 1 2') == '3'\n\"\"\"\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))"
    },
    {
        "number": 1109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1 2 1 1 1 1 2\") == \"3\"\nassert solution(\"6 2 1 2 2 1 1\") == \"1\"\nassert solution(\"8 4 1 1 1 2 1 1 1 2\") == \"0\"\nassert solution(\"9 3 2 1 1 1 1 2 1 1 1 2\") == \"3\"\n"
    },
    {
        "number": 1110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"7\"\n\"\"\"\n\nfrom functools import reduce\nfrom math import factorial\nimport operator"
    },
    {
        "number": 1110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"7\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 3\n\"\"\""
    },
    {
        "number": 1110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 3\nassert solution('3') == 7\n\n\"\"\""
    },
    {
        "number": 1110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '7'"
    },
    {
        "number": 1110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"7\""
    },
    {
        "number": 1110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"7\"\nassert solution(\"4\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 1110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 3\nassert solution('3') == 7\nassert solution('4') == 9"
    },
    {
        "number": 1110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 3 1') == '2'\n\"\"\""
    },
    {
        "number": 1110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"7\"\n\"\"\"\n\nimport sys\nfrom functools import lru_cache\nfrom typing import Dict, Iterable, Iterator, Tuple, List\n"
    },
    {
        "number": 1111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n2 3 2 3') == 160\nassert solution('5 2\\n1 2 3 4 5') == 645\nassert solution('6 4\\n1 2 3 4 5 6') == 2042\n\n\"\"\""
    },
    {
        "number": 1111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"4 2\n2 3 2 3\n\"\"\") == '160'\nassert solution(\"\"\"5 2\n1 2 3 4 5\n\"\"\") == '645'"
    },
    {
        "number": 1111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n2 3 2 3') == '160'\nassert solution('5 2\\n1 2 3 4 5') == '645'\nassert solution('5 2\\n1 2 3 4 5') == '645'\n"
    },
    {
        "number": 1111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2 3 2 3\") == \"160\"\nassert solution(\"5 2\\n1 2 3 4 5\") == \"645\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"57\"\nassert solution(\"10 10\\n1 2 3 4 5 6 7 8 9 10\") == \"4358508\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"39\"\n"
    },
    {
        "number": 1111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 2 3 4\") == \"160\"\nassert solution(\"5 2\\n1 2 3 4 5\") == \"645\""
    },
    {
        "number": 1111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n2 3 2 3') == 160\nassert solution('5 2\\n1 2 3 4 5') == 645\nassert solution('1 2\\n1 2') == 2\nassert solution('1\\n1') == 1\nassert solution('5 5\\n1 2 3 4 5') == 45\n"
    },
    {
        "number": 1111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n2 3 2 3') == '160'\nassert solution('5 2\\n1 2 3 4 5') == '645'\nassert solution('5 2\\n1 2 3 5 4') == '36'\nassert solution('5 2\\n1 3 5 4 2') == '38'"
    },
    {
        "number": 1111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"160\"\nassert solution(\"5 2\") == \"645\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2 3\") == \"13\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 1111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n2 3 2 3\") == \"160\"\nassert solution(\"5 2\\n1 2 3 4 5\") == \"645\"\nassert solution(\"3 2\\n1 2 3\") == \"10\"\nassert solution(\"4 3\\n1 2 3 4\") == \"31\"\nassert solution(\"6 3\\n1 2 3 4 5 6\") == \"62\"\n"
    },
    {
        "number": 1111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 3 2 3\") == 160\nassert solution(\"5 2\\n1 2 3 4 5\") == 645\nassert solution(\"6 3\\n1 2 3 4 5 6\") == 14094\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\") == 64443\n\"\"\"\n"
    },
    {
        "number": 1112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\") == '1 1 1\\n1 1 1\\n1 1 1'\nassert solution(\"0 3 6\\n5 0 5\\n4 7 0\") == '6 3 6\\n5 5 5\\n4 7 4'\n"
    },
    {
        "number": 1112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\\n1 1 1\\n1 1 1\"\n"
    },
    {
        "number": 1112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\\n1 1 1\\n1 1 1\"\nassert solution(\"0 3 6\\n5 0 5\\n4 7 0\") == \"6 3 6\\n5 5 5\\n4 7 4\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 1112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"0 3 6\\n5 0 5\\n4 7 0\") == \"6 3 6\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''0 1 1\n1 0 1\n1 1 0''') == '1 1 1\\n1 1 1\\n1 1 1'\n\nassert solution('''0 3 6\n5 0 5\n4 7 0''') == '6 3 6\\n5 5 5\\n4 7 4'\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 1112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\\n1 1 1\\n1 1 1\"\nassert solution(\"0 3 6\\n5 0 5\\n4 7 0\") == \"6 3 6\\n5 5 5\\n4 7 4\"\n"
    },
    {
        "number": 1112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0') == '1 1 1\\n1 1 1\\n1 1 1'\nassert solution('0 3 6\\n5 0 5\\n4 7 0') == '6 3 6\\n5 5 5\\n4 7 4'\n"
    },
    {
        "number": 1112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('0 3 6\\n5 0 5\\n4 7 0') == '6 3 6\\n5 5 5\\n4 7 4'\n\"\"\"\n\ns = {\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9\n}"
    },
    {
        "number": 1112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0') == '1 1 1\\n1 1 1\\n1 1 1'\n\n\"\"\""
    },
    {
        "number": 1112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\\n1 1 1\\n1 1 1\"\n"
    },
    {
        "number": 1113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 1 2 239') == '4'\nassert solution('3\\n1 0 1') == '1'\nassert solution('4\\n0 1 2 239') == '4'\nassert solution('2\\n0 1') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 1 2 239') == '4'\nassert solution('3\\n1 0 1') == '1'\nassert solution('4\\n0 1 2 239') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 1113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 2 239\") == \"-1\"\nassert solution(\"3\\n1 0 1\") == \"1\"\nassert solution(\"4\\n0 1 2 239\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 1113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1 2 239') == '4'\nassert solution('3\\n1 0 1') == '1'\nassert solution('4\\n0 1 2 239') == '4'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 1\") == \"1\"\nassert solution(\"1 0 1 0 1\") == \"-1\"\nassert solution(\"1 0 1 2\") == \"2\"\nassert solution(\"1 0 1 239\") == \"4\"\nassert solution(\"0 1 1\") == \"0\"\n"
    },
    {
        "number": 1113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2 239\") == '4'\nassert solution(\"4 0 1 239\") == '4'\nassert solution(\"4 0 1 0\") == '-1'\nassert solution(\"4 1 2 239\") == '-1'\nassert solution(\"4 1 2 0\") == '1'\n"
    },
    {
        "number": 1113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 2 239\\n\") == \"4\"\nassert solution(\"3\\n1 0 1\\n\") == \"1\"\nassert solution(\"3\\n1 0 1\\n\") == \"1\"\nassert solution(\"4\\n0 1 2 239\\n\") == \"4\"\nassert solution(\"3\\n1 0 1\\n\") == \"1\"\n"
    },
    {
        "number": 1113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 2 239\") == \"4\"\nassert solution(\"3\\n1 0 1\") == \"1\"\nassert solution(\"4\\n0 1 2 239\") == \"4\""
    },
    {
        "number": 1113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 2 239\") == \"4\"\nassert solution(\"3\\n1 0 1\") == \"1\"\nassert solution(\"4\\n0 1 2 239\") == \"4\"\n"
    },
    {
        "number": 1113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 2 239\") == '4'\n\"\"\"\nfrom collections import defaultdict, deque\nimport sys\n"
    },
    {
        "number": 1114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 1\") == \"Possible\"\nassert solution(\"3 3 1 2 1\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 1114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 1 2 1') == 'Possible'\nassert solution('3 3 3 2 1') == 'Impossible'\n\"\"\"\n"
    },
    {
        "number": 1114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1\\n1 1 1\\n1 1 1\") == \"Possible\"\nassert solution(\"3 3 3\\n1 1 1\\n1 1 1\") == \"Impossible\"\nassert solution(\"3 2 1\\n1 1 1\\n1 1 1\") == \"Ambiguity\""
    },
    {
        "number": 1114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 2 1\n1 2 3''') == '''Possible\n3 2 1'''\n\nassert solution('''3 3 3\n1 1 1\n1 1 1''') == '''Impossible'''\n\nassert solution('''3 2 1\n1 2 3''') == '''Ambiguity'''\n\nassert solution('''3 3 3\n1 1 1\n1 1 1''') == '''Impossible'''\n\nassert solution('''3 2 1\n1 2 3\n3 3 3''') == '''Possible\n3 2 1\n'''"
    },
    {
        "number": 1114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1 1 2 1\") == \"Possible\"\nassert solution(\"3 3 1 1 3\") == \"Ambiguity\"\nassert solution(\"3 3 1 1 1\") == \"Impossible\""
    },
    {
        "number": 1114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1 2 1\") == \"Possible\"\nassert solution(\"3 3 1 1 1\") == \"Ambiguity\"\nassert solution(\"3 3 3 1 1\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 1114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3\\n1 1 1\\n1 1 1\") == \"Possible\"\nassert solution(\"3 3 3\\n1 1 1\\n1 1 1\") == \"Ambiguity\"\nassert solution(\"3 3 3\\n1 1 1\\n1 1 1\") == \"Impossible\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 1114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1\") == \"Possible\"\nassert solution(\"3 3 1 2 1\") == \"Possible\"\nassert solution(\"3 3 1 2 3\") == \"Possible\"\nassert solution(\"3 3 1 1 3\") == \"Possible\"\nassert solution(\"3 3 1 1 3 2\") == \"Ambiguity\"\n"
    },
    {
        "number": 1114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 1') == 'Possible'\nassert solution('1 1 1') == 'Ambiguity'\nassert solution('1 1 1') == 'Impossible'\nassert solution('1 2 1') == 'Impossible'\n"
    },
    {
        "number": 1114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 1\\n1 2 1\") == \"Possible\\n3 2 1\"\nassert solution(\"3 3 1 1\\n1 1 1\") == \"Ambiguity\"\nassert solution(\"3 3 1 1\\n1 1 3\") == \"Impossible\"\n\n\"\"\"\n\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 1115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n2\\n1 4') == '7'\nassert solution('1 5\\n1\\n1 4') == '-1'\nassert solution('1 5\\n7 9') == '5'"
    },
    {
        "number": 1115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n5\\n1\\n1 5\") == \"5\"\nassert solution(\"2\\n5\\n1\\n1 5\") == \"7\"\nassert solution(\"3\\n5\\n1\\n1 5\") == \"-1\"\nassert solution(\"2\\n5\\n1\\n3 6\") == \"6\""
    },
    {
        "number": 1115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 4\\n2\\n1 4\") == '7'\nassert solution(\"1\\n5\\n1\\n1 5\") == '-1'\nassert solution(\"1\\n5\\n1\\n1 4\") == '5'\n"
    },
    {
        "number": 1115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n2\\n1 4') == '7'\nassert solution('1\\n5\\n1\\n1 5') == '-1'\nassert solution('2\\n5\\n1\\n1 5') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 1115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 4\\n2\\n1 4\") == \"7\"\nassert solution(\"1\\n5\\n1\\n1 5\") == \"-1\"\nassert solution(\"1\\n5\\n1\\n1 5\") == \"5\"\n"
    },
    {
        "number": 1115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"7\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"1 1\") == \"-1\"\nassert solution(\"1 4\") == \"5\"\n"
    },
    {
        "number": 1115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n2\n3 4\n2\n1 4\n7 9\n\"\"\") == '7'\n\nassert solution(\n    \"\"\"\n1\n5\n1\n1 5\n\"\"\") == '5'\n\nassert solution(\n    \"\"\"\n1\n5\n1\n1 5\n\"\"\") == '-1'\n\nassert solution(\n    \"\"\"\n2\n3 4\n2\n1 4\n7 9\n\"\"\") == '7'\n\nassert solution(\n    \"\"\"\n1\n5\n1\n1 5\n\"\"\") == '5'"
    },
    {
        "number": 1115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\") == \"2\"\nassert solution(\"7 9\") == \"5\"\nassert solution(\"1 4\") == \"-1\"\nassert solution(\"1 5\") == \"5\"\n\nstdin_list = [line.strip() for line in stdin.split(\"\\n\") if line]\nassert len(stdin_list) == 2\n\nn, s = [int(x) for x in stdin_list[0].split()]\n"
    },
    {
        "number": 1115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n3 4\\n7 9') == '7'\nassert solution('1 5\\n1 4') == '-1'\nassert solution('1 5\\n7 9') == '5'\n\"\"\"\n"
    },
    {
        "number": 1115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 4\\n2\\n1 4\\n7 9\") == \"7\"\nassert solution(\"1\\n5\\n1\\n1 5\") == \"-1\"\nassert solution(\"1\\n5\\n1\\n1 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 1116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 2\\n2 10 4\\n5 2 3\\n3 2 2') == 'OBEY'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\ntest_cases = int(stdin.readline().strip())\n\nfor test_case in range(test_cases):\n    r, b, k = map(int, stdin.readline().split())\n    l = list(map(int, stdin.readline().split()))\n    l = sorted(l)\n    p = 0\n    while p < len(l):\n        if p == len(l) - 1:\n            break\n        if l[p] % r == 0 and l[p + 1] % r == 0:\n            if l[p] % b == 0 and l[p + 1] % b == 0:\n                if p + 2 > len(l) - 1:\n                    break\n                else:\n                    if l[p + 2] % r == 0 and l[p + 2] % b == 0:\n                        p += 2\n                    else:\n                        break\n            else:\n                break\n        else:\n            p += 1\n    if p == len(l) - 1:\n        print('OBEY')\n    else:\n        print('REBEL')\n"
    },
    {
        "number": 1116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 2\\n2 10 4\\n5 2 3\\n3 2 2') == 'OBEY'\nassert solution('1 1 2\\n2 10 4\\n5 2 3\\n3 2 2') == 'REBEL'\n\"\"\"\n\nimport numpy"
    },
    {
        "number": 1116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 2\\n2 10 4\\n5 2 3\\n3 2 2') == 'OBEY'\nassert solution('1 1 2\\n2 10 4\\n5 2 3\\n3 2 2') == 'REBEL'\n\"\"\"\n"
    },
    {
        "number": 1116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2\\n2 10 4\\n5 2 3\\n3 2 2\") == \"OBEY\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 1116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2\\n2 10 4\\n5 2 3\\n3 2 2') == 'OBEY'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2\\n2 10 4\\n5 2 3\\n3 2 2\\n\") == \"OBEY\"\n\n\"\"\""
    },
    {
        "number": 1116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 2\\n2 10 4\\n5 2 3\\n3 2 2') == 'OBEY'\n\"\"\"\nfrom typing import Iterator\n\nINPUT_STREAM = map(lambda s: s.strip(), iter(input, ''))\n\n_, *data = INPUT_STREAM  # type: ignore\n\nfor k, r, b, in map(lambda line: tuple(map(int, line.split())), data):\n    if (r + b) % 2 == 0:\n        print('OBEY')\n    else:\n        print('REBEL')\n"
    },
    {
        "number": 1116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n\n########################################################################\n\ntCases = int(input())\nfor _ in range(tCases):\n    r, b, k = map(int, input().split())\n    if r%k == 0:\n        print('REBEL')\n    elif b%k == 0:\n        print('OBEY')\n    elif r%k == b%k:\n        print('REBEL')\n    else:\n        print('OBEY')\n"
    },
    {
        "number": 1116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('1\\n') == 'REBEL'\nassert solution('2\\n') == 'OBEY'\nassert solution('3\\n') == 'OBEY'\n"
    },
    {
        "number": 1116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 1117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n4 6\\n3 5\") == \"YES\"\nassert solution(\"2 3\\n5 5\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 1117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n3 5\\n\") == \"YES\"\nassert solution(\"2\\n3 4\\n5 5\\n\") == \"NO\"\n"
    },
    {
        "number": 1117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\\n5\") == \"YES\"\nassert solution(\"2\\n3\\n4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 1117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 6\\n3 5\") == \"YES\"\nassert solution(\"2\\n3 4\\n5 5\") == \"NO\"\n"
    },
    {
        "number": 1117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n3 5\") == \"YES\"\nassert solution(\"2\\n3 4\\n5 5\") == \"NO\""
    },
    {
        "number": 1117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == 'YES'\n\nassert solution('''\n1\n2 2\n''') == 'NO'\nassert solution('''\n2\n2 2\n''') == 'YES'\nassert solution('''\n2\n1 1\n''') == 'YES'\nassert solution('''\n2\n1 1\n1 1\n''') == 'YES'\n"
    },
    {
        "number": 1117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4 6\\n3 5\") == \"YES\"\nassert solution(\"2\\n3 4\\n5 5\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 1117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n4\\n3\\n5') == 'YES'\nassert solution('2\\n3\\n4\\n5') == 'NO'\n\n\n-----Test cases-----\n\n## 1)\nInput:\n2\n3 4\n5 5\nOutput:\nYES\n\n## 2)\nInput:\n3\n3 4\n4 6\n3 5\nOutput:\nNO\n\"\"\""
    },
    {
        "number": 1117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n4 6\n3 5''') == 'YES'\nassert solution('''2\n3 4\n5 5''') == 'NO'\n"
    },
    {
        "number": 1117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4 6\\n3 5\") == \"YES\"\nassert solution(\"2\\n3 4\\n5 5\") == \"NO\"\n\n\n\n-----Test cases-----\n\nprint(\"0 0\" == solution(\"0 0\"))\nprint(\"4 5\" == solution(\"4 5\"))\nprint(\"2 5\" == solution(\"2 5\"))\n\n\"\"\""
    },
    {
        "number": 1118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 2 2 1 3 5 5\") == \"4\"\nassert solution(\"8 4 5 2 2 1 3 5 5\") == \"4\"\nassert solution(\"1 4\") == \"0\"\nassert solution(\"4 5 2 2 1 3 5 5\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 1118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 2 2 1 3 5 5') == '4'\nassert solution('8 4 5 2 2 1 3 5 5') == '4'\nassert solution('1 4') == '0'"
    },
    {
        "number": 1118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5 3 3 2 2 1 2 1') == '2'\nassert solution('4 4 4 4 4 4') == '0'\nassert solution('1 1 1 1 1 1 1') == '0'\nassert solution('5 5 5 5 5 5') == '5'\n"
    },
    {
        "number": 1118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 2 2 1 3 5 5') == '4'\nassert solution('8 4 5 2 2 1 3 5 5') == '4'\nassert solution('1 4') == '0'\n"
    },
    {
        "number": 1118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5 2 2 1') == '2'\nassert solution('8\\n4 5 2 2 1 3 5 5') == '4'\nassert solution('1\\n4') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 1118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n5 2 2 1') == 2\nassert solution('8\\n4 5 2 2 1 3 5 5') == 4\nassert solution('1\\n4') == 0\n\n\"\"\"\n"
    },
    {
        "number": 1118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n5 2 2 1\n''') == '2'\nassert solution('''8\n4 5 2 2 1 3 5 5\n''') == '4'\nassert solution('''1\n4\n''') == '0'\nassert solution('''5\n1 2 3 4 5\n''') == '0'\nassert solution('''3\n1 1 1\n''') == '0'\n"
    },
    {
        "number": 1118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5 2 2 1') == '2'\nassert solution('8\\n4 5 2 2 1 3 5 5') == '4'\nassert solution('1\\n4') == '0'"
    },
    {
        "number": 1118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5 2 2 1\") == \"2\"\nassert solution(\"8\\n4 5 2 2 1 3 5 5\") == \"4\"\nassert solution(\"1\\n4\") == \"0\"\n\"\"\""
    },
    {
        "number": 1118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 2 2 1 3 5 5\") == \"4\"\nassert solution(\"8 4 5 2 2 1 3 5 5\") == \"4\"\nassert solution(\"1 4\") == \"0\"\nassert solution(\"1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 1119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == 2\nassert solution('3 1 4') == 370000006\n\"\"\"\n\nimport sys\nimport collections\nfrom itertools import islice\nfrom decimal import Decimal, getcontext\n\ngetcontext().prec = 32"
    },
    {
        "number": 1119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == \"2\"\nassert solution(\"3 1 4\") == \"370000006\""
    },
    {
        "number": 1119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 4\") == 370000006\n"
    },
    {
        "number": 1119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 4') == 370000006"
    },
    {
        "number": 1119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 4\") == \"370000006\"\nassert solution(\"1 1 1\") == \"2\"\nassert solution(\"3 1 6\") == \"0\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution(\"10 100 1\") == \"0\"\n"
    },
    {
        "number": 1119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 4') == 370000006\n\"\"\"\nfrom math import gcd\n\na, b, k = [int(x) for x in stdin.split(' ')]\n\np = b / (a + b)\nq = a / (a + b)\n\ng = gcd(p, q)\n\nP = (p / g) * (q / g)\nprint(P % 1000000007)"
    },
    {
        "number": 1119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == '2'\nassert solution('3 1 4') == '370000006'\n\n\n\nimport ast"
    },
    {
        "number": 1119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == 2\n\"\"\""
    },
    {
        "number": 1119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1') == '2'\nassert solution('3 1 4') == '370000006'"
    },
    {
        "number": 1119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1') == 2\nassert solution('3 1 4') == 370000006"
    },
    {
        "number": 1120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"24\") == 5\n\"\"\""
    },
    {
        "number": 1120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('24') == '5'\n\"\"\""
    },
    {
        "number": 1120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"24\") == \"5\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 1120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('24') == '5'\nprint(solution('24'))\n'''\n\nimport math\nimport numpy as np"
    },
    {
        "number": 1120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n"
    },
    {
        "number": 1120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"24\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 1120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"24\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 1120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('24') == '5'\n\"\"\""
    },
    {
        "number": 1120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"24\") == \"5\"\n"
    },
    {
        "number": 1120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"24\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 1121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"AB\"\nassert solution(\"1 3\") == \"ABB\"\nassert solution(\"2 3\") == \"AA\"\nassert solution(\"2 4\") == \"AAB\"\nassert solution(\"3 4\") == \"ABA\"\n"
    },
    {
        "number": 1121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3\\nAB\\nCDE\\nDEA') == 'ABACEDEAE'\nassert solution('1 1\\nA') == 'A'\nassert solution('2 3\\nAB\\nBC\\nCBA') == 'AABB\\nAABB\\nABBA\\nABBA\\nABCB\\nABCB'\nassert solution('3 4\\nAB\\nBC\\nCBA\\nDE') == 'ABACEDEAE'\nassert solution('3 2\\nAB\\nBC\\nCBA\\nDE') == 'ABACEDEAE'\n"
    },
    {
        "number": 1121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 3') == 'ABA'\nassert solution('2 2') == 'AA'\nassert solution('3 4') == 'AAABAAACAAB'\n\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nres = [chr(ord('A') + i) for i in range(m)]\n\nfor i in range(n - 1):\n    cur_res = []\n    for j in range(m - 1):\n        cur_res.append(res[j] + res[j + 1])\n    res = cur_res\n\nprint(''.join(res))"
    },
    {
        "number": 1121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\\nABA\") == \"ABA\"\nassert solution(\"2 2\\nAA\") == \"AA\"\nassert solution(\"3 4\\nAAAB\") == \"AAAB\"\nassert solution(\"3 4\\nAAAC\") == \"AAAC\"\nassert solution(\"3 4\\nAAAD\") == \"AAABAAAC\"\n"
    },
    {
        "number": 1121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\\n\") == \"ABAA\"\n\"\"\"\nfrom collections import deque\nfrom itertools import product\nfrom math import sqrt"
    },
    {
        "number": 1121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4') == 'AAABAABAAAC'\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nvisited = [[False] * m for _ in range(n)]\nresult = [[\"\"] * m for _ in range(n)]\n\nqueue = deque([(0, 0)])\n\nresult[0][0] = \"A\"\nvisited[0][0] = True\n\nwhile queue:\n    i, j = queue.pop()\n\n    for di, dj in [(0, 1), (1, 0)]:\n        ni = i + di\n        nj = j + dj\n\n        if 0 <= ni < n and 0 <= nj < m and not visited[ni][nj]:\n            result[ni][nj] = chr(ord(result[i][j]) + 1)\n            queue.appendleft((ni, nj))\n            visited[ni][nj] = True\n\nprint(\"\\n\".join(map(lambda x: \"\".join(x), result)))\n"
    },
    {
        "number": 1121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3\\nABA\\n') == 'ABAA'\n"
    },
    {
        "number": 1121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3') == 'ABA'\nassert solution('2 2') == 'AA'\nassert solution('3 4') == 'AAABAAAC'\nassert solution('4 4') == 'AAABAAACAAABAAAC'\n\"\"\""
    },
    {
        "number": 1121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"AA\"\n\"\"\"\n\nimport numpy as np\nn, m = [int(x) for x in input().split()]\n\nl_matrix = np.zeros((n, m))\n\nfor i in range(n):\n    row = input()\n    for j in range(m):\n        l_matrix[i, j] = ord(row[j]) - 97\n\n\nprint(l_matrix)\n"
    },
    {
        "number": 1121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == 'AA'\nassert solution('3 4') == 'AAABAAAC'\n"
    },
    {
        "number": 1122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n2 3\\n\") == \"2 3\\n3 4\\n1 2\\n\"\n\"\"\""
    },
    {
        "number": 1122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\") == \"2 3\"\n\"\"\""
    },
    {
        "number": 1122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\") == \"2 3\"\n\"\"\"\n"
    },
    {
        "number": 1122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n2 3\\n\") == \"2 3\\n1 2\\n4 1\\n3 4\\n\"\n"
    },
    {
        "number": 1122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1') == '2 3'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 1122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == \"2 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1') == '2 3'\n\"\"\"\n"
    },
    {
        "number": 1122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\") == \"2 3\"\nprint(solution(\"4 1\"))\n\n\n\n\"\"\""
    },
    {
        "number": 1122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"2 3\"\n\"\"\"\n"
    },
    {
        "number": 1122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1') == '2 3'\n\"\"\"\n"
    },
    {
        "number": 1123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"9\"\n\"\"\""
    },
    {
        "number": 1123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"9\""
    },
    {
        "number": 1123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3') == '1'\nassert solution('7 10') == '6'\n\"\"\""
    },
    {
        "number": 1123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"9\"\n"
    },
    {
        "number": 1123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 1 1 2') == '9'\n\"\"\"\nimport math"
    },
    {
        "number": 1123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3\\n4 4 4 4') == '9'\n\"\"\"\n\n\n\"\"\"\nLet A_1,..., A_N be N sequences of length K with integers between 1 and K (inclusive),\nwhere N = |A_1| +... + |A_N| and |A_i| = K.\n\nLet B_1,..., B_N be N sequences of length K with integers between 1 and K (inclusive),\nwhere N = |B_1| +... + |B_N| and |B_i| = K.\n\nWe have that gcd(A_i, B_i) = 1 for i = 1,..., N.\n\nThere are gcd(A_1, B_1) +... + gcd(A_N, B_N) = K^N such sequences of length K, where gcd(A_i, B_i) = 1\nfor i = 1,..., N.\n\nFind gcd(A_1,..., A_N) + gcd(B_1,..., B_N) modulo (10^9+7).\n\nNote:\ngcd(A_i, B_j) modulo (10^9+7) = 0 if and only if A_i = B_j = 0.\n\"\"\"\n\nfrom collections import Counter\nimport math\n\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 1123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n\") == \"9\"\n\n\"\"\"\n\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 1123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 1123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"9\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 1123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"9\"\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 1124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 6 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n2 6 6''') == '2'\n\nassert solution('''3\n6 1 6''') == '6'\n\nassert solution('''3\n6 6 6''') == '6'\n\nassert solution('''10\n1 1 1''') == '1'\n\nassert solution('''6\n1 1 1 1 1 1''') == '1'"
    },
    {
        "number": 1124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 6 6\") == 2\n\"\"\""
    },
    {
        "number": 1124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 6 6\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 1124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 6 6\") == \"2\"\nassert solution(\"3\\n1 6 4\") == \"4\"\n\n\"\"\"\n\nfrom functools import reduce\nfrom operator import add\nfrom typing import List, Tuple, Set\n"
    },
    {
        "number": 1124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 6 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 6 6\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 1124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 6 6\") == \"2\"\nassert solution(\"3\\n2 4 6\") == \"2\"\nassert solution(\"3\\n2 2 6\") == \"2\"\nassert solution(\"3\\n2 2 2\") == \"2\"\nassert solution(\"3\\n6 3 2\") == \"2\"\n"
    },
    {
        "number": 1124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 6 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2 6 6\n''') == '2'\n\nassert solution('''\n3 10 10\n''') == '10'\n\nassert solution('''\n10 10 10\n''') == '10'\n\nassert solution('''\n100 100 100\n''') == '100'\n"
    },
    {
        "number": 1125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\"\"\"\n\n\"\"\"\nThe first line of the input gives the number of piles, N.\nThe second line of the input gives the initial number of stones in each pile.\n\nYou may assume that neither of these lines contains a number 0.\n\nOutput Format\n\nPrint one line: the minimum number of stones needed to win the game.\n\nSample Input 0\n\n2\n3\n\nSample Output 0\n\n1\n\nSample Input 1\n\n1\n3\n\nSample Output 1\n\n-1\n\nExplanation\n\nIn this example, Aoki starts off by taking 3 stones from pile 1.\nIf Aoki takes 1 stone from pile 2, then Takahashi takes 2 stones from pile 2.\n\nIn this case, the game cannot be won by choosing the moves Aoki made.\n\nSample Input 2\n\n3\n2 3 2 1\n\nSample Output 2\n\n-1\n\"\"\""
    },
    {
        "number": 1125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n\") == \"1\"\n\"\"\"\n\nn = int(input())\npiles = list(map(int, input().split()))"
    },
    {
        "number": 1125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 1125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n5 3') == '1'\nassert solution('2\\n2 5') == '1'\nassert solution('1\\n1') == '-1'\nassert solution('1\\n2') == '-1'\nassert solution('2\\n1\\n4') == '1'\n"
    },
    {
        "number": 1125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5 3\") == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3') == '1'\n\"\"\""
    },
    {
        "number": 1125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2 3\") == '2'\nassert solution(\"4 6\\n1 2 3 4 5\") == '2'\nassert solution(\"10 6\\n1 2 3 4 5 6 7 8 9 10\") == '-1'\nassert solution(\"5 2\\n1 2 3 4 5\") == '1'\nassert solution(\"4 2\\n1 2 3 4\") == '-1'\n"
    },
    {
        "number": 1125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 3\") == 1\nassert solution(\"2 5 5\") == -1\n\"\"\"\n\nfrom collections import deque\n\n_, N = map(int, stdin.readline().split())\n\npiles = deque(map(int, stdin.readline().split()))\n\nmin_moves = float('inf')"
    },
    {
        "number": 1125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n5 3') == '1'\nassert solution('1\\n1') == '-1'\nassert solution('2\\n2\\n1\\n2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 1125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n5 3\") == \"1\"\nassert solution(\"2\\n6 5\") == \"-1\"\n"
    },
    {
        "number": 1126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 1001\") == \"1369\"\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 1126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 1001\") == \"1369\""
    },
    {
        "number": 1126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2 1001\") == \"1369\"\n\n\"\"\""
    },
    {
        "number": 1126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 16 10 11 5\") == \"66\", \"Test 1\"\nassert solution(\"5 3 16 10 11 5\") == \"58\", \"Test 2\"\nassert solution(\"5 3 16 10 11 5\", 5, 4, 16, 10, 11, 5) == \"58\", \"Test 3\"\n\n\"\"\""
    },
    {
        "number": 1126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2 1001\") == \"1369\"\n\"\"\"\n\nfrom collections import deque\nfrom typing import List, Tuple"
    },
    {
        "number": 1126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 1001\") == \"1369\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 1126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(A_1, M) == str(A)\n\"\"\"\n"
    },
    {
        "number": 1126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 1001\") == \"1369\"\n"
    },
    {
        "number": 1126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2 1001') == '1369'\n\"\"\""
    },
    {
        "number": 1126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 2 1000\") == \"1369\"\nassert solution(\"1 1 1000\") == \"1000\"\nassert solution(\"2 3 1000\") == \"1001\"\nassert solution(\"2 2 1000\") == \"1000\"\nassert solution(\"100 2 1000\") == \"1369\"\n\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 1127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n2\") == \"1\"\nassert solution(\"4\\n3\\n100\") == \"2\"\nassert solution(\"2\\n4\\n2\") == \"1\"\nassert solution(\"4\\n3\\n100\") == \"2\"\nassert solution(\"2\\n4\\n2\") == \"1\"\n"
    },
    {
        "number": 1127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1\\n2\\n1\\n3\\n3\\n102\\n4\\n2069') == '2\\n1\\n1\\n2'\n"
    },
    {
        "number": 1127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('10') == '2'\nassert solution('101') == '1'\n"
    },
    {
        "number": 1127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n2\\n1\\n3\\n3\\n102\\n4\\n2069\") == \"2\\n1\\n1\\n2\"\n"
    },
    {
        "number": 1127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n2\\n1\\n3\\n3\\n102\\n4\\n2069\") == \"2\\n1\\n1\\n2\"\nassert solution(\"2\\n1\\n2\\n1\\n3\\n3\\n102\\n4\\n2069\") == \"1\\n1\\n1\\n2\"\nassert solution(\"2\\n4\\n2069\") == \"2\\n2\"\nassert solution(\"2\\n4\\n2069\\n\") == \"1\\n2\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 1127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n2\\n1\\n3\\n3\\n102\\n4\\n2069\") == \"2\\n1\\n1\\n2\"\nprint(\"Test 1 OK\")\n\nassert solution(\"4\\n1\\n2\\n1\\n3\\n3\\n102\\n4\\n2069\") == \"2\\n1\\n1\\n2\"\nprint(\"Test 2 OK\")"
    },
    {
        "number": 1127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n2\\n1\\n3\\n3\\n102\\n4\\n2069\\n\") == \"2\\n1\\n1\\n2\"\nassert solution(\"1\\n3\\n1\\n3\\n\") == \"2\\n1\\n1\\n2\"\nassert solution(\"2\\n2\\n0\\n2\\n\") == \"1\\n1\\n1\\n2\"\n\n\"\"\"\n"
    },
    {
        "number": 1127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\\n2\\n1\\n3\\n3\\n102\\n4\\n2069\") == \"2\\n1\\n1\\n2\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 1127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1\\n2\\n1\\n3') == '2\\n1\\n1\\n2'\nassert solution('4\\n3\\n102\\n4\\n2069') == '1\\n2\\n1\\n2'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(input()))\n"
    },
    {
        "number": 1128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6') == 'Yes'\n\"\"\"\nimport sys"
    },
    {
        "number": 1128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\") == \"Yes\"\nassert solution(\"2 6\") == \"No\"\nassert solution(\"1 6\") == \"No\"\nassert solution(\"3 1\") == \"No\"\n\nprint(\"OK\")\n\n------------------------------------------------------------\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == \"No\"\nassert solution(\"3 6\") == \"Yes\"\nassert solution(\"7 8\") == \"No\"\nassert solution(\"5 10\") == \"Yes\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1, 5) == 'No'\nassert solution(3, 6) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 1128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6') == 'Yes'\nassert solution('1 5') == 'No'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(input())\nprint(solution(str(input())))\n"
    },
    {
        "number": 1128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5') == 'No'\nassert solution('3 6') == 'Yes'\nassert solution('1 2') == 'No'\n\"\"\""
    },
    {
        "number": 1128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5\\n') == 'No'\nassert solution('3 6\\n') == 'Yes'\n"
    },
    {
        "number": 1128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5, 6) == \"No\"\nassert solution(3, 6) == \"Yes\"\n\"\"\""
    },
    {
        "number": 1128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5\") == \"No\"\nassert solution(\"3 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 1129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\nassert solution('4\\n2 1 4 5') == '2'\nassert solution('4\\n5 3 2 1') == '2'\nassert solution('4\\n3 1 3 1') == '1'\nassert solution('4\\n1 1 1 1') == '0'\n"
    },
    {
        "number": 1129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\"\n\nimport sys\n\nnumber_of_points = int(sys.stdin.readline())\npoint_coordinates = list(map(int, sys.stdin.readline().split()))\npoints = {}\n\nfor i, point in enumerate(point_coordinates):\n    points[point] = point_coordinates[i]\n\npoint_coordinates.sort()\n\ndistances = {}\nfor point in points.values():\n    distances[point] = 0\n    for k, v in points.items():\n        distances[point] += abs(point - k)\n\nmin_distances = sys.maxsize\nmin_distance_point = None\nfor point in points.keys():\n    if distances[point] < min_distances:\n        min_distances = distances[point]\n        min_distance_point = point\n\nprint(min_distance_point)\n"
    },
    {
        "number": 1129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\n\"\"\""
    },
    {
        "number": 1129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\nassert solution('2\\n-1 2') == '-1'\n"
    },
    {
        "number": 1129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 1129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 1\\n3 1\\n3 3\\n2 1\\n') == '1'\n"
    },
    {
        "number": 1129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\"\n\nfrom collections import namedtuple\n\nimport numpy as np\n\nPoint = namedtuple('Point', 'x y')\n\nn = int(input())\n\npoints = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    points.append(Point(x, y))\n\npoints_array = np.array(points)\n\ndists = np.sum(np.square(points_array[:, np.newaxis] - points_array[np.newaxis, :]), axis=2)\n\nresult = np.min(dists)\n\nprint(int(np.sqrt(result)))\n"
    },
    {
        "number": 1130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5 1\\n01001\\n10110\") == \"5\"\nassert solution(\"2 5 0\\n01001\\n10110\") == \"8\"\n"
    },
    {
        "number": 1130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5 1\\n01001\\n10110') == '5'\nassert solution('2 5 0\\n01001\\n10110') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 1130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5 1\\n01101\\n10110\") == \"5\"\nassert solution(\"2 5 0\\n01101\\n10110\") == \"8\"\n"
    },
    {
        "number": 1130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2, 5, 1) == '5'\nassert solution(2, 5, 0) == '8'\nassert solution(4, 5, 5) == '3'\nassert solution(3, 8, 2) == '2'\nassert solution(4, 10, 3) == '6'\n"
    },
    {
        "number": 1130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 1\\n101010\") == \"8\"\nassert solution(\"0 0 1\\n01010\") == \"8\"\nassert solution(\"1 0 1\\n101010\") == \"8\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 1130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 1\\n01001\\n10110\\n\") == \"5\"\nassert solution(\"2 5 0\\n01001\\n10110\\n\") == \"8\"\n"
    },
    {
        "number": 1130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 5 1\\n\"\n    \"10110\\n\") == \"5\"\nassert solution(\n    \"2 5 0\\n\"\n    \"10110\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 1130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 1\\n01001\\n10110\") == \"5\"\nassert solution(\"2 5 0\\n01001\\n10110\") == \"8\"\n\"\"\"\n\nn, m, k = [int(n) for n in stdin.readline().split(\" \")]\ntimetable = [stdin.readline().strip() for i in range(n)]\n"
    },
    {
        "number": 1130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\\n10110\\n10110\\n10110\") == \"4\"\nassert solution(\"2 5 1\\n101010\\n101010\\n101010\") == \"8\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0 0 0') == '0'\nassert solution('1 1 1') == '1'\nassert solution('0 1 1') == '0'\nassert solution('1 1 0') == '1'\n"
    },
    {
        "number": 1131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3 1 6\") == 2\nassert solution(\"4 2 3 1 7\") == 4\nassert solution(\"1 1 2 1 1\") == 0\nassert solution(\"1 2 3 2 6\") == 13\n"
    },
    {
        "number": 1131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('1 1 2 1 1') == 0\nassert solution('1 2 3 2 6') == 2\nassert solution('1 1 2 1 1') == 0\nassert solution('1 2 3 2 6 7') == 4\n"
    },
    {
        "number": 1131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3 1 6\") == 2\nassert solution(\"1 1 2 1 1\") == 0\n"
    },
    {
        "number": 1131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3 1 6\") == \"2\"\nassert solution(\"4 2 3 1 7\") == \"4\"\nassert solution(\"1 1 2 1 1\") == \"0\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"1 2 3 2 6\") == \"13\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 1131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3 1 6\") == \"2\"\nassert solution(\"1 1 2 1 1\") == \"0\"\nassert solution(\"1 2 3 2 6\") == \"13\"\nassert solution(\"1 2 3 4 6\") == \"2\"\nassert solution(\"1 2 3 4 7\") == \"4\""
    },
    {
        "number": 1131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3 1 6') == 2\nassert solution('4 2 3 1 7') == 4\nassert solution('1 1 2 1 1') == 0\nprint('Test finished')\n"
    },
    {
        "number": 1131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3 1 6\") == \"2\"\nassert solution(\"4 2 3 1 7\") == \"4\"\nassert solution(\"1 1 2 1 1\") == \"0\"\nassert solution(\"1 2 3 2 1\") == \"13\"\n"
    },
    {
        "number": 1131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3 1 6\") == \"2\"\nassert solution(\"4 2 3 1 7\") == \"4\"\nassert solution(\"1 1 2 1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 1131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3 1 6\") == \"2\"\nassert solution(\"1 1 2 1 1\") == \"0\"\nassert solution(\"4 2 3 1 7\") == \"4\"\nassert solution(\"1 1 2 1 1\") == \"0\""
    },
    {
        "number": 1131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 1 6\") == \"2\"\nassert solution(\"4 2 3 1 7\") == \"4\"\nassert solution(\"1 1 2 1 1\") == \"0\"\nassert solution(\"1 2 3 2 6\") == \"13\"\n"
    },
    {
        "number": 1132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"bus topology\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n1 4\\n\") == \"ring topology\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"star topology\"\n"
    },
    {
        "number": 1132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\") == \"bus topology\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"ring topology\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\") == \"star topology\"\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\nimport sys"
    },
    {
        "number": 1132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == 'bus topology'\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == 'ring topology'\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") =='star topology'\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == 'unknown topology'\n\"\"\""
    },
    {
        "number": 1132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\") == \"bus topology\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n1 4\") == \"ring topology\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n1 4\") == \"star topology\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n1 4\") == \"unknown topology\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\nCOMMAND_CHAIN = 0\nDIRECTION_CHAIN = 1"
    },
    {
        "number": 1132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"bus topology\"\n\nassert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n1 4\\n\") == \"ring topology\"\n\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"star topology\"\n\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"unknown topology\"\n"
    },
    {
        "number": 1132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\") == \"bus topology\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"ring topology\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\") == \"star topology\""
    },
    {
        "number": 1132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 4\\n4 1') == 'bus topology'\nassert solution('4 4\\n1 2\\n2 3\\n3 1\\n1 4') == 'ring topology'\nassert solution('4 4\\n1 2\\n2 3\\n3 1\\n1 4') =='star topology'\nassert solution('4 3\\n1 2\\n2 3\\n3 4') == 'unknown topology'\n\nprint(solution(input()))\n"
    },
    {
        "number": 1132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\") == \"bus topology\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"ring topology\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"star topology\"\n"
    },
    {
        "number": 1132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\") == \"bus topology\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n1 4\") == \"ring topology\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\") == \"star topology\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 1132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\") == \"bus topology\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n1 4\") == \"ring topology\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"star topology\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n1 4\") == \"unknown topology\"\n\n\n\"\"\"\n\nfrom collections import Counter, defaultdict\nfrom typing import List, Dict, Set, Tuple\n"
    },
    {
        "number": 1133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nabb\\ncacc\\naaa\\nbbb\\n\") == \"9\"\nassert solution(\"5\\na\\na\\nbcbcb\\ncdecdecdecdecdecde\\naaaa\\n\") == \"6\""
    },
    {
        "number": 1133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nabb\\ncacc\\naaa\\nbbb\\n\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 1133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nabb\\ncacc\\naaa\\nbbb\\n\") == 9\nassert solution(\"5\\na\\na\\nbcbcb\\ncdecdecdecdecdecde\\naaaa\\n\") == 6\n\n\"\"\""
    },
    {
        "number": 1133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nabb\\ncacc\\naaa\\nbbb') == '9'\nassert solution('5\\na\\na\\nbcbcb\\ncdecdecdecdecdecde\\naaaa') == '6'\n\"\"\"\n"
    },
    {
        "number": 1133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nabb\\ncacc\\naaa\\nbbb\") == 9\nassert solution(\"5\\na\\na\\nbcbcb\\ncdececdececdececdececde\") == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nabb\\ncacc\\naaa\\nbbb\") == \"9\"\nassert solution(\"5\\na\\na\\ncbcbcb\\ncde\\ncde\\ncde\\ncdecdecdecdecdecde\\naaaa\") == \"6\"\nassert solution(\"5\\nabcde\\na\\nbcdefg\\nhijk\\nlmno\") == \"8\"\nassert solution(\"5\\nab\\nbcde\\nacde\\ncd\\nac\") == \"5\"\nassert solution(\"1\\nabcdef\") == \"7\"\n\nprint(solution(\"5\\nbbb\\ncc\\nacb\\nb\\n\"))\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 1133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nabb\\ncacc\\naaa\\nbbb') == 9\nassert solution('5\\na\\na\\nbcbcb\\ncdecdecdecdecdecde\\naaaa') == 6\nassert solution('5\\naa\\naa\\nbcbcb\\ncdecdecdecdecdecde\\naaaa') == 6\n"
    },
    {
        "number": 1133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nabb\\nbcbc\\nccc\\nbbb\") == \"9\"\nassert solution(\"5\\na\\na\\ncccc\\ncdecdecdecdecdecde\") == \"6\""
    },
    {
        "number": 1133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nabb\\ncacc\\n\\n\\n\\naaa\\nbbb\\n\") == \"9\"\nassert solution(\"5\\na\\na\\nbcbcb\\ncdecdecdecdecdecde\\naaaa\\n\") == \"6\""
    },
    {
        "number": 1133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nabb\\ncacc\\naaa\\nbbb\") == 9\n"
    },
    {
        "number": 1134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 1134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 1 1 2 2\\n\") == 1\nassert solution(\"6\\n0 1 0 3 0 2\\n\") == 6\n\"\"\"\n"
    },
    {
        "number": 1134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n0 1 0 3 0 2') == '6'\nassert solution('5\\n0 1 1 2 2') == '1'\n"
    },
    {
        "number": 1134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n0 1 0 3 0 2') == '6'\nassert solution('5\\n0 1 1 2 2') == '1'\nassert solution('5\\n0 1 1 2 2') == '0'\n\"\"\""
    },
    {
        "number": 1134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 1 2 1 2\") == \"1\"\n\nassert solution(\"6\\n0 1 0 3 0 2\") == \"6\"\n\nassert solution(\"5\\n0 1 1 2 2\") == \"0\"\n"
    },
    {
        "number": 1134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n0 1 0 3 0 2') == 6\nassert solution('5\\n0 1 1 2 2') == 0\nassert solution('5\\n0 1 1 2 2') == 0"
    },
    {
        "number": 1134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 7 2 1 2\") == \"2\"\nassert solution(\"2 2 1 1 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n0 1 0 3 0 2\") == \"6\"\nassert solution(\"5\\n0 1 1 2 2\") == \"1\"\nassert solution(\"5\\n0 1 1 2 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 1134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(6) == 6\nassert solution(5) == 1"
    },
    {
        "number": 1134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\\\n0 1 0 3 0 2\") == 6\nassert solution(\"5\\\\n0 1 1 2 2\") == 1\n"
    },
    {
        "number": 1135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nlogva') == 'volga'\nassert solution('4\\nno') == 'no'\nassert solution('2\\nabba') == 'abba'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"logva\") == \"volga\"\nassert solution(\"abba\") == \"baba\"\nassert solution(\"no\") == \"no\"\nassert solution(\"3log1023\") == \"log1023\"\n\n\"\"\""
    },
    {
        "number": 1135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"logva\") == \"volga\"\nassert solution(\"no\") == \"no\"\nassert solution(\"abba\") == \"baba\"\nassert solution(\"kek\") == \"kek\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 1135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"logva\") == \"volga\"\nassert solution(\"no\") == \"no\"\nassert solution(\"abba\") == \"baba\"\n"
    },
    {
        "number": 1135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"logva\") == \"volga\"\nassert solution(\"abba\") == \"baba\"\nassert solution(\"no\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 1135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"logva\") == \"volga\"\nassert solution(\"no\") == \"no\"\nassert solution(\"abba\") == \"baba\""
    },
    {
        "number": 1135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nhacker\") == \"hac\"\nassert solution(\"4\\nabracadabra\") == \"abracad\"\nassert solution(\"5\\nbanana\") == \"anana\"\nassert solution(\"6\\nzoo\") == \"az\"\nassert solution(\"7\\nalpha\") == \"aplha\"\n"
    },
    {
        "number": 1135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"logva\") == \"volga\"\nassert solution(\"no\") == \"no\"\nassert solution(\"abba\") == \"baba\"\n\n\"\"\""
    },
    {
        "number": 1135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\nlogva''') == 'volga'\nassert solution('''2\nno''') == 'no'\nassert solution('''4\nabba''') == 'baba'\n\nassert solution('''5\nabc''') == 'cba'\nassert solution('''2\nbc''') == 'ac'\n"
    },
    {
        "number": 1135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nabc\") == \"cba\"\nassert solution(\"4\\naabb\") == \"bba\"\nassert solution(\"5\\naba\") == \"baa\"\nassert solution(\"3\\nlogva\") == \"volga\"\nassert solution(\"2\\nno\") == \"no\"\n"
    },
    {
        "number": 1136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4') == '4'\n\nassert solution('4 4') == '1'\n\nassert solution('1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 1136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 1136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n''') == '4'\n"
    },
    {
        "number": 1136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == '1'\nassert solution('1 1') == '0'\nassert solution('1 10') == '5'\nassert solution('1 10000') == '5'\nassert solution('1 100000') == '5'\n"
    },
    {
        "number": 1136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"4\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"10 13\") == \"0\"\nassert solution(\"8 10\") == \"7\"\n"
    },
    {
        "number": 1136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4') == '1'\nassert solution('1 1') == '0'\nprint('Test PASSED')\n"
    },
    {
        "number": 1136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"4\"\nassert solution(\"4 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 1136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(4 4) == 1\n\nsolution(\"4 4\") == 1\n\nsolution(\"1 1\") == 0\n"
    },
    {
        "number": 1136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4') == '1'\nassert solution('1 1') == '0'\nprint('Test pass.')\n\n\"\"\"\n"
    },
    {
        "number": 1136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4') == '1'\nassert solution('1 1') == '0'\n\"\"\"\n\na, b = map(int, stdin.readline().split())\nprint(sum(range(a, b + 1)) % (10 ** 9 + 7))\n"
    },
    {
        "number": 1137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\", \"ab\", 3) == 2\n\"\"\"\n"
    },
    {
        "number": 1137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 2 2\nabc\nab''') == 2\nassert solution('''9 12 4\nbbaaababb\nabbbabbaaaba''') == 7\n"
    },
    {
        "number": 1137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2 2\nabc\nab\n''') == 2\n\"\"\"\n"
    },
    {
        "number": 1137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\", \"ab\") == 2\n\"\"\"\n\nfrom collections import defaultdict\nimport itertools"
    },
    {
        "number": 1137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\", \"ab\", 1) == 2\nassert solution(\"ab\", \"ab\", 1) == 0\n\"\"\""
    },
    {
        "number": 1137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_0) == 7\n"
    },
    {
        "number": 1137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 2\\nabc\\nab') == 2\n\n-----"
    },
    {
        "number": 1137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\", \"ab\") == 1\n\"\"\""
    },
    {
        "number": 1137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\", \"b\") == 1\nassert solution(\"aa\", \"aa\") == 0\nassert solution(\"ab\", \"ab\") == 1\nassert solution(\"aab\", \"ab\") == 2\nassert solution(\"aab\", \"aabb\") == 3\n"
    },
    {
        "number": 1137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\nassert solution(test_stdin_2) == test_stdout_2\n\"\"\""
    },
    {
        "number": 1138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RRU\") == -1\nassert solution(\"UDUR\") == 1\nassert solution(\"RUUR\") == 2\n"
    },
    {
        "number": 1138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RUUR') == '2'\nassert solution('UDUR') == '-1'\nassert solution
    },
    {
        "number": 1138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RUDUR\") == 1\nassert solution(\"UDUR\") == 2\nassert solution(\"RDRRLRDRRR\") == -1\nassert solution(\"RUDULRDRDRDRDRUDRDRDRD\") == 10\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"UDUR\") == 1\nassert solution(\"RRU\") == -1\n\n\"\"\"\n"
    },
    {
        "number": 1138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"UU\") == \"U\"\nassert solution(\"URURD\") == \"U\"\nassert solution(\"LUU\") == \"L\"\nassert solution(\"UUDRDRDRUDRD\") == \"U\"\nassert solution(\"UUDLRLRUULR\") == \"U\"\n"
    },
    {
        "number": 1138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRU\") == -1\nassert solution(\"UDUR\") == 1\nassert solution(\"RUUR\") == 2\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 1138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('U') == 'U'\nassert solution('DDRRUDRDRDRRDRDDRDRDRRDRDRDDRRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR"
    },
    {
        "number": 1138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRU\") == -1\nassert solution(\"UDUR\") == 1\nassert solution(\"RUUR\") == 2\n"
    },
    {
        "number": 1138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRU\") == -1\nassert solution(\"UDUR\") == 1\nassert solution(\"RUUR\") == 2\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        s = stdin\n        cnt = 0\n        for i in range(len(s)):\n            if s[i] == 'L' and s[i+1] == 'R':\n                s = s[:i] + 'R' + s[i+1:]\n                cnt += 1\n            elif s[i] == 'R' and s[i+1] == 'L':\n                s = s[:i] + 'L' + s[i+1:]\n                cnt += 1\n        return cnt\n"
    },
    {
        "number": 1138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRU\") == -1\nassert solution(\"UDUR\") == 1\n\"\"\""
    },
    {
        "number": 1139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n2\\n1 2\\n3 5\\n2\\n1 3\\n4 5\\n3\\n1 1\\n2 4\\n5 5\\n3') == '36'\n"
    },
    {
        "number": 1139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n2\\n1 2\\n3 5\\n2\\n1 3\\n4 5\\n3\") == \"36\"\n\"\"\"\n\nfrom itertools import combinations\nfrom collections import namedtuple\n\nn, m = [int(x) for x in input().split()]\n"
    },
    {
        "number": 1139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n2\\n1 2\\n3 5\\n2\\n1 3\\n4 5\\n3\") == \"36\"\n\"\"\"\n\nfrom collections import namedtuple\n\nnum_rows, num_cols = [int(x) for x in stdin.readline().split()]\n\nInterval = namedtuple('Interval', ('left', 'right'))\n\nintervals = []\n\nfor _ in range(num_rows):\n    row_length = int(stdin.readline())\n    intervals.append([])\n    for _ in range(row_length):\n        left, right = [int(x) for x in stdin.readline().split()]\n        intervals[-1].append(Interval(left, right))\n\nquality = 0\nfor col in range(num_cols):\n    col_sum = 0\n    for row in range(num_rows):\n        col_sum += sum(i.right for i in intervals[row] if i.left <= col + 1 <= i.right)\n    quality = max(quality, col_sum ** 2)\n\nprint(quality)\n"
    },
    {
        "number": 1139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n2\\n1 2\\n3 5\\n2\\n1 3\\n4 5\\n3\") == \"36\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n2\\n1 2\\n3 5\\n2\\n1 3\\n4 5\\n3\\n1 1\\n2 4\\n5 5\\n3\\n1 1\\n2 2\\n3 5\") == \"36\"\n\"\"\"\n"
    },
    {
        "number": 1139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n2\\n1 2\\n3 5\\n2\\n1 3\\n4 5\\n3\") == \"36\"\nassert solution(\"4 5\\n2\\n1 3\\n4 5\\n3\") == \"36\"\nassert solution(\"4 5\\n2\\n1 3\\n5 5\\n3\") == \"25\"\n\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 1139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n2\\n1 2\\n3 5\\n2\\n1 3\\n4 5\\n3\\n1 1\\n2 2\\n5 5\\n3\\n1 1\\n2 2\\n3 5\") == '36'\n\"\"\"\n"
    },
    {
        "number": 1139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2\\n1 2\\n3 5\\n2\\n1 3\\n4 5\\n3\\n1 1\\n2 4\\n5 5\\n3\\n1 1\\n2 2\\n3 5\") == \"36\"\nassert solution(\"3 3\\n1\\n1 2\\n2 3\") == \"6\"\nassert solution(\"5 5\\n2\\n2 4\\n3 2\\n4 5\") == \"20\"\nassert solution(\"5 5\\n2\\n1 2\\n3 2\\n4 5\") == \"16\"\nassert solution(\"5 5\\n2\\n1 2\\n3 2\\n4 5\") == \"16\"\n"
    },
    {
        "number": 1139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4 5\n2\n1 2\n3 5\n2\n1 3\n4 5\n3\n1 1\n2 4\n5 5\n3\n1 1\n2 2\n3 5\n\"\"\") == '36'\n"
    },
    {
        "number": 1139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 1140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n2 3') == '1 1'\nassert solution('3 1 2 3 1\\n1 4 5') == '2 4'\nassert solution('5\\n3 1 2 3 1') == '2 4'\nassert solution('2 4 2\\n4 2') == '0 2'\nassert solution('3 4 5\\n4 3') == '1 1'\n"
    },
    {
        "number": 1140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\") == \"1 1\"\nassert solution(\"3\\n1 4 5\") == \"4 1\"\nassert solution(\"5\\n3 1 2 3 1\") == \"2 4\"\nassert solution(\"5\\n1 4 5 3 1\") == \"2 4\"\n\"\"\"\nfrom sys import stdin\nfrom typing import List\n\nn = int(stdin.readline())\nb = [int(x) for x in stdin.readline().split()]\n"
    },
    {
        "number": 1140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2 3 1\") == \"2 4\"\nassert solution(\"5 1 4 3 2\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 1140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2\\n') == '1 1'\nassert solution('3\\n1 4 5\\n') == '2 4'\nassert solution('5\\n3 1 2 3 1\\n') == '2 4'\n\"\"\"\n"
    },
    {
        "number": 1140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2\n1 2''') == '1 1'\nassert solution('''3\n1 4 5''') == '4 1'\nassert solution('''5\n3 1 2 3 1''') == '2 4'\n\nassert solution('''5\n3 1 2 3 1''') == '2 4'\nassert solution('''3\n1 4 5''') == '4 1'\n"
    },
    {
        "number": 1140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\\n\") == \"1 1\"\nassert solution(\"3\\n1 4 5\\n\") == \"2 4\"\nassert solution(\"5\\n3 1 2 3 1\\n\") == \"2 4\""
    },
    {
        "number": 1140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\") == \"1 1\"\nassert solution(\"3\\n1 4 5\") == \"2 4\"\nassert solution(\"5\\n3 1 2 3 1\") == \"2 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 1\"\n"
    },
    {
        "number": 1140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 3 1\") == \"2 4\"\nassert solution(\"5 1 2 3 1\") == \"2 4\"\nassert solution(\"3 1 2 3 1\") == \"2 4\"\nassert solution(\"3 1 2 3 1\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 1140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 4 5\\n\") == \"2 4\"\nassert solution(\"5\\n3 1 2 3 1\\n\") == \"2 4\"\nassert solution(\"5\\n3 1 1 1 3\\n\") == \"3 3\"\nassert solution(\"5\\n1 1 1 1 1\\n\") == \"0 0\"\nassert solution(\"5\\n1 2 1 1 1\\n\") == \"3 1\"\n\n\"\"\""
    },
    {
        "number": 1140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 2 3\") == \"1 1\"\nassert solution(\"3 1 2 3 1\") == \"2 4\"\nassert solution(\"5 1 4 3 2\") == \"2 4\""
    },
    {
        "number": 1141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ioi\\n1 1 i n\\n\") == \"noi\"\nassert solution(\"wxhak\\n3 3 h x\\n1 5 x a\\n1 3 w g\\n\") == \"gaaak\"\nprint('test passed')\n"
    },
    {
        "number": 1141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ioi\\n1 1 i n\") == \"noi\"\nassert solution(\"wxhak\\n3 3 h x\\n1 5 x a\\n1 3 w g\") == \"gaaak\"\n\n\"\"\"\n\nimport itertools\nimport sys\nimport typing\n\nfrom typing import Iterable, List, Dict, Tuple, TextIO\n"
    },
    {
        "number": 1141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1\nioi\n1 1 i n''') == 'noi'\nassert solution('''5 3\nwxhak\n3 3 h x\n1 5 x a\n1 3 w g''') == 'gaaak'''\nassert solution('''4 3\n1 1 e n\n1 3 e n\n1 1 e n\n1 3 e n''') == 'enen'\n"
    },
    {
        "number": 1141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ioi\") == \"noi\"\nassert solution(\"wxhak\") == \"gaaak\"\nassert solution(\"qazxswedcvfrtgbnhyujmkiolp\") == \"ypzjhxvdsvfrtgbnhyujmkiolp\"\nassert solution(\"asdfghjkl;123\") == \"zxcvbnm,;123\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 1141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ioi') == 'noi'\nassert solution('wxhak') == 'gaaak'\nassert solution('ioi') == 'noi'\nassert solution('ioi') == 'noi'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ioi\\n1 1 i n\\n\") == \"noi\"\nassert solution(\"wxhak\\n3 3 h x\\n1 5 x a\\n1 3 w g\\n\") == \"gaaak\"\n\n\"\"\"\n\nimport sys\n\nsys.stdin = open('test.txt', 'r')\n\nn, m = list(map(int, input().split(' ')))\na = list(input())\nfor i in range(m):\n    l, r, c_1, c_2 = list(map(str, input().split(' ')))\n    a[int(l) - 1:int(r)] = [c_2 for _ in range(len(a[int(l) - 1:int(r)]))]\nprint(''.join(a))\n"
    },
    {
        "number": 1141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ioi\") == \"noi\"\nassert solution(\"wxhak\") == \"gaaak\"\nassert solution(\"abc\") == \"abc\"\n\"\"\"\n"
    },
    {
        "number": 1141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ioi\\n1 1 i n\\n\") == \"noi\"\nassert solution(\"wxhak\\n3 3 h x\\n1 5 x a\\n1 3 w g\\n\") == \"gaaak\""
    },
    {
        "number": 1141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 1\nioi\n1 1 i n''') == 'noi'\nassert solution('''5 3\nwxhak\n3 3 h x\n1 5 x a\n1 3 w g''') == 'gaaak'\n"
    },
    {
        "number": 1141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ioi') == 'noi'\nassert solution('wxhak') == 'gaaak'\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 1142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 6\\n3 4 3\\n\") == \"9\"\nassert solution(\"2 5 11\\n10 12 15\\n\") == \"30\"\nassert solution(\"1 10\\n100 111 1\\n\") == \"1\"\n\"\"\"\n\nimport sys\nfrom typing import NamedTuple, Set, List, Dict, TextIO\nfrom collections import deque\n\n\nclass Wave(NamedTuple):\n    l: int\n    r: int\n    amt: int\n    bullets: int\n\n\nclass Solution:\n    def get_bullets_used(self, waves: List[Wave], magazine: int) -> int:\n        bullets_used: int = 0\n        magazine = min(magazine, sum(wave.amt for wave in waves))\n        for wave in waves:\n            bullets_used += max(magazine - wave.amt, 0)\n            magazine -= max(magazine - wave.amt, 0)\n            if magazine == 0:\n                break\n        return bullets_used\n\n    def get_bullets_thrown(self, waves: List[Wave], magazine: int) -> int:\n        return sum(wave.amt for wave in waves)\n\n    def get_bullets_total(self, waves: List[Wave], magazine: int) -> int:\n        return sum(wave.amt * wave.bullets for wave in waves)\n\n    def solve(self, stdin: TextIO) -> int:\n        waves: List[Wave] = []\n        for l, r, amt in [wave.l, wave.r, wave.amt] for wave in self.read_waves(stdin)]:\n            waves.append(Wave(l, r, amt, r - l + 1))\n        magazine: int = int(stdin.readline())\n        return min(\n            self.get_bullets_used(waves, magazine),\n            self.get_bullets_thrown(waves, magazine),\n            self.get_bullets_total(waves, magazine)\n        )\n\n    def read_waves(self, stdin: TextIO) -> List[Wave]:\n        for l, r, amt in [int(s) for s in stdin.readline().split()]:\n            yield Wave(l, r, amt, r - l + 1)\n"
    },
    {
        "number": 1142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 6\\n3 4 3\\n\") == '9'\nassert solution(\"2 5\\n3 7 11\\n10 12 15\\n\") == '-1'\nassert solution(\"1 10\\n100 111 1\\n\") == '1'\n"
    },
    {
        "number": 1142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 6\\n3 4 3\") == \"9\"\nassert solution(\"2 5\\n3 7 11\\n10 12 15\") == \"30\"\nassert solution(\"5 42\\n42 42 42\\n42 43 42\\n43 44 42\\n44 45 42\\n45 45 1\") == \"-1\"\nassert solution(\"1 10\\n100 111 1\") == \"1\"\n"
    },
    {
        "number": 1142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 6\\n3 4 3\") == \"9\"\nassert solution(\"2 5\\n3 7 11\") == \"30\"\nassert solution(\"1 10\\n100 111 1\") == \"1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 1142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 10 2') == '-1'\nassert solution('2 5 1') == '1'\nassert solution('1 10') == '1'\nassert solution('10 10') == '0'\n\"\"\"\n"
    },
    {
        "number": 1142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 3 6\n3 4 3\"\"\") == \"9\"\nassert solution(\"\"\"2 5\n3 7 11\n10 12 15\"\"\") == \"-1\"\nassert solution(\"\"\"1 10\n100 111 1\"\"\") == \"1\"\n"
    },
    {
        "number": 1142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 6\\n3 4 3\") == \"9\"\nassert solution(\"2 5 11\\n10 12 15\") == \"30\"\nassert solution(\"1 10\\n100 111 1\") == \"1\"\nassert solution(\"5 42\\n42 42 42\\n42 43 42\\n43 44 42\\n44 45 42\\n45 45 1\") == \"-1\"\nassert solution(\"1 10\\n100 111 1\") == \"1\"\n\n\n\n-----Test 4-----\nYour task is to determine the minimum number of bullets that you need to spend to clear all waves.\n\nYou have a gun with $k$ bullets and you have $n$ waves to clear. The $i$-th wave consists of $a_i$ monsters and happens from the $l_i$-th moment to the $r_i$-th moment. All $a_i$ monsters spawn at moment $l_i$ and you have to kill all of them before the moment $r_i$ ends. For every two consecutive waves, the second wave starts not earlier than the first wave ends.\n\nFor every wave you throw away the $k$ bullets with the bullets that you have until the moment you reload (not less than the moment when the wave occurs).\n\nIf you do not have enough bullets to clear all waves, return -1.\n\nInput\n4 5\n2 3 6\n3 4 3\n3 5 2\n4 6 1\n\nOutput\n16\n\nInput\n5 42\n42 42 42\n42 43 42\n43 44 42\n44 45 42\n45 45 1\n\nOutput\n-1\n\nInput\n1 10\n100 111 1\n\nOutput\n1\n\nInput\n5 42\n42 42 42\n42 43 42\n43 44 42\n44 45 42\n45 45 1\n\nOutput\n30\n\n\n-----Code-----\n"
    },
    {
        "number": 1142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 6\\n3 4 3\\n\") == '9'\nassert solution(\"2 5\\n3 7 11\\n10 12 15\\n\") == '-1'\nassert solution(\"1 10\\n100 111 1\\n\") == '1'\nassert solution(\"1 100\\n1 1 1\\n\") == '1'\n\n\"\"\""
    },
    {
        "number": 1142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 6\\n3 4 3\\n') == '9'\nassert solution('2 5 11\\n10 12 15\\n') == '30'\nassert solution('5 42\\n42 42 42\\n42 43 42\\n43 44 42\\n44 45 42\\n45 45 1\\n') == '-1'\nassert solution('1 10\\n100 111 1\\n') == '1'\n\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 1142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 6\\n3 4 3\\n\") == \"9\"\nassert solution(\"2 5\\n3 7 11\\n10 12 15\\n\") == \"30\"\nassert solution(\"1 10\\n100 111 1\\n\") == \"1\"\n"
    },
    {
        "number": 1143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5 1 2\") == 2\nassert solution(\"3 13 2 3\") == 3\n\"\"\""
    },
    {
        "number": 1143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n5 23 1 2\\n3 13 2 3') == '2'\nassert solution('3\\n12 9 2 1\\n12 8 1 3\\n12 8 2 2') == '3'\nassert solution('1\\n1 10 1 13') == '1'\n\nprint('Hooray!')\n\"\"\"\n\nimport math"
    },
    {
        "number": 1143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10 1 3') == 3\n\"\"\"\n"
    },
    {
        "number": 1143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 23 1 2\\n3 13 2 3\\n12 8 1 3\\n12 8 2 2\") == \"2\"\nassert solution(\"5 23 1 2\\n12 9 2 1\\n12 8 1 3\\n12 8 2 2\") == \"3\"\nassert solution(\"5 23 1 2\\n12 9 2 1\\n12 8 1 3\\n12 8 2 2\\n12 8 1 3\") == \"3\"\nassert solution(\"5 23 1 2\\n12 9 2 1\\n12 8 1 3\\n12 8 2 2\\n12 8 1 3\\n12 8 1 3\\n12 8 2 2\") == \"2\"\nassert solution(\"5 23 1 2\\n12 9 2 1\\n12 8 1 3\\n12 8 2 2\\n12 8 1 3\\n12 8 1 3\\n12 8 2 2\\n12 8 1 3\") == \"2\"\n"
    },
    {
        "number": 1143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5 1 2\") == \"2\"\nassert solution(\"3 13 2 3\") == \"3\"\nassert solution(\"1 10 1 13\") == \"1\"\n"
    },
    {
        "number": 1143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 2\\n3 12 2 3\") == \"2\"\nassert solution(\"3 13 2 3\\n12 9 2 1\\n12 8 1 3\") == \"3\"\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\n\nN = int(INPUT_LINES[0])\n\nA = []\n\nfor line in INPUT_LINES[1:]:\n    A.append([int(i) for i in line.split()])\n\nprint(A)\n\nD = {}\n\nfor i, _ in enumerate(A):\n    x = A[i][0]\n    y = A[i][1]\n    z = A[i][2]\n    w = A[i][3]\n    if (x, y) not in D:\n        D[(x, y)] = (z, w)\n    else:\n        z_old, w_old = D[(x, y)]\n        D[(x, y)] = (max(z, z_old), max(w, w_old))\n\nprint(D)\n"
    },
    {
        "number": 1143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 23 1 2\") == \"2\"\nassert solution(\"3 13 2 3\") == \"3\"\nassert solution(\"1 10 1 13\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 1143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 3 2\\n2 10 3 4\") == \"2\"\nassert solution(\"3 9 2 1\\n3 12 1 3\") == \"3\"\nassert solution(\"3 9 2 1\\n3 12 2 3\") == \"2\"\n"
    },
    {
        "number": 1143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5 1 2\\n2 13 2 3\") == \"2\"\n\"\"\"\n\nimport datetime\nimport math\n"
    },
    {
        "number": 1143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 23 1 2\") == \"2\"\nassert solution(\"3 13 2 3\") == \"3\"\nassert solution(\"1 10 1 13\") == \"1\"\n"
    },
    {
        "number": 1144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba?aba??\") == 2\nassert solution(\"bb?a??\") == 2\nassert solution(\"bbbaaaaa??\") == 2\nassert solution(\"aabaaa??\") == 4\nassert solution(\"abb?aa\") == 2\n"
    },
    {
        "number": 1144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('bb?a?', '1') == '2'\nassert solution('ab??ab???', '3') == '2'\n"
    },
    {
        "number": 1144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bb?a?') == '2'\nassert solution('ab??ab???') == '2'\nassert solution('ab??a') == '0'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 1144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bb?a?b\") == 2\n"
    },
    {
        "number": 1144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bb?a?\\n1\") == \"2\"\nassert solution(\"ab??ab???\\n3\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 1144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaabbb') == 3\nassert solution('ab??a') == 2\nassert solution('????a') == 4\nassert solution('aaaaa') == 0\nassert solution('abc??de') == 4\n"
    },
    {
        "number": 1144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bb?a?') == '2'\nassert solution('ab??ab???') == '2'\nassert solution('b?b??') == '0'\nassert solution('a?a?a?') == '0'\nassert solution('???') == '0'\n"
    },
    {
        "number": 1144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bb?a?\\n1\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 1144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bb?a?') == 2\n\"\"\"\n"
    },
    {
        "number": 1144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bb?a??\") == 2\n\nassert solution(\"ab??ab???\") == 2\n\nassert solution(\"a?a?a?a\") == 2\n\"\"\""
    },
    {
        "number": 1145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3 1 4\") == 1\nassert solution(\"5 1 2 3 2 5\") == 2\n"
    },
    {
        "number": 1145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 1 4\") == \"1\", \"Too few\"\nassert solution(\"5\\n1 2 3 2 5\") == \"2\", \"Too few\""
    },
    {
        "number": 1145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 1 4\") == 1\nassert solution(\"5\\n1 2 3 2 5\") == 2\n\"\"\"\n"
    },
    {
        "number": 1145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 1 4\") == 1\n\"\"\""
    },
    {
        "number": 1145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 1 4') == '1'\nassert solution('5\\n1 2 3 2 5') == '2'"
    },
    {
        "number": 1145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3 1 4\") == \"1\"\nassert solution(\"5 1 2 3 2 5\") == \"2\"\n\n---"
    },
    {
        "number": 1145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 1 4\") == 1\nassert solution(\"5\\n1 2 3 2 5\") == 2\nassert solution(\"1\\n1\") == 0\nassert solution(\"2\\n1 1\") == 0\nassert solution(\"3\\n1 1 1\") == 0\n"
    },
    {
        "number": 1145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 1 4') == '1'\nassert solution('5\\n1 2 3 2 5') == '2'\n\"\"\""
    },
    {
        "number": 1145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n1 3 1 4''') == 1\nassert solution('''5\n1 2 3 2 5''') == 2'''\n"
    },
    {
        "number": 1145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 1 4\") == \"1\", \"Base\"\nassert solution(\"5\\n1 2 3 2 5\") == \"2\", \"Three\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"3\", \"Four\"\nprint(\"Looks good!\")\n"
    },
    {
        "number": 1146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2) == 'YES'\nassert solution(2, 3) == 'NO'\nassert solution(4, 1) == 'YES'\nassert solution(5, 2) == 'YES'\nassert solution(6, 3) == 'NO'\n"
    },
    {
        "number": 1146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n2 1 4\\n3 1 3 1\\n1 2\\n') == 'YES'\nassert solution('3 3\\n1 1\\n1 2\\n1 1\\n') == 'NO'\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nlamps = [[0]*m for _ in range(n)]\n\nfor _ in range(n):\n    x, y = map(int, sys.stdin.readline().split())\n    lamps[x-1][y-1] = 1\n\nfor _ in range(m):\n    x, y = map(int, sys.stdin.readline().split())\n    lamps[x-1][y-1] = 2\n"
    },
    {
        "number": 1146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 4\n2 1 4\n3 1 3 1\n1 2\n''') == 'YES'\n\"\"\""
    },
    {
        "number": 1146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n2 1 4\\n3 1 3 1\\n1 2\") == \"YES\"\nassert solution(\"3 3\\n1 1\\n1 2\\n1 1\") == \"NO\"\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 1146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n2 1 4\\n3 1 3 1\\n1 2') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 1146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n2 1 4\\n3 1 3 1\\n1 2\") == \"YES\"\nassert solution(\"3 3\\n1 1\\n1 2\\n1 1\\n\") == \"NO\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 1146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n2 1 4\\n3 1 3 1\\n1 2') == 'YES'\nassert solution('3 3\\n1 1\\n1 2\\n1 1') == 'NO'\n\n\"\"\"\n\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 1146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n2 1 4\\n3 1 3 1\\n1 2\\n\") == \"YES\"\nassert solution(\"3 3\\n1 1\\n1 2\\n1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 1146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n2 1 4\\n3 1 3 1\\n1 2\\n\") == \"YES\"\nassert solution(\"3 3\\n1 1\\n1 2\\n1 1\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 1146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n1 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 1147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 1\\n1 3 5 7') == '3'\nassert solution('5 3 1\\n3 3 3 3 3') == '25'\n\"\"\"\n\nimport sys\n\nn, x, k = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n"
    },
    {
        "number": 1147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1\\n1 3 5 7\") == \"3\"\nassert solution(\"5 3 1\\n3 3 3 3 3\") == \"25\""
    },
    {
        "number": 1147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('5 2 1\\n1 3 5 7') == 3\nassert solution('4 2 0\\n5 3 1 7') == 4\n\nassert solution('5 3 1\\n3 3 3 3 3') == 25\n\n'''\n\nn, x, k = map(int, stdin.readline().split())\narr = list(map(int, stdin.readline().split()))\n\npairs = set()\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if arr[i] <= arr[j] and arr[i] % x == 0 and arr[j] % x == 0:\n            pairs.add((i, j))\n\nprint(len(pairs))\n"
    },
    {
        "number": 1147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\\n1 3 5 7\") == \"3\"\nassert solution(\"5 2 0\\n5 3 1 7\") == \"4\"\nassert solution(\"5 3 1\\n3 3 3 3 3\") == \"25\"\n"
    },
    {
        "number": 1147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1\\n1 3 5 7\") == \"3\"\nassert solution(\"5 3 1\\n3 3 3 3 3\") == \"25\"\n\nprint(solution(\"5 3 1\\n3 3 3 3 3\"))\n\nprint(solution(\"4 2 0\\n5 3 1 7\"))\n\nprint(solution(\"5 3 0\\n3 3 3 3 3\"))\n\n\"\"\""
    },
    {
        "number": 1147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1\\n1 3 5 7\") == \"3\"\nassert solution(\"4 2 0\\n5 3 1 7\") == \"4\"\nassert solution(\"5 3 1\\n3 3 3 3 3\") == \"25\"\n\n\"\"\""
    },
    {
        "number": 1147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 1\\n1 3 5 7') == '3'\nassert solution('4 2 0\\n5 3 1 7') == '4'\nassert solution('5 3 1\\n3 3 3 3 3') == '25'\n"
    },
    {
        "number": 1147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 1\\n1 3 5 7') == 3\nassert solution('4 2 0\\n5 3 1 7') == 4\nassert solution('5 3 1\\n3 3 3 3 3') == 25\nassert solution('5 3 1\\n3 3 3 3 3') == 25\nassert solution('5 3 1\\n3 5 5 7') == 4\n"
    },
    {
        "number": 1147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4 2 1\\n1 3 5 7'\n) == 3\nassert solution(\n    '4 2 0\\n5 3 1 7'\n) == 4\nassert solution(\n    '5 3 1\\n3 3 3 3 3'\n) == 25\n\n\n\"\"\""
    },
    {
        "number": 1147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1\\n1 3 5 7\") == \"3\"\nassert solution(\"4 2 0\\n5 3 1 7\") == \"4\"\nassert solution(\"5 3 1\\n3 3 3 3 3\") == \"25\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 1148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 2 3 3\\n\") == \"12\"\nassert solution(\"3\\n5 5 5\\n\") == \"15\"\nassert solution(\"6\\n10 10 10 1 10 10\\n\") == \"11\"\nprint('The code ran Correctly')"
    },
    {
        "number": 1148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 2 3 3\") == \"12\"\nassert solution(\"3\\n5 5 5\") == \"15\"\nassert solution(\"6\\n10 10 10 1 10 10\") == \"11\"\n"
    },
    {
        "number": 1148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 2 3 3\") == \"12\"\nassert solution(\"3\\n5 5 5\") == \"15\"\n\"\"\"\n\nimport sys\n\nlines = list(sys.stdin.readlines())\n\ncolor_counts = [int(line) for line in lines[1].split()]\n\nprint(sum(color_counts))\n"
    },
    {
        "number": 1148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 2 3 3') == '12'\nassert solution('3\\n5 5 5') == '15'\nassert solution('6\\n10 10 10 1 10 10') == '11'\n\n\"\"\""
    },
    {
        "number": 1148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 4 2 3 3\") == \"12\"\nassert solution(\"3\\n5 5 5\") == \"15\"\nassert solution(\"6\\n10 10 10 1 10 10\") == \"11\"\nassert solution(\"1\\n5 5 5\") == \"15\"\nassert solution(\"2\\n10 10 10 1 10 10\") == \"11\"\n"
    },
    {
        "number": 1148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 3 2 1\") == \"12\"\nassert solution(\"5 5 5\") == \"15\"\nassert solution(\"6 10 10 1 10 10\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 1148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 2 3 3\") == 12\n\"\"\"\n"
    },
    {
        "number": 1148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 2 3 3\\n\") == \"12\"\nassert solution(\"3\\n5 5 5\\n\") == \"15\"\nassert solution(\"6\\n10 10 10 1 10 10\\n\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 1148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 4 2 3 3\") == \"12\"\nassert solution(\"3\\n5 5 5\") == \"15\"\nassert solution(\"6\\n10 10 10 1 10 10\") == \"11\"\n"
    },
    {
        "number": 1148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 4 2 3 3\\n\") == \"12\"\nassert solution(\"6\\n10 10 10 1 10 10\\n\") == \"11\""
    },
    {
        "number": 1149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n3 1 2 3\n2 2 3''') == 'I become the guy.'\nassert solution('''4\n3 1 2 3\n2 2 3''') == 'Oh, my keyboard!'\nassert solution('''4\n3 1 2 3\n2 2 4''') == 'I become the guy.'"
    },
    {
        "number": 1149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 1 2 3\\n2 2 4\") == \"I become the guy.\"\nassert solution(\"4 3 1 2 3\\n2 2 3\") == \"Oh, my keyboard!\"\nassert solution(\"4 4 4 4\\n4 4 4\") == \"Oh, my keyboard!\"\n\"\"\""
    },
    {
        "number": 1149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2 3\\n2 2 3') == 'I become the guy.'\nassert solution('4 1 2 3\\n2 2 4') == 'Oh, my keyboard!'\n\n\"\"\"\n"
    },
    {
        "number": 1149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 1 2 3\\n2 2 4\") == 'I become the guy.'\nassert solution(\"4\\n3 1 2 3\\n2 2 3\") == \"Oh, my keyboard!\"\nassert solution(\"4\\n3 1 2 3\\n1 3 3\") == \"Oh, my keyboard!\"\nassert solution(\"4\\n2 1 1 2\\n1 1 1\") == \"Oh, my keyboard!\"\nassert solution(\"4\\n2 1 2 3\\n1 1 2\") == \"Oh, my keyboard!\"\n"
    },
    {
        "number": 1149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 1 2 3\\n2 2 4\") == \"I become the guy.\"\nassert solution(\"4\\n3 1 2 3\\n2 2 3\") == \"Oh, my keyboard!\"\n\n\n\"\"\""
    },
    {
        "number": 1149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 2 3\\n2 2 3') == 'I become the guy.'\n\nassert solution('4\\n3 1 2 3\\n2 2 4') == 'Oh, my keyboard!'\n\nassert solution('4\\n2 1 2 3\\n2 2 4') == 'Oh, my keyboard!'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 1 2 3\\n2 2 4\") == \"I become the guy.\"\nassert solution(\"4\\n3 1 2 3\\n2 2 3\") == \"Oh, my keyboard!\""
    },
    {
        "number": 1149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 1 2 3\\n2 2 4') == 'I become the guy.'\nassert solution('4\\n3 1 2 3\\n2 2 3') == 'Oh, my keyboard!'\n"
    },
    {
        "number": 1149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 1 2 3\\n2 2 3\") == \"I become the guy.\"\n\"\"\""
    },
    {
        "number": 1149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 1 2 3\\n2 2 3\") == 'I become the guy.'\nassert solution(\"4\\n3 1 2 3\\n2 2 3\") == 'Oh, my keyboard!'\n\"\"\"\n\nimport unittest\n\nfrom collections import Counter"
    },
    {
        "number": 1150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-2 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n2 2 0 1\\n-1 0 0 -2\\n3 0 0 -2\\n-1 1 -2 0\") == \"1\\n-1\\n3\"\nassert solution(\"4\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n-1 -1 0 0\") == \"-1\\n\"\n\"\"\"\n\nimport unittest\nimport math\n"
    },
    {
        "number": 1150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-2 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n2 2 0 1\\n-1 0 0 -2\\n3 0 0 -2\\n-1 1 -2 0\") == \"1\\n-1\\n3\"\n"
    },
    {
        "number": 1150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0 0\\n1 1 0 0 0\\n-2 1 0 0 0\\n-1 1 0 0 0\\n1 -1 0 0 0 0\\n1 1 0 0 0 0\\n-1 1 0 0 0 0\") == \"1\\n-1\\n3\\n3\""
    },
    {
        "number": 1150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-2 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\") == \"1\"\nassert solution(\"4\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\") == \"-1\"\nassert solution(\"4\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\") == \"3\"\nassert solution(\"4\\n0 0 0 0\\n-1 0 0 0\\n-1 0 0 0\\n0 0 0 0\") == \"3\"\nassert solution(\"4\\n0 0 0 0\\n-1 0 0 0\\n-1 0 0 0\\n0 0 0 0\") == \"3\"\n"
    },
    {
        "number": 1150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0 0\\n1 1 0 0 0\\n-2 1 0 0 0\\n-1 1 0 0 0\\n1 -1 0 0 0 0\\n1 1 0 0 0 0\\n-1 1 0 0 0 0\") == \"1\"\nassert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0 0\\n1 1 0 0 0\\n-2 1 0 0 0\\n-1 1 0 0 0\\n1 -1 0 0 0 0\\n1 1 0 0 0 0\") == \"3\"\nassert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0 0\\n1 1 0 0 0\\n-2 1 0 0 0\\n-1 1 0 0 0\\n1 -1 0 0 0 0\\n1 1 0 0 0 0\") == \"-1\"\n"
    },
    {
        "number": 1150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 1 0 0\\n-1 1 0 0\") == \"1\"\nassert solution(\"3\\n1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\") == \"3\"\nassert solution(\"3\\n1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\") == \"-1\"\nassert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\") == \"3\"\nassert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\") == \"2\"\n"
    },
    {
        "number": 1150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-2 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n2 2 0 1\\n-1 0 0 -2\\n3 0 0 -2\\n-1 1 -2 0\") == \"1\\n-1\\n3\\n3\"\nassert solution(\"3\\n0 0 0\\n1 0 0\\n0 1 0\") == \"1\\n-1\\n2\"\nassert solution(\"2\\n0 0 0\\n1 0 0\") == \"1\\n-1\\n1\"\n"
    },
    {
        "number": 1150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-2 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n2 2 0 1\\n-1 0 0 -2\\n3 0 0 -2\\n-1 1 -2 0\") == \"1\\n-1\\n3\\n3\"\nassert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-2 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n2 2 0 1\\n-1 0 0 -2\\n3 0 0 -2\\n-1 1 -2 0\") == \"1\\n-1\\n3\\n3\"\n"
    },
    {
        "number": 1150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-2 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n2 2 0 1\\n-1 0 0 -2\\n3 0 0 -2\\n-1 1 -2 0\\n\") == \"1\\n-1\\n3\\n3\"\n\nassert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-2 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n2 2 0 1\\n-1 0 0 -2\\n3 0 0 -2\\n-1 1 -2 0\\n\") == \"1\\n-1\\n3\\n3\"\n\nassert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-2 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n2 2 0 1\\n-1 0 0 -2\\n3 0 0 -2\\n-1 1 -2 0\\n\") == \"1\\n-1\\n3\\n3\"\n\nassert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-2 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n2 2 0 1\\n-1 0 0 -2\\n3 0 0 -2\\n-1 1 -2 0\\n\") == \"1\\n-1\\n3\\n3\"\n\nassert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-2 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n2 2 0 1\\n-1 0 0 -2\\n3 0 0 -2\\n-1 1 -2 0\\n\") == \"1\\n-1\\n3\\n3\""
    },
    {
        "number": 1150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 0 0\\n-1 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-2 1 0 0\\n-1 1 0 0\\n1 -1 0 0\\n1 1 0 0\\n-1 1 0 0\") == \"3\\n-1\\n3\"\n"
    },
    {
        "number": 1151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 3 5 7') == '0.5'\nassert solution('10 8\\n10 13 15 16 17 19 20 22 24 25') == '0.875'\nassert solution('3 1\\n2 5 10') == '-1'\nprint(solution(input()))\n"
    },
    {
        "number": 1151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 3 5 7\") == \"0.5\"\nassert solution(\"10 8\\n10 13 15 16 17 19 20 22 24 25\") == \"0.875\"\n\"\"\"\n"
    },
    {
        "number": 1151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 3 5 7\") == \"0.5\"\nassert solution(\"10 8\\n10 13 15 16 17 19 20 22 24 25\") == \"0.875\"\nassert solution(\"3 1\\n2 5 10\") == \"-1\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 1151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 3 5 7\") == \"0.5\"\nassert solution(\"10 8\\n10 13 15 16 17 19 20 22 24 25\") == \"0.875\"\nassert solution(\"3 1\\n2 5 10\") == \"-\"\nassert solution(\"3 1\\n1 10 100\") == \"-\"\nassert solution(\"3 3\\n3 4 5\") == \"-\""
    },
    {
        "number": 1151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 3 5 7\") == \"0.5\"\nassert solution(\"10 8\\n10 13 15 16 17 19 20 22 24 25\") == \"0.875\"\nassert solution(\"3 1\\n2 5 10\") == \"-1\"\nassert solution(\"10 8\\n10 13 15 16 17 19 20 22 24 25\") == \"0.875\"\n"
    },
    {
        "number": 1151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 3 5 7\") == \"0.5\"\nassert solution(\"10 8\\n10 13 15 16 17 19 20 22 24 25\") == \"0.875\"\nassert solution(\"3 1\\n2 5 10\") == \"-1\"\nassert solution(\"5 10\\n1 3 5 7 9\") == \"0.5\"\nassert solution(\"5 5\\n1 3 5 7 9\") == \"0.5\"\n"
    },
    {
        "number": 1151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 3 5 7') == '0.5'\nassert solution('10 8\\n10 13 15 16 17 19 20 22 24 25') == '0.875'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 1151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 3 5 7\") == '0.5'\nassert solution(\"10 8\\n10 13 15 16 17 19 20 22 24 25\") == '0.875'\nassert solution(\"3 1\\n2 5 10\") == '-1'\nprint(\"Well done!\")\n"
    },
    {
        "number": 1151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 3 5 7\") == \"0.5\"\nassert solution(\"10 8\\n10 13 15 16 17 19 20 22 24 25\") == \"0.875\"\nassert solution(\"3 1\\n2 5 10\") == \"-1\"\n\nimport sys"
    },
    {
        "number": 1151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 3 5 7\") == \"0.5\"\nassert solution(\"10 8\\n10 13 15 16 17 19 20 22 24 25\") == \"0.875\"\nassert solution(\"3 1\\n2 5 10\") == \"-1\"\n"
    },
    {
        "number": 1152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n0 1 0\\n0 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\") == \"Yes\"\nassert solution(\"3 4\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 0 1 0 1 0 1\\n1 0 1 0 1 0 1\\n1 0 1 0 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\") == \"Yes\"\nassert solution(\"3 4\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\") == \"No\"\nassert solution(\"3 4\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\") == \"No\"\nassert solution(\"3 4\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\") == \"Yes\"\n"
    },
    {
        "number": 1152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n0 1 0\\n0 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0"
    },
    {
        "number": 1152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n0 1 0\\n0 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0') == \"Yes\"\nassert solution('3 4\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 0 1 0 1 0 0\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1') == \"Yes\"\nassert solution('3 3\\n0 1 0\\n0 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0') == \"No\"\nassert solution('3 4\\n0 1 0 1\\n1 0 1 0\\n0 1 0 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1') == \"No\"\nassert solution('6 7\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 0 1 0 1 0 0\\n0 1 0 0 1 0 1\\n0 1 0 1 0 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1') == \"Yes\"\n"
    },
    {
        "number": 1152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n0 1 0\\n0 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\") == \"Yes\"\nassert solution(\"3 4\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\") == \"No\"\nassert solution(\"4 6\\n0 0 1 1 1 1 1\\n1 1 1 1 1 0 1\\n0 1 0 1 0 0 1\\n1 1 1 1 0 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\") == \"Yes\"\n\n\"\"\"\n\nfrom collections import deque\nimport sys\n"
    },
    {
        "number": 1152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n0 1 0\\n0 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\") == \"Yes\"\n\nassert solution(\"6 7\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 0 1 0 1 0 0\\n0 1 0 0 1 0 1\\n0 1 0 1 0 0 1\\n1 1 0 1 0 1 1\\n0 1 1 0 1 0 0\\n1 1 0 1 0 0 1\\n1 1 0 1 0 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 1 1\") == \"Yes\"\n\nassert solution(\"3 4\\n0 1 0 1\\n1 0 1 0\\n0 1 0 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == \"No\"\n\nassert solution(\"4 4\\n0 0 0 0\\n1 1 1 1\\n0 0 0 0\\n1 1 1 1\\n1 1 1 1\") == \"No\"\n\nassert solution(\"4 4\\n0 0 0 0\\n0 1 1 1\\n1 1 1 1\\n0 1 1 1\\n0 0 0 0\\n0 0 0 0\\n0 1 1 1\\n1 1 1 1\") == \"Yes\""
    },
    {
        "number": 1152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n0 1 0\\n0 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0"
    },
    {
        "number": 1152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n0 1 0\\n0 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0') == 'Yes'\nassert solution('6 7\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 0 1 0 1 0 0\\n0 1 0 0 1 0 1\\n0 1 0 1 0 0 1\\n1 1 0 1 0 1 1\\n0 1 1 0 1 0 0\\n1 1 0 1 0 0 1') == 'Yes'\nassert solution('3 4\\n0 1 0 1\\n1 0 1 0\\n0 1 0 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1') == 'No'\n\n\n-----Notes-----\n\nWhen the input is incorrect, the program must print \"No\" (without quotes).\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n0 1 0\\n0 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\") == 'Yes'\nassert solution(\"6 7\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 0 1 0 1 0 0\\n0 1 0 0 1 0 1\\n0 1 0 1 0 0 1\\n1 1 0 1 0 1 1\\n0 1 1 0 1 0 0\\n1 1 0 1 0 0 1\") == 'Yes'\nassert solution(\"3 4\\n0 1 0 1\\n1 0 1 0\\n0 1 0 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == 'No'\n"
    },
    {
        "number": 1152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n0 1 0\\n1 1 0\\n1 0 0\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\") == \"Yes\"\nassert solution(\"3 4\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\") == \"Yes\"\nassert solution(\"6 7\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 0 1 0 1 0 1\\n0 1 0 0 1 0 1\\n0 1 0 1 0 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\\n1 1 1 1 1 0 1\") == \"Yes\"\n"
    },
    {
        "number": 1152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n0 1 0\\n0 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\") == \"Yes\"\nassert solution(\"6 7\\n0 0 1 1 0 0 1\\n0 1 0 0 1 0 1\\n0 0 0 1 0 0 1\\n1 0 1 0 1 0 0\\n0 1 0 0 1 0 1\\n0 1 0 1 0 0 1\\n1 1 0 1 0 1 1\\n0 1 1 0 1 0 0\\n1 1 0 1 0 0 1\") == \"Yes\"\nassert solution(\"3 4\\n0 1 0 1\\n1 0 1 0\\n0 1 0 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == \"No\"\n\n-----Challenge-----\n\nThe number of matrices will be in the order of 100.\n\n\"\"\""
    },
    {
        "number": 1153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 6\\n2 5 3 1 11 4 4\\n7 8 2 4 1 8') == '3'\nassert solution('3 3\\n1 10 100\\n1 100 10') == '2'\nassert solution('1 4\\n4') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 1153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 6\\n2 5 3 1 11 4 4\\n7 8 2 4 1 8\") == \"3\"\n\nassert solution(\"3 3\\n1 10 100\\n1 100 10\") == \"2\"\n\nassert solution(\"1 4\\n4\") == \"1\"\n\nprint(\"The solution is correct!\")\n\n\"\"\"\nimport sys"
    },
    {
        "number": 1153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n7 6\n2 5 3 1 11 4 4\n7 8 2 4 1 8\n\"\"\"\n) == '3'\nassert solution(\n\"\"\"\n3 3\n1 10 100\n1 100 10\n\"\"\"\n) == '2'\nassert solution(\n\"\"\"\n1 4\n4\n1 1 1 1\n\"\"\"\n) == '1'\n\n\"\"\"\n\nIn the first example the maximum number of files in the archive is 3. For example, it is possible that in the archive are three files of sizes 2 + 5 = 7, 15 = 3 + 1 + 11 = 8 + 2 + 4 + 1 and 4 + 4 = 8.\n\nIn the second example it is possible that the archive contains two files of sizes 1 and 110 = 10 + 100 = 100 + 10. Note that the order of files is kept while transferring archives through the network, so we can't say that there are three files of sizes 1, 10 and 100.\n\nIn the third example the only possibility is that the archive contains a single file of size 4.\n\nIn the first example the maximum number of files in the archive is 3. For example, it is possible that in the archive are three files of sizes 2 + 5 = 7, 15 = 3 + 1 + 11 = 8 + 2 + 4 + 1 and 4 + 4 = 8.\n\nIn the second example it is possible that the archive contains two files of sizes 1 and 110 = 10 + 100 = 100 + 10. Note that the order of files is kept while transferring archives through the network, so we can't say that there are three files of sizes 1, 10 and 100.\n\nIn the third example the only possibility is that the archive contains a single file of size 4.\n\nIn the first example the maximum number of files in the archive is 3. For example, it is possible that in the archive are three files of sizes 2 + 5 = 7, 15 = 3 + 1 + 11 = 8 + 2 + 4 + 1 and 4 + 4 = 8.\n\nIn the second example it is possible that the archive contains two files of sizes 1 and 110 = 10 + 100 = 100 + 10. Note that the order of files is kept while transferring archives through the network, so we can't say that there are three files of sizes 1, 10 and 100.\n\nIn the third example the only possibility is that the archive contains a single file of size 4.\n\nIn the first example the maximum number of files in the archive is 3. For example, it is possible that in the archive are three files of sizes 2 + 5 = 7, 15 = 3 + 1 + 11 = 8 + 2 + 4 + 1 and 4 + 4 = 8.\n\nIn the second example it is possible that the archive contains two files of sizes 1 and 110 = 10 + 100 = 100 + 10. Note that the order of files is kept while transferring archives through the network, so we can't say that there are three files of sizes 1, 10 and 100.\n\nIn the third example the only possibility is that the archive contains a single file of size 4.\n\nIn the first example the maximum number of files in the archive is 3. For example, it is possible that in the archive are three files of sizes 2 + 5 = 7, 15 = 3 + 1 + 11 = 8 + 2 + 4 + 1 and 4 + 4 = 8.\n\nIn the second example it is possible that the archive contains two files of sizes 1 and 110 = 10 + 100 = 100 + 10. Note that the order of files is kept while transferring archives through the network, so we can't say that there are three files of sizes 1, 10 and 100.\n\nIn the third example the only possibility is that the archive contains a single file of size 4.\n\nIn the first example the maximum number of files in the archive is 3. For example, it is possible that in the archive are three files of sizes 2 + 5 = 7, 15 = 3 + 1 + 11 = 8 + 2 + 4 + 1 and 4 + 4 = 8.\n\nIn the second example it is possible that the archive contains two files of sizes 1 and 110 = 10 + 100 = 100 + 10. Note that the order of files is kept while transferring archives through the network, so we can't say that there are three files of sizes 1, 10 and 100.\n\nIn the third example the only possibility is that the archive contains a single file of size 4.\n\nIn the first example the maximum number of files in the archive is 3. For example, it is possible that in the archive are three files of sizes 2 + 5 = 7, 15 = 3 + 1 + 11 = 8 + 2 + 4 + 1 and 4 + 4 = 8.\n\nIn the second example it is possible that the archive contains two files of sizes 1 and 110 = 10 + 100 = 100 + 10. Note that the order of files is kept while transferring archives through the network, so we can't say that there are three files of sizes 1, 10 and 100.\n\nIn the third example the only possibility is that the archive contains a single file of size 4.\n\nIn the first example the maximum number of files in the archive is 3. For example, it is possible that in the archive are three files of sizes 2 + 5 = 7, 15 = 3 + 1 + 11 = 8 + 2 + 4 + 1 and 4 + 4 = 8.\n\nIn the second example it is possible that the archive contains two files of sizes 1 and 110 = 10 + 100 = 100 + 10. Note that the order of files is kept while transferring archives through the network, so we can't say that there are three files of sizes 1, 10 and 100.\n\nIn the third example the only possibility is that the archive contains a single file of size 4.\n\nIn the first example the maximum number of files in the archive is 3. For example, it is possible that in the archive are three files of sizes 2 + 5 = 7, 15 = 3 + 1 + 11 = 8 + 2 + 4 + 1 and 4 + 4 = 8.\n\nIn the second example it is possible that the archive contains two files of sizes 1 and 110 = 10 + 100 = 100 + 10. Note that the order of files is kept while"
    },
    {
        "number": 1153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 6\\n2 5 3 1 11 4 4\\n7 8 2 4 1 8\") == \"3\"\nassert solution(\"3 3\\n1 10 100\\n1 100 10\") == \"2\"\nassert solution(\"1 4\\n4\") == \"1\"\n\nimport math"
    },
    {
        "number": 1153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 6\\n2 5 3 1 11 4 4\\n7 8 2 4 1 8\\n\") == 3\nassert solution(\"3 3\\n1 10 100\\n1 100 10\\n\") == 2\nassert solution(\"1 4\\n4\\n1 1 1 1\") == 1\n"
    },
    {
        "number": 1153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"../../resources/input21.txt\").read()) == \"3\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 1153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6\\n2 5 3 1 11 4 4\\n7 8 2 4 1 8\") == \"3\"\nassert solution(\"3 3\\n1 10 100\\n1 100 10\\n\") == \"2\"\nassert solution(\"1 4\\n4\\n1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 1153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 6\\n2 5 3 1 11 4 4\\n7 8 2 4 1 8') == 3\nassert solution('1 4\\n4\\n1 1 1 1') == 1\n"
    },
    {
        "number": 1153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 6\\n2 5 3 1 11 4 4\\n7 8 2 4 1 8\") == 3\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 1153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 6\\n2 5 3 1 11 4 4\\n7 8 2 4 1 8\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5 6 3\n5 4 3 2 1\"\"\") == \"5\"\nassert solution(\"\"\"5 6 3\n5 5 5 5 5\"\"\") == \"10\"\nassert solution(\"\"\"5 6 3\n1 2 1 1 1\"\"\") == \"2\"\n\"\"\""
    },
    {
        "number": 1154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6 3\\n5 4 3 2 1\\n\") == 5\nassert solution(\"5 6 3\\n5 5 5 5 5\\n\") == 10\nassert solution(\"5 6 3\\n1 2 1 1 1\\n\") == 2\n\"\"\""
    },
    {
        "number": 1154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6 3\\n5 4 3 2 1\") == \"5\"\nassert solution(\"5 6 3\\n5 5 5 5 5\") == \"10\"\nassert solution(\"5 6 3\\n1 2 1 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 1154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6 3\\n5 4 3 2 1') == '5'\n\"\"\"\n\nn, h, k = map(int, input().split())\npotato_list = list(map(int, input().split()))"
    },
    {
        "number": 1154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6 3\\n5 4 3 2 1\") == \"5\"\nassert solution(\"5 6 3\\n5 5 5 5 5\") == \"10\"\nassert solution(\"5 6 3\\n1 2 1 1 1\") == \"2\"\nprint('The code ran Correctly')\n\n\n\n\"\"\"\n"
    },
    {
        "number": 1154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6 3\\n5 5 5 5 5\") == \"10\"\nassert solution(\"5 6 3\\n1 2 1 1 1\") == \"2\"\nassert solution(\"5 6 3\\n1 1 1 1 1\") == \"0\""
    },
    {
        "number": 1154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 6 3\n5 5 5 5 5''') == '10'\nassert solution('''5 6 3\n5 5 5 5 5''') == '10'\nassert solution('''5 6 3\n1 2 1 1 1''') == '2'\nassert solution('''5 6 3\n1 1 1 1 1''') == '2'\nassert solution('''5 6 3\n1 1 1 1 1''') == '2'\n\n=======\n=======\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0438 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0443\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u0443\u043c\u043c\u0443 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u0435\u043b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043e\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0449\u0430\u044f\u0441\u044f \u0447\u0438\u0441\u043b\u043e\u043c 0\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\n\u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u043d\u0443\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: 0.\n\nSample Input 1:\n\n1\n2\n3\n4\n5\n0\nSample Output 1:\n\n15\nSample Input 2:\n\n1\n2\n3\n4\n5\n0\nSample Output 2:\n\n0\nSample Input 3:\n\n1\n2\n3\n4\n5\n0\nSample Output 3:\n\n15\n\nn = 0\ns = 0\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    else:\n        s += n\nprint(s)\n\n>>>>>>> b7522ba5389778e8576c407c6c561f68ab2635c7\n"
    },
    {
        "number": 1154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6 3\\n5 4 3 2 1\") == \"5\"\nassert solution(\"5 6 3\\n5 5 5 5 5\") == \"10\"\nassert solution(\"5 6 3\\n1 2 1 1 1\") == \"2\"\nassert solution(\"5 6 3\\n1 2 1 1 1\") == \"2\"\nassert solution(\"5 6 3\\n1 1 1 1 1\") == \"5\"\n\n------\n\n\u0421\u0435\u043c\u044c\u044f \u0438\u0437 \u0441\u0435\u043c\u0435\u0440\u0438\u043a\u0430 \u0437\u0430\u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0438\u0437 \u0433\u043e\u0440\u043e\u0434\u0430 \u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043d\u0430\u0433\u0440\u0430\u0434\u044b \u043f\u0440\u0438\u0448\u043b\u043e \u043a\u0443\u043f\u044e\u0440\u044b \u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e \u0438 \u0440\u0435\u0432\u0435\u0440\u0441\u0438\u0432\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u043a\u0430. \u0412 \u0441\u0435\u043c\u044c\u0435 \u0434\u0435\u0442\u0435\u0439 \u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0443\u043f\u044e\u0440 \u0432\u044b\u0448\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0440\u0430\u0437 \u043c\u0435\u043d\u044c\u0448\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0440\u0430\u0437 \u0441\u0443\u043c\u043c\u0430 \u043d\u0430\u043b\u043e\u0433\u043e\u0432. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0443\u043f\u044e\u0440 \u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e \u0437\u043d\u0430\u043a\u0430 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u0441\u0435\u043c\u044c\u0435 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0443\u043f\u044e\u0440 \u0440\u0435\u0432\u0435\u0440\u0441\u0438\u0432\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u043a\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0448\u0430\u0433 \u2014 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u0430\u043a \u043c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430.\n\n\n\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e N \u043e\u0442 1 \u0434\u043e 10000 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0435\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 7. \u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u043e\u0434:\n8\n\n\u0412\u044b\u0432\u043e\u0434:\n7\n14\n\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 7 \u0438 \u043e\u043d\u0438 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0441\u0432\u043e\u0435\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430. \u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u043e\u0434:\n8\n\n\u0412\u044b\u0432\u043e\u0434:\n7\n14\n\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 7 \u0438 \u043e\u043d\u0438 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e \u0441\u0432\u043e\u0435\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430. \u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u043e\u0434:\n8\n\n\u0412\u044b\u0432\u043e\u0434:\n14\n7\n\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 7 \u0438 \u043e\u043d\u0438 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e \u0441\u0432\u043e\u0435\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430. \u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u043e\u0434:\n8\n\n\u0412\u044b\u0432\u043e\u0434:\n14\n7\n\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 7 \u0438 \u043e\u043d\u0438 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e \u0441\u0432\u043e\u0435\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430. \u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u043e\u0434:\n8\n\n\u0412\u044b\u0432\u043e\u0434:\n14\n7\n\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f"
    },
    {
        "number": 1154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6 3\") == \"5\"\nassert solution(\"5 5 5 5 5\") == \"10\"\nassert solution(\"1 2 1 1 1\") == \"2\"\n"
    },
    {
        "number": 1154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6 3\\n5 5 5 5 5\\n') == 10\n\nassert solution('5 6 3\\n1 2 1 1 1\\n') == 2\n"
    },
    {
        "number": 1155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n1 2\\n3 4\\n1 3\") == \"1.66666667\"\nassert solution(\"2 1\\n99 100\\n98 99\") == \"0.98989899\"\n\"\"\"\nimport math\n\nn, m = [int(n) for n in input().split(' ')]\n\ncost_list = []\nfor i in range(n):\n    a, b = [int(n) for n in input().split(' ')]\n    cost_list.append((a, b))\n\ncost_list.sort()\nmin_cost = math.inf\n\nfor i in range(m):\n    cost = cost_list[i][0] / cost_list[i][1]\n    if cost < min_cost:\n        min_cost = cost"
    },
    {
        "number": 1155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n99 100\\n98 99') == '0.98989899'\nassert solution('2 1\\n100 100\\n98 99') == '0.98989899'\nassert solution('3 5\\n1 2\\n3 4\\n1 3') == '1.66666667'\n"
    },
    {
        "number": 1155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n1 2\\n3 4\\n1 3\") == '1.66666667'\nassert solution(\"2 1\\n99 100\\n98 99\") == '0.98989899'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"5.0\"\nassert solution(\"3 5\") == \"0.66666667\"\nassert solution(\"2 1\") == \"0.98989899\"\n"
    },
    {
        "number": 1155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n1 2\\n3 4\\n1 3\\n\") == \"1.66666667\"\n"
    },
    {
        "number": 1155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\n1 2\\n3 4\\n1 3') == '1.66666667'\nassert solution('2 1\\n99 100\\n98 99') == '0.98989899'\n\n\"\"\"\n\n\nimport sys\nimport os\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 1155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    3 5\n    1 2\n    3 4\n    1 3\n    \"\"\"\n    ) == \"\"\"\n    1.66666667\n    \"\"\"\n"
    },
    {
        "number": 1155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\n1 2\\n3 4\\n1 3') == '1.66666667'\n"
    },
    {
        "number": 1155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n1 2\\n3 4\\n1 3\") == \"1.66666667\"\nassert solution(\"2 1\\n99 100\\n98 99\") == \"0.98989899\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nprice = []\nfor _ in range(n):\n    price.append(list(map(int, sys.stdin.readline().split())))\n\nprice.sort()\n\nans = 0\nfor i in range(n):\n    a, b = price[i]\n    if m <= b:\n        ans += a * m\n        break\n    else:\n        ans += a * b\n        m -= b\n\nprint(\"{:.6f}\".format(ans / m))\n"
    },
    {
        "number": 1155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n1 2\\n3 4\\n1 3') == '1.66666667'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 9 8 7 6 5 4 3 2 1 0\") == \"0 9\"\nassert solution(\"5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 1156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2 3 4 5\n00001''') == '6 15'\nassert solution('''10\n-10 -9 -8 -7 -6 6 7 8 9 10\n0000111110''') == '-5 5'\n\"\"\"\n"
    },
    {
        "number": 1156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n00001\\n\") == \"6 15\"\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 1156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n11101\") == \"6 15\"\nassert solution(\"10\\n-10 -9 -8 -7 -6 6 7 8 9 10\\n11101111110\") == \"-5 5\"\n"
    },
    {
        "number": 1156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5\\n00001') == '6 15'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(' ')))\nb = []\n\nfor i in range(n):\n    b.append(0)\n    if a[i] < 0:\n        b[i] = 1\n    if a[i] == 0:\n        b[i] = 1\n        continue\n    if a[i] % 4 == 0:\n        if b[i - 1] == 0:\n            b[i] = 0\n        else:\n            b[i] = 1\n    elif a[i] % 4 == 1:\n        if a[i] < 1 or a[i] > 5:\n            b[i] = 0\n        else:\n            b[i] = 1\n    elif a[i] % 4 == 2:\n        if a[i] > 3 or b[i - 1] == 1:\n            b[i] = 0\n        else:\n            b[i] = 1\n    elif a[i] % 4 == 3:\n        if a[i] < 2 or a[i] > 4:\n            b[i] = 0\n        else:\n            b[i] = 1\n\nprint(b[n - 1], b[0])\n"
    },
    {
        "number": 1156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"-5 5\"\nassert solution(\"10 9 8 7 6 5 4 3 2 1 0\") == \"10 9\"\n\"\"\"\n"
    },
    {
        "number": 1156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n00001\\n\") == \"6 15\"\nassert solution(\"10\\n-10 -9 -8 -7 -6 6 7 8 9 10\\n0000111110\\n\") == \"-5 5\"\n"
    },
    {
        "number": 1156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5\\n00001') == '6 15'\nassert solution('10\\n-10 -9 -8 -7 -6 6 7 8 9 10\\n0000111110') == '-5 5'\n\"\"\""
    },
    {
        "number": 1156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == '6 15'\n\nassert solution(\"10\\n-10 -9 -8 -7 -6 6 7 8 9 10\") == '-5 5'\n\nassert solution(\"10\\n5\\n0 1 1 0 0 0 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 1\") == '-1 -1'\n\n-----Explanation-----\nThe maximum element in the array a is 10^9. When we add 1 to this, we have 10^10. When we subtract 1 from it, we have 999999999. We can't subtract 2 from the 10^9 element, so the answer is 10^10.\n\nIf we subtract 1 from 10^9, it becomes 999999999. We can't add 1 to this, so we have to add 2. In this case, 10^10 - 1 - 1 = 999999999 - 2 = 999999990, and 10^10 - 2 = 999999990.\n\nIf we subtract 2 from 10^9, it becomes 999999990. We can't add 2 to this, so we have to add 1. In this case, 999999990 - 2 = 999999980, and 999999980 - 1 = 999999980.\n\nAnd so on and so forth.\n\n\"\"\"\n"
    },
    {
        "number": 1156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 4 5\\n00001') == '6 15'\n"
    },
    {
        "number": 1157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 -3 3 -1 1\") == \"8 7\"\nassert solution(\"10 4 2 -4 3 1 2 -4 3 2 3\") == \"28 27\"\nassert solution(\"5 -3 3 -1 1\") == \"8 7\"\nassert solution(\"10 -4 3 1 2 -4 3 2 3\") == \"28 27\"\nassert solution(\"5 -3 3 -1 1\") == \"8 7\"\n"
    },
    {
        "number": 1157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 -3 3 -1 1') == '8 7'\nassert solution('10 4 2 -4 3 1 2 -4 3 2 3') == '28 27'\nassert solution('5 -3 3 -1 1') == '8 7'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 1157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 -3 3 -1 1\") == '8 7'\n\"\"\"\n"
    },
    {
        "number": 1157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 -4 3 1 2 -4 3 2 3\") == '28 27'\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 1157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 -3 3 -1 1\") == '8 7'\nassert solution(\"10 4 2 -4 3 1 2 -4 3 2 3\") == '28 27'\nassert solution(\"5 -3 3 -1 1\") == '8 7'\nassert solution(\"5 -3 3 -1 1\") == '8 7'\nassert solution(\"5 -3 3 -1 1\") == '8 7'\n\"\"\"\n"
    },
    {
        "number": 1157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 -3 3 -1 1\") == \"8 7\"\nassert solution(\"10 4 2 -4 3 1 2 -4 3 2 3\") == \"28 27\"\nassert solution(\"5 -3 3 -1 1\") == \"8 7\"\nassert solution(\"10 4 2 -4 3 1 2 -4 3 2 3\") == \"28 27\"\n"
    },
    {
        "number": 1157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 -3 3 -1 1') == '8 7'\nassert solution('10 4 2 -4 3 1 2 -4 3 2 3') == '28 27'\n"
    },
    {
        "number": 1157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 -3 3 -1 1\") == \"8 7\"\nassert solution(\"10 4 2 -4 3 1 2 -4 3 2 3\") == \"28 27\""
    },
    {
        "number": 1157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 -3 3 -1 1') == '8 7'\nassert solution('10 4 2 -4 3 1 2 -4 3 2 3') == '28 27'"
    },
    {
        "number": 1157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 -3 3 -1 1\") == '8 7'\nassert solution(\"10 4 2 -4 3 1 2 -4 3 2 3\") == '28 27'\nassert solution(\"5 -3 3 -1 1\") == '8 7'\n\n\nimport unittest\nfrom unittest.mock import patch\nfrom io import StringIO\nimport sys\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        capturedOutput = StringIO()\n        sys.stdout = capturedOutput\n        solution(\"5 -3 3 -1 1\")\n        sys.stdout = sys.__stdout__\n        self.assertEqual(capturedOutput.getvalue(), \"8 7\\n\")\n"
    },
    {
        "number": 1158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 2 2 1 3\") == \"1\"\nassert solution(\"10 3\\n1 3 3 1 3 5 5 5 5 100\") == \"14\""
    },
    {
        "number": 1158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 1158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 2 2 1 3\") == \"1\"\nassert solution(\"10 3\\n1 3 3 1 3 5 5 5 5 100\") == \"14\"\n\n\n\"\"\""
    },
    {
        "number": 1158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2 1 3\") == \"1\"\nassert solution(\"1 3 3 1 3 5 5 5 5 100\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 1158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 2 2 1 3') == '1'\nassert solution('10 3\\n1 3 3 1 3 5 5 5 5 100') == '14'\n\"\"\""
    },
    {
        "number": 1158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5 2) == 1\nassert solution(5 3) == 1\nassert solution(10 3) == 14\n"
    },
    {
        "number": 1158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 2 2 1 3\") == 1\nassert solution(\"10 3\\n1 3 3 1 3 5 5 5 5 100\") == 14\n"
    },
    {
        "number": 1158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 2 2 1 3\") == \"1\"\nassert solution(\"10 3\\n1 3 3 1 3 5 5 5 5 100\") == \"14\"\n\"\"\""
    },
    {
        "number": 1158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2 2 1 3\") == 1\nassert solution(\"10 3\\n1 3 3 1 3 5 5 5 5 100\") == 14\n\n\"\"\"\nimport sys"
    },
    {
        "number": 1158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 2 2 1 3') == '1'\nassert solution('10 3\\n1 3 3 1 3 5 5 5 5 100') == '14'\n\"\"\"\nfrom collections import Counter\n\nn, k = [int(i) for i in input().split()]\ndish = [int(i) for i in input().split()]\n\nc = Counter(dish)\nans = 0\nfor i in range(1, 101):\n    if i not in c:\n        continue\n    if i <= k:\n        ans += 1\n    else:\n        n_ = c[i] // k\n        ans += n_\n        ans += n_ * (n_ - 1) // 2\nprint(ans)\n"
    },
    {
        "number": 1159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"5\\n1 2\\n1 3\\n2 3\\n2 4\"\nassert solution(\"8\") == \"13\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n1 5\\n2 5\\n1 6\\n2 6\\n1 7\\n1 8\\n5 8\\n7 8\"\n\"\"\"\n"
    },
    {
        "number": 1159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"5\\n1 2\\n1 3\\n2 3\\n2 4\"\nassert solution(\"8\") == \"13\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n1 5\\n2 5\\n1 6\\n2 6\\n1 7\\n1 8\\n5 8\\n7 8\"\n\"\"\"\nimport math"
    },
    {
        "number": 1159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '5\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n'\nassert solution('8') == '13\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n1 5\\n2 5\\n1 6\\n2 6\\n1 7\\n1 8\\n5 8\\n7 8\\n'\n\nsolution(stdin.readlines()[0])\n"
    },
    {
        "number": 1159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"5\\n1 2\\n1 3\\n2 3\\n2 4\"\nassert solution(\"8\") == \"13\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n1 5\\n2 5\\n1 6\\n2 6\\n1 7\\n1 8\\n5 8\\n7 8\"\n"
    },
    {
        "number": 1159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '5\\n1 2\\n1 3\\n2 3\\n2 4'\nassert solution('8') == '13\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n1 5\\n2 5\\n1 6\\n2 6\\n1 7\\n1 8\\n5 8\\n7 8'\n"
    },
    {
        "number": 1159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"5\\n1 2\\n1 3\\n2 3\\n2 4\"\nassert solution(\"8\") == \"13\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n1 5\\n2 5\\n1 6\\n2 6\\n1 7\\n1 8\\n5 8\\n7 8\"\nprint('Success')\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 1159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\") == '13\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n1 5\\n2 5\\n1 6\\n2 6\\n1 7\\n1 8\\n5 8\\n7 8'\n\n\n\n'''\n\n\n\nimport math\n"
    },
    {
        "number": 1159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '5\\n1 2\\n1 3\\n2 3\\n2 4'\nassert solution('8') == '13\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n1 5\\n2 5\\n1 6\\n2 6\\n1 7\\n1 8\\n5 8\\n7 8'\n"
    },
    {
        "number": 1159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '-1'\nassert solution('4') == '5\\n1 2\\n1 3\\n2 3\\n2 4'\nassert solution('8') == '13\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n1 5\\n2 5\\n1 6\\n2 6\\n1 7\\n1 8\\n5 8\\n7 8'\nassert solution('1') == '2'\n"
    },
    {
        "number": 1159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"4\"\n) == \"5\\n1 2\\n1 3\\n2 3\\n2 4\"\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 1160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 0 1 1 0\\n3\\nXL\\nS,M\\nXL,XXL\") == 'YES\\nXL\\nM\\nXXL'\nassert solution(\"1 1 2 0 1 1\\n5\\nS\\nM\\nS,M\\nXXL,XXXL\\nXL,XXL\") == 'NO'\nassert solution(\"1 1 2 0 1 1\\n5\\nS\\nM\\nS,M\\nXXL,XXXL\\nXL,XXL\") == 'NO'\nassert solution(\"0 1 0 1 1 0\\n5\\nS\\nM\\nS,M\\nXXL,XXXL\\nXL,XXL\") == 'NO'\nassert solution(\"0 1 0 1 1 0\\n5\\nS\\nM\\nS,M\\nXXL,XXXL\\nXL,XXL\") == 'NO'\n"
    },
    {
        "number": 1160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 1 0 1 1 0\\n3\\nXL') == 'YES\\nXL\\nM\\nXXL'\nassert solution('1 1 2 0 1 1\\n5\\nS\\nM\\nS,M\\nXXL,XXXL\\nXL,XXL') == 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 1160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 0 1 1 0\") == \"YES\"\nassert solution(\"1 1 2 0 1 1\") == \"NO\"\n"
    },
    {
        "number": 1160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 0 1 1 0\") == \"YES\"\nassert solution(\"1 1 2 0 1 1\") == \"NO\"\n\nsolution(stdin)\n"
    },
    {
        "number": 1160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 0 1 1 0\") == \"YES\"\nassert solution(\"1 1 2 0 1 1\") == \"NO\"\nassert solution(\"1 1 2 0 1 1\") == \"NO\"\nassert solution(\"1 1 2 0 1 1\") == \"NO\"\nassert solution(\"1 1 2 0 1 1\") == \"NO\"\n"
    },
    {
        "number": 1160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 0 1 1 0\\n3\\nXL') == 'YES\\nXL\\nM\\nXXL'\nassert solution('1 1 2 0 1 1\\n5\\nS\\nM\\nS,M\\nXXL,XXXL\\nXL,XXL') == 'NO'\nassert solution('1 1 2 0 1 1\\n5\\nS\\nM\\nS,M\\nXXL,XXXL\\nXL,XXL') == 'NO'\nassert solution('1 1 2 0 1 1\\n5\\nS\\nM\\nS,M\\nXXL,XXXL\\nXL,XXL') == 'NO'\n\n'''\n\nimport sys\n"
    },
    {
        "number": 1160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 0 1 1 0\") == \"YES\"\nassert solution(\"1 1 2 0 1 1\") == \"NO\"\nassert solution(\"1 1 2 0 1 1\") == \"NO\"\nassert solution(\"0 1 0 1 1 0\") == \"NO\"\nassert solution(\"1 2 3 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 1160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 0 1 1 0\\n3\\nXL\") == \"YES\"\nassert solution(\"1 1 2 0 1 1\\n5\\nS\\nM\\nS,M\\nXXL,XXXL\\nXL,XXL\") == \"NO\"\n"
    },
    {
        "number": 1160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 0 1 1 0\") == \"YES\\nXL\\nM\\nXXL\\n\"\nassert solution(\"1 1 2 0 1 1\") == \"NO\\n\"\nassert solution(\"1 1 1 1 1 1\") == \"YES\\n\"\nassert solution(\"0 1 0 0 1 1\") == \"NO\\n\"\nassert solution(\"0 0 0 0 1 1\") == \"NO\\n\"\n"
    },
    {
        "number": 1160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == \"NO\"\nassert solution('0 1 0 1 1 0\\n3\\nXL\\nS,M\\nXL,XXL') == \"YES\\nXL\\nM\\nXXL\\n\"\nassert solution('') == \"NO\"\nassert solution('0 1 0 1 1 0\\n3\\nXL\\nS,M\\nXXL,XXXL') == \"NO\\n\"\nassert solution('') == \"NO\"\n"
    },
    {
        "number": 1161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[<}){}\") == \"2\"\nassert solution(\"{()}[]\") == \"0\"\nassert solution(\"]]\") == \"Impossible\"\nassert solution(\"<}){}<>\") == \"3\"\nassert solution(\"{[}[{}{}]\") == \"Impossible\"\n\n\"\"\""
    },
    {
        "number": 1161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"Impossible\"\nassert solution(\"[{[}]<>}]\") == \"Impossible\"\nassert solution
    },
    {
        "number": 1161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[[(){}]<>\") == 2\nassert solution(\"[)()]\") == Impossible\nassert solution(\"[]()\") == 0\nassert solution(\"<>\") == 0\nassert solution(\"<(>\") == Impossible\n"
    },
    {
        "number": 1161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"<}){}\") == \"2\"\nassert solution(\"{()}[]\") == \"0\"\nassert solution(\"[]<>\") == \"Impossible\"\nassert solution(\"<<>>\") == \"Impossible\"\nassert solution(\"[]][][\") == \"Impossible\"\n"
    },
    {
        "number": 1161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('[<}){}') == 2\nassert solution('{()}[]') == 0\nassert solution(']]') == Impossible\n\"\"\"\n\n\nimport string\nimport sys\n\nclass MyClass:\n    def __init__(self, input_string):\n        self.input_string = input_string\n        self.rbs_list = list()\n        self.char_list = list(string.ascii_lowercase)\n\n\n    def get_rbs(self):\n        \"\"\"\n        Getting list of '[' and ']' characters.\n        \"\"\"\n        self.rbs_list = list()\n        for i, c in enumerate(self.input_string):\n            if c in '[]<>':\n                self.rbs_list.append(c)\n\n\n    def rbs_replacement(self):\n        \"\"\"\n        Replace all '[' and ']'.\n        \"\"\"\n        if len(self.rbs_list) == 0:\n            return 0\n\n        counter = 0\n        while True:\n            counter += 1\n            new_list = list()\n            for i, c in enumerate(self.rbs_list):\n                if c == '[':\n                    new_list.append(']')\n                elif c == ']':\n                    new_list.append('[')\n                else:\n                    new_list.append(c)\n\n            if new_list == self.rbs_list:\n                break\n\n            self.rbs_list = new_list\n\n        return counter\n\n\n    def get_char_list(self):\n        \"\"\"\n        Getting list of letters in input string.\n        \"\"\"\n        self.char_list = list()\n        for i, c in enumerate(self.input_string):\n            if c in '[]<>':\n                continue\n            self.char_list.append(c)\n\n\n    def char_replacement(self):\n        \"\"\"\n        Replace all '[' and ']'.\n        \"\"\"\n        if len(self.char_list) == 0:\n            return 0\n\n        counter = 0\n        while True:\n            counter += 1\n            new_list = list()\n            for i, c in enumerate(self.char_list):\n                if c == '[':\n                    new_list.append(']')\n                elif c == ']':\n                    new_list.append('[')\n                else:\n                    new_list.append(c)\n\n            if new_list == self.char_list:\n                break\n\n            self.char_list = new_list\n\n        return counter\n"
    },
    {
        "number": 1161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('<}){}') == '2'\nassert solution('{()}[]') == '0'\nassert solution(']]') == 'Impossible'\n\n\"\"\""
    },
    {
        "number": 1161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[<}){}\") == \"2\"\nassert solution(\"{()}[]\") == \"0\"\nassert solution(\"]]\") == \"Impossible\"\nassert solution(\"{{{[][]}}\") == \"Impossible\"\nassert solution(\"[(<)>)]\") == \"Impossible\"\n"
    },
    {
        "number": 1161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[<>()[]]\") == \"Impossible\"\nassert solution(\"[<}){}\") == \"2\"\nassert solution(\"{()}[]\") == \"0\"\nassert solution(\"[]\") == \"0\"\nassert solution(\"<\") == \"Impossible\"\n"
    },
    {
        "number": 1161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"<}){}\") == 2\nassert solution(\"{()}[]\") == 0\nassert solution(\"]]\") == Impossible\n"
    },
    {
        "number": 1161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('<()>') == 1\nassert solution('<{}>') == 1\nassert solution('<[()]>') == 2\nassert solution('<{[()]}>') == 3\nassert solution('<[[[{())}]]]>') == 3"
    },
    {
        "number": 1162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 6 3') == '124780545'\nassert solution('5 20 11') == '1'\nassert solution('10 30 10') == '85932500'\n\n\"\"\"\n\nimport sys\nfrom math import gcd\n"
    },
    {
        "number": 1162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 6 3') == '124780545'\nassert solution('5 20 11') == '1'\nassert solution('10 30 10') == '85932500'\n"
    },
    {
        "number": 1162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6 3\") == \"124780545\"\nassert solution(\"5 20 11\") == \"1\"\nassert solution(\"10 30 10\") == \"85932500\"\n\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import DefaultDict, List, Tuple\n\nfrom utils.decorators import timer\n\n\n@timer\n"
    },
    {
        "number": 1162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 6 3\") == \"124780545\"\nassert solution(\"5 20 11\") == \"1\"\nassert solution(\"10 30 10\") == \"85932500\"\n\n\nimport itertools\n"
    },
    {
        "number": 1162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 6 3\") == \"124780545\"\nassert solution(\"5 20 11\") == \"1\"\nassert solution(\"10 30 10\") == \"85932500\"\n\"\"\""
    },
    {
        "number": 1162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 6 3\") == \"124780545\"\nassert solution(\"5 20 11\") == \"1\"\nassert solution(\"10 30 10\") == \"85932500\"\n"
    },
    {
        "number": 1162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 20 11') == '1'\nassert solution('2 6 3') == '124780545'\nassert solution('10 30 10') == '85932500'\nassert solution('3 5 4') == '1'"
    },
    {
        "number": 1162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 20 11\") == \"1\"\nassert solution(\"10 30 10\") == \"85932500\"\n\"\"\"\n"
    },
    {
        "number": 1162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 6 3\\n') == '124780545'\nassert solution('5 20 11\\n') == '1'\nassert solution('10 30 10\\n') == '85932500'\n"
    },
    {
        "number": 1162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 6 3\") == 124780545\nassert solution(\"5 20 11\") == 1\nassert solution(\"10 30 10\") == 85932500\n\n\"\"\"\n\nfrom typing import List, Tuple, Dict, Set\n"
    },
    {
        "number": 1163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 3) == \"GBGBGB\"\nassert solution(4, 2) == \"BGBGBB\"\nassert solution(3, 4) == \"GBGGBB\"\n\"\"\""
    },
    {
        "number": 1163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"BGBGBB\"\nassert solution(\"4 2\") == \"BGBGBB\"\n"
    },
    {
        "number": 1163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'GBGBGB'\nassert solution('4 2') == 'BGBGBB'\n\n\"\"\""
    },
    {
        "number": 1163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"BGBGBB\"\nassert solution(\"3 3\") == \"GBGBGB\"\n\"\"\""
    },
    {
        "number": 1163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"GBGBGB\"\nassert solution(\"4 2\") == \"BGBGBB\"\n\"\"\""
    },
    {
        "number": 1163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3') == 'BGBGBG'\nassert solution('4 2') == 'BGBGBB'\nassert solution('4 1') == 'BGBGGB'\nassert solution('3 3') == 'BGBGBG'\nassert solution('4 1') == 'BGBGGB'\n"
    },
    {
        "number": 1163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"BGBGBG\"\n\nassert solution(\"4 2\") == \"BGBGBB\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 1163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '4 2'\n    ) == 'BGBGBB'\nassert solution(\n    '3 3'\n    ) == 'BGBGBG'\n\n\"\"\""
    },
    {
        "number": 1163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3') == 'BGBGBB'\nassert solution('4 2') == 'BGBGBB'\n"
    },
    {
        "number": 1163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3') == \"GBGBGB\"\nassert solution('4 2') == \"BGBGBB\"\n"
    },
    {
        "number": 1164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"chipsy48.32televizor12.390\") == \"12.438.32\"\nassert solution(\"a1b2c3.38\") == \"6.38\"\nassert solution(\"aa0.01t0.03\") == \"0.04\"\n\"\"\"\n\n\nfrom math import gcd\n"
    },
    {
        "number": 1164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"chipsy48.32televizor12.390\") == \"12.438.32\"\nassert solution(\"a1b2c3.38\") == \"6.38\"\nassert solution(\"aa0.01t0.03\") == \"0.04\"\nprint(\"Tests passed.\")\n"
    },
    {
        "number": 1164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('chipsy48.32televizor12.390') == '12.438.32'\nassert solution('a1b2c3.38') == '6.38'\nassert solution('aa0.01t0.03') == '0.04'\n\"\"\""
    },
    {
        "number": 1164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"chipsy48.32televizor12.390\") == \"12.438.32\"\nassert solution(\"a1b2c3.38\") == \"6.38\"\nassert solution(\"aa0.01t0.03\") == \"0.04\"\nassert solution
    },
    {
        "number": 1164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"chipsy48.32televizor12.390\") == \"12.438.32\"\nassert solution(\"a1b2c3.38\") == \"6.38\"\nassert solution(\"aa0.01t0.03\") == \"0.04\"\n\"\"\""
    },
    {
        "number": 1164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"234\") == \"234\"\nassert solution(\"1.544\") == \"1.54\"\nassert solution(\"149.431.10\") == \"149.43\"\nassert solution(\"0.99\") == \"0.99\"\nassert solution(\"123.05\") == \"123.05\"\n"
    },
    {
        "number": 1164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aa0.01t0.03\") == \"0.04\"\n\"\"\"\nimport re\nimport math"
    },
    {
        "number": 1164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"chipsy48.32televizor12.390\") == \"12.438.32\"\nassert solution(\"a1b2c3.38\") == \"6.38\"\nassert solution(\"aa0.01t0.03\") == \"0.04\"\nassert solution(\"234\") == \"234\"\nassert solution(\"1.544\") == \"1.543.97\"\n"
    },
    {
        "number": 1164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"chipsy48.32televizor12.390\") == \"12.438.32\"\nassert solution(\"a1b2c3.38\") == \"6.38\"\nassert solution(\"aa0.01t0.03\") == \"0.04\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 1164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('chipsy48.32televizor12.390') == '12.438.32'\nassert solution('a1b2c3.38') == '6.38'\nassert solution('aa0.01t0.03') == '0.04'\nassert solution('ab0.01t0.03') == '0.04'\nassert solution('12.56') == '12.56'\n\"\"\"\n"
    },
    {
        "number": 1165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == b\n\na, b = map(int, stdin.readline().split())\nc = list(map(int, stdin.readline().split()))\nd = [map(int, stdin.readline().split()) for i in range(b)]\n\n\"\"\"\n"
    },
    {
        "number": 1165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 1 3\\n2 4 1\") == \"1\\n-1\\n3\\n2\"\nassert solution(\"3 3\\n1 2 3\\n2 3 4\\n3 4 5\") == \"2\\n-1\\n4\"\nassert solution(\"6 4\\n1 1 3\\n2 4 1\\n3 4 2\\n3 4 3\") == \"2\\n4\\n5\"\n\"\"\""
    },
    {
        "number": 1165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2 1\\n2 6 2\\n3 4 1\\n3 4 2') == '2\\n6\\n-1\\n4'\nprint(\"Test 1 OK\")\n\nassert solution('4 2\\n1 2 1\\n2 6 2\\n3 4 1\\n3 4 2') == '2\\n6\\n-1\\n4'\nprint(\"Test 2 OK\")\n\ninput = open(\"input.txt\", \"r\")\nprint(solution(input.read()))\ninput.close()\n\n====="
    },
    {
        "number": 1165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 1 3 5\") == \"2\"\nassert solution(\"1 4 1\") == \"6\"\n\"\"\"\n\nn, m = [int(el) for el in input().split()]\na = [int(el) for el in input().split()]\n\nq = [input().split() for _ in range(m)]\n\nans = []\nfor i in range(m):\n    left = int(q[i][0])\n    right = int(q[i][1])\n    target = int(q[i][2])\n\n    found = False\n    for j in range(left, right + 1):\n        if j == a[j] or j == target:\n            continue\n\n        if a[j] == target:\n            ans.append(str(j))\n            found = True\n\n    if not found:\n        ans.append(\"-1\")\n\nprint(\" \".join(ans))\n"
    },
    {
        "number": 1165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2 1 3 5\") == \"2\\n6\\n-1\\n4\"\nassert solution(\"4 4\\n1 3 1 3 5\") == \"2\\n-1\\n4\"\nassert solution(\"5 3\\n2 4 1\\n2 5 1\") == \"2\\n3\"\nassert solution(\"4 2\\n2 3 1\\n1 4 1\") == \"2\\n2\"\nassert solution(\"3 3\\n2 5 1\\n2 5 1\") == \"2\\n-1\"\n"
    },
    {
        "number": 1165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 1 3 5\\n1 4 1\\n2 6 2\\n3 4 1\\n3 4 2\\n\") == \"2\\n6\\n-1\\n4\\n\"\nprint(\"Test 1 OK\\n\")\n\nassert solution(\"1 2 1 1 3 5\\n1 4 1\\n2 6 2\\n3 4 1\\n3 4 2\\n\") == \"2\\n6\\n-1\\n4\\n\"\nprint(\"Test 2 OK\\n\")"
    },
    {
        "number": 1165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 1') == '2'\n"
    },
    {
        "number": 1165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 1\\n2 3\\n2 2\\n3 2\\n4 2\") == \"1\\n2\\n2\\n-1\\n\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 1 2\\n1 4 1\\n2 6 2\\n3 4 1\\n3 4 2\\n\") == \"2\\n6\\n-1\\n4\\n\"\nassert solution(\"10 10\\n1 2 1 2 3 5 5\\n1 4 1\\n2 6 2\\n3 4 1\\n3 4 2\\n\") == \"2\\n6\\n-1\\n4\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 1165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 3 5') == '2'\nassert solution('1 2 1 1 3 5') == '6'\nassert solution('1 2 1 1 3 5') == '6'\nassert solution('1 2 1 1 3 5') == '6'"
    },
    {
        "number": 1166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6 5 4 2 7 1 8\") == 'BBAAAABAB'\nassert solution(\"15 3 11 2 5 10 9 7 13 15 8 4 12 6 1 14\") == 'ABAAAABBBAABAAB'\n"
    },
    {
        "number": 1166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n3 6 5 4 2 7 1 8\") == \"BAAAABAB\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 1166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 6 5 4 2 7 1 8\") == 'ABAAAABAB'\nassert solution(\"15 3 11 2 5 10 9 7 13 15 8 4 12 6 1 14\") == 'ABAAAABBBAABAAB'\nassert solution(\"7 3 6 5 4 2 7 1 8\") == 'ABAAAA'\nassert solution(\"9 3 6 5 4 2 7 1 8\") == 'ABBBBB'\nassert solution(\"11 3 6 5 4 2 7 1 8\") == 'BBBBBBA'\n"
    },
    {
        "number": 1166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6 5 4 2 7 1 8\") == \"BAAAABAB\"\nassert solution(\"15 3 11 2 5 10 9 7 13 15 8 4 12 6 1 14\") == \"ABAAAABBBAABAAB\"\n\"\"\"\n"
    },
    {
        "number": 1166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6 5 4 2 7 1 8\") == \"BAAAABAB\"\nassert solution(\"15 3 11 2 5 10 9 7 13 15 8 4 12 6 1 14\") == \"ABAAAABBBAABAAB\"\nassert solution(\"3 10 2 5 4 6 7 8 9\") == \"ABABABAB\"\nassert solution(\"2 5 4 6 7 8 9 1\") == \"BABABAB\"\nassert solution(\"9 8 7 6 5 4 3 2 1\") == \"ABABBAB\"\n"
    },
    {
        "number": 1166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6 3 4 2 7 1 8\") == \"ABAAAABBBAABAAB\"\nassert solution(\"3 11 2 5 10 9 7 13 15 8 4 12 6 1 14\") == \"ABAAAABBBAABAAB\"\nassert solution(\"3 11 2 5 10 9 7 13 15 8 4 12 6 1 14\") == \"ABAAAABBBAABAAB\"\nassert solution(\"3 11 2 5 10 9 7 13 15 8 4 12 6 1 14\") == \"ABAAAABBBAABAAB\""
    },
    {
        "number": 1166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n3 6 5 4 2 7 1 8') == 'ABAAAABAB'\nassert solution('15\\n3 11 2 5 10 9 7 13 15 8 4 12 6 1 14') == 'ABAAAABBBAABAAB'\n\n\"\"\"\n"
    },
    {
        "number": 1166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n3 6 5 4 2 7 1 8\") == \"BAAAABAB\"\nassert solution(\"15\\n3 11 2 5 10 9 7 13 15 8 4 12 6 1 14\") == \"ABAAAABBBAABAAB\"\n\n\"\"\""
    },
    {
        "number": 1166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6 5 4 2 7 1 8') == 'BAAAABAB'\nassert solution('15 3 11 2 5 10 9 7 13 15 8 4 12 6 1 14') == 'ABAAAABBBAABAAB'\n\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 1166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(input()))\n"
    },
    {
        "number": 1167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 4 5 8\") == \"7 1\"\nassert solution(\"7 5 4 5 2\") == \"-1\"\nassert solution(\"20 53 45 26 4\") == \"1 3\""
    },
    {
        "number": 1167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7') == '1 1'\nassert solution('1 2 3 4 5 6 7') == '1 3'\nassert solution('1 2 3 4 5 6 7') == '1 3'\nassert solution('1 2 3 4 5 6 7') == '1 3'\n"
    },
    {
        "number": 1167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\nimport sys\nimport os\nfrom typing import List\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\n\nfrom utils.time import printTime\n\n\nclass Solution:\n    @printTime()\n    def solution(self, _input: List[str]):\n        _, a, b, c, d, k = [int(x) for x in _input.pop(0).split(\" \")]\n        if c + b <= k:\n            return a, c + b\n        if a + d <= k:\n            return a + d, b\n        return -1, b\n\n\ns = Solution()\n\nassert s.solution(\n    [\n        \"7 5 4 5 8\",\n        \"7 5 4 5 2\",\n        \"20 53 45 26 4\",\n    ]\n) == (-1, 3)\n\n_input = [\n    \"7 5 4 5 8\",\n    \"7 5 4 5 2\",\n    \"20 53 45 26 4\",\n]\nprint(s.solution(_input))\n_input = [\n    \"10 9 7 8 2\",\n    \"10 9 7 8 1\",\n    \"10 9 10 10 5\",\n]\nprint(s.solution(_input))\n_input = [\n    \"1 0 0 0 0\",\n    \"1 1 1 1 1\",\n]\nprint(s.solution(_input))\n_input = [\n    \"1 1 1 1 1\",\n    \"1 1 1 1 1\",\n]\nprint(s.solution(_input))\n_input = [\n    \"7 5 4 5 8\",\n    \"7 5 4 5 2\",\n    \"20 53 45 26 4\",\n]\nprint(s.solution(_input))\n_input = [\n    \"7 5 4 5 8\",\n    \"7 5 4 5 2\",\n    \"20 53 45 26 4\",\n]\nprint(s.solution(_input))\n_input = [\n    \"7 5 4 5 8\",\n    \"7 5 4 5 2\",\n    \"20 53 45 26 4\",\n]\nprint(s.solution(_input))\n_input = [\n    \"7 5 4 5 8\",\n    \"7 5 4 5 2\",\n    \"20 53 45 26 4\",\n]\nprint(s.solution(_input))\n_input = [\n    \"7 5 4 5 8\",\n    \"7 5 4 5 2\",\n    \"20 53 45 26 4\",\n]\nprint(s.solution(_input))\n_input = [\n    \"7 5 4 5 8\",\n    \"7 5 4 5 2\",\n    \"20 53 45 26 4\",\n]\nprint(s.solution(_input))\n_input = [\n    \"7 5 4 5 8\",\n    \"7 5 4 5 2\",\n    \"20 53 45 26 4\",\n]\nprint(s.solution(_input))\n"
    },
    {
        "number": 1167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 4 5 8\") == \"7 1\"\nassert solution(\"7 5 4 5 2\") == \"-1\"\nassert solution(\"20 53 45 26 4\") == \"1 3\"\n\n---"
    },
    {
        "number": 1167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_str) == expected_str\n\"\"\"\n"
    },
    {
        "number": 1167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 4 5 8\") == \"7 1\"\nassert solution(\"7 5 4 5 2\") == \"-1\"\nassert solution(\"20 53 45 26 4\") == \"1 3\"\n\"\"\""
    },
    {
        "number": 1167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 4 5 8\") == \"7 1\"\nassert solution(\"7 5 4 5 2\") == \"-1\"\nassert solution(\"20 53 45 26 4\") == \"1 3\"\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 1167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 5 4 5 8\\n7 5 4 5 2') == '7 1'\nassert solution('20 53 45 26 4\\n20 53 45 26 4') == '-1'\nassert solution('2 2 2 2 2\\n2 2 2 2 2') == '1 1'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 1167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 4 5 8\\n7 5 4 5 2\") == \"7 1\"\n\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 1167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 4 5 8\") == \"7 1\"\nassert solution(\"7 5 4 5 2\") == \"1 3\"\nassert solution(\"20 53 45 26 4\") == \"1 3\"\n"
    },
    {
        "number": 1168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 2 1 6 5') == 8\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]"
    },
    {
        "number": 1168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 1 6 5\") == \"8\"\nassert solution(\"4\\n3 3 3 3\") == \"0\"\nassert solution(\"5\\n3 2 1 6 5\") == \"8\""
    },
    {
        "number": 1168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 2 1 6 5') == 8\nassert solution('4\\n3 3 3 3') == 0\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nheight = list(map(int, sys.stdin.readline().split()))\n\nprint(sum([(i < j) & (height[i] | height[j] < height[i]) for i in range(n) for j in range(i + 1, n) if i!= j]))\n"
    },
    {
        "number": 1168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(read_input()) == read_expected()\n\"\"\"\n"
    },
    {
        "number": 1168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 2 1 6 5\") == 8\nassert solution(\"4\\n3 3 3 3\") == 0"
    },
    {
        "number": 1168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 2 1 6 5\") == \"8\"\nassert solution(\"4\\n3 3 3 3\") == \"0\"\n\nfrom collections import Counter"
    },
    {
        "number": 1168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 2 1 6 5\") == \"8\"\nassert solution(\"4\\n3 3 3 3\") == \"0\"\n"
    },
    {
        "number": 1168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5\n3 2 1 6 5\n\"\"\") == '8'\n\nassert solution(\n\"\"\"\n4\n3 3 3 3\n\"\"\") == '0'\n\n\"\"\"\n\n\"\"\"\n\nfrom operator import or_\nfrom itertools import combinations\nfrom functools import reduce"
    },
    {
        "number": 1168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 3 3\\n') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 2 1 6 5\") == 8\nassert solution(\"4\\n3 3 3 3\") == 0\n"
    },
    {
        "number": 1169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"0 1\"\nassert solution(\"3 1\") == \"1 1\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 0\") == \"1 1\"\n"
    },
    {
        "number": 1169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == '0 1'\nassert solution(\"3 1\") == '1 1'\n\"\"\""
    },
    {
        "number": 1169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 2\n''') == '0 1'\n\nassert solution('''3 1\n''') == '1 1'\n"
    },
    {
        "number": 1169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2') == '0 1'\nassert solution('3 1') == '1 1'"
    },
    {
        "number": 1169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n') == '0 1'\n\n\"\"\""
    },
    {
        "number": 1169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == '0 1'\nassert solution(\"3 1\") == '1 1'"
    },
    {
        "number": 1169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"0 1\"\nassert solution(\"3 1\") == \"1 1\"\n"
    },
    {
        "number": 1169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"0 1\"\nassert solution(\"3 1\") == \"1 1\"\nassert solution(\"4 5\") == \"0 0\"\nassert solution(\"10 4\") == \"0 1\"\n"
    },
    {
        "number": 1169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 2''') == '0 1'\nassert solution('''3 1''') == '1 1'\n\"\"\"\n\nn, m = list(map(int, input().split()))\n\nprint(min(m//2, n - 1), max(0, m//2 - (n - 1)))\n"
    },
    {
        "number": 1169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ('0 1', '')\nassert solution('4 2') == ('0 1', '')\nassert solution('3 1') == ('1 1', '')\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n1 2 1 0\") == '3 3'\nassert solution(\"7 1\\n1 2 0 2 1 0 3 1\") == '8 7'\nassert solution(\"4 1\\n1 2 1 0\") == '5 2'\n\"\"\"\n"
    },
    {
        "number": 1170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n21\\n0\\n1') == '5 2'\nprint(solution(input()))\n"
    },
    {
        "number": 1170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n0') == '1 1'\nassert solution('1\\n2\\n1\\n0') == '1 2'\nassert solution('2\\n1\\n1\\n0') == '2 1'\nassert solution('2\\n2\\n1\\n0') == '2 2'\nassert solution('3\\n1\\n2\\n0') == '3 1'\n"
    },
    {
        "number": 1170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"21\") == \"5 2\"\nassert solution(\"0\") == \"1 1\"\nassert solution(\"1\") == \"1 1\"\n\"\"\"\n\n\nimport unittest\nimport numpy as np\nfrom collections import Counter\n"
    },
    {
        "number": 1170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n21\\n0\\n1') == '5 2'\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 1170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n0\\n1\\n1\\n0\\n0\\n1') == '4 2'\nassert solution('7\\n1\\n1\\n1\\n1\\n1\\n1') == '2 2'\nassert solution('7\\n0\\n0\\n1') == '3 1'\nassert solution('7\\n0\\n0\\n0') == '3 1'\nassert solution('7\\n0\\n0\\n0\\n1') == '4 1'\n"
    },
    {
        "number": 1170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('21\\n0\\n1') == '5 2'\n\"\"\"\n"
    },
    {
        "number": 1170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n3\n2\n0\n1\n\"\"\") == \"\"\"\n1 1\n2 2\n3 2\n4 2\n\"\"\", solution(\"\"\"\n4\n3\n2\n0\n1\n\"\"\") == \"\"\"\n1 1\n2 2\n3 2\n4 2\n\"\"\", solution(\"\"\"\n4\n3\n2\n0\n1\n\"\"\") == \"\"\"\n-1\n1 1\n2 2\n3 2\n\"\"\", solution(\"\"\"\n4\n3\n2\n1\n1\n\"\"\") == \"\"\"\n1 1\n2 2\n3 2\n4 2\n\"\"\", solution(\"\"\"\n4\n2\n2\n1\n1\n\"\"\") == \"\"\"\n2 2\n1 1\n3 2\n4 2\n\"\"\", solution(\"\"\"\n4\n1\n1\n1\n0\n\"\"\") == \"\"\"\n1 1\n2 2\n3 2\n4 2\n\"\"\", solution(\"\"\"\n4\n1\n0\n0\n1\n\"\"\") == \"\"\"\n1 1\n2 2\n3 2\n4 2\n\"\"\", solution(\"\"\"\n3\n1\n2\n1\n0\n\"\"\") == \"\"\"\n1 1\n2 2\n3 2\n\"\"\", solution(\"\"\"\n3\n1\n2\n0\n1\n\"\"\") == \"\"\"\n2 2\n1 1\n3 2\n\"\"\", solution(\"\"\"\n3\n1\n0\n0\n0\n\"\"\") == \"\"\"\n1 1\n2 2\n3 2\n\"\"\", solution(\"\"\"\n2\n0\n1\n1\n0\n\"\"\") == \"\"\"\n1 1\n2 2\n\"\"\", solution(\"\"\"\n2\n0\n0\n0\n0\n\"\"\") == \"\"\"\n1 1\n\"\"\", solution(\"\"\"\n1\n0\n0\n0\n0\n\"\"\") == \"\"\"\n1 1\n\"\"\", solution(\"\"\"\n2\n0\n1\n1\n0\n\"\"\") == \"\"\"\n2 2\n1 1\n\"\"\", solution(\"\"\"\n1\n0\n0\n0\n0\n\"\"\") == \"\"\"\n1 1\n\"\"\", solution(\"\"\"\n3\n0\n0\n1\n1\n\"\"\") == \"\"\"\n1 1\n2 2\n3 2\n\"\"\"\n"
    },
    {
        "number": 1170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\") == \"5 5\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"7\") == \"7 7\"\n\n\"\"\""
    },
    {
        "number": 1170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n0\\n1') == '1 1'\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    if n == 1:\n        print(1, 1)\n    else:\n        print(1, n)\n"
    },
    {
        "number": 1171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 4\\n-10 8 2 1 2 6') == '14'\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 1171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == '6'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nN, K = [int(i) for i in sys.stdin.readline().split()]\njewels = deque([int(i) for i in sys.stdin.readline().split()])\n\nprint(solution([jewels.popleft(), jewels.pop()]))\n"
    },
    {
        "number": 1171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 4\\n-10 8 2 1 2 6') == '14'\n\"\"\"\n\nclass Deque(object):\n    def __init__(self, iterable):\n        self.items = list(iterable)\n\n    def append(self, item):\n        self.items.append(item)\n\n    def appendleft(self, item):\n        self.items.insert(0, item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def popleft(self):\n        return self.items.pop(0)"
    },
    {
        "number": 1171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n1 2 3 4 5\\n') == '13'\nprint('Test success.')\n\n-----Test cases-----\nInput 1:\n6 4\n-10 8 2 1 2 6\n\nOutput 1:\n14\n\nInput 2:\n6 5\n-10 8 2 1 2 6\n\nOutput 2:\n15\n\nInput 3:\n4 3\n-10 8 2 1 2 6\n\nOutput 3:\n17\n\nInput 4:\n6 6\n1 2 3 4 5 6\n\nOutput 4:\n13\n\nInput 5:\n10 1\n-10 8 2 1 2 6\n\nOutput 5:\n10\n\nInput 6:\n3 4\n-1 0 1\n\nOutput 6:\n0\n\nInput 7:\n5 5\n-1 2 3 4 5\n\nOutput 7:\n15\n\nInput 8:\n10 100\n-100 -10 -2 -2 -10 -10 -100\n\nOutput 8:\n-110\n\nInput 9:\n100 1\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nOutput 9:\n101\n\nInput 10:\n10 100\n-100 -10 -2 -2 -10 -10 -100\n\nOutput 10:\n-110\n\nInput 11:\n1 100\n-100 -10 -2 -2 -10 -10 -100\n\nOutput 11:\n0\n\nInput 12:\n100 100\n-100 -10 -2 -2 -10 -10 -100\n\nOutput 12:\n0\n\nInput 13:\n1 100\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nOutput 13:\n101\n\nInput 14:\n1 100\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nOutput 14:\n101\n\nInput 15:\n1 100\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nOutput 15:\n101\n\nInput 16:\n1 100\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nOutput 16:\n101\n\nInput 17:\n1 100\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nOutput 17:\n101\n\nInput 18:\n1 100\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nOutput 18:\n101\n\nInput 19:\n1 100\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nOutput 19:\n101\n\nInput 20:\n1 100\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nOutput 20:\n101\n\nInput 21:\n1 100\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nOutput 21:\n101\n\nInput 22:\n1 100\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29"
    },
    {
        "number": 1171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n-10 8 2 1 2 6\") == 14\n"
    },
    {
        "number": 1171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"6 4\\n\"\n    \"10 8 2 1 2 6\"\n) == \"14\"\n"
    },
    {
        "number": 1171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 4\\n-10 8 2 1 2 6') == 14\n\"\"\"\nimport sys\n\ninputs = sys.stdin.read()\n\nN, K = map(int, inputs.split(\" \"))\njewels = list(map(int, inputs.split(\" \")))\n\njewels.sort()\njewels.append(0)\njewels.insert(0, 0)\n\nd_max = 0\nd_sum = 0\n\nfor k in range(1, K + 1):\n    d_max += (K - k) * jewels[k]\n    d_sum += (K - k) * jewels[k - 1]\n\nprint(d_max - d_sum)\n"
    },
    {
        "number": 1171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 4\\n-10 8 2 1 2 6') == 14\n"
    },
    {
        "number": 1171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 2 10 8\") == 18\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 1171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 4\\n-10 8 2 1 2 6\") == 14\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 1172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A??C\") == 8\nassert solution(\"?A??A??A\") == 20\nassert solution(\"?A??A?A??A??A\") == 40\nassert solution(\"?A??A?A??A?A??A?A??A\") == 60\nassert solution(\"?A??A?A??A?A??A?A??A?A??A\") == 80\n"
    },
    {
        "number": 1172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A??C\") == 8\n\"\"\"\n"
    },
    {
        "number": 1172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A??C\") == 8\n\"\"\""
    },
    {
        "number": 1172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A??C\") == 8\n"
    },
    {
        "number": 1172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A??C\") == 8\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 1172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A??C\") == 8\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 1172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('A') == 1\nassert solution('AAC') == 2\nassert solution('AACC') == 2\nassert solution('ABAC') == 3\n"
    },
    {
        "number": 1172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A??C\") == 8\n"
    },
    {
        "number": 1172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A??C') == 8\nassert solution('A??C???A??C') == 9\nassert solution('A??C???A??C?A??C') == 10\nassert solution('A??C???A??C?A??C?A??C?A??C') == 11\n"
    },
    {
        "number": 1172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A??C\") == 8\n"
    },
    {
        "number": 1173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3\\n2 4') == '2'\nassert solution('4\\n1 2\\n2 3') == '-1'\n\"\"\"\nimport sys\nfrom typing import List\n\nclass Tourney(object):\n    def __init__(self, num_players: int, matches: List[int]):\n        self.num_players = num_players\n        self.matches = matches\n\n    def __repr__(self):\n        return str(self.matches)\n\n    def check_conditions(self, num_days: int):\n        players = set(range(1, self.num_players + 1))\n        matches_by_player = [[] for _ in range(self.num_players)]\n        for match in self.matches:\n            matches_by_player[match[0] - 1].append(match[1])\n            matches_by_player[match[1] - 1].append(match[0])\n        \n        for player_num, matches in enumerate(matches_by_player, 1):\n            if player_num in matches:\n                return False\n            if len(matches) > 1:\n                return False\n\n        if len(players) > num_days:\n            return False\n\n        return True\n\n    def schedule(self):\n        for day in range(self.num_players):\n            for player_num in range(self.num_players):\n                if self.matches[player_num] == player_num + 1:\n                    continue\n                for other_player_num in range(self.num_players):\n                    if other_player_num == player_num:\n                        continue\n                    if self.matches[other_player_num] == player_num + 1 or self.matches[other_player_num] == player_num:\n                        self.matches[player_num] = other_player_num + 1\n                        break\n        return self.matches\n\n    def brute_force(self):\n        for num_days in range(1, self.num_players):\n            if self.check_conditions(num_days):\n                return num_days\n        return -1\n"
    },
    {
        "number": 1173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3\\n1 3\\n1 2') == '3'\nassert solution('4\\n1 2\\n2 3\\n3 4\\n1 3') == '-1'\n\"\"\"\n\nfrom collections import deque, defaultdict\nimport math\nimport sys"
    },
    {
        "number": 1173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3\\n1 3\\n1 2\") == \"3\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\") == \"1\"\nassert solution(\"4\\n1 4\\n2 3\\n3 2\") == \"0\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n3 5\") == \"-1\"\nassert solution(\"5\\n2 1\\n2 3\\n2 4\\n2 5\") == \"-1\"\n"
    },
    {
        "number": 1173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3\\n1 3\\n1 2\") == \"3\"\nassert solution(\"4\\n1 3\\n1 2\") == \"-1\"\n"
    },
    {
        "number": 1173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 3\\n1 2\\n\") == \"3\"\nassert solution(\"3\\n1 3\\n1 2\\n\") == \"2\"\nassert solution(\"3\\n1 2\\n1 3\\n\") == \"-1\"\nassert solution(\"3\\n2 3\\n1 3\\n\") == \"3\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 1173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 3\\n1 3\\n1 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 1173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3\\n1 3\\n1 2\") == '3'\n\"\"\"\nimport collections"
    },
    {
        "number": 1173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3\\n1 3\\n1 2\") == \"3\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"-1\"\n\"\"\""
    },
    {
        "number": 1173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3\\n1 3\\n1 2\") == '3'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 1173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3\\n1 3\\n1 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 1174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n2 13 8\") == \"9\"\n\"\"\"\nfrom collections import defaultdict\nimport math\n"
    },
    {
        "number": 1174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n2 13 8\") == \"9\"\n\n\"\"\"\nimport sys\nfrom typing import List\n\nclass Solution:\n    def __init__(self):\n        self.prices = []\n        self.tickets = []\n        self.discounts = []\n        self.n = 0\n        self.m = 0\n        self.min = 0\n\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 1174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 13 8\\n') == '9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n2 13 8') == '9'\n\n\"\"\"\n\nfrom math import log\n"
    },
    {
        "number": 1174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\n------Test Case ------\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 1174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n13 8') == '9'\n"
    },
    {
        "number": 1174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 13 8\") == \"9\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 1174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3\n2 13 8''') == '9'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 1174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 13 8\\n') == 9\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nprices = list(map(int, sys.stdin.readline().split()))\n\ntotal = 0\nfor price in prices:\n    total += price // (2 ** M)\nprint(total)\n"
    },
    {
        "number": 1174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 2 3 4') == '8'\nassert solution('4 2\\n4 1 3 2') == '6'\n\"\"\"\n\nn, m = list(map(int, stdin.readline().split()))\nprices = list(map(int, stdin.readline().split()))\n\nmoney = 0\n\nfor i in range(n):\n    if m == 0:\n        break\n    if i % 2 == 0:\n        money += prices[i] / 2 ** m\n    else:\n        money += prices[i] * m\n    m -= 1\n\nprint(int(money))\n"
    },
    {
        "number": 1175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 1175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 1175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3') == '3'"
    },
    {
        "number": 1175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n') == '3'\n\"\"\""
    },
    {
        "number": 1175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 3) == 1\nassert solution(2, 3) == 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 1175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 1175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 1175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1, 2) == 3\nassert solution(0, 0) == 0\nassert solution(3, 3) == 1\nassert solution(3, 2) == 3\nassert solution(3, 5) == 1\n\"\"\"\n"
    },
    {
        "number": 1175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-10 5 -4\") == \"19\"\nassert solution(\"4\\n1 3 2 4\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 1176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n-10 5 -4\"\"\") == \"19\"\n\n\"\"\"\n[RUNNABLE EXAMPLES]\n[Case #1]:\n3\n-10 5 -4\n10 -5 4\n\n[Case #2]:\n6\n-3 -1 5 1 4 1\n-3 -1 -4 1 5 1\n\n[Case #3]:\n1\n-3\n\"\"\""
    },
    {
        "number": 1176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5 -4\") == \"19\"\n\"\"\"\n\n\"\"\"\nHackerRank Python Practice\nFunction to find the maximum of the array using the divide and conquer approach\n\nGiven an array, find the maximum element in the array and return its index. If the array is empty, return -1.\n\nNote:\n\nYou can\u2019t use max() or min() functions.\nYou can\u2019t use sort() function.\nYou can\u2019t use built-in functions.\nYou can\u2019t use inbuilt methods.\n\"\"\"\n"
    },
    {
        "number": 1176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('-3') == '-3'\nassert solution('-1 -2') == '-1'\nassert solution('-5 -4') == '-5'\n"
    },
    {
        "number": 1176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n-10 5 -4') == '19'\nassert solution('2\\n5 -6\\n1 3') == '5'\n\"\"\"\n\nimport sys\nimport functools\nimport operator"
    },
    {
        "number": 1176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-10 5 -4\") == \"19\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n-10 5 -4\") == \"19\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip('\\n'))\nA = list(map(int, sys.stdin.readline().rstrip('\\n').split()))\n\nneg = 1\ns = 0\nfor i in range(N):\n    if A[i] > 0:\n        neg = -1\n    else:\n        s += neg * A[i]\n\nprint(s)\n"
    },
    {
        "number": 1176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n-10 5 -4') == '19'\n"
    },
    {
        "number": 1176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5\\n-10 5 -4') == 19\n"
    },
    {
        "number": 1176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 -5 -4\") == 19\n"
    },
    {
        "number": 1177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 4\n2 2 4''') == '5'\n"
    },
    {
        "number": 1177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 3') == '0'\nassert solution('5 4') == '2'\nassert solution('10 6') == '5'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n2 2 4\") == \"5\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nfrom itertools import product\nfrom typing import List, Tuple\n\nimport numpy as np\n"
    },
    {
        "number": 1177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n2 2 4\") == \"5\"\n\"\"\"\n\nn, s = (int(n) for n in input().split())\na = [int(n) for n in input().split()]\n\nsums = []\nfor i in range(n):\n    a_sum = 0\n    for j in range(i+1):\n        a_sum += a[j]\n    sums.append(a_sum)\n\ncnt = 0\nsums.sort()\nfor i in range(n):\n    L = 1\n    R = n\n    while L < R:\n        mid = (L+R)//2\n        if sums[mid] + sums[i] == s:\n            cnt += 1\n            L = mid + 1\n        elif sums[mid] + sums[i] > s:\n            R = mid\n        else:\n            L = mid + 1\n\nprint(cnt%998244353)\n"
    },
    {
        "number": 1177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 1177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n2 2 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 1177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n2 2 4\") == \"5\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 1177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n2 2 4\") == \"5\"\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 1177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n2 2 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 1177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n2 2 4') == '5'\n\n-----\n\nThe problem asks for the sum of f(L, R) where f(L, R) is the number of sequences of integers [1, 2,..., N] that are increasing subsequences of S, and the following constraints:\n\n1 <= N <= 3000\n1 <= S <= 3000\n1 <= A_i <= 3000\n\nThe answer is the sum of f(L, R) for all the pairs (L, R) such that\n1 <= L <= R <= N\n1 <= A_i <= S, where i is between L and R.\n\nThe key to solving this problem is to understand that we have a bunch of increasing subsequences of S, and that they all start at some point and end somewhere in the middle of the sequence. This means that for each increasing subsequence of S, we can split the sequence into two pieces: the part before the first instance of the subsequence, and the part after. We need to sum up the number of increasing subsequences for each of the two pieces.\n\nAs an example, consider the sequence [1, 2, 3, 4]. The left part is [1, 2, 3] and the right part is [4]. These two parts each have one increasing subsequence, [1, 2, 3] and [2, 3, 4].\n\nSo, if we take the subsequence [2, 3, 4] and reverse it, [4, 3, 2], we have two increasing subsequences of [1, 2, 3, 4].\n\nBecause there is one increasing subsequence for each of the left and right parts, we can sum up the number of increasing subsequences of S using the following recursion relation:\n\nf(L, R) = f(L, M-1) + f(M+1, R)\nwhere M is the first instance of the increasing subsequence.\n\nWe can also see that f(L, R) is the sum of the numbers that appear in the increasing subsequences of [L, R] and the increasing subsequences of [L, R].\n\nBecause we need the sum of the numbers in the increasing subsequences, we will need to use a dictionary to keep track of the sum of the numbers. This allows us to ignore the number of instances of an increasing subsequence.\n\nThe recursive implementation of this problem is straightforward. We will be using a dictionary d to keep track of the number of times an increasing subsequence of S appears in the list. We will also be using a sum_count variable to keep track of the running total of the sum of the values of the dictionary.\n\nTime complexity:\n\nFor each entry in the dictionary, we will need to look at its value, which is O(1). For each call to the function, we will need to make one recursive call, which is O(n), where n is the length of the list. Therefore, the total time complexity is O(n).\n\nSpace complexity:\n\nThe space complexity is O(n) as well. The sum_count dictionary needs to have a space complexity of O(n).\n\nNote: The space complexity is O(n) since we are using a dictionary with an O(n) time complexity."
    },
    {
        "number": 1178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n2 3 4 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 1178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 1178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n2 3 4 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n2 3 4 1') == '3'\n\"\"\""
    },
    {
        "number": 1178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n2 3 4 1\") == \"3\"\n\"\"\"\n\nfrom sys import stdin\nfrom math import inf\nfrom collections import deque\n"
    },
    {
        "number": 1178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n2 3 4 1\") == '3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n2 3 4 1\") == \"3\"\n\"\"\"\n\n\"\"\"\nInput\n4 2\n1 2 3 4\nOutput\n3\n\"\"\"\n\nn, k = input().split()\nn, k = int(n), int(k)\nh = list(map(int, input().split()))\n\nrows = []\nfor i in range(1, n + 1):\n    rows.append(h[i - 1] + rows[i - 1] if i > 1 else h[i - 1])\n\nprint(sum(rows) - rows[-1])"
    },
    {
        "number": 1178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n2 3 4 1\") == \"3\"\n\"\"\"\n\nfrom sys import stdin\n\nN, K = map(int, stdin.readline().split())\nh = list(map(int, stdin.readline().split()))\nh.sort(reverse=True)"
    },
    {
        "number": 1178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n2 3 4 1') == '3'\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 1178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n2 3 4 1') == 3\n\"\"\""
    },
    {
        "number": 1179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n10 4 18 3') == '4'\nassert solution('2 2\\n1 2') == '1'\nassert solution('4 5\\n10 4 18 3') == '4'\n\"\"\"\n\nimport unittest\nimport random\n"
    },
    {
        "number": 1179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n10 4 18 3') == '4'\nassert solution('2 2\\n1 2') == '1'\n\"\"\"\n\nfrom itertools import cycle\nimport math"
    },
    {
        "number": 1179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n10 4 18 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 1179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n10 4 18 3\") == \"4\"\nassert solution(\"2 2\\n1 2\") == \"1\"\n\"\"\"\n\nn, k = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\ns = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\nprint(s[k - 1])\n"
    },
    {
        "number": 1179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 2') == '1'\nassert solution('4 5\\n10 4 18 3') == '4'\n"
    },
    {
        "number": 1179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n10 4 18 3') == '4'\nassert solution('2 2\\n1 2') == '1'\nassert solution('10 10\\n10 4 18 3') == '10'\nassert solution('10 10\\n10 4 18 3') == '10'\n\"\"\"\n"
    },
    {
        "number": 1179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1'\nassert solution('10 4 18 3') == '4'\nassert solution('10 4 1') == '1'\nassert solution('2 2') == '1'\nassert solution('3 2') == '2'"
    },
    {
        "number": 1179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '3'\nassert solution('1 2 3 4 5') == '4'\n\"\"\""
    },
    {
        "number": 1179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2\") == \"1\"\nassert solution(\"4 5\\n10 4 18 3\") == \"4\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"3\\n1 1 2\") == \"2\"\n"
    },
    {
        "number": 1179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n10 4 18 3\") == \"4\"\nassert solution(\"2 2\\n1 2\") == \"1\"\nassert solution(\"1 1\\n1\") == \"1\"\n\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import Dict, Tuple, List, NamedTuple\n\nfrom collections import defaultdict\nfrom itertools import chain\nimport re\n\n\"\"\"\n\nGiven a list of identifiers (identifiers), and a target k, return the k-th identifier from the end that is pronounced.\n\nEach list of identifiers is formatted as follows:\n\n\"n k\"\n\nWhere:\n\nn = number of robots\nk = the target number of the identifier\n\nThe identifiers are given in the ascending order of their value.\n\nReturn the value of the k-th identifier.\n\nExample\n\nFor identifiers = [\"1 2\", \"1 3\", \"1 4\"], and k = 2, the output should be\nsolution(identifiers, k) = \"1 4\".\n\nHere is the digit sequence of the second robot:\n\n\"1 3 4\".\n\nIn this case, the second robot pronounced the identifier \"1 4\", that is, the second identifier.\n\nFor identifiers = [\"10 4\", \"10 5\", \"1 2\", \"10 6\"], and k = 5, the output should be\nsolution(identifiers, k) = \"4\".\n\nHere is the digit sequence of the fifth robot:\n\n\"10 6\".\n\nIn this case, the fifth robot pronounced the identifier \"4\", that is, the fourth identifier.\n\n\"\"\"\n"
    },
    {
        "number": 1180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"108\") == 27\nassert solution(\"1\") == 1\nassert solution(\"100\") == 100\nassert solution(\"100500\") == 9\nassert solution(\"100100\") == 189\n"
    },
    {
        "number": 1180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100500') == '100500'\nassert solution('1+00+500') == '1+00+500'\nassert solution('100+0+500') == '100+0+500'\nassert solution('10050+0') == '10050+0'\nassert solution('100+0+0+5+0+0') == '100+0+0+5+0+0'\n"
    },
    {
        "number": 1180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('111') == 3\nassert solution('100') == 1\nassert solution('1111') == 0\nassert solution('9') == 1\n\nprint(solution('9'))"
    },
    {
        "number": 1180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100500\") == \"100500\"\nassert solution(\"1005\") == \"1005\"\nassert solution(\"100\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 1180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100500') == '100500'\nassert solution('110111') == '110111'\nassert solution('01') == '1'\nassert solution('101') == '101'\nassert solution('1110') == '1110'\n"
    },
    {
        "number": 1180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100500\") == \"100500\"\nassert solution(\"100\") == \"100\"\nassert solution(\"999\") == \"999\"\nassert solution(\"8\") == \"8\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 1180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1010\") == \"10\"\nassert solution(\"1+0+0+0\") == \"10\"\nassert solution(\"1+0+0+0+0+0\") == \"1\"\nassert solution(\"100010\") == \"1\"\nassert solution(\"1+0+0+0+0+0\") == \"1\"\n"
    },
    {
        "number": 1180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100500') == '100500'\nassert solution('10050') == '10050'\nassert solution('100') == '100'\nassert solution('101') == '101'\nassert solution('102') == '101'\n"
    },
    {
        "number": 1180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0808\") == \"27\"\nassert solution(\"100500\") == \"100500\"\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 1180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100500') == '100500'\nassert solution('100500') == '100500'\nassert solution('100500') == '100500'\nassert solution('100500') == '100500'\n\nassert solution('100500') == '100500'\n"
    },
    {
        "number": 1181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n1 2 3 4 3 2\") == \"3\"\nassert solution(\"10 5\\n9 4 3 8 8\") == \"6\"\n"
    },
    {
        "number": 1181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6\\n1 2 3 4 3 2\") == '3'\nassert solution(\"10 5\\n9 4 3 8 8\") == '6'\n\"\"\"\n"
    },
    {
        "number": 1181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\\n1 2 3 4 3 2\") == \"3\"\nassert solution(\"10 5\\n9 4 3 8 8\") == \"6\""
    },
    {
        "number": 1181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4\") == 6\nassert solution(\"10 5\") == 6\n\"\"\""
    },
    {
        "number": 1181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6\\n1 2 3 4 3 2') == '3'\n"
    },
    {
        "number": 1181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\\n1 2 3 4 3 2\") == \"3\"\nassert solution(\"10 5\\n9 4 3 8 8\") == \"6\"\n"
    },
    {
        "number": 1181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6\\n1 2 3 4 3 2\") == \"3\"\nassert solution(\"10 5\\n9 4 3 8 8\") == \"6\""
    },
    {
        "number": 1181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\\n1 2 3 4 3 2\") == \"3\"\nassert solution(\"10 5\\n9 4 3 8 8\") == \"6\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4 6\\n'\n    '1 2 3 4 3 2'\n) == 3\n\n-----\n    def solution(stdin):\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    s = [0] * n\n    s[0] = a[0]\n    for i in range(1, m):\n        s[i] = a[i] - a[i-1]\n    \n    return sum(abs(x) for x in s[1:])\n\n    assert solution(\n        '4 6\\n'\n        '1 2 3 4 3 2'\n    ) == 3\n"
    },
    {
        "number": 1181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\n1 2 3 4 3 2\") == \"3\"\nassert solution(\"10 5\\n9 4 3 8 8\") == \"6\"\n\nfrom typing import List, Optional\nfrom collections import Counter\nfrom math import inf"
    },
    {
        "number": 1182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3 2\\n1 1\\n3 1\\n2 2\") == 4\n"
    },
    {
        "number": 1182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 1 1\\n1 2') == 4\nassert solution('3 2 3 3\\n1 1\\n3 1\\n2 2') == 1\nassert solution('3 2 3 2\\n1 1\\n3 1\\n2 2') == 4"
    },
    {
        "number": 1182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 1 1\\n1 2\\n\") == \"4\"\nassert solution(\"3 2 3 2\\n1 1\\n3 1\\n2 2\\n\") == \"1\"\nassert solution(\"3 2 3 3\\n1 1\\n3 1\\n2 2\\n\") == \"4\"\n\n\n\"\"\"\nimport math\nimport sys\nimport collections"
    },
    {
        "number": 1182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1 1\\n1 2\\n\") == \"4\"\nassert solution(\"3 2 3 3\\n1 1\\n3 1\\n2 2\\n\") == \"1\"\nassert solution(\"3 2 3 2\\n1 1\\n3 1\\n2 2\\n\") == \"4\"\n\"\"\"\n\nimport functools"
    },
    {
        "number": 1182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3 2\\n1 1\\n3 1\\n2 2\") == 4"
    },
    {
        "number": 1182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1 1\\n1 2\") == \"4\"\nassert solution(\"3 2 3 3\\n1 1\\n3 1\\n2 2\") == \"1\"\nassert solution(\"3 2 3 2\\n1 1\\n3 1\\n2 2\") == \"4\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 1182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1 1\") == \"4\"\nassert solution(\"3 2 3 3\") == \"1\"\nassert solution(\"3 2 3 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 1182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2 3 2\n1 1\n3 1\n2 2''') == '4'\nassert solution('''3 2 3 2\n1 1\n3 1\n2 2''') == '1'\nassert solution('''3 2 3 2\n1 1\n3 1\n2 2''') == '4'\nassert solution('''3 2 3 2\n1 1\n3 1\n2 2''') == '1'\nassert solution('''3 2 3 2\n1 1\n3 1\n2 2''') == '4'\n"
    },
    {
        "number": 1182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1 1\\n1 2\") == 4\nassert solution(\"3 2 3 3\\n1 1\\n3 1\\n2 2\") == 1\nassert solution(\"3 2 3 2\\n1 1\\n3 1\\n2 2\") == 4"
    },
    {
        "number": 1182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1 1\\n1 2\\n\") == \"4\"\n\nassert solution(\"3 2 3 3\\n1 1\\n3 1\\n2 2\\n\") == \"1\"\n\nassert solution(\"3 2 3 2\\n1 1\\n3 1\\n2 2\\n\") == \"4\"\n\nprint('Success')"
    },
    {
        "number": 1183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 1 1 1') == '1'\nassert solution('4 1\\n1 1 1 1') == '101'\nassert solution('1 1\\n1 1 1 1') == '2'\nassert solution('3 1\\n1 1 1 1') == '1'\nassert solution('4 1\\n1 1 1 1') == '101'\n\"\"\"\n"
    },
    {
        "number": 1183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n6 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\\n1\\n4 57\\n80 60 40 20') == '101\\n2\\n2\\n60'\n-----Problem-----\nhttps://www.codewars.com/kata/54aa075a2455f0a12f000004\n\"\"\"\n"
    },
    {
        "number": 1183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\\n1\\n4 57\\n80 60 40 20\\n') == '101\\n2\\n2\\n60'\nassert solution('5\\n6 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\\n1\\n4 57\\n80 60 40 20\\n') == '101\\n2\\n2\\n60'\nassert solution('4\\n57 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\\n1\\n4 57\\n80 60 40 20\\n') == '101\\n2\\n2\\n60'\nassert solution('1\\n2 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\\n1\\n4 57\\n80 60 40 20\\n') == '101\\n2\\n2\\n60'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"tests/0.in\", \"r\").read()) == \"101\"\nassert solution(open(\"tests/1.in\", \"r\").read()) == \"2\"\nassert solution(open(\"tests/2.in\", \"r\").read()) == \"2\"\nassert solution(open(\"tests/3.in\", \"r\").read()) == \"50\"\nassert solution(open(\"tests/4.in\", \"r\").read()) == \"51\"\n"
    },
    {
        "number": 1183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 2\n7 6 5 4 3\n1 100\n100\n11 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1\n1\n4 57\n80 60 40 20\n\"\"\") == \"101\"\nassert solution(\"\"\"\n2 1\n7 6 5 4 3\n1 100\n100\n11 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1\n1\n4 57\n80 60 40 20\n\"\"\") == \"101\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 1183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\\n1\\n4 57\\n80 60 40 20') == '101\\n2\\n2\\n60'\nassert solution('5 2\\n6 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\\n1\\n4 57\\n80 60 40 20') == '101\\n2\\n2\\n60'"
    },
    {
        "number": 1183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\") == \"101\\n2\\n2\\n60\"\nassert solution(\"5 2\\n6 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\") == \"101\\n2\\n2\\n60\"\nassert solution(\"5 2\\n6 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\") == \"101\\n2\\n2\\n60\"\n\nsolution(\"5 3\\n6 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\") == \"101\\n2\\n2\\n60\"\nsolution(\"5 4\\n6 3\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\") == \"101\\n2\\n2\\n60\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 1183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\\n1\\n4 57\\n80 60 40 20\") == \"101\"\n\"\"\""
    },
    {
        "number": 1183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n2 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1') == '101\\n2\\n2\\n60'\nassert solution('1 5\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1') == '101\\n2'\nassert solution('4 5\\n2 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1') == '101'\nassert solution('2 5\\n2 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1') == '101'\n'''\n"
    },
    {
        "number": 1183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1\\n1\") == \"101\"\nassert solution(\"5 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\") == \"2\"\nassert solution(\"5 2\\n3 1 1 5 7 10\\n1 100\\n100\\n11 1\\n1 1 1 1 1 1 1 1 1 1 1\") == \"100\"\n\"\"\"\n\nt = int(input())\n\nfor i in range(t):\n    n, x = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    j = 0\n    while j < n:\n        if a[j] == 1:\n            break\n        else:\n            j += 1\n    print(j + x)\n"
    },
    {
        "number": 1184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('{a, b, c}') == '3'\nassert solution('{b, a, b, a}') == '2'\nassert solution('{}') == '0'\n\"\"\"\n"
    },
    {
        "number": 1184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"{a,b,c}\") == \"3\"\nassert solution(\"{b,a,b,a}\") == \"2\"\nassert solution(\"{}\") == \"0\"\nassert solution(\"{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}\") == \"26\"\nassert solution(\"{a,a,a,a,a,b,b,b,b,c,c,c,c,c,c,d,d,d,d,d,e,e,e,e,e,e,e,e,e,e,f,f,f,f,f,f,g,g,g,g,g,g,h,h,h,h,h,h,i,i,i,i,i,i,i,i,i,i,i,j,j,j,j,j,j,j,k,k,k,k,k,k,k,k,k,k,k,l,l,l,l,l,l,l,l,l,l,m,m,m,m,m,m,m,m,m,m,n,n,n,n,n,n,n,n,n,n,n,n,n,o,o,o,o,o,o,o,o,o,o,o,o,o,o,p,p,p,p,p,p,p,p,p,p,p,p,p,p,q,q,q,q,q,q,q,q,q,q,r,r,r,r,r,r,r,r,r,r,r,r,r,s,s,s,s,s,s,s,s,s,s,s,s,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,y,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,"
    },
    {
        "number": 1184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"{a, b, c}\") == \"3\"\nassert solution(\"{b, a, b, a}\") == \"2\"\nassert solution(\"{}\") == \"0\"\nassert solution(\"{a, b, c}\") == \"3\"\nassert solution(\"{b, a, b, a}\") == \"2\"\n"
    },
    {
        "number": 1184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('{a,b,c}') == '3'\nassert solution('{b,a,b,a}') == '2'\nassert solution('{}') == '0'\nassert solution('{a,b,a}') == '2'\nassert solution('{b,a,b,a}') == '2'\n"
    },
    {
        "number": 1184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('{a, b, c}') == '3'\nassert solution('{b, a, b, a}') == '2'\nassert solution('{}') == '0'"
    },
    {
        "number": 1184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"{a, b, c}\") == \"3\"\nassert solution(\"{b, a, b, a}\") == \"2\"\nassert solution(\"{}\") == \"0\"\n\"\"\""
    },
    {
        "number": 1184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"{b, a, b, a}\") == 2\nassert solution(\"{a, b, c}\") == 3\n\"\"\"\nimport collections\n"
    },
    {
        "number": 1184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"{a, b, c}\") == \"3\"\nassert solution(\"{b, a, b, a}\") == \"2\"\nassert solution(\"{}\") == \"0\"\n"
    },
    {
        "number": 1184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"{a, b, c}\") == 3\nassert solution(\"{b, a, b, a}\") == 2\nassert solution(\"{}\") == 0\nassert solution(\"{{a, b, c}}\") == 3\nassert solution(\"{{a, b, c}, {d, e, f}}\") == 6\n"
    },
    {
        "number": 1184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''{a, b, c}''') == '3'\nassert solution('''{b, a, b, a}''') == '2'\nassert solution('''{}''') == '0'\n\"\"\"\n\nimport re"
    },
    {
        "number": 1185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 1\\n1 2 3 4 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 1185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 1185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\\n1 2 3 4 5\") == \"9\"\nassert solution(\"7 1 3\\n2 10 7 18 5 33 0\") == \"61\"\n"
    },
    {
        "number": 1185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 1\\n1 2 3 4 5') == 9\n\"\"\"\n"
    },
    {
        "number": 1185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 1\\n1 2 3 4 5') == '9'\nassert solution('5 2 1\\n1 2 3 4 5\\n') == '61'\nassert solution('7 1 3\\n2 10 7 18 5 33 0\\n') == '61'\n\"\"\"\n\nfrom math import inf\nfrom functools import reduce\nfrom operator import add\n"
    },
    {
        "number": 1185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n1 2 3 4 5\") == \"9\"\nassert solution(\"7 1 3\\n2 10 7 18 5 33 0\") == \"61\"\nprint(\"Success\")\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 1185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1\\n1 2 3 4 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 1185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1\\n1 2 3 4 5\\n') == '9'\nassert solution('7 1 3\\n2 10 7 18 5 33 0\\n') == '61'\n\n\"\"\"\n"
    },
    {
        "number": 1185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1 3\") == \"9\"\nassert solution(\"7 1 3\") == \"61\"\nassert solution(\"6 1 2\") == \"10\"\nassert solution(\"6 2 2\") == \"8\"\nassert solution(\"7 2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 1185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"9\"\nassert solution(\"1 2 3 4 5 6\") == \"9\"\nassert solution(\"10 9 8 7 6 5 4 3 2 1\") == \"61\"\nassert solution(\"10 9 8 7 6 5 4 3 2 1 0\") == \"61\"\nassert solution(\"10 9 8 7 6 5 4 3 2 1 1\") == \"61\"\n"
    },
    {
        "number": 1186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"6\") == \"YES\\n6 5 4 3 2 1\"\n"
    },
    {
        "number": 1186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == \"NO\"\nassert solution(6) == \"YES\"\n"
    },
    {
        "number": 1186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 'NO'\nassert solution('6') == 'YES\\n6 5 4 3 2 1'\n"
    },
    {
        "number": 1186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"6\") == \"YES\"\n\nassert solution(\"3\") == \"NO\"\nassert solution(\"6\") == \"YES\"\n\nassert solution(\"3\") == \"NO\"\n"
    },
    {
        "number": 1186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 1186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n\") == \"NO\"\nassert solution(\"6\\n\") == \"YES\\n6 5 4 3 2 1\\nYES\\n3 6 2 5 1 4\"\n"
    },
    {
        "number": 1186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 'NO'\nassert solution('6') == 'YES'\n\"\"\""
    },
    {
        "number": 1186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 'NO'\nassert solution(\"6\") == 'YES'\nassert solution(\"10\") == 'NO'\nassert solution(\"17\") == 'YES'\nassert solution(\"18\") == 'YES'\n\"\"\""
    },
    {
        "number": 1186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 'NO'\nassert solution('6') == 'YES'\n\n-----------------\n\nWe can divide the task into two subtasks:\n\nfor each of the N numbers x:\n    find two permutations p and q such that p[i] = x and q[i]!= x for all i = 1, 2,..., N.\n    find two permutations r and s such that r[i] = x and s[i]!= x for all i = 1, 2,..., N.\n\nIn the first subtask, we can find a permutation p of the numbers [1,..., N] such that all elements of p are different.\nIn the second subtask, we can find a permutation q of the numbers [1,..., N] such that all elements of q are different.\n\nWe can find a solution in O(N) time by considering the numbers in the range [1,..., N].\n\nLet's consider the number x.\nSince we can find a solution for the first subtask only if x is distinct for the second subtask, x can have one of two values:"
    },
    {
        "number": 1186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('4') == 'YES'\nassert solution('6') == 'YES\\n6 5 4 3 2 1'\n"
    },
    {
        "number": 1187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n3 4\\n2 4\\n1 4\") == '1'\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == '2'\n\n\"\"\""
    },
    {
        "number": 1187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(text) == result\nprint(solution(text))\n\n-----\n5 3\n1 2\n2 3\n3 4\n4 5\n5 2\n\n2\n1 1 1 2\n\n1\n1 1 1 1 1\n\n2\n1 1 2\n1 1 1 2\n\n3\n1 1 1 2\n1 1 1 2\n1 1 1 2\n\n2\n1 1 2\n1 1 1 2\n\n1\n1 1 1 1 1 1\n\n1\n1 1 1 1 1 1\n\n4\n1 1\n1 1\n1 1\n1 1\n\n1\n1\n1\n1\n\n2\n1 1\n1 1\n\n1\n1\n1\n\n1\n1\n1\n1\n\n4\n1 1\n2 3\n3 1\n1 4\n\n2\n1 1\n1 1\n\n1\n1\n1\n1\n\n2\n1 1\n1 1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n2\n1 1\n1 1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n2\n1 1\n1 1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1"
    },
    {
        "number": 1187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n3 4\\n2 4\\n1 4\") == \"1\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"2\"\nassert solution(\"7 4\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n2 7\") == \"1\"\nassert solution(\"6 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"2\"\nassert solution(\"3 2\\n1 2\\n2 3\\n3 1\") == \"1\"\n"
    },
    {
        "number": 1187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n3 4\\n2 4\\n1 4\\n') == '1\\n1 1 1 1 1'\n"
    },
    {
        "number": 1187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n3 4\\n2 4\\n1 4\\n\") == \"1\\n1 1 1 1 1\"\n\"\"\"\n"
    },
    {
        "number": 1187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n3 4\\n2 4\\n1 4\") == \"1\\n1 1 1 1 1\"\n\"\"\"\n\nfrom collections import deque\nfrom math import ceil\nfrom sys import stdin\nfrom typing import Deque, List, Tuple\n"
    },
    {
        "number": 1187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0 1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2\\n2 1') == '2'\n"
    },
    {
        "number": 1187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n3 4\\n2 4\\n1 4\\n\") == \"1\\n1 1 1 1 1\\n\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\\n\") == \"2\\n1 1 2\\n\"\nprint('Example 1:')\nprint('Input : ')\nprint('4 5\\n1 2\\n1 3\\n3 4\\n2 4\\n1 4\\n')\nprint('Exception :')\nprint('1\\n1 1 1 1 1\\n')\nprint('Output :')\nprint(solution(\"4 5\\n1 2\\n1 3\\n3 4\\n2 4\\n1 4\\n\"))\nprint()\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import *\nimport sys\n\ninput_data = \"\"\"4 5\n1 2\n1 3\n3 4\n2 4\n1 4\"\"\"\n\n\nclass MinDistance(object):\n    def __init__(self, n: int, m: int, adj_list: List[List[int]]):\n        self.n = n\n        self.m = m\n        self.adj_list = adj_list\n        self.color = [[0 for _ in range(m)] for _ in range(n)]\n\n    def find(self, parent: List[int], v: int) -> int:\n        if parent[v] == v:\n            return v\n        return self.find(parent, parent[v])\n\n    def union(self, parent: List[int], rank: List[int], x: int, y: int) -> None:\n        x_root = self.find(parent, x)\n        y_root = self.find(parent, y)\n        if rank[x_root] < rank[y_root]:\n            parent[x_root] = y_root\n        elif rank[x_root] > rank[y_root]:\n            parent[y_root] = x_root\n        else:\n            parent[y_root] = x_root\n            rank[x_root] += 1\n\n    def get_min_distance(self, start_vertex: int) -> int:\n        parent = [i for i in range(self.n)]\n        rank = [0 for _ in range(self.n)]\n        visited = [False for _ in range(self.n)]\n        colors = set([i for i in range(self.m)])\n\n        distances = defaultdict(list)\n        for u, v in self.adj_list:\n            distances[u].append(v)\n            distances[v].append(u)\n\n        def min_distance(vertex: int) -> int:\n            visited[vertex] = True\n            min_dist = float(\"inf\")\n            for v in distances[vertex]:\n                if not visited[v]:\n                    dist = 1 + min_distance(v)\n                    if dist < min_dist:\n                        min_dist = dist\n            return min_dist\n\n        return min([min_distance(i) for i in range(self.n) if not visited[i]])\n\n    def dfs(self) -> List[int]:\n        for i in range(self.n):\n            if not self.color[i][0]:\n                for j in range(self.m):\n                    if not self.color[i][j]:\n                        self.color[i][j] = self.get_min_distance(i)\n\n        return self.color\n"
    },
    {
        "number": 1187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''4 5\n1 2\n1 3\n3 4\n2 4\n1 4''') == '1'\n\nassert solution(\n'''3 3\n1 2\n2 3\n3 1''') == '2'\n\nassert solution(\n'''4 5\n1 2\n1 3\n3 4\n2 4\n1 4''') == '2'\nassert solution(\n'''4 4\n1 2\n2 3\n3 4\n1 3\n2 1\n1 4\n3 1\n2 3\n4 2\n3 2\n1 4''') == '3'\nassert solution(\n'''6 7\n1 2\n2 3\n3 4\n4 5\n5 6\n1 6\n2 5\n3 4\n3 5\n4 6\n5 4''') == '1'"
    },
    {
        "number": 1187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n3 4\\n2 4\\n1 4\") == \"1\"\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict\n\nn, m = map(int, stdin.readline().split())\nadjacency_list = defaultdict(set)\nfor _ in range(m):\n    u, v = map(int, stdin.readline().split())\n    adjacency_list[u].add(v)\n    adjacency_list[v].add(u)\n\nvisited = set()\ncolors = [0 for _ in range(n)]\nfor node in adjacency_list[1]:\n    colors[node - 1] = 1\n    visited.add(node)\n    for neighbor in adjacency_list[node]:\n        if neighbor not in visited:\n            colors[neighbor - 1] = 1\n            visited.add(neighbor)\n\nfor i in range(n):\n    if colors[i] == 0:\n        for neighbor in adjacency_list[i + 1]:\n            if colors[neighbor - 1] == 0:\n                colors[i] = 1\n                break\n\nprint(max(colors) + 1)\n\n\"\"\"\nfrom collections import defaultdict\nfrom copy import deepcopy\n\nn, m = map(int, input().split())\nadjacency_list = defaultdict(set)\nfor _ in range(m):\n    u, v = map(int, input().split())\n    adjacency_list[u].add(v)\n    adjacency_list[v].add(u)\n\ncolors = [0 for _ in range(n)]\n\nfor i in range(1, n + 1):\n    for neighbor in adjacency_list[i]:\n        if colors[neighbor - 1] == 0:\n            colors[neighbor - 1] = 1\n            break\n\nprint(max(colors) + 1)"
    },
    {
        "number": 1188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 1 2 2 3 4 5 8\") == \"2\"\nassert solution(\"6\\n1 1 1 2 2 2\") == \"2 3\"\nassert solution(\"5\\n1 2 4 4 4\") == \"-1\""
    },
    {
        "number": 1188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1 1 2 2 3 4 5 8\") == \"2\"\nassert solution(\"6\\n1 1 1 2 2 2\") == \"2 3\"\n\"\"\"\n"
    },
    {
        "number": 1188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 1 2 2 3 4 5 8') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6, 20\") == \"2\"\nassert solution(\"1, 1, 2, 2, 3, 4, 5, 8\") == \"2\"\nassert solution(\"1, 1, 2, 2, 2, 4, 4, 4\") == \"3\"\nassert solution(\"1, 2, 4, 4, 4, 4\") == -1\n"
    },
    {
        "number": 1188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 32 4123 43 123\") == \"1 1 2 2 3 3\"\nassert solution(\"123123412341234123123\") == \"1 1 2 2 3 3\"\nassert solution(\"123123123123123\") == \"1 1 2 2 3 3\"\nassert solution(\"123123123123\") == \"1 1 2 2 3 3\"\nassert solution(\"123123123\") == \"1 1 2 2 3 3\"\n"
    },
    {
        "number": 1188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2 2 3 5 8') == '2'\nassert solution('4 1 2 2 3 5 7 8') == '-1'\nassert solution('1 1 1 2 2 2') == '3'\nassert solution('1 2 4 4 4') == '-1'\nassert solution('1 1 1 2 2 2') == '2'\n\n\"\"\""
    },
    {
        "number": 1188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n1 1 2 2 3 4 5 8') == '2'\n\nassert solution('6\\n1 1 1 2 2 2') == '-1'\n\nassert solution('5\\n1 2 4 4 4') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 1 2 2 3 4 5 8\") == \"2\"\nassert solution(\"6\\n1 1 1 2 2 2\") == \"2 3\"\nassert solution(\"5\\n1 2 4 4 4\") == \"1\"\n"
    },
    {
        "number": 1188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 1 2 2 3 4 5 8\") == \"2\"\nassert solution(\"6\\n1 1 1 2 2 2\") == \"2\"\nassert solution(\"5\\n1 2 4 4 4\") == \"-1\"\nassert solution(\"5\\n1 1 1 2 2\") == \"3\"\n"
    },
    {
        "number": 1188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 1 2 2 4 4 4\") == '2'\nassert solution(\"12\\n1 1 2 2 3 3 4 4 5 8 8\") == '2'\nassert solution(\"5\\n1 2 4 4 4\") == '-1'\nassert solution(\"8\\n1 1 2 2 3 4 5 8\") == '2'\nassert solution(\"6\\n1 1 1 2 2 2\") == '-1'\n\nprint(solution(\"7\\n1 1 2 2 4 5 8\"))\n"
    },
    {
        "number": 1189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == \"5\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"3 2\") == \"9\"\nassert solution(\"11 5\") == \"4367\"\nassert solution(\"37 63\") == \"230574\""
    },
    {
        "number": 1189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1') == '5'\nassert solution('2 2') == '5'\nassert solution('3 2') == '9'\nassert solution('11 5') == '4367'\nassert solution('37 63') == '230574'\n"
    },
    {
        "number": 1189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1') == '5'\nassert solution('2 2') == '5'\nassert solution('3 2') == '9'\nassert solution('11 5') == '4367'\nassert solution('37 63') == '230574'\n\nprint('Success')\n\n\n-----\n\n(0,0)    B,.B, BB, B, and.B\n(0,1)    .B, BB, B, and.B\n(0,2)    .B, B, and.B\n(0,3)    B,.B, BB, B, and.B\n(0,4)    .B, B, and.B\n(1,0)    .B, BB, B, and.B\n(1,1)    B,.B, BB, B, and.B\n(1,2)    B,.B, B, and.B\n(1,3)    B,.B, B, and.B\n(1,4)    .B, B, and.B\n(2,0)    .B, B, and.B\n(2,1)    .B, BB, B, and.B\n(2,2)    B,.B, B, and.B\n(2,3)    B,.B, B, and.B\n(2,4)    B,.B, B, and.B\n(3,0)    B,.B, B, and.B\n(3,1)    B,.B, BB, B, and.B\n(3,2)    B,.B, B, and.B\n(3,3)    B,.B, B, and.B\n(3,4)    B,.B, B, and.B\n(4,0)    B,.B, B, and.B\n(4,1)    B,.B, BB, B, and.B\n(4,2)    B,.B, B, and.B\n(4,3)    B,.B, B, and.B\n(4,4)    .B, B, and.B\n(5,0)    .B, B, and.B\n(5,1)    .B, BB, B, and.B\n(5,2)    .B, B, and.B\n(5,3)    .B, B, and.B\n(5,4)    .B, B, and.B\n(6,0)    .B, B, and.B\n(6,1)    .B, BB, B, and.B\n(6,2)    B,.B, B, and.B\n(6,3)    B,.B, B, and.B\n(6,4)    .B, B, and.B\n(7,0)    B,.B, B, and.B\n(7,1)    .B, B, and.B\n(7,2)    B,.B, B, and.B\n(7,3)    B,.B, B, and.B\n(7,4)    B,.B, B, and.B\n(8,0)    B,.B, B, and.B\n(8,1)    .B, B, and.B\n(8,2)    .B, B, and.B\n(8,3)    B,.B, B, and.B\n(8,4)    .B, B, and.B\n(9,0)    B,.B, B, and.B\n(9,1)    B,.B, BB, B, and.B\n(9,2)    B,.B, B, and.B\n(9,3)    B,.B, B, and.B\n(9,4)    B,.B, B, and.B\n(10,0)    .B, B, and.B\n(10,1)    .B, BB, B, and.B\n(10,2)    B,.B, B, and.B\n(10,3)    B,.B, B, and.B\n(10,4)    .B, B, and.B\n(11,0)    B,.B, B, and.B\n(11,1)    B,.B, BB, B, and.B\n(11,2)    B,.B, B, and.B\n(11,3)    B,.B, B, and.B\n(11,4)    .B, B, and.B\n(12,0)    .B, B, and.B\n(12,1)    .B, BB, B, and.B\n(12,2)    B,.B, B, and.B\n(12,3)    B,.B, B, and.B\n(12,4)    B,.B, B, and.B\n(13,0)    B,.B, B, and.B\n(13,1)    B,.B, BB, B, and.B\n(13,2)    B,.B, B, and.B\n(13,3)    B,.B, B, and.B\n(13,4)    B,.B, B, and.B\n(14,0)    .B, B, and.B\n(14,1)    .B, BB, B, and.B\n(14,2)    B,.B, B, and.B\n(14,3)    B,.B, B, and.B\n(14,4)    B,.B, B, and.B\n(15,0)    B,.B, B, and.B\n(15,1)    .B, B, and.B\n(15,2)    B,.B, B, and.B\n(15,3)    .B, B, and.B\n(15,4)    B,.B, B, and.B\n(16,0)    B,.B, B, and.B\n(16,1)    .B, B, and.B\n(16,2)    B,.B, B, and.B\n(16,3)    B,.B, B, and.B\n(16,4)    B,.B, B, and.B\n(17,0)    .B, B, and.B\n(17,1)    B,.B, B, and.B\n("
    },
    {
        "number": 1189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 1189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '2'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 1189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == 5\nassert solution(\"2 2\") == 5\nassert solution(\"3 2\") == 9\nassert solution(\"11 5\") == 4367\nassert solution(\"37 63\") == 230574\n"
    },
    {
        "number": 1189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1') == '5'\nassert solution('2 2') == '5'\nassert solution('3 2') == '9'\nassert solution('11 5') == '4367'\nassert solution('37 63') == '230574'\n"
    },
    {
        "number": 1189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"3 1\") == \"9\"\nassert solution(\"3 2\") == \"9\"\nassert solution(\"4 1\") == \"36\"\n"
    },
    {
        "number": 1189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 9\") == \"1026\"\nassert solution(\"7 11\") == \"1152\"\nassert solution(\"7 12\") == \"2176\"\nassert solution(\"7 13\") == \"3308\"\nassert solution(\"7 14\") == \"7160\"\n"
    },
    {
        "number": 1189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"9\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"11 5\") == \"4367\"\nassert solution(\"37 63\") == \"230574\"\n"
    },
    {
        "number": 1190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 2 1\\n2 1 1 2\") == \"12\"\nassert solution(\"2 2 1 2\\n2 1 1 2\") == \"16\"\n"
    },
    {
        "number": 1190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n1\\n') == ''\nassert solution('1\\n') == ''\nassert solution('\\n1\\n1\\n') == ''\n"
    },
    {
        "number": 1190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 1 2 1''') == '12'\nassert solution('''2 2 1 2''') == '16'"
    },
    {
        "number": 1190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 2 1\") == \"12\"\nassert solution(\"2 2 1 2\") == \"16\"\n\"\"\""
    },
    {
        "number": 1190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 2 1\") == \"12\"\nassert solution(\"2 2 1 2\") == \"16\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 2 1\") == 12\nassert solution(\"2 2 1 2\") == 16\nassert solution(\"1 1 1 1\") == 9\nassert solution(\"2 2 2 2\") == 0\nassert solution(\"3 3 3 3\") == 0\n\"\"\"\n"
    },
    {
        "number": 1190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 2 1\") == 12\n\"\"\"\n"
    },
    {
        "number": 1190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 2 1\") == \"12\"\nassert solution(\"2 2 1 2\") == \"16\"\nprint(\"Test finished.\")\n"
    },
    {
        "number": 1190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 2 1\") == \"12\"\nassert solution(\"2 2 1 2\") == \"16\"\n\n\"\"\"\nimport math\n\nfrom tools import timing\n"
    },
    {
        "number": 1190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 2 1\") == \"12\"\n\"\"\"\nfrom collections import defaultdict\nfrom typing import Dict, List, Set, Tuple, Optional"
    },
    {
        "number": 1191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n4 5 9 7\\n1 2 11 33\") == \"1 3 46 36\"\nassert solution(\"1 0\\n2\\n3\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 11 33\\n1 2 3 4 5\") == \"1 3 46 36\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2 3 4 5\") == \"1 3 5 7 9\"\nassert solution(\"1 0\\n2\\n3\") == \"3\"\n\"\"\""
    },
    {
        "number": 1191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n4 5 9 7\\n1 2 11 33\") == \"1 3 46 36\"\nassert solution(\"1 0\\n2\\n3\") == \"3\"\nassert solution(\"1 0\\n1\\n3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n4 5 9 7\\n1 2 11 33') == '1 3 46 36'\nassert solution('5 1\\n1 2 3 4 5\\n1 2 3 4 5') == '1 3 5 7 9'\nassert solution('1 0\\n2\\n3') == '3'\n\"\"\"\n"
    },
    {
        "number": 1191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n4 5 9 7\\n1 2 11 33\") == \"1 3 46 36\"\n\"\"\""
    },
    {
        "number": 1191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 11 33\\n\") == \"1 3 46 36\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n\") == \"1 3 5 7 9\"\n"
    },
    {
        "number": 1191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 11 33\\n1 2 3 4 5\") == \"1 3 46 36\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2 3 4 5\") == \"1 3 5 7 9\"\nassert solution(\"1 0\\n2\\n3\") == \"3\"\n"
    },
    {
        "number": 1191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n4 5 9 7\\n1 2 11 33\") == '1 3 46 36'\nassert solution(\"1 0\\n2\\n3\") == '3'\n\"\"\"\n"
    },
    {
        "number": 1191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n4 5 9 7\\n1 2 11 33\") == \"1 3 46 36\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2 3 4 5\") == \"1 3 5 7 9\"\nassert solution(\"1 0\\n2\") == \"3\"\n\"\"\""
    },
    {
        "number": 1191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n4 5 9 7\\n1 2 11 33\") == \"1 3 46 36\"\n\"\"\""
    },
    {
        "number": 1192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n1 2 3\") == '0.833333333333333'\nassert solution(\"3 4\\n1 3 2\") == '1.458333333333334'\nassert solution(\"5 10\\n1 2 3 4 5\") == '2.82842712474619'\n\nprint(\"Successfully tested!\")\n\"\"\"\n\nimport random\nimport math"
    },
    {
        "number": 1192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3 2\") == \"0.833333333333333\""
    },
    {
        "number": 1192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n1 2 3') == '0.833333333333333'\nassert solution('3 4\\n1 3 2') == '1.458333333333334'\n\"\"\""
    },
    {
        "number": 1192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3\\n') == '0.833333333333333'\nassert solution('1 3 2\\n') == '1.458333333333334'\n\"\"\"\n\n\n\"\"\"\n0.833333333333333\n1.458333333333334\n\"\"\"\n\nimport random\n"
    },
    {
        "number": 1192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n1 2 3\") == \"0.833333333333333\"\nassert solution(\"3 4\\n1 3 2\") == \"1.458333333333334\"\n\"\"\"\n\nimport random\n\nn, k = map(int, input().split())\np = list(map(int, input().split()))"
    },
    {
        "number": 1192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 3 2\") == \"0.833333333333333\"\nassert solution(\"3 4\\n1 3 2\") == \"1.458333333333334\"\n\n\n-----Explanation-----\n\nWhen the interval (1, 2) is randomly chosen, the permutation will not be changed. When the interval (3, 4) is chosen, we have one inversion, which is (2, 1). The permutation (2, 1, 3) is a rotation of the initial permutation (1, 2, 3).\n'''\n\n\n\nfrom fractions import Fraction as f\nimport numpy as np"
    },
    {
        "number": 1192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n\") == \"0.833333333333333\"\nassert solution(\"1 2 3\\n1 3 2\\n\") == \"1.458333333333334\"\nassert solution(\"1 2 3\\n1 3 2\\n3 2 1\\n\") == \"3.0\"\nassert solution(\"1 2 3\\n1 3 2\\n3 2 1\\n4 5 6\\n7 8 9\\n\") == \"3.5\"\n\"\"\"\n"
    },
    {
        "number": 1192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1 2 3\") == \"0.833333333333333\"\nassert solution(\"3 4\\n1 3 2\") == \"1.458333333333334\"\n\"\"\"\n"
    },
    {
        "number": 1192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n1 2 3\") == \"0.833333333333333\"\nassert solution(\"3 4\\n1 3 2\") == \"1.458333333333334\"\nassert solution(\"3 100\\n1 3 2\") == \"1.3333333333333335\"\nassert solution(\"3 10\\n1 3 2\") == \"1.2\"\n\"\"\"\n\nimport random\nimport math\n"
    },
    {
        "number": 1192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 2 3\") == \"0.833333333333333\"\n\"\"\""
    },
    {
        "number": 1193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n40 20 30\") == \"30\"\nassert solution(\"6 4\\n100 20 40 20 50 50\") == \"40\"\n\"\"\""
    },
    {
        "number": 1193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4\\n100 20 40 20 50 50\") == 40\n\"\"\""
    },
    {
        "number": 1193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n40 20 30\") == \"30\"\n"
    },
    {
        "number": 1193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n100 20 40 20 50 50') == '40'\n\"\"\""
    },
    {
        "number": 1193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n40 20 30\") == \"30\"\nassert solution(\"6 4\\n100 20 40 20 50 50\") == \"40\"\n"
    },
    {
        "number": 1193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\") == \"30\"\nassert solution(\"10 2\") == \"10\"\nassert solution(\"100 20 40 20 50 50\") == \"40\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n100 20 40 20 50 50') == '100'"
    },
    {
        "number": 1193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n100 20 40 20 50 50\") == \"30\"\nassert solution(\"6 4\\n100 20 40 20 50 50\") == \"40\"\n\n\"\"\""
    },
    {
        "number": 1193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n40 20 30\") == \"30\"\n"
    },
    {
        "number": 1193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n40 20 30') == 30\n\"\"\"\n"
    },
    {
        "number": 1194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n0 1\\n0 1') == '0 1'\nassert solution('3\\n1 2 0\\n2 1 0') == '1 0 2'\nassert solution('2\\n0 1\\n1 0') == '1 0'\nassert solution('3\\n1 2 0\\n2 1 0') == '1 0 2'\nassert solution('3\\n1 2 0\\n2 1 0') == '1 0 2'\n\n'''\n\n\n\n\n\n\n\n'''\n"
    },
    {
        "number": 1194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n0 1\\n0 1') == '1 0'\nassert solution('3\\n1 2 0\\n2 1 0') == '1 0 2'\n"
    },
    {
        "number": 1194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 1\\n0 1\") == \"0 1\"\n\nassert solution(\"2\\n0 1\\n1 0\") == \"1 0\"\n\nassert solution(\"3\\n1 2 0\\n2 1 0\") == \"1 0 2\"\n\n\"\"\""
    },
    {
        "number": 1194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n0 1') == '0 1'\nassert solution('3\\n1 2 0') == '1 0 2'\nassert solution('3\\n2 1 0') == '1 0 2'\n\"\"\"\n\nn = int(input())\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\n\ndiff = tuple(set(p).difference(set(q)))\n\nprint(' '.join(str(x) for x in diff))\n"
    },
    {
        "number": 1194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 1\\n0 1\") == \"0 1\"\n\nassert solution(\"2\\n0 1\\n1 0\") == \"1 0\"\n\nassert solution(\"3\\n1 2 0\\n2 1 0\") == \"1 0 2\"\n"
    },
    {
        "number": 1194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n0 1\") == '0 1'\nassert solution(\"3\\n1 2 0\") == '1 0 2'\nassert solution(\"2\\n0 1\") == '0 1'\nassert solution(\"2\\n1 0\") == '1 0'\n\nassert solution(\"3\\n1 2 0\") == '1 0 2'\n"
    },
    {
        "number": 1194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 2 3\\n1 2 3 0\") == \"0 1 2 3\"\nassert solution(\"4\\n0 1 2 3\\n2 3 0 1\") == \"1 0 2 3\"\nassert solution(\"4\\n0 1 2 3\\n1 0 3 2\") == \"1 0 2 3\"\nassert solution(\"3\\n0 1 2\\n0 2 1\") == \"1 0 2\"\nassert solution(\"4\\n0 1 2 3\\n1 0 3 2\") == \"1 0 2 3\"\n\n\"\"\"\n"
    },
    {
        "number": 1194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n0 1\\n0 1') == '1 0'\nassert solution('3\\n1 2 0\\n2 1 0') == '1 0 2'\nassert solution('2\\n0 1\\n1 0') == '1 0'\nassert solution('2\\n0 1\\n1 0\\n1 2') == '0 1'\nassert solution('1\\n0') == '0'\n"
    },
    {
        "number": 1194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0 1\\n0 1') == '1 0'\nassert solution('2\\n0 1\\n1 0') == '1 0'\nassert solution('3\\n1 2 0\\n2 1 0') == '1 0 2'"
    },
    {
        "number": 1194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1, '0 1') == '0 1'\nassert solution(2, '0 1') == '0 1'\nassert solution(3, '1 2 0') == '1 0 2'\nassert solution(2, '0 1') == '1 0'\nassert solution(3, '1 2 0') == '2 1 0'\n\n\"\"\""
    },
    {
        "number": 1195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"5\n    1 2 3 4 5\n    \"\"\"\n) == \"4\"\nprint(\"Example 1 is valid\")\n\nassert solution(\n    \"\"\"6\n    1 2 3 4 5 6\n    \"\"\"\n) == \"6\"\nprint(\"Example 1 is valid\")\n\nassert solution(\n    \"\"\"8\n    1 2 3 4 5 6 7 8\n    \"\"\"\n) == \"8\"\nprint(\"Example 1 is valid\")\n\n\nassert solution(\n    \"\"\"4\n    1 2 3 4\n    \"\"\"\n) == \"4\"\nprint(\"Example 1 is valid\")\n\n\nassert solution(\n    \"\"\"6\n    1 2 3 4 5 6\n    \"\"\"\n) == \"6\"\nprint(\"Example 1 is valid\")\n"
    },
    {
        "number": 1195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5') == '4'\n\"\"\"\n"
    },
    {
        "number": 1195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin=\"5\\n1 2 3 4 5\") == \"4\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 4 5') == '4'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nres = a[0]\n\nfor i in range(1, n):\n    res += a[i]\n\nprint(res)\n"
    },
    {
        "number": 1195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 3 2\") == \"2\"\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 1195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 4 5') == '4', solution('5\\n1 2 3 4 5')\n"
    },
    {
        "number": 1195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '4', solution('5\\n1 2 3 4 5')\nassert solution('5\\n5 6 8 10 12') == '3', solution('5\\n5 6 8 10 12')\n\nfrom typing import List\nfrom random import randint\n"
    },
    {
        "number": 1195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '5\\n1 2 3 4 5') == '4'\nassert solution(\n    '5\\n1 2 3 4') == '1'\n"
    },
    {
        "number": 1195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 3 4 5\") == \"4\"\nassert solution(\"4 5 5 5\") == \"4\"\nassert solution(\"3 3 3\") == \"0\"\nassert solution(\"2 1 1\") == \"1\"\nassert solution(\"5 5 5 5\") == \"0\"\n"
    },
    {
        "number": 1196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3-a 2-b 4-c 3-a 2-c\"\n\"2-a 2-b 1-c\") == 1\n\nassert solution(\n\"3-a 6-b 7-a 4-c 8-e 2-a\"\n\"3-a\") == 6\n\nassert solution(\n\"1-h 1-e 1-l 1-l 1-o\"\n\"1-w 1-o 1-r 1-l 1-d\") == 0\n\nprint(solution(\nstdin))\n\n'''\n"
    },
    {
        "number": 1196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2-a 2-b 1-c\") == '1'\nassert solution(\"3-a 6-b 7-a 4-c 8-e 2-a\") == '6'\nassert solution(\"1-h 1-e 1-l 1-l 1-o\") == '0'\nassert solution(\"1-w 1-o 1-r 1-l 1-d\") == '0'"
    },
    {
        "number": 1196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n3-a 2-b 4-c 3-a 2-c\\n2-a 2-b 1-c\") == '1'\nassert solution(\"6 1\\n3-a 6-b 7-a 4-c 8-e 2-a\\n3-a\") == '6'\nassert solution(\"5 5\\n1-h 1-e 1-l 1-l 1-o\\n1-w 1-o 1-r 1-l 1-d\") == '0'\n\n\"\"\"\nfrom sys import stdin\n\nclass Solution:\n    def __init__(self, input_string: str, search_string: str):\n        self.input_string = input_string\n        self.search_string = search_string\n    \n    def find_substring(self) -> int:\n        i = 0\n        while i < len(self.input_string) - len(self.search_string) + 1:\n            if self.input_string[i:i+len(self.search_string)] == self.search_string:\n                return i\n            i += 1\n        return 0"
    },
    {
        "number": 1196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n3-a 2-b 4-c 3-a 2-c') == '1'\nassert solution('6 1\\n3-a 6-b 7-a 4-c 8-e 2-a') == '6'\nassert solution('5 5\\n1-h 1-e 1-l 1-l 1-o\\n1-w 1-o 1-r 1-l 1-d') == '0'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 1196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4-a 2-b 1-c\") == \"1\"\nassert solution(\"4-a 2-c 3-a 2-c\") == \"2\"\n"
    },
    {
        "number": 1196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3-a 2-b 4-c 3-a 2-c') == 1\nassert solution('2-a 2-b 1-c') == 6\nassert solution('1-h 1-e 1-l 1-l 1-o') == 0\nassert solution('1-w 1-o 1-r 1-l 1-d') == 0\nassert solution('5 5') == 0\n"
    },
    {
        "number": 1196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3-a 2-b 4-c 3-a 2-c\") == '1'\nassert solution(\"2-a 2-b 1-c\") == '0'\nassert solution(\"1-h 1-e 1-l 1-l 1-o\") == '0'\nassert solution(\"1-w 1-o 1-r 1-l 1-d\") == '0'\n"
    },
    {
        "number": 1196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n3-a 2-b 4-c 3-a 2-c\") == '1'\nassert solution(\"6 1\\n3-a 6-b 7-a 4-c 8-e 2-a\") == '6'\n"
    },
    {
        "number": 1196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3-a 2-b 4-c 3-a 2-c\") == 1\nassert solution(\"2-a 2-b 1-c\") == 6\nassert solution(\"1-h 1-e 1-l 1-l 1-o\") == 0\nassert solution(\"5 5\") == 0\nassert solution(\"1-w 1-o 1-r 1-l 1-d\") == 0\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 1196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n3-a 2-b 4-c 3-a 2-c\\n2-a 2-b 1-c') == '1'\n\"\"\"\n\nimport itertools\nfrom math import ceil\n"
    },
    {
        "number": 1197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"?01??\") == \"4\"\nassert solution(\"?1??2\") == \"0\"\nassert solution(\"1??2\") == \"2\"\nassert solution(\"12??\") == \"0\"\nassert solution(\"??12\") == \"0\"\n"
    },
    {
        "number": 1197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"*01???\") == 4\nassert solution(\"?*01?\") == 2\nassert solution(\"?010??\") == 0\n\"\"\"\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def __init__(self):\n        self.cache = {}\n\n    def calc_bombs(self, field):\n        bombs = defaultdict(int)\n        for row in range(len(field)):\n            for col in range(len(field[row])):\n                if field[row][col] == '*':\n                    bombs[(row, col)] = 1\n\n        return bombs\n\n    def find_squares(self, bombs, x, y):\n        if bombs[(x, y)] > 0:\n            return bombs[(x, y)]\n\n        squares = 0\n        for row in range(x - 1, x + 2):\n            for col in range(y - 1, y + 2):\n                if (row, col) in bombs:\n                    squares += bombs[(row, col)]\n\n        return squares\n\n    def find_empty(self, field):\n        empty = []\n        for row in range(len(field)):\n            for col in range(len(field[row])):\n                if field[row][col] == '?':\n                    empty.append((row, col))\n\n        return empty\n\n    def count_ways(self, field, bombs):\n        squares = []\n        empty = self.find_empty(field)\n        for (x, y) in empty:\n            squares.append((x, y, self.find_squares(bombs, x, y)))\n\n        return squares\n\n    def solve_0(self, field):\n        bombs = self.calc_bombs(field)\n        squares = self.count_ways(field, bombs)\n        return squares\n\n    def solve_1(self, field):\n        bombs = self.calc_bombs(field)\n        squares = self.count_ways(field, bombs)\n        bombs = self.calc_bombs(field)\n        ways = 1\n        for x, y, n in squares:\n            ways *= (n + 1)\n        return ways % 1000000007\n\n    def solve(self, stdin: str) -> str:\n        \"\"\"\n        Brute force\n        \"\"\"\n        if stdin in self.cache:\n            return self.cache[stdin]\n\n        bombs = self.calc_bombs(stdin)\n        n = len(stdin)\n        n_ways = 1\n        squares = self.count_ways(stdin, bombs)\n        for x, y, n in squares:\n            n_ways *= (n + 1)\n        self.cache[stdin] = n_ways % 1000000007\n        return n_ways\n"
    },
    {
        "number": 1197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"?01???\") == 4\nassert solution(\"??*2*??\") == 0\nassert solution(\"**12\") == 0\nassert solution(\"1\") == 0\n\"\"\"\n\nfrom collections import deque\n\nfrom utils import read_input\n"
    },
    {
        "number": 1197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?1?1??1\") == 4\n\"\"\""
    },
    {
        "number": 1197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"?01???\") == 4\nassert solution(\"?*\") == 2\nassert solution(\"*\") == 0\nassert solution(\"1\") == 0\nassert solution(\"**12\") == 0\n"
    },
    {
        "number": 1197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1*\") == \"0\"\nassert solution(\"?0\") == \"1\"\nassert solution(\"12*\") == \"0\"\nassert solution(\"?0\") == \"1\"\n\"\"\"\n\nimport collections\nimport string\n"
    },
    {
        "number": 1197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"??1*\") == 1\nassert solution(\"***1*\") == 2\nassert solution(\"1*0*0\") == 2\nassert solution(\"?010\") == 3\nassert solution(\"??0\") == 2\n"
    },
    {
        "number": 1197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"?01???\") == \"4\"\nassert solution
    },
    {
        "number": 1197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0111\") == 6\n\"\"\"\n"
    },
    {
        "number": 1197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1*2***\") == \"0\"\nassert solution(\"*?1***\") == \"0\"\nassert solution(\"*?1**\") == \"1\"\nassert solution(\"***??*\") == \"0\"\nassert solution(\"**??*\") == \"2\"\n"
    },
    {
        "number": 1198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n1 2 3\") == 6\nassert solution(\"12 10\\n1 1 10 10 10 10 10 10 9 10 10 10\") == 92\nassert solution(\"7 2\\n2 3 6 4 5 7 1\") == 17\nassert solution(\"8 4\\n1 3 4 5 5 3 4 1\") == 23\nassert solution(\"5 4\\n1 2 3 4 5\") == 11\n"
    },
    {
        "number": 1198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"7\"\n\nassert solution(\"4 6\") == \"15\"\n\nassert solution(\"5 5\") == \"14\"\n\nassert solution(\"7 3\") == \"14\"\n\nassert solution(\"8 4\") == \"23\""
    },
    {
        "number": 1198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\n1 2 3\\n') == 6\n\nassert solution('12 10\\n1 1 10 10 10 10 10 10 9 10 10 10\\n') == 92\n\nassert solution('7 2\\n2 3 6 4 5 7 1\\n') == 17\n\nassert solution('8 4\\n1 3 4 5 5 3 4 1\\n') == 23"
    },
    {
        "number": 1198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n1 2 3\\n') == 6\nassert solution('12 10\\n1 1 10 10 10 10 10 10 9 10 10 10\\n') == 92\nassert solution('7 2\\n2 3 6 4 5 7 1\\n') == 17\nassert solution('8 4\\n1 3 4 5 5 3 4 1\\n') == 23\n"
    },
    {
        "number": 1198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n1 2 3\") == \"6\\n\"\nassert solution(\"12 10\\n1 1 10 10 10 10 10 10 9 10 10 10\") == \"92\\n\"\nassert solution(\"7 2\\n2 3 6 4 5 7 1\") == \"17\\n\"\nassert solution(\"8 4\\n1 3 4 5 5 3 4 1\") == \"23\\n\"\nprint('Passed')\n\"\"\"\n\nn, c = input().split()\nn, c = int(n), int(c)\na = list(map(int, input().split()))\n\nb = []\n\nfor i in range(0, len(a)):\n    a[i] += len(b)\n    b.append(a[i])\n    \n    if len(b) >= c:\n        del b[0]\n\nprint(sum(b))"
    },
    {
        "number": 1198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\n1 2 3\\n') == 6\n\nassert solution('12 10\\n1 1 10 10 10 10 10 10 9 10 10 10\\n') == 92\n\nassert solution('7 2\\n2 3 6 4 5 7 1\\n') == 17\n\nassert solution('8 4\\n1 3 4 5 5 3 4 1\\n') == 23\n"
    },
    {
        "number": 1198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n2 3 6 4 5 7 1\") == \"17\"\nassert solution(\"12 10\\n1 1 10 10 10 10 10 10 9 10 10 10\") == \"92\"\nassert solution(\"8 4\\n1 3 4 5 5 3 4 1\") == \"23\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str([3, 1, 6, 5, 2])) == 14\nassert solution(str([12, 1, 10, 10, 10, 10, 10, 9, 10, 10, 10])) == 92\nassert solution(str([1, 1, 10, 10, 10, 10, 10, 9, 10, 10, 10])) == 17\nassert solution(str([2, 3, 6, 4, 5, 7, 1])) == 23\n"
    },
    {
        "number": 1198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n1 2 3\") == 6\nassert solution(\"12 10\\n1 1 10 10 10 10 10 10 9 10 10 10\") == 92\nassert solution(\"7 2\\n2 3 6 4 5 7 1\") == 17\nassert solution(\"8 4\\n1 3 4 5 5 3 4 1\") == 23\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('1 2 3 4 5') == '11'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99') == '291'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199') == '1363'\n\nstdin = \"\"\"\n2 5\n1 2 3\n\n\"\"\"\n"
    },
    {
        "number": 1199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 1 1\\n\") == \"2 1\"\nassert solution(\"6 3\\n1 3 2 2 1 1\\n\") == \"6\"\nassert solution(\"6 3\\n1 3 2 2 1 1\\n\") == \"6\"\n"
    },
    {
        "number": 1199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1 1\") == \"2 1\"\nassert solution(\"6 3 1 3 2 1\") == \"6\"\nassert solution(\"6 3 1 3 2 1\") == \"6\"\n\n\"\"\"\nfrom collections import Counter\nfrom typing import List, Tuple"
    },
    {
        "number": 1199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 1 1\\n\") == \"2 1\"\n\"\"\"\n\nn, m = map(int, input().split())\nchildren = list(map(int, input().split()))\n\ncolor = []\nfor i in range(m):\n    color.extend([i + 1] * children.count(i + 1))\n\nchildren = [i for i in range(n) if children[i] == max(children)]\ncolor = [i for i in range(m) if color.count(i + 1) == len(children)]\n\nchildren = list(map(str, children))\ncolor = list(map(str, color))\n\nprint(len(children))\nprint(\" \".join(children))\nprint(\" \".join(color))"
    },
    {
        "number": 1199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 1\") == \"2 1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 1\") == \"2 1\\n1 2\\n1 1\\n2 1\"\n"
    },
    {
        "number": 1199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 1\") == \"2 1\"\nassert solution(\"1 2 1 1\") == \"1 2\"\nassert solution(\"2 2\") == \"2 2\"\nassert solution(\"4 2 1 2 1\") == \"2 1\"\nassert solution(\"4 1 1 2 1\") == \"1 2\"\n"
    },
    {
        "number": 1199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\\n1 3 2 2 1 1\") == \"6\"\nassert solution(\"4 2\\n1 2 1 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2 1 1\\n') == '2 1\\n1 2\\n1 1\\n2 1\\n1 1'\n"
    },
    {
        "number": 1199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1 1\") == \"2 1\"\nassert solution(\"6 3 1 1 2 1 2\") == \"6 3\"\n"
    },
    {
        "number": 1199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\\n1 3 2 2 1 1\\n\") == \"6\\n2 1\\n1 2\\n2 1\\n1 3\\n1 2\\n3 1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 1200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-5 10 5\") == \"1\"\nassert solution(\"6\\n100 200 400 300 600 500\") == \"0\"\nassert solution(\"4\\n10 9 0 -1\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 1200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-5 10 5\\n\") == '1'\nassert solution(\"6\\n100 200 400 300 600 500\\n\") == '0'\nassert solution(\"4\\n10 9 0 -1\\n\") == '8'\n\n\"\"\"\n"
    },
    {
        "number": 1200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10 4 8\") == '1'\nassert solution(\"6 10 4 8 -1\") == '0'\nassert solution(\"4 10 4 8\") == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-5 10 5\") == '1'\nassert solution(\"6\\n100 200 400 300 600 500\") == '0'\nassert solution(\"4\\n10 9 0 -1\") == '8'\n\"\"\"\n"
    },
    {
        "number": 1200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n10 9 0 -1') == '8'\nassert solution('6\\n100 200 400 300 600 500') == '0'\nassert solution('3\\n-5 10 5') == '1'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 1200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-5 10 5\\n\") == \"1\"\nassert solution(\"6\\n100 200 400 300 600 500\\n\") == \"0\"\nassert solution(\"4\\n10 9 0 -1\\n\") == \"8\"\n\"\"\"\n\nn = int(input())\npoints = list(map(int, input().split()))\n\npoints_set = set(points)\n\ndiff = 10 ** 9 + 1\nfor point in points_set:\n    diff = min(diff, abs(points[0] - point))\n\nprint(diff)\n"
    },
    {
        "number": 1200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 10 5') == '1'\nassert solution('100 200 400 300 600 500') == '0'\nassert solution('10 9 0 -1') == '8'"
    },
    {
        "number": 1200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n-5 10 5\") == \"1\"\nassert solution(\"6\\n100 200 400 300 600 500\") == \"0\"\nassert solution(\"4\\n10 9 0 -1\") == \"8\"\n"
    },
    {
        "number": 1200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n-5 10 5\\n') == '1'\nassert solution('6\\n100 200 400 300 600 500\\n') == '0'\nassert solution('4\\n10 9 0 -1\\n') == '8'\n"
    },
    {
        "number": 1200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-5 10 5\") == \"1\"\nassert solution(\"6\\n100 200 400 300 600 500\") == \"0\"\nassert solution(\"4\\n10 9 0 -1\") == \"8\"\n"
    },
    {
        "number": 1201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7 4\\n2 6 5\\n3 7 6\") == \"11\\n2\\n2 3\"\nassert solution(\"2 5 6 1\\n3 3 5\") == \"1\\n1\\n1\"\n"
    },
    {
        "number": 1201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7 4\") == \"11\"\nassert solution(\"2 6 5\") == \"1\"\nassert solution(\"3 7 6\") == \"1\"\n"
    },
    {
        "number": 1201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7 4\") == \"11\"\nassert solution(\"2 6 5\") == \"1\"\nassert solution(\"3 7 6\") == \"1\"\n"
    },
    {
        "number": 1201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7 4\\n2 6 5\\n3 7 6\") == \"11\\n2\\n2 3\"\nassert solution(\"5 6 1\\n3 3 5\\n\") == \"1\\n1\\n1\"\nassert solution(\"5 6 1\\n3 3 5\\n\") == \"1\\n1\\n1\"\n"
    },
    {
        "number": 1201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 7 4\\n2 6 5\\n3 7 6') == '11\\n2\\n2 3'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 1201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 7 4\\n2 6 5\\n3 7 6') == '11\\n2\\n2 3'\nassert solution('2\\n5 6 1\\n3 3 5') == '1\\n1\\n1'\nassert solution('3 7 4\\n2 6 5\\n3 7 6') == '11\\n2\\n2 3'\n\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 1201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 7 4\\n2 6 5\\n3 7 6') == '11\\n2\\n2 3'\n\"\"\""
    },
    {
        "number": 1201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7 4\\n2 6 5\\n3 7 6') == '11\\n2\\n2 3'\n"
    },
    {
        "number": 1201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7 4\\n2 6 5\\n3 7 6\") == \"11\\n2\\n2 3\"\n"
    },
    {
        "number": 1201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7 4\") == \"11\"\nassert solution(\"2 6 5\") == \"1\"\n"
    },
    {
        "number": 1202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9840 9920\\n9860 9980\\n9930 10020\\n10040 10090\") == \"1100110011\"\n"
    },
    {
        "number": 1202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n9840 9920\\n9860 9980\\n9930 10020\\n10040 10090\\n\") == \"11001100110011010\"\nassert solution(\"4\\n9900 9850\\n9940 9930\\n10000 10020\\n10060 10110\\n\") == \"11001100110011010\"\n"
    },
    {
        "number": 1202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n9840 9920\\n9860 9980\\n9930 10020\\n10040 10090') == '11001100110011010'\n\"\"\""
    },
    {
        "number": 1202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('9840 9920') == '1110'\nassert solution('9900 9850') == '1100'\nassert solution('9940 9930') == '1100'\nassert solution('10000 10020') == '1100'\n"
    },
    {
        "number": 1202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n9840 9920\\n9860 9980\\n9930 10020\\n10040 10090\") == \"11001100\"\n"
    },
    {
        "number": 1202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n9840 9920\\n9860 9980\\n9930 10020\\n10040 10090') == '1100'\nassert solution('4\\n9900 9850\\n9940 9930\\n10000 10020\\n10060 10110') == '1100'"
    },
    {
        "number": 1202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == '1110'\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n\n@dataclass(frozen=True)\nclass Semifinal:\n    \"\"\"A data class for a semifinal in a tournament.\n    \n    Attributes:\n        n (int): The number of participants in the semifinal.\n        time (List[int]): The times for each participant.\n    \"\"\"\n    n: int\n    time: List[int]\n"
    },
    {
        "number": 1202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"4\\n9840 9920\\n9860 9980\\n9930 10020\\n10040 10090\"\n) == \"1100\\n1100\"\nassert solution(\n\"4\\n9900 9850\\n9940 9930\\n10000 10020\\n10060 10110\"\n) == \"1100\\n1100\"\n"
    },
    {
        "number": 1202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9840 9920\\n9860 9980\\n9930 10020\\n10040 10090\") == \"11001100\"\nassert solution(\"9900 9850\\n9940 9930\\n10000 10020\\n10060 10110\") == \"11001100\"\nassert solution(\"9900 9850\\n9940 9930\\n10000 10020\\n10060 10110\") == \"11001100\"\n"
    },
    {
        "number": 1202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n9840 9920\\n9860 9980\\n9930 10020\\n10040 10090\") == \"1100\"\nassert solution(\"4\\n9900 9850\\n9940 9930\\n10000 10020\\n10060 10110\") == \"1100\"\n\n\n-----Test_cases-----\n\nInput:\n4\n9840 9920\n9860 9980\n9930 10020\n10040 10090\n\nOutput:\n1110\n1100\n\nInput:\n4\n9900 9850\n9940 9930\n10000 10020\n10060 10110\n\nOutput:\n1100\n1100"
    },
    {
        "number": 1203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1.5\"\nassert solution(\"3 5\") == \"2.6666666666667\"\n"
    },
    {
        "number": 1203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1.5\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 1203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n') == '1.5'\nassert solution('3 5\\n') == '2.6666666666667'\n"
    },
    {
        "number": 1203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"1.5\"\n\nassert solution(\"3 5\") == \"2.6666666666667\"\n\"\"\"\n"
    },
    {
        "number": 1203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 3''') == '1.5'\nassert solution('''0 2''') == '0.4'\n'''"
    },
    {
        "number": 1203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1.5\"\nassert solution(\"3 5\") == \"2.6666666666667\""
    },
    {
        "number": 1203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n') == '1.5000000000000'\nassert solution('3 5\\n') == '2.6666666666667'\nassert solution('8 9\\n') == '1.1111111111111'\nassert solution('7 5\\n') == '1.7'\nassert solution('8 3\\n') == '1.5'\n\"\"\"\nimport sys\nfrom typing import Iterable, List\n"
    },
    {
        "number": 1203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n') == '1.5'\nassert solution('3 5\\n') == '2.6666666666667'\n\"\"\""
    },
    {
        "number": 1203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"1.5\"\nassert solution(\"3 5\") == \"2.6666666666667\"\n\"\"\""
    },
    {
        "number": 1203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 2''') == 1.5\n\n'''\n1 2\n\n1.5000000000000\n'''\nassert solution('''3 5''') == 2.6666666666667\n\n'''\n3 5\n\n2.6666666666667\n'''\n\n'''\n1 4\n1.4999999999999\n\n2.0\n'''\nassert solution('''1 4''') == 1.4999999999999\n\n'''\n1 4\n0.75\n\n0.75\n'''\nassert solution('''1 4\n''') == 0.75\n\n'''\n6 5\n6.500000000000\n\n6.500000000000\n'''\nassert solution('''6 5\n''') == 6.500000000000\n\n'''\n5 5\n5.0\n\n5.0\n'''\n"
    },
    {
        "number": 1204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n3 2\\n1 1\\n2 2') == '12'\n\"\"\"\n"
    },
    {
        "number": 1204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 1\\n1 4\\n2 2\\n\") == \"3\"\nassert solution(\"2 1\\n3 2\\n4 0\\n\") == \"-1\"\nassert solution(\"5 2\\n2 10\\n2 10\\n1 1\\n3 1\\n3 1\\n\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 1204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 1\\n1 4\\n2 2') == '3\\n'\nassert solution('5 2\\n2 10\\n2 10\\n1 1\\n3 1\\n3 1') == '12\\n'\n"
    },
    {
        "number": 1204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n2 1\\n1 1\\n3 1\\n3 1') == '12'\n"
    },
    {
        "number": 1204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"3 2\"\n) == \"3\"\n\nassert solution(\n\"5 2\"\n) == \"12\"\n\nassert solution(\n\"2 1\"\n) == \"-1\"\n\nassert solution(\n\"3 2\"\n) == \"3\"\n\n\n-----Explanation-----\n\nIn the first test case, Manao can rank in the top 2 in 3 units of effort, the first fighter against whom he defeats will have 1 point, and the second will have 1 point. The following case also provides the same answer, because the winners are the same in both cases.\n\nIn the second test case, Manao can win against all the contestants in one go (1 unit of effort) and rank better than the first and second contestant (3 units of effort). The third and fourth contestants will have 1 point.\n\nIn the third test case, Manao cannot win against any of the opponents.\n\"\"\"\n"
    },
    {
        "number": 1204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"2 1\") == \"-1\"\nassert solution(\"5 2\") == \"12\"\nassert solution(\"7 2\") == \"14\"\nassert solution(\"3 1\") == \"3\"\n\n\"\"\"\nimport math\nfrom collections import Counter\n"
    },
    {
        "number": 1204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n2 10\\n2 10\\n1 1\\n3 1\\n3 1\") == \"12\"\nassert solution(\"5 2\\n2 10\\n2 10\\n1 1\\n3 1\") == \"12\"\n\"\"\"\n\n\nclass CodeforcesTask12BSolution:\n    def __init__(self):\n        self.result = ''\n        self.n_k = []\n\n    def read_input(self):\n        self.n_k = [int(x) for x in input().split(\" \")]\n\n    def process_task(self):\n        p_total, e_total = 0, 0\n        for n in range(self.n_k[0]):\n            p, e = [int(x) for x in input().split(\" \")]\n            p_total += p\n            e_total += e\n        if p_total <= self.n_k[1]:\n            self.result = str(e_total)\n        else:\n            self.result = \"-1\"\n\n    def get_result(self):\n        return self.result\n"
    },
    {
        "number": 1204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n2 10\\n2 10\\n1 1\\n3 1\\n3 1\") == \"12\"\nassert solution(\"2 1\\n3 2\\n4 0\") == -1\nassert solution(\"2 2\\n1 1\\n2 0\") == 1\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 1204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 1\\n1 4\\n2 2\") == 3\nassert solution(\"5 2\\n2 10\\n2 10\\n1 1\\n3 1\\n3 1\") == 12\nassert solution(\"5 2\\n2 10\\n2 10\\n1 1\\n3 1\\n3 1\") == 12\n\"\"\"\n"
    },
    {
        "number": 1204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 1\\n1 4\\n2 2\") == \"3\"\nassert solution(\"5 2\\n2 10\\n2 10\\n1 1\\n3 1\\n3 1\") == \"12\"\nassert solution(\"5 1\\n2 10\\n2 10\\n1 1\\n3 1\\n3 1\") == \"-\""
    },
    {
        "number": 1205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1\\n2 2\\n1 2\\n3 3\\n4 4\") == \"3\"\nassert solution(\"5\\n1 1\\n1 1\\n2 2\\n1 2\\n3 3\\n4 4\") == \"3\"\nassert solution(\"5\\n1 1\\n1 1\\n2 2\\n1 2\\n3 3\\n4 4\") == \"2\"\nassert solution(\"5\\n1 1\\n1 1\\n2 2\\n3 3\\n4 4\") == \"2\"\nassert solution(\"5\\n1 1\\n1 1\\n2 2\\n3 3\\n4 4\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 1205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n2 1\\n3 3\") == 3\nassert solution(\"2\\n4 3\\n1 2\") == -1\n"
    },
    {
        "number": 1205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n2 1\\n3 3\") == '3'\nassert solution(\"2\\n4 3\\n1 2\") == '-1'\n\n\"\"\"\n\n\nfrom math import sqrt"
    },
    {
        "number": 1205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 3\\n1 2\\n2 1\\n3 3\") == 3\nassert solution(\"2\\n4 3\\n1 2\") == -1\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 1205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n2 1\\n3 3') == 3\nassert solution('2\\n4 3\\n1 2') == -1\n"
    },
    {
        "number": 1205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n2 1\\n3 3\") == '3'\n\nassert solution(\"2\\n4 3\\n1 2\") == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 1205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == str\n"
    },
    {
        "number": 1205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n2 1\\n3 3\") == 3\nassert solution(\"2\\n4 3\\n1 2\") == -1\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str([\n    [1, 2],\n    [2, 1],\n    [3, 3]\n])) == '3'\n\nassert solution(str([\n    [4, 3],\n    [1, 2]\n])) == '-1'\n"
    },
    {
        "number": 1205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n2 1\\n3 3\") == \"3\"\nassert solution(\"2\\n4 3\\n1 2\") == \"-1\"\n\"\"\""
    },
    {
        "number": 1206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7\\n8 10\\n5 5') == '5.75'\n\"\"\"\n\n\"\"\"\nYou are given a number x.\n\nConsider the string formed by concatenating the integers 1, 2,..., x, in ascending order, and then reversing the resulting string. For example, if x = 3, the string formed is \"123\".\n\nCompute the number of zeros that appear in the resulting string.\n\nInput\nThe first line of the input contains a single integer t (1 \u2264 t \u2264 50) \u2014 the number of test cases.\n\nThe only line of each test case contains a single integer x (1 \u2264 x \u2264 106).\n\nOutput\nFor each test case, print the number of zeros that appear in the string formed by the concatenation of the integers 1, 2,..., x, in ascending order, and then reversing the resulting string.\n\nExample\ninputCopy\n2\n3\n5\noutputCopy\n1\n0\n\ninputCopy\n1\n3\noutputCopy\n0\n\"\"\""
    },
    {
        "number": 1206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('7') == '7'\nassert solution('2 2') == '1'\nassert solution('7 9') == '9'\n"
    },
    {
        "number": 1206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 5\\n3 4\\n1 6\") == \"3.5\"\n\"\"\""
    },
    {
        "number": 1206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == \"5.75\"\n"
    },
    {
        "number": 1206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 5\\n3 4\\n1 6\\n\") == \"3.5\"\nassert solution(\"3\\n4 7\\n8 10\\n5 5\\n\") == \"5.75\"\n\"\"\"\n\n\nfrom math import log, exp\n"
    },
    {
        "number": 1206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n4 7\\n8 10\\n5 5') == '5.75'\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 1206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 5\\n3 4\\n1 6\") == \"3.5\"\n\"\"\"\n\nimport sys\nimport random\n"
    },
    {
        "number": 1206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 5\\n3 4\\n1 6') == '3.5'\n\"\"\""
    },
    {
        "number": 1206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 5\\n3 4\\n1 6\") == \"3.5\"\n\"\"\"\n\nimport numpy as np\n\nn = int(input())\nv = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    v.append([l, r])\n\nans = 0\nfor l, r in v:\n    p = np.random.randint(l, r + 1)\n    ans += p\n\nprint(ans/n)"
    },
    {
        "number": 1206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 5\\n3 4\\n1 6\\n\") == \"3.5\"\n\"\"\"\n\nimport sys\n\nfrom collections import Counter"
    },
    {
        "number": 1207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n2 1\\n1 3\\n2 3\\n4 2\\n4 3\") == '4'\nassert solution(\"3 2\\n1 2\\n3 2\") == '-1'\n"
    },
    {
        "number": 1207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3 2\\n1 2\\n3 2\") == \"-1\"\n"
    },
    {
        "number": 1207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n2 1\\n1 3\\n2 3\\n4 2\\n4 3') == '4'\nassert solution('3 2\\n1 2\\n3 2') == '-1'\n\"\"\"\n\nimport sys\n\nn, m = [int(x) for x in sys.stdin.readline().rstrip().split()]\n\nfor _ in range(m):\n    a, b = [int(x) for x in sys.stdin.readline().rstrip().split()]\n    if a > b:\n        a, b = b, a\n    print(a)\n"
    },
    {
        "number": 1207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n2 1\\n1 3\\n2 3\\n4 2\\n4 3\") == \"4\"\nassert solution(\"3 2\\n1 2\\n3 2\") == \"-1\"\n"
    },
    {
        "number": 1207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n2 1\\n1 3\\n2 3\\n4 2\\n4 3\\n') == '4'\n\nassert solution('3 2\\n1 2\\n3 2\\n') == '-1'\n"
    },
    {
        "number": 1207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n2 1\\n1 3\\n2 3\\n4 2\\n4 3\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 1207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4 5\n2 1\n1 3\n2 3\n4 2\n4 3\"\"\") == \"4\"\n\nassert solution(\"\"\"3 2\n1 2\n3 2\n\"\"\") == \"-1\"\n\"\"\""
    },
    {
        "number": 1207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n4 2\\n1 3\\n3 2\\n4 3\") == '4'\n"
    },
    {
        "number": 1207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n2 1\\n1 3\\n2 3\\n4 2\\n4 3\") == \"4\"\nassert solution(\"3 2\\n1 2\\n3 2\") == \"-1\"\n"
    },
    {
        "number": 1207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n2 1\\n1 3\\n2 3\\n4 2\\n4 3\") == \"4\"\n\"\"\"\n\nfrom functools import cmp_to_key\n\nimport sys\n\na, b = [int(x) for x in sys.stdin.readline().strip().split()]\n\nT = [sys.stdin.readline().strip().split() for _ in range(a)]\n\nG = [[int(x) for x in t] for t in T]\n\nG.sort(key=cmp_to_key(lambda x, y: x[1] - y[1]))\n\nG2 = [G[i] for i in range(b)]\nG2.sort(key=cmp_to_key(lambda x, y: x[0] - y[0]))\n\nprint(b - G2.index(G[b - 1]))\n"
    },
    {
        "number": 1208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n+ 12001\\n- 12001\\n- 1\\n- 1200\\n+ 1\\n+ 7\\n') == '3'\n"
    },
    {
        "number": 1208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n+ 12001\\n- 12001\\n- 1\\n- 1200\\n+ 1\\n+ 7\") == \"3\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n+ 12001\n- 12001\n- 1\n- 1200\n+ 1\n+ 7\n''') == '3'\n"
    },
    {
        "number": 1208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n+ 1\n- 1\n\"\"\") == \"1\"\n\"\"\""
    },
    {
        "number": 1208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n+ 12001\\n- 12001\\n- 1\\n- 1200\\n+ 1\\n+ 7\") == 3\n"
    },
    {
        "number": 1208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n6\n+ 12001\n- 12001\n- 1\n- 1200\n+ 1\n+ 7\n\"\"\") == 3\n"
    },
    {
        "number": 1208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n"
    },
    {
        "number": 1208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n+ 12001\\n- 12001\\n- 1\\n- 1200\\n+ 1\\n+ 7\") == \"3\"\n\nprint(solution(\"2\\n- 1\\n- 2\"))\n"
    },
    {
        "number": 1208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+ 12001\\n- 12001\\n- 1\\n- 1200\\n+ 1\\n+ 7\") == 3\nassert solution(\"+ 1\\n- 1\\n- 2\") == 2\n\"\"\"\n\nimport itertools\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.previous = None\n        self.next = None\n\n    def __str__(self):\n        return self.data\n\nclass LinkedList:\n    def __init__(self, data):\n        self.head = Node(data)\n        self.tail = self.head\n\n    def add(self, data):\n        node = Node(data)\n        self.tail.next = node\n        node.previous = self.tail\n        self.tail = node\n\n    def delete(self, data):\n        for node in self.iterate():\n            if node.data == data:\n                node.previous.next = node.next\n                node.next.previous = node.previous\n                return\n\n    def iterate(self):\n        current = self.head\n        while current is not None:\n            yield current\n            current = current.next\n\n    def __str__(self):\n        ret = []\n        current = self.head\n        while current is not None:\n            ret.append(current.data)\n            current = current.next\n        return str(ret)"
    },
    {
        "number": 1208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12001\\n- 12001\\n- 1\\n- 1200\\n+ 1\\n+ 7\\n') == '3'\n\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 1209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4.58413\\n1.22491\\n-2.10517\\n-3.70387\") == \"4\\n2\\n-2\\n-4\"\n"
    },
    {
        "number": 1209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4.58413\\n1.22491\\n-2.10517\\n-3.70387\") == \"4\\n2\\n-2\\n-4\"\nassert solution(\"5\\n-6.32509\\n3.30066\\n-0.93878\\n2.00000\\n1.96321\") == \"-6\\n3\\n-1\\n2\\n2\"\n\n\n\n-----"
    },
    {
        "number": 1209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4.58413\\n1.22491\\n-2.10517\\n-3.70387\") == \"4\\n2\\n-2\\n-4\"\nassert solution(\"5.46421\\n1.22311\\n-2.10606\\n-3.70336\") == \"5\\n2\\n-1\\n2\""
    },
    {
        "number": 1209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\n\n-----Solution-----\n\n\n\"\"\""
    },
    {
        "number": 1209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4.58413\\n1.22491\\n-2.10517\\n-3.70387\") == \"4\\n2\\n-2\\n-4\"\n\n\"\"\"\n"
    },
    {
        "number": 1209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4.58413\\n1.22491\\n-2.10517\\n-3.70387\") == \"4\\n2\\n-2\\n-4\"\n\nassert solution(\"5.0\\n2.0\\n1.0\\n0.0\\n0.0\") == \"5\\n1\\n1\\n1\\n0\"\n\nassert solution(\"-6.32509\\n3.30066\\n-0.93878\\n2.00000\\n1.96321\") == \"-6\\n3\\n-1\\n2\\n2\"\n"
    },
    {
        "number": 1209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4.58413\\n1.22491\\n-2.10517\\n-3.70387') == '4\\n2\\n-2\\n-4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4.58413\\n1.22491\\n-2.10517\\n-3.70387\") == \"4\\n2\\n-2\\n-4\"\nassert solution(\"-6.32509\\n3.30066\\n-0.93878\\n2.00000\\n1.96321\") == \"-6\\n3\\n-1\\n2\\n2\"\n\n\n-----Notes-----\n\nFor each example, print the values of $b_i$ on a new line.\nThe input strings contain at most 10**5 digits after the decimal point.\n\"\"\"\n\nn = int(input())\nlst = [float(x) for x in input().split()]\n\nfor num in lst:\n    if (int(num)) == (num):\n        print(int(num))\n    elif num < 0:\n        print(int(num)+1)\n    else:\n        print(int(num)-1)\n"
    },
    {
        "number": 1209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('4.1') == ''\nassert solution('4.1\\n2') == ''\n"
    },
    {
        "number": 1209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n4.58413\n1.22491\n-2.10517\n-3.70387''') == '4\\n2\\n-2\\n-4'\n\nassert solution('''5\n-6.32509\n3.30066\n-0.93878\n2.00000\n1.96321''') == '-6\\n3\\n-1\\n2\\n2'\n\n\n-----Test Input-----\n\n4\n4.58413\n1.22491\n-2.10517\n-3.70387\n\n5\n-6.32509\n3.30066\n-0.93878\n2.00000\n1.96321\n\n-----Test Output-----\n\n4\n2\n-2\n-4\n\n-6\n3\n-1\n2\n2\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 1210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\n1 4\\n2 3\\n11 14\\n') == '0.0'\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 1210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n1 2\n420 421\n420420 420421\n''') == '4500.0'\nassert solution('''\n3 5\n1 4\n2 3\n11 14\n''') == '0.0'\nassert solution('''\n3 5\n1 4\n2 3\n11 14\n''') == '0.0'\nassert solution('''\n3 5\n1 4\n2 3\n11 14\n''') == '0.0'\nassert solution('''\n3 5\n1 4\n2 3\n11 14\n''') == '0.0'\n"
    },
    {
        "number": 1210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"4500.0\"\n\n\"\"\"\n\nimport unittest\nfrom math import floor\n"
    },
    {
        "number": 1210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2\\n420 421\\n420420 420421\") == '4500.0'\n"
    },
    {
        "number": 1210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2\\n420 421\\n420420 420421\") == '4500.0'\nassert solution(\"3 5\\n1 4\\n2 3\\n11 14\\n\") == '0.0'\n\n\n-----\nIt is a popular question on leetcode, especially for those who are already familiar with the problem.\nHere I would like to highlight that there are many ways to solve this.\nThere are three common ways to solve this problem.\n\n1. Iteration.\n2. Recursion.\n3. Using Dynamic Programming.\n4. Using Memoization.\n\nIn this article, I will implement the first solution, which is Iteration.\n\nThe first solution is to iterate the array and calculate each element with its left and right neighbor. Then sum them up, and divide them by the total number of elements.\n\nclass Solution:\n    def solve(self, n, m):\n        if n == 1:\n            return 1000\n        if n == 2:\n            return 2000\n        count = 0\n        for i in range(1, n):\n            count += self.is_prime(i, n) * self.is_prime(i+1, n)\n        return count\n    \n    def is_prime(self, a, n):\n        for i in range(2, int(a ** 0.5)+1):\n            if a % i == 0:\n                return 0\n        return 1\n        \nassert solution(\"3 2\\n1 2\\n420 421\\n420420 420421\") == '4500.0'\nassert solution(\"3 5\\n1 4\\n2 3\\n11 14\\n\") == '0.0'\n\n\n-----\nUsing the property of Prime numbers, we can use the same method to solve this problem.\n\nThe second solution is to implement Iteration.\n\nclass Solution:\n    def solve(self, n, m):\n        if n == 1:\n            return 1000\n        if n == 2:\n            return 2000\n        count = 0\n        for i in range(1, n):\n            count += self.is_prime(i, n) * self.is_prime(i+1, n)\n        return count\n    \n    def is_prime(self, a, n):\n        if a == 1:\n            return False\n        for i in range(2, int(a ** 0.5)+1):\n            if a % i == 0:\n                return 0\n        return 1\n        \nassert solution(\"3 2\\n1 2\\n420 421\\n420420 420421\") == '4500.0'\n"
    },
    {
        "number": 1210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 4\\n2 3\\n11 14\\n\") == '4500.0'\n\n\"\"\"\n"
    },
    {
        "number": 1210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2\\n420 421\\n420420 420421\") == 4500\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 1210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n420 421\") == \"4500.0\"\n\n\"\"\"\n"
    },
    {
        "number": 1210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n420 421\\n420420 420421\") == \"4500\"\nassert solution(\"3 5\\n1 4\\n2 3\\n11 14\\n\") == \"0\"\n\"\"\"\nimport math"
    },
    {
        "number": 1210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2\\n420 421\\n420420 420421') == '4500.0'\n\"\"\"\nfrom collections import defaultdict\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List\n\n\nclass Solution:\n    # https://leetcode.com/problems/expectation-of-a-good-theorem/discuss/519427/Python3-Good-Explanation-with-Math-Formulas\n    def poor_solution(self, num_sharks: int, p: int) -> float:\n        \"\"\"\n        Expectation = Sum of probabilities * (Average of possible outcomes)\n        \"\"\"\n        if num_sharks == 1:\n            return 1000 * p\n        elif num_sharks == 2:\n            return 2000 * p\n        elif num_sharks == 3:\n            return 4000 * p\n        else:\n            return 0\n\n    # https://leetcode.com/problems/expectation-of-a-good-theorem/discuss/519425/Python-Easy-to-understand-solution-with-explanations\n    def good_solution(self, num_sharks: int, p: int) -> float:\n        \"\"\"\n        Expectation = Sum of probabilities * (Average of possible outcomes)\n        \"\"\"\n        if num_sharks == 1:\n            return 1000 * p\n        elif num_sharks == 2:\n            return 2000 * p\n        elif num_sharks == 3:\n            return 4000 * p\n        else:\n            return 0\n\n    # https://leetcode.com/problems/expectation-of-a-good-theorem/discuss/519418/JavaScript-Simple-Math\n    def better_solution(self, num_sharks: int, p: int) -> float:\n        return (\n                (num_sharks - 1) * (num_sharks - 2) // 2\n                * p * 1000\n                + (num_sharks - 2) * 1000\n                + (num_sharks - 1) * p * 1000\n                + p * 2000\n        )\n\n    def expected_dollars_received_by_sharks(self, num_sharks: int, p: int) -> float:\n        if num_sharks == 1:\n            return 1000 * p\n        elif num_sharks == 2:\n            return 2000 * p\n        elif num_sharks == 3:\n            return 4000 * p\n        else:\n            return 0\n\n    # https://leetcode.com/problems/expectation-of-a-good-theorem/discuss/519428/Java-Python-Solution\n    def self_made_solution(self, num_sharks: int, p: int) -> float:\n        if num_sharks == 1:\n            return 1000 * p\n        elif num_sharks == 2:\n            return 2000 * p\n        elif num_sharks == 3:\n            return 4000 * p\n        else:\n            return 0\n\n    def expected_dollars_received_by_sharks_2(self, num_sharks: int, p: int) -> float:\n        return sum(\n            p * (l // p + 1) for l in range(1, num_sharks + 1)\n        )\n\n    # https://leetcode.com/problems/expectation-of-a-good-theorem/discuss/519427/Python3-Good-Explanation-with-Math-Formulas\n    def expected_dollars_received_by_sharks_3(self, num_sharks: int, p: int) -> float:\n        if num_sharks == 1:\n            return 1000 * p\n        elif num_sharks == 2:\n            return 2000 * p\n        elif num_sharks == 3:\n            return 4000 * p\n        else:\n            return 0\n\n    def expected_dollars_received_by_sharks_4(self, num_sharks: int, p: int) -> float:\n        \"\"\"\n        Expectation = Sum of probabilities * (Average of possible outcomes)\n        \"\"\"\n        if num_sharks == 1:\n            return 1000 * p\n        elif num_sharks == 2:\n            return 2000 * p\n        elif num_sharks == 3:\n            return 4000 * p\n        else:\n            return 0\n\n    # https://leetcode.com/problems/expectation-of-a-good-theorem/discuss/519424/Python-Solution-with-Simplification\n    def expected_dollars_received_by_sharks_5(self, num_sharks: int, p: int) -> float:\n        if num_sharks == 1:\n            return 1000 * p\n        elif num_sharks == 2:\n            return 2000 * p\n        elif num_sharks == 3:\n            return 4000 * p\n        else:\n            return 0\n\n    "
    },
    {
        "number": 1211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == '2 4'\n\"\"\""
    },
    {
        "number": 1211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('19 3\\n5 4 10') == '2 4'\n\"\"\""
    },
    {
        "number": 1211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n4 5 6 10') == '4 1','solution test 1 failed'\nassert solution('4 5\\n4 5 6 10\\n3 5 7') == '1 1','solution test 2 failed'\n\nprint('All tests passed.')"
    },
    {
        "number": 1211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 3\\n1 2 3 5\\n\") == \"3 5\"\nassert solution(\"12 3\\n1 3\\n\") == \"1 5\"\nassert solution(\"12 3\\n1 3\\n1 2 3 5\\n\") == \"3 5\"\nassert solution(\"12 3\\n1 3\\n1 2 3 5\\n1 1 1\") == \"1 5\"\n\"\"\"\n\nfrom collections import defaultdict\n\nN, K = [int(i) for i in input().split()]\ncapacity = [int(i) for i in input().split()]\n\ncounter = defaultdict(int)\n\nfor c in capacity:\n    counter[c] += 1\n\nfor k in range(1, K + 1):\n    counter[k] += counter[k - 1]\n\nprint(counter[K] - counter[K - 1])\n"
    },
    {
        "number": 1211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"1 1\\n2 2\\n3 3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''19 3\n5 4 10''') == '2 4'\nassert solution('''28 3\n5 6 30''') == '1 5'\n\"\"\"\n\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\n\ncnt = 0\nfor i in lst:\n    cnt += i // K\n\nprint(cnt, K)\n"
    },
    {
        "number": 1211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"19 3\\n5 4 10\") == \"2 4\"\nassert solution(\"28 3\\n5 6 30\") == \"1 5\"\n"
    },
    {
        "number": 1211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"1 2\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 1211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(input()))\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 1211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"19 3\\n5 4 10\") == \"2 4\"\n\n\"\"\"\n\nimport sys\n\nN, K = [int(x) for x in sys.stdin.readline().split()]\nboxes = [int(x) for x in sys.stdin.readline().split()]\n\nm = -1\nfor i in range(len(boxes)):\n    if sum(boxes[i:]) >= N:\n        m = i\n        break"
    },
    {
        "number": 1212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n1 2 6 1 1 7 1\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 1212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\n\"\"\"\n--- Day 4: Repose Record ---\nYou've sneaked into another supply closet - this time, it's across from the prototype suit manufacturing lab. The Elves seem to have made a mistake putting the suit in the prototype suit box - someone has already removed the key! You need to sneak in and get the suit key, but the box is locked. The only key you have is a special lock picking set.\n\nThe lock picking set is a large two-dimensional set of keys: each key has a (x, y) coordinate associated with it, and each key has three other keys associated with it - a top key, a left key, and a bottom key. For any key, the three keys that are associated with it are the ones that are immediately above, to the left, and below the key in the set.\n\nYou currently know that the top key is located at coordinate (0, 0), and so you start on the left key, which is at coordinate (-1, 0). To pick the key, you must move clockwise around the key, picking the key whose associated coordinate is the smallest. (By \"clockwise\", we mean that if you were to draw the keys as circles on a plane, your first move would be to move from the positive x-axis to the y-axis.)\n\nFor example, suppose you have the following set of keys:\n\nKey 0: (0, 0)\nKey 1: (0, 1)\nKey 2: (1, 2)\nKey 3: (2, 1)\nKey 4: (3, 3)\nKey 5: (3, 2)\nKey 6: (2, 0)\nKey 7: (1, -1)\nKey 8: (-1, 0)\nKey 9: (0, -1)\nThe full key set then is {key 0, key 1, key 2, key 3, key 4, key 5, key 6, key 7, key 8, key 9}\n\nInitially, the first key in your set is at coordinates (0, 0), and the key to pick is at (2, 1).\n\nYou decide to pick key 9, and are then asked to move to the key that is immediately below key 9 (6, 1). After moving clockwise around key 9, you would move to key 7, because the key that is immediately below key 7 is at coordinates (1, 3).\n\nThen, you move clockwise around key 7 in the same manner, ending up with key 0. After picking key 0, you then return to the starting position, picking key 9 again.\n\nIn this example, after the first move, your hand would have picked key 2, and then again picked key 9 - so in total you've picked key 3. A higher level way of thinking about this is that, clockwise around key 0, the keys picked are key 0, 1, 6, and 7 - in that order. After the first move, your hand \"moved\" from key 0 to key 1. The next time you move around the start key, your hand moves from key 1 to key 2, then to key 6, then to key 7, then back to key 1 (and then via key 6 to key 2, etc).\n\nIn this example, the first key picked, 2, is at coordinates (-2, 0). Starting with the key immediately below this, the key picked in the next move is key 7, and then key 2, and so on, ending with key 9, which is also at (0, 0).\n\nGiven the number of keys in your set, what is the lowest-valued key that can be obtained by starting at the key with coordinates (0, 0) and moving clockwise?\n\n--- Part Two ---\nAs you're about to start working on a new keyboard, you notice that you misread one small note attached to the keyboard. The note is attached to the key you are currently on, and says to move to the key to the right, then move down, then to the key beneath that, and to the right, and so on, until you reach a key of the lowest possible value.\n\nThe smallest value is 0.\n\nFor example, suppose you have the following set of keys:\n\nKey 0: 0\nKey 1: 1\nKey 2: 2\nKey 3: 3\nKey 4: 4\nKey 5: 5\nKey 6: 6\nKey 7: 7\nKey 8: 8\nKey 9: 9\n10: 10\n11: 11\n12: 12\n13: 13\n14: 14\n15: 15\nThe full key set then is {key 0, key 1, key 2,..., key 15}.\n\nYour hand starts at key 0. To move to the next key, you start at the key to the right of the current key, move down, and then to the key below that, and so on, until you go past key 15. You conclude your jigsaw puzzle by going to key 15.\n\nIn this example, to get from key 0 to key 15, you would need to go past key 2, move down, and then past key 4.\n\nHere is a larger example which only considers the next key along; that is, you cannot \"go back\" to a previous key:\n\nKey 1: 1\nKey 2: 2\nKey 3: 3\nKey 4: 4\nKey 5: 5\nKey 6: 6\nKey 7: 7\nKey 8: 8\nKey 9: 9\nKey 10: 10\nKey 11: 11\nKey 12: 12\nKey 13: 13\nKey 14: 14\nKey 15: 15\n16: 16\n17: 17\n18: 18\n19: 19\n20: 20\n21: 21\n22: 22\n23: 23\n24: 24\n25: 25\n26: 26\n27: 27\n28: 28\n29: 29\n30: 30\n31: 31\n32: 32\n33: 33\n34: 34\n35: 35\n36: 36\n37: 37\n38: 38\n39: 39\n40: 40\n41: 41\n42: 42\n43: 43\n44: 44\n45: 45\n46: 46\n47: 47\n48: 48\n49: 49\n50: 50\n51: 51\n52: 52\n53: 53\n54: 54\n55: 55\n56: 56\n57: 57\n58: 58\n59: 59\n60: 60\n61: 61\n62: 62\n63: 63\n64: 64\n65: 65\n66: 66\n67: 67\n68: 68\n69: 69\n70: 70\n71: 71\n72: 72\n73: 73\n74: 74\n75: 75\n76: 76\n77: 77\n78: 78\n79: 79\n80: 80\n81: 81\n82: 82\n83: 83\n84: 84\n85: 85\n86: 86\n87: 87\n88: 88\n89: 89\n90: 90\n91: 91\n92: 92\n93: 93\n94: 94\n95: 95\n96: 96\n97: 97\n98: 98\n99: 99\n100: 100\n101: 101\n102: 102\n103: 103\n104: 104\n105: 105\n106: 106\n107: 107\n"
    },
    {
        "number": 1212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3 4\") == \"3\"\nassert solution(\"4 3\\n1 2 3 4\") == \"3\"\nassert solution(\"4 3\\n1 2 3 4\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 1212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n1 2 6 1 1 7 1\") == \"3\"\nassert solution(\"7 4\\n1 2 6 1 1 7 1\") == \"3\"\nassert solution(\"8 5\\n1 2 3 4 5 6 7 8\") == \"0\"\nassert solution(\"10 10\\n10 10 10 10 10 10 10 10 10 10 10\") == \"0\"\n\"\"\"\n\n\nfrom __future__ import annotations\nimport heapq\n"
    },
    {
        "number": 1212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n1 2 6 1 1 7 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n1 2 6 1 1 7 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 1212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3\\n1 2 6 1 1 7 1') == '3'\nassert solution('7 3\\n1 2 6 1 1 7 1') == '3'\nassert solution('7 3\\n1 2 6 1 1 7 1') == '3'\nassert solution('7 3\\n1 2 6 1 1 7 1') == '3'\nassert solution('7 3\\n1 2 6 1 1 7 1') == '3'\n"
    },
    {
        "number": 1212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3\\n1 2 6 1 1 7 1') == '3'\nassert solution('7 3\\n1 2 6 1 1 7 1') == '3'\nassert solution('7 3\\n1 2 6 1 1 7 1') == '3'\nassert solution('7 3\\n1 2 6 1 1 7 1') == '3'\nassert solution('7 3\\n1 2 6 1 1 7 1') == '3'\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n7 1\n1 2 6 1 1 7 1\n2\n\n-----\n7 1\n1 2 6 1 1 7 1\n2\n\n6 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n-----\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 1\n1 2 6 1 1 7 1\n2\n\n6 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 1\n1 2 6 1 1 7 1\n2\n\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 1\n1 2 6 1 1 7 1\n2\n\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 1\n1 2 6 1 1 7 1\n2\n\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 1\n1 2 6 1 1 7 1\n2\n\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 1\n1 2 6 1 1 7 1\n2\n\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 1\n1 2 6 1 1 7 1\n2\n\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 1\n1 2 6 1 1 7 1\n2\n\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 1\n1 2 6 1 1 7 1\n2\n\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----\n7 1\n1 2 6 1 1 7 1\n2\n\n6 3\n1 1 1 1 1 1\n4 4 4 4 4 4\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n-----\n7 3\n1 2 6 1 1 7 1\n3 4 5\n\n5 3\n1 2 3 4 5\n3 4 5\n\n-----"
    },
    {
        "number": 1212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n1 2 6 1 1 7 1\") == \"3\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 1212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n1 2 6 1 1 7 1') == '3'\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\nans = []\nmin_sum = 0\nfor i in range(len(arr) - k + 1):\n    min_sum = sum(arr[i:i + k])\n    ans.append(i + k - 1)\n    if min_sum < min_sum:\n        ans = [i]\n\nfor i in ans:\n    print(i, end=' ')\n"
    },
    {
        "number": 1213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"R1\") == \"PRINT R\\nLEFT\"\nassert solution(\"R1\\nR1\\nR1\\nR1\") == \"PRINT R\\nPRINT R\\nPRINT R\\nPRINT R\\nLEFT\"\n"
    },
    {
        "number": 1213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\nR1') == 'PRINT 1\\nLEFT\\nPRINT R'\nassert solution('2 1\\nR1') == 'PRINT R\\nRIGHT\\nPRINT 1'\nassert solution('6 4\\nGO?GO!') == 'RIGHT\\nRIGHT\\nPRINT!\\nLEFT\\nPRINT O\\nLEFT\\nPRINT G'\n\n\n\"\"\""
    },
    {
        "number": 1213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\nR1\") == \"PRINT 1\\nLEFT\\nPRINT R\"\n\nassert solution(\"2 1\\nR1\") == \"PRINT R\\nRIGHT\"\nassert solution(\"6 4\\nGO?GO!\") == \"RIGHT\\nRIGHT\\nPRINT!\\nLEFT\\nPRINT O\\nLEFT\\nPRINT G\"\n\n\"\"\""
    },
    {
        "number": 1213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\nR1') == 'PRINT 1\\nLEFT\\nPRINT R\\n'\n\"\"\"\n"
    },
    {
        "number": 1213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\nR1') == 'PRINT 1\\nLEFT\\nPRINT R'\nassert solution('2 1\\nR1') == 'PRINT R\\nRIGHT\\nPRINT 1'\nassert solution('6 4\\nGO?GO!') == 'RIGHT\\nRIGHT\\nPRINT!\\nLEFT\\nPRINT O\\nLEFT\\nPRINT G'\nassert solution('8 4\\n???!!!') == 'LEFT\\nLEFT\\nLEFT\\nLEFT\\nPRINT O\\nRIGHT\\nLEFT\\nLEFT\\nPRINT?\\nLEFT\\nRIGHT\\nLEFT\\nRIGHT\\nPRINT A\\nRIGHT\\nRIGHT\\nRIGHT\\nRIGHT\\nPRINT N'\n\n\"\"\"\n"
    },
    {
        "number": 1213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\nR1\") == \"PRINT 1\\nLEFT\\nPRINT R\"\n\"\"\""
    },
    {
        "number": 1213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"R1\") == \"PRINT R\"\nassert solution(\"R2\") == \"LEFT\"\n\"\"\"\n"
    },
    {
        "number": 1213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\nR1\") == \"PRINT R\\nRIGHT\"\nassert solution(\"6 4\\nGO?GO!\") == \"RIGHT\\nRIGHT\\nPRINT!\\nLEFT\\nPRINT O\\nLEFT\\nPRINT G\"\n"
    },
    {
        "number": 1213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\nR1\") == \"PRINT 1\\nLEFT\\nPRINT R\"\nassert solution(\"6 4\\nGO?GO!\") == \"RIGHT\\nRIGHT\\nPRINT!\\nLEFT\\nPRINT O\\nLEFT\\nPRINT G\""
    },
    {
        "number": 1213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"R1\") == \"LEFT\\nPRINT R\"\nassert solution(\"GO?GO!\") == \"RIGHT\\nRIGHT\\nPRINT!\"\nassert solution(\"R1\") == \"LEFT\\nPRINT R\"\nassert solution(\"R1\") == \"LEFT\\nPRINT R\"\n\"\"\""
    },
    {
        "number": 1214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5 11 44\") == \"Yes\\n4 5 16 11 64 44\"\nassert solution(\"2\\n9900\") == \"Yes\\n100 9900\"\nassert solution(\"6\\n314 1592 6535\") == \"No\"\n\n\n\"\"\"\n"
    },
    {
        "number": 1214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 11 44\") == 'Yes'\nassert solution(\"9900\") == 'Yes'\nassert solution(\"314 1592 6535\") == 'No'\n"
    },
    {
        "number": 1214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'No'\nassert solution('2 1 1') == 'No'\nassert solution('4 1 1') == 'No'\nassert solution('4 1 2') == 'Yes'\nassert solution('5 1 2') == 'Yes'\n"
    },
    {
        "number": 1214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 11 44\") == \"Yes\"\nassert solution(\"9900\") == \"Yes\"\nassert solution(\"314 1592 6535\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 1214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 16 11 64 44\") == \"Yes\"\nassert solution(\"9900\") == \"Yes\"\nassert solution(\"314 1592 6535\") == \"No\"\n\n\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 1214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576') == 'Yes'\nassert solution('6 5 11 44') == 'Yes'\nassert solution('9900') == 'Yes'\nassert solution('314 1592 6535') == 'No'\nassert solution('16 16 16 16 16 16') == 'No'"
    },
    {
        "number": 1214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n5 11 44\") == \"Yes\\n4 5 16 11 64 44\"\nassert solution(\"2\\n9900\") == \"Yes\\n100 9900\"\nassert solution(\"6\\n314 1592 6535\") == \"No\"\n\n\n\n-----Test_1-----\nsolution('3\\n3 4 9') == 'No'\n\n-----Test_2-----\nsolution('3\\n2 4 6') == 'No'\n\n-----Test_3-----\nsolution('6\\n5 11 44') == 'Yes\\n4 5 16 11 64 44'\n"
    },
    {
        "number": 1214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data_01) == \"No\"\nassert solution(test_data_02) == \"No\"\nassert solution(test_data_03) == \"No\"\nassert solution(test_data_04) == \"Yes\"\nassert solution(test_data_05) == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 1214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5 11 44\") == \"Yes\"\nassert solution(\"2\\n9900\") == \"Yes\"\nassert solution(\"6\\n314 1592 6535\") == \"No\"\n\"\"\"\n\nimport sys\nimport math\n\n\"\"\"\n\u041f\u0440\u0438\u043c\u0435\u0440:\n6\n5 11 44\n\"\"\"\n"
    },
    {
        "number": 1214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n5 11 44') == 'Yes\\n4 5 16 11 64 44'\nassert solution('2\\n9900') == 'Yes\\n100 9900'\nassert solution('6\\n314 1592 6535') == 'No'\n\n\n\"\"\"\n"
    },
    {
        "number": 1215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n1') == '1'\nassert solution('3\\n1') == '2'\nassert solution('4\\n1') == '3'\nassert solution('5\\n1') == '5'\n"
    },
    {
        "number": 1215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 1215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == '4'\nassert solution('1\\n') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 1215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(4) == 4\nassert solution(1) == 0\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '4'\nassert solution('1') == '0'\n"
    },
    {
        "number": 1215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == 4\nassert solution(\"1\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 1215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"4\"\n\"\"\""
    },
    {
        "number": 1215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n') == '4'\nassert solution('1\\n') == '0'\n"
    },
    {
        "number": 1215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == 4\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 1215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '4'\nassert solution('1') == '0'\nassert solution('11') == '0'\nassert solution('12') == '0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 1216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"pobeeeedaaaaa\") == \"pobeda\"\nassert solution(\"iiiimpleeemeentatiioon\") == \"implemeentatioon\"\nassert solution(\"aeiouyaaeeiioouuyy\") == \"aeiouyaeeioouy\"\nassert solution(\"aaaoooiiiuuuyyyeeeggghhh\") == \"aoiuyeggghhh\""
    },
    {
        "number": 1216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == t\nprint(solution(s))\n\ns = stdin.readlines()[0].strip()\nt = stdin.readlines()[1].strip()\nassert solution(s) == t\n\nprint(solution(s))\n\n\n\n\u0414\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e n (0 < n < 100 000). \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u0432\u044b\u0432\u043e\u0434\u044f\u0449\u0443\u044e \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 n \u0447\u0438\u0441\u0435\u043b: \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u044e\u0449\u0435\u0435\u0441\u044f \u043d\u0443\u043b\u0435\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e t (0 < t < 100 000) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043d\u0443\u043b\u0435\u043c. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b t \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043d\u0443\u043b\u0435\u043c. \u041a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 10000.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 t \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043d\u0443\u043b\u0435\u043c \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f. \u041a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043e \u043e\u0434\u043d\u0438\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\n-----Input-----\n\n5\n2\n1\n3\n4\n0\n\n-----Output-----\n\n1 1\n1 4\n1 9\n1 16\n1 25\n\n-----Input-----\n\n5\n2\n1\n3\n4\n0\n\n-----Output-----\n\n1 1\n1 4\n1 9\n1 16\n1 25\n\n-----Input-----\n\n5\n1\n1\n1\n1\n1\n\n-----Output-----\n\n1\n1\n1\n1\n1\n\n-----Input-----\n\n1\n2\n\n-----Output-----\n\n2\n\n-----Input-----\n\n3\n3\n4\n5\n0\n\n-----Output-----\n\n3\n8\n15\n"
    },
    {
        "number": 1216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"13\\npobeeeedaaaaa\\n\") == \"pobeda\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 1216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\", \"pobeeeedaaaaa\") == \"pobeda\"\nassert solution(\"22\", \"iiiimpleeemeentatiioon\") == \"implemeentatioon\"\nassert solution(\"18\", \"aeiouyaaeeiioouuyy\") == \"aeiouyaeeioouy\"\nassert solution(\"24\", \"aaaoooiiiuuuyyyeeeggghhh\") == \"aoiuyeggghhh\"\n\"\"\"\n"
    },
    {
        "number": 1216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\\npobeeeedaaaaa\") == \"pobeda\"\nassert solution(\"22\\niiiimpleeemeentatiioon\") == \"implemeentatioon\"\nassert solution(\"18\\naeiouyaaeeiioouuyy\") == \"aeiouyaeeioouy\"\nassert solution(\"24\\naaaoooiiiuuuyyyeeeggghhh\") == \"aoiuyeggghhh\"\n\nprint(\"Well done!\")\n"
    },
    {
        "number": 1216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"pobeeeedaaaaa\") == \"pobeda\"\nassert solution(\"iiiimpleeemeentatiioon\") == \"implemeentatioon\"\nassert solution(\"aeiouyaaeeiioouuyy\") == \"aeiouyaeeioouy\"\nassert solution(\"aaaoooiiiuuuyyyeeeggghhh\") == \"aoiuyeggghhh\"\n\"\"\""
    },
    {
        "number": 1216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 pobeeeedaaaaa\") == \"pobeda\"\n\"\"\"\n\nn = int(input())\ns = input()\n\nprev = \"\"\nresult = \"\"\nfor l in s:\n    if prev == l:\n        result += l\n        continue\n    if prev == \"e\" and l == \"e\" and s[s.index(l) - 1] == \"e\":\n        continue\n    if prev == \"o\" and l == \"o\" and s[s.index(l) - 1] == \"o\":\n        continue\n    result += l\n    prev = l\n\nprint(result)\n"
    },
    {
        "number": 1216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13\") == \"pobeda\"\nassert solution(\"22\") == \"implemeentatioon\"\nassert solution(\"18\") == \"aeiouyaeeioouy\"\nassert solution(\"24\") == \"aoiuyeggghhh\"\n"
    },
    {
        "number": 1216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"pobeda\"\nassert solution(\"22\") == \"implemeentatioon\"\nassert solution(\"18\") == \"aeiouyaeeioouy\"\nassert solution(\"24\") == \"aoiuyeeggghh\"\n\nprint('Test finished successfully.')\n\n\"\"\""
    },
    {
        "number": 1216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"13\\n\"\n    \"pobeeeedaaaaa\"\n) == \"pobeda\"\nassert solution(\n    \"22\\n\"\n    \"iiiimpleeemeentatiioon\"\n) == \"implemeentatioon\"\nassert solution(\n    \"18\\n\"\n    \"aeiouyaaeeiioouuyy\"\n) == \"aeiouyaeeioouy\"\nassert solution(\n    \"24\\n\"\n    \"aaaoooiiiuuuyyyeeeggghhh\"\n) == \"aoiuyeggghhh\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 1217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n1 3 5 7 9\\n6 4 2 8') == '3 2 1 4'\nassert solution('5 5\\n1 2 1 2 5\\n3 1 4 1 5') == '4 2 4 2 5'\n"
    },
    {
        "number": 1217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n1 3 5 7 9\\n6 4 2 8') == '3 2 1 4'\n\"\"\"\n\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\narr = [0] * m\n\nfor i in range(n):\n    for j in range(m):\n        if a[i] <= b[j]:\n            arr[j] += 1\n\nsys.stdout.write(' '.join(map(str, arr)))\n"
    },
    {
        "number": 1217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n1 3 5 7 9\\n6 4 2 8') == '3 2 1 4'\nprint(solution(stdin))\n"
    },
    {
        "number": 1217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n1 3 5 7 9\\n6 4 2 8') == '3 2 1 4'\nassert solution('5 5\\n1 2 1 2 5\\n3 1 4 1 5') == '4 2 4 2 5'\n\"\"\"\n\n\"\"\"\nInput\n4 3\n1 2 3 4\n5 4 3 2\n\nOutput\n3 2 2 2\n\"\"\"\n\nn, m = map(int, input().split())\narr = list(map(int, input().split()))\nbrr = list(map(int, input().split()))\narr.sort()\nbrr.sort()\n\nprint(\" \".join(map(str, [brr.count(i) for i in range(1, m+1)])))"
    },
    {
        "number": 1217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 2 3\\n5 5\\n1 2 1 2 5\\n3 1 4 1 5') == '2 3\\n1 2 3\\n1 2 2 5\\n2 1 1 5'\nassert solution('5 5\\n1 1 1 1 1\\n1 2 2 2 5\\n2 1 4 1 5\\n3 1 4 1 5') == '3 1 2 4 1 5'\nassert solution('5 5\\n1 1 1 1 1\\n1 2 2 2 5\\n2 1 4 1 5\\n3 1 4 1 5') == '1 1 1 1 1\\n1 2 2 2 5\\n2 1 4 1 5\\n3 1 4 1 5'\n\nprint(\"All cases passed\")\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 1217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 1 2 5\\n3 1 4 1 5\\n\") == \"2 1 1 4\"\n\"\"\""
    },
    {
        "number": 1217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n1 3 5 7 9\\n6 4 2 8\\n') == '3 2 1 4'\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 1217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n1 3 5 7 9\\n6 4 2 8\\n\") == \"3 2 1 4\"\n\"\"\"\n"
    },
    {
        "number": 1217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 3 5 7 9\\n6 4 2 8\\n\") == \"3 2 1 4\"\n\"\"\"\nimport sys\n\nfrom bisect import bisect_left\n"
    },
    {
        "number": 1217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 3 5 7 9\\n6 4 2 8\") == \"3 2 1 4\"\nprint(\"Tests passed\")\n"
    },
    {
        "number": 1218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 1218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '2'\nassert solution('5 5') == '1'\nassert solution('8 4') == '-1'\n"
    },
    {
        "number": 1218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"8 4\") == \"-1\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 1218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 4') == '-1'\n\nassert solution('4 3') == '2'\n"
    },
    {
        "number": 1218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('8 4') == '1'\n"
    },
    {
        "number": 1218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '4'\nassert solution('1 2 3 4') == '5'\n"
    },
    {
        "number": 1218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"8 4\") == \"-1\"\nassert solution(\"8 5\") == \"-1\""
    },
    {
        "number": 1218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '2'\nassert solution('5 5') == '1'\nassert solution('8 4') == '-1'\n"
    },
    {
        "number": 1218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ninputs = sys.stdin.readlines()\n\nn, k = list(map(int, inputs[0].split()))\n\nqueue = deque()\nqueue.append((0, 0))\n\nvisited = set()\nvisited.add((0, 0))\n\nwhile queue:\n    house, pipes = queue.popleft()\n    for splitter in range(pipes, k + 1):\n        if house + splitter * (k - pipes) <= n:\n            if house + splitter * (k - pipes) == n:\n                return str(splitter)\n            if house + splitter * (k - pipes) not in visited:\n                queue.append((house + splitter * (k - pipes), splitter))\n                visited.add((house + splitter * (k - pipes), splitter))\n    for splitter in range(1, pipes + 1):\n        if house + splitter * (pipes - 1) <= n:\n            if house + splitter * (pipes - 1) not in visited:\n                queue.append((house + splitter * (pipes - 1), splitter))\n                visited.add((house + splitter * (pipes - 1), splitter))\nprint(-1)\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 1218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"2\""
    },
    {
        "number": 1219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 -5 9 -2 1') == '15'\nassert solution('5 6 7 8') == '26'\n\"\"\"\n"
    },
    {
        "number": 1219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 -5 9 -2 1') == '15'\nassert solution('5 6 7 8') == '26'\n\"\"\"\n\nn = int(input())\ns = list(map(int, input().split()))\nd = {}\n\nfor i in s:\n    if i not in d:\n        d[i] = 1\n    else:\n        d[i] += 1\n\nd = sorted(d.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 1219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5 -5 9 -2 1\") == \"26\"\n\n\"\"\""
    },
    {
        "number": 1219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5 6 7 8\") == \"26\"\n\n\n\"\"\"\n"
    },
    {
        "number": 1219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 -5 9 -2 1\") == \"15\""
    },
    {
        "number": 1219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 -5 9 -2 1\") == \"15\"\n\"\"\""
    },
    {
        "number": 1219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 -5 9 -2 1\") == \"15\"\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 1219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(st.parse_input()) == st.parse_output(solution(st.parse_input()))\n\"\"\"\n\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\n\narr = list(map(int, input().split()))\n\narr.sort()\n\nprint(sum(arr) * -2)\n"
    },
    {
        "number": 1219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ndp = [0] * (n + 1)\nfor i in range(n):\n    dp[i + 1] = max(dp[i + 1], -(a[i] + a[i + 1]))\n\nprint(dp[-1])\n"
    },
    {
        "number": 1219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6 7 8\") == \"26\"\nassert solution(\"4 -5 9 -2 1\") == \"15\"\n\n\"\"\"\n"
    },
    {
        "number": 1220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('4 4\\n1 2\\n1 3\\n3 4\\n1 4') == '2\\n1 4\\n1 4'\nassert solution('5 5\\n1 2\\n3 4\\n3 2\\n4 2\\n2 5') == '1\\n1 1\\n1 1'\nassert solution('7 7\\n1 2\\n3 4\\n3 2\\n4 5\\n5 6\\n6 7\\n1 7\\n3 5') == '1\\n1 1\\n1 1'\nassert solution('7 7\\n1 2\\n3 4\\n3 2\\n4 5\\n5 6\\n6 7\\n1 7\\n3 5') == '1\\n1 1\\n1 1'\n\n-------------\n\nfrom collections import defaultdict\n\nn, m = map(int, stdin.readline().split())\ngraph = defaultdict(set)\nfor i in range(m):\n    x, y = map(int, stdin.readline().split())\n    graph[x].add(y)\n    graph[y].add(x)\n\nans = set()\nfor i in range(1, n+1):\n    ans.add(i)\n    for j in graph[i]:\n        if j in ans:\n            ans.remove(j)\n\nprint(len(ans))\nprint(' '.join(list(map(str, sorted(ans, key=int)))))\n"
    },
    {
        "number": 1220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n1 2\\n3 4\\n3 2\\n4 2\\n2 5') == '2\\n1 4'\n"
    },
    {
        "number": 1220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n3 4\\n3 2\\n4 2\\n2 5\") == \"2 1 4\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 1220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 5\n1 2\n3 4\n3 2\n4 2\n2 5''') == '2\\n1 4'\nassert solution('''8 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n9 5\n4 3\n6 1\n5 10\n9 8\n7 1\n7 8\n2 7\n10 9\n4 6''') == '1\\n1\\n7\\n8\\n6'\nprint('Success')\n\n-----Challenge-----\n\nUse a minimum number of lines of code.\nIf you don't know how to start solving this challenge, please, review a theory for graph theory.\n\n\n\n---------------------------------------------\n---------------------------------------------"
    },
    {
        "number": 1220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n1 2\\n3 4\\n3 2\\n4 2\\n2 5\") == '2\\n1 4'\n\n\"\"\""
    },
    {
        "number": 1220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 5\\n2 3\\n3 1\\n4 2\\n4 6\\n5 4') == '4 2\\n2 4'\nassert solution('6 3\\n2 3\\n3 4\\n4 5\\n4 6\\n5 4') == '2 5'\nassert solution('6 4\\n2 3\\n3 4\\n4 5\\n4 6\\n5 4') == '1 4'\n\"\"\""
    },
    {
        "number": 1220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n3 4\\n1 3\\n2 3\") == \"3 1\"\n\"\"\""
    },
    {
        "number": 1220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 5\n1 2\n3 4\n3 2\n4 2\n2 5''') == '2\\n1 4\\n'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2\\n3 4\\n3 2\\n4 2\\n2 5\") == \"2\\n1 4\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\ngraph = [[] for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, stdin.readline().split())\n    graph[a - 1].append(b - 1)\n    graph[b - 1].append(a - 1)"
    },
    {
        "number": 1220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 5\n1 2\n3 4\n3 2\n4 2\n2 5''') == '2 1 4'\n\"\"\""
    },
    {
        "number": 1221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n20 18\\n2 14\\n\") == \"252\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 1221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 18 2 14\") == \"252\"\nassert solution(\"5 3 -1 0 1 2 3\") == \"2\"\nassert solution(\"5 3 -1 0 1\") == \"2\"\n"
    },
    {
        "number": 1221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2 2\n20 18\n2 14\n\"\"\") == \"252\"\nassert solution(\"\"\"5 3\n-1 0 1 2 3\n-1 0 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 1221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n20 18\\n2 14') == '252'\nassert solution('5 3\\n-1 0 1 2 3\\n-1 0 1') == '2'\nassert solution('4 4\\n1 1 1 1\\n1 1 1 1') == '4'\nassert solution('5 3\\n-1 0 1 2 3\\n-1 0 1') == '2'\nassert solution('4 4\\n1 1 1 1\\n1 1 1 1') == '4'\n"
    },
    {
        "number": 1221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n20 18\\n2 14\") == \"252\"\nassert solution(\"5 3\\n-1 0 1 2 3\\n-1 0 1\") == \"2\"\n"
    },
    {
        "number": 1221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"2 2\n20 18\n2 14\"\"\"\n) == \"252\"\n\nassert solution(\n\"\"\"5 3\n-1 0 1 2 3\n-1 0 1\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"2 2\n20 18\n2 14\"\"\"\n) == \"252\"\nassert solution(\n\"\"\"3 2\n1 2 3\n1 2\"\"\"\n) == \"6\"\nassert solution(\n\"\"\"1 2\n2 1\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 1221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n2 2\n20 18\n2 14\n\"\"\"\n) == '252'\n\nassert solution(\n\"\"\"\n5 3\n-1 0 1 2 3\n-1 0 1\n\"\"\"\n) == '2'\n"
    },
    {
        "number": 1221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n20 18\\n2 14\") == \"252\"\nassert solution(\"5 3\\n-1 0 1 2 3\\n-1 0 1\") == \"2\"\n\n\"\"\"\n\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\nn, m = map(int, input().split())\n\narr = list(map(int, input().split()))\nbarr = list(map(int, input().split()))\n\na = min(arr)\nb = max(barr)"
    },
    {
        "number": 1221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n20 18\\n2 14\") == \"252\"\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\n\nresult = a[0] * b[0]\nprint(result)\n"
    },
    {
        "number": 1221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n20 18\\n2 14\") == '252'\nassert solution(\"5 3\\n-1 0 1 2 3\\n-1 0 1\") == '2'\n\n\nimport collections"
    },
    {
        "number": 1222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15\") == \"23\"\n"
    },
    {
        "number": 1222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('15') == '23'\n\"\"\""
    },
    {
        "number": 1222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"15\") == \"23\"\n\"\"\""
    },
    {
        "number": 1222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5') == '8'\n\"\"\""
    },
    {
        "number": 1222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15\") == \"23\"\nprint('Hooray!')\n\n-----\n\n3 1 4 2 5\n1 2 3 4 5\n\n1 2 3 4 6\n2 3 4 5 6\n\n4 1 3 2 5\n\n4 1 6 2 5\n\n3 2 4 5 6\n\n3 2 6 4 5\n\n2 3 5 6 4\n\n2 5 6 4 3\n\n1 4 5 6 3\n\n1 5 6 3 4\n\n1 6 3 4 5\n\n1 6 4 5 3\n\n1 6 5 3 4\n\n1 6 3 4 5\n\n1 6 4 5 3\n\n1 6 5 3 4\n\n1 6 3 4 5\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5 3\n\n1 6 3 5 4\n\n1 6 4 5"
    },
    {
        "number": 1222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '2'\nassert solution('3') == '1'\nassert solution('10') == '5'\nassert solution('11') == '7'\n\nassert solution('15') == '23'\n"
    },
    {
        "number": 1222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15\\n\") == \"23\"\n\"\"\"\n\nfrom math import ceil\n\nK = int(stdin.readline())\n\nn = ceil(K * 3.3)\n\nn_lst = [1]\n\nfor i in range(1, n):\n    n_lst.append(i * (i + 1) // 2)\n\nprint(n_lst[K - 1])\n"
    },
    {
        "number": 1222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15') == '23'\nprint(solution('15'))"
    },
    {
        "number": 1222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15\") == \"23\"\n\n\"\"\"\n\n\"\"\"\n    python -m pytest -q test_6.py\n\"\"\"\n"
    },
    {
        "number": 1222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1\\n2\\n3') == '1'\nassert solution('4\\n2\\n3\\n4') == '2'\nassert solution('4\\n3\\n4\\n5') == '3'\nassert solution('4\\n4\\n5\\n6') == '4'\nassert solution('4\\n5\\n6\\n7') == '5'\n"
    },
    {
        "number": 1223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 1') == '5'\n\"\"\""
    },
    {
        "number": 1223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3 1\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"2\"\nassert solution(\"7\\n6 3 1 2 7 4 5 9 8\") == \"22\"\n\"\"\""
    },
    {
        "number": 1223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3 1\") == \"5\"\n\"\"\"\n\nfrom sys import stdin\n\nclass Solution:\n    def solve(self, N, P):\n        #initialize the dictionary to keep the first 2 elements of the array in the same order\n        #self.arr_dict = {i:0 for i in range(1,N+1)}\n        self.arr_dict = {i: i-1 for i in range(1,N+1)}\n        arr = [0 for _ in range(N)]\n        for i in range(N):\n            arr[i] = P[i]\n            self.arr_dict[arr[i]] = i\n        \n        #initialize the dictionary to keep the first 2 elements of the array in the same order\n        #self.arr_dict = {i:0 for i in range(1,N+1)}\n        self.arr_dict = {i: i-1 for i in range(1,N+1)}\n        arr = [0 for _ in range(N)]\n        for i in range(N):\n            arr[i] = P[i]\n            self.arr_dict[arr[i]] = i\n        \n        #print(self.arr_dict)\n        ans = 0\n        for i in range(N):\n            for j in range(i+1,N):\n                ans += arr[i] * arr[j]\n        return ans\n\n    def solve2(self, N, P):\n        self.arr_dict = {i: i-1 for i in range(1,N+1)}\n        arr = [0 for _ in range(N)]\n        for i in range(N):\n            arr[i] = P[i]\n            self.arr_dict[arr[i]] = i\n        \n        ans = 0\n        for i in range(N):\n            for j in range(i+1,N):\n                ans += arr[i] * arr[j]\n        return ans"
    },
    {
        "number": 1223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 3 1') == '5'\n\"\"\"\n\nfrom itertools import islice"
    },
    {
        "number": 1223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 3 1') == '5'\n\"\"\"\n\nN = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in range(N):\n    d[i+1] = a[i]\n\ns = sorted(d.items(), key=lambda x: x[1], reverse=True)\n\nans = 0\nfor i in range(N-1):\n    ans += d[s[i][0]] * d[s[i+1][0]]\nprint(ans)\n"
    },
    {
        "number": 1223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 1') == '5'\n\"\"\"\n"
    },
    {
        "number": 1223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n2 3 1\n''') == '5'\n"
    },
    {
        "number": 1223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3 1\") == \"5\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\nb = []\n\nfor i in range(N - 1):\n    if a[i] > a[i + 1]:\n        b.append(a[i])\n\nprint(sum(b))\n"
    },
    {
        "number": 1223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3 1\") == \"5\"\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 1224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(123) == \"3 1\"\nassert solution(546) == \"5 5\"\nassert solution(7) == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 1224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"106\") == \"4 2\"\n\"\"\"\n\nimport sys\n\nn = sys.stdin.readline().strip()\n\nn = int(n)\n\nres = -1\n\nfor a in range(n):\n    for b in range(n):\n        if a ** 3 + b ** 5 == n:\n            res = str(a) + \" \" + str(b)\n            break\n    else:\n        continue\n    break\n\nprint(res)\n"
    },
    {
        "number": 1224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"106\") == \"4 2\"\nassert solution(\"1029\") == \"3 4\"\n\n\"\"\""
    },
    {
        "number": 1224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"106\") == '4 2'\n"
    },
    {
        "number": 1224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"106\") == \"4 2\"\n\"\"\"\n\nimport sys\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 1224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"106\") == \"4 2\"\n\"\"\""
    },
    {
        "number": 1224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '-1'\nassert solution('1') == '-1'\nassert solution('21') == '1 1'\nassert solution('52') == '2 2'\nassert solution('100') == '2 2'\n"
    },
    {
        "number": 1224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('106') == '4 2'\n\"\"\"\n\n\"\"\"\nGiven an integer N, determine whether there is a pair of positive integers (A, B) such that 3^A + 5^B = N, and find one such pair if it exists.\n\nFor example, given 107 = 3^7 + 5^2, the function should return (7, 2).\n\nWrite 5 lines of code to test the correctness of solution:\nGiven is an integer N.\nDetermine whether there is a pair of positive integers (A, B) such that 3^A + 5^B = N, and find one such pair if it exists.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^{18}\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nIf there is no pair (A, B) that satisfies the condition, print -1.\nIf there is such a pair, print A and B of one such pair with space in between. If there are multiple such pairs, any of them will be accepted.\n\n-----Sample Input-----\n100\n\n-----Sample Output-----\n-1\n\"\"\"\n"
    },
    {
        "number": 1224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"106\") == '4 2'"
    },
    {
        "number": 1224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"106\") == \"4 2\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 1225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"3\"\n\nprint(solution(\"2\"))"
    },
    {
        "number": 1225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_0) == expected_output_0\nprint(solution(test_input_1), end=\" \", file=sys.stderr)\nassert solution(test_input_1) == expected_output_1\nprint(solution(test_input_2), end=\" \", file=sys.stderr)\nassert solution(test_input_2) == expected_output_2\nprint(solution(test_input_3), end=\" \", file=sys.stderr)\nassert solution(test_input_3) == expected_output_3\n\"\"\"\n"
    },
    {
        "number": 1225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n\") == \"3\"\nassert solution(\"5\\n\") == \"7\"\nassert solution(\"8\\n\") == \"15\"\n\"\"\"\n\nfrom typing import List\nimport math\nimport os\nimport random\n\n\nclass Solution:\n    def min_attacks(self, H: int) -> int:\n        \"\"\"O(log n) / O(1)\"\"\"\n        left = 1\n        right = int(math.sqrt(H))\n        while left <= right:\n            mid = (left + right) // 2\n            if self.is_valid(mid, H):\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left - 1\n\n    def is_valid(self, n: int, H: int) -> bool:\n        \"\"\"\n        - if n < 2, then return False\n        - if n < 3, then return True\n        - H <= 2 * n - 1\n        \"\"\"\n        if n < 2:\n            return False\n        if n < 3:\n            return True\n        return H <= 2 * n - 1\n"
    },
    {
        "number": 1225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '3'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 1225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('2\\n2\\n') == '2'\nassert solution('2\\n1\\n') == '2'\n"
    },
    {
        "number": 1225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == 3\nassert solution(\"1\") == 0\n\"\"\"\n\nimport math"
    },
    {
        "number": 1225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 1225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"3\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nH = int(input())"
    },
    {
        "number": 1225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n\") == \"3\"\nassert solution(\"3\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 1225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"2\") == \"3\"\nassert solution(\"10\") == \"8\"\nassert solution(\"100\") == \"50\""
    },
    {
        "number": 1226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\") == 7\n\n\"\"\""
    },
    {
        "number": 1226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3\") == 7\n\"\"\""
    },
    {
        "number": 1226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 3') == '7'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 1226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 3\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 1226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3\\n\") == 7\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\nfrom operator import mul"
    },
    {
        "number": 1226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 3') == '7'\n\"\"\""
    },
    {
        "number": 1226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 3\\n\") == \"7\"\n\"\"\""
    },
    {
        "number": 1226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 3') == '7'"
    },
    {
        "number": 1226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3\\n\") == 7\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 3\") == \"7\"\nassert solution(\"2 2 3\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 1227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '100 1'\n) == '19'\n\n\"\"\""
    },
    {
        "number": 1227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(100, 1) == 19\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 1227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100\\n1\\n\") == \"19\"\n\"\"\"\n\n\"\"\"\nDice\n\nGiven N and K, find the number of integers X such that:\n1) X is divisible by K, and\n2) X contains exactly K non-zero digits when written in base ten.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^{18}\n - 1 \\leq K \\leq 9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the count.\n\n-----Sample Input-----\n5 2\n\n-----Sample Output-----\n6\n\nThe following 6 integers satisfy the conditions:\n - 1, 2, 3, 4, 5, 6\n - 10, 20, 30, 40, 50, 60\n - 100, 200, 300, 400, 500, 600\n\n\"\"\"\n\n\"\"\"\nLogic\n\nLet S be the set of positive integers, and let K be the number of digits in the number N.\n\nEach number in the set is 1 less than the previous number, as they are subsequences of increasing order, and the Nth number is formed by selecting the Nth digit of each of the K numbers in S.\n\nLet Z(N) be the number of numbers in S for which N is the Nth number in the sequence.\n\nThere are K+1 elements in the sequence S.\n\nSo Z(N) is the number of elements in S that have a property:\n\nEach element in S is divisible by N, and each digit in the element is less than the digit of the next element in the sequence.\n\nTherefore Z(N) is the number of elements in S that have properties (1) and (2).\n\nSo Z(N) = K*len(S) - len(S).\n\nFor N = 1 and K = 1, there are 9 numbers in the sequence, so Z(N=1, K=1) = 9.\n\nFor N = 2 and K = 1, there are 4 numbers in the sequence, so Z(N=2, K=1) = 4.\n\nFor N = 3 and K = 1, there are 2 numbers in the sequence, so Z(N=3, K=1) = 2.\n\nFor N = 4 and K = 1, there are 1 numbers in the sequence, so Z(N=4, K=1) = 1.\n\nFor N = 5 and K = 1, there are no numbers in the sequence, so Z(N=5, K=1) = 0.\n\nFor N = 5 and K = 2, there are 6 numbers in the sequence, so Z(N=5, K=2) = 6.\n\nFor N = 5 and K = 3, there are 6 numbers in the sequence, so Z(N=5, K=3) = 6.\n\nFor N = 5 and K = 4, there are 6 numbers in the sequence, so Z(N=5, K=4) = 6.\n\nFor N = 5 and K = 5, there are 6 numbers in the sequence, so Z(N=5, K=5) = 6.\n\nFor N = 5 and K = 6, there are 6 numbers in the sequence, so Z(N=5, K=6) = 6.\n\nFor N = 5 and K = 7, there are 6 numbers in the sequence, so Z(N=5, K=7) = 6.\n\nFor N = 5 and K = 8, there are 6 numbers in the sequence, so Z(N=5, K=8) = 6.\n\nFor N = 5 and K = 9, there are 6 numbers in the sequence, so Z(N=5, K=9) = 6.\n\nFor N = 5 and K = 10, there are 6 numbers in the sequence, so Z(N=5, K=10) = 6.\n\nFor N = 5 and K = 11, there are 6 numbers in the sequence, so Z(N=5, K=11) = 6.\n\nFor N = 5 and K = 12, there are 6 numbers in the sequence, so Z(N=5, K=12) = 6.\n\nFor N = 5 and K = 13, there are 6 numbers in the sequence, so Z(N=5, K=13) = 6.\n\nFor N = 5 and K = 14, there are 6 numbers in the sequence, so Z(N=5, K=14) = 6.\n\nFor N = 5 and K = 15, there are 6 numbers in the sequence, so Z(N=5, K=15) = 6.\n\nFor N = 5 and K = 16, there are 6 numbers in the sequence, so Z(N=5, K=16) = 6.\n\nFor N = 5 and K = 17, there are 6 numbers in the sequence, so Z(N=5, K=17) = 6.\n\nFor N = 5 and K = 18, there are 6 numbers in the sequence, so Z(N=5, K=18) = 6.\n\nFor N = 5 and K = 19, there are 6 numbers in the sequence, so Z(N=5, K=19) = 6.\n\nFor N = 5 and K = 20, there are 6 numbers in the sequence, so Z(N=5, K=20) = 6.\n\nFor N = 5 and K = 21, there are 6 numbers in the sequence, so Z(N=5, K=21) = 6.\n\nFor N = 5 and K = 22, there are 6 numbers in the sequence, so Z(N=5, K=22) = 6.\n\nFor N = 5 and K = 23, there are 6 numbers in the sequence, so Z(N=5, K=23) = 6.\n\nFor N = 5 and K = 24, there are 6 numbers in the sequence, so Z(N=5, K=24) = 6.\n\nFor N = 5 and K = 25, there are 6 numbers in the sequence, so Z(N=5, K=25) = 6.\n\nFor N = 5 and K = 26, there are 6 numbers in the sequence, so Z(N=5, K=26) = 6.\n\nFor N = 5 and K = 27, there are 6 numbers in the sequence, so Z(N=5, K=27) = 6.\n\nFor N = 5 and K = 28, there are 6 numbers in the sequence, so Z(N=5, K=28) = 6.\n\nFor N = 5 and K = 29, there are 6 numbers in the sequence, so Z(N=5, K=29) = 6.\n\nFor N = 5 and K = 30, there are 6 numbers in the sequence, so Z(N=5, K=30) = 6.\n\nFor N = 5 and K = 31, there are 6 numbers in the sequence, so Z(N=5, K=31) = 6.\n\nFor N = 5 and K = 32, there are 6 numbers in the sequence, so Z(N=5, K=32) = 6.\n\nFor N = 5 and K = 33, there are 6 numbers in the sequence, so Z(N=5, K=33) = 6.\n\nFor N = 5 and K = 34, there are 6 numbers in the sequence, so Z(N=5, K=34) = 6.\n\nFor N = 5 and K = 35, there are 6 numbers in the sequence, so Z(N=5, K=35) = 6.\n\nFor N = 5 and K = 36, there are 6 numbers in the sequence, so Z(N=5, K=36) = 6.\n\nFor N = 5 and K = 37, there are 6 numbers in the sequence, so Z(N=5, K=37) = 6.\n\nFor N = 5 and K = 38, there are 6 numbers in the sequence, so Z(N=5, K=38) = 6.\n\nFor N = 5 and K = 39, there are 6 numbers in the sequence, so Z(N=5, K=39) = 6.\n\nFor N = 5 and K = 40, there are 6 numbers in the sequence, so Z(N=5, K=40) = 6.\n\nFor N = 5"
    },
    {
        "number": 1227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 1') == '19'\n\"\"\"\n"
    },
    {
        "number": 1227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100\\n1\") == \"19\"\n\"\"\"\n\nimport math\n\nn, k = map(int, input().split())\n\nk_digits = [10 ** i for i in range(math.ceil(math.log(k, 10)))]\n\nk_digits = [i for i in k_digits if i <= n]"
    },
    {
        "number": 1227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 1') == '19'\nprint('Success')\n"
    },
    {
        "number": 1227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 1') == '19'\n\nhttps://www.codewars.com/kata/56cdcb7a67e11d1fd4000ee7/train/python\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 1227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100 1') == 19\n\"\"\"\n\nfrom typing import List\nfrom math import log10\n"
    },
    {
        "number": 1227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n') == '19'\n\"\"\""
    },
    {
        "number": 1227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 1\\n\") == \"19\"\n\"\"\""
    },
    {
        "number": 1228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"33\") == \"0 A\"\nassert solution(\"98\") == \"1 B\""
    },
    {
        "number": 1228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('33') == '0 A'\nassert solution('98') == '1 B'\n"
    },
    {
        "number": 1228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"33\") == '0A'\nassert solution(\"98\") == '1B'\nassert solution(\"4\") == '2C'\nassert solution(\"29\") == '1A'\nassert solution(\"50\") == '2B'\n"
    },
    {
        "number": 1228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"33\") == '0 A'\nassert solution(\"98\") == '1 B'\n"
    },
    {
        "number": 1228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"33\") == \"0 A\"\nassert solution(\"98\") == \"1 B\"\nassert solution(\"30\") == \"0 A\"\n\"\"\""
    },
    {
        "number": 1228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(33) == '0 A'\nassert solution(98) == '1 B'\n\"\"\"\n"
    },
    {
        "number": 1228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"33\") == \"0 A\"\nassert solution(\"98\") == \"1 B\"\n"
    },
    {
        "number": 1228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('33') == '0 A'\nassert solution('98') == '1 B'\nassert solution('11') == '2 C'\n\nSolution\n"
    },
    {
        "number": 1228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100') == '1 A'\nassert solution('2') == '1 B'\nassert solution('33') == '0 A'\nassert solution('98') == '1 B'\nassert solution('33') == '0 A'\n"
    },
    {
        "number": 1228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('32') == '0 A'\nassert solution('98') == '1 B'\n\"\"\""
    },
    {
        "number": 1229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 5\\n\"\n    \"abcde\\n\"\n    \"abcde\\n\"\n    \"abcde\\n\"\n    \"abcde\\n\"\n    \"1 1 1 1 1\\n\"\n    \"1 1 1 1 1\\n\"\n    \"1 1 1 1 1\\n\"\n    \"1 1 1 1 1\\n\"\n    ) == \"3\"\nassert solution(\n    \"4 3\\n\"\n    \"abc\\n\"\n    \"aba\\n\"\n    \"adc\\n\"\n    \"ada\\n\"\n    \"10 10 10\\n\"\n    \"10 1 10\\n\"\n    \"10 10 10\\n\"\n    \"10 1 10\\n\"\n    ) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(\"input.txt\", \"r\")) == \"10\"\nprint(\"Cool!\")\n"
    },
    {
        "number": 1229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\nabc\\naba\\nadc\\nada\\n10 10 10\\n10 1 10\\n10 10 10\\n10 1 10\\n') == 2\n\n\"\"\""
    },
    {
        "number": 1229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4 5\nabcde\nabcde\nabcde\nabcde\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"4 3\nabc\naba\nadc\nada\n10 10 10\n10 1 10\n10 10 10\n10 1 10\n\"\"\") == \"2\"\nassert solution(\"\"\"3 3\nabc\nada\nssa\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"0\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 1229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\nabcde\\nabcde\\nabcde\\nabcde\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"3\"\n"
    },
    {
        "number": 1229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\nabcde\\nabcde\\nabcde\\nabcde\\n1 1 1 1 1\") == 3\nassert solution(\"4 3\\nabc\\naba\\nadc\\nada\\n10 10 10\\n10 1 10\\n10 10 10\\n10 1 10\") == 2"
    },
    {
        "number": 1229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 5\nabcde\nabcde\nabcde\nabcde\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1''') == '3'\nassert solution('''4 3\nabc\naba\nadc\nada\n10 10 10\n10 1 10\n10 10 10\n10 1 10''') == '2'\nassert solution('''3 3\nabc\nada\nssa\n1 1 1\n1 1 1\n1 1 1''') == '0'\nassert solution('''4 4\naabbcc\naabaaba\nabbbabb\nabccba\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2''') == '3'\nassert solution('''4 4\naaaaaa\nbbbbbb\naaaaaa\naaaaaa\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2''') == '0'\n"
    },
    {
        "number": 1229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n\"\n        \"abcde\\n\"\n        \"abcde\\n\"\n        \"abcde\\n\"\n        \"abcde\\n\"\n        \"1 1 1 1 1\\n\"\n        \"1 1 1 1 1\\n\"\n        \"1 1 1 1 1\\n\"\n        \"1 1 1 1 1\\n\"\n        ) == 3\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 1229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_stdin_1) == solution(test_stdin_2)\nassert solution(test_stdin_1) == solution(test_stdin_3)\nassert solution(test_stdin_1) == solution(test_stdin_4)\nassert solution(test_stdin_1) == solution(test_stdin_5)\nprint('The local tests are done. Now submit to Rosetta and compare your solution with Rosetta\\'s.')\n\n\ntest_stdin_1 = \"\"\"4 5\nabcde\nabcde\nabcde\nabcde\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n\"\"\"\n\ntest_stdin_2 = \"\"\"4 3\nabc\naba\nadc\nada\n10 10 10\n10 1 10\n10 10 10\n10 1 10\n\"\"\"\n\ntest_stdin_3 = \"\"\"3 3\nabc\nada\nssa\n1 1 1\n1 1 1\n1 1 1\n\"\"\"\n\ntest_stdin_4 = \"\"\"3 3\nabc\nada\nssa\n10 10 10\n10 1 10\n10 10 10\n10 1 10\n\"\"\"\n\ntest_stdin_5 = \"\"\"3 3\nabc\nada\nssa\n10 10 10\n10 10 10\n10 10 10\n10 1 10\n\"\"\"\n\ntest_stdin_6 = \"\"\"4 4\nabab\nbbba\nabbb\nabba\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\"\"\"\n\ntest_stdin_7 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n\"\"\"\n\ntest_stdin_8 = \"\"\"5 5\nabab\nbbba\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_9 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_10 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_11 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_12 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_13 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_14 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_15 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_16 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_17 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_18 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_19 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_20 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_21 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_22 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_23 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\"\n\ntest_stdin_24 = \"\"\"5 5\naba\nabab\nabba\nabbb\nabab\n10 10 10 10 10 10 10\n10 10 10 10 10 10"
    },
    {
        "number": 1229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n4 5\nabcde\nabcde\nabcde\nabcde\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '3'\n\nassert solution('''\n4 3\nabc\naba\nadc\nada\n10 10 10\n10 1 10\n10 10 10\n10 1 10\n''') == '2'\n\nassert solution('''\n3 3\nabc\nada\nssa\n1 1 1\n1 1 1\n1 1 1\n''') == '0'\n\nprint('Success')"
    },
    {
        "number": 1230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('12') == ''\nassert solution('33') == ''\nassert solution('123') == ''\n"
    },
    {
        "number": 1230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 3\\n3 3 3') == '3'\nassert solution('4 1 1 1\\n1 1 1 1') == '0 2 4'\nassert solution('35\\n21 26 18 4 28 2 15 13 16 25 6 32 11 5 31 17 9 3 24 33 14 27 29 1 20 4 12 7 10 30 34 8 19 23 22') == '13 15 17 19 21'\nassert solution('6\\n4 3 2 1 6 5') == '-1'\n\n\n\"\"\"\n"
    },
    {
        "number": 1230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3\") == 3\nassert solution(\"1 1 1 1\") == 0\nassert solution(\"0 2\") == -1\n\"\"\"\n"
    },
    {
        "number": 1230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n3 3 3') == '3'\nassert solution('4\\n1 1 1 1') == '0 2 4'\nassert solution('2\\n0 2') == '-1'\n"
    },
    {
        "number": 1230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3\") == \"3\"\nassert solution(\"1 1 1 1\") == \"0 2 4\"\nassert solution(\"2 0\") == \"-1\"\nassert solution(\"35 21 26 18 4 28 2 15 13 16 25 6 32 11 5 31 17 9 3 24 33 14 27 29 1 20 4 12 7 10 30 34 8 19 23 22\") == \"13 15 17 19 21\"\n"
    },
    {
        "number": 1230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3 3 3\") == \"3\"\nassert solution(\"4\\n1 1 1 1\") == \"0 2 4\"\nassert solution(\"2\\n0 2\") == \"-1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 3') == '3'\nassert solution('4 1 1 1') == '0 2 4'\nassert solution('2 0') == '-1'\n\"\"\"\n\nimport sys\nfrom itertools import product"
    },
    {
        "number": 1230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3\") == \"3\"\nassert solution(\"1 1 1 1\") == \"0 2 4\"\nassert solution(\"0 2\") == \"-1\"\nassert solution(\"35 21 26 18 4 28 2 15 13 16 25 6 32 11 5 31 17 9 3 24 33 14 27 29 1 20 4 12 7 10 30 34 8 19 23 22\") == \"13 15 17 19 21\"\nassert solution(\"33\") == \"1\"\n"
    },
    {
        "number": 1230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n3 3 3') == '3'\nassert solution('4\\n1 1 1 1') == '0 2 4'\nassert solution('35\\n21 26 18 4 28 2 15 13 16 25 6 32 11 5 31 17 9 3 24 33 14 27 29 1 20 4 12 7 10 30 34 8 19 23 22') == '13 15 17 19 21'\n\"\"\""
    },
    {
        "number": 1230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n3 3 3') == '3'\nassert solution('4\\n1 1 1 1') == '0 2 4'\nassert solution('2\\n0 2') == '-1'\nassert solution('35\\n21 26 18 4 28 2 15 13 16 25 6 32 11 5 31 17 9 3 24 33 14 27 29 1 20 4 12 7 10 30 34 8 19 23 22') == '13 15 17 19 21'"
    },
    {
        "number": 1231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('1 2') == 'NO'\n\"\"\""
    },
    {
        "number": 1231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"1 5\\n2 2\") == \"YES\"\nassert solution(\n\"1 5\\n2 3\") == \"NO\"\nassert solution(\n\"4 3\\n2 3\") == \"YES\"\nassert solution(\n\"1 5\\n2 1\") == \"NO\"\nassert solution(\n\"2 1\\n2 3\") == \"YES\"\n"
    },
    {
        "number": 1231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == 'NO'\nassert solution('1 2 1') == 'NO'\nassert solution('1 2 2') == 'NO'\nassert solution('1 3 3') == 'NO'\nassert solution('1 1 1') == 'YES'\n"
    },
    {
        "number": 1231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('3 1') == 'NO'\nassert solution('5 4') == 'YES'\nassert solution('8 7') == 'YES'\nassert solution('1 1') == 'NO'\n"
    },
    {
        "number": 1231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('3 1') == 'NO'\n"
    },
    {
        "number": 1231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\n\n'''\n"
    },
    {
        "number": 1231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('3 1') == 'NO'\n\n---"
    },
    {
        "number": 1231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 1231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"11 5\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\nassert solution(\"8 10\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 1231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 1232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n1 1 1 1 1\\n2 2') == \"YES\"\nassert solution('3 1\\n1 1 1 1 1\\n3 4 5') == \"NO\"\nassert solution('5 2\\n3 1\\n1 1 1 1 1\\n2 2') == \"YES\"\nassert solution('5 2\\n3 3\\n1 1 1 1 1\\n2 2') == \"NO\"\n\n\n\"\"\"\nimport unittest\nfrom typing import List\nfrom collections import deque\n"
    },
    {
        "number": 1232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n1 1 1 1\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\") == \"NO\"\n"
    },
    {
        "number": 1232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 1 1\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"4 4\") == \"NO\"\nassert solution(\"5 3\") == \"YES\"\n"
    },
    {
        "number": 1232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"YES\"\nassert solution(\"3 1\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4 5\") == \"YES\"\n"
    },
    {
        "number": 1232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 1 1 1 1\\n2 2') == 'YES'\nassert solution('3 3\\n1 2 3\\n3 4 5') == 'NO'\nassert solution('5 2\\n3 1\\n1 1 1 1 1') == 'YES'\nassert solution('5 3\\n3 1\\n1 1 1 1 1') == 'NO'\nassert solution('5 4\\n3 1\\n1 1 1 1 1') == 'YES'\n"
    },
    {
        "number": 1232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 1232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n1 1 1 1 1\\n2 2\\n') == 'YES'\nassert solution('5 2\\n3 1\\n1 1 1 1 1\\n2 2\\n') == 'YES'\nassert solution('3 3\\n1 2 3\\n1 2 3\\n1 2 3\\n') == 'NO'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 1232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 3\\n3 4 5') == 'YES'\nassert solution('5 2\\n3 1\\n1 1 1 1 1') == 'YES'\nassert solution('3 3\\n3 4 5\\n1 2 3') == 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 1232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 1232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 3\\n3 4 5') == 'YES'\nassert solution('5 2\\n3 1\\n1 1 1 1 1') == 'YES'\nassert solution('3 1\\n1 1 1 1') == 'NO'"
    },
    {
        "number": 1233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 0 3 1 2') == '3 2'\nassert solution('5 1 2 4 0') == '3 4'\n"
    },
    {
        "number": 1233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 3 1 2\") == \"3 2\"\nassert solution(\"5 4 3 2 1\") == \"3 4\"\n"
    },
    {
        "number": 1233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n4 0 3 1 2') == '3 2'\n\"\"\""
    },
    {
        "number": 1233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n4 0 3 1 2') == '3 2'\n\nassert solution('5\\n1 2 3 4 0') == '3 4'"
    },
    {
        "number": 1233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 3 1 2\") == '3 2'\nassert solution(\"5 1 4 0 2\") == '3 4'"
    },
    {
        "number": 1233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 0 3 1 2\") == \"3 2\"\nassert solution(\"5\\n1 2 3 4 0\") == \"3 4\"\n"
    },
    {
        "number": 1233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0 3 1 2\") == '3 2'\n\nassert solution(\"5 1 4 0 2\") == '3 4'\n\nassert solution(\"5 2 4 0 1\") == '3 4'\n"
    },
    {
        "number": 1233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 0 3 1 2\") == \"3 2\"\nassert solution(\"5\\n1 2 3 4 0\") == \"3 4\"\n\n\"\"\"\n\nimport math\n\nclass ArrayWithSwaps:\n    def __init__(self, n: int, array: list):\n        self.n = n\n        self.array = array\n        self.parent = [i for i in range(n)]\n\n    def get_parent(self, i: int):\n        while self.parent[i]!= i:\n            i = self.parent[i]\n        return i\n\n    def union(self, p: int, q: int):\n        root_p = self.get_parent(p)\n        root_q = self.get_parent(q)\n        if root_p < root_q:\n            self.parent[root_q] = root_p\n        else:\n            self.parent[root_p] = root_q\n\n    def find(self, p: int, q: int):\n        return self.get_parent(p) == self.get_parent(q)\n\n    def print(self):\n        print(self.array)\n        print(self.parent)"
    },
    {
        "number": 1233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 0 3 1 2\") == \"3 2\"\nassert solution(\"5\\n1 2 3 4 0\") == \"3 4\""
    },
    {
        "number": 1233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n4 0 3 1 2') == '3 2'\nassert solution('5\\n1 2 3 4 0') == '3 4'\n"
    },
    {
        "number": 1234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''9 2 3\n5 2 5 2 4 1 1 3 2''') == '21'\nassert solution('''6 1 4\n4 1 3 2 2 3''') == '12'\nassert solution('''2 1 2\n-1000000000 1000000000''') == '0'\nassert solution('''1 1 2\n-1''') == '0'\n\n\"\"\"\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 1234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 2 3\\n5 2 5 2 4 1 1 3 2\\n') == '21'\n\"\"\""
    },
    {
        "number": 1234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 2 3\\n5 2 5 2 4 1 1 3 2\\n\") == \"21\"\nassert solution(\"6 1 4\\n4 1 3 2 2 3\\n\") == \"12\"\nassert solution(\"2 1 2\\n-1000000000 1000000000\\n\") == \"0\"\nassert solution(\"3 1 2\\n1 -1 -1\\n\") == \"1\"\nassert solution(\"3 1 2\\n2 -1 -1\\n\") == \"0\"\n"
    },
    {
        "number": 1234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 1 4\") == \"12\"\nassert solution(\"2 1 2\") == \"0\"\nassert solution(\"9 2 3\") == \"21\"\nassert solution(\"9 1 1\") == \"1\"\nassert solution(\"5 2 5 2 4 1 1 3 2\") == \"21\"\n"
    },
    {
        "number": 1234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 2 3\\n5 2 5 2 4 1 1 3 2\") == \"21\"\nassert solution(\"6 1 4\\n4 1 3 2 2 3\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 1234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n5 2 5 2 4 1 1 3 2\") == \"21\"\n\"\"\""
    },
    {
        "number": 1234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 2 3\\n5 2 5 2 4 1 1 3 2\\n\") == \"21\"\nassert solution(\"6 1 4\\n4 1 3 2 2 3\\n\") == \"12\"\nassert solution(\"2 1 2\\n-1000000000 1000000000\\n\") == \"0\"\nassert solution(\"1 1\\n-1\\n\") == \"0\"\nassert solution(\"0 1\\n-1\\n\") == \"0\""
    },
    {
        "number": 1234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 2 3\\n5 2 5 2 4 1 1 3 2\") == \"21\\n3 5\"\n\"\"\"\nfrom typing import List, Tuple, Dict\nimport sys\n\nfrom bisect import bisect_right\n"
    },
    {
        "number": 1234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3\\n5 2 5 2 4 1 1 3 2') == '21'\nassert solution('6 1 4\\n4 1 3 2 2 3') == '12'\nassert solution('2 1 2\\n-1000000000 1000000000') == '0'\n\nassert solution('9 2 3\\n5 2 5 2 4 1 1 3 2') == '21'\nassert solution('6 1 4\\n4 1 3 2 2 3') == '12'\n"
    },
    {
        "number": 1234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 2 3\\n5 2 5 2 4 1 1 3 2\") == \"21\"\nassert solution(\"6 1 4\\n4 1 3 2 2 3\") == \"12\"\nassert solution(\"2 1 2\\n-1000000000 1000000000\") == \"0\"\nassert solution(\"2 1 2\\n100 100\") == \"0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 2\\n5\\n1 5 7 7 9') == '3 1'\nassert solution('1 3 5 7\\n4\\n7 5 3 1') == '1 1'\nassert solution('1 3 5 7\\n4\\n7 5 3 1') == '1 1'\nassert solution('1 3 5 7\\n4\\n7 5 3 1') == '1 1'\nassert solution('1 3 5 7\\n4\\n7 5 3 1') == '1 1'\n"
    },
    {
        "number": 1235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n\") == \"3\\n1\\n\"\nassert solution(\"1\\n7\\n5\\n7\\n9\") == \"7\\n9\\n\"\nassert solution(\"1\\n5\\n3\\n7\\n9\") == \"3\\n9\\n\"\nassert solution(\"1\\n5\\n3\\n7\\n9\") == \"3\\n9\\n\"\nassert solution(\"1\\n5\\n3\\n7\\n9\") == \"3\\n9\\n\""
    },
    {
        "number": 1235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('1\\n1\\n1') == '2'\nassert solution('2\\n1') == '2'\nassert solution('2\\n2\\n2') == '1'\nassert solution('2\\n2\\n3') == '3'\n"
    },
    {
        "number": 1235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"2 2\") == \"2 1\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 10\") == \"10 10\"\nassert solution(\"1 20\") == \"20 1\"\n"
    },
    {
        "number": 1235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n1\\n2\") == \"1\\n2\"\nassert solution(\"1\\n2\\n3\\n2\\n1\") == \"1\\n2\"\nassert solution(\"1\\n2\\n3\\n2\\n1\\n3\") == \"3\\n1\"\nassert solution(\"3\\n2\\n2\\n5\") == \"3\\n1\"\n"
    },
    {
        "number": 1235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"1 1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"7 7\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404"
    },
    {
        "number": 1235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 2\\n5\\n1 5 7 7 9\") == '1 1'\nassert solution(\"1\\n3 2 2\\n5\\n1 5 7 7 9\") == '3 1'\n\"\"\"\n\nn = int(input())\nA = list(map(int, input().split()))\nm = int(input())\nB = list(map(int, input().split()))\n\nfor i in A:\n    if i in B:\n        continue\n    else:\n        print(i, end=\" \")\n        break\nfor j in B:\n    if j in A:\n        continue\n    else:\n        print(j, end=\" \")\n        break\n"
    },
    {
        "number": 1235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n3\\n2\\n2\\n\") == \"1\\n1\"\nassert solution(\"1\\n3\\n5\\n7\\n9\\n\") == \"1\\n1\"\nassert solution(\"1\\n3\\n5\\n7\\n9\\n\") == \"1\\n1\"\n\"\"\"\n"
    },
    {
        "number": 1235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 2\\n5\\n1 5 7 7 9\\n\") == \"3 1\"\nassert solution(\"4\\n7 5 3 1\\n\") == \"1 1\"\nassert solution(\"1 3 5 7\\n4\\n7 5 3 1\\n\") == \"3 1\"\n\"\"\""
    },
    {
        "number": 1235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 2 2\\n2\\n3 2\\n') == '3 1'\n\"\"\""
    },
    {
        "number": 1236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n1 2 1\") == \"Stannis\"\nassert solution(\"3 1\\n2 2 1\") == \"Daenerys\"\nassert solution(\"6 3\\n5 20 12 7 14 101\") == \"Stannis\"\nassert solution(\"6 3\\n5 9 3 4 4 2\") == \"Daenerys\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n1 2 1\") == \"Stannis\"\nassert solution(\"3 1\\n2 2 1\") == \"Daenerys\""
    },
    {
        "number": 1236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 2 1\") == \"Stannis\"\nassert solution(\"3 1\\n2 2 1\") == \"Daenerys\"\nassert solution(\"6 3\\n5 20 12 7 14 101\") == \"Stannis\"\n"
    },
    {
        "number": 1236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n1 2 1') == 'Stannis'\nassert solution('3 1\\n2 2 1') == 'Daenerys'\n\"\"\""
    },
    {
        "number": 1236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n1 2 1\") == \"Stannis\"\nassert solution(\"3 1\\n2 2 1\") == \"Daenerys\"\n\"\"\"\n\nimport collections\nimport sys"
    },
    {
        "number": 1236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 2 1\") == \"Stannis\"\nassert solution(\"3 1\\n2 2 1\") == \"Daenerys\"\n"
    },
    {
        "number": 1236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n1 2 1') == 'Stannis'\nassert solution('3 1\\n2 2 1') == 'Daenerys'\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nsum_n = sum(list(map(int, stdin.readline().split())))\n"
    },
    {
        "number": 1236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'3 1\\n1 2 1'\n) == 'Stannis'\nassert solution(\n'3 1\\n2 2 1'\n) == 'Daenerys'\nassert solution(\n'6 3\\n5 20 12 7 14 101'\n) == 'Stannis'\n\"\"\"\n\nn, k = list(map(int, stdin.readline().split()))\na = list(map(int, stdin.readline().split()))\n\ncount = 0\nfor i in a:\n    if i % 2 == 0:\n        count += 1\n"
    },
    {
        "number": 1236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n1 2 1\") == \"Stannis\"\nassert solution(\"3 1\\n2 2 1\") == \"Daenerys\"\n\nprint(\"Success!\")\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 1236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Stannis'\nassert solution('1 1') == 'Stannis'\nassert solution('1 2') == 'Stannis'\nassert solution('1 1 1') == 'Stannis'\nassert solution('1 2 1') == 'Daenerys'\n"
    },
    {
        "number": 1237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\\n2 1\\n3 8\\n5 2\\n\") == \"11\""
    },
    {
        "number": 1237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7\\n2 1\\n3 8\\n5 2\\n') == '11'\n"
    },
    {
        "number": 1237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 7\\n2 1\\n3 8\\n5 2') == '11'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 1237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n3 8\\n5 2\") == \"11\"\nassert solution(\"3 7\\n2 1\\n3 8\\n5 2\") == \"11\"\nassert solution(\"5 10\\n2 77\\n3 33\\n8 21\\n9 12\\n10 64\") == \"79\"\n\"\"\"\n\nimport sys\n\ninp = list(map(str.split, sys.stdin.readlines()[1:]))\n\nfloors = int(inp[0][0])\ntop_floor = int(inp[0][1])\n\narrival_times = dict()\nfor i in range(1, len(inp)):\n    floor, arrival = int(inp[i][0]), int(inp[i][1])\n    arrival_times[floor] = arrival\n\npos = top_floor\ntotal = 0\nfor i in range(floors, 0, -1):\n    arrival = arrival_times[i]\n    if arrival <= total:\n        break\n    total += arrival\n\nprint(total)\n"
    },
    {
        "number": 1237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 7\n2 1\n3 8\n5 2''') == '11'\n\nassert solution('''5 10\n2 77\n3 33\n8 21\n9 12\n10 64''') == '79'\n"
    },
    {
        "number": 1237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 7\n2 1\n3 8\n5 2''') == '11'\nassert solution('''5 10\n2 77\n3 33\n8 21\n9 12\n10 64''') == '79'\n"
    },
    {
        "number": 1237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\\n2 1\\n3 8\\n5 2\") == \"11\"\n\nprint(\"Solutions exists!\")"
    },
    {
        "number": 1237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7\\n2 1\\n3 8\\n5 2') == '11'\n\"\"\"\nimport sys"
    },
    {
        "number": 1237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 7\n2 1\n3 8\n5 2\n\"\"\") == \"11\"\nassert solution(\"\"\"5 10\n2 77\n3 33\n8 21\n9 12\n10 64\n\"\"\") == \"79\"\n\n\"\"\"\n\nfrom collections import deque\n\nclass Elevator:\n    def __init__(self, start_floor, n_floors):\n        self.start_floor = start_floor\n        self.n_floors = n_floors\n        self.queue = deque()\n\n\n    def is_empty(self):\n        return not self.queue\n\n\n    def is_full(self):\n        return len(self.queue) == self.n_floors - 1\n\n\n    def is_on_floor(self, floor):\n        return self.queue and self.queue[-1] == floor\n\n\n    def move(self, direction: str):\n        if direction == \"up\":\n            if self.queue:\n                self.queue.pop()\n                return True\n        elif direction == \"down\":\n            if self.queue:\n                self.queue.appendleft(self.start_floor)\n                return True\n        return False\n\n\n    def next_floor(self, direction: str):\n        if direction == \"up\":\n            return self.start_floor - 1\n        elif direction == \"down\":\n            return self.start_floor + 1\n\n\n    def add_passenger(self, passenger_id: str):\n        self.queue.appendleft(passenger_id)\n\n\n    def pick_up(self, passenger_id: str):\n        self.queue.append(passenger_id)\n\n\nclass Floor:\n    def __init__(self, floor_id: int, n_passengers: int, elevator):\n        self.floor_id = floor_id\n        self.n_passengers = n_passengers\n        self.elevator = elevator\n\n\n    def is_empty(self):\n        return self.n_passengers == 0\n\n\n    def is_full(self):\n        return self.n_passengers == self.elevator.n_floors - 1\n\n\n    def is_on_floor(self, passenger_id: str):\n        return passenger_id in self.passengers\n\n\n    def add_passenger(self, passenger_id: str):\n        self.passengers.append(passenger_id)\n        self.n_passengers += 1\n\n\n    def remove_passenger(self, passenger_id: str):\n        self.passengers.remove(passenger_id)\n        self.n_passengers -= 1\n\n\n    def add_to_elevator(self, direction: str):\n        if direction == \"up\":\n            while self.n_passengers > 0 and self.elevator.is_empty():\n                self.elevator.add_passenger(self.passengers.pop())\n        elif direction == \"down\":\n            while self.n_passengers < self.elevator.n_floors - 1 and self.elevator.is_full():\n                self.elevator.pick_up(self.passengers.popleft())\n\n\nclass ElevatorSystem:\n    def __init__(self, n_floors: int, start_floor: int):\n        self.n_floors = n_floors\n        self.start_floor = start_floor\n        self.floors = [\n            Floor(floor_id, 0, Elevator(self.start_floor, n_floors))\n            for floor_id in range(n_floors)\n        ]\n        self.elevators = [Elevator(start_floor, n_floors)]\n\n\n    def check_floor_passengers(self, floor: int):\n        return [\n            (floor_id, n_passengers)\n            for floor_id, n_passengers in enumerate(self.floors)\n            if floor_id!= floor\n        ]\n\n\n    def add_passenger(self, floor_id: int, passenger_id: str):\n        self.floors[floor_id].add_passenger(passenger_id)\n\n\n    def remove_passenger(self, floor_id: int, passenger_id: str):\n        self.floors[floor_id].remove_passenger(passenger_id)\n\n\n    def add_to_elevator(self, floor_id: int, direction: str):\n        self.floors[floor_id].add_to_elevator(direction)\n\n\n    def is_empty(self):\n        return all(floor.is_empty() for floor in self.floors)\n\n\n    def is_full(self):\n        return all(floor.is_full() for floor in self.floors)\n\n\n    def run(self):\n        time = 0\n        while self.is_empty():\n            time += 1\n            for floor in self.floors:\n                if floor.n_passengers > 0:\n                    direction = \"up\" if floor.floor_id > self.start_floor else \"down\"\n                    self.add_to_elevator(floor.floor_id, direction)\n                    floor.remove_passenger(direction)\n            for elevator in self.elevators:\n                if elevator.is_empty():\n                    continue\n                if elevator.move(elevator.next_floor(direction)):\n                    direction = \"down\" if elevator.next_floor(direction) == self.start_floor else \"up\"\n                    self.add_to_elevator(elevator.next_floor(direction), direction)\n        return time\n"
    },
    {
        "number": 1237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 7\\n2 1\\n3 8\\n5 2\"\n) == \"11\"\nassert solution(\n    \"5 10\\n2 77\\n3 33\\n8 21\\n9 12\\n10 64\"\n) == \"79\""
    },
    {
        "number": 1238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n10 13 12 8\") == 2\nassert solution(\"5\\n7 5 6 4 8\") == 0\n\"\"\""
    },
    {
        "number": 1238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10 13 12 8\") == \"2\"\nassert solution(\"5\\n7 5 6 4 8\") == \"0\"\nassert solution(\"4\\n10 11 9 1\") == \"0\"\nassert solution(\"6\\n10 11 12 9 13 14 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 1238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 13 12 8\") == \"2\"\n\nassert solution(\"5\\n7 5 6 4 8\") == \"0\"\n\"\"\"\n\nimport sys\nimport math\nimport numpy"
    },
    {
        "number": 1238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 13 12 8\") == \"2\"\nassert solution(\"5\\n7 5 6 4 8\") == \"0\"\n"
    },
    {
        "number": 1238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10 13 12 8\") == \"2\"\nassert solution(\"5\\n7 5 6 4 8\") == \"0\"\n"
    },
    {
        "number": 1238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n8 10 9 7\") == \"2\"\nassert solution(\"5\\n7 6 4 8\") == \"0\"\n"
    },
    {
        "number": 1238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n10 13 12 8') == '2'\nassert solution('5\\n7 5 6 4 8') == '0'\n\"\"\""
    },
    {
        "number": 1238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 13 12 8\") == \"2\"\nassert solution(\"5\\n7 5 6 4 8\") == \"0\"\n"
    },
    {
        "number": 1238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n10 13 12 8') == '2'\nassert solution('5\\n7 5 6 4 8') == '0'"
    },
    {
        "number": 1238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"4\\n10 13 12 8\") == \"2\"\nassert solution(\n    \"5\\n7 5 6 4 8\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 1239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 -3 0 4\\n') == '2 1'\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom collections import Counter"
    },
    {
        "number": 1239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 -3 0 4\\n') == '2 1'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 1239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n6 -3 0 4\\n\") == 2 1\n\"\"\"\nimport sys\n\nsys.stdin = open(\"input.txt\")"
    },
    {
        "number": 1239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n6 -3 0 4') == '2 1'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 1239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6 -3 0 4\") == '2\\n1'"
    },
    {
        "number": 1239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n6 -3 0 4\") == \"2 1\"\n"
    },
    {
        "number": 1239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 -3 0 4') == '2 1'\n\"\"\""
    },
    {
        "number": 1239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 -6 0 4') == '2 1'\n\"\"\"\n\nstdin = \"\"\"6 -3 0 4\n\"\"\""
    },
    {
        "number": 1239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n6 -3 0 4\") == \"2 1\"\n\"\"\""
    },
    {
        "number": 1239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n6 -3 0 4\") == \"2 1\"\n\"\"\""
    },
    {
        "number": 1240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 6\\n8 9\") == '3'\nassert solution(\"2\\n6 5\\n5 6\") == '1'\nassert solution(\"6\\n5 9\\n1 3\\n4 8\\n4 5\\n23 54\\n12 32\") == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n    3\n    5 6\n    8 9\n    10 3\n    '''\n) == '3'\n\nassert solution(\n    '''\n    2\n    6 5\n    5 6\n    '''\n) == '1'\n\nassert solution(\n    '''\n    6\n    5 9\n    1 3\n    4 8\n    4 5\n    23 54\n    12 32\n    '''\n) == '0'\n"
    },
    {
        "number": 1240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n6 5\\n5 6\") == \"1\"\nassert solution(\"6\\n5 9\\n1 3\\n4 8\\n4 5\\n23 54\\n12 32\") == \"0\"\n\"\"\""
    },
    {
        "number": 1240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5 6\\n8 9\\n10 3\\n\") == \"3\"\nassert solution(\"2\\n6 5\\n5 6\\n\") == \"1\"\nassert solution(\"6\\n5 9\\n1 3\\n4 8\\n4 5\\n23 54\\n12 32\\n\") == \"0\"\n"
    },
    {
        "number": 1240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n5 6\\n8 9\\n10 3\") == \"3\"\nassert solution(\"2\\n6 5\\n5 6\") == \"1\"\nassert solution(\"6\\n5 9\\n1 3\\n4 8\\n4 5\\n23 54\\n12 32\") == \"0\"\nprint(\"Test finished.\")"
    },
    {
        "number": 1240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n8 9\") == 3\nassert solution(\"5 9\\n1 3\") == 1\nassert solution(\"6 5\\n5 6\") == 1\nassert solution(\"6 9\\n1 3\") == 0\nassert solution(\"6 5\\n5 6\\n23 54\\n12 32\") == 0\n"
    },
    {
        "number": 1240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5 6\\n8 9\\n10 3\\n\") == \"3\"\nassert solution(\"6\\n5 9\\n1 3\\n4 8\\n4 5\\n23 54\\n12 32\\n\") == \"0\"\nassert solution(\"2\\n6 5\\n5 6\\n\") == \"1\"\n"
    },
    {
        "number": 1240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5 6\\n8 9\\n10 3\") == '3\\n'\nassert solution(\"2\\n6 5\\n5 6\") == '1\\n'\nassert solution(\"6\\n5 9\\n1 3\\n4 8\\n4 5\\n23 54\\n12 32\") == '0\\n'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 1240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 5 9 1 3 4 8 4 5 23 54 12 32') == '0'\nassert solution('6 9 5 1 3 4 8 4 5 23 54 12 32') == '1'\n\"\"\"\n"
    },
    {
        "number": 1240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5 6\\n8 9\\n10 3\") == \"3\"\nassert solution(\"2\\n6 5\\n5 6\") == \"1\"\nassert solution(\"6\\n5 9\\n1 3\\n4 8\\n4 5\\n23 54\\n12 32\") == \"0\""
    },
    {
        "number": 1241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 1\\n1 0 0 1 1 0 1\\n') == '4'\n"
    },
    {
        "number": 1241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1') == '1 0 0 1 1 1 1'\n"
    },
    {
        "number": 1241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 0 0 1 0 1') == '4\\n1 1 1 1 1 1'\nassert solution('6 3\\n1 0 0 1 0 1 0 1') == '4\\n1 1 1 1 1 1 1'\nassert solution('3 1\\n1 0 0') == '3\\n1 1 1'\nassert solution('1 1\\n0') == '1\\n1'\nassert solution('7 1\\n1 0 0 1 0 1 0 1') == '6\\n1 0 0 1 1 1 1 1'\n"
    },
    {
        "number": 1241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 1\\n1 0 0 1 1 0 1\\n\") == \"4\\n1 0 0 1 1 1 1\""
    },
    {
        "number": 1241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 1\\n1 0 0 1 1 0 1\\n\") == \"4\"\n\"\"\"\n\n\n\"\"\"\nYou are given an array of positive integers a.\n\nThe array is sorted in non-decreasing order. Let's denote the length of the longest consecutive elements sequence as f(a)\n\nYou are allowed to change no more than k elements of the array to make them strictly non-decreasing.\n\nFor example, you can change the value of a[0] to 1, if a[0] = 0, in order to make the array non-decreasing.\n\nYour task is to find the maximal value of f(a) after no more than k operations.\n\nWrite a function:"
    },
    {
        "number": 1241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 1\\n1 0 0 1 1 0 1\") == '4\\n1 0 0 1 1 1 1 1'\nassert solution(\"10 2\\n1 0 0 1 0 1 0 1 0 1\") == '5\\n1 0 0 1 1 1 1 1 1 1'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 1241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 1\\n1 0 0 1 1 0 1') == '4\\n1 0 0 1 1 1 1 1'\nassert solution('10 2\\n1 0 0 1 0 1 0 1 0 1') == '5\\n1 0 0 1 1 1 1 1 1'\n"
    },
    {
        "number": 1241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\\n1 0 0 1 0 1 0 1 0 1\") == \"5\\n1 0 0 1 1 1 1 1 0 1\"\n"
    },
    {
        "number": 1241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2\\n1 0 0 1 0 1 0 1 0 1\\n\") == \"5\\n1 0 0 1 1 1 1 1 0 1\"\n\"\"\""
    },
    {
        "number": 1241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 1\\n1 0 0 1 1 0 1\\n\") == \"4\\n1 0 0 1 1 1 1 1\\n\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 1242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaaaa') == '1 0 0 0 1'\n\"\"\""
    },
    {
        "number": 1242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abab\") == \"0 1 1 0\"\n\"\"\"\n"
    },
    {
        "number": 1242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abbbb') == '0 1 1 0 1'\nassert solution('a') == '1 0 0 0 1'\nassert solution('ba') == '1 0 0 1 1'\nassert solution('ab') == '0 1 1 0 1'\nassert solution('b') == '0 1 1 0 1'\n"
    },
    {
        "number": 1242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bbab') == '0 1 1 0'\nassert solution('aaaaa') == '1 0 0 0 1'\n"
    },
    {
        "number": 1242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbb') == 'abbb'\nassert solution('a') == 'a'\nassert solution('abbb') == 'abbb'\nassert solution('aabb') == 'baba'\nassert solution('bb') == 'bb'\n"
    },
    {
        "number": 1242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcb\") == \"0 1 1 1 0\""
    },
    {
        "number": 1242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bbab\") == \"0 1 1 0\"\nassert solution(\"aaaaa\") == \"1 0 0 0 1\"\n"
    },
    {
        "number": 1242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('bbab') == '0 1 1 0'\nassert solution('aaaaa') == '1 0 0 0 1'\nassert solution('cbd') == '0 0 1 0'\nassert solution('abc') == '0 0 0 1'\nassert solution('acb') == '0 1 1 0'\n"
    },
    {
        "number": 1242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ab') == '0 1'\nassert solution('abb') == '0 1 1'\nassert solution('aabb') == '0 1 1 1'\nassert solution('abc') == '0 0 1 2'\nassert solution('aabbc') == '0 0 1 1 1 2'\n"
    },
    {
        "number": 1242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bbab\") == \"0 1 1 0\"\nassert solution(\"aaaaa\") == \"1 0 0 0 1\"\n\"\"\""
    },
    {
        "number": 1243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 6 2 5 3 7') == '12'\n"
    },
    {
        "number": 1243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 4 5 7\") == \"12\"\n\"\"\"\nimport sys"
    },
    {
        "number": 1243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 6 2 5 3 7\") == \"12\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 6 2 5 3 7') == '12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 6 2 5 3 7\\n\") == 12\n\"\"\"\n"
    },
    {
        "number": 1243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 6 2 5 3 7\") == \"12\"\n\n\"\"\""
    },
    {
        "number": 1243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 2 3 4') == '12'\nassert solution('6 1 5 3 7') == '12'\nassert solution('1 6 2 5 3') == '12'\nassert solution('2 6 1 5 3') == '12'\nassert solution('1 6 2 5 3') == '12'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 1243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6 2 5 3\") == \"12\"\n"
    },
    {
        "number": 1243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 6 2 5 3 7\\n') == 12\n\"\"\"\n"
    },
    {
        "number": 1243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 1 2 5 3 7') == 12\n\"\"\"\n\nn = int(input())\nm = list(map(int, input().split(' ')))\n\nprint(m.index(max(m)) + 1)\n"
    },
    {
        "number": 1244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\\n2\") == \"YES\"\nassert solution(\"3\\n7 7 7 7\") == \"NO\"\n"
    },
    {
        "number": 1244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 2 3 4\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"YES\"\nassert solution(\"4\\n7 7 7 7\") == \"NO\"\n\"\"\""
    },
    {
        "number": 1244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n1\\n') == 'YES'\nassert solution('3\\n1 1 2\\n') == 'YES'\nassert solution('4\\n7 7 7 7\\n') == 'NO'\n"
    },
    {
        "number": 1244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n7 7 7 7\") == \"NO\"\nassert solution(\"1\\n1\") == \"YES\"\nassert solution(\"1\\n2\") == \"YES\"\nassert solution(\"1\\n2\\n3\") == \"YES\"\nassert solution(\"1\\n2\\n3\\n4\") == \"YES\"\n"
    },
    {
        "number": 1244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1 2''') == 'YES'\nassert solution('''4\n1 1 2''') == 'YES'\nassert solution('''4\n1 1 2\n''') == 'NO'\n"
    },
    {
        "number": 1244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 1 2''') == \"YES\"\nassert solution('''4\n7 7 7 7''') == \"NO\"\nassert solution('''3\n1 2 1''') == \"NO\"\nassert solution('''4\n2 2 2 2''') == \"YES\"\nassert solution('''2\n1 1''') == \"YES\""
    },
    {
        "number": 1244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1\\n2\") == \"YES\"\nassert solution(\"3\\n1 1 2\\n\") == \"YES\"\nassert solution(\"4\\n7 7 7 7\\n\") == \"NO\"\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 1244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1\\n2\\n\") == \"YES\"\nassert solution(\"3\\n1 1 2\\n\") == \"YES\"\nassert solution(\"4\\n7 7 7 7\\n\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n7 7 7 7\") == 'NO'\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 1244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n2\\n') == 'YES'\nassert solution('1\\n1\\n2\\n') == 'YES'\nassert solution('1\\n1\\n2\\n') == 'YES'\nassert solution('1\\n1\\n2\\n') == 'YES'\nassert solution('1\\n1\\n2\\n') == 'YES'\n"
    },
    {
        "number": 1245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1\\n1 1\\n1 1\\n1 1\") == \"()()()()\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 1245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n2 2\\n1 1\\n1 1\") == \"(())\"\nassert solution(\"5 5\\n3 3\\n2 2\\n1 1\\n1 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 1245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1\\n1 1\\n1 1\\n1 1\") == \"()()()()\"\nassert solution(\"3\\n5 5\\n3 3\\n1 1\\n\") == \"((()))\"\nassert solution(\"3\\n5 5\\n3 3\\n2 2\\n\") == \"IMPOSSIBLE\""
    },
    {
        "number": 1245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 2 2\") == \"IMPOSSIBLE\"\nassert solution(\"3 3 1 2\") == \"(())\"\nassert solution(\"5 5 1 2\") == \"IMPOSSIBLE\"\nassert solution(\"1 1 2\") == \"(())\"\nassert solution(\"2 3 1 4\") == \"(())\"\n"
    },
    {
        "number": 1245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1\\n1 1\\n1 1\\n1 1\") == \"(()()()())\"\nassert solution(\"3\\n5 5\\n3 3\\n1 1\") == \"IMPOSSIBLE\"\nassert solution(\"3\\n5 5\\n3 3\\n2 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 1245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5 5\\n3 3\\n1 1\\n') == '(())()'\nassert solution('3\\n5 5\\n3 3\\n2 2\\n') == 'IMPOSSIBLE'\nassert solution('3\\n5 5\\n3 3\\n2 2\\n') == 'IMPOSSIBLE'\nassert solution('3\\n5 5\\n3 3\\n2 2\\n') == 'IMPOSSIBLE'\n\n\"\"\"\n\n\n\"\"\"\nThe first line contains integer n (1 \u2264 n \u2264 600), the number of opening brackets in Arthur's favorite correct bracket sequence.\n\nNext n lines contain numbers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} < 2n), representing the segment where lies the distance from the i-th opening bracket and the corresponding closing one. \n\nThe descriptions of the segments are given in the order in which the opening brackets occur in Arthur's favorite sequence if we list them from left to right.\n\n\"\"\"\n\n\n\"\"\"\n\nTo check if the brackets are valid, we start with the left-most pair and work our way right, keeping track of the min and max distance between left and right brackets. \n\nIf there is no overlap between them, the brackets are valid. If there is an overlap, we know that there is a bracket before our current left bracket, and it must be one of the left bracket or we will have a double (the left bracket cannot be the latter).\n\nTo compute the overlap, we need to consider the max of the min and min of the max, and substract the current right bracket index from the previous left bracket.\n\nIf the new left bracket is greater than the previous right bracket, there cannot be a right bracket before the left bracket and the brackets are valid. If the new left bracket is less than the previous right bracket, then there must be a right bracket before the left bracket.\n\nIf the new left bracket is equal to the previous right bracket, then we have a valid sequence but it is not the first bracket we encounter. The first bracket must be on the left.\n\nNote that we have to remember both the left and right most positions for each bracket.\n\nThe loop below loops through the list of left brackets and applies the logic described above. The result is the final list of valid brackets.\n\"\"\"\n\nimport sys\n\nleft_brackets = []\nright_brackets = []"
    },
    {
        "number": 1245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1\\n1 1\\n1 1\\n1 1\") == \"()()()()\"\nassert solution(\"3\\n5 5\\n3 3\\n1 1\") == \"IMPOSSIBLE\""
    },
    {
        "number": 1245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1\\n1 1\\n1 1\\n1 1\\n\") == \"()()()()\"\nassert solution(\"3\\n5 5\\n3 3\\n1 1\\n\") == \"((()))\"\nassert solution(\"3\\n5 5\\n3 3\\n2 2\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 1245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1\\n1 1\\n1 1\\n1 1\") == \"()()()()\"\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 1245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1\\n1 1\\n1 1\\n1 1\") == \"()()()()\"\nassert solution(\"3\\n5 5\\n3 3\\n1 1\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 1246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4\\n') == '4'\nassert solution('1\\n1\\n') == '2'\nassert solution('2\\n1\\n') == '2'\nassert solution('1\\n2\\n') == '3'\nassert solution('2\\n2\\n') == '3'\n"
    },
    {
        "number": 1246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\ninsert 3\\ngetMin 4\\n\") == \"4\\ninsert 3\\nremoveMin\\ninsert 4\\ngetMin 4\"\nassert solution(\"4\\ninsert 1\\ninsert 1\\nremoveMin\\ngetMin 2\\n\") == \"6\\ninsert 1\\ninsert 1\\nremoveMin\\nremoveMin\\ninsert 2\\ngetMin 2\"\n"
    },
    {
        "number": 1246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\ninsert 3\ngetMin 4\n''') == '4\ninsert 3\nremoveMin\ninsert 4\ngetMin 4'\n\nassert solution('''4\ninsert 1\ninsert 1\nremoveMin\ngetMin 2\n''') == '6\ninsert 1\ninsert 1\nremoveMin\nremoveMin\ninsert 2\ngetMin 2'\n\nassert solution('''4\ninsert 1\ninsert 1\ngetMin 2\ninsert 2\ninsert 2\nremoveMin\nremoveMin\ngetMin 2\n''') == '10\ninsert 1\ninsert 1\nremoveMin\nremoveMin\ninsert 2\ninsert 2\ninsert 2\ninsert 2\ninsert 2\ninsert 2\ninsert 2\nremoveMin\nremoveMin\ngetMin 2'\n\nassert solution('''4\ninsert 1\ninsert 1\ngetMin 2\nremoveMin\n''') == '12\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\nremoveMin\nremoveMin\ngetMin 2'\n\nassert solution('''4\ninsert 1\ninsert 1\ngetMin 2\nremoveMin\ninsert 1\nremoveMin\n''') == '14\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\ninsert 1\nremoveMin\nremoveMin\ngetMin 2'"
    },
    {
        "number": 1246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\ninsert 1\\ninsert 2\\ngetMin 2\\nremoveMin\\ninsert 1\\ninsert 1\\nremoveMin\\ngetMin 2\\nremoveMin\\ninsert 1\\ninsert 1\\nremoveMin\\ngetMin 2\\nremoveMin\\ninsert 2\\ngetMin 2\\nremoveMin\\n\") == \"6\\ninsert 1\\ninsert 2\\ninsert 1\\ninsert 1\\ninsert 2\\ninsert 2\\nremoveMin\\nremoveMin\\nremoveMin\\nremoveMin\\ngetMin 2\\nremoveMin\\ngetMin 2\\nremoveMin\\nremoveMin\\nremoveMin\\nremoveMin\\nremoveMin\\nremoveMin\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1\\ninsert 1"
    },
    {
        "number": 1246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\ninsert 1\\ninsert 1\\nremoveMin\\ngetMin 2\\n\") == \"6\"\nassert solution(\"4\\ninsert 1\\ninsert 1\\nremoveMin\\ngetMin 2\\n\") == \"6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n' \\\n                 'insert 3\\n' \\\n                 'insert 4\\n' \\\n                'removeMin\\n' \\\n                 'insert 4\\n' \\\n                 'getMin\\n') == '7\\n'\nassert solution('9\\n' \\\n                 'insert 1\\n' \\\n                 'insert 2\\n' \\\n                 'insert 2\\n' \\\n                 'insert 2\\n' \\\n                 'insert 2\\n' \\\n                 'insert 2\\n' \\\n                'removeMin\\n' \\\n                'removeMin\\n' \\\n                 'getMin\\n') == '8\\n'\nassert solution('2\\n' \\\n                 'insert 1\\n' \\\n                 'insert 1\\n' \\\n                'removeMin\\n' \\\n                 'getMin\\n') == '3\\n'\nassert solution('4\\n' \\\n                 'insert 1\\n' \\\n                 'insert 1\\n' \\\n                'removeMin\\n' \\\n                 'getMin\\n') == '4\\n'\nassert solution('6\\n' \\\n                 'insert 1\\n' \\\n                 'insert 1\\n' \\\n                'removeMin\\n' \\\n                 'insert 2\\n' \\\n                 'getMin\\n') == '6\\n'\n"
    },
    {
        "number": 1246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\ninsert 0\\ninsert 1\\ninsert -1\\ngetMin\\nremoveMin\\ninsert 2\\ninsert 3\\ninsert -2\\ngetMin\\ninsert -1\\ngetMin\\nremoveMin\\ninsert 0\\ninsert -2\\ngetMin\\nremoveMin\\ninsert 1\\ninsert -1\\ngetMin\\ninsert 0\\ngetMin\\ngetMin\\ninsert -3\\ngetMin\\ngetMin\\nremoveMin\\ninsert -4\\ngetMin\\nremoveMin\\ninsert 3\\ninsert 4\\ngetMin\\nremoveMin\\ninsert -5\\ngetMin\\ngetMin\\ngetMin\\nremoveMin\\ninsert -6\\ngetMin\\ngetMin\\nremoveMin\\ngetMin\\ngetMin\\ngetMin\\nremoveMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\ngetMin\\nget"
    },
    {
        "number": 1246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\ninsert 1\\ninsert 2\\ninsert 3\\ninsert 4\\ninsert 5\\ngetMin\\nremoveMin\\ngetMin\") == \"8\\n1\\n2\\n4\\n4\\n4\"\nassert solution(\"5\\ninsert 1\\ninsert 2\\ninsert 3\\ninsert 4\\ngetMin\\ngetMin\") == \"6\\n1\\n1\\n4\\n4\"\nassert solution(\"5\\ninsert 1\\ninsert 2\\ninsert 3\\ninsert 4\\ninsert 5\\ngetMin\\ninsert 6\\ngetMin\\nremoveMin\\ngetMin\\ngetMin\") == \"8\\n1\\n2\\n4\\n4\\n6\\n6\\n6\"\nassert solution(\"4\\ninsert 1\\ninsert 2\\nremoveMin\\ninsert 3\\ngetMin\\ninsert 4\\ngetMin\\nremoveMin\\ninsert 5\\ninsert 6\\nremoveMin\\ngetMin\\ngetMin\") == \"7\\n1\\n2\\n3\\n6\\n6\\n6\"\n\n\"\"\"\n\nfrom collections import Counter\nimport heapq\n\nn = int(input())\nlog = [input().split() for _ in range(n)]\ncount = Counter()\nfor op in log:\n    if op[0] == \"insert\":\n        count[int(op[1])] += 1\n    elif op[0] == \"getMin\":\n        count[heapq.heappop(count.keys()) if count else 0] -= 1\nprint(sum(count.values()))\n"
    },
    {
        "number": 1246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\ninsert 1\\ninsert 1\\ngetMin\\nremoveMin\\ninsert 2\\ninsert 2\\ngetMin\") == \"5\\nremoveMin\\ninsert 2\\ninsert 2\\ngetMin\\n\"\nassert solution(\"3\\ninsert 1\\ninsert 1\\ngetMin\\nremoveMin\\ninsert 2\\ninsert 2\\ngetMin\") == \"5\\nremoveMin\\ninsert 2\\ninsert 2\\ngetMin\\n\"\n\n---\n\nimport heapq"
    },
    {
        "number": 1246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nimport heapq\n\nn = int(stdin.readline())\nh = []\n\nfor _ in range(n):\n    op = stdin.readline().split()\n    if op[0] == 'insert':\n        heapq.heappush(h, int(op[1]))\n    elif op[0] == 'getMin':\n        print(h[0] if h else '0')\n    elif op[0] =='removeMin':\n        heapq.heappop(h)\n"
    },
    {
        "number": 1247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abba\") == \"First\"\nassert solution(\"abca\") == \"Second\"\n\"\"\"\n"
    },
    {
        "number": 1247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"First\"\nassert solution(\"abca\") == \"Second\"\nassert solution(\"aabbcba\") == \"First\"\nassert solution(\"abcba\") == \"Second\"\nassert solution(\"abccba\") == \"Second\""
    },
    {
        "number": 1247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abba') == 'First'\nassert solution('abc') == 'Second'\nassert solution('aba') == 'First'\nassert solution('a') == 'First'\nassert solution('aa') == 'Second'\n"
    },
    {
        "number": 1247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == 'First'\nassert solution(\"abca\") == 'Second'\n\"\"\"\n"
    },
    {
        "number": 1247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == \"First\"\nassert solution(input()) == \"Second\"\n"
    },
    {
        "number": 1247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abba') == 'First'\nassert solution('abc') == 'Second'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"First\"\nassert solution(\"abca\") == \"Second\"\n"
    },
    {
        "number": 1247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"First\"\nassert solution(\"abca\") == \"Second\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba') == 'First'\nassert solution('abca') == 'Second'\nassert solution('abac') == 'First'\nassert solution('abc') == 'Second'\nassert solution('abbc') == 'Second'\n\nprint('All tests passed.')\n\n\"\"\"\n"
    },
    {
        "number": 1247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'First'\nassert solution('abca') == 'Second'\nassert solution('abba') == 'First'\n\"\"\"\n"
    },
    {
        "number": 1248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 20 30') == '60'\n\"\"\"\n\nimport sys\n\nn = list(map(int, sys.stdin.readline().strip().split()))\n\ntotal = n[0] + n[2]\n\nprint(total if total < n[1] else n[1])\n"
    },
    {
        "number": 1248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 20 30') == '60'\n\n\"\"\""
    },
    {
        "number": 1248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 20 30\") == \"60\"\nassert solution(\"1 1 5\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 1248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 20 30\") == \"60\"\nassert solution(\"1 1 5\") == \"4\"\nassert solution(\"1 10 20\") == \"11\"\n\n\"\"\"\n\nimport sys\n\na, b, c = map(int, sys.stdin.readline().split())\n"
    },
    {
        "number": 1248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 20 30\") == \"60\"\nassert solution(\"1 1 5\") == \"4\"\n"
    },
    {
        "number": 1248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 20 30\") == \"60\"\nassert solution(\"1 1 5\") == \"4\"\n"
    },
    {
        "number": 1248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 20 30\") == \"60\"\nassert solution(\"1 1 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 1248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 20 30') == '60'\nassert solution('1 1 5') == '4'\nassert solution('1 2 3') == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 1248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 20 30\") == \"60\"\nassert solution(\"1 1 5\") == \"4\"\n\"\"\"\n\nfrom math import inf\n\nfrom input_parser import read_single_line"
    },
    {
        "number": 1248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 20 30') == '60'\nassert solution('1 1 5') == '4'\n\"\"\"\n"
    },
    {
        "number": 1249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 2 2\\n1 2 3 3 2 1 2\\n2 2\\n\") == \"1\\n4\\n\"\nassert solution(\"13 4 1 3\\n3 2 6 4 1 4 4 7 1 3 3 2 4\\n4 3 4\\n\") == \"-1\\n1 2 3 4 5 9 11 12 13\\n\"\nassert solution(\"13 4 1 3\\n3 2 6 4 1 4 4 7 1 3 3 2 4\\n4 3 4\\n\") == \"9\\n1 2 3 4 5 9 11 12 13\\n\""
    },
    {
        "number": 1249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2 3') == '1 2 3'\nassert solution('3 1 2') == '1 2 3'\nassert solution('3 1 2 3 4') == '2 3 4 1 2'\n"
    },
    {
        "number": 1249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n7 3 2 2\n1 2 3 3 2 1 2\n2 2\n\"\"\") == '1\\n4\\n'\nassert solution(\"\"\"\n13 4 1 3\n3 2 6 4 1 4 4 7 1 3 3 2 4\n4 3 4\n\"\"\") == '-1\\n9\\n1 2 3 4 5 9 11 12 13\\n'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 1249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2 2\\n1 2 3 3 2 1 2\\n2 2\\n\") == \"1\\n4\"\nassert solution(\"13 4 1 3\\n3 2 6 4 1 4 4 7 1 3 3 2 4\\n4 3 4\\n\") == \"9\\n1 2 3 4 5 9 11 12 13\"\n"
    },
    {
        "number": 1249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 3 2 1 2\\n2 2\\n4 3 4\") == '1\\n4'\nassert solution(\"7 3 2 2\\n3 2 6 4 1 4 4 7 1 3 3 2 4\\n4 3 4\\n\") == '-1'\nassert solution(\"13 4 3 3\\n3 2 6 4 1 4 4 7 1 3 3 2 4\\n4 3 4\\n\") == '9\\n1 2 3 4 5 9 11 12 13'\n\n----\n\nSample Tests:\n\nInput:\n7 3 2 2\n1 2 3 3 2 1 2\n2 2\n\nOutput:\n1\n4\n\n\nInput:\n13 4 1 3\n3 2 6 4 1 4 4 7 1 3 3 2 4\n4 3 4\n\nOutput:\n-1\n\n\nInput:\n1 1 1\n1\n\nOutput:\n1\n\n\nInput:\n7 3 2 2\n3 2 6 4 1 4 4 7 1 3 3 2 4\n4 3 4\n\nOutput:\n-1\n\nInput:\n9 7 6 5\n3 5 4 6 2 1 7 3 4 1\n4 3 4\n\nOutput:\n9\n1 2 3 4 5 9 11 12 13\n\n\nInput:\n9 7 6 5\n3 5 4 6 2 1 7 3 4 1\n6 2\n\nOutput:\n5\n1 2 3 4 5 9 11 12 13\n\n\nInput:\n9 7 6 5\n3 5 4 6 2 1 7 3 4 1\n4 3 4\n\nOutput:\n9\n1 2 3 4 5 9 11 12 13\n\n\nInput:\n9 7 6 5\n3 5 4 6 2 1 7 3 4 1\n3 1\n\nOutput:\n9\n1 2 3 4 5 9 11 12 13\n\n\nInput:\n9 7 6 5\n3 5 4 6 2 1 7 3 4 1\n3 1\n\nOutput:\n9\n1 2 3 4 5 9 11 12 13\n\n\nInput:\n9 7 6 5\n3 5 4 6 2 1 7 3 4 1\n3 2\n\nOutput:\n5\n1 2 3 4 5 9 11 12 13\n\n\nInput:\n9 7 6 5\n3 5 4 6 2 1 7 3 4 1\n4 3 4\n\nOutput:\n9\n1 2 3 4 5 9 11 12 13\n\nExplanation:\n\nIn the first example Diana removed only one flower from the first line.\n\nIn the second example the machine would have output the only workpiece with types [1, 2, 3].\n\nIn the third example the machine would have output the only workpiece with types [1, 2, 3, 4, 5, 9, 11, 12, 13].\n\nIn the fourth example Diana would have removed the flowers on positions 1, 2, 3, 4 and have output workpieces with types [1, 2, 3, 4, 5, 9, 11, 12, 13].\n\nIn the fifth example if you remove the flower on position 9, the machine would have output workpieces [1, 2, 3, 4, 5, 6, 7, 8, 9] and the last workpiece would have types [7, 6, 5, 4, 3, 2, 1, 1, 2].\n\nIn the sixth example if you remove the flower on position 9, the machine would have output workpieces [1, 2, 3, 4, 5, 6, 7, 8, 9] and the last workpiece would have types [7, 6, 5, 4, 3, 2, 1, 1, 2].\n\nIn the seventh example the machine would have output workpieces [1, 2, 3, 4, 5, 6, 7, 8, 9] and the last workpiece would have types [7, 6, 5, 4, 3, 2, 1, 1, 2].\n\nIn the eighth example if you remove the flower on position 9, the machine would have output workpieces [1, 2, 3, 4, 5, 6, 7, 8, 9] and the last workpiece would have types [7, 6, 5, 4, 3, 2, 1, 1, 2].\n\nIn the ninth example the machine would have output workpieces [1, 2, 3, 4, 5, 6, 7, 8, 9] and the last workpiece would have types [7, 6, 5, 4, 3, 2, 1, 1, 2].\n\nIn the tenth example if you remove the flower on position 9, the machine would have output workpieces [1, 2,"
    },
    {
        "number": 1249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 2 2\\n1 2 3 3 2 1 2\\n2 2\") == \"1\\n4\"\nassert solution(\"13 4 3 3\\n3 2 6 4 1 4 4 7 1 3 3 2 4\\n4 3 4\") == \"-1\"\nassert solution(\"13 4 1 3\\n3 2 6 4 1 4 4 7 1 3 3 2 4\\n4 3 4\") == \"9\\n1 2 3 4 5 9 11 12 13\"\n"
    },
    {
        "number": 1249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3 2 2\\n1 2 3 3 2 1 2\\n2 2') == '1\\n4'\nassert solution('13 4 1 3\\n3 2 6 4 1 4 4 7 1 3 3 2 4\\n4 3 4') == '-1'\nassert solution('13 4 1 3\\n3 2 6 4 1 4 4 7 1 3 3 2 4\\n4 3 4') == '9\\n1 2 3 4 5 9 11 12 13'\n\n\"\"\""
    },
    {
        "number": 1249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 2 2\\n1 2 3 3 2 1 2\\n2 2\") == \"1\\n4\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 1249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open(r\"D:\\Projects\\AdventOfCode2020\\day_3\\input_test_1.txt\").read()) == '1\\n[4]\\n'\nassert solution(open(r\"D:\\Projects\\AdventOfCode2020\\day_3\\input_test_2.txt\").read()) == '-1\\n'\nassert solution(open(r\"D:\\Projects\\AdventOfCode2020\\day_3\\input_test_3.txt\").read()) == '-1\\n'\nassert solution(open(r\"D:\\Projects\\AdventOfCode2020\\day_3\\input_test_4.txt\").read()) == '1\\n[4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 7"
    },
    {
        "number": 1249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3 2 2\\n1 2 3 3 2 1 2\\n2 2') == '1\\n4'\nassert solution('13 4 3 3\\n3 2 6 4 1 4 4 7 1 3 3 2 4') == '-1'\nassert solution('13 4 1 3\\n3 2 6 4 1 4 4 7 1 3 3 2 4') == '9\\n1 2 3 4 5 9 11 12 13'\n\n\"\"\"\n\nimport sys\nimport itertools\n\nm, k, n, s = [int(x) for x in sys.stdin.readline().split()]\nseq = [int(x) for x in sys.stdin.readline().split()]\nseq = list(itertools.chain(*zip(*itertools.groupby(seq, lambda x: x))))\n\nwreath_size = k * n"
    },
    {
        "number": 1250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '1 1'\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 1250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '1 3 2 4'\nassert solution('1') == '1'\nassert solution('2') == '-1'\nassert solution('5') == '-1'\nassert solution('6') == '1 3 5 2 4 6'\n"
    },
    {
        "number": 1250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"1 2 1\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 1250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\nassert solution('4') == '1 2 3 4'\nassert solution('5') == '1 2 3 4 5'\n"
    },
    {
        "number": 1250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 3\") == \"1 2 3 4\"\nassert solution(\"5 3 2 4 1\") == \"1 2 3 4 5\"\nassert solution(\"8 1 6 3 4 5 7\") == \"1 2 3 4 5 6 7 8\"\nassert solution(\"3 1 2\") == \"1 2 3\"\nprint('Example tests passed.')\n"
    },
    {
        "number": 1250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == '1 2'\nassert solution(\"2\") == '1 3'\nassert solution(\"3\") == '1 4'\nassert solution(\"4\") == '1 4'\nassert solution(\"5\") == '1 4'\n"
    },
    {
        "number": 1250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\nassert solution('4') == '1 2 3 4'\nassert solution('5') == '1 2 3 4 5'\n"
    },
    {
        "number": 1250,
        