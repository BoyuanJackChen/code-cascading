[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[a:b:|]\") == \"4\"\nassert solution(\"]:[|:]\") == \"-1\"\nassert solution(\"]:[|]\") == \"3\"\nassert solution(\"[|]\") == \"1\"\nassert solution(\"[|]:[|]\") == \"2\"\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[a:b:|]\") == 4\nassert solution(\"]:[|:\") == -1\nassert solution(\"]:[|:\") == -1\nassert solution(\"]:[|:\") == -1\nassert solution(\"]:[|:\") == -1\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[::]\") == \"4\"\nassert solution(\"[:||:]\") == \"6\"\nassert solution(\"[:|||:]\") == \"7\"\nassert solution(\"[:||:|:]\") == \"-1\"\nassert solution(\"[:::]\") == \"0\"\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"][][\") == -1\nassert solution(\"[::]\") == 4\nassert solution(\"[:||:]\") == 6\nassert solution(\"[:|||:]\") == 7\nassert solution(\"[:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:]["
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[a:b:|]\") == 4\nassert solution(\"[a:b:|]\") == 4\nassert solution(\"[a:b:|]\") == 4\nassert solution(\"[a:b:|]\") == 4\nassert solution(\"[a:b:|]\") == 4\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"][[\") == -1\nassert solution(\"]][|:|]\") == 3\nassert solution(\"[]][[[[[[\"]) == -1\nassert solution
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(':|:|:|:|:') == '-1'\nassert solution('[]') == '-1'\nassert solution(':|:') == '3'\nassert solution(':||:') == '2'\nassert solution(':|||:') == '1'\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('[:|:]:|:') == 4\nassert solution('[:|:]:|:][::]') == -1\nassert solution('[:|:][::|:][|:][:|:][:|:][|:][:|:][|:][:|:][|:][:|:][|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:][:|:]["
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[a:b:]\" == 4)\nassert solution(\"]:[|:\" == -1)\nassert solution(\"]:[|:\" == -1)\nassert solution(\"|\" == 1)\nassert solution(\"|][\" == -1)\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[a:b:|]\") == 4\nassert solution(\"]:[|:\") == -1\nassert solution(\"[|:]:[|:]\") == -1\n\n\"\"\""
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"48\") == \"48\"\nassert solution(\"521\") == \"499\"\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"521\") == \"499\"\nassert solution(\"48\") == \"48\"\nassert solution(\"100\") == \"99\"\nassert solution(\"521\") == \"499\"\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('521') == '499'\n\"\"\"\n\nfrom typing import List\n\nx = int(input())\n\nlst = list(range(1, x + 1))\nlst_max = []\n\nfor i in lst:\n    sum_i = 0\n    for j in str(i):\n        sum_i += int(j)\n    lst_max.append(sum_i)\n\nlst_max_sort = sorted(lst_max)\n\nfor i in range(len(lst_max)):\n    if lst_max[i] == lst_max_sort[-1]:\n        print(lst[i])\n        break\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"48\") == \"48\"\nassert solution(\"521\") == \"499\"\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100') == '99'\nassert solution('48') == '48'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(7)) == \"7\"\nassert solution(str(89)) == \"89\"\nassert solution(str(1)) == \"1\"\nassert solution(str(1234)) == \"1234\"\nassert solution(str(1123)) == \"1121\"\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"48\") == \"48\"\nassert solution(\"521\") == \"499\"\n\"\"\""
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"48\") == \"48\"\n\"\"\"\n\nfrom tools import timing\n\nfrom sys import stdin\n\n@timing\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(100) == 99\nassert solution(48) == 48\nassert solution(521) == 499\n\n\"\"\""
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('521') == '499'\nassert solution('100') == '99'\nassert solution('48') == '48'\n\"\"\"\n\nfrom math import floor\nfrom collections import deque\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\"\"\"\nimport sys"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 4\nassert solution(\"3\") == 2\nassert solution(\"5\") == 2\nassert solution(\"100\") == 99\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"200\") == \"99\"\nassert solution(\"4000\") == \"1000\"\n\"\"\""
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == '1'\nassert solution(\"12\") == '3'\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '1'\nassert solution('201') == '99'\nassert solution('4000') == '1000'\n\n'''"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\\n\") == \"7\"\nassert solution(\"4 3\\n1 1\\n2 2\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\"4 4\\n1 1\\n2 2\\n2 3\\n3 4\\n\") == \"3\""
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\") == \"7\"\nassert solution(\"4 3\\n1 1\\n2 2\\n2 3\\n3 4\") == \"2\"\nassert solution(\"4 4\\n1 1\\n2 2\\n2 3\\n3 4\") == \"3\"\n\"\"\"\n\nfrom typing import List, Optional"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n1 2\\n1 3\\n1 4\\n2 4\\n3 4\\n3 5\\n4 5\\n5 5\") == \"7\"\nassert solution(\"6 3\\n1 2\\n1 3\\n1 4\\n2 5\\n3 6\\n4 6\\n5 6\") == \"5\"\nassert solution(\"5 4\\n1 2\\n1 3\\n1 4\\n2 5\\n3 5\\n4 5\\n5 5\") == \"5\"\nassert solution(\"5 4\\n1 2\\n1 3\\n1 4\\n2 5\\n3 5\\n4 5\\n5 5\") == \"4\"\n\nprint(\"Success\")"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\nassert solution('1 2\\n4 6') == '4'\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 1\\n2 2\\n2 3\\n3 4') == 2\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''\n7 5\n1 4\n4 5\n5 6\n6 7\n3 5\n'''\n) == '7'\n\nassert solution(\n'''\n4 3\n1 1\n2 2\n2 3\n3 4\n'''\n) == '2'\n\nassert solution(\n'''\n4 4\n1 1\n2 2\n2 3\n3 4\n'''\n) == '3'\n\nprint('test passed')"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5') == '7'\nassert solution('4 3\\n1 1\\n2 2\\n2 3\\n3 4') == '2'\nassert solution('4 4\\n1 1\\n2 2\\n2 3\\n3 4') == '3'"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\") == \"7\"\nassert solution(\"4 3\\n1 1\\n2 2\\n2 3\\n3 4\") == \"2\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"7 5\n1 4\n4 5\n5 6\n6 7\n3 5\"\"\"\n) == \"7\"\n\nassert solution(\n\"\"\"4 3\n1 1\n2 2\n2 3\n3 4\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"4 4\n1 1\n2 2\n2 3\n3 4\"\"\"\n) == \"3\"\n\nprint(\"Well done!\")\n\n\"\"\"\n\u0421\u0443\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438: \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u0430. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u044d\u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0446\u0435\u043d\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 \u0438 \u0435\u0433\u043e \u043e\u0431\u044a\u0435\u043c\u0435.\n\n\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c 2 \u0432\u0438\u0434\u0430 \u043f\u0430\u0440\u0442\u0438\u0438 \u043f\u0438\u0440\u043e\u0436\u043a\u043e\u0432:\n\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 (\u0431\u0435\u0437 \u0441\u0435\u0442\u0435\u0439, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0447\u0430\u0442\u044c), \u0438\u043b\u0438 \u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u041f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 (\u0441 \u0441\u0435\u0442\u044c\u044e \u0438 \u043f\u0435\u0447\u0430\u0442\u044c), \u0438\u043b\u0438 \u041f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u043c\u0435\u0448\u043a\u043e\u043c\n\u0412 \u043e\u0431\u043e\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043f\u0438\u0440\u043e\u0436\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0437\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b:\n\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u043c\u0435\u0448\u043a\u043e\u043c + \u041f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u043c\u0435\u0448\u043a\u043e\u043c\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e + \u041f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e + \u041f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u043c\u0435\u0448\u043a\u043e\u043c\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432 \u0441\u0430\u043c\u044b\u0435 \u0432\u044b\u0433\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0442\u0438\u0438 \u043f\u0438\u0440\u043e\u0436\u043a\u043e\u0432 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u0438\u044f\u0445. \u0421\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043c \u043c\u0435\u0448\u043a\u0430 \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c.\n\n-----Input-----\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0442\u0440\u0438, \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0448\u043a\u0430 \u0437\u0430\u0434\u0430\u043d. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0432\u043e\u0434\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 \u043e\u0434\u043d\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0438 \u043e\u0431\u044a\u0435\u043c \u043c\u0435\u0448\u043a\u0430.\n\n\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430.\n\n-----Output-----\n\n\u0412\u044b\u0432\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u044e\u0431\u043e\u0439. \u0412\u044b\u0432\u043e\u0434 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u043d\u0438\u0436\u0435:\n\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u043c\u0435\u0448\u043a\u043e\u043c\n\u041f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u043c\u0435\u0448\u043a\u043e\u043c\n\u041f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\n-----Examples-----\nInput\n3 9\n\nOutput\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u043c\u0435\u0448\u043a\u043e\u043c\n\u041f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u043c\u0435\u0448\u043a\u043e\u043c\n\u041f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\nInput\n4 8\n\nOutput\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u041f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u041f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u041f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\u0411\u0435\u0441\u043f\u0440\u043e\u0432\u043e\u0434\u043d\u044b\u0435 \u0441 \u0441\u0435\u0442\u044c\u044e\n\n-----Input-----\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4') == 1\nassert solution('4 4') == 2\nassert solution('2 2') == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 23\") == 2\nassert solution(\"01 07\") == 0\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 23\") == \"2\"\nassert solution(\"5 01\") == \"0\"\nassert solution(\"01 07\") == \"0\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 23\") == 2\nassert solution(\"5 01\") == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 23\") == \"2\"\nassert solution(\"5 01\") == \"0\"\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 23\") == \"2\"\nassert solution(\"01 07\") == \"0\"\n\"\"\""
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 23') == 2\n\nprint(solution('11 23'))\n\n\"\"\""
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == 2\n\nassert solution(\"5 23\") == 0\n\nassert solution(\"11 23\") == 2\n\nassert solution(\"12 59\") == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3, 23) == 2\nassert solution(5, 01) == 0\nassert solution(2, 10) == 2\n\nassert solution(5, 01) == 0\nassert solution(2, 10) == 2"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(0) == 0\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 2\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 23') == \"2\"\n\nassert solution('2 06') == \"0\"\n\nassert solution('1 23') == \"2\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3 2 4') == '5'\nassert solution('6 3 1 3') == '1'\nassert solution('5 2 1 5') == '0'\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 2 4\") == 5\nassert solution(\"6 3 1 3\") == 1\nassert solution(\"5 2 1 5\") == 0\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 1 5\") == \"1\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"6 2 1 4\") == \"0\""
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 1 5\\n') == '0'\nassert solution('6 3 1 3\\n') == '1'\nassert solution('6 3 2 4\\n') == '5'\nassert solution('6 3 3 4\\n') == '1'\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 2 4\") == \"5\"\nassert solution(\"6 3 1 3\") == \"1\"\nassert solution(\"5 2 1 5\") == \"0\""
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100''') == '2'\n\nassert solution('''3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100''') == '3'\n\nassert solution('''3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100''') == '-1'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n7 3\") == \"2\"\nassert solution(\"1\\n7 3\\n3 2\") == \"2\"\nassert solution(\"1\\n7 3\\n3 2\\n5 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n') == '2\\n3\\n-1'\nassert solution('3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n') == '2\\n3\\n-1'\nassert solution('3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n') == '2\\n3\\n-1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n\") == \"2\"\nassert solution(\"4 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n\") == \"3\"\nassert solution(\"4 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n\") == \"2\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    3\n    3 10\n    6 3\n    8 2\n    1 4\n    4 10\n    4 1\n    3 2\n    2 6\n    1 100\n    2 15\n    10 11\n    14 100\n    \"\"\"\n) == \"2\\n3\\n-1\"\nassert solution(\n    \"\"\"\n    3\n    3 10\n    6 3\n    8 2\n    1 4\n    4 10\n    4 1\n    3 2\n    2 6\n    1 100\n    2 15\n    10 11\n    14 100\n    \"\"\"\n) == \"2\\n3\\n-1\"\nassert solution(\n    \"\"\"\n    3\n    3 10\n    6 3\n    8 2\n    1 4\n    4 10\n    4 1\n    3 2\n    2 6\n    1 100\n    2 15\n    10 11\n    14 100\n    \"\"\"\n) == \"2\\n3\\n-1\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\") == '2'\nassert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\") == '3'\nassert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\") == '-1'\n\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n\") == \"2\"\nassert solution(\"6 3\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n\") == \"3\"\nassert solution(\"6 3\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n\") == \"3\"\nassert solution(\"6 3\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n\") == \"2\"\nassert solution(\"6 3\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n\") == \"3\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\n6 3\\n2 6\\n1 4\\n4 10\\n4 1\") == 2\n\nassert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\") == 3\n\nassert solution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\") == -1\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\") == \"2\"\nassert solution(\"5 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\") == \"3\"\nassert solution(\"4 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"8 1\") == \"5\"\nprint(\"Test finished.\")\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5,2) == 4\nassert solution(8,1) == 5\n\"\"\"\n\nn, m = input().split()\nn = int(n)\nm = int(m)\nk = 1\nwhile m > 0:\n    k += 1\n    m -= n\nprint(k)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2') == '4'\nassert solution('8 1') == '5'\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2') == '4'\nassert solution('8 1') == '5'\nprint('Success')\n\n\"\"\"\n\nn, m = map(int, stdin.split())\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == '4'\nassert solution('8 1') == '5'\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == 4\n\nassert solution(\"8 1\") == 5\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == 4\n\"\"\"\nimport math\nn, m = [int(x) for x in input().split()]\n\nprint(math.ceil(m / n))"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2') == '4'\nassert solution('8 1') == '5'\nassert solution('9 7') == '6'\n\nprint(solution(input()))\n\n\n-----Explanation-----\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1s 2s 3s\") == \"0\"\nassert solution(\"9m 9m 9m\") == \"0\"\nassert solution(\"3p 9m 2p\") == \"1\"\nassert solution(\"9p 9p 9p\") == \"0\"\nassert solution(\"9m 9m 9m\") == \"0\"\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1m 2m 3m') == '0'\nassert solution('9m 9m 9m') == '0'\nassert solution('3p 9m 2p') == '1'\nassert solution('1p 9m 2p') == '1'\nassert solution('1s 2s 3s') == '0'\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9m 9m 9m\") == 0\nassert solution(\"9m 9m 9m\") == 0\nassert solution(\"3p 9m 2p\") == 1\nassert solution(\"1s 2s 3s\") == 0\nassert solution(\"9m 9m 9m\") == 0\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1m 2m 3m\") == \"0\"\nassert solution(\"9m 9m 9m\") == \"0\"\nassert solution(\"3p 9m 2p\") == \"1\"\nassert solution(\"1s 2s 3s\") == \"0\"\nassert solution(\"2m 1m 2m\") == \"1\"\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1s 2s 3s\") == \"0\"\nassert solution(\"9m 9m 9m\") == \"0\"\nassert solution(\"3p 9m 2p\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1s 2s 3s') == '0'\nassert solution('9m 9m 9m') == '0'\nassert solution('3p 9m 2p') == '1'\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1m 2m 3m\") == 0\nassert solution(\"1m 2m 2p\") == 1\nassert solution(\"9m 9m 9m\") == 0\nassert solution(\"3p 9m 2p\") == 1\n\"\"\"\nimport sys"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9m 9m 9m\") == 0\nassert solution(\"3p 9m 2p\") == 1\n\"\"\"\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9m 9m 9m\") == 0\nassert solution(\"3p 9m 2p\") == 1\nassert solution(\"1s 2s 3s\") == 0\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1m\") == 0\nassert solution(\"1p\") == 1\nassert solution(\"1s\") == 2\nassert solution(\"2m\") == 0\nassert solution(\"2p\") == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2\\n3 1 3 2\\n1 2 2 2\") == \"1\"\nassert solution(\"4\\n3 2\\n3 1 3 2\\n1 0 0 1\") == \"2\"\nassert solution(\"4\\n3 2\\n3 1 3 2\\n1 0 0 0\") == \"-1\""
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 2\\n3 1 3 2\") == '1'\nassert solution(\"3\\n2 2\\n3 1 3 2\") == '1'\nassert solution(\"3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == '2'\nassert solution(\"3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3 2\\n3 1 3 2') == '1'\nassert solution('3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0') == '2'\nassert solution('2\\n2 2\\n2 1 1 1\\n1 2 2 2') == '-1'\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 2\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == \"1\"\nassert solution(\"3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == \"2\"\nassert solution(\"2\\n2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\") == \"-1\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 2\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\\n\") == \"1\"\nassert solution(\"2\\n2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\\n\") == \"-1\"\nassert solution(\"2\\n3 2\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\\n\") == \"1\"\nassert solution(\"2\\n3 2\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\\n\") == \"2\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 2\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == \"1\"\nassert solution(\"3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == \"2\"\nassert solution(\"2\\n2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\") == \"-1\"\nassert solution(\"1\\n1\\n1 1 1 1\") == \"1\"\nassert solution(\"1\\n2\\n2 1 1 1\") == \"2\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n2 2\n1 2 1 1\n1 0 0 0''') == '1'\nassert solution('''2\n3 2\n2 1 1 1\n1 2 2 2\n1 0 0 0''') == '2'\nassert solution('''3\n10 10\n1 2 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0''') == '-1'\nassert solution('''2\n2 2\n2 1 1 1\n1 2 2 2\n1 0 0 0''') == '-1'"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n2 2\n2 1 1 1\n1 2 2 2\n1 0 0 0\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n3 2\n3 1 3 2\n1 2 2 2\n1 0 0 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n10 10\n1 2 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2\n2 2\n2 1 1 1\n1 2 2 2\n1 0 0 0\n\"\"\") == \"-1\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 2\\n3 1 3 2\") == \"1\"\nassert solution(\"3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == \"2\"\nassert solution(\"2\\n2 2\\n2 1 1 1\\n1 2 2 2\") == \"1\"\nassert solution(\"3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == \"1\"\nassert solution(\"3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == \"1\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 2\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == \"1\"\nassert solution(\"3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\") == \"2\"\nassert solution(\"2\\n2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\") == \"1\"\nassert solution(\"2\\n2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\") == \"1\"\nassert solution(\"2\\n2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\") == \"1\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(14) == \"4 4\"\nassert solution(2) == \"0 2\""
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"14\") == \"4 4\"\nassert solution(\"2\") == \"0 2\"\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('14') == '4 4'\nassert solution('2') == '0 2'"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"14\") == \"4 4\"\nassert solution(\"2\") == \"0 2\"\n\nimport re"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"14\") == \"4 4\"\nassert solution(\"2\") == \"0 2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('14') == '4 4'\nassert solution('2') == '0 2'\n\nprint(solution('14'))\nprint(solution('2'))\n\"\"\"\n\nn = int(input().strip())\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"14\") == \"4 4\"\nassert solution(\"2\") == \"0 2\"\n\nimport math"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('14') == '4 4'\nassert solution('2') == '0 2'\nassert solution('314') == '4 4'\nassert solution('315') == '0 2'\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"14\") == \"4 4\"\nassert solution(\"2\") == \"0 2\"\n\nimport sys; input = sys.stdin.readline\n\nn = int(input())"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('14') == '4 4'\nassert solution('2') == '0 2'\nassert solution('111111') == '0 0'\nassert solution('0') == '0 0'\nassert solution('00') == '0 0'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3 12 15') == '39'\n\"\"\"\n\nimport math\n\nn, a, b, p, q = map(int, input().split())\n\nprint(n * (a * p + q) + ((n - 1) * (a * p + q)))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5, 2, 3, 12, 15) == 39\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3 12 15\") == \"39\"\n\"\"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2 3 12 15''') == '39'\nassert solution('''20 2 3 3 5''') == '51'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3 12 15\") == \"39\"\nassert solution(\"20 2 3 3 5\") == \"51\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 3 12 15\\n') == '39'\n\nassert solution('20 2 3 3 5\\n') == '51'\n\nassert solution('5 1 3 3 5\\n') == '15'\n\"\"\"\n\nn, a, b, p, q = map(int, input().split(' '))\n\ns = 0\nfor i in range(1, n + 1):\n    if i % a == 0 or i % b == 0:\n        s += p\n    else:\n        s += q\nprint(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3 12 15\") == '39'\nassert solution(\"20 2 3 3 5\") == '51'\n\"\"\""
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3 12 15\") == \"39\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3 12 15\") == \"39\"\nassert solution(\"20 2 3 3 5\") == \"51\""
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3 12 15\") == \"39\"\nassert solution(\"20 2 3 3 5\") == \"51\"\n\"\"\""
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nGGGG\\n\") == \"7\"\nassert solution(\"4\\nGGGG\\n\") == \"4\"\nassert solution(\"3\\nSSS\\n\") == \"0\"\nassert solution(\"7\\nSSSSSS\\n\") == \"7\"\nassert solution(\"3\\nSSS\\n\") == \"0\"\n\n---"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10GGGGGGGSGG\") == \"7\"\nassert solution(\"SSS\") == \"0\"\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('G') == 'G'\nassert solution('GGGGG') == 'GGGGGG'\nassert solution('SGGGGGG') == 'GGGGGG'\nassert solution('SSSSSSSSSS') == 'SSSSSSSSSS'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10GGGSGGS\") == \"7\"\nassert solution(\"4G\") == \"0\"\n\"\"\""
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4GG\") == \"4\"\nassert solution(\"3SS\") == \"0\"\nassert solution(\"10GGSGGGSGG\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nSSS\") == '0'\nassert solution(\"10\\nGGSGG\") == '7'\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nGGGG\") == \"4\"\nassert solution(\"10\\nGGGSGGGSGG\") == \"7\"\nassert solution(\"3\\nSSS\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10GGG\") == \"7\"\nassert solution(\"11SSS\") == \"0\""
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"GGGSSS\") == 7\nassert solution(\"GGGGG\") == 4\nassert solution(\"SSS\") == 0\nassert solution(\"G\") == 0\nassert solution(\"S\") == 1\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(['GGGG', 'SSSS']) == '4'\nassert solution
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5\\n') == '5\\n1 2 3 4 5\\n'\nassert solution('9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\\n') == '6\\n1 2 9 4 5 3\\n'\nassert solution('3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\\n') == '-1\\n'\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5\") == '5\\n1 2 3 4 5'\nassert solution(\"9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\\n\") == '6\\n1 2 9 4 5 3'\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\\n\") == \"6\\n1 2 9 4 5 3\"\n\n\"\"\"\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1\\n1 4\\n1 5\\n\") == \"5\\n1 2 3 4 5\"\nassert solution(\"3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\\n\") == \"-1\"\nassert solution(\"3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\\n\") == \"6\\n1 2 9 4 5 3\""
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\") == \"5\\n1 2 9 4 5 3\"\n\"\"\"\n\nfrom collections import defaultdict\n\nn, m = map(int, input().split())\n\ncourses = list(map(int, input().split()))\n\ndepends = defaultdict(list)\n\nfor i in range(n):\n    prereqs = list(map(int, input().split()))\n    depends[prereqs[0]].append(i)\n\nm = 0\nwhile depends:\n    course = min(depends)\n    m += 1\n\n    for d in depends[course]:\n        depends[courses[d]].remove(d)\n\n    del depends[course]\n\nprint(m) if m > 0 else print(-1)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5\") == \"5\\n1 2 3 4 5\"\n\nassert solution(\"9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\") == \"6\\n1 2 9 4 5 3\"\nassert solution(\"3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\") == \"-1\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2\\n0\\n1 3\") == '5\\n1 2 3'\nassert solution(\"9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\") == '6\\n1 2 9 4 5 3'\nassert solution(\"9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\") == '-1'\n\n\n-----Explanation-----\n\nFor example, firstly you can take the main course number 5, then the next main course number 2 and after that the next main course number 4, which is the main course. Then you can only take the last course number 3.\n\n\"\"\"\nimport sys\nimport copy\nfrom collections import defaultdict"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n2 3 4 5\\n0\\n0\\n1 1\\n1 2\\n1 3') == '5\\n1 2 3 4 5\\n', 'The order of courses is wrong'\n\"\"\""
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n3 5\\n0\\n0\\n2 2 1\") == \"5\\n1 2 3 4 5\"\nassert solution(\"9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\") == \"6\\n1 2 9 4 5 3\"\nassert solution(\"9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\") == \"6\\n1 2 9 4 5 3\"\n\"\"\""
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n9 3\n3 9 5\n0\n0\n3 9 4 5\n0\n0\n1 8\n1 6\n1 2\n2 1 2\n''') == '6\\n1 2 9 4 5 3'\n\nassert solution('''\n6 2\n5 3\n0\n0\n0\n2 2 1\n1 4\n1 5\n''') == '5\\n1 2 3 4 5'\n\nassert solution('''\n3 3\n1 2 3\n1 2\n1 3\n1 1\n''') == '-1'\n\nassert solution('''\n3 3\n1 2 3\n1 2\n1 3\n1 1\n''') == '-1'\n\nassert solution('''\n6 2\n5 3\n0\n0\n0\n2 2 1\n1 4\n1 5\n''') == '5\\n1 2 3 4 5'"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1 5 4\") == \"3 2 1 5 4\"\nassert solution(\"5 3\") == \"3 2 1 5 4\"\nassert solution(\"5 1\") == \"3 2 1 5 4\"\nassert solution(\"5 2\") == \"2 3 1 5 4\""
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 3\n3 2 1\n\"\"\") == \"3 2 1 5 4\"\nassert solution(\"\"\"5 3\n2 3 1\n\"\"\") == \"3 2 1 5 4\"\nassert solution(\"\"\"5 1\n3\n\"\"\") == \"3 2 1 5 4\"\nassert solution(\"\"\"5 2\n3 4\n\"\"\") == \"3 2 1 5 4\"\nassert solution(\"\"\"5 2\n1 3\n\"\"\") == \"1 3 2 5 4\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"5 3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"5 3 4 1 2\") == \"3 2 1 5 4\"\nassert solution(\"5 1 3 4 2\") == \"3 2 1 5 4\"\nassert solution(\"5 5 4 3 2\") == \"3 2 1 5 4\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"5 3\\n2 3 1\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 1 5 4') == '3 2 1 5 4'\nassert solution('5 3 1') == '3 2 1 5 4'\nassert solution('5 3 2') == '-1'\nassert solution('5 1 3') == '3 2 1 5 4'\nassert solution('5 2 3') == '-1'\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"5 3\\n2 3 1\") == \"-1\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 1 5 4\\n') == '3 2 1 5 4'\nassert solution('2 3 1\\n') == '-1'\nassert solution('5 3\\n3 2 1\\n') == '3 2 1 5 4'\nassert solution('5 1\\n3\\n') == '3 2 1 5 4'\nassert solution('5 2\\n3 4\\n') == '-1'"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 1 5 4') == '3 2 1 5 4'\nassert solution('5 3 1 3 2') == '-1'\nassert solution('5 3 1') == '3 2 1 5 4'\nassert solution('5 2 1 3 4') == '-1'\nassert solution('5 2 1') == '3 2 1 5 4'\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 3\n3 2 1''') == '3 2 1 5 4'\nassert solution('''5 1\n3''') == '3 2 1 5 4'\nassert solution('''5 2\n3 4''') == '-1'\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 3\n3 2 1\n\"\"\") == \"3 2 1 5 4\"\nassert solution(\"\"\"5 1\n3\n\"\"\") == \"3 2 1 5 4\"\nassert solution(\"\"\"5 3\n2 3 1\n\"\"\") == \"3 2 1 5 4\"\nassert solution(\"\"\"5 2\n3 4\n\"\"\") == \"3 2 1 5 4\"\nassert solution(\"\"\"5 1\n3\n\"\"\") == \"3 2 1 5 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 7 3') == 'YES'\nassert solution('10 10 0') == 'YES'\nassert solution('1 -4 5') == 'NO'\nassert solution('0 60 50') == 'NO'"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 7 3') == 'YES'\nassert solution('1 -4 5') == 'NO'\nassert solution('10 10 0') == 'YES'\nassert solution('1 -4 5') == 'NO'\nassert solution('0 60 50') == 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"1 -4 5\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"1 -4 5\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"1 -4 5\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\n\nprint('The code ran Correctly')"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"1 -4 5\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 7 3') == 'YES'\nassert solution('10 10 0') == 'YES'\nassert solution('1 -4 5') == 'NO'\nassert solution('0 60 50') == 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 7 3') == \"YES\"\nassert solution('10 10 0') == \"YES\"\nassert solution('1 -4 5') == \"NO\"\nassert solution('0 60 50') == \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"1 -4 5\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1, 4, 7, 10') == 'YES'\nassert solution('10, 10, 0') == 'YES'\nassert solution('1, -4, 5') == 'NO'\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(1)\") == \"1\"\nassert solution(\"(1)+(2)+(3)+(4)+(5)+(6)+(7)+(8)+(9)+(10)\") == \"11\"\nassert solution(\"(()()()())\") == \"1\"\nassert solution(\"(()())()\") == \"0\"\nassert solution(\"(()((()()()))(((((((((((()(((((()(()(()()()(()()((()()(()(((((((())\") == \"1\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == 1\n\"\"\"\n\ncnt1 = int(input())\ncnt2 = int(input())\ncnt3 = int(input())\ncnt4 = int(input())\n\nprint(0 if (cnt1 + cnt2 + cnt3 + cnt4) % 2 == 1 else 1)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()\") == 1\nassert solution(\"()()\") == 0\nassert solution(\"((()))\") == 1\nassert solution(\"(((()(((((()())()())))(())))(())()))\") == 1\nassert solution(\"(()(()(()(((((()())()())))(())))(())())()\") == 0"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1\\n4\\n3') == '1'\nassert solution('0\\n0\\n0\\n0') == '1'\nassert solution('1\\n2\\n3\\n4') == '0'\n\"\"\""
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 4 3') == '1'\nassert solution('0 0 0 0') == '1'\nassert solution('1 2 3 4') == '0'\nassert solution('0 0') == '1'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"((()())(()()))\") == \"1\"\nassert solution(\"(((())(((((((((((((((()))()()())()()()()())()()()())()()(((()))))))))))))))\") == \"1\"\nassert solution(\"(((())(((((((((((((((()))()()())()()()()())()()())))()()(((()))))))))))))\") == \"0\"\nassert solution(\"()(()())(((((((((((((((((()))()()())()()()()())()()())))()()(((()))))))))))))\") == \"0\"\nassert solution(\"((((((((((((((((((()))()()())()()()()())()()())))()()(((()))))))))))))\") == \"0\"\n\n---"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()(()(()((()()()()())))))\") == \"1\"\nassert solution(\"()(()(()((()()()()())))))\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(())((()()(((()())))(())())())\") == '1'\nassert solution(\"(((((()()(((()())))(())())())\") == '0'\nassert solution(\"(((((()()(((()())))(())())())\") == '0'\nassert solution(\"()(())((()))((()))((()))(((()))()(())((())()(((())()(())()()(())((())(())((()))(()))(()()())((((())((())((((((((((((())((())((((((((()((())((((((((((((((((((((((((((((()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"()()(()())\") == \"1\"\nassert solution(\"(()()())\") == \"1\"\nassert solution(\"(((()(()()))(\") == \"0\"\nassert solution(\"()(()\") == \"1\"\nassert solution(\"(()()(\") == \"0\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 3 4\") == \"1\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 2\") == \"0\"\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 5 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5 3\") == 3\nassert solution(\"10 5 7\") == 5\nassert solution(\"10 5 12\") == 3\n\"\"\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 5 3') == 3\nassert solution('10 5 7') == 5\nassert solution('10 5 12') == 3\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 5 3\") == \"3\"\nassert solution(\"10 5 7\") == \"5\"\nassert solution(\"10 5 12\") == \"3\"\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 5 3') == 3\nassert solution('10 5 7') == 5\nassert solution('10 5 12') == 3"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(1 2 3)) == \"3\"\nassert solution(str(1 2 4)) == \"4\"\nassert solution(str(1 1 1)) == \"1\"\nassert solution(str(1 2 5)) == \"5\"\nassert solution(str(1 2 10)) == \"10\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 5 3\") == \"3\"\nassert solution(\"10 5 7\") == \"5\"\nassert solution(\"10 5 12\") == \"3\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 5 3') == 3\nassert solution('10 5 7') == 5\nassert solution('10 5 12') == 3\nassert solution('10 10 10') == 1\nassert solution('1 10 10') == 1\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\n\nassert solution('5 1 3') == 3\nassert solution('10 5 7') == 5\nassert solution('10 5 12') == 3\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cab\") == \"abc\"\nassert solution(\"acdb\") == \"abdc\"\n\"\"\"\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cab\") == \"abc\"\nprint(solution(\"acdb\"))\n\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('acdb') == 'abdc'\n\"\"\"\n\nstdin = input()\n\nu = stdin[0]\nt = ''\nfor i in range(1, len(stdin)):\n    t = stdin[i] + t\n\nprint(u + t)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cab') == 'abc'\nassert solution('acdb') == 'abdc'\n\"\"\""
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcd') == 'acbd'\n\nassert solution('abcde') == 'abcdec'\n\nassert solution('abc') == 'abcc'\n\nassert solution('abd') == 'adbc'\n\"\"\"\n\ns = input()\n\nprint(s[0] + s[1:-1] + s[-1])\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"acdb\") == \"abdc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cab\") == \"abc\"\nassert solution(\"acdb\") == \"abdc\"\n\"\"\"\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('c') == 'c'\nassert solution('ac') == 'ac'\nassert solution('cab') == 'abc'\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"NO\\nYES\\nNO\\nYES\\nNO\\nYES\"\nassert solution(\"2\\n1\\n1\\n1\\n0\\n0\") == \"YES\\nNO\"\n\"\"\"\n\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"NO\"\nassert solution(\"5\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"NO\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"YES\"\nassert solution(\"7\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"NO\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\") == \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"1\\n1\\n1\\n1\") == \"YES\"\nassert solution(\"5\\n0 0\\n1 1\\n1 2\\n1 3\\n1 4\") == \"NO\"\nassert solution(\"3\\n0 0\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"4\\n2 1\\n1 0\\n1 0\\n1 0\\n1 0\") == \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\") == \"YES\"\nassert solution(\"5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\") == \"NO\"\nassert solution(\"3\\n0 0\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\") == \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\") == \"NO\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\") == \"YES\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\") == \"NO\"\n\n-----Explanation-----\n\nIn the first test case at the third moment of time the number of clears increased but the number of plays did not, that couldn't have happened.\n\nIn the second test case the number of plays decreased, which is impossible.\n\nThe fourth test case is probably an auto level with a single jump over the spike.\n\nIn the fifth test case the number of clears decreased, which is also impossible.\n\nNobody wanted to play the sixth test case; Polycarp's mom attempted it to make him feel better, however, she couldn't clear it.\n\"\"\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"3\\n0 0\\n1 1\\n2\") == \"YES\"\nassert solution(\"3\\n0 0\\n1 1\\n1000 3\") == \"NO\"\nassert solution(\"3\\n0 0\\n1 1\\n4\") == \"YES\"\nassert solution(\"3\\n0 0\\n1 1\\n2\") == \"NO\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2\\n0 0\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\") == \"NO\"\nassert solution(\"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\") == \"YES\"\nprint(\"Test finished.\")\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1\\n1 2\\n3\\n3\\n\") == \"NO\"\nassert solution(\"3\\n1 1\\n1 2\\n2\\n1 1\\n1 1\\n\") == \"YES\"\nassert solution(\"3\\n1 1\\n1 2\\n2\\n1 1\\n1 1\\n\") == \"NO\"\nassert solution(\"3\\n1 1\\n1 2\\n2\\n1 1\\n1 1\\n\") == \"NO\"\nassert solution(\"3\\n1 1\\n1 2\\n2\\n1 1\\n1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n1 0\n0 0\n1 0\n2\n0 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n3\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2\n0 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1\\n1 2\\n1 3\\n0 0\\n1 1\") == \"NO\"\nassert solution(\"7\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n1 1\") == \"NO\"\nassert solution(\"3\\n1 1\\n1 2\\n1 3\\n2 3\\n3 4\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"05:39\") == \"11\"\nassert solution(\"13:31\") == \"0\"\nassert solution(\"23:59\") == \"1\"\nassert solution(\"23:00\") == \"0\"\nassert solution(\"20:40\") == \"4\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"05:39\") == \"11\"\nassert solution(\"13:31\") == \"0\"\nassert solution(\"23:59\") == \"1\"\n\nprint(solution(\"05:39\"))\nprint(solution(\"13:31\"))\nprint(solution(\"23:59\"))\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"05:39\") == \"11\"\nassert solution(\"13:31\") == \"0\"\nassert solution(\"23:59\") == \"1\"\n\n\"\"\"\nfrom datetime import datetime\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('05:39') == 11\nassert solution('13:31') == 0\nassert solution('23:59') == 1\n\"\"\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13:31\") == \"0\"\nassert solution(\"05:39\") == \"11\"\nassert solution(\"23:59\") == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"05:39\") == 11\nassert solution(\"13:31\") == 0\nassert solution(\"23:59\") == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"05:39\") == 11\nassert solution(\"13:31\") == 0\nassert solution(\"23:59\") == 1\n\nassert solution(\"05:39\") == 11\nassert solution(\"13:31\") == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"05:39\") == 11\nassert solution(\"13:31\") == 0\nassert solution(\"23:59\") == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"05:39\") == 11\nassert solution(\"13:31\") == 0\nassert solution(\"23:59\") == 1\n\"\"\"\nimport pytest\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('05:39') == 11\nassert solution('13:31') == 0\nassert solution('23:59') == 1\n\n\"\"\"\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 5 1 3 2\") == \"3\"\nassert solution(\"7\\n1 6 5 3 4 7 2\") == \"6\"\nassert solution(\"6\\n6 5 4 3 2 1\") == \"5\"\nassert solution(\"5\\n4 5 1 3 2\") == \"3\"\nassert solution(\"7\\n1 6 5 3 4 7 2\") == \"6\"\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 5 1 3 2\") == \"3\"\nassert solution(\"7\\n1 6 5 3 4 7 2\") == \"6\"\nassert solution(\"6\\n6 5 4 3 2 1\") == \"5\"\n\na = [2,3,4,5,6,7]\nmax(a)\na.index(max(a))\na.index(min(a))\nprint(a)\na.insert(a.index(max(a)),a.pop(a.index(min(a))))\nprint(a)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_data_1) == test_result_1\nassert solution(test_data_2) == test_result_2\nassert solution(test_data_3) == test_result_3\n\"\"\"\n\nn = int(input().strip())\nl = list(map(int, input().strip().split()))\n\nmin_l = min(l)\nmax_l = max(l)\n\nans = 0\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 1 3 2') == '3'\nassert solution('7 6 5 4 3 2 1') == '5'\nassert solution('6 5 4 3 2 1') == '5'\n\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\na.sort()\ndistance = 0\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n4 5 1 3 2') == '3'\nassert solution('7\\n1 6 5 3 4 7 2') == '6'\nassert solution('6\\n6 5 4 3 2 1') == '5'"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7\n6 5 4 3 2 1''') == '5'\nassert solution('''6\n6 5 4 3 2 1''') == '5'\nassert solution('''6\n6 5 4 3 2 1''') == '5'\nassert solution('''1\n2\n3\n4\n5\n6\n7''') == '3'\nassert solution('''1\n2\n3\n4\n5\n6\n7''') == '3'\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 5 1 3 2\") == '3'\nassert solution(\"7\\n1 6 5 3 4 7 2\") == '6'\nassert solution(\"6\\n6 5 4 3 2 1\") == '5'\nassert solution(\"1\\n1\") == '0'\n\n\"\"\""
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\n\nassert solution('1 2') == ''\nassert solution('2 1') == '0'\n\nassert solution('5 4 3 2 1') == '0'\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n4 5 1 3 2') == 3\nassert solution('7\\n1 6 5 3 4 7 2') == 6\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n4 5 1 3 2') == '3'\nassert solution('7\\n1 6 5 3 4 7 2') == '6'\nassert solution('6\\n6 5 4 3 2 1') == '5'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'TAK'\nassert solution('oXoxoXo') == 'TAK'\nassert solution('aabaa') == 'NIE'\nassert solution('baa') == 'NIE'\nassert solution('a') == 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('oXoxoXo') == 'TAK'\nassert solution('bod') == 'TAK'\nassert solution('ER') == 'NIE'\n\"\"\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('oXoxoXo') == 'TAK'\nassert solution('bod') == 'TAK'\nassert solution('ER') == 'NIE'\n\n\"\"\""
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"TAK\"\nassert solution(\"ER\") == \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"TAK\"\nassert solution(\"ER\") == \"NIE\"\n\n'''"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('oXoxoXo') == 'TAK'\nassert solution('bod') == 'TAK'\nassert solution('ER') == 'NIE'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a) == b\nassert solution(a) == b\n\n\"\"\""
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"TAK\"\nassert solution(\"ER\") == \"NIE\"\nassert solution(\"a\") == \"TAK\"\nassert solution(\"aa\") == \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('oXoxoXo') == 'TAK'\nassert solution('bod') == 'TAK'\nassert solution('ER') == 'NIE'\nassert solution('mamamam') == 'NIE'"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oXoxoXo') == \"TAK\"\nassert solution('bod') == \"TAK\"\nassert solution('ER') == \"NIE\"\n\"\"\""
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3921', '10000') == '9321'\n\"\"\""
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\", \"222\") == \"213\"\nassert solution(\"3921\", \"10000\") == \"9321\"\nassert solution(\"4940\", \"5000\") == \"4940\""
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123\", \"222\") == \"213\"\nassert solution(\"3921\", \"10000\") == \"9321\"\nassert solution(\"4940\", \"5000\") == \"4940\"\n\"\"\""
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123\") == \"213\"\nassert solution(\"3921\") == \"9321\"\nassert solution(\"4940\") == \"4940\"\nassert solution(\"1234\") == \"2413\"\nassert solution(\"9999\") == \"9991\"\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123', '222') == '213'\nassert solution('3921', '10000') == '9321'\nassert solution('4940', '5000') == '4940'\n\n\"\"\"\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(123) == \"213\"\nassert solution(222) == \"123\"\nassert solution(3921) == \"9321\"\nassert solution(4940) == \"4940\"\nassert solution(10000) == \"10000\"\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123', '222') == '213'\nassert solution('3921', '10000') == '9321'\n\n\"\"\"\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123', '222') == '213'\nassert solution('3921', '10000') == '9321'\n\"\"\"\n\nimport re"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123\", \"222\") == \"213\"\nassert solution(\"3921\", \"10000\") == \"9321\"\nassert solution(\"4940\", \"5000\") == \"4940\"\nassert solution(\"4940\", \"10000\") == \"4940\"\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123', '222') == '213'\nassert solution('3921', '10000') == '9321'\nassert solution('4940', '5000') == '4940'\nassert solution('3435', '4321') == '432435'\nassert solution('4111', '1111') == '111111'\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('XXOXX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n') == 'YES'\nassert solution('XXOXX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n') == 'NO'\nassert solution('XXX\\nOO.O\\nO.O.\\nO.O.\\nO.O.\\nOOO\\nOO.O\\nOO.O\\nO.O.\\nO.O.\\nOOO') == 'NO'\nassert solution('XOOXXOXX\\nOOOXXOXO\\nO.OXOX.O\\nO.O.O.O\\nOOOXXOXO\\nOOOXXOXO\\nO.OXOX.O\\nO.O.O.O\\nOOOXXOXO\\nOOOXXOXO') == 'YES'\nassert solution('O.O.\\n.XO.\\n.O.O\\nXO.\\nXO.\\nXO.\\nXO.\\nXO.\\nXO.\\nXO.\\nXO.') == 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"XXOXX....\") == \"YES\"\nassert solution(\"XOXOXO...X\") == \"NO\"\nassert solution(\".........\") == \"NO\"\nassert solution(\"XXXXXO.XX\") == \"YES\"\nassert solution(\"XOXO.XO.X\") == \"YES\"\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"XXOXXOO.\") == \"NO\"\nassert solution(\"O.OO......\") == \"NO\"\nassert solution(\"XX.XX.....\") == \"NO\"\nassert solution(\"X.X.X......\") == \"YES\"\nassert solution(\"XX.X.X.O...\") == \"YES\"\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('XX.XX.....') == 'YES'\nassert solution('XXOXX.....') == 'NO'\nassert solution('.....O..O...') == 'YES'\nassert solution('O.O.O.OO.....') == 'NO'\nassert solution('....O...O....') == 'YES'\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"XX.XX.....\\n\"\n    + \".....OOOO.\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\") == \"YES\"\nassert solution(\"XXOXX.....\\n\"\n    + \"OO.O......\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\"\n    + \"..........\\n\") == \"NO\"\nassert solution(\"X.X.X.X.X\\n\"\n    + \"X.O.O.O.O.X\\n\"\n    + \"X.X.X.X.X\\n\"\n    + \"X.O.O.O.O.X\\n\"\n    + \"X.X.X.X.X\\n\"\n    + \"X.O.O.O.O.X\\n\"\n    + \"X.X.X.X.X\\n\"\n    + \"X.O.O.O.O.X\\n\"\n    + \"X.X.X.X.X\\n\"\n    + \"X.O.O.O.O.X\\n\"\n    + \"X.X.X.X.X\\n\"\n    + \"X.O.O.O.O.X\\n\") == \"YES\"\nassert solution(\"X.X.X.X.X\\n\"\n    + \"X.O.O.O.O.X\\n\"\n    + \"X.X.X.X.X\\n\"\n    + \"X.O.O.O.O.X\\n\"\n    + \"X.X.X.X.X\\n\"\n    + \"X.O.O.O.O.X\\n\"\n    + \"X.X.X.X.X\\n\"\n    + \"X.O.O.O.O.X\\n\"\n    + \"X.X.X.X.X\\n\"\n    + \"X.O.O.O.O.X\\n\"\n    + \"X.X.X.X.X\\n\"\n    + \"X.O.O.O.O.X\\n\") == \"NO\"\nassert solution(\"X..X.X..X\\n\"\n    + \".O.O.O....\\n\"\n    + \".O.O.O....\\n\"\n    + \".O.O.O....\\n\"\n    + \".O.O.O....\\n\"\n    + \".O.O.O....\\n\"\n    + \".O.O.O....\\n\"\n    + \".O.O.O....\\n\"\n    + \".O.O.O....\\n\"\n    + \".O.O.O....\\n\"\n    + \".O.O.O....\\n\"\n    + \".O.O.O....\\n\"\n    + \".O.O.O....\\n\") == \"YES\"\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('XX.XX.....') == 'YES'\nassert solution('XXXXO.OOO') == 'NO'\nassert solution('..........') == 'YES'\nassert solution('..........') == 'YES'\nassert solution('....O....') == 'YES'\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution_text) == solution_result"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"XX.XX.....\\n.....OOOO.\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == \"YES\"\nassert solution(\"XXOXX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == \"NO\"\nassert solution(\"O.O.O...O\\nO...O....\\nO.O..O...\\nO...O.O..\\nO...O.O.O\\nO...O.O.O\\nO.O.O.O.O\\nO...O.O.O\\nO.O.O.O.O\\nO...O.O.O\") == \"NO\"\nassert solution(\"XOOX.XO.X\\n.O.O.O..\\nX.O..O..\\n.O.O.OO.\\n..O..O.O\\nO.O.O.O\\nO.O.O.O\\nO.O.O.O\\n.O.O.O.O\\n..O..O.O\") == \"YES\"\n\"\"\""
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"XX.XX.....\\n.....OOOO.\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n\") == 'YES'\nassert solution(\"XXOXX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n\") == 'NO'\nassert solution(\"XX.XXOXX..\\n....OX....\\n.O.O.O....\\n.O.O.O....\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n\") == 'YES'\nassert solution(\"X.X.X.X.X\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\") == 'NO'\nassert solution(\"X.X.X.X.X\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\\n.O.O.O.O.O\") == 'YES'\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\nXX.XX.....\n.....OOOO.\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\nXX.XX.....\n...O....O.\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n....O.OO..\n....X.X.O.\n....O.OO..\n....O.XO.O\n....O.O.O.\n....O.XO.O\n....X.X.O.\n....O.X.O.\n....X.X.O.\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\nOOXX..OOO.\n.OOOOOOO.O\nO...O.O.O\nO...O.O.O\n.O.OOO.O.\nOOOOO...O.\nO.O.OOO.O.\nO.O.O.O.O.\n.OOOOOO..O\nOO.OOOOOO.\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\nO.O.O.O.O.\n.OOOOOOO.\nO.O.O.O.O.\n.O.O.OO.O.\nO.O.O.O.O.\n.OOOOO.O.\nO.O.O.O.O.\n.O.O.O.O.O\nO.O.O.O.O.\n.O.O.O.O.O\nO.O.O.O.O.\n\"\"\") == \"NO\""
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n 1 0') == '1 0\\n0 0'\nassert solution('3 2\\n 1 0 0\\n 0 1 0\\n 0 0 0') == '1 0 0\\n0 1 0\\n0 0 0'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"2 1\", \"1 2\", \"3 4\"]) == \"1 0\\n0 2\\n0 0\"\nassert solution([\"3 2\", \"1 1 1\", \"1 1 1\"]) == \"1 0 0\\n0 1 1\\n0 0 0\"\nassert solution([\"2 5\", \"0 2 3 4\", \"0 0 5 6\"]) == \"-1\"\nassert solution([\"2 5\", \"0 2 3 4\", \"0 0 5 6\", \"0 0 5 6\", \"0 0 5 6\"]) == \"-1\"\n\n\"\"\""
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1 0\\n0 0\"\nassert solution(\"3 2\") == \"-1\"\nassert solution(\"2 5\") == \"1 0 0\\n0 1 0\\n0 0 0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"0 1\"\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1') == '1 0\\n0 0'\nassert solution('3 2') == '1 0 0\\n0 1 0\\n0 0 0'\nassert solution('2 5') == '-1'\nassert solution('2 6') == '1 0 0\\n0 1 0\\n0 0 1'\n\n\"\"\""
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1') == '1 0\\n0 0'\n\nassert solution('3 2') == '1 0 0\\n0 1 0\\n0 0 0'\n\nassert solution('2 5') == '-1'\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5') == '1 0 0\\n0 1 0\\n0 0 0\\n1 0 1\\n0 1 0'\nassert solution('2 1') == '1 0\\n0 0\\n'\n\nprint(solution(input()))\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1 0\\n0 0\"\nassert solution(\"3 2\") == \"1 0 0\\n0 1 0\\n0 0 0\"\nassert solution(\"2 5\") == \"-1\"\nassert solution(\"4 4\") == \"0 0 0 0\\n0 1 0 0\\n0 0 0 0\\n0 0 0 0\"\n\"\"\"\n\nimport sys\nimport numpy as np\n\nn, k = [int(i) for i in input().split()]\n\narr = np.zeros((n,n), dtype=int)\n\nfor i in range(n):\n    arr[i,i] = 1\n\nfor i in range(k):\n    x, y = [int(i) for i in input().split()]\n    arr[x-1,y-1] = 1\n    arr[y-1,x-1] = 1\n\nfor i in range(n):\n    arr[i,i] = 0\n\nprint(np.max(np.where(arr == np.diag(arr))))\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"1 0 0 0 0\""
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n\") == \"1 0\\n0 0\"\n\"\"\"\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == '1 0\\n0 0'\nassert solution(\"3 2\") == '1 0 0\\n0 1 0\\n0 0 0'\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"(x^y)^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"((x^y))^z\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2.0 2.0 2.0') == 'x^y^z'\n\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"(x^y)^z\"\n\"\"\""
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"((x^y))^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.9 1.8 1.7\") == \"(x^y)^z\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"0.0 0.0 0.0\") == \"0\""
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"((x^y)^z)\""
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"((x^y))^z\"\n\nsolution('1.1 3.4 2.5')\nsolution('2.0 2.0 2.0')\nsolution('1.9 1.8 1.7')\nsolution('2.0')\nsolution('3.0')\nsolution('3.0')\nsolution('1.1')\nsolution('1.0')\nsolution('2.0 2.0 2.0')\n\n----------------------------------------------------------------\nsolution.py\n===========================================================================\n--- solution.py ---\nfrom math import *"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"((x^y)^z)\""
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.1 3.4 2.5') == 'z^y^x'\nassert solution('2.0 2.0 2.0') == 'x^y^z'\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\n\n\nhttps://www.codewars.com/kata/5867ed9aa6c0bd7578000f1f/train/python"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcabca\") == 5\nassert solution(\"aaaaaaaa\") == 8\n\n\"\"\""
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcabca\") == \"5\"\nassert solution(\"aaaaaaaa\") == \"8\"\nassert solution(\"a\") == \"1\"\n\"\"\""
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcabca\") == 5\nassert solution(\"aaaaaaaa\") == 4\nassert solution(\"abcdefgh\") == 8\n\"\"\"\n\nn = int(input())\ns = input()"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcabca\") == 5\nassert solution(\"aaaaaaaa\") == 4\nassert solution(\"abcdefgh\") == 8\n\n\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == \"2\"\nassert solution(\"abca\") == \"3\"\nassert solution(\"abcabca\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcabca') == 5\nassert solution('aaaaaaaa') == 4\n\n\"\"\""
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcabca') == 5\nassert solution('aaaaaaaa') == 8\n\"\"\"\nimport sys"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abc') == 3, 'WA'\nassert solution('abcdefg') == 3, 'WA'\nassert solution('abcdefghijklm') == 3, 'WA'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcabca\") == 5\nassert solution(\"aaaaaaaa\") == 4"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0') == '4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3'\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\\n\", \"Check the first example\"\nassert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\\n\", \"Check the second example\"\nassert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\\n\", \"Check the third example\"\nassert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\\n\", \"Check the forth example\""
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_expected"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\\n\"\nassert solution(\"2\\n1 0\\n2 1\\n\") == \"3\\nmove 1 3\\nmove 2 1\\nmove 3 2\\n\"\n\nimport os\nimport io\nimport sys\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\"\nassert solution(\"2\\n1 0\\n2 1\") == \"3\\nmove 1 3\\nmove 2 1\"\nassert solution(\"5\\n1 0\\n11 1\\n111 0\\n1111 1\\n11111 0\") == \"5\\nmove 1 5\\nmove 11 1\\nmove 111 1\\nmove 11111 2\\nmove 1114 3\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\\n\"\nassert solution(\"2\\n1 0\\n2 1\") == \"3\\nmove 1 3\\nmove 2 1\\nmove 3 2\\n\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0') == '4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3'\nassert solution('2\\n1 0\\n2 1') == '3\\nmove 1 3\\nmove 2 1'\nassert solution('5\\n01 0\\n11 1\\n111 0\\n1111 1\\n11111 0') == '5\\nmove 1 5\\nmove 11 1\\nmove 111 1\\nmove 111 4\\nmove 11111 3'\nassert solution('5\\n01 0\\n1111 1\\n11111 0') == '5\\nmove 1 5\\nmove 111 11\\nmove 111111 1'"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123456') == '2'\nassert solution('111000') == '1'\n\"\"\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111000\") == 1\nassert solution(\"123456\") == 2\n\"\"\"\nimport functools\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101010\") == 0\nassert solution(\"100101\") == 1\nassert solution(\"101011\") == 2\nassert solution(\"111000\") == 1\nassert solution(\"111111\") == 0\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"111000\") == \"1\"\nassert solution(\"123456\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111000\") == \"1\"\nassert solution(\"111111\") == \"0\"\nassert solution(\"123450\") == \"1\"\nassert solution(\"505550\") == \"0\"\nassert solution(\"555555\") == \"2\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123456') == '2'\nassert solution('111000') == '1'\nassert solution('10') == '0'\nassert solution('0') == '0'\nassert solution('11101010') == '2'\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('111000') == '1'\nassert solution('123456') == '2'\nassert solution('000000') == '0'\n\"\"\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123456\") == '2'\nassert solution(\"111000\") == '1'\nassert solution(\"111000\") == '1'\nassert solution(\"111000\") == '1'\nassert solution(\"111000\") == '1'\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123456\") == \"2\"\nassert solution(\"111111\") == \"1\"\nassert solution(\"111000\") == \"1\"\nassert solution(\"101010\") == \"1\"\nassert solution(\"011010\") == \"0\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('111000') == '1'\nassert solution('123456') == '2'\n\"\"\""
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n\") == \"3\"\nassert solution(\"5 2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == 3\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"5 2\") == \"2\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == '3'\nassert solution('5 2') == '2'\n\"\"\"\n\nfrom functools import reduce\nfrom fractions import gcd\nimport math"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"3\"\n\nassert solution(\"5 2\") == \"2\"\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"5 2\") == \"2\""
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3''') == '3'\nassert solution('''5 2''') == '2'\n'''\n'''\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"3\"\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"5 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n\") == 3\nassert solution(\"5 2\\n\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == output\n\nprint(solution(input))\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1 8'\nassert solution('1 3') == '1 1'\nassert solution('4 3') == '23 128'\n\"\"\""
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2') == '1 8'\nassert solution('1 3') == '1 1'\nassert solution('4 3') == '23 128'\nassert solution('3 1') == '0 0'\nassert solution('1 4') == '0 0'\n\"\"\"\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1 8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2''') == '1 8'\n\nassert solution('''1 3''') == '1 1'\n\nassert solution('''4 3''') == '23 128'\n\nimport random\n\nimport pytest\n\nfrom math import gcd\n\nfrom leetcode_problems.bisection_method import birthday_paradox\n\n\n@pytest.mark.parametrize(\n    ('n', 'k', 'expected_a', 'expected_b'),\n    [\n        (3, 2, 1, 8),\n        (1, 3, 1, 1),\n        (4, 3, 23, 128),\n    ]\n)\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1 8'\nassert solution('1 3') == '1 1'\nassert solution('4 3') == '23 128'\n\n\"\"\"\nimport math\nimport gmpy2\nimport sys"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 2''') == '1 8'\nassert solution('''1 3''') == '1 1'\nassert solution('''4 3''') == '23 128'\n'''"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"1 8\"\nassert solution(\"1 3\") == \"1 1\"\nassert solution(\"4 3\") == \"23 128\"\n\"\"\"\n\n\"\"\"\n1. \u5b8c\u5168\u5e73\u65b9\u6570\u6392\u5217\u95ee\u9898\uff1a\n\u6709n\u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570\u90fd\u57281~n\u4e4b\u95f4\uff0c\u53ef\u4ee5\u6309\u7167\u5176\u503c\u6765\u6392\u5217\uff0c\u6240\u4ee5\u67092^n\u79cd\u6392\u5217\u65b9\u5f0f\uff08\u503c\u4e0d\u540c\uff09\n\u6bcf\u4e2a\u6570\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6700\u540e\u628a\u6bcf\u4e2a\u6570\u653e\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u540e\u9762\uff0c\u90a3\u4e48\u4e00\u5171\u67092^n-1\u79cd\u6392\u5217\u65b9\u5f0f\u3002\n\n2. \u7b2c\u4e00\u4e2a\u6570\u5b57\u4f4d\u7f6e\uff1a\n\u9996\u5148\u628a\u6570\u5b57\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u6570\u5b57\u4e4b\u540e\u7684\u6240\u6709\u6570\u5b57\u653e\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e4b\u540e\u628a\u6570\u5b57\u4e4b\u540e\u7684\u6240\u6709\u6570\u5b57\u653e\u5728\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u4e4b\u540e\u628a\u6570\u5b57\u4e4b\u540e\u7684\u6240\u6709\u6570\u5b57\u653e\u5728\u7b2c\u56db\u4e2a\u4f4d\u7f6e\uff0c\n\u6700\u540e\u628a\u6570\u5b57\u4e4b\u540e\u7684\u6240\u6709\u6570\u5b57\u653e\u5728\u7b2c\u4e94\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u6837\u5c31\u628a\u6570\u5b57\u653e\u5728\u4e86\u5176\u6240\u5728\u4f4d\u7f6e\u7684\u540e\u9762\uff0c\u8fd9\u4e9b\u653e\u5728\u540e\u9762\u7684\u6570\u5b57\u53ef\u4ee5\u67092^(n-1)\u79cd\u6392\u5217\u65b9\u5f0f\u3002\n\n3. \u7b2c\u4e8c\u4e2a\u6570\u5b57\u4f4d\u7f6e\uff1a\n\u6bcf\u6b21\u628a\u6240\u6709\u6570\u5b57\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u56db\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e94\u4e2a\u4f4d\u7f6e\uff0c\u6700\u540e\u628a\u6570\u5b57\u4e4b\u540e\u7684\u6240\u6709\u6570\u5b57\u653e\u5728\u7b2c\u516d\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e03\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u516b\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e5d\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u5341\u4e2a\u4f4d\u7f6e\uff0c\n\u5982\u6b64\u7c7b\u63a8\uff0c\u7b2c\u4e00\u4f4d\u7f6e\u5c31\u662f\uff081, 2, 3, 4, 5, 6, 7, 8, 9, 10\uff09\uff0c\u7b2c\u4e8c\u4f4d\u7f6e\u5c31\u662f\uff081, 3, 5, 7, 9, 10\uff09\uff0c\u7b2c\u4e09\u4f4d\u7f6e\u5c31\u662f\uff081, 4, 7, 10\uff09\uff0c\u7b2c\u56db\u4f4d\u7f6e\u5c31\u662f\uff081, 5, 8\uff09\uff0c\u7b2c\u4e94\u4f4d\u7f6e\u5c31\u662f\uff081, 6, 9\uff09\uff0c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u662f\uff081, 2, 3, 4, 5\uff09\u3002\n\n4. \u7b2c\u4e09\u4e2a\u6570\u5b57\u4f4d\u7f6e\uff1a\n\u6bcf\u6b21\u628a\u6240\u6709\u6570\u5b57\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u56db\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e94\u4e2a\u4f4d\u7f6e\uff0c\u6700\u540e\u628a\u6570\u5b57\u4e4b\u540e\u7684\u6240\u6709\u6570\u5b57\u653e\u5728\u7b2c\u516d\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e03\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u516b\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e5d\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u5341\u4e2a\u4f4d\u7f6e\uff0c\n\u5982\u6b64\u7c7b\u63a8\uff0c\u7b2c\u4e00\u4f4d\u7f6e\u5c31\u662f\uff081, 2, 3, 4, 5, 6, 7, 8, 9, 10\uff09\uff0c\u7b2c\u4e8c\u4f4d\u7f6e\u5c31\u662f\uff081, 3, 5, 7, 9, 10\uff09\uff0c\u7b2c\u4e09\u4f4d\u7f6e\u5c31\u662f\uff081, 4, 7, 10\uff09\uff0c\u7b2c\u56db\u4f4d\u7f6e\u5c31\u662f\uff081, 5, 8\uff09\uff0c\u7b2c\u4e94\u4f4d\u7f6e\u5c31\u662f\uff081, 6, 9\uff09\uff0c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u662f\uff081, 2, 3, 4, 5\uff09\u3002\n\n5. \u7b2c\u56db\u4e2a\u6570\u5b57\u4f4d\u7f6e\uff1a\n\u6bcf\u6b21\u628a\u6240\u6709\u6570\u5b57\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u56db\u4e2a\u4f4d\u7f6e\ufffd"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1 8'\nassert solution('1 3') == '1 1'\nassert solution('4 3') == '23 128'\nassert solution('1 1') == '1 1'\nassert solution('2 3') == '23 128'\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"1 8\"\nassert solution(\"1 3\") == \"1 1\"\nassert solution(\"4 3\") == \"23 128\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\\n') == 'YES'\nassert solution('2\\n15000 South\\n4000 East\\n') == 'NO'\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North') == 'YES'\nassert solution('15000 South\\n4000 East\\n20000 North') == 'NO'\n\n\n\"\"\""
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n10000 South\\n3\\n1000 South\\n20000 North') == 'YES'\nassert solution('2\\n1000 South\\n1000 North') == 'NO'\nassert solution('4\\n5000 South\\n5000 North\\n15000 South\\n15000 North') == 'YES'\n\"\"\""
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North') == 'YES'\nassert solution('2\\n15000 South\\n4000 East') == 'NO'\nassert solution('5\\n20000 South\\n1000 North\\n20000 North') == 'YES'\nassert solution('2\\n1000 North\\n1000 South') == 'NO'\nassert solution('4\\n50 South\\n50 North\\n15000 South\\n15000 North') == 'YES'\n\"\"\"\nimport sys\nimport os\nfrom datetime import datetime\nfrom typing import List, Dict, Optional, Tuple\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\") == \"YES\"\nassert solution(\"2\\n15000 South\\n4000 East\") == \"NO\"\nassert solution(\"5\\n20000 South\\n1000 North\\n1000000 West\\n9000 North\\n10000 North\") == \"YES\"\nassert solution(\"2\\n1000 North\\n1000 South\") == \"NO\"\nassert solution(\"4\\n50 South\\n50 North\\n15000 South\\n15000 North\") == \"YES\"\n\"\"\""
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 South\\n1 East\") == \"NO\"\nassert solution(\"1 North\\n1 East\") == \"YES\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\") == \"YES\"\nassert solution(\"5\\n20000 South\\n1000 North\\n1000000 West\\n9000 North\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\") == \"YES\"\nassert solution(\"2\\n15000 South\\n4000 East\") == \"NO\"\nassert solution(\"5\\n20000 South\\n1000 North\\n20000 North\") == \"YES\"\nassert solution(\"4\\n50 South\\n50 North\\n15000 South\\n15000 North\") == \"YES\"\nassert solution(\"3\\n20000 South\\n10 East\\n20000 North\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\") == \"YES\"\nassert solution(\"2\\n15000 South\\n4000 East\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10 East\\n20 West\") == \"NO\"\nassert solution(\"5\\n15000 South\\n10000 East\\n20000 North\") == \"YES\"\nassert solution(\"4\\n50 South\\n50 North\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0 3 3 5 21\") == '3'\nassert solution(\"2 4 3 0 6 17\") == '2'\n\n\"\"\"\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0 3 3 5 21\") == \"3\"\nassert solution(\"2 4 3 0 6 17\") == \"2\"\n\"\"\""
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0 3 3 5 21\") == \"3\"\nassert solution(\"2 4 3 0 6 17\") == \"2\""
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0 3 3 5 21\") == \"3\"\nassert solution(\"2 4 3 0 6 17\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 0 3 3 5 21\") == \"3\"\nassert solution(\"2 4 3 0 6 17\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 3 0 6 17') == '2'\n\"\"\""
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a_1, b_1, a_2, b_2, L, R) == solution_bis(a_1, b_1, a_2, b_2, L, R)"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0 3 3 5 21\") == \"3\"\nassert solution(\"2 4 3 0 6 17\") == \"2\"\nprint(solution(\"2 4 3 0 6 17\"))\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 0 3 3 5 21\") == \"3\"\nassert solution(\"2 4 3 0 6 17\") == \"2\"\n\"\"\""
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 3 0 6 17') == '2'\n\"\"\"\n\na_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n\ncounter = 0\n\nfor k in range(L, R + 1):\n    if a_1 * k + b_1 == a_2 * k + b_2:\n        counter += 1\n\nprint(counter)\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\") == \"1\"\nassert solution(\"4 7 10\") == \"3\"\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 10\") == \"3\"\nassert solution(\"5 2 3\") == \"1\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\") == \"1\"\nassert solution(\"4 7 10\") == \"3\"\nassert solution(\"2 1 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"4 1 1\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\") == \"1\"\nassert solution(\"4 7 10\") == \"3\""
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 10\") == \"3\""
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 10\") == \"3\"\nassert solution(\"7 7 10\") == \"3\"\nassert solution(\"6 7 10\") == \"2\"\nassert solution(\"2 4 7\") == \"0\"\nassert solution(\"2 4 10\") == \"0\"\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 7 10') == 3\nassert solution('5 2 3') == 1\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3') == '1'\nassert solution('4 7 10') == '3'\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 10\") == \"3\"\nassert solution(\"5 2 3\") == \"1\"\nassert solution(\"4 7 10\") == \"3\"\nassert solution(\"5 2 3\") == \"1\"\nassert solution(\"4 7 9\") == \"5\"\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 10\") == \"3\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\") == \"YES\"\nassert solution(\"4 3\\nBRG\\nBRG\\nBRG\\nBRG\") == \"YES\"\nassert solution(\"6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\") == \"NO\"\nassert solution(\"4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG\") == \"NO\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\nRRRR\\nRRRR\\nBBBB\\nGGGG\\n\") == \"YES\"\nassert solution(\"6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\\n\") == \"NO\"\nassert solution(\"4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG\\n\") == \"YES\"\nassert solution(\"6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\\n\") == \"NO\"\nassert solution(\"4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG\\n\") == \"YES\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\") == \"NO\"\nassert solution(\"4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG\") == \"NO\"\nassert solution(\"6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\nRRRR\\nRRRR\\nBBBB\\nGGGG\") == \"YES\"\nassert solution(\"4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\nRRR\\nRRR\\nBBBB\\nGGGG') == 'YES'\nassert solution('4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG') == 'NO'\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG') == 'YES'\nassert solution('4 3\\nRRRR\\nRRRR\\nBBBB\\nGGGG') == 'YES'\nassert solution('6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB') == 'NO'\nassert solution('4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG') == 'NO'\n\n\"\"\""
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG') == \"YES\"\nassert solution('4 3\\nRRRR\\nRRRR\\nBBBB\\nGGGG') == \"YES\"\nassert solution('6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB') == \"NO\"\nassert solution('4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG') == \"NO\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB') == 'YES'\n\nassert solution('6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG') == 'YES'\n\nassert solution('4 3\\nBRG\\nBRG\\nBRG\\nBRG') == 'YES'\n\nassert solution('4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG') == 'NO'\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG\\n\") == \"YES\"\nassert solution(\"4 3\\nRRRR\\nRRRR\\nBBBB\\n\") == \"NO\"\nassert solution(\"6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\\n\") == \"YES\"\nassert solution(\"6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\\n\") == \"NO\"\nassert solution(\"4 4\\nRRRR\\nRRRR\\nGGGG\\nGGGG\\n\") == \"YES\"\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == (0, 0)\nassert solution('1') == (0, 1)\nassert solution('2') == (0, -1)\nassert solution('12') == (1, 1)\nassert solution('23') == (-1, 1)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"-2 0\""
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '-2 0'\n\"\"\"\nimport sys"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"-2 0\"\nassert solution(\"7\") == \"3 2\"\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '0 0'\nassert solution('2\\n') == '0 1'\nassert solution('3\\n') == '1 2'\nassert solution('4\\n') == '-1 0'\nassert solution('5\\n') == '1 -2'\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '2 0'\nassert solution('7') == '3 2'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '-2 0'\nassert solution('7') == '3 2'\n\"\"\""
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"-2 0\"\nassert solution(\"7\") == \"3 2\"\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7') == '3 2'\n\"\"\"\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n\") == \"-2 0\"\nassert solution(\"7\\n\") == \"3 2\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\"\n\nimport sys"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'No'\nassert solution('4 6 15') == 'No'\nassert solution('3 2 7') == 'Yes'\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 15\") == 'No'\nassert solution(\"3 2 7\") == 'Yes'\nassert solution(\"6 11 6\") == 'Yes'\nassert solution(\"4 2 15\") == 'No'\nassert solution(\"4 2 8\") == 'No'\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 6 15') == 'No'\nassert solution('3 2 7') == 'Yes'\nassert solution('6 11 6') == 'Yes'\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 7') == 'Yes'\nassert solution('6 11 6') == 'Yes'\nassert solution('4 6 15') == 'No'\n\"\"\""
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\""
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\n\"\"\"\n\na, b, c = list(map(int, input().split()))"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 8\\n2 4 6\\n1 5 7\") == \"YES\"\nassert solution(\"2 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\nassert solution(\"2 4\\n1 3\\n1 2\") == \"NO\"\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"NO\"\n\nassert solution(\"1 1\\n1\") == \"YES\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8\\n2 4 6\\n1 5 7\") == \"YES\"\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\nassert solution(\"2 4\\n1 3\\n1 2\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\n\nassert solution(\"2 4\\n1 3\\n1 2\") == \"NO\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 9\\n2 3 5 8\\n0 1 3 6') == 'YES'\nassert solution('3 8\\n2 4 6\\n1 5 7') == 'YES'\nassert solution('2 4\\n1 3\\n1 2') == 'NO'\n\nassert solution('3 8\\n2 4 6\\n1 5 7') == 'YES'\nassert solution('2 4\\n1 3\\n1 2') == 'NO'\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8\\n2 4 6\\n1 5 7\") == \"YES\"\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\nassert solution(\"2 4\\n1 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8\\n2 4 6\\n1 5 7\") == \"YES\"\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\nassert solution(\"2 4\\n1 3\\n1 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\nassert solution(\"2 4\\n1 3\\n1 2\") == \"NO\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 8\\n2 4 6\\n1 5 7\") == \"YES\"\nassert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\nassert solution(\"2 4\\n1 3\\n1 2\") == \"NO\"\nassert solution(\"4 9\\n1 3 5 8\\n0 1 3 6\") == \"NO\"\nassert solution(\"5 10\\n2 2 6 5 3 3\\n1 2 6 7 3 4 8\") == \"YES\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 9\\n2 3 5 8\\n0 1 3 6\") == \"YES\"\nassert solution(\"3 8\\n2 4 6\\n1 5 7\") == \"YES\"\nassert solution(\"2 4\\n1 3\\n1 2\") == \"NO\"\nassert solution(\"4 9\\n3 5 8\\n0 1 3 6\") == \"YES\"\nassert solution(\"2 4\\n1 3\\n0 1\") == \"NO\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 8\\n1 3\\n2 4\\n') == 'YES'\nassert solution('2 8\\n1 3\\n1 2\\n') == 'NO'\nassert solution('2 8\\n1 3\\n1 1\\n') == 'NO'\nassert solution('2 8\\n1 3\\n2 1\\n') == 'YES'\nassert solution('2 8\\n2 3\\n1 1\\n') == 'NO'\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"mew\") == \"mew\"\nassert solution(\"uffuw\") == \"mew\"\nassert solution(\"qqqqqqqq\") == 0\n\nprint(solution(\"mew\"))\nprint(solution(\"uffuw\"))\nprint(solution(\"qqqqqqqq\"))\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"mew\") == \"3\"\nassert solution(\"uffuw\") == \"5\"\nassert solution(\"qqqqqqqq\") == \"0\"\n\"\"\"\n\ns = \"mew\""
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"mew\") == \"3\"\nassert solution(\"uffuw\") == \"5\"\nassert solution(\"qqqqqqqq\") == \"0\"\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"mew\") == \"mew\"\nassert solution(\"uffuw\") == \"mew\"\nassert solution(\"qqqqqqqq\") == \"0\"\nassert solution(\"wuffuw\") == \"mew\"\nassert solution(\"mqwqmm\") == \"mqwq\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"mew\") == \"3\"\nassert solution(\"wuffuw\") == \"5\"\nassert solution(\"qqqqqqqq\") == \"0\"\n\nprint(\"Success\")\n'''"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"mew\") == \"mew\"\nassert solution(\"uffuw\") == \"uwuf\"\nassert solution(\"qqqqqqqq\") == \"\"\nassert solution(\"wuffuw\") == \"uwuf\"\nassert solution(\"abacaba\") == \"abac\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('mew') =='mew'\nassert solution('wuffuw') == 'uffuw'\nassert solution('qqqqqqqq') == '0'\nassert solution('abacaba') == 'abacab'\nassert solution('q') == '0'\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('mew') =='mew'\nassert solution('wuffuw') == 'wuffuw'\nassert solution('qqqqqqqq') == '0'\nassert solution('abcdedcba') == '0'\nassert solution('abcdedcb') == '0'\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"mew\") == \"3\"\nassert solution(\"wuffuw\") == \"5\"\nassert solution(\"qqqqqqqq\") == \"0\"\nassert solution(\"kek\") == \"kek\"\nassert solution(\"abacaba\") == \"abacab\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('mew') == '3'\nassert solution('uffuw') == '5'\nassert solution('qqqqqqqq') == '0'\nprint('Success')\n\n-------"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\") == 'unrated'\nassert solution(\"6\\n3060 3060\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\\n2884 2884\") == 'rated'\nassert solution(\"4\\n1500 1500\\n1300 1300\\n1200 1200\\n1400 1400\") == 'unrated'\n\"\"\""
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1515 1515\\n1313 1313\\n1212 1212\\n1414 1414\\n\") == \"rated\"\nassert solution(\"5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\\n\") == \"maybe\"\nassert solution(\"6\\n3060 3060\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\\n2884 2884\\n\") == \"unrated\"\n\"\"\""
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2\\n3\\n2\") == \"rated\"\nassert solution(\"3\\n2\\n3\\n2\\n3\") == \"unrated\"\nassert solution(\"3\\n2\\n3\\n2\\n3\\n2\") == \"maybe\"\nassert solution(\"3\\n2\\n2\\n2\\n2\\n2\") == \"rated\"\nassert solution(\"3\\n2\\n2\\n2\\n2\\n2\\n3\\n2\\n2\\n2\\n2\\n2\") == \"rated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\\n2884 2884\\n\") == 'rated'\nassert solution(\"4\\n1300 1300\\n1200 1200\\n1400 1400\\n\") == 'unrated'\nassert solution(\"5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\\n\") =='maybe'\n\n-------------\n\n1. \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a\n2. \u0434\u043e\u0441\u0442\u0430\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n3. \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f\n4. \u0435\u0441\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\n    \u043c\u0435\u043d\u044f\u0435\u043c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u044b\n5. \u0435\u0441\u043b\u0438 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f\n    \u0435\u0441\u043b\u0438 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043d\u0435 \u0431\u044b\u043b\u043e, \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0447\u0442\u043e \u0441\u0440\u0435\u0434\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0435\u0441\u0442\u044c \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0435\n    \u0435\u0441\u043b\u0438 \u0431\u044b\u043b\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0447\u0442\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u0432\u0441\u0435\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435\n6. \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 sorted()\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n5\n2194 2194\n2876 2903\n2624 2624\n3007 2991\n2884 2884\n\n2194 2194\n2876 2903\n2624 2624\n3007 2991\n2884 2884\n\n1\n1300 1300\n1200 1200\n1400 1400\n\n1\n1300 1300\n1200 1200\n1400 1400\n\n2\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699\n\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699\n\n1\n1500 1500\n1300 1300\n1200 1200\n1400 1400\n\n1\n1500 1500\n1300 1300\n1200 1200\n1400 1400\n\n1\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699\n\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699\n\n-----------------\n\u0412\u0430\u0440\u0438\u0430\u043d\u0442 2\n\n1. \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432\n2. \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n3. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\n4. \u0415\u0441\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c \u0438\u043b\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\n    \u043c\u0435\u043d\u044f\u0435\u043c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u044b\n5. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c\n    \u0435\u0441\u043b\u0438 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043d\u0435 \u0431\u044b\u043b\u043e\n        \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0447\u0442\u043e \u043d\u0430\u0448 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\n    \u0435\u0441\u043b\u0438 \u0431\u044b\u043b \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n        \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0447\u0442\u043e \u0432\u0441\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435\n6. \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 sorted()\n\n-----------------------------------------\n\n1. \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432\n2. \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n3. \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430\n4. \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430\n5. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\n6."
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n3060 3060\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\\n2884 2884\\n\") == \"rated\"\nassert solution(\"4\\n1500 1500\\n1300 1300\\n1200 1200\\n1400 1400\\n\") == \"unrated\"\nassert solution(\"5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\\n\") == \"maybe\"\n\nprint(\"Successfully solved!\")\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"maybe\"\nassert solution(\"\") == \"maybe\"\nassert solution(\"\") == \"maybe\"\nassert solution(\"\") == \"maybe\"\nassert solution(\"\") == \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n3060 3060\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\\n2884 2884') == 'rated'\nassert solution('4\\n1500 1500\\n1300 1300\\n1200 1200\\n1400 1400') == 'unrated'\nassert solution('5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699') =='maybe'\nprint('all tests passed')\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3123 3123 2777 2246 2246 1699\") == 'rated'\nassert solution(\"1500 1500 1300 1300 1200 1400 1400\") == 'unrated'\nassert solution(\"3123 3123 2777 2246 2246 1699\") =='maybe'\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\") == \"rated\"\nassert solution(\"1500 1500\\n1300 1300\\n1200 1200\\n1400 1400\") == \"unrated\"\nassert solution(\"3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\") == \"maybe\"\n\"\"\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\") == \"rated\"\nassert solution(\"4\\n1500 1500\\n1300 1300\\n1200 1200\\n1400 1400\") == \"unrated\"\nassert solution(\"6\\n3060 3060\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\") == \"maybe\"\nassert solution(\"5\\n3123 3123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\") == \"maybe\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n2 1 0 3 0 0 3 2 4\") == \"2 1 0 1 0 0 1 2 3\"\nassert solution(\"5\\n0 1 2 3 4\") == \"0 1 2 3 4\"\nassert solution(\"7\\n5 6 0 1 -2 3 4\") == \"2 1 0 1 2 3 4\""
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\n2 1 0 3 0 0 3 2 4') == '2 1 0 1 0 0 1 2 3'\nassert solution('5\\n0 1 2 3 4') == '0 1 2 3 4'\nassert solution('7\\n5 6 0 1 -2 3 4') == '2 1 0 1 2 3 4'\n\nprint('Hooray!')"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6 0 1 -2 3 4\") == \"2 1 0 1 2 3 4\"\nassert solution(\"9 8 0 4 7 2 0 3 5 1\") == \"1 1 2 1 1 1 1 1 1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 2 1 0 3 0 0 3 2 4\") == \"2 1 0 1 0 0 1 2 3\"\nassert solution(\"5 6 0 1 -2 3 4\") == \"0 1 2 3 4\"\nassert solution(\"7 0 1 -2 3 4\") == \"2 1 0 1 2 3 4\"\n\"\"\""
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 0 3 4\") == \"2 1 0 1 2 3 4\"\n\"\"\"\n\nimport sys\nimport heapq\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    [\n        0,\n        1,\n        2,\n        3,\n        4,\n    ]\n) == [\n    0,\n    1,\n    2,\n    1,\n    2,\n]\n\"\"\""
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n2 1 0 3 0 0 3 2 4\") == \"2 1 0 1 0 0 1 2 3\"\nassert solution(\"5\\n0 1 2 3 4\") == \"0 1 2 3 4\"\nassert solution(\"7\\n5 6 0 1 -2 3 4\") == \"2 1 0 1 2 3 4\"\n\"\"\"\n\nn = int(stdin.readline())\narr = [int(num) for num in stdin.readline().split()]\ndists = [0] * n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n2 1 0 3 0 0 3 2 4\") == \"2 1 0 1 0 0 1 2 3\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 0 4 2 0 0 1 1 0\") == \"0 1 2 3 0 1 2 3 0 1 2 3\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3 4 2 0 1') == '2 1 0 1 2 3 4'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101010') == 3\nassert solution('101011') == 2\nassert solution('101101') == 3\nassert solution('101101101010') == 5\nassert solution('101101101010') == 5\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10010110101010') == '962'\nassert solution('100101101010') == '2'\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101010\") == \"18\"\nassert solution(\"1001010\") == \"338\"\nassert solution(\"1001011\") == \"372\"\nassert solution(\"111001010110\") == \"65520\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101010') == 3\nassert solution('11') == 2\nassert solution('101') == 2\n\"\"\""
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0110\") == \"1\"\nassert solution(\"1111\") == \"2\"\nassert solution(\"101010\") == \"2\"\nassert solution(\"10101010\") == \"3\"\nassert solution(\"1010101010\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"01\") == 3\nassert solution(\"11\") == 2\nassert solution(\"0\") == 1\nassert solution(\"10\") == 2\n\"\"\""
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11101\") == 3\nassert solution(\"101010\") == 2\nassert solution(\"111111\") == 7\nassert solution
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"27\"\nassert solution(\"110\") == \"10\"\nassert solution(\"110\") == \"10\"\nassert solution(\"1010\") == \"12\"\nassert solution(\"1110\") == \"6\"\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101010\") == 3\nassert solution(\"11101\") == 2\nassert solution(\"01101010\") == 3\nassert solution(\"01101011\") == 2\nassert solution(\"10110110\") == 4\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1010') == 2\nassert solution('11100101101100') == 962\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n-1 0\\n0 -1\\n1 0\\n1 1\") == '3 4'\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(input())\n\ndirs = defaultdict(int)\nvecs = []\n\nfor _ in range(n):\n    x, y = [int(num) for num in input().split()]\n    vecs.append((x, y))\n    dirs[(x, y)] += 1\n\nmin_angle = float('inf')\n\nfor a, b in combinations(vecs, 2):\n    x1, y1 = a\n    x2, y2 = b\n    angle = abs(math.atan2(y2 - y1, x2 - x1))\n    if angle < min_angle:\n        min_angle = angle\n        a, b = vecs.index(a) + 1, vecs.index(b) + 1\n\nprint(a, b)\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n-1 0\\n0 -1\\n1 0\\n1 1\") == \"3 4\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n-1 0\\n0 -1\\n1 0\\n1 1\\n\") == \"3 4\"\n\"\"\"\n\nimport sys\nfrom math import acos, pi\nfrom collections import defaultdict\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n-1 0\\n0 -1\\n1 0\\n1 1\\n') == '3 4'\n\nassert solution('6\\n-1 0\\n0 -1\\n1 0\\n1 1\\n-4 -5\\n-4 -6\\n') == '6 5'\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n-1 0\\n0 -1\\n1 0\\n1 1\") == \"3 4\"\nassert solution(\"6\\n-1 0\\n0 -1\\n1 0\\n1 1\\n-4 -5\\n-4 -6\") == \"6 5\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n-1 0\\n0 -1\\n1 0\\n1 1\\n\") == \"3 4\"\nassert solution(\"6\\n-1 0\\n0 -1\\n1 0\\n1 1\\n-4 -5\\n-4 -6\\n\") == \"6 5\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n-1 0\\n0 -1\\n1 0\\n1 1\") == \"3 4\"\nassert solution(\"6\\n-1 0\\n0 -1\\n1 0\\n1 1\\n-4 -5\\n-4 -6\") == \"6 5\""
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n-1 0\n0 -1\n1 0\n1 1''') == '3 4'\n\nassert solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6''') == '6 5'\n\nassert solution('''6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n\n1\n0\n-1\n0\n-1\n1\n0\n1\n\n5\n0\n1\n1\n0\n1\n\n3\n1\n0\n0\n0\n1\n''') == '2 4'\n\nassert solution('''4\n-1 0\n0 -1\n1 0\n1 1\n\n5\n-1 0\n0 -1\n1 0\n1 1\n\n6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n\n1\n0\n-1\n0\n-1\n1\n0\n1\n\n3\n1\n0\n0\n0\n1\n\n4\n-1 0\n0 -1\n1 0\n1 1\n\n3\n-1 0\n0 -1\n1 0\n1 1\n\n5\n0\n1\n1\n0\n1\n\n5\n0\n1\n0\n0\n0\n\n5\n1\n0\n0\n0\n1\n\n6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n\n6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n\n6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n\n6\n0\n1\n1\n0\n1\n\n6\n0\n0\n1\n1\n-4 -5\n-4 -6\n-1 -1\n\n6\n1\n0\n1\n1\n0\n\n6\n1\n0\n0\n0\n1\n\n5\n0\n0\n0\n1\n\n6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n\n6\n1 0\n0 -1\n0 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n\n6\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n0 0\n\n6\n1 0\n0 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n\n6\n-1 0\n-1 0\n0 0\n0 0\n0 0\n0 0\n\n4\n1\n0\n0\n1\n\n2\n1\n0\n0\n1\n\n1\n0\n0\n\n0\n''') == '1 3'\n\nassert solution('''4\n-1 0\n0 -1\n1 0\n1 1\n\n3\n1\n0\n0\n0\n1\n\n4\n-1 0\n0 -1\n1 0\n1 1\n\n5\n0\n1\n1\n0\n1\n\n6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n\n6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n\n6\n0\n1\n1\n0\n1\n\n6\n1\n0\n0\n0\n1\n\n6\n0\n1\n0\n0\n1\n\n5\n0\n1\n1\n0\n1\n\n6\n0\n1\n1\n0\n1\n\n6\n1\n0\n0\n0\n1\n\n6\n0\n1\n0\n0\n1\n\n5\n1\n1\n0\n1\n\n5\n0\n0\n0\n1\n\n6\n1\n0\n0\n0\n1\n\n6\n0\n1\n0\n0\n1\n\n6\n0\n1\n0\n0\n1\n\n5\n1\n1\n0\n1\n\n6\n1\n0\n0\n0\n1\n\n6\n0\n0\n1\n1\n-4 -5\n-4 -6\n-1 -1\n\n5\n0\n1\n0\n0\n1\n\n5\n0\n1\n0\n0\n0\n\n5\n0\n0\n0\n1\n\n6\n1\n0\n1\n1\n-4 -5\n-4 -6\n-1 -1\n\n6\n0\n1\n1\n0\n1\n\n6\n1\n0\n0\n0\n1\n\n6\n1\n0\n0\n0\n1\n\n6\n1\n0\n0\n0\n1\n\n6\n0\n1\n1\n0\n1\n\n6\n1\n0\n0\n0\n1\n\n6\n0\n0\n1\n1\n-4 -5\n-4 -6\n-1 -1\n\n6\n0\n0\n1\n1\n-4 -5\n-4 -6\n-1 -1\n\n6\n0\n1\n1\n0\n1\n\n6\n1\n0\n1\n0\n1\n\n6\n0\n1\n1\n1\n0\n\n5\n-1 0\n0 -1\n0 0\n0 0\n0 0\n\n4\n1\n0\n1\n0\n\n2\n0\n0\n0\n1\n\n2\n0\n1\n0\n0\n0\n\n3\n0\n0\n0\n1\n\n3\n0\n0\n0\n0\n\n3\n0\n0\n0\n0\n\n3\n0\n0\n0\n0\n\n3\n1\n0\n0\n0\n\n3\n0\n0\n0\n0\n\n3\n0\n0\n0\n0\n\n3\n0\n0\n0\n0\n\n3\n0\n0\n0\n0\n\n4\n1\n0\n0\n1\n\n5\n0\n0\n0\n0\n\n5\n0\n0\n0\n0\n\n5\n0\n0\n0\n0\n\n5\n0\n0\n0\n0\n\n5\n0\n0\n0\n0\n\n5\n0\n0\n0\n0\n\n5\n0\n0\n0\n0\n\n5\n0\n0\n0\n0\n\n5\n0\n0\n0\n0\n\n5\n0\n0\n0\n0\n\n6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n-1 -1\n\n6\n1 0\n0 -1\n1 0\n0 0\n0 0\n0 0\n0 0\n\n4\n-1 0\n0 -1\n1 0\n1 1\n\n5\n0\n0\n1\n0\n\n5\n0\n0\n0\n1\n\n5\n0\n1\n0\n0\n\n5\n0\n0\n0\n1\n\n5\n1\n0\n0\n0\n1\n\n5\n0\n0\n0\n1\n\n5\n0\n0\n0\n1\n\n5\n0\n1\n0\n0\n1"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n-1 0\\n0 -1\\n1 0\\n1 1\") == \"3 4\"\n\nassert solution(\"6\\n-1 0\\n0 -1\\n1 0\\n1 1\\n-4 -5\\n-4 -6\") == \"6 5\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n-1 0\\n0 -1\\n1 0\\n1 1') == '3 4'\nassert solution('6\\n-1 0\\n0 -1\\n1 0\\n1 1\\n-4 -5\\n-4 -6') == '6 5'\nprint(solution(stdin))"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\"\n\n\"\"\""
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 1 4 10') == '14'\nassert solution('5 2 1 4 5') == '13'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 1 4 10') == 14\nassert solution('5 2 1 4 5') == 13\n\"\"\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 1 4 10') == '14'\nassert solution('5 2 1 4 5') == '13'\n\"\"\"\n\nimport unittest\n\nd, k, a, b, t = [int(x) for x in input().split()]\n\nprint(d + k * (a - b) - t)\n\nclass TestSum(unittest.TestCase):\n    def test_simple(self):\n        self.assertEqual(solution(\"5 2 1 4 10\"), \"14\")"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\"\nassert solution(\"8 2 1 1 1\") == \"7\"\nassert solution(\"1 2 1 4 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1 4 10') == 14\nassert solution('5 2 1 4 5') == 13\n\"\"\"\nimport sys"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\"\n\"\"\""
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 1 4 10') == '14'\nassert solution('5 2 1 4 5') == '13'\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"1 2 3\"\nassert solution(\"8 3\") == \"1 2 6\"\n\"\"\"\n\nimport itertools\nimport math"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\") == '1 2 3'\nassert solution(\"8 2\") == '2 6'\nassert solution(\"5 3\") == '-1'\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n') == '1 2 3'\nassert solution('10 3\\n') == '1 2 4 5'\nassert solution('8 2\\n') == '2 4 6'\nassert solution('5 3\\n') == '-1'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 2\\n1 2 3\") == \"2 6\"\n\nassert solution(\"5 3\\n1 2 3 4\") == \"2 6\"\n\nassert solution(\"5 3\\n1 2 3 5\") == \"3 4\"\n\nassert solution(\"6 1\\n1 2 3 4 5 6\") == \"-1\"\n\nassert solution(\"8 4\\n1 2 3 4 5 6 7 8 9 10\") == \"2 4 8 10\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\") == '1 2 3'\nassert solution(\"8 2\") == '2 6'\nassert solution(\"5 3\") == '-1'\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3') == '1 2 3', 'Test 1'\nassert solution('8 2') == '2 6', 'Test 2'\nassert solution('5 3') == '-1', 'Test 3'\n\nprint('PASSED')\n\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3') == '1 2 3'\nassert solution('8 2') == '2 6'\nassert solution('5 3') == '-1'\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"2 6\"\nassert solution(\"8 2\") == \"2 6\"\nassert solution(\"10 10\") == \"2 6\"\nassert solution(\"11 2\") == \"-1\"\nassert solution(\"6 1\") == \"-1\"\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3\") == \"1 2 3\"\nassert solution(\"10 10\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"10 10 1\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"10 10 10\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"10 10 10 1\") == \"1 2 3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2 1'\nassert solution('3 2') == '1 2'\nassert solution('3 4') == '1 2 3'\nassert solution('5 7') == '1 2 3 4 5'\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 12\") == \"14\"\nassert solution(\"11 14\") == \"31\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"5 7\") == \"7\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"21 21\") == \"88\"\n\"\"\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6 12''') == '14'\nassert solution('''11 14''') == '31'\nassert solution('''1 5''') == '1'\nassert solution('''3 8''') == '5'\nassert solution('''5 7''') == '7'\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 4 2 5 1 5') == '3'\nassert solution('1 5 2 6 1 5') == '4'\nassert solution('2 1 3 2 1 3') == '3'\nassert solution('3 1 3 2 1 3') == '3'\nassert solution('5 1 5 2 6 1 5') == '3'\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7') == '7'\nassert solution('21 21') == '88'\nassert solution('6 12') == '14'\nassert solution('11 14') == '31'\nassert solution('1 5') == '1'\n\n'''\n\n\nn, m = map(int, input().split())\n\nmod = m % 5\n\nans = 0\nfor i in range(1, n+1):\n    ans += m//5\n    ans -= i//5\n    ans -= i//5\n\nprint(ans)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 12') == '14'\nassert solution('11 14') == '31'\nassert solution('1 5') == '1'\nassert solution('3 8') == '5'\nassert solution('5 7') == '7'\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 12\") == \"14\"\nassert solution(\"11 14\") == \"31\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"5 7\") == \"7\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7\") == \"7\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"6 12\") == \"14\"\nassert solution(\"11 14\") == \"31\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 12\") == '14'\n\n\"\"\"\n\nn, m = list(map(int, stdin.split()))\n\ncount = 0\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if (i + j) % 5 == 0:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5\") == \"1\"\nassert solution(\"2 8\") == \"2\"\nassert solution(\"3 7\") == \"5\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"6 12\") == \"14\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 -5 10 -4 1\") == \"15\"\nassert solution(\"5 -2\") == \"22\"\nassert solution(\"12 -3\") == \"42\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 -2\") == \"22\"\nassert solution(\"12 -3\") == \"0\"\nassert solution(\"5 10\") == \"0\"\n\"\"\""
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 -2\\n-3 8 -2 1 -6') == '22'\nassert solution('12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7') == '42'\nassert solution('5 10\\n-1 -2 -3 -4 -5') == '0'\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 -2\\n-3 8 -2 1 -6') == '22'\nassert solution('12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7') == '42'\nassert solution('5 10\\n-1 -2 -3 -4 -5') == '0'\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10\") == \"42\"\nassert solution(\"3 -2\") == \"22\"\n\"\"\""
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 -2\\n-3 8 -2 1 -6\") == \"22\"\nassert solution(\"5 10\\n-1 -2 -3 -4 -5\") == \"0\"\nassert solution(\"5 10\\n1 3 3 7 1 3 3 7 1 3 3 7\") == \"42\""
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 -2\\n-3 8 -2 1 -6') == '22'\nassert solution('5 10\\n-1 -2 -3 -4 -5') == '0'\nassert solution('12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7') == '42'\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 -2') == '22'\nassert solution('5 -3') == '0'\nassert solution('5 10') == '42'\nassert solution('5 -1') == '0'\nassert solution('12 -3') == '0'\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 -2\\n-3 8 -2 1 -6') == '22'\nassert solution('5 10\\n-1 -2 -3 -4 -5') == '0'\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 -2\\n-3 8 -2 1 -6\") == '22'\nassert solution(\"12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7\") == '42'\nassert solution(\"5 10\\n-1 -2 -3 -4 -5\") == '0'\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2 2 3') == '2'\nassert solution('2 3 4') == '3'\n\n'''\n\n\nimport sys\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\"\n\nprint(solution(\"2 3 4\"))\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n2 4 6\\n1 2 3') == '5'\nassert solution('3 3 1\\n2 4 6\\n1 2 3') == '2'\nassert solution('3 4 1\\n2 4 6\\n1 2 3') == '5'\nassert solution('1 10 5\\n2 4 6\\n1 2 3') == '5'\nassert solution('1 10 5\\n2 4 6\\n1 2 3') == '5'\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\""
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\"\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"1 10 5\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('23') == '5'\n\"\"\"\n\nk = int(input())\nk_1 = (k % 10 ** 12) // 10 ** 10\nk_2 = (k % 10 ** 10) // 10 ** 8\nk_3 = (k % 10 ** 8) // 10 ** 6\nk_4 = (k % 10 ** 6) // 10 ** 4\nk_5 = (k % 10 ** 4) // 10 ** 2\nk_6 = (k % 10 ** 2)\nprint(k_1, k_2, k_3, k_4, k_5, k_6)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '0'\nassert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('5') == '0'\nassert solution('6') == '0'\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123456789101112131415161718192021222324252627282930313233343536') == '5'\n\"\"\"\nimport math\n\nk = int(stdin.readline())\n\nnum = 123456789101112131415161718192021222324252627282930313233343536\n\nprint(int(math.log10(num)))\nprint(math.log10(k))\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'\n\"\"\""
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n1\n\"\"\"\n) == '1'\n\nassert solution(\n\"\"\"\n1\n\"\"\"\n) == '1'\n\nassert solution(\n\"\"\"\n1\n\"\"\"\n) == '1'\n\nassert solution(\n\"\"\"\n1\n\"\"\"\n) == '1'\n\nassert solution(\n\"\"\"\n1\n\"\"\"\n) == '1'"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"7\"\n) == \"7\"\n\nassert solution(\n    \"21\"\n) == \"5\"\n\nassert solution(\n    \"12345678910111213141516171819202122232425262728293031323334353637\"\n) == \"5\"\n\nassert solution(\n    \"1\" * 12\n) == \"1\"\nassert solution(\n    \"0\" * 12\n) == \"0\"\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'\n\n\"\"\"\n\nk = int(input())\nans = []\nnum = 1\nfor i in range(9, -1, -1):\n    ans.append(str(num % 10))\n    num = num * 10 + 9 - i\nprint(''.join(ans[:k-1]))\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"21\") == \"5\""
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 50\\n5 7\\n4 2\") == \"50\"\n\"\"\""
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 5 4\") == \"26\"\nassert solution(\"5 7\") == \"50\"\n\n\"\"\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 50\\n5 7\\n4 2\") == \"50\"\n\n\"\"\"\n\nn, m, r = list(map(int, input().split()))\ns, b = [], []\nfor i in range(n):\n    s.append(int(input()))\nfor i in range(m):\n    b.append(int(input()))\n\ns, b = sorted(s, reverse=True), sorted(b)\n\nprint(sum([b[i] * min(r // s[i], b[i]) for i in range(len(s))]))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 11\\n4 2 5\\n4 4 5 4') == 26\n\nassert solution('2 2 50\\n5 7\\n4 2') == 50\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 11\\n4 2 5\\n4 4 5 4\") == \"26\"\nassert solution(\"2 2 50\\n5 7\\n4 2\") == \"50\"\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 11\\n4 2 5\\n4 4 5 4\") == \"26\"\nassert solution(\"2 2 50\\n5 7\\n4 2\") == \"50\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 11\\n4 2 5\\n4 4 5 4') == 26\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 50\\n5 7\\n4 2\") == \"50\"\nassert solution(\"3 4 11\\n4 2 5\\n4 4 5 4\") == \"26\"\n\"\"\"\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 11\\n4 2 5\\n4 4 5 4') == '26'\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution\u0435"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"25\") == \"20\"\nassert solution(\"2\") == \"-1\"\n\"\"\""
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"7\") == \"8\"\nassert solution(\"10\") == \"10\"\nassert solution(\"11\") == \"12\"\nassert solution(\"13\") == \"14\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"2 1 1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"2 3\") == \"3 1 1 1 1 1 1 1 1 1 1 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"6\") == \"5\"\nassert solution(\"20\") == \"17\"\nassert solution(\"25\") == \"20\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == 3\nassert solution(25) == 20\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"25\") == \"20\"\nassert solution(\"2\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == '-1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == 10\nassert solution('20') == 20\nassert solution('30') == -1\nassert solution('41') == -1\nassert solution('45') == -1\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\\n4\\n\"\nassert solution(\"25\") == \"20\\n\"\nassert solution(\"2\") == \"-1\\n\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5) == 3\nassert solution(10) == 4\nassert solution(1) == -1\n\"\"\""
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\nabaccaba\\n1 1 1 1 1 1 1 1\") == \"8\"\nassert solution(\"8\\nabacaba\\n1 2 3 4 4 3 2 1\") == \"17\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\ninput_lines = open(sys.argv[1], \"r\").readlines()\n\nn = int(input_lines[0])\n\nstr_s = input_lines[1]\n\nb = list(map(int, input_lines[2].split()))\n\nb = list(dict.fromkeys(b))\n\ncount_s = Counter(str_s)"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacabac\") == \"8\"\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 1 1 1 1 1 1 1\") == 8\nassert solution(\"8 2 3 4 5 6 7 8\") == 26\nassert solution(\"8 3 4 5 6 7 8\") == 17\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\nabacabac\\n1 1 1 1 1 1 1 1\") == \"8\"\nassert solution(\"8\\nabaccaba\\n1 2 3 4 4 3 2 1\") == \"17\"\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacabac\") == 8\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacabac') == 8\nassert solution('abaccaba') == 17\nassert solution('abacaba') == 26\nassert solution('abcde') == 5\nassert solution('abcdedcba') == 14\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacabca') == '17'\nprint('Test pass.')\n\n\"\"\"\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacabac\") == 8\nassert solution(\"abaccaba\") == 17\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacabac\") == 8\nassert solution(\"abaccaba\") == 17\nassert solution(\"abacabca\") == 17\n\"\"\""
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\nabacabac\") == \"8\\n8\"\nassert solution(\"8\\nabaccaba\") == \"8\\n17\"\n\"\"\""
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n1 2') == 'YES'\nassert solution('2 3\\n5 3') == 'YES'\nassert solution('1 1\\n2 2') == 'YES'\nassert solution('100 99\\n100 50') == 'NO'\nassert solution('10 2\\n2 5') == 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7\\n') == 'YES'\nassert solution('100 99\\n') == 'YES'\nassert solution('100 50\\n') == 'NO'\nassert solution('100 100\\n') == 'NO'\n\nassert solution('3 3\\n') == 'YES'\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 50') == 'YES'\nassert solution('100 99') == 'YES'\nassert solution('100 50') == 'NO'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7\") == \"YES\"\nassert solution(\"100 99\") == \"YES\"\nassert solution(\"100 50\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\") == \"YES\"\nassert solution(\"100 99\") == \"YES\"\nassert solution(\"100 50\") == \"NO\""
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 7') == 'YES'\nassert solution('100 99') == 'YES'\nassert solution('100 50') == 'NO'\nassert solution('100 1000') == 'NO'"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3, 7) == \"YES\"\nassert solution(100, 50) == \"NO\"\n\nassert solution(2, 3) == \"YES\"\nassert solution(10, 10) == \"YES\"\n\nassert solution(100, 50) == \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7\") == 'YES'\nassert solution(\"100 99\") == 'YES'\nassert solution(\"100 50\") == 'NO'\n\n\"\"\""
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7') == 'YES'\nassert solution('100 99') == 'YES'\nassert solution('100 50') == 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7') == 'YES'\nassert solution('100 99') == 'YES'\nassert solution('100 50') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('1\\n') == 'Yes'\nassert solution('0\\n') == 'Yes'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == 'Yes'\nassert solution('0\\n2\\n3\\n4\\n5\\n') == 'No'\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"23 5\\n\") == \"Yes\\n3 3 2 1 0\"\n\"\"\"\n\n\n\nfrom collections import deque\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\") == 'No'\nassert solution(\"-1 -1\") == 'No'\nassert solution(\"1 2\") == 'No'\nassert solution(\"2 2\") == 'No'\nassert solution(\"-1 2\") == 'Yes'\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"23 5\") == \"Yes\"\nassert solution(\"13 2\") == \"No\"\nassert solution(\"1 2\") == \"Yes\"\nassert solution(\"5 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"23 5\") == \"Yes\\n3 3 2 1 0\"\nassert solution(\"13 2\") == \"No\"\nassert solution(\"1 2\") == \"Yes\\n-1 -1\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''23 5''') == \"Yes\\n3 3 2 1 0 \"\nassert solution('''13 2''') == \"No\"\nassert solution('''1 2''') == \"Yes\\n-1 -1 \"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23 5\") == \"Yes\\n3 3 2 1 0\"\nassert solution(\"13 2\") == \"No\"\nassert solution(\"1 2\") == \"Yes\\n-1 -1\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"23 5\") == \"Yes\\n3 3 2 1 0\"\n\"\"\"\n\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23 5\") == \"Yes\\n3 3 2 1 0\"\nassert solution(\"13 2\") == \"No\"\nassert solution(\"1 2\") == \"Yes\\n-1 -1\"\n\"\"\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('23 5\\n') == 'Yes\\n3 3 2 1 0'\n\n\"\"\"\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '3 5'\n) == 4\n\nassert solution(\n    '4 8'\n) == 6"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"4 8\") == \"6\"\nassert solution(\"8 2\") == \"4\"\nassert solution(\"7 4\") == \"2\"\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"4 8\") == \"6\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8') == '6'\n\n\"\"\"\n\nfrom typing import List\n\nclass Node:\n    def __init__(self, value: int):\n        self.value: int = value\n        self.left: Node = None\n        self.right: Node = None"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8') == 6\n\"\"\"\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5') == 4\nassert solution('4 8') == 6\nassert solution('2 2') == 1\nassert solution('5 5') == 5"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5') == '4'\nassert solution('4 8') == '6'\n\"\"\"\n\nn, t = map(int, input().split())\ng = [1]\nfor i in range(n):\n    g.append(g[-1]*2 + 1)\nprint(sum(g[:t+1]))\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\") == \"6\"\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8') == '6'\nassert solution('3 5') == '4'\nassert solution('4 5') == '6'\n\"\"\""
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5') == 4\nassert solution('4 8') == 6\n\n\"\"\"\nfrom math import ceil, log2"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n0 1\\n1 1\") == \"0.5\"\nassert solution(\"1\\n0 0\") == \"1\"\nassert solution(\"2\\n0 0\\n0 1\") == \"0\"\nassert solution(\"2\\n1 1\\n0 0\") == \"-1\"\nassert solution(\"4\\n0 0\\n1 1\\n1 1\\n0 0\") == \"1\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 0\\n1 1\") == \"1\"\n\nassert solution(\"1\\n1 1\") == \"-1\"\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '1'\nassert solution('2 3 4') == '-1'\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 1\\n2 2\") == \"1\"\nassert solution(\"1\\n1 1\") == \"-1\"\nassert solution(\"1\\n2 2\") == \"1\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n0 0\\n1 1') == '1\\n'\nassert solution('1\\n1 1') == '-1\\n'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n1 1\\n2 2\\n3 3') == '1'\nassert solution('1\\n1 1') == '-1'\nassert solution('2\\n1 1\\n2 2') == '1'\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\n\nd = {}\nfor i in range(n):\n    x, y = map(int, stdin.readline().split())\n    d[(x, y)] = i + 1\n\ns = set()\nfor i in range(1, n + 1):\n    x, y = d[(i, 0)]\n    s.add((x, y, x, y))\n    x, y = d[(0, i)]\n    s.add((x, y, x, y))\n\nfor i in range(1, n + 1):\n    x, y = d[(i, i)]\n    s.add((x, y, x, y))\n\nfor i in range(1, n + 1):\n    x, y = d[(0, i)]\n    s.add((x, y, x, y))\n\nprint('0' if len(s) == 0 else '1')\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 1\\n1 1\") == \"1\"\nassert solution(\"1\\n1 1\") == \"-1\""
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1 1\\n\") == \"1\"\nassert solution(\"2\\n1 1\\n0 0\\n\") == \"1\"\nassert solution(\"3\\n1 1\\n0 0\\n1 1\\n\") == \"1\"\nassert solution(\"4\\n1 1\\n0 0\\n1 1\\n0 1\\n\") == \"1\"\nassert solution(\"1\\n1 1\\n\") == \"1\"\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0\\n1 1') == '1\\n'\nassert solution('1\\n1 1') == '-1\\n'\nassert solution('4\\n0 0\\n1 1\\n2 2\\n3 3') == '4\\n'\n\"\"\"\n\nn = int(input())\ncoordinates = []\n\nfor _ in range(n):\n    x, y = map(int, input().split())\n    coordinates.append([x, y])\n\nx = coordinates[0][0]\ny = coordinates[0][1]\narea = 0\n\nfor i in range(n):\n    if coordinates[i][0] == x:\n        area += y\n        x = coordinates[i][0]\n        y = coordinates[i][1]\n    elif coordinates[i][0] < x:\n        area -= y\n        x = coordinates[i][0]\n        y = coordinates[i][1]\n    else:\n        area += y\n        x = coordinates[i][0]\n        y = coordinates[i][1]\n\nprint(area)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0\\n1 1\") == \"1\"\nassert solution(\"1\\n1 1\") == \"-1\""
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1\\n2') == '1'\nassert solution('5\\n3\\n4') == '6'\nassert solution('6\\n4\\n2') == '4'\n\"\"\""
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(8, 1, 2) == 1\nassert solution(5, 3, 4) == 6\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1\\n2\\n') == '1'\nassert solution('5\\n3\\n4\\n') == '6'\nassert solution('6\\n4\\n2\\n') == '4'\nassert solution('20\\n5\\n6\\n') == '2'\nprint('test passed')\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 1 2\") == \"1\"\nassert solution(\"5 3 4\") == \"6\"\nassert solution(\"6 4 2\") == \"4\""
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1\\n2\") == \"1\"\nassert solution(\"5\\n3\\n4\") == \"6\"\nassert solution(\"6\\n4\\n2\") == \"4\"\nassert solution(\"20\\n5\\n6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1\\n2\") == \"1\"\nassert solution(\"5\\n3\\n4\") == \"6\"\nassert solution(\"6\\n4\\n2\") == \"4\"\nassert solution(\"20\\n5\\n6\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n1\\n2') == '1'\nassert solution('5\\n3\\n4') == '6'\nassert solution('6\\n4\\n2') == '4'\nassert solution('20\\n5\\n6') == '2'"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n1\\n2') == '1'\nassert solution('5\\n3\\n4') == '6'\nassert solution('6\\n4\\n2') == '4'\nassert solution('20\\n5\\n6') == '2'\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n4\\n2') == '2'\nassert solution('8\\n1\\n2') == '1'\nassert solution('20\\n5\\n6') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 2 2\") == \"1\"\nassert solution(\"5 3 4\") == \"6\"\nassert solution(\"6 4 2\") == \"4\"\nassert solution(\"20 5 6\") == \"2\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 6\") == \"NO\"\nassert solution(\"4\\n1 2 5 6\") == \"NO\"\n\"\"\"\n\n\"\"\"\n[\n    {'a_0': 1, 'a_1': 2, 'a_2': 5, 'a_3': 3, 'a_4': 4, 'a_5': 6},\n    {'a_0': 1, 'a_1': 2, 'a_2': 5, 'a_3': 4, 'a_4': 3, 'a_5': 6},\n    {'a_0': 1, 'a_1': 2, 'a_2': 5, 'a_3': 3, 'a_4': 6, 'a_5': 4},\n    {'a_0': 1, 'a_1': 2, 'a_2': 5, 'a_3': 4, 'a_4': 6, 'a_5': 3},\n    {'a_0': 1, 'a_1': 2, 'a_2': 5, 'a_3': 6, 'a_4': 3, 'a_5': 4},\n    {'a_0': 1, 'a_1': 2, 'a_2': 5, 'a_3': 6, 'a_4': 4, 'a_5': 3}\n]\n\"\"\""
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 2 5 3 4 6\\n01110\") == \"YES\"\nassert solution(\"6\\n1 2 5 3 4 6\\n01010\") == \"NO\"\nassert solution(\"6\\n1 2 5 3 4 6\\n11010\") == \"NO\"\n\n----"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 2 5 3 4 6\\n01110\") == \"YES\"\nassert solution(\"6\\n1 2 5 3 4 6\\n01010\") == \"NO\"\nassert solution(\"2\\n1 2\\n10\") == \"NO\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 2 5 3 4 6\\n01110') == 'YES'\nassert solution('6\\n1 2 5 3 4 6\\n01010') == 'NO'\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 4 3 5') == 'YES'\nassert solution('5\\n1 2 4 3 5') == 'NO'\nassert solution('6\\n1 2 5 3 4 6') == 'YES'\nassert solution('6\\n1 2 5 3 4 6') == 'NO'\nassert solution('7\\n1 2 3 4 5 6 7') == 'YES'\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1 3 5 6') == 'YES'\nassert solution('4 2 1 3 6 5') == 'NO'\nassert solution('4 2 1 3 6 5 7 8 9 10 11 12') == 'YES'\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\nd = list(input())\n\narr.sort()\nfor i in range(n - 1):\n    if d[i] == '1':\n        if arr[i] > arr[i + 1]:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            print('YES')\n            print(*arr)\n            break\n    if i == n - 2 and d[i] == '1':\n        print('NO')\n        break"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 5 3 4 6\") == \"YES\"\nassert solution(\"1 2 5 3 4 6\") == \"YES\"\nassert solution(\"1 2 5 3 4 6\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 5 3 4 6\") == \"YES\"\nassert solution(\"1 2 5 3 4 6\") == \"NO\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\na = sys.stdin.readline().split()\n\nmasks = sys.stdin.readline().strip('0')\n\nprint('YES' if sum([1 for i in range(len(masks)) if masks[i] == '1']) <= len(masks)//2 else 'NO')"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 2 5 3 4 6\\n01110\") == \"YES\"\nassert solution(\"6\\n1 2 5 3 4 6\\n01010\") == \"NO\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 5 3 4 6\\n010\") == \"YES\"\nassert solution(\"6\\n1 2 5 3 4 6\\n01110\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4a\") == \"11\"\nassert solution(\"1f\") == \"1\"\nassert solution(\"5e\") == \"18\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1f') == '1'\nassert solution('2d') == '10'\nassert solution('4a') == '11'\nassert solution('5e') == '18'\n\"\"\"\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1f') == '1'\nassert solution('2d') == '10'\nassert solution('4a') == '11'\nassert solution('5e') == '18'\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1f') == '1'\nassert solution('2d') == '10'\nassert solution('4a') == '11'\nassert solution('5e') == '18'\nprint('PASSED')\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1a') == '1'\nassert solution('1b') == '2'\nassert solution('1c') == '3'\nassert solution('1d') == '4'\nassert solution('1e') == '5'\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1f') == '1'\nassert solution('2d') == '10'\nassert solution('4a') == '11'\nassert solution('5e') == '18'\nprint('test passed')\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1f\") == \"1\"\nassert solution(\"2d\") == \"10\"\nassert solution(\"4a\") == \"11\"\nassert solution(\"5e\") == \"18\"\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1f') == '1'\nassert solution('2d') == '10'\nassert solution('4a') == '11'\nassert solution('5e') == '18'\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1f\") == \"1\"\nassert solution(\"2d\") == \"10\"\nassert solution(\"4a\") == \"11\"\nassert solution(\"5e\") == \"18\"\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1a') == '1'\nassert solution('3b') == '3'\nassert solution('5f') == '6'\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n6 2\n1 0 1 1 1 1\n2 10\n4 7\n''') == '='\nassert solution('''\n3 3\n1 0 2\n2 5\n2 4\n''') == '<'\nassert solution('''\n7 16\n15 15 4 0 0 7 10\n7 9\n4 8 0 3 1 5 0\n''') == '>'\n\nprint('Success')\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2\\n1 0 1 1 1 1\\n2 10\\n4 7') == '='\n\nassert solution('3 3\\n1 0 2\\n2 5\\n2 4') == '<'\n\nassert solution('7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0') == '>'\n\n\"\"\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\") == \"=\"\nassert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\") == \"<\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \">\""
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\") == '='\nassert solution(\"3 3\\n1 0 2\") == '<'\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == '>'\n\"\"\"\n\nimport unittest\nfrom sys import stdin\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \">\", \"The result should be '>'\"\nassert solution(\"5 3\") == \"=\", \"The result should be '='\"\nassert solution(\"4 2\") == \"<\", \"The result should be '<'\"\nassert solution(\"7 16\") == \"<\", \"The result should be '<'\"\n\nassert solution(\"7 16\") == \"<\", \"The result should be '<'\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\") == \"=\"\nassert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\") == \"<\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \">\"\n\n\n\n\n-----Tests-----\n\nInput:\n7 16\n15 15 4 0 0 7 10\n7 9\n4 8 0 3 1 5 0\n\nOutput:\n>\n\nInput:\n6 2\n1 0 1 1 1 1\n2 10\n4 7\n\nOutput:\n=\n\nInput:\n3 3\n1 0 2\n2 5\n2 4\n\nOutput:\n<\n\nInput:\n7 16\n15 15 4 0 0 7 10\n7 9\n4 8 0 3 1 5 0\n\nOutput:\n>\n\n\n\"\"\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\") == \"=\"\nassert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\") == \">\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \"<\"\n\"\"\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2\\n1 0 1 1 1 1\\n2 10\\n4 7') == '='\nassert solution('3 3\\n1 0 2\\n2 5\\n2 4') == '<'\nassert solution('7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0') == '>'\n\n\"\"\""
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\") == \"=\"\nassert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\") == \"<\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \">\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n1 0 1 1 1 1\\n2 10\\n4 7\") == \"=\"\nassert solution(\"3 3\\n1 0 2\\n2 5\\n2 4\") == \"<\"\nassert solution(\"7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0\") == \">\"\n\"\"\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"BitLGM\"\nassert solution(\"2 2\") == \"BitAryo\"\nassert solution(\"3 2 1\") == \"BitLGM\"\n\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict\n\nn = int(sys.stdin.readline().rstrip())\nsequence = list(map(int, sys.stdin.readline().rstrip().split()))\n\nsequence_dp = defaultdict(int)\nsequence_dp[0] = 0\nsequence_dp[1] = sequence[0]\nfor i in range(2, n + 1):\n    sequence_dp[i] = sequence[i - 1] + min(sequence_dp[i - 1], sequence_dp[i - 2])\nprint(\"BitLGM\" if sequence_dp[n] < sequence[n - 1] + min(sequence_dp[n - 1], sequence_dp[n - 2]) else \"BitAryo\")\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n2 2\") == \"BitLGM\"\nassert solution(\"1 2\\n2 1\") == \"BitAryo\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"BitLGM\"\nassert solution(\"1 2\") == \"BitAryo\"\nassert solution(\"1 1\") == \"BitLGM\"\n\n\"\"\""
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\") == \"BitAryo\"\nassert solution(\"3 1 2 1\") == \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == 'BitLGM'\nassert solution('1 2') == 'BitAryo'\nassert solution('1 1') == 'BitLGM'\nassert solution('1 2') == 'BitAryo'"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == 'BitLGM'\nassert solution(\"1 2\") == 'BitAryo'\nassert solution(\"2 1 1\") == 'BitLGM'\n\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n1 2\") == \"BitLGM\"\nassert solution(\"2 1 1\\n2 2\") == \"BitAryo\"\n\"\"\""
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"BitLGM\"\nassert solution(\"2 1 2\") == \"BitAryo\""
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'BitLGM'\nassert solution('1 2') == 'BitAryo'\nassert solution('1 1') == 'BitLGM'\nassert solution('1 2') == 'BitAryo'\nassert solution('2 2') == 'Draw'\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2 8') == '4'\nprint('Test pass.')\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"4\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"4\"\nassert solution(\"3 6\") == \"1\"\n\nassert solution(\"12 9 10 7 2 8 5 1 3\") == \"0\"\nassert solution(\"20 10 7 2 8 5 1 3\") == \"0\"\nassert solution(\"20 10 7 2 8 5 1 3\") == \"0\"\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2 8\") == '4'\n\n\"\"\"\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n6 2 8\") == \"4\"\nassert solution(\"3 6\\n9 1 14\") == \"1\"\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 8\") == 4\n\"\"\"\nimport math\nfrom collections import Counter\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2 8') == '4'\nassert solution('3 6 9') == '1'\n\n'''\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"4\"\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"4\"\nassert solution(\"3 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4') == '4'\nassert solution('3 6') == '1'\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2') == 'YES'\nassert solution('6 3') == 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"YES\"\nassert solution(\"6 3\") == \"NO\"\nassert solution(\"aaba\") == \"YES\"\nassert solution(\"aacaab\") == \"NO\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 aabb\") == \"YES\"\nassert solution(\"6 3 aacaab\") == \"NO\"\nassert solution(\"4 2 bbbb\") == \"NO\"\nassert solution(\"4 2 aabab\") == \"YES\"\nassert solution(\"4 2 aabb\") == \"YES\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\naabb\") == \"YES\"\nassert solution(\"6 3\\naacaab\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 aabb\") == \"YES\"\nassert solution(\"6 3 aacaab\") == \"NO\"\nprint(\"Success\")\n\"\"\""
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\naaa\\nbb\\ncc\\ndd\\nee\\n\") == \"NO\"\nassert solution(\"4 2\\naa\\nbb\\ncc\\ndd\\n\") == \"YES\"\nassert solution(\"4 3\\naa\\nbb\\ncc\\ndd\\n\") == \"NO\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\naabb') == 'YES'\nassert solution('6 3\\naacaab') == 'NO'\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\ns = [i for i in input()]\n\ns_count = dict()\nfor i in s:\n    if i not in s_count:\n        s_count[i] = 1\n    else:\n        s_count[i] += 1\n\nfor i in range(k):\n    if s_count[s[i]] >= n // k:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\naabb') == 'YES'\nassert solution('6 3\\naacaab') == 'NO'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabb\") == \"YES\"\nassert solution(\"aacaab\") == \"NO\"\nassert solution(\"aaaaba\") == \"NO\"\nassert solution(\"aaaabb\") == \"YES\"\nassert solution(\"aabbbb\") == \"NO\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 aabb\") == \"YES\"\nassert solution(\"6 3 aacaab\") == \"NO\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 5 6 5') == '2'\nassert solution('9 2 1 3 5 4 1 2 3 1') == '3'\nprint('Test pass.')"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"5 6 5\") == \"2\"\nassert solution(\"9 2 1 3 5 4 1 2 3 1\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n3 3\n\"\"\") == '1'\nassert solution(\"\"\"3\n5 6 5\n\"\"\") == '2'\nassert solution(\"\"\"9\n2 1 3 5 4 1 2 3 1\n\"\"\") == '3'\nassert solution(\"\"\"2\n2 1\n\"\"\") == '1'\nassert solution(\"\"\"2\n3 1\n\"\"\") == '1'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 5 6 5') == '2'\nassert solution('9 2 1 3 5 4 1 2 3 1') == '3'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n3 3\n''') == '1'\nassert solution('''3\n3 1\n''') == '2'\nassert solution('''9\n2 1 3 5 4 1 2 3 1\n''') == '3'\n\"\"\""
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 3') == '1'\nassert solution('3\\n5 6 5') == '2'\nassert solution('9\\n2 1 3 5 4 1 2 3 1') == '3'\n\"\"\""
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5 6 5\") == \"1\"\nassert solution(\"9\\n2 1 3 5 4 1 2 3 1\") == \"3\""
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5 6 5') == '1'\nassert solution('9\\n2 1 3 5 4 1 2 3 1') == '3'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3') == '1'\nassert solution('5 6 5') == '2'\nassert solution('9 2 1 3 5 4 1 2 3 1') == '3'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"5 6 5\") == \"2\"\nassert solution(\"9 2 1 3 5 4 1 2 3 1\") == \"3\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 1 2\") == \"3/7\"\nassert solution(\"10 3 2\") == \"3/10\"\n\"\"\""
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\n\"\"\"\n\nimport collections\nimport math"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\nassert solution(\"7 1 2\") == \"3/7\"\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\nassert solution(\"7 1 2\") == \"3/7\"\n\n-----Test 14----\n3 4 1\n7 4 2\n7 2 2\n5 2 1\n7 1 1\n4 1 1\n5 1 1\n5 3 1\n4 2 1\n\n-----Test 15----\n1 2 1\n3 2 1\n3 3 1\n3 4 1\n4 3 1\n5 4 1\n5 5 1\n5 6 1\n5 7 1\n6 7 1\n7 8 1\n8 9 1\n9 10 1\n10 11 1\n11 12 1\n12 13 1\n13 14 1\n14 15 1\n15 16 1\n16 17 1\n17 18 1\n18 19 1\n19 20 1\n20 21 1\n21 22 1\n22 23 1\n23 24 1\n24 25 1\n25 26 1\n26 27 1\n27 28 1\n28 29 1\n29 30 1\n30 31 1\n31 32 1\n32 33 1\n33 34 1\n34 35 1\n35 36 1\n36 37 1\n37 38 1\n38 39 1\n39 40 1\n40 41 1\n41 42 1\n42 43 1\n43 44 1\n44 45 1\n45 46 1\n46 47 1\n47 48 1\n48 49 1\n49 50 1\n50 51 1\n51 52 1\n52 53 1\n53 54 1\n54 55 1\n55 56 1\n56 57 1\n57 58 1\n58 59 1\n59 60 1\n60 61 1\n61 62 1\n62 63 1\n63 64 1\n64 65 1\n65 66 1\n66 67 1\n67 68 1\n68 69 1\n69 70 1\n70 71 1\n71 72 1\n72 73 1\n73 74 1\n74 75 1\n75 76 1\n76 77 1\n77 78 1\n78 79 1\n79 80 1\n80 81 1\n81 82 1\n82 83 1\n83 84 1\n84 85 1\n85 86 1\n85 87 1\n86 88 1\n86 89 1\n87 90 1\n87 91 1\n88 92 1\n88 93 1\n88 94 1\n88 95 1\n86 96 1\n86 97 1\n86 98 1\n86 99 1\n87 100 1\n87 101 1\n87 102 1\n87 103 1\n87 104 1\n87 105 1\n87 106 1\n87 107 1\n87 108 1\n87 109 1\n87 110 1\n87 111 1\n87 112 1\n87 113 1\n87 114 1\n87 115 1\n87 116 1\n87 117 1\n87 118 1\n87 119 1\n87 120 1\n87 121 1\n87 122 1\n87 123 1\n87 124 1\n87 125 1\n87 126 1\n87 127 1\n87 128 1\n87 129 1\n87 130 1\n87 131 1\n87 132 1\n87 133 1\n87 134 1\n87 135 1\n87 136 1\n87 137 1\n87 138 1\n87 139 1\n87 140 1\n87 141 1\n87 142 1\n87 143 1\n87 144 1\n87 145 1\n87 146 1\n87 147 1\n87 148 1\n87 149 1\n87 150 1\n87 151 1\n87 152 1\n87 153 1\n87 154 1\n87 155 1\n87 156 1\n87 157 1\n87 158 1\n87 159 1\n87 160 1\n87 161 1\n87 162 1\n87 163 1\n87 164 1\n87 165 1\n87 166 1\n87 167 1\n87 168 1\n87 169 1\n87 170 1\n87 171 1\n87 172 1\n87 173 1\n87 174 1\n87 175 1\n87 176 1\n87 177 1\n87 178 1\n87 179 1\n87 180 1\n87 181 1\n87 182 1\n87 183 1\n87 184 1\n87 185 1\n87 186 1\n87 187 1\n87 188 1\n87 189 1\n87 190 1\n87 191 1\n87 192 1\n87 193 1\n87 194 1\n87 195 1\n87 196 1\n87 197 1\n87 198 1\n87 199 1\n87 200 1\n87 201 1\n87 202 1\n87 203 1\n87 204 1\n87 205 1\n87 206 1\n87 207 1\n87 208 1\n87 209 1\n87 210 1\n87 211 1\n87 212 1\n87 213 1\n87 214 1\n87 215 1\n87 216 1\n87 217 1\n87 218 1\n87 219 1\n87 220 1\n87 221 1\n87 222 1\n87 223 1\n87 224 1\n87 225 1\n87 226 1\n87 227 1\n87 228 1\n87 229 1\n87 230 1\n87 231 1\n87 232 1\n87 233 1\n87 234 1\n87 235 1\n87 236 1\n87 237 1\n87 238 1\n87 239 1\n87 240 1\n87 241 1\n87 242 1\n87 243 1\n87 244 1\n87 245 1\n87 246 1\n87 247 1\n87 248 1\n87 249 1\n87 250 1\n87 251 1\n87 252 1\n87 253 1\n87 254 1\n87 255 1\n87 256 1\n87 257 1\n87 258 1\n87 259 1\n87 260 1\n87 261 1\n87 262 1\n87 263 1\n87 264 1\n87 265 1\n87 266 1\n87 267 1\n87 268 1\n87 269 1\n87 270 1\n87 271 1\n87 272 1\n87 273 1\n87 274 1\n87 275 1\n87 276 1\n87 277 1\n87 278 1\n87 279 1\n87 280 1\n87 281 1\n87 282 1\n87 283 1\n87 284 1\n87 285 1\n87 286 1\n87 287 1\n87 288 1\n87 289 1\n87 290 1\n87 291 1\n87 292 1\n87 293 1\n87 294 1\n87 295 1\n87 296 1\n87 297 1\n87 298 1\n87 299 1\n87 300 1\n87 301 1\n87 302 1\n87 303 1\n87 304 1\n87 305 1\n87 306 1\n87 307 1\n87 308 1\n87 309 1\n87 310 1\n87 311 1\n87 312 1\n87 313 1\n87 314 1\n87 315 1\n87 316 1\n87 317 1\n87 318 1\n87 319 1\n87 320 1\n87 321 1\n87 322 1\n87 323 1\n87 324 1\n87 325 1\n87 326 1\n87 327 1\n87 328 1\n87 329 1\n87 330 1\n87 331 1\n87 332 1\n87 333 1\n87 334 1\n87 335 1\n87 336 1\n87 337 1\n87 338 1\n87 339 1\n87 340 1\n87 341 1\n87 342 1\n87 343 1\n87 344 1\n87 345 1\n87 346 1\n87 347 1\n87 348 1\n87 349 1\n87 350 1\n87 351 1\n87 352 1\n87 353 1\n87"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(10, 3, 2) == 3/10\nassert solution(7, 1, 2) == 3/7\n\"\"\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '1/2'\nassert solution('2 3 2') == '0/1'\nassert solution('7 1 2') == '0/7'\n\n----"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 1 2\") == \"3/7\"\nassert solution(\"10 3 2\") == \"3/10\"\nassert solution(\"5 5 5\") == \"1/5\"\nassert solution(\"4 5 2\") == \"1/2\"\nassert solution(\"5 3 2\") == \"1/2\"\n\"\"\"\nfrom fractions import Fraction\nimport math"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 1 2\\n\") == \"3/7\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\n\"\"\"\nfrom math import ceil, floor\n\nt, w, b = map(int, input().split())"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3 2\n''') == '3/5'\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7 0\") == \"-\"\nassert solution(\"2 0 1\") == \"+\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 1\") == \"?\"\n\"\"\"\nimport sys"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7 0\") == \"-\"\nassert solution(\"2 0 1\") == \"+\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 1\") == \"?\""
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7 0\") == \"-\"\nassert solution(\"2 0 1\") == \"+\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 1\") == \"?\"\n\n\"\"\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7 0\") == \"-\", \"Not enough downvotes\"\nassert solution(\"2 0 1\") == \"+\", \"Too many upvotes\"\nassert solution(\"1 1 0\") == \"0\", \"Neither upvotes nor downvotes\"\nassert solution(\"0 0 1\") == \"?\", \"Result is uncertain\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 7 0') == '-'\nassert solution('2 0 1') == '+'\nassert solution('1 1 0') == '0'\nassert solution('0 0 1') == '?'\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7 0\") == '-'\nassert solution(\"2 0 1\") == '+'\nassert solution(\"1 1 0\") == '0'\nassert solution(\"0 0 1\") == '?'"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 0 1\") == \"?\"\nassert solution(\"0 0 1\") == \"+\"\nassert solution(\"3 7 0\") == \"-\"\nassert solution(\"0 0 1\") == \"?\"\n\"\"\"\nimport collections\nfrom typing import Dict\nfrom collections import Counter"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7 0\") == \"-\"\nassert solution(\"2 0 1\") == \"+\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 1\") == \"?\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7 0') == '-'\nassert solution('2 0 1') == '+'\nassert solution('1 1 0') == '0'\nassert solution('0 0 1') == '?'\n\"\"\""
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7 0\") == \"-\"\nassert solution(\"2 0 1\") == \"+\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 1\") == \"?\""
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RURUU') == 3\nassert solution('DDRR') == 1\nassert solution('LRLRUU') == 1\nassert solution('UUU') == 0\nassert solution('UUUDU') == 0\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRUU\") == \"1\"\nassert solution(\"RRR\") == \"0\"\nassert solution(\"RUUL\") == \"1\"\nassert solution(\"RUU\") == \"3\"\nassert solution(\"RUUU\") == \"3\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RURUU\") == \"3\"\nassert solution(\"RULR\") == \"0\"\nassert solution(\"UUU\") == \"-\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RURUU') == 3\nassert solution('UUU') == 0\nassert solution('UDD') == -1\nassert solution('LURDUDRDRUDDRLDRD') == 3\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n        \"\"\"\n        5\n        RURUU\n        -2 3\n        \"\"\"\n    ) == 3\n\nassert solution(\n        \"\"\"\n        4\n        UULR\n        1 1\n        \"\"\"\n    ) == 0\n\nassert solution(\n        \"\"\"\n        3\n        UUU\n        100 100\n        \"\"\"\n    ) == -1\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RURUU\") == \"3\"\nassert solution(\"RRUUU\") == \"1\"\nassert solution(\"UDRUDLULRDRLDRDRLD\") == \"1\"\nassert solution(\"DUDRLDRLDRDRLDDUDRDRLDRDR\") == \"4\"\nassert solution(\"DUUDRLDRDRLLDRDRLDUUDRDRDRDRDRDRDRLDUUDRDRLDRDRDRDUUDDRDRLDRDRDRLDUUDRDRLDUDRDRDRDRDUDDUUDRDRLDRDRDRDRDRLUDUUDRDRDRDRDRDRDRDLUUDRDRDRDRDRDRDRLDUUDRDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUUDRDRDRDRDRDRDRLDUUDRDRDRDRDRDRDRLDUUDRDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUUDRDRDRDRDRDRDRLDUUDRDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUUDRDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUUDRDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUUDRDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUUDRDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDRDRLDUDRDRDRDRDR"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RURUU\") == \"3\"\nassert solution(\"UUU\") == \"0\"\nassert solution(\"RULR\") == \"0\"\nassert solution
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RURUU\") == \"3\"\nassert solution(\"UUU\") == \"0\"\nassert solution(\"RULR\") == \"0\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RURUU') == '3'\nassert solution
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"010010\") == 3\nassert solution(\"10101\") == 1\nassert solution(\"111111\") == -1\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"010010\") == 3\nassert solution(\"10101\") == 1\nassert solution(\"10010\") == -1\n\"\"\""
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101010') == 3\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10010\") == 3\nassert solution(\"100101001010\") == 3\nassert solution(\"10101\") == 1\n\"\"\"\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('01101') == 1\nassert solution('1111') == 2\nassert solution('100101') == 3\nassert solution('1101010') == -1\nassert solution('1101011') == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"010010\") == 3\n\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10101010\") == 3\n\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom pytest import mark\n\nfrom utils import timed\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0110111111\") == 3\nassert solution(\"1110111010\") == 1\nassert solution(\"1110111010\") == 1\nassert solution(\"1110111010\") == 1\nassert solution(\"1110111010\") == 1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10000010\") == 3\n\"\"\"\nimport math\n\nfrom collections import defaultdict\n\nT = int(input())\n\nfor t in range(T):\n    n, x = map(int, input().split())\n    s = input()\n    d = defaultdict(lambda: 0)\n    for i in range(n):\n        d[s[i]] += 1\n    cnt_0 = d[0]\n    cnt_1 = d[1]\n    cnt_0_1 = n - cnt_0 - cnt_1\n    if cnt_0_1!= 0:\n        if cnt_0_1 < x:\n            print(-1)\n            continue\n        else:\n            cnt_0_1 -= x\n    if cnt_0 == 0:\n        print(0)\n        continue\n    k = cnt_0\n    while k < cnt_0_1:\n        k += x\n        if k > cnt_0_1:\n            k = cnt_0_1\n        cnt_0_1 -= k\n        cnt_0 += k\n    if cnt_0 < cnt_0_1:\n        cnt_0 += cnt_0_1\n        cnt_0_1 = 0\n    print(cnt_0 + cnt_1)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10010\") == 3\nassert solution(\"01010\") == 0\nassert solution(\"10101\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"30020 3\") == \"1\"\nassert solution(\"100 9\") == \"2\"\nassert solution(\"10203049 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"30020 3\") == \"1\"\nassert solution(\"100 9\") == \"2\"\nassert solution(\"10203049 2\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10203049 2') == '3'\nassert solution('100 9') == '2'\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''30020 3''') == '1'\nassert solution('''100 9''') == '2'\nassert solution('''10203049 2''') == '3'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"30020 3\") == '1'\nassert solution(\"100 9\") == '2'\nassert solution(\"10203049 2\") == '3'\n\"\"\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('30020 3') == '1'\n\"\"\"\nfrom math import log"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 20 30 49') == '2'\n\"\"\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('30020 3') == '1'\nassert solution('10203049 2') == '3'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('30020 3') == '1'\nassert solution('100 9') == '2'\nassert solution('10203049 2') == '3'\n\"\"\"\n\nimport math\nfrom typing import List"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10203049 2\") == \"3\"\nassert solution(\"100 9\") == \"2\"\nassert solution(\"1000 20 30 49\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 8 1 1\") == '3 2 3'\n\"\"\"\nimport math"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 9 4 2') == '2 1 1'\nassert solution('100 100 1000000000000000000 100 100') == '101010101010101 50505050505051 50505050505051'\nprint(\"Passed\")\n\n\nimport numpy as np"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 9 4 2\") == \"2 1 1\"\n\"\"\"\nimport sys\nfrom collections import deque\n\nn, m, k, x, y = map(int, sys.stdin.readline().split())\n\ngrid = [[0 for j in range(m + 1)] for i in range(n + 1)]"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 8 1 1') == '3 2 3'\nassert solution('4 2 9 4 2') == '2 1 1'\nassert solution('5 5 25 4 3') == '1 1 1'\nassert solution('100 100 1000000000000000000 100 100') == '101010101010101 50505050505051 50505050505051'\n\"\"\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3 8 1 1\\n') == '3 2 3'\nassert solution('4 2 9 4 2\\n') == '2 1 1'\nassert solution('5 5 25 4 3\\n') == '1 1 1'\nassert solution('100 100 1000000000000000000 100 100\\n') == '101010101010101 50505050505051 50505050505051'\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7 8 9') == '9 9 9'\nassert solution('1 2 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5') == '11 11 11'\nassert solution('5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5') == '12 12 12'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 8 1 1\") == \"3 2 3\"\nassert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"5 5 25 4 3\") == \"1 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n\n\"\"\""
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 8 1 1\") == \"3 2 3\"\nassert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"5 5 25 4 3\") == \"1 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n\"\"\"\n\nn, m, k, x, y = [int(i) for i in input().split()]\n\nmaximum, minimum, answer = 0, 0, 0\n\nfor i in range(n):\n    for j in range(m):\n        if i == x and j == y:\n            minimum += 1\n            maximum += 1\n            answer += 1\n        elif i == x:\n            maximum += 1\n            answer += 1\n        elif j == y:\n            maximum += 1\n            answer += 1\n        else:\n            minimum += 1\n\nprint(maximum, minimum, answer)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 8 1 1\") == \"3 2 3\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 3 1 1\") == \"3 2 3\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n\"\"\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nKuroo\\nShiro\\nKatie\") == \"Kuro\"\nassert solution(\"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\") == \"Shiro\"\nassert solution(\"1\\nabcabc\\ncbabac\\nababca\") == \"Katie\"\nassert solution(\"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\") == \"Draw\"\n\n\"\"\"\nimport collections\nimport math\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nKuroo\\nShiro\\nKatie\") == 'Kuro'\nassert solution(\"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\") == 'Shiro'\nassert solution(\"1\\nabcabc\\ncbabac\\nababca\") == 'Katie'\n\nprint(\"Well done!\")\n\"\"\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nKuroo\\nShiro\\nKatie\") == \"Kuro\"\nassert solution(\"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\") == \"Shiro\"\nassert solution(\"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\") == \"Draw\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nKuroo\\nShiro\\nKatie\\n\") == \"Kuro\"\nassert solution(\"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\\n\") == \"Shiro\"\nassert solution(\"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\\n\") == \"Draw\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nKuroo\\nShiro\\nKatie\\n\") == \"Kuro\"\nassert solution(\"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\\n\") == \"Shiro\"\nassert solution(\"1\\nabcabc\\ncbabac\\nababca\\n\") == \"Katie\"\nassert solution(\"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\\n\") == \"Draw\"\n\n\"\"\"\n\nimport collections\nimport re\n\nclass Solution:\n    def winner(self, n):\n        kuro, shiro, katie = n\n        def change_ribbon(ribbon, turn):\n            return re.sub(f'[{chr(ord('A') + turn - 1)}{chr(ord('a') + turn - 1)}]',\n                          lambda x: chr(ord(x.group()) + turn - 1), ribbon)\n\n        ribbons = [kuro, shiro, katie]\n        ribbons_set = set(ribbons)\n        ribbons_count = {ribbon: ribbons.count(ribbon) for ribbon in ribbons_set}\n        ribbons_unique_count = {ribbon: len(set(ribbon)) for ribbon in ribbons}\n        ribbons_max = max(ribbons_count.values())\n        ribbons_max_keys = [key for key in ribbons_count if ribbons_count[key] == ribbons_max]\n        ribbons_max_keys.sort(key=lambda x: ribbons_unique_count[x])\n        ribbons_max_key = ribbons_max_keys[0]\n\n        ribbon_turn = [ribbon.count('A') + ribbon.count('a') for ribbon in ribbons]\n        ribbon_turn.sort()\n        ribbon_turn = collections.deque(ribbon_turn)\n\n        while True:\n            ribbon_turn_max = ribbon_turn[0]\n            ribbon_turn_max_key = None\n            ribbon_turn_max_key_count = 0\n            for ribbon_turn_key in ribbons_count:\n                if ribbons_count[ribbon_turn_key] == ribbon_turn_max and \\\n                   ribbons_count[ribbon_turn_key] >= ribbon_turn_max_key_count:\n                    ribbon_turn_max_key = ribbon_turn_key\n                    ribbon_turn_max_key_count = ribbons_count[ribbon_turn_key]\n\n            ribbon_turn.popleft()\n\n            if ribbon_turn_max_key == ribbons_max_key:\n                ribbon_turn_max_key = None\n            ribbons_max_key = None\n            ribbons_max_key_count = 0\n            ribbons_count = {ribbon: ribbons.count(ribbon) for ribbon in ribbons_set}\n            ribbons_unique_count = {ribbon: len(set(ribbon)) for ribbon in ribbons}\n            ribbons_max = max(ribbons_count.values())\n            ribbons_max_keys = [key for key in ribbons_count if ribbons_count[key] == ribbons_max]\n            ribbons_max_keys.sort(key=lambda x: ribbons_unique_count[x])\n            ribbons_max_key = ribbons_max_keys[0]\n\n            if not ribbon_turn_max_key:\n                return \"Katie\" if ribbons_max_key == \"a\" else \\\n                       \"Shiro\" if ribbons_max_key == \"A\" else \\\n                       \"Draw\"\n\n            ribbons[ribbons.index(ribbon_turn_max_key)] = change_ribbon(ribbon_turn_max_key, ribbon_turn_max + 1)"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nKuroo\\nShiro\\nKatie') == 'Kuro'\nassert solution('7\\ntreasurehunt\\nthreefriends\\nhiCodeforces') == 'Shiro'\n\"\"\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"Draw\"\nassert solution(\"Kuroo\") == \"Kuro\"\nassert solution(\"Shiro\") == \"Shiro\"\nassert solution(\"Katie\") == \"Katie\"\nassert solution(\"abcabc\") == \"Kuro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nKuroo\\nShiro\\nKatie') == 'Kuro'\nassert solution('7\\ntreasurehunt\\nthreefriends\\nhiCodeforces') == 'Shiro'\nassert solution('1\\nabcabc\\ncbabac\\nababca') == 'Katie'\nassert solution('15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE') == 'Draw'\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nKuroo\\nShiro\\nKatie') == 'Kuro'\nassert solution('7\\ntreasurehunt\\nthreefriends\\nhiCodeforces') == 'Shiro'\nassert solution('15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE') == 'Draw'"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nKuroo\\nShiro\\nKatie\") == \"Kuro\"\nassert solution(\"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\") == \"Shiro\"\nassert solution(\"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\") == \"Draw\"\nassert solution(\"1\\nabcabc\\ncbabac\\nababca\") == \"Katie\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\""
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\nprint(\"It is all good. Let's check it!\")\n\"\"\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n\n\"\"\""
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 5 10 5 4''') == '1'\nassert solution('''12 4 12 4 1''') == '3'\nassert solution('''15 1 100 0 0''') == '15'\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\\n\"\nassert solution(\"3\") == \"1\\n1\\n1\\n\"\nassert solution(\"5\") == \"1\\n1\\n1\\n1\\n1\\n\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13\") == \"2 3\", \"Example #1\"\nassert solution(\"23\") == \"2 3 5\", \"Example #2\"\nassert solution(\"32\") == \"2 3 5 7\", \"Example #3\"\nassert solution(\"19\") == \"2 3 5 7 11\", \"Example #4\"\nassert solution(\"97\") == \"2 3 5 7 11 13\", \"Example #5\"\n\n\"\"\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"27\") == \"3 5 11 11\"\n\"\"\""
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('27') == '3 5 11 11'"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"21\") == \"3 1 7\"\nassert solution(\"27\") == \"3 5 11\"\nassert solution(\"3\") == \"1 1 1\"\nassert solution(\"5\") == \"5 5\"\n\n\"\"\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"27\"\n) == \"3\\n5 11 11\"\nassert solution(\n    \"1\"\n) == \"1\\n\"\nassert solution(\n    \"2\"\n) == \"2\\n\"\nassert solution(\n    \"3\"\n) == \"3\\n\"\nassert solution(\n    \"8\"\n) == \"2\\n5 7\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"27\") == 3, \"WA :(\"\nassert solution(\"77\") == 3, \"WA :(\"\nassert solution(\"84\") == 3, \"WA :(\"\nassert solution(\"13\") == 2, \"WA :(\"\nassert solution(\"21\") == 2, \"WA :(\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(27) == \"3 5 11 11\"\nassert solution(22) == \"3 5 11 11\"\nassert solution(14) == \"2 4 7\"\nassert solution(1) == \"1\"\nassert solution(3) == \"1 2\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == '5'\nassert solution(\"27\") == '3 5 11 11'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == \"1 1 2\"\nassert solution('3') == \"3\"\nassert solution('21') == \"1 1 2 2\"\nassert solution('13') == \"1 1 1 3\"\nassert solution('4') == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n.*..\\n....\\n.*..') == 'YES\\n1 2'\nassert solution('3 3\\n..*\\n.*.\\n*..') == 'NO'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n.*..\\n....\\n.*..\") == \"YES\\n1 2\"\nassert solution(\"6 5\\n.*..\\n.*.\\n*..\\n*..\\n*..\") == \"YES\\n3 3\"\nassert solution(\"6 5\\n*..\\n.*.\\n*..\\n*..\\n*..\") == \"NO\"\nassert solution(\"3 4\\n..*\\n..*\\n.*.\") == \"NO\"\nassert solution(\"4 4\\n.**\\n.*.\\n*.\\n*.\\n*.\\n*.\\n*.\") == \"YES\\n1 2\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n.*..\\n....\\n.*..\\n\") == \"YES\\n1 2\"\nassert solution(\"3 3\\n..*\\n.*.\\n*..\\n\") == \"NO\"\nassert solution(\"6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n..*..\\n\") == \"YES\\n3 3\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n.*..\\n....\\n.*..\") == \"YES\\n3 2\"\nassert solution(\"3 3\\n..*\\n.*.\\n*..\") == \"NO\"\nassert solution(\"6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n..*..\") == \"YES\\n3 3\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n.*..\\n....\\n.*..\\n') == 'YES\\n1 2'\nassert solution('3 3\\n..*\\n.*.\\n*..\\n') == 'NO\\n'\n\nassert solution('3 3\\n.**\\n.*.\\n*..\\n') == 'YES\\n0 0'\n\nassert solution('6 5\\n.**..\\n.*.**\\n*..*.\\n*.*.\\n*.*.\\n') == 'NO\\n'\n\nassert solution('6 5\\n.**..\\n.*.**\\n*..*.\\n*.*.\\n*.*.\\n') == 'NO\\n'"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 4\n.*..\n....\n.*..\n''') == 'YES\\n3 3'\n\nassert solution('''6 5\n..*..\n..*..\n*****\n..*..\n..*..\n..*..\n''') == 'YES\\n3 3'\n\nassert solution('''3 4\n.*..\n....\n.*..\n''') == 'NO'\n\nassert solution('''6 5\n..*..\n..*..\n*****\n..*..\n..*..\n..*..\n''') == 'NO'\n\nassert solution('''6 5\n.*.\n.*.\n*.*\n.*.\n.*.\n*.*\n''') == 'YES\\n4 4'"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n.*..\\n....\\n.*..\\n') == 'YES\\n1 2'\nassert solution('3 3\\n..*\\n.*.\\n*..\\n') == 'NO'\nassert solution('6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n..*..\\n') == 'YES\\n3 3'\n\nprint('Success')"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n.*..\\n....\\n.*..\\n\") == \"YES\\n1 2\"\nassert solution(\"3 3\\n..*\\n.*.\\n*..\\n\") == \"YES\\n3 3\"\nassert solution(\"6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n..*..\\n\") == \"NO\"\nassert solution(\"6 5\\n.*.*.*\\n.*.*.*\\n*..*.*\\n*.*.*.*\\n*.*.*.*\") == \"NO\"\nassert solution(\"1 1\\n*\\n\") == \"YES\\n0 0\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n.*..\\n....\\n.*..\\n\") == \"YES\\n1 2\"\nassert solution(\"3 3\\n..*\\n.*.\\n*..\\n\") == \"NO\\n\"\nassert solution(\"6 5\\n..*..\\n..*..\\n*****\\n..*..\\n..*..\\n..*..\\n\") == \"YES\\n3 3\"\nassert solution(\"5 4\\n.*.*\\n..*..\\n.*.*\\n\") == \"YES\\n3 2\"\nassert solution(\"8 8\\n.*..*\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n\") == \"YES\\n2 2\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == solution_expected\n\"\"\"\n\nimport numpy as np\n\nstdin = input()\nn, m = stdin.split()\nn = int(n)\nm = int(m)\n\nfield = []\nfor i in range(n):\n    field.append([])\n    line = input()\n    for j in range(m):\n        field[i].append(line[j])\n\nbombs = np.zeros((n, m), dtype=np.int)\nfor i in range(n):\n    for j in range(m):\n        if field[i][j] == '*':\n            bombs[i][j] = 1"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''9 7 3 8''') == '15'\nassert solution('''2 7 3 7''') == '14'\nassert solution('''30 6 17 19''') == '0'\nassert solution('''1000000001 10000000001 10000000001 10000000001 10000000001 10000000001 10000000001 10000000001 10000000001''') == '0'\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n\"\"\"\nimport math"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''9 7 3 8''') == '15'\nassert solution('''2 7 3 7''') == '14'\nassert solution('''30 6 17 19''') == '0'\n\n'''\n\n'''"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 7 3 8') == '15'\nassert solution('2 7 3 7') == '14'\nassert solution('30 6 17 19') == '0'\nassert solution('23 26 3 17') == '12'\nassert solution('1 20 5 6') == '0'\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 7 3 8\") == \"15\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n-2 2 -3 1\") == 3\nassert solution(\"3\\n2 -5 -3\") == -1\nassert solution(\"7\\n2 2 -3 1 -3 7\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n-2 2 -3 1\") == 3\nassert solution(\"3\\n2 -5 -3\") == -1\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n-2 2 -3 1') == 3\nassert solution('3\\n2 -5 -3') == -1\n\"\"\"\nimport sys"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n-2 2 -3 1') == 3\nassert solution('3\\n2 -5 -3') == -1"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n-2 2 -3 1\\n') == '3'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 -5 -3\") == -1\nassert solution(\"3\\n2 -5 -3\") == -1\nassert solution(\"4\\n2 2 -3 1\") == 3\nassert solution(\"3\\n2 -5 -3\") == -1\nassert solution(\"4\\n-2 2 -3 1\") == 3\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n-2 2 -3 1\") == 3\n\nassert solution(\"3\\n2 -5 -3\") == -1\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n-2 2 -3 1\") == 3\nassert solution(\"3\\n2 -5 -3\") == -1\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n-2 2 -3 1') == 3\n\"\"\""
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 -5 -3') == '-1'\nprint('Test PASSED')"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 1\\n1 2\\n1 3') == 6\nassert solution('3 3\\n1 1\\n1 1\\n1 3') == 2\nassert solution('4 10\\n5 3\\n2 1\\n3 2\\n5 1') == 10\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\") == \"10\"\nassert solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\") == \"10\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 1\\n1 2\\n1 3\") == 6\nassert solution(\"3 3\\n1 1\\n1 1\\n1 3\") == 2\nassert solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\") == 10\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\nclass Solution:\n    def findSolution(self, n: int, t: int, counter: List[Counter]) -> int:\n        result = 0\n        for items in counter:\n            if t == items.get('total'):\n                result += 1\n        return result % (10**9 + 7)\n\n\nclass Solution2:\n    def findSolution(self, n: int, t: int, counter: List[Counter]) -> int:\n        result = 0\n        for items in counter:\n            if t == items.get('total') and items.get('same_genre') == 0:\n                result += 1\n        return result % (10**9 + 7)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 1\\n1 2\\n1 3\") == 6\nassert solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\") == 10"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n1 2\\n1 3') == 6\nassert solution('3 3\\n1 1\\n1 1\\n1 3') == 2\nassert solution('4 10\\n5 3\\n2 1\\n3 2\\n5 1') == 10\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 1\\n1 2\\n1 3') == 6\nassert solution('4 10\\n5 3\\n2 1\\n3 2\\n5 1') == 10\n\"\"\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\") == \"10\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 3\n1 1\n1 2\n1 3\n\"\"\") == \"6\"\nassert solution(\"\"\"4 10\n5 3\n2 1\n3 2\n5 1\n\"\"\") == \"10\"\nassert solution(\"\"\"3 3\n1 1\n1 1\n1 3\n\"\"\") == \"2\"\nassert solution(\"\"\"4 10\n5 3\n2 1\n3 2\n5 1\n\"\"\") == \"10\"\n\n\"\"\"\n\n\npolycarpus = [\n    [[1, 1], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1, 4], [4, 1], [2, 3, 4], [4, 3, 2]]\n]\n\n\"\"\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 1\\n1 2\\n1 3\") == \"6\"\nassert solution(\"3 3\\n1 1\\n1 1\\n1 3\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\nimport math\nimport itertools"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 1\\n1 2\\n1 3\") == \"6\"\nassert solution(\"3 3\\n1 1\\n1 1\\n1 3\") == \"2\"\nassert solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\") == \"10\"\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '333333338'\n\n\"\"\""
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"3333\"\nassert solution(\"10\") == \"5\"\nassert solution(\"20\") == \"16\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '333333338'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n\"\"\"\n\nimport random"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"333333338\"\nassert solution(\"100\") == \"8\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"333333338\"\n\"\"\"\n\nimport sys\nimport math\nimport random"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"333333338\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 3\n\"\"\"\nimport sys\nimport random\nimport numpy as np\n\nN = int(input().strip())\n\na = []\nb = 0\nfor i in range(N):\n    num = random.randint(1, N)\n    a.append(num)\n    if i > 0:\n        b = (b * a[i-1]) % (10**9 + 7)\nprint(np.gcd.reduce(a))\nprint(int(np.lcm.reduce(a) / b))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"333333338\"\n\"\"\"\n\nfrom typing import List\nimport random\nfrom math import gcd\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('4') == '12'\nassert solution('10') == '222'\nassert solution('10**9+7') == '111111111'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 1 2') == 2\nassert solution('1 12 1 12') == 4\nassert solution('50 100 3 30') == 0\nassert solution('1 1 1 1') == 1\n\nassert solution('1 1 1 1') == 1\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"1 12 1 12\") == \"4\"\nassert solution(\"50 100 3 30\") == \"0\"\nassert solution(\"0 1 0 1\") == \"0\"\nassert solution(\"0 1 2 2\") == \"1\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 2\") == 2\n\"\"\"\n\nimport math\n\nl, r, x, y = map(int, input().split())\n\nprint(math.floor(r / x) * math.floor(y / x) - math.floor(l / x) * math.floor(y / x))\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 2\") == 2\n\n\"\"\""
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 1 2') == '2'\nassert solution('1 12 1 12') == '4'\nassert solution('50 100 3 30') == '0'\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2\") == 2\nassert solution(\"1 12 1 12\") == 4\nassert solution(\"50 100 3 30\") == 0"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 2\") == 2\nassert solution(\"1 12 1 12\") == 4\nassert solution(\"50 100 3 30\") == 0\n\"\"\""
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 1 2') == 2\nassert solution('1 12 1 12') == 4\nassert solution('50 100 3 30') == 0\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 2\") == 2\n\"\"\"\n\nimport sys\n\nl, r, x, y = map(int, sys.stdin.readline().strip().split())\n\ncount = 0\n\nfor a in range(l, r + 1):\n    for b in range(l, r + 1):\n        if a == b or a % x == 0 or b % y == 0:\n            continue\n        if a * b % x == b * a % y:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 2\") == 2\nassert solution(\"1 12 1 12\") == 4\nassert solution(\"50 100 3 30\") == 0"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10\") == \"0\"\nassert solution(\"6 10\") == \"2\"\nassert solution(\"21 31\") == \"9\"\nassert solution(\"5 10\") == \"0\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 10') == '2'\nassert solution('21 31') == '9'\nassert solution('5 10') == '0'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 10\") == \"2\"\nassert solution(\"21 31\") == \"9\"\nassert solution(\"5 10\") == \"0\"\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 10') == '2'\nassert solution('21 31') == '9'\n\"\"\"\nfrom typing import List\n\nimport math\n\nfrom utils import timing\n\nINPUT_1 = \"\"\"6 10\"\"\"\nINPUT_2 = \"\"\"21 31\"\"\"\nINPUT_3 = \"\"\"5 10\"\"\"\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10\") == \"0\"\n\"\"\"\nimport math"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 10\") == \"2\"\nassert solution(\"21 31\") == \"9\"\nassert solution(\"5 10\") == \"0\"\n\n\"\"\"\n\n\nfrom math import gcd\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 10\") == \"2\"\nassert solution(\"21 31\") == \"9\"\nassert solution(\"5 10\") == \"0\"\n\"\"\""
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 10\") == \"2\"\nassert solution(\"21 31\") == \"9\"\nassert solution(\"5 10\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 10\") == \"2\"\nassert solution(\"21 31\") == \"9\"\nassert solution(\"5 10\") == \"0\"\n\n\n\"\"\"\n\na, b = map(int, input().split())\nprint(max(0, a + b - 1))\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 10') == '2'\nassert solution('21 31') == '9'\n\"\"\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10\\n8 9\") == \"4\"\n\nn, k = map(int, stdin.split())\nmarks = [int(s) for s in stdin.split()]\n\nprint(max([(k - mark) for mark in marks]))"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 10\\n8 9') == '4'\nassert solution('3 5\\n4 4 4') == '3'\n\n-------\n\nimport math\n\nn, k = map(int, stdin.readline().split())\nx = list(map(int, stdin.readline().split()))\n\navg = 0\nfor i in x:\n    avg += i\navg = math.ceil(avg / len(x))"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"2 10\\n\"\n\"8 9\"\n) == \"4\"\n\nassert solution(\n\"3 5\\n\"\n\"4 4 4\"\n) == \"3\"\n\n\n-----Explanation-----\n\nIn the first example we have n = 2, k = 10, so marks given to Noora are 8 and 9. Let's calculate Noora's mark: average = $\\frac{8+9}{2} = 9$ and rounded to the closest integer = 9. Noora will get the mark 9, but unfortunately she has to apply for the \"A\" certificate to achieve it.\n\nIn the second example we have n = 3, k = 5. Noora received marks 4, 4, 4. Let's calculate Noora's mark: average = $\\frac{4+4+4}{3} = \\frac{16}{3} = 6.67...$ and rounded to the closest integer = 6.\n\nSo, at the end Noora has to add 4 more marks to the register in order to receive the \"A\" certificate.\n\nSo, the answer is 4.\n\"\"\""
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10\\n8 9\") == \"4\"\nassert solution(\"3 5\\n4 4 4\") == \"3\"\nassert solution(\"1 2\\n2 2\") == \"0\""
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10') == '4'\nassert solution('3 5') == '3'\n\"\"\"\n\nn, k = map(int, stdin.split())\narr = [int(stdin) for stdin in stdin.split()]\n\nprint(k - sum(arr) % k)\n\n\"\"\"\n\u0412\u044b \u043d\u0430\u0443\u0447\u0438\u0442\u0435\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0443\u043b\u0435\u0439.\n\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0434\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0432 \u043f\u0430\u043f\u043a\u0435 \u0441 \u043c\u043e\u0434\u0443\u043b\u0435\u043c \u0441 \u0442\u0430\u043a\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u0430\u043a \u0431\u044b\u043b \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u044d\u0442\u0430\u043f\u0435. \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b import \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u043d\u0430\u0447\u0430\u043b\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0438\u0445 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u043b\u043e\u0441\u044c \u0441 test_, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u043e\u043d\u0438 \u043d\u0443\u0436\u043d\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438.\n\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u0443.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0438\u0437\u043c\u0435\u043d\u0438\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0441 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n[[\"a\", \"b\"], [\"c\", \"d\"]]\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n[[\"test_a\", \"test_b\"], [\"test_c\", \"test_d\"]]\n\n\"\"\"\n\narr = [\n    [\"test_1\", \"test_2\"],\n    [\"test_3\", \"test_4\"]\n]\n\nfor i in range(len(arr)):\n    arr[i][0] = \"test_\" + arr[i][0]\n    arr[i][1] = \"test_\" + arr[i][1]\n\nprint(arr)\n\n\"\"\"\n\u0412\u044b \u043d\u0430\u0443\u0447\u0438\u0442\u0435\u0441\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c.\n\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0434\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0432 \u043f\u0430\u043f\u043a\u0435 \u0441 \u043c\u043e\u0434\u0443\u043b\u0435\u043c \u0441 \u0442\u0430\u043a\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u0430\u043a \u0431\u044b\u043b \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u044d\u0442\u0430\u043f\u0435. \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b import \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u043d\u0430\u0447\u0430\u043b\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0438\u0445 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u043b\u043e\u0441\u044c \u0441 test_, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u043e\u043d\u0438 \u043d\u0443\u0436\u043d\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438.\n\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u0443.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0442 \u0432 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0432\u0443\u0437 \u0437\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0443\u044e \u0434\u0430\u0442\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\u0412\u0445\u043e\u0434\u043d\u044b"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10\\n8 9\") == \"4\"\n\nassert solution(\"3 5\\n4 4 4\") == \"3\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10\\n8 9\") == \"4\"\nassert solution(\"3 5\\n4 4 4\") == \"3\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\") == \"4\"\nassert solution(\"3 5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 10\") == 4\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10\") == 4\n\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 0 -7 2 6\") == '4'\nassert solution(\"7\\n0 0 1 -1 0 0 2\") == '0'\nassert solution(\"6\\n1 1 1 1 1 1\") == '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n10 0 -7 2 6\\n') == '4'\nassert solution('7\\n0 0 1 -1 0 0 2\\n') == '0'\nassert solution('7\\n0 0 1 -1 0 0 2\\n') == '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n10 0 -7 2 6\\n\") == \"4\"\nassert solution(\"7\\n0 0 1 -1 0 0 2\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n10 0 -7 2 6\") == \"4\"\nassert solution(\"7\\n0 0 1 -1 0 0 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('5\\n-7 2 6') == 4\nassert solution('7\\n0 0 1 -1 0 0 2') == 0\n'''\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n10 0 -7 2 6\") == \"4\"\nassert solution(\"7\\n0 0 1 -1 0 0 2\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"1\"\n\n-----Answer-----\n\"\"\"\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n10 0 -7 2 6\") == \"4\"\n\nassert solution(\"7\\n0 0 1 -1 0 0 2\") == \"0\"\n\nassert solution(\"1\\n10\") == \"10\"\n\nassert solution(\"2\\n-2 -1\") == \"1\"\n\nprint('Success')\n\"\"\""
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10 0 -7 2 6\\n\") == \"4\"\n\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\na = [int(x) for x in input().split()]\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n10 0 -7 2 6\") == \"4\"\nassert solution(\"7\\n0 0 1 -1 0 0 2\") == \"0\""
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n10 0 -7 2 6\") == \"4\"\nassert solution(\"7\\n0 0 1 -1 0 0 2\") == \"0\"\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8') == '0'\nassert solution('7') == '0'\nassert solution('6') == '1'\nassert solution('5') == '0'\nassert solution('4') == '2'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n\"\"\"\n\nimport sys\nimport os\nimport time\nimport math\nimport gc\nfrom collections import defaultdict"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\nassert solution(\"15\") == \"2\"\nassert solution(\"15\") == \"2\"\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7') == '3'\nassert solution('14') == '9'\nassert solution('50') == '1'\n\nassert solution('1234567891011') == '1'\nassert solution('1234567891010') == '0'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n12\\n1\\n34') == '1'\nassert solution('3\\n12\\n1\\n34') == '1'\nassert solution('3\\n12\\n1\\n34') == '1'\nassert solution('3\\n12\\n1\\n34') == '1'\nassert solution('3\\n12\\n1\\n34') == '1'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n\"\"\""
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('14') == '1'\nassert solution('50') == '1'\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List, Tuple\n\nimport sys\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"14\") == \"9\"\nassert solution(\"50\") == \"1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6\\n2 3\") == \"1\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 6\\n2 3\") == \"1\\n1 6\"\nassert solution(\"36 5\\n10 16\") == \"3\\n16 5\"\nassert solution(\"3 5\\n2 1\") == \"-1\"\n\n\n\n\n\n-----\n3 5\n2 1\n3 3\n2 2\n4 4\n1 2\n\n-----\n1\n1 6\n2 3\n\n-----\n2\n2 3\n2 3\n\n-----\n1\n1 6\n2 3\n\n-----\n3\n16 5\n5 16\n\n-----\n3\n16 5\n5 16\n\n-----\n4\n5 16\n16 5\n\n-----\n5\n5 16\n16 5\n\n-----\n6\n16 5\n5 16\n\n-----\n7\n16 5\n5 16\n\n-----\n8\n16 5\n5 16\n\n-----\n9\n16 5\n5 16\n\n-----\n10\n16 5\n5 16\n\n-----\n11\n16 5\n5 16\n\n-----\n12\n16 5\n5 16\n\n-----\n13\n16 5\n5 16\n\n-----\n14\n16 5\n5 16\n\n-----\n15\n16 5\n5 16\n\n-----\n16\n16 5\n5 16\n\n-----\n17\n16 5\n5 16\n\n-----\n18\n16 5\n5 16\n\n-----\n19\n16 5\n5 16\n\n-----\n20\n16 5\n5 16\n\n-----\n21\n16 5\n5 16\n\n-----\n22\n16 5\n5 16\n\n-----\n23\n16 5\n5 16\n\n-----\n24\n16 5\n5 16\n\n-----\n25\n16 5\n5 16\n\n-----\n26\n16 5\n5 16\n\n-----\n27\n16 5\n5 16\n\n-----\n28\n16 5\n5 16\n\n-----\n29\n16 5\n5 16\n\n-----\n30\n16 5\n5 16\n\n-----\n31\n16 5\n5 16\n\n-----\n32\n16 5\n5 16\n\n-----\n33\n16 5\n5 16\n\n-----\n34\n16 5\n5 16\n\n-----\n35\n16 5\n5 16\n\n-----\n36\n16 5\n5 16\n\n-----\n37\n16 5\n5 16\n\n-----\n38\n16 5\n5 16\n\n-----\n39\n16 5\n5 16\n\n-----\n40\n16 5\n5 16\n\n-----\n41\n16 5\n5 16\n\n-----\n42\n16 5\n5 16\n\n-----\n43\n16 5\n5 16\n\n-----\n44\n16 5\n5 16\n\n-----\n45\n16 5\n5 16\n\n-----\n46\n16 5\n5 16\n\n-----\n47\n16 5\n5 16\n\n-----\n48\n16 5\n5 16\n\n-----\n49\n16 5\n5 16\n\n-----\n50\n16 5\n5 16\n\n-----\n51\n16 5\n5 16\n\n-----\n52\n16 5\n5 16\n\n-----\n53\n16 5\n5 16\n\n-----\n54\n16 5\n5 16\n\n-----\n55\n16 5\n5 16\n\n-----\n56\n16 5\n5 16\n\n-----\n57\n16 5\n5 16\n\n-----\n58\n16 5\n5 16\n\n-----\n59\n16 5\n5 16\n\n-----\n60\n16 5\n5 16\n\n-----\n61\n16 5\n5 16\n\n-----\n62\n16 5\n5 16\n\n-----\n63\n16 5\n5 16\n\n-----\n64\n16 5\n5 16\n\n-----\n65\n16 5\n5 16\n\n-----\n66\n16 5\n5 16\n\n-----\n67\n16 5\n5 16\n\n-----\n68\n16 5\n5 16\n\n-----\n69\n16 5\n5 16\n\n-----\n70\n16 5\n5 16\n\n-----\n71\n16 5\n5 16\n\n-----\n72\n16 5\n5 16\n\n-----\n73\n16 5\n5 16\n\n-----\n74\n16 5\n5 16\n\n-----\n75\n16 5\n5 16\n\n-----\n76\n16 5\n5 16\n\n-----\n77\n16 5\n5 16\n\n-----\n78\n16 5\n5 16\n\n-----\n79\n16 5\n5 16\n\n-----\n80\n16 5\n5 16\n\n-----\n81\n16 5\n5 16\n\n-----\n82\n16 5\n5 16\n\n-----\n83\n16 5\n5 16\n\n-----\n84\n16 5\n5 16\n\n-----\n85\n16 5\n5 16\n\n-----\n86\n16 5\n5 16\n\n-----\n87\n16 5\n5 16\n\n-----\n88\n16 5\n5 16\n\n-----\n89\n16 5\n5 16\n\n-----\n90\n16 5\n5 16\n\n-----\n91\n16 5\n5 16\n\n-----\n92\n16 5\n5 16\n\n-----\n93\n16 5\n5 16\n\n-----\n94\n16 5\n5 16\n\n-----\n95\n16 5\n5 16\n\n-----\n96\n16 5\n5 16\n\n-----\n97\n16 5\n5 16\n\n-----\n98\n16 5\n5 16\n\n-----\n99\n16 5\n5 16\n\n-----\n100\n16 5\n5 16\n\n-----\n101\n16 5\n5 16\n\n-----\n102\n16 5\n5 16\n\n-----\n103\n16 5\n5 16\n\n-----\n104\n16 5\n5 16\n\n-----\n105\n16 5\n5 16\n\n-----\n106\n16 5\n5 16\n\n-----\n107\n16 5\n5 16\n\n-----\n108\n16 5\n5 16\n\n-----\n109\n16 5\n5 16\n\n-----\n110\n16 5\n5 16\n\n-----\n111\n16 5\n5 16\n\n-----\n112\n16 5\n5 16\n\n-----\n113"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6\\n2 3\") == '1\\n1 6'\nassert solution(\"36 5\\n10 16\") == '3\\n16 5'\nassert solution(\"3 5\\n2 1\") == '-1'\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3 5) == \"1\"\n\"\"\"\n\na1, b1 = input().split()\na1 = int(a1)\nb1 = int(b1)\n\na2, b2 = input().split()\na2 = int(a2)\nb2 = int(b2)\n\nm = float('inf')\n\nfor i in range(1, b1+1):\n    if (a1/i)%1 == 0 and (b1/i)%1 == 0:\n        m = min(i, m)\n\nfor i in range(1, b2+1):\n    if (a2/i)%1 == 0 and (b2/i)%1 == 0:\n        m = min(i, m)"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 6\\n2 3\") == \"1\"\nassert solution(\"36 5\\n10 16\") == \"3\\n16 5\"\nassert solution(\"3 5\\n2 1\") == \"-1\"\n\n'''\nimport sys\nimport numpy as np"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 6\\n2 3\") == \"1\\n1 6\\n2 3\"\nassert solution(\"36 5\\n10 16\") == \"3\\n16 5\\n5 16\"\nassert solution(\"3 5\\n2 1\") == \"-1\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6\\n2 3\") == \"1\\n1 6\\n2 3\"\nassert solution(\"36 5\\n10 16\") == \"3\\n16 5\\n5 16\"\nassert solution(\"3 5\\n2 1\") == \"-1\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 6\\n2 3') == '1'\nassert solution('36 5\\n10 16') == '3\\n16 5'\nassert solution('3 5\\n2 1') == '-1'\nassert solution('1 1\\n1 1') == '0\\n1 1'\nassert solution('1 2\\n1 1') == '2\\n1 1'\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == '2\\n1\\n1'\nassert solution('36 5') == '3\\n16\\n5\\n16'\n\"\"\""
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 6\\n2 3') == '1\\n1 6\\n2 3'\nassert solution('36 5\\n10 16') == '3\\n16 5\\n5 16'\nassert solution('3 5\\n2 1') == '-1'\nassert solution('4 6\\n2 1') == '-1'\n\"\"\"\n\na, b = [int(x) for x in input().split()]\n\nd = b\nk = a // d\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7 7 4') == 'Vasiliy'\nassert solution('2 1 2 2') == 'Polycarp'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 2 2') == 'Polycarp'\n\"\"\""
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 2 2') == 'Polycarp'\nassert solution('4 7 7 4') == 'Vasiliy'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 7 4\") == \"Vasiliy\"\n\"\"\""
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\""
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\"\n\"\"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 2 2') == 'Polycarp'\nassert solution('4 7 7 4') == 'Vasiliy'"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Polycarp\"\n\n\"\"\"\n\nfrom itertools import product\nimport string\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\n\n\"\"\"\nfrom collections import deque\nfrom collections import defaultdict\nfrom typing import Dict, List\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 7\") == \"6\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"11 6\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 7\") == \"6\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"11 6\") == \"5\"\n\nimport re\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 7\") == \"6\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"11 6\") == \"5\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 7\") == \"6\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"11 6\") == \"5\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 7') == '6'\nassert solution('1 1') == '5'\nassert solution('11 6') == '5'\n\"\"\""
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 7\") == \"6\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"11 6\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 7\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 7\") == \"6\"\nassert solution(\"1 1\") == \"5\"\nassert solution(\"11 6\") == \"5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 7') == '6'\nassert solution('1 1') == '5'\nassert solution('11 6') == '5'\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 7') == 6\nassert solution('1 1') == 5\nassert solution('11 6') == 5\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10\") == 2\nassert solution(\"2015 2015\") == 1\nassert solution(\"72057594 000000000 72057595 000000000\") == 26\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10\") == \"2\"\nassert solution(\"2015 2015\") == \"1\"\nassert solution(\"72057594 000000000 72057595 000000000\") == \"26\"\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10\") == \"2\"\nassert solution(\"2015 2015\") == \"1\"\nassert solution(\"100 105\") == \"0\"\nassert solution(\"72057594000000000 72057595000000000\") == \"26\"\n\"\"\"\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 10') == '2'\nassert solution('2015 2015') == '1'\nassert solution('72057594 000000000 72057595 000000000') == '26'\n\n\n\"\"\"\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10\") == 2\nassert solution(\"2015 2015\") == 1\nassert solution(\"100 105\") == 0\nassert solution(\"72057594000000000 72057595000000000\") == 26\n\"\"\"\n\na, b = map(int, input().split())\ncount = 0\nfor i in range(a, b+1):\n    if (bin(i)[2:]).count('0') == 1:\n        count += 1\nprint(count)"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10\") == \"2\"\nassert solution(\"2015 2015\") == \"1\"\nassert solution(\"72057594 000000000 72057595 000000000\") == \"26\"\n\n\n\"\"\"\nimport math"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 10') == '2'\nassert solution('2015 2015') == '1'\nassert solution('100 105') == '0'\nassert solution('72057594000000000 72057595000000000') == '26'\nprint('All tests are passed.')"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10\") == \"2\"\nassert solution(\"2015 2015\") == \"1\"\nassert solution(\"72057594 000000000 72057595 000000000\") == \"26\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10\") == \"2\"\nassert solution(\"2015 2015\") == \"1\"\nassert solution(\"100 105\") == \"0\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 10''') == 2\nassert solution('''2015 2015''') == 1\nassert solution('''100 105''') == 0\nassert solution('''72057594000000000 72057595000000000''') == 26\n\na, b = (int(x) for x in stdin.split())\nprint(sum(1 for x in range(a, b+1) if binary_representation(x)[2] == '0'))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == 6\n\"\"\""
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 2\n\n\"\"\"\nimport math"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 2\nassert solution('3') == 4\n\"\"\""
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 2\nassert solution('3') == 4\nassert solution('4') == 6\nassert solution('5') == 8\n\n\"\"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 4\nassert solution(\"4\") == 6\n\nimport sys\ninput = sys.stdin.readline\nprint(solution(input().strip()))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 4\nassert solution(\"4\") == 6\n\"\"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"6\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '6'\nassert solution('5') == '8'\n\"\"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 6\n\"\"\"\n\nimport math\n\nN = int(input())\n\nprint(int(math.ceil(math.log2(N))))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '6'\n\n\n\"\"\""
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 30\") == '1'\nassert solution(\"2 2 7\") == '1'\nassert solution(\"3 1 1\") == '6'\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3\") == \"1\"\nassert solution(\"2 2 7\") == \"1\"\nassert solution(\"3 1 1\") == \"6\"\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 30') == '1'\nassert solution('3 1 1') == '6'\nassert solution('2 2 7') == '1'\n\na = set(map(int, stdin.split()))\nprint(a)\nprint(set(range(1, 3)) - a)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 30') == '1'\nassert solution('2 2 7') == '1'\nassert solution('3 1 1') == '6'\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 30\\n4 3\") == \"1\"\nassert solution(\"2 2 7\\n4 3\") == \"1\"\nassert solution(\"3 1 1\\n1 1 1\") == \"6\"\n\"\"\"\nimport numpy as np\nimport collections\nfrom functools import partial\nfrom typing import List, Tuple\n\n\"\"\"\nA Naive Algorithm\n\"\"\"\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 30\") == \"1\"\nassert solution(\"2 2 7\") == \"1\"\nassert solution(\"3 1 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 30\") == \"1\"\nassert solution(\"2 2 7\") == \"1\"\nassert solution(\"3 1 1\") == \"6\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 30') == '1'\nassert solution('2 2 7') == '1'\nassert solution('3 1 1') == '6'\nassert solution('3 2 1') == '6'\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 3 4') == '1'\nassert solution('4 3\\n4 2 3 1') == '1'\nassert solution('4 3\\n1 1 1 4') == '6'\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 30\") == \"1\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"2 2 7\") == \"1\"\nassert solution(\"3 1 1\") == \"6\"\nassert solution(\"3 4 5\") == \"0\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'YES'\n\"\"\""
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'YES'\nassert solution('4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'YES'\nassert solution('4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'YES'\nassert solution('4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'YES'\nassert solution('4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'YES'\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"YES\"\nassert solution(\"5 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"YES\"\nassert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"YES\"\nassert solution(\"5 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"YES\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n5 2\\n5 1 0 1\\n1\\n2 2\") == \"NO\"\nassert solution(\"2\\n5 2\\n5 1 0 1\\n1\\n1 2\") == \"YES\"\nassert solution(\"2\\n5 2\\n5 1 0 1\\n1\\n1 1 2\") == \"NO\"\nassert solution(\"2\\n5 2\\n5 1 0 1\\n1\\n1 1 1 2\") == \"YES\"\nassert solution(\"2\\n5 2\\n5 1 0 1\\n1\\n1 1 1 2\") == \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\") == 'NO'\nassert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\") == 'YES'\n\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"YES\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"YES\"\nassert solution(\"5 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\") == \"NO\"\n\"\"\""
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 100\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810') == 'YES\\nYES\\nNO\\nNO\\nYES'\n\"\"\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 100') == 'YES'\nassert solution('0 0 0 0') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('1') == 'NO'\nassert solution('3 4') == 'YES'\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\") == \"YES\"\nassert solution(\"5 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\") == \"NO\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\") == 20\nassert solution(\"5 6 7\") == 1520"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"1520\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 2 2\") == \"20\"\nassert solution(\"5 6 7\") == \"1520\""
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 2\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6 7') == '1520'\n\"\"\"\n\na, b, c = [int(i) for i in stdin.split()]\n\nd = [1]\n\nfor i in range(1, a):\n    d.append(d[-1] * i)\n\ne = [1]\nfor i in range(1, b):\n    e.append(e[-1] * i)\n\nf = [1]\nfor i in range(1, c):\n    f.append(f[-1] * i)\n\nprint(sum([sum(d[i] * e[j] * f[k] for i in range(a)) for j in range(b)]))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 2') == 20\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\") == 20\n\nassert solution(\"5 6 7\") == 1520\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == 20\n\"\"\"\n\nimport sys\n\nA = list(map(int, sys.stdin.readline().split()))\n\nx = 1\nfor i in A:\n    x = (x * i) % 10**9\nprint(x)\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 2') == 20\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\") == 20\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == 20\nassert solution(\"5 6 7\") == 1520\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == \"YES\"\nassert solution(\"AB\\nXC\\nAC\\nBX\") == \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AB\\nXC\\nXB\\nAC\\n') == \"YES\"\nassert solution('AB\\nXC\\nAC\\nBX\\n') == \"NO\""
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == \"YES\"\nassert solution(\"AB\\nXC\\nAC\\nBX\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == 'YES'\nassert solution(\"AB\\nXC\\nAC\\nBX\") == 'NO'"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AB\\\\nXC\\\\nXB\\\\nAC\") == \"YES\"\nassert solution(\"AB\\\\nXC\\\\nAC\\\\nBX\") == \"NO\"\n\"\"\"\n\nimport sys\n\ns = sys.stdin.readlines()"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == \"YES\"\nassert solution(\"AB\\nXC\\nAC\\nBX\") == \"NO\"\nassert solution(\"BA\\nXC\\nXA\\nBC\") == \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AB\\\\nXX\\\\nAC\\\\nBX\") == \"YES\"\nassert solution(\"AB\\\\nXX\\\\nAC\\\\nBX\\\\nAB\\\\nXX\\\\nAC\\\\nBX\\\\nAB\\\\nXX\\\\nAC\\\\nBX\") == \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == \"YES\"\nassert solution(\"AB\\nXC\\nAC\\nBX\") == \"NO\"\nassert solution(\"AC\\nBX\\nAB\\nAC\") == \"YES\"\n\"\"\"\n\n\n\n\"\"\"\nBest Friend For Life\nYou're writing a program for a kids' game that uses sliding tiles. Your game is played by kids around the neighborhood. The game rules are as follows:\n\nThe game is played by kids around the neighborhood, one kid at a time. On each turn, a kid can rotate, flip, slide, or roll a tile. The tile that is being moved by the kid is called the active tile. The active tile is where the kids will start making their turn. At the end of the game, all the tiles have been placed in a single row.\n\nYour task is to write a program that will take the initial tile configurations for N kids (tiles can be rotated, flipped, or slid) and will return whether the kids can play the game, and the winning move for each kid if they can play the game.\n\nYou will be given at least one initial tile configuration for each kid, and will be given the rules for each turn. You do not need to account for scenarios where a tile cannot rotate, flip, slide, or roll. For example, if you are given a tile that cannot be flipped or slid, you do not need to account for that possibility.\n\nYou can assume that the initial tile configurations will always be valid and there will never be more than one tile that can be moved.\n\nNote that if a tile is placed in the same location as another tile, that tile will never be active. For example, given tiles A, B, and C, A and B will never be active at the same time.\n\nFor example, suppose you are given the following initial tile configurations:\n\nAB\nBAC\nCBA\nABC\nCAB\nCBA\nABC\n\nIn the first turn, the kids will choose a tile that can be moved and move it to the first empty cell. The active tile is now A.\n\nNow, the kids will choose a new tile to move and will have to move it to the same cell as the active tile to complete their turn. The new tile is now B.\n\nNext, the kids will choose the same tile to move and will have to move it to the same cell as the active tile to complete their turn. The new tile is now C.\n\nIn the third turn, the kid who moved tile A will have to move it to the same cell as tile B to complete their turn. The new tile is now A.\n\nIn the fourth turn, the kid who moved tile B will have to move it to the same cell as tile C to complete their turn. The new tile is now B.\n\nIn the fifth turn, the kid who moved tile C will have to move it to the same cell as tile A to complete their turn. The new tile is now C.\n\nIn the sixth turn, the kid who moved tile B will have to move it to the same cell as tile A to complete their turn. The new tile is now A.\n\nIn the seventh turn, the kid who moved tile A will have to move it to the same cell as tile B to complete their turn. The new tile is now B.\n\nIn the eighth turn, the kid who moved tile C will have to move it to the same cell as tile B to complete their turn. The new tile is now A.\n\nIn the ninth turn, the kid who moved tile B will have to move it to the same cell as tile C to complete their turn. The new tile is now B.\n\nIn the tenth turn, the kid who moved tile A will have to move it to the same cell as tile B to complete their turn. The new tile is now C.\n\nIn the eleventh turn, the kid who moved tile B will have to move it to the same cell as tile C to complete their turn. The new tile is now B.\n\nIn the twelfth turn, the kid who moved tile C will have to move it to the same cell as tile A to complete their turn. The new tile is now B.\n\nIn the thirteenth turn, the kid who moved tile B will have to move it to the same cell as tile A to complete their turn. The new tile is now C.\n\nIn the fourteenth turn, the kid who moved tile A will have to move it to the same cell as tile B to complete their turn. The new tile is now B.\n\nIn the fifteenth turn, the kid who moved tile C will have to move it to the same cell as tile B to complete their turn. The new tile is now A.\n\nIn the sixteenth turn, the kid who moved tile B will have to move it to the same cell as tile C to complete their turn. The new tile is now B.\n\nIn the seventeenth turn, the kid who moved tile A will have to move it to the same cell as tile B to complete their turn. The new tile is now C.\n\nIn the eighteenth turn, the kid who moved tile C will have to move it to the same cell as tile B to complete their turn. The new tile is now A.\n\nIn the nineteenth turn, the kid who moved tile B will have to move it to the same cell as tile C to complete their turn. The new tile is now B.\n\nIn the twentieth turn, the kid who moved tile A will have to move it to the same cell as tile B to complete their turn. The new tile is now C.\n\nIn the twenty-first turn, the kid who moved tile C will have to move it to the same cell as tile B to complete their turn. The new tile is now B.\n\nIn the twenty-second turn, the kid who moved tile B will have to move it to the same cell as tile C to complete their turn. The new tile is now A.\n\nIn the twenty-third turn, the kid who moved tile A will have to move it to the same cell as tile B to complete their turn. The new tile is now B.\n\nIn the twenty-fourth turn, the kid who moved tile C will have to move it to the same cell as tile B to complete their turn. The new tile is now A.\n\nIn the twenty-fifth turn, the kid who moved tile B will have to move it to the same cell as tile C to complete their turn. The new tile is now B.\n\nIn the twenty-sixth turn, the kid who moved tile A will have to move it to the same cell as tile B to complete their turn. The new tile is now C.\n\nIn the twenty-seventh turn, the kid who moved tile C will have to move it to the same cell as tile B to complete their turn. The new tile is now B.\n\nIn the twenty-eighth turn, the kid who moved tile B will have to move it to the same cell as tile C to complete their turn. The new tile is now A.\n\nIn the twenty-ninth turn, the kid who moved tile A will have to move it to the same cell as tile B to complete their turn. The new tile is now B.\n\nIn the thirty-first turn, the kid who"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == \"YES\"\nassert solution(\"AB\\nXC\\nAC\\nBX\") == \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AB\\nXC\\nXB\\nAC\") == \"YES\"\nassert solution(\"AB\\nAC\\nXB\\nXC\") == \"NO\""
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\\n12\\n\") == \"12\"\nassert solution(\"16\\n11311\\n\") == \"475\"\nassert solution(\"17\\n2016\\n\") == \"594\"\n\"\"\"\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13\\n12') == '12'\nassert solution('16\\n11311') == '475'\nassert solution('20\\n999') == '3789'\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13\\n12') == '12'\nassert solution('16\\n11311') == '475'\nassert solution('20\\n999') == '3789'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13\\n12') == '12'\nassert solution('16\\n11311') == '475'\nassert solution('20\\n999') == '3789'\nassert solution('17\\n2016') == '594'\n\"\"\"\n\nimport math"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\\n12\") == \"12\"\nassert solution(\"16\\n11311\") == \"475\"\nassert solution(\"20\\n999\") == \"3789\"\n\nassert solution(\"13\\n12\") == \"12\"\nassert solution(\"16\\n11311\") == \"475\"\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\\n12\") == \"12\"\nassert solution(\"16\\n11311\") == \"475\"\nassert solution(\"20\\n999\") == \"3789\"\nassert solution(\"17\\n2016\") == \"594\"\n\n\"\"\""
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13\\n12') == '12'\nassert solution('16\\n11311') == '475'\nassert solution('20\\n999') == '3789'\n\"\"\"\nimport math\nfrom collections import Counter\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13\\n12\") == \"12\"\nassert solution(\"16\\n11311\") == \"475\"\nassert solution(\"17\\n2016\") == \"594\"\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13\\n12') == '12'\n\"\"\"\n\n\nimport math\nimport collections\nimport heapq\nimport sys\nsys.setrecursionlimit(10000000)"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13\") == \"12\"\nassert solution(\"16\") == \"475\"\nassert solution(\"20\") == \"3789\"\nassert solution(\"17\") == \"594\"\nassert solution(\"16\") == \"475\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"5\\n10 20 30 20 10\") == \"YES\"\nassert solution(\"4\\n1 2 1 2\") == \"NO\"\nassert solution(\"7\\n3 3 3 3 3 3 3\") == \"YES\"\n\"\"\"\n\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"5\\n10 20 30 20 10\") == \"YES\"\nassert solution(\"4\\n1 2 1 2\") == \"NO\"\nassert solution(\"7\\n3 3 3 3 3 3 3\") == \"YES\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"YES\"\nassert solution(\"5\\n10 20 30 20 10\") == \"YES\"\nassert solution(\"6\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"7\\n3 3 3 3 3 3 3\") == \"YES\"\nassert solution(\"8\\n1 1 1 1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"5\\n10 20 30 20 10\") == \"YES\"\nassert solution(\"4\\n1 2 1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 5 5 5 4 2') == 'YES'\nassert solution('5\\n10 20 30 20 10') == 'YES'\nassert solution('4\\n1 2 1 2') == 'NO'\nassert solution('7\\n3 3 3 3 3 3 3') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"5\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"5\\n1 2 1 2\") == \"NO\"\nassert solution(\"7\\n3 3 3 3 3 3 3\") == \"YES\"\nassert solution(\"7\\n3 3 3 3 3 3 3\") == \"YES\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3 3 3 3\") == \"YES\"\nassert solution(\"1 2 1 2\") == \"YES\"\nassert solution(\"4 4 4 4\") == \"NO\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"5 5 5 5 5\") == \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n6\n1 5 5 5 4 2\n    \"\"\"\n) == 'YES'\n\nassert solution(\n    \"\"\"\n5\n10 20 30 20 10\n    \"\"\"\n) == 'YES'\n\nassert solution(\n    \"\"\"\n4\n1 2 1 2\n    \"\"\"\n) == 'NO'\n\nassert solution(\n    \"\"\"\n7\n3 3 3 3 3 3 3\n    \"\"\"\n) == 'YES'\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"6\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"4\\n1 2 1 2\") == \"NO\"\nassert solution(\"7\\n3 3 3 3 3 3 3\") == \"YES\"\nassert solution(\"2\\n3 3\") == \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 5 5 5 4 2\") == \"YES\"\nassert solution(\"5\\n10 20 30 20 10\") == \"YES\"\nassert solution(\"4\\n1 2 1 2\") == \"NO\"\nassert solution(\"7\\n3 3 3 3 3 3 3\") == \"YES\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3') == '5'\nassert solution('2 3') == '3'\nassert solution('1 100') == '31248'\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 3\") == \"5\"\nassert solution(\"11 6\") == \"4\"\nassert solution(\"20 20\") == \"1\"\nassert solution(\"1000000 100\") == \"31248\"\n\n\"\"\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 3') == '5'\nassert solution('11 6') == '4'\nassert solution('20 20') == '1'\nassert solution('1000000 100') == '31248'\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 3\") == \"5\"\nassert solution(\"11 6\") == \"4\"\nassert solution(\"20 20\") == \"1\"\nassert solution(\"14 5\") == \"6\"\nassert solution(\"1000000 100\") == \"31248\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 3\") == \"5\"\n\nassert solution(\"11 6\") == \"4\"\n\nassert solution(\"20 20\") == \"1\"\n\nassert solution(\"1000000 100\") == \"31248\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 3\") == \"5\"\nassert solution(\"11 6\") == \"4\"\nassert solution(\"1000000 100\") == \"31248\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 3\") == '5'\nassert solution(\"11 6\") == '4'\nassert solution(\"1000000 100\") == '31248'\nprint('The local tests are done. Now submit to the global tests to submit your solution.')\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 3\") == \"5\"\nassert solution(\"11 6\") == \"4\"\nassert solution(\"20 20\") == \"1\"\nassert solution(\"14 5\") == \"6\"\nassert solution(\"1000000 100\") == \"31248\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 3\") == \"5\"\nassert solution(\"11 6\") == \"4\"\nassert solution(\"20 20\") == \"1\"\nassert solution(\"14 5\") == \"6\"\nassert solution(\"1000000 100\") == \"31248\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 3') == '5'\nassert solution('11 6') == '4'\nassert solution('20 20') == '1'\nassert solution('14 5') == '6'\nassert solution('1000000 100') == '31248'\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\"4 4 2 0 1 1\") == \"-1\"\nassert solution(\"10 10 10 1 -1 0\") == \"-1\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\n\nassert solution(\"4 4 2 0 1 1\") == \"-1\"\n\nassert solution(\"10 10 10 1 -1 0\") == \"-1\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 2 2 -1 1') == '0 0'\nassert solution('4 4 2 0 1 1') == '-1'\nassert solution('10 10 10 1 -1 0') == '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2 2 -1 1') == '0 0'\nassert solution('4 4 2 0 1 1') == '-1'\nassert solution('10 10 10 1 -1 0') == '-1'\n\"\"\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\"4 4 2 0 1 1\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\"4 4 2 0 1 1\") == \"-1\"\nassert solution(\"10 10 10 1 -1 0\") == \"-1\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\"4 4 2 0 1 1\") == \"-1\"\nassert solution(\"10 10 10 1 -1 0\") == \"-1\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 2 2 -1 1') == '0 0'\nassert solution('4 4 2 0 1 1') == '-1'\nassert solution('10 10 10 1 -1 0') == '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\"4 4 2 0 1 1\") == \"-1\"\nassert solution(\"10 10 10 1 -1 0\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\"4 4 2 0 1 1\") == \"-\"\nassert solution(\"10 10 10 1 -1 0\") == \"-\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 3\\n2 1') == 'YES'\nassert solution('5 5\\n3 3\\n3 3') == 'NO'\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"3 2\"\n\"1 3\"\n\"2 1\"\n) == \"YES\"\n\nassert solution(\n\"5 5\"\n\"3 3\"\n\"3 3\"\n) == \"NO\"\n\nassert solution(\n\"4 2\"\n\"2 3\"\n\"1 2\"\n) == \"YES\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 3\\n2 1') == 'YES'\nassert solution('5 5\\n3 3\\n3 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 3\\n2 1') == 'YES'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n2 3\\n1 2') == 'YES'\nassert solution('5 5\\n3 3\\n3 3') == 'NO'\nassert solution('1 1\\n1 1') == 'YES'\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 3\\n2 1') == 'YES'\nassert solution('5 5\\n3 3\\n3 3') == 'NO'\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n3 3\\n3 3') == 'YES'\n\nassert solution('5 5\\n3 3\\n3 3') == 'NO'\n\nassert solution('4 2\\n3 3\\n3 3') == 'YES'\n\"\"\"\n\na, b = map(int, input().split())\nx, y, z = map(int, input().split())\nw, v, u = map(int, input().split())"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 3\\n2 1\") == \"YES\"\nassert solution(\"5 5\\n3 3\\n3 3\") == \"NO\"\nassert solution(\"4 2\\n2 3\\n1 2\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2\n1 3\n2 1''') == 'YES'\nassert solution('''5 5\n3 3\n3 3''') == 'NO'\nassert solution('''4 2\n2 3\n1 2''') == 'YES'\nassert solution('''1 1\n1 1''') == 'YES'\nassert solution('''1 1\n1 1\n1 1''') == 'YES'\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n3 3\\n3 3\") == \"YES\"\n\nassert solution(\"4 2\\n2 3\\n1 2\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 30 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"inf\"\n\"\"\"\n\nb_1, q, l, m = (int(i) for i in input().split())\nbad_numbers = set([int(i) for i in input().split()])\n\ncount = 0\n\nwhile True:\n    count += 1\n\n    if b_1 < 0:\n        break\n\n    if b_1 == 1:\n        b_1 = q\n    elif b_1 < l:\n        b_1 = b_1 * q\n    else:\n        b_1 = b_1 - 1 * q\n    if b_1 in bad_numbers:\n        b_1 = q\n        continue\n    if b_1 == 1:\n        b_1 = q\n    elif b_1 < l:\n        b_1 = b_1 * q\n    else:\n        b_1 = b_1 - 1 * q\n\nprint(count)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123 1 2143435 4') == '3'\nassert solution('123 1 2143435 4') == '3'\nassert solution('123 1 2143435 4') == '3'\nassert solution('123 1 2143435 4') == '3'\nassert solution('123 1 2143435 4') == '3'\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 1 2 3') == '5'\nassert solution('1 1 2 3') == '0'\nassert solution('123 1 2143435 4') == 'inf'\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123 1 2143435 4') == 3\nassert solution('123 1 2143435 4') == 'inf'\nassert solution('123 1 2143435 4') == 'inf'\nassert solution('123 1 2143435 4') == 'inf'\nassert solution('123 1 2143435 4') == 'inf'\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123 1 2143435 4') == '3'\nassert solution('123 1 2143435 4') == '3'\nassert solution('123 1 2143435 4') == '3'\nassert solution('123 1 2143435 4') == '3'\nassert solution('123 1 2143435 4') == '3'\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 30 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"inf\"\n\n-----\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123 1 2143435 4\") == \"3\"\nassert solution(\"123 1 2143435 4\")!= \"inf\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\nw..w\\n..w.\") == \"2 4\\n+w..\\nw..\\n\"\nassert solution(\"2 6\\nw..w\\n...w\\n\") == \"2 6\\n...w\\n\"\nassert solution(\"2 6\\nw..w\\n...w\\n\") == \"2 6\\n.w..\\n..w\\n\"\nassert solution(\"2 6\\nw..w\\n...w\\n\") == \"2 6\\n.w..\\n..w\\n\"\nassert solution(\"2 6\\nw..w\\n...w\\n\") == \"2 6\\n.w..\\n..w\\n\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8\\n...w...\\n........\\n..w..w..\") == \"...w++w..\\n..+..+..\\n..+..+..\\n..w++w..\"\nassert solution(\"5 6\\n......\\n.w....\\n......\\n..w...\\n......\") == \"......\\n+w+...\\n+.+...\\n++w...\\n......\"\nassert solution(\"2 4\\n....\\n.w..\") == \"....\\n.w..\"\nassert solution(\"2 6\\nw..w.w\\n...w..\\n\") == \"-1\"\nassert solution(\"4 5\\n.w..\\n...w\\n...w\\n\") == \"-1\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\\nw..w..\\n........\\n........\\nw..w..\\n\") == \"w++w..\\n..+..+..\\n..+..+..\\nw++w..\"\nassert solution(\"5 6\\n......\\nw....\\n......\\n..w...\\n......\\n\") == \"......\\n.w+...\\n+.+...\\n++w...\\n......\\n\"\nassert solution(\"2 4\\n....\\nw..\\n\") == \"....\\n.w..\"\nassert solution(\"2 6\\nw..w\\n...w\\n\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\\n..w..w..\\n........\\n..w..w..\\n\") == \"..w++w..\\n..+..+..\\n..+..+..\\n..w++w..\"\n\nassert solution(\"5 6\\n......\\n.w....\\n......\\n..w...\\n......\\n\") == \"......\\n+w+...\\n+.+...\\n++w...\\n......\\n\"\n\nassert solution(\"2 4\\n....\\n.w..\\n\") == \"....\\n.w..\"\n\nassert solution(\"2 6\\nw..w.w\\n...w..\\n\") == \"1\"\n\nassert solution(\"2 6\\nw..w.w\\n...w..\\n\") == \"1\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8\\n....\\n...w\\n.w..\\n..w.\\n..w.\") == \"..w++w..\\n..+..+..\\n..+..+..\\n..w++w..\"\nassert solution(\"5 6\\n......\\n.w....\\n......\\n..w...\\n......\") == \"......\\n+w+...\\n+.+...\\n++w...\"\nassert solution(\"2 4\\n....\\n.w..\") == \"....\\n.w..\"\nassert solution(\"2 6\\nw..w.w\\n...w..\") == \"w..w.w\"\nassert solution(\"1 1\\nw\") == \"w\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8\\n..w..w..\\n........\\n..w..w..\\n\") == \"..w++w..\\n..+..+..\\n..+..+..\\n..w++w..\"\nassert solution(\"5 6\\n......\\n.w....\\n......\\n..w...\\n......\") == \"......\\n+w+...\\n+.+...\\n++w...\\n......\"\nassert solution(\"2 4\\n....\\n.w..\") == \"....\\n.w..\"\nassert solution(\"2 6\\nw..w.w\\n...w..\\n\") == \"w..w.w\\n.+...+\"\nassert solution(\"1 1\\nw\") == \"w\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\\n..w..w..\\n........\\n..w..w..\\n\") == \"..w++w..\\n..+..+..\\n..+..+..\\n..w++w..\\n\"\nassert solution(\"5 6\\n......\\n.w....\\n......\\n..w...\\n......\\n\") == \"......\\n+w+...\\n+.+...\\n++w...\\n......\\n\"\nassert solution(\"2 4\\n....\\n.w..\\n\") == \"....\\n.w..\\n\"\nassert solution(\"2 6\\nw..w.w\\n...w..\\n\") == \"-1\"\nassert solution(\"2 6\\n...w..\\nw..w.w\\n...w..\\n\") == \"....\\n.w..\\n.w..\\n\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '4 8\\n'\n    '..w..w..\\n'\n    '........\\n'\n    '..w..w..\\n'\n) == '..w++w..\\n' + '..+..+..\\n' + '..+..+..\\n' + '..w++w..'\n\nassert solution(\n    '5 6\\n'\n    '......\\n'\n    '..w..\\n'\n    '......\\n'\n    '..w..\\n'\n) == '-1'\n\nassert solution(\n    '2 4\\n'\n    '....\\n'\n    'w..\\n'\n) == '....\\n' + 'w..'\n\nassert solution(\n    '2 6\\n'\n    'w..w.w\\n'\n    '...w..\\n'\n) == '-1'\n\nassert solution(\n    '5 6\\n'\n    '.....\\n'\n    '..w..\\n'\n    '.....\\n'\n    '..w..\\n'\n) == '.....\\n' + 'w..' + '.....\\n' + 'w..' + '.....\\n' + 'w..'\n\"\"\"\n\nn, m = map(int, input().split())\nmap_ = [['w' if c == '.' else c for c in input()] for _ in range(n)]"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\\n..w..w..\\n........\\n..w..w..\\n\") == \"..w++w..\\n..+..+..\\n..+..+..\\n..w++w..\\n\"\n\nassert solution(\"5 6\\n......\\n.w....\\n......\\n..w...\\n......\") == \"......\\n+w+...\\n+.+...\\n++w...\\n......\\n\"\n\nassert solution(\"2 4\\n....\\n.w..\\n\") == \"....\\n.w..\\n\"\n\nassert solution(\"2 6\\nw..w.w\\n...w..\\n\") == \"....\\n.w..\\n\"\n\nassert solution(\"2 6\\nw..w.w\\n...w..\\n\") == \"....\\n.w..\\n\""
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8\\n....\\n....\\n..w..\\n......\\n') == '..w++w..\\n..+..+..\\n..+..+..\\n..w++w..'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('7\\n2\\n3') == 'YES\\n2 1'\nassert solution('100\\n2551\\n2557') == 'YES\\n1951 1949'\nassert solution('9960594\\n2551\\n2557') == 'YES\\n1951 1949'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7') == 'YES\\n2 1'\nassert solution('100') == 'YES\\n0 10'\nassert solution('15') == 'YES\\n1951 1949'\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n2\\n3') == 'YES\\n2 1'\nassert solution('100\\n2551\\n2557') == 'YES\\n1951 1949'\n\nimport sys; sys.stdin = open('input.txt', 'r')\n\nn = int(input())\na = int(input())\nb = int(input())"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n2\\n3') == 'YES\\n2 1'\n\nassert solution('100\\n2551\\n2557') == 'YES\\n1951 1949'\n\nassert solution('9960594\\n2551\\n2557') == 'NO'\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2 3\") == \"YES 2 1\"\nassert solution(\"100 2551 2557\") == \"YES 1949 1949\"\nassert solution(\"15 4 8\") == \"NO\"\nassert solution(\"9960594 2551 2557\") == \"YES 1951 1949\"\n\"\"\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"15 2557 2551\") == \"YES\\n1951 1949\"\nassert solution(\"100 2551 2557\") == \"YES\\n1951 1949\"\nassert solution(\"2557 2551 100\") == \"YES\\n1951 1949\"\nassert solution(\"9960594 2551 2557\") == \"NO\"\nassert solution(\"5 21 2\") == \"YES\\n0 2\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n2\\n3\") == \"YES\\n2 1\"\nassert solution(\"100\\n2551\\n2557\") == \"YES\\n1951 1949\"\n\"\"\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n2\\n3\") == 'YES\\n2 1'\nassert solution(\"9960594\\n2551\\n2557\") == 'YES\\n1951 1949'\nassert solution(\"15\\n4\\n8\") == 'NO'\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"YES\\n2 1\"\nassert solution(\"100\") == \"YES\\n0 10\"\nassert solution(\"15\") == \"YES\\n1951 1949\"\nassert solution(\"9960594\") == \"YES\\n1951 1949\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n2\\n3\") == \"YES\\n2 1\"\nassert solution(\"100\\n2551\\n2557\") == \"YES\\n1951 1949\"\nassert solution(\"9960594\\n2551\\n2557\") == \"YES\\n1951 1949\"\n\"\"\""
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\n\"\"\""
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\n\"\"\"\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\nassert solution('23') == 'twenty-three'\nassert solution('23') == 'twenty-three'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(8) == 'eight'\nassert solution(20) == 'twenty'\nassert solution(30) == 'thirty'\nassert solution(40) == 'forty'\nassert solution(50) == 'fifty'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\nassert solution('50') == 'fifty'\n\"\"\"\nimport string"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\n\nimport math"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\nassert solution('21') == 'twenty-one'\nassert solution('50') == 'fifty'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"six\"\nassert solution(\"99\") == \"ninety-nine\"\nassert solution(\"20\") == \"twenty\"\nassert solution(\"100\") == \"one-hundred\"\nassert solution(\"121\") == \"one-hundred-twenty-one\"\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6') =='six'\nassert solution('99') == 'ninety-nine'\nassert solution('20') == 'twenty'\n\n\"\"\"\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 3 4 5 6 9') == '2'\nassert solution('3\\n998 999 1000') == '2'\nassert solution('5\\n1 2 3 4 5') == '4'\n\"\"\"\n\nimport math\n\nn = int(stdin.readline())\nlst = [int(x) for x in stdin.readline().split()]\nans = 0\nl = 0\nr = 0\nfor r in range(n):\n    if lst[r] < lst[r + 1]:\n        ans += 1\n    else:\n        l = r + 1"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n1 3 4 5 6 9') == '2'\nassert solution('3\\n998 999 1000') == '2'\nassert solution('5\\n1 2 3 4 5') == '4'\nassert solution('3\\n998 999 1000') == '2'\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 3 4 5 6 9') == '2'\nassert solution('3\\n998 999 1000') == '2'\nassert solution('5\\n1 2 3 4 5') == '4'\n\"\"\"\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('5\\n1 2 3 4 5') == '4'\nassert solution('6\\n1 2 3 4 5 6') == '2'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 1 3 4 5 6\") == 2\nassert solution(\"1 3 4 5 6 9\") == 2\nassert solution(\"998 999 1000\") == 2\nassert solution(\"1 2 3 4 5\") == 4\nassert solution(\"1 2 3 4\") == 0\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 5 3\") == \"2\"\nassert solution(\"4 3 5 6\") == \"3\"\nassert solution(\"6 4 8\") == \"0\"\n\"\"\""
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 3 4 5 6 9') == '2'\nassert solution('3\\n998 999 1000') == '2'\nassert solution('5\\n1 2 3 4 5') == '4'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 3 4 5 6 9\") == \"2\"\nassert solution(\"3\\n998 999 1000\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 3 4 5\n''') == '2'\n\nassert solution('''\n6\n1 3 4 5 6 9\n''') == '2'\n\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '4'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '4'\n\nassert solution('''\n3\n998 999 1000\n''') == '2'"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6 5 8 4\") == '2'\nassert solution(\"3 5 4 7 9\") == '4'\nassert solution(\"9 8 10 12 13 14\") == '4'\nassert solution(\"1 2 3 4 5\") == '0'\nassert solution(\"998 999 1000\") == '2'\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 1') == '2'\nassert solution('6\\n2 2 2 2 2 2') == '3'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, Counter\nfrom itertools import groupby"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 2 1\") == 2\nassert solution(\"6\\n2 2 2 2 2 2\") == 3\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 2 1\") == \"2\"\nassert solution(\"6\\n2 2 2 2 2 2\") == \"3\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().strip().split()))"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 2 1\") == \"2\"\nassert solution(\"6\\n2 2 2 2 2 2\") == \"3\"\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 2 1') == '2'\nassert solution('6\\n2 2 2 2 2 2') == '3'\nassert solution('1\\n0') == '1'\nassert solution('6\\n1 1 1 1 1') == '1'"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 2 1\") == \"2\"\nassert solution(\"6\\n2 2 2 2 2 2\") == \"3\"\nassert solution(\"7\\n1 1 1 1 1 1\") == \"1\"\n\n\"\"\"\n\n\"\"\"\n1. find total number of problems solved\n2. find the number of tasks solved on the first day\n3. find the number of tasks solved in the first day\n4. find the number of tasks solved in the first day\n\n=> 2 3 4 1\n\"\"\"\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 2 1\\n') == '2'\nassert solution('6\\n2 2 2 2 2 2\\n') == '3'\nassert solution('6\\n3 3 2 3 2 2\\n') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 2 1\") == 2\nassert solution(\"6\\n2 2 2 2 2 2\") == 3\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 2 1') == 2\n\"\"\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\n\"\"\""
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 9 3\\n8 6 7\\n4 2 5') == '12 1'\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\nassert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\n\"\"\"\n\nimport sys\n\n\nclass Board:\n    def __init__(self, size):\n        self.size = size\n\n    def is_valid(self, x, y):\n        return 0 <= x < self.size and 0 <= y < self.size\n\n    def is_valid_pos(self, pos):\n        return self.is_valid(*pos)\n\n    def get_distance(self, pos1, pos2):\n        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])\n\n    def get_neighbours(self, pos):\n        neighbours = []\n        x, y = pos\n        for dx, dy in (1, 1), (1, -1), (-1, 1), (-1, -1):\n            neighbours.append((x + dx, y + dy))\n        return neighbours\n\n    def get_neighbours_excl(self, pos):\n        neighbours = set()\n        x, y = pos\n        for dx, dy in (1, 1), (1, -1), (-1, 1), (-1, -1):\n            neighbours.add((x + dx, y + dy))\n        return neighbours\n\n    def get_valid_neighbours(self, pos):\n        return [pos for pos in self.get_neighbours(pos) if self.is_valid_pos(pos)]\n\n    def get_valid_neighbours_excl(self, pos):\n        return [pos for pos in self.get_neighbours_excl(pos) if self.is_valid_pos(pos)]\n\n    def print(self, l):\n        for i in range(self.size):\n            print(l[i])\n\n\nclass Knight:\n    def __init__(self, board: Board, pos: tuple):\n        self.board = board\n        self.pos = pos\n        self.visited = set()\n        self.targets = set()\n\n    def get_targets(self, pos):\n        self.targets.add(pos)\n        return self.targets\n\n    def move(self, target: tuple):\n        self.visited.add(target)\n        return self.visited\n\n    def replace(self, target: tuple):\n        self.visited.add(target)\n        return self.visited\n\n    def can_move(self, pos):\n        return pos not in self.visited\n\n    def is_target(self, pos):\n        return pos in self.targets\n\n\nclass Rook(Knight):\n    def __init__(self, board: Board, pos: tuple):\n        super().__init__(board, pos)\n        self.targets = set()\n\n    def get_targets(self, pos):\n        self.targets = set()\n        for n in self.board.get_valid_neighbours_excl(pos):\n            self.targets.add(n)\n        return self.targets\n\n\nclass Bishop(Knight):\n    def __init__(self, board: Board, pos: tuple):\n        super().__init__(board, pos)\n        self.targets = set()\n\n    def get_targets(self, pos):\n        self.targets = set()\n        for n in self.board.get_valid_neighbours(pos):\n            self.targets.add(n)\n        return self.targets\n\n\nclass Queen(Rook, Bishop):\n    def __init__(self, board: Board, pos: tuple):\n        super().__init__(board, pos)\n\n    def move(self, target: tuple):\n        super().move(target)\n\n    def replace(self, target: tuple):\n        super().replace(target)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\n\"\"\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\n\"\"\""
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\n\"\"\"\nimport sys\nfrom typing import List\n\n\nclass Chessboard:\n    def __init__(self, n: int):\n        self.n = n\n        self.table = [[0 for _ in range(n)] for _ in range(n)]\n\n    def validate(self, x: int, y: int):\n        return 0 <= x < self.n and 0 <= y < self.n\n\n    def is_valid_move(self, x: int, y: int, dx: int, dy: int):\n        return self.validate(x + dx, y + dy) and self.table[x][y] == 0\n\n    def __move(self, x: int, y: int, dx: int, dy: int, replaced: int):\n        if not self.is_valid_move(x, y, dx, dy):\n            return replaced\n        self.table[x][y] = 0\n        self.table[x + dx][y + dy] = 0\n        return replaced + 1\n\n    def move(self, x: int, y: int, dx: int, dy: int, replaced: int):\n        return self.__move(x, y, dx, dy, replaced)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 9 3\\n8 6 7\\n4 2 5') == '12 1'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nmatrix = [[0] * N for _ in range(N)]\nn = 1\n\nfor i in range(N):\n    for j in range(N):\n        matrix[i][j] = int(sys.stdin.readline())\n\nprint(matrix)"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\nassert solution(\"3\\n1 1 1\\n8 6 7\\n4 2 5\") == \"7 2\"\n\n\"\"\""
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 9 3\\n8 6 7\\n4 2 5\") == \"12 1\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import product, combinations\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2 1\") == '1 2'\n\"\"\"\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution\u0434"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'\n\"\"\""
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100010001\") == \"yes\"\nassert solution(\"100\") == \"no\"\nassert solution(\"11101111\") == \"yes\"\nassert solution(\"11101101\") == \"no\"\nassert solution(\"11101110\") == \"yes\"\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('110011') == 'yes'\nassert solution('111111') == 'yes'\nassert solution('11011010') == 'yes'\nassert solution('11011011') == 'no'\n\"\"\""
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'\n\"\"\""
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10110001\") == \"yes\"\nassert solution(\"101101101\") == \"yes\"\nassert solution
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'\n\n\"\"\"\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'\nassert solution('11110') == 'no'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100010001') == 'yes'\nassert solution('100') == 'no'\nassert solution('010111') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == 'yes'\nassert solution('10101010') == 'yes'\nassert solution('10101010') == 'yes'\nassert solution('10101010') == 'yes'\nassert solution('10101010') == 'yes'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(s) == ans"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\n\nprint(solution(stdin))\n\nimport numpy as np"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\n\"\"\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\n\n\"\"\""
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"abcdefghijklmnopqrstuvwxyzabcd\") == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\n\"\"\""
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aacceeggiikkmmooqqssuuwwyy') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('thereisnoanswer') == '-1'\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 2 3\") == \"2.0000000000\"\n\nassert solution(\"8 5 2 7\") == \"32.8333333333\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 2 3') == 2.0\nassert solution('12 17 9 40') == 32.8333333333\n\"\"\"\nimport math\nfrom itertools import product\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 2 3\\n') == '2'\nassert solution('12 17 9 40\\n') == '32.83333333333'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 2 3\") == \"2.0000000000\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2 3\") == \"2.0\"\nassert solution(\"12 17 9 40\") == \"32.8333333333\"\n\"\"\"\n\nimport sys\n\nn, m, r, k = map(int, sys.stdin.readline().split())\nn, m, r, k = [n, m, r, k]\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2 3\") == \"2.0000000000\"\nassert solution(\"12 17 9 40\") == \"32.8333333333\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2 3\") == \"2.0000000000\"\nassert solution(\"12 17 9 40\") == \"32.8333333333\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 2 3') == '2.0000000000'\n\"\"\"\n\nimport math\n\nfrom collections import defaultdict\n\nn, m, r, k = map(int, input().split())"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 2 3') == '2.0000000000'\n\"\"\"\n\nimport sys\n\nn, m, r, k = [int(s) for s in sys.stdin.readline().strip().split()]\nprint(k * min(n * m, k) // (min(n, m) - r + 1))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 2 3') == '2.0'\nassert solution('12 17 9 40') == '32.83333333333'\n\"\"\""
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2 2\") == \"-3 -3 -3 -3\"\nassert solution(\"3 2 2\") == \"-3 -3 2\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 2 2 2\") == \"-3 -3 -3 -3\"\n\"\"\"\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))\narr = sorted(arr, key=abs)\n\nprod = 1\n\nfor i in arr:\n    prod *= i\n\nprint(*arr[::-1])"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n2 2 2 2\n''') == '-3 -3 -3 -3'\nassert solution('''1\n0\n''') == '0'\nassert solution('''3\n-3 -3 2\n''') == '-3 -3 2'\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 2 2 2') == '-3 -3 -3 -3'\nassert solution('1\\n0') == '0'\nassert solution('3\\n-3 -3 2') == '-3 -3 2'\n\n\"\"\"\n\nN = int(stdin.readline().strip())\nA = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n-3 -3 2\\n') == '-3 -3 2'\nassert solution('4\\n2 2 2 2\\n') == '-3 -3 -3 -3'\nassert solution('1\\n0\\n') == '0'\nassert solution('2\\n2 1 1\\n') == '-2 -2'\n\n\"\"\"\n\n\n\"\"\"\n\u0411\u044b\u043b\u043e \u0437\u0430\u0434\u0430\u043d\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0438 \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0438\u043c\u0435\u0435\u0442 \u043a\u043b\u044e\u0447 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u041a\u043b\u044e\u0447\u0430\u043c\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u2014 \u0441\u0443\u043c\u043c\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0435\u0439 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435. \n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0440\u0430\u0432\u0435\u043d {{'a': 1, 'b': 2, 'c': 3}, {'a': 2, 'b': 3, 'd': 1}, {'a': 3, 'd': 2, 'e': 1}}. \u041a\u043b\u044e\u0447\u0430\u043c\u0438 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f 'a', 'b', 'c', 'd', 'e', \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 1, 2, 3, 2, 1, 1. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u0443\u043c\u043c\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u043b\u044e\u0447\u0435\u0439 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u044d\u0442\u0438\u0445 \u043a\u043b\u044e\u0447\u0435\u0439. \u041a\u043b\u044e\u0447\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0435 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438\u0445 \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u043e\u0434    \n{'a': 1, 'b': 2, 'c': 3}, {'a': 2, 'b': 3, 'd': 1}, {'a': 3, 'd': 2, 'e': 1}\n\u0412\u044b\u0432\u043e\u0434\na: 4\nb: 7\nc: 6\nd: 2\ne: 1\n\"\"\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 -3 4\") == \"0 -3 -12\"\nassert solution(\"1 2 -3 4\") == \"0 -3 -12\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 2 2\\n') == '-3 -3 -3 -3'\nassert solution('1\\n0') == '0'\nassert solution('3\\n-3 -3 2') == '-3 -3 2'"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(['4', '2', '2', '2']) == '-3 -3 -3 -3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2 2\") == \"0 0 0 0\"\nassert solution(\"3 -3 2\") == \"0 -3 0\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 2 2 2\") == \"-3 -3 -3 -3\"\n\"\"\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('3 2') == '2'\nassert solution('12 5') == '6'\nassert solution('12 13') == '-1'\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"-\"\nassert solution(\"12 5\") == \"6\"\n\"\"\"\nfrom sys import stdin\nfrom math import sqrt\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"-1\"\nassert solution(\"12 5\") == \"6\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"-1\"\nassert solution(\"12 5\") == \"6\""
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"-1\"\nassert solution(\"12 5\") == \"6\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 3') == '-1'\nassert solution('12 5') == '6'"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"12 5\") == \"6\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 3') == '-1'\nassert solution('12 5') == '6'\n\"\"\"\n\nimport math"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"6\"\nassert solution(\"12 5\") == \"6\"\nassert solution(\"6 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 4 5 6 7\\n1 2 4 5 7 8\\n2 3 4 6 7 9\") == \"98\""
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7') == '87'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7''') == '87'\n\nprint(solution('3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7'))"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\"\"\"\n) == '87'\n\nassert solution(\n\"\"\"\n3\n0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n\"\"\"\n) == '98'\n\nassert solution(\n\"\"\"\n3\n9 0 0 1 1 1\n4 0 1 1 1 0\n7 8 8 8 8 8\n\"\"\"\n) == '0'\n\nassert solution(\n\"\"\"\n3\n9 0 0 1 1 1\n4 0 1 1 1 0\n7 8 8 8 8 8\n\"\"\"\n) == '0'\n\nassert solution(\n\"\"\"\n3\n2 3 4 5 6 7\n2 3 4 5 6 7\n2 3 4 6 7 9\n\"\"\"\n) == '0'"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == \"87\"\nassert solution(\"3\\n0 1 3 5 6 8\\n1 2 4 5 7 8\\n2 3 4 6 7 9\") == \"98\"\n\"\"\"\n\nimport sys\n\n\"\"\"\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\n0 1\n2 3\n4 5\n6 7\n8 9\n\n0 1 2 3\n4 5 6 7\n8 9 0 1\n\"\"\""
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\\n\") == \"87\"\n\"\"\"\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == \"87\"\nassert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == \"98\""
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7') == '87'\nassert solution('3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7') == '98'\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7') == '87'\n\n\"\"\""
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == \"87\"\nassert solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\") == \"98\"\n\"\"\"\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == \"12\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"100 1\") == \"100\"\nassert solution(\"9999999 0\") == \"999999900000000\"\nassert solution(\"5 0\") == \"5\"\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1') == '4'\nassert solution('375 4') == '30000'\nassert solution('123456789 8') == '12345678900000000'\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123456789 8') == '12345678900000000'\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('375 4') == '30000'\nassert solution('100000000 1') == '100000000'\nassert solution('38101 0') == '38101'"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"38101 0\") == \"38101\"\nassert solution(\"123456789 8\") == \"12345678900000000\""
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"80\"\nassert solution(\"38101 0\") == \"38101\"\nassert solution(\"123456789 8\") == \"12345678900000000\"\nassert solution(\"123456789 0\") == \"123456789\"\nassert solution(\"123456789 7\") == \"1234567891\"\n\"\"\"\n\nfrom math import log10, ceil"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == \"4\"\nassert solution(\"375 4\") == \"30000\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"123456789 8\") == \"12345678900000000\"\nassert solution(\"12 345 6789 10\") == \"12 345 6789 10\"\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4') == '5'\nassert solution('3 5') == '3'\nassert solution('5 0') == '5'\n\n\"\"\""
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"375 4\") == \"30000\"\nassert solution(\"10000 1\") == \"10000\"\nassert solution(\"38101 0\") == \"38101\"\nassert solution(\"123456789 8\") == \"12345678900000000\"\nprint(\"Success!\")\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('375 4\\n') == '30000'\nassert solution('10000 1\\n') == '10000'\nassert solution('38101 0\\n') == '38101'\nassert solution('123456789 8\\n') == '12345678900000000'"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([[0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]])) == '-1'\nassert solution(str([[0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]])) == '0'\nassert solution(str([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])) == '0'\nassert solution(str([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])) == '-1'\nassert solution(str([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])) == '0'\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\") == \"3\\n1 1\\n1 2\\n2 2\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\") == \"3\\n1 1\\n1 2\\n2 2\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\") == \"3\\n1 1\\n1 2\\n2 2\"\nassert solution(\"3 2\\n0 0\\n0 0\\n0 0\") == \"0\"\nassert solution(\"3 3\\n1 0 1\\n1 0 1\\n0 0 0\") == \"1\"\nassert solution(\"3 3\\n1 0 1\\n0 0 0\\n0 0 0\") == \"-1\"\nassert solution(\"3 3\\n1 1 1\\n1 0 1\\n1 1 1\") == \"-1\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\") == \"3\\n1 1\\n1 2\\n2 2\"\n\"\"\""
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\\n\") == \"3\\n1 1\\n1 2\\n2 2\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n\") == \"0\"\nassert solution(\"3 2\\n0 0\\n0 0\\n0 0\\n\") == \"0\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n0 0\\n0 0\\n0 0\\n\") == \"0\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\\n\") == \"3\"\nassert solution(\"3 3\\n1 0 1\\n1 0 1\\n0 0 0\\n\") == \"-1\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n0 0 0\\n1 1 1\\n0 1 1') == '3\\n1 1\\n2 2\\n0 2 2'\nassert solution('3 3\\n0 1 1\\n1 1 1\\n0 0 0') == '-1'\nassert solution('3 2\\n0 0\\n0 0\\n0 0\\n') == '0'\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 2\") == \"0.15 0.3 0.55\"\n\"\"\"\n\nr, s, p = map(int, input().split())\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == '0.333333333333 0.333333333333 0.333333333333'\nassert solution('2 1 2') == '0.150000000000 0.300000000000 0.550000000000'\nassert solution('1 1 3') == '0.057142857143 0.657142857143 0.285714285714'\n\"\"\"\n\nimport numpy as np\n\nrock, scissors, paper = map(int, input().split())\n\nsurvive = [rock, scissors, paper]\n\nsurvive = np.array(survive)\nsurvive = survive / sum(survive)\n\nsurvive_r = survive[0]\nsurvive_s = survive[1]\nsurvive_p = survive[2]\n\nprob_r = survive_r / (survive_r + survive_s + survive_p)\nprob_s = survive_s / (survive_r + survive_s + survive_p)\nprob_p = survive_p / (survive_r + survive_s + survive_p)\n\nprint(prob_r, prob_s, prob_p)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 2\") == \"0.15 0.3 0.55\"\n\nassert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\n\nassert solution(\"1 1 3\") == \"0.057142857143 0.657142857143 0.285714285714\"\n\nprint('The local tests are done. Click on \"Check\" for more details about AI.')\n\nwhile True:\n    try:\n        stdin = input()\n        print(solution(stdin))\n    except:\n        break\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\nassert solution(\"2 1 2\") == \"0.150000000000 0.300000000000 0.550000000000\"\nassert solution(\"1 1 3\") == \"0.057142857143 0.657142857143 0.285714285714\"\n\n\n\"\"\""
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\n\nassert solution(\"2 1 2\") == \"0.150000000000 0.300000000000 0.550000000000\"\n\nassert solution(\"1 1 3\") == \"0.057142857143 0.657142857143 0.285714285714\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 2') == '0.333333333333 0.333333333333 0.333333333333'\nassert solution('1 1 3') == '0.057142857143 0.657142857143 0.285714285714'\n\n\"\"\""
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == '0.333333333333 0.333333333333 0.333333333333'\nassert solution('2 1 2') == '0.150000000000 0.300000000000 0.550000000000'\nassert solution('1 1 3') == '0.057142857143 0.657142857143 0.285714285714'\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 2') == '0.333333333333 0.333333333333 0.333333333333'\nassert solution('2 1 2') == '0.150000000000 0.300000000000 0.550000000000'\nassert solution('1 1 3') == '0.057142857143 0.657142857143 0.285714285714'\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == '0.333333333333 0.333333333333 0.333333333333'\nassert solution('2 1 2') == '0.150000000000 0.300000000000 0.550000000000'\nassert solution('1 1 3') == '0.057142857143 0.657142857143 0.285714285714'"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\nassert solution(\"2 1 2\") == \"0.150000000000 0.300000000000 0.550000000000\"\nassert solution(\"1 1 3\") == \"0.057142857143 0.657142857143 0.285714285714\"\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\"\nassert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"1 10 9 20 1\"\n) == \"2\"\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\""
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\"\n\"\"\"\n\nl_1, r_1, l_2, r_2, k = map(int, input().split())\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\n\"\"\"\n\nfrom collections import deque\n\nfrom itertools import combinations, permutations"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\n\"\"\"\n\nl_1, r_1, l_2, r_2, k = map(int, input().split())\ncount = 0\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\""
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 10 9 20 1\") == \"2\"\nassert solution(\"1 100 50 200 75\") == \"50\"\n\"\"\"\n\n\"\"\"\nl1, r1, l2, r2, k = list(map(int, input().split()))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\") == \"13\"\n\"\"\"\n\nimport sys\n\nA, B, C = [[int(x) for x in sys.stdin.readline().split()] for _ in range(3)]\nD, E, F = [[int(x) for x in sys.stdin.readline().split()] for _ in range(3)]\n\nA.append(0)\nB.append(0)\nC.append(0)\n\nD.append(0)\nE.append(0)\nF.append(0)\n\nprint(\" \".join(map(str, [\n    min(A[0] + B[1], A[1] + B[2], A[2] + B[0]),\n    min(C[0] + B[1], C[1] + B[2], C[2] + B[0]),\n    min(A[0] + D[1], A[1] + D[2], A[2] + D[0]),\n    min(C[0] + D[1], C[1] + D[2], C[2] + D[0]),\n    min(A[0] + E[1], A[1] + E[2], A[2] + E[0]),\n    min(C[0] + E[1], C[1] + E[2], C[2] + E[0]),\n    min(A[0] + F[1], A[1] + F[2], A[2] + F[0]),\n    min(C[0] + F[1], C[1] + F[2], C[2] + F[0]),\n    max(D[0] + B[1], D[1] + B[2], D[2] + B[0]),\n    max(E[0] + B[1], E[1] + B[2], E[2] + B[0]),\n    max(D[0] + C[1], D[1] + C[2], D[2] + C[0]),\n    max(E[0] + C[1], E[1] + C[2], E[2] + C[0]),\n    max(D[0] + A[1], D[1] + A[2], D[2] + A[0]),\n    max(E[0] + A[1], E[1] + A[2], E[2] + A[0]),\n    max(D[0] + C[1], D[1] + C[2], D[2] + C[0]),\n    max(E[0] + C[1], E[1] + C[2], E[2] + C[0]),\n    max(D[0] + E[1], D[1] + E[2], D[2] + E[0]),\n    max(E[0] + E[1], E[1] + E[2], E[2] + E[0]),\n    max(D[0] + F[1], D[1] + F[2], D[2] + F[0]),\n    max(E[0] + F[1], E[1] + F[2], E[2] + F[0]),\n    max(F[0] + B[1], F[1] + B[2], F[2] + B[0]),\n    max(F[0] + C[1], F[1] + C[2], F[2] + C[0]),\n    max(F[0] + D[1], F[1] + D[2], F[2] + D[0]),\n    max(F[0] + E[1], F[1] + E[2], F[2] + E[0]),\n    max(F[0] + A[1], F[1] + A[2], F[2] + A[0]),\n    max(F[0] + C[1], F[1] + C[2], F[2] + C[0]),\n    max(F[0] + D[1], F[1] + D[2], F[2] + D[0]),\n    max(F[0] + E[1], F[1] + E[2], F[2] + E[0]),\n    max(F[0] + A[1], F[1] + A[2], F[2] + A[0]),\n    max(F[0] + C[1], F[1] + C[2], F[2] + C[0]),\n    max(F[0] + D[1], F[1] + D[2], F[2] + D[0]),\n    max(F[0] + E[1], F[1] + E[2], F[2] + E[0]),\n    max(A[0] + D[1], A[1] + D[2], A[2] + D[0]),\n    max(C[0] + D[1], C[1] + D[2], C[2] + D[0]),\n    max(A[0] + E[1], A[1] + E[2], A[2] + E[0]),\n    max(C[0] + E[1], C[1] + E[2], C[2] + E[0]),\n    max(A[0] + F[1], A[1] + F[2], A[2] + F[0]),\n    max(C[0] + F[1], C[1] + F[2], C[2] + F[0]),\n]))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\") == \"13\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4\\n\") == \"13\"\n\"\"\"\n\nfrom collections import namedtuple\n\nclass Line:\n    def __init__(self, a: int, b: int, c: int):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __str__(self) -> str:\n        return f\"{self.a}x + {self.b}y + {self.c} = 0\"\n\n    def get_x(self, y: int) -> int:\n        return -self.c * y / self.b\n\n    def get_y(self, x: int) -> int:\n        return -self.a * x / self.b\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4\\n\") == \"13\"\nprint(\"assertion passed\")\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4\") == \"13\"\n\"\"\"\n\nimport re\nfrom sys import stdin"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4\") == \"13\"\nprint(\"Passed\")\n\"\"\"\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4') == '13'\n\n\"\"\"\n\nfrom math import sqrt, inf\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 6\n1 2 0\n0 1 1\n0 2 2\n-3 4 -1\n-2 6 3\n1 0 1\n0 1 2\n2 0 2\n-1 -4 5\n3 -2 4\n1 2 4\n\"\"\") == \"13\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\") == \"13\"\n\"\"\"\n\nfrom math import gcd\nfrom typing import List, Tuple\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4\") == \"13\"\n\"\"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 10 2\") == \"NO\"\nassert solution(\"2 10 3\") == \"YES\"\nassert solution(\"2 8 51\") == \"YES\"\nassert solution(\"2 8 52\") == \"NO\"\nassert solution(\"3 8 53\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 4\") == \"YES\"\nassert solution(\"3 10 3\") == \"NO\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == 'NO'\nassert solution('1 2 7') == 'YES'\nassert solution('1 2 9') == 'NO'\nassert solution('1 2 10') == 'YES'\nassert solution('1 1 1') == 'YES'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 10 4') == 'NO'\nassert solution('3 10 3') == 'YES'\nassert solution('3 8 51') == 'YES'\nassert solution('3 8 52') == 'YES'\n\"\"\"\n\n\"\"\"\n3 10 4\n3 10 3\n3 8 51\n3 8 52\n\n\"\"\""
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\n\n\"\"\"\nfrom typing import List, Tuple\nfrom fractions import Fraction"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10 4\") == 'NO'\nassert solution(\"3 10 3\") == 'YES'\nassert solution(\"3 8 51\") == 'YES'\nassert solution(\"3 8 52\") == 'YES'\nassert solution(\"3 8 10\") == 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\") == '2 1'\n\"\"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 10\\n2 9\\n3 9\\n2 3\") == \"2 1\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\") == \"2 1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nstarts = [0]\nends = [0]\nfor i in range(n):\n    starts.append(int(sys.stdin.readline()))\n    ends.append(int(sys.stdin.readline()))\n\nstarts.append(sys.maxsize)\nends.append(sys.maxsize)\n\nans = []\n\nfor i in range(1, len(starts)):\n    ans.append(i-1)\n    for j in range(i):\n        if starts[i] > starts[j] and ends[i] > ends[j]:\n            ans[i-1] = j\n\nfor i in ans:\n    print(i, end=\" \")\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 10\\n2 9\\n3 9\\n2 3\\n2 9') == '2 1'\nassert solution('5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9') == '-1 -1'\n\n-----Test2-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n1 2\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n\nOutput\n1 2\n\nInput\n5\n1 5\n2 6\n6 20\n6 20\n\nOutput\n-1 -1\n\nInput\n3\n1 5\n2 6\n6 20\n\nOutput\n-1 -1\n\nInput\n3\n1 5\n2 6\n6 20\n\nOutput\n-1 -1\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n-1 -1\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n-1 -1\n\n-----Test3-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n-1 -1\n\nInput\n3\n1 5\n2 6\n6 20\n\nOutput\n-1 -1\n\nInput\n3\n1 5\n2 6\n6 20\n\nOutput\n-1 -1\n\nInput\n3\n1 5\n2 6\n6 20\n\nOutput\n-1 -1\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n\nOutput\n1 2\n\n-----Test4-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n1 2\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n\nOutput\n-1 -1\n\nInput\n3\n1 5\n2 6\n6 20\n\nOutput\n-1 -1\n\nInput\n3\n1 5\n2 6\n6 20\n\nOutput\n-1 -1\n\n-----Test5-----\n\nInput\n6\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n3 1\n\n-----Test6-----\n\nInput\n6\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n1 1\n\n-----Test7-----\n\nInput\n4\n1 5\n2 6\n6 20\n6 20\n\nOutput\n-1 -1\n\n-----Test8-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n1 2\n\n-----Test9-----\n\nInput\n4\n1 5\n2 6\n6 20\n6 20\n\nOutput\n1 2\n\n-----Test10-----\n\nInput\n4\n1 5\n2 6\n6 20\n6 20\n\nOutput\n1 2\n\n-----Test11-----\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n-1 -1\n\n-----Test12-----\n\nInput\n6\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n-1 -1\n\n-----Test13-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n-1 -1\n\n-----Test14-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n-1 -1\n\n-----Test15-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n1 2\n\n-----Test16-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n1 2\n\n-----Test17-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n1 2\n\n-----Test18-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n-1 -1\n\n-----Test19-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n-1 -1\n\n-----Test20-----\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n3 1\n\n-----Test21-----\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n-1 -1\n\n-----Test22-----\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n1 2\n\n-----Test23-----\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n1 1\n\n-----Test24-----\n\nInput\n6\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n-1 -1\n\n-----Test25-----\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n-1 -1\n\n-----Test26-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n-1 -1\n\n-----Test27-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n-1 -1\n\n-----Test28-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n1 2\n\n-----Test29-----\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n-1 -1\n\n-----Test30-----\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n1 2\n\n-----Test31-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n1 2\n\n-----Test32-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n1 1\n\n-----Test33-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n1 1\n\n-----Test34-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n1 1\n\n-----Test35-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n-1 -1\n\n-----Test36-----\n\nInput\n4\n1 10\n2 9\n3 9\n1 10\n\nOutput\n-1 -1\n\n-----Test37-----\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n3 1\n\n-----Test38-----\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n4 8\n5 7\n\nOutput\n-1 -1\n\n-----Test39-----\n\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9') == '2 1'\nassert solution('3\\n1 5\\n2 6\\n6 20') == '-1 -1'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\") == \"2 1\"\nassert solution(\"3\\n1 5\\n2 6\\n6 20\") == \"1 1\"\n\nimport unittest\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\"), \"2 1\")"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\") == \"2 1\"\nassert solution(\"3\\n1 5\\n2 6\\n6 20\") == \"-1 -1\""
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\") == \"2 1\"\nassert solution(\"3\\n1 5\\n2 6\\n6 20\") == \"-1 -1\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 5\\n2 6\\n6 20') == '1 1'\nassert solution('5\\n1 10\\n2 9\\n3 9\\n2 3') == '2 1'\nassert solution('3\\n1 5\\n2 6\\n6 20') == '-1 -1'\nassert solution('1\\n1 10\\n2 9\\n3 9\\n2 3') == '-1 -1'\n\n\"\"\""
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\") == \"2 1\"\n\"\"\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AG?C??CT\") == \"AGACGTCT\"\nassert solution(\"????G?\") == \"===\"\nassert solution(\"AA??\") == \"===\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AG?C??CT') == 'AGACGTCT'\nassert solution('????G?') == '==='\nassert solution('AA??') == '==='\n\"\"\"\n\nimport string"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AG?C??CT\") == \"AGACGTCT\"\nassert solution(\"AA??\") == \"===\"\nassert solution(\"????G??\") == \"=====\"\nassert solution(\"????\") == \"===\"\n\n\"\"\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ACGT?C??CT') == 'ACGTCT'\nassert solution('AA??') == '==='\nassert solution('????G?') == '==='\nassert solution('GC??GC') == 'GC'\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AG?C??CT\") == \"AGACGTCT\"\nassert solution(\"????G??\") == \"===\", \"Should be ===\"\nassert solution(\"AA???\") == \"===\", \"Should be ===\"\n\n\"\"\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AG?C??CT') == 'AGACGTCT'\nassert solution('AAAAAA??') == '==='\nassert solution('?A??T?AT') == '==='\n\n\"\"\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AG?C??CT\") == \"AGACGTCT\"\nassert solution(\"AAAAAA???\") == \"===\"\nassert solution(\"????G??\") == \"==="
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AG?C??CT\") == \"AGACGTCT\"\nassert solution(\"AGCT\") == \"AGCT\"\nassert solution(\"????G??\") == \"===\\n\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AG?C??CT\") == \"AGACGTCT\"\nassert solution(\"AA??\") == \"===\"\nassert solution(\"????G?C\") == \"====\"\nassert solution(\"AAAAGGGTTTT\") == \"AAAAGGGTTTT\"\n\nprint('Success')"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''8\nAG?C??CT\n''') == 'AGACGTCT'\nassert solution('''4\nAA??\n''') == '==='\nassert solution('''6\n????G?\n''') == '==='''\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xx..\\n.oo.\\nx...\\noox.\") == \"YES\"\nassert solution(\"x.ox\\nox..\\nx.o.\\noow.\") == \"NO\"\nassert solution(\"x..x\\n..oo\\no...\\nx.xo\") == \"YES\"\nassert solution(\"o.x.\\no...\\n.x..\\noow.\") == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"x.x\\n.o..\\nx..x\\no.o.\") == \"YES\"\nassert solution(\"x.x\\n.o..\\nx..x\\no.o.\") == \"YES\"\nassert solution(\"x..x\\n..oo\\no.o.\") == \"NO\"\nassert solution(\"x..x\\n..oo\\no.o.\") == \"NO\"\nassert solution(\"x..x\\n..oo\\no.x.\") == \"YES\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('x.ox') == 'YES'\nassert solution('o.x.') == 'YES'\nassert solution('x..x') == 'YES'\nassert solution('..oo') == 'YES'\nassert solution('ooxx') == 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('.ox.o') == 'YES'\nassert solution('..o..') == 'NO'\n\"\"\""
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xx..\") == \"YES\"\nassert solution(\"x.ox\") == \"NO\"\nassert solution(\"o.x.\") == \"YES\"\n\nassert solution(\"xxx..\") == \"NO\"\nassert solution(\"xoox..\") == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xx..\\n.oo.\\nx...\\noox\\n') == 'YES'\nassert solution('x.ox\\nox..\\nx.o.\\noo.x\\n') == 'NO'\nassert solution('o.x.\\no...\\n.x..\\noox\\n') == 'YES'\nassert solution('o.x.\\no...\\n.x..\\noox\\n') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xx..\") == \"YES\"\nassert solution(\"xoox\") == \"NO\"\nassert solution(\"xx..\") == \"YES\"\nassert solution(\"x.ox\") == \"YES\"\nassert solution(\"o.x.\") == \"YES\"\n\n\"\"\"\n\nimport unittest\nfrom unittest.mock import patch\nfrom io import StringIO\n\nfrom tic_tac_toe import (\n    TicTacToe,\n    EMPTY_CELL,\n    PLAYER_X,\n    PLAYER_O,\n)\n\n\nclass TicTacToeTestCase(unittest.TestCase):\n\n    def test_put_cross_player_one_turn_fails(self):\n        field = [\n            [EMPTY_CELL, EMPTY_CELL, EMPTY_CELL],\n            [EMPTY_CELL, PLAYER_O, PLAYER_O],\n            [PLAYER_X, PLAYER_O, PLAYER_O],\n        ]\n        expected = False\n\n        tic_tac_toe = TicTacToe(field=field)\n        actual = tic_tac_toe.put_cross(0, 0)\n\n        self."
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"x.ox\\n..oo\\nx.o.\\no.x\") == \"YES\"\nassert solution(\"x.ox\\n..oo\\nx.o.\\no.x\") == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'xoxo\\n'\n'.xo.\\n'\n'oxxo\\n'\n'..o.'\n) == 'YES'\nassert solution(\n'xoxo\\n'\n'.xo.\\n'\n'oxxo\\n'\n'..ox'\n) == 'NO'\nassert solution(\n'xoxo\\n'\n'.xo.\\n'\n'oxxo\\n'\n'...x'\n) == 'YES'\nassert solution(\n'xoxo\\n'\n'.xo.\\n'\n'oxxo\\n'\n'x...'\n) == 'NO'\nassert solution(\n'xoxo\\n'\n'.xo.\\n'\n'oxxo\\n'\n'xoxx'\n) == 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xx..\") == \"YES\"\nassert solution(\"x.ox\") == \"NO\"\nassert solution(\"o.x.\") == \"YES\"\nassert solution(\"o..x\") == \"YES\"\nassert solution(\"..oo\") == \"YES\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"5\\n2 2 3 4 5\") == \"YES\"\n\n\"\"\"\n\n\nimport unittest"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 2\") == 'YES'\nassert solution(\"5\\n1 2 3 4 5\") == 'NO'\nassert solution(\"5\\n2 2 3 4 5\") == 'YES'\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 3 2') == 'YES'\nassert solution('5\\n2 2 3 4 5') == 'NO'\nassert solution('5\\n2 2 3 4 5') == 'YES'\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"5\\n2 2 3 4 5\") == \"YES\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 2 3 4 5') == 'YES'\nassert solution('5\\n2 2 3 4 5') == 'NO'\nassert solution('5\\n1 2 3 4 5') == 'YES'\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 2') == 'YES'\nassert solution('5\\n1 2 3 4 5') == 'NO'\nassert solution('5\\n2 2 3 4 5') == 'YES'\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"2 2 3 4 5\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 3 4 5\") == \"YES\"\nassert solution(\"1 3 2\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n2 2 3 4 5\") == \"NO\"\nassert solution(\"5\\n1 2 3 4 5\") == \"YES\""
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"YES\"\nassert solution(\"5\\n2 2 3 4 5\") == \"NO\"\nassert solution(\"5\\n1 2 3 4\") == \"NO\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n11 0 0 14\\n5 4\") == \"Yes\"\nassert solution(\"6 1\\n2 3 0 8 9 10\\n5\") == \"No\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\") == \"Yes\"\nassert solution(\"4 1\\n8 94 0 4\\n89\") == \"Yes\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\") == \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n11 0 0 14\\n5 4\") == \"Yes\"\nassert solution(\"6 1\\n2 3 0 8 9 10\\n5\") == \"No\"\nassert solution(\"4 1\\n8 94 0 4\\n89\") == \"Yes\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\") == \"Yes\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\\n2 3 4 5 6 7\") == \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n8 94 0 4\\n89\") == \"Yes\"\nassert solution(\"4 2\\n11 0 0 14\\n5 4\") == \"Yes\"\nassert solution(\"6 1\\n2 3 0 8 9 10\") == \"No\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\") == \"Yes\"\n\nassert solution(\"4 1\\n8 94 0 4\\n89\") == \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n11 0 0 14\\n5 4') == 'Yes'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7') == 'Yes'\nassert solution('4 1\\n8 94 0 4\\n89') == 'Yes'\nassert solution('4 4\\n1 2 3 4 5 6 7') == 'No'\n\"\"\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n8 94 0 4\") == \"Yes\"\nassert solution(\"4 1\\n89\") == \"No\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\") == \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n2 3 0 8 9 10\\n5\") == \"Yes\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\") == \"Yes\"\nassert solution(\"4 1\\n2 3 0 8 9 10\\n5\") == \"No\"\nassert solution(\"7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\") == \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n11 0 0 14\\n5 4') == 'Yes'\nassert solution('6 1\\n2 3 0 8 9 10') == 'No'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 7\\n1 2 3 4 5 6 7\") == \"Yes\"\nassert solution(\"7 7\\n1 2 3 4 5 6 7\") == \"Yes\"\nassert solution(\"7 7\\n1 2 3 4 5 6 7\") == \"Yes\"\nassert solution(\"7 7\\n1 2 3 4 5 6 7\") == \"Yes\"\nassert solution(\"7 7\\n1 2 3 4 5 6 7\") == \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n11 0 0 14\\n5 4\\n') == 'Yes'\nassert solution('6 1\\n2 3 0 8 9 10\\n5\\n') == 'No'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\\n') == 'Yes'\nassert solution('7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\\n') == 'Yes'\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 0 0 14\") == \"Yes\"\nassert solution(\"5 4\") == \"No\"\n\"\"\""
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 6 2\\n4 3 3') == 'YES'\nassert solution('5 1 1\\n4 3 2') == 'NO'\nassert solution('3 3 4\\n2 2 2') == 'YES'\nassert solution('4 4 5\\n3 3 1') == 'NO'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 1\\n4 3 2') == 'NO'\nassert solution('1 6 2\\n4 3 3') == 'YES'\nassert solution('4 3 4\\n3 2 2') == 'YES'\n\"\"\""
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"./tests/c_example.txt\") == \"YES\"\nassert solution(\"./tests/d_example.txt\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 1\\n4 3 2\") == \"NO\"\n\n\"\"\"\n\n\n\"\"\"\n\u9519\u8bef\n\"\"\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 6 2\\n4 3 3\") == \"YES\"\nassert solution(\"5 1 1\\n4 3 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 1\\n4 3 2') == 'NO'\nassert solution('6 7 1\\n5 3 2') == 'YES'\n\"\"\"\n\nx, y, z = [int(i) for i in input().split()]\na, b, c = [int(i) for i in input().split()]\n\ncount_grapes = [x, y, z]\ncount_grapes.sort()\n\ncount_grapes_green = 0\ncount_grapes_purple = 0\ncount_grapes_black = 0\nfor i in count_grapes:\n    if i == a:\n        count_grapes_green += 1\n    elif i == b:\n        count_grapes_purple += 1\n    else:\n        count_grapes_black += 1\n        \n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 6 2\\n4 3 3\") == \"YES\"\nassert solution(\"5 1 1\\n4 3 2\") == \"NO\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 6 2\\n4 3 3\") == \"YES\"\nassert solution(\"5 1 1\\n4 3 2\") == \"NO\"\n\nassert solution(\"1 1 1\\n1 1 1\") == \"YES\"\nassert solution(\"1 1 1\\n1 2 1\") == \"NO\"\nassert solution(\"1 2 1\\n1 1 1\") == \"YES\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 6 2\\n4 3 3\") == \"YES\"\nassert solution(\"5 1 1\\n4 3 2\") == \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"1 6 2\") == \"YES\"\nassert solution(\"1 6 2\") == \"NO\""
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\nassert solution(\"1 0 0 0\\n0 0 0 1\\n0 0 0 0\\n1 0 1 0\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1,0,0,1) == 'YES'\nassert solution(0,1,1,0) == 'NO'\n\"\"\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1') == 'YES'\nassert solution('0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1') == 'NO'\nassert solution('1 0 0 0\\n0 0 0 1\\n0 0 0 0\\n1 0 1 0') == 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\n\n------'''\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".\\\\tests\\\\alice.txt\") == \"YES\"\nassert solution(\".\\\\tests\\\\bob.txt\") == \"NO\"\nassert solution(\".\\\\tests\\\\carl.txt\") == \"YES\"\nassert solution(\".\\\\tests\\\\david.txt\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\nassert solution(\"0 1 1 0\\n1 0 1 0\\n1 0 1 0\\n0 0 0 1\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''0 1 1 0\n1 0 1 0\n1 1 0 0\n0 0 0 1''') == 'NO'\nassert solution('''1 0 0 0\n0 0 0 1\n0 0 0 0\n1 0 1 0''') == 'NO'\nassert solution('''1 0 0 0\n0 0 0 1\n0 0 0 0\n1 0 1 0''') == 'YES'\nassert solution('''0 1 1 0\n1 0 1 0\n1 1 0 0\n0 0 0 1''') == 'YES'"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\n\n-----\n\"\"\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 1 0\\n1 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"YES\"\nassert solution(\"1 0 1 0\\n0 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\nassert solution(\"1 0 1 0\\n0 0 1 0\\n1 1 0 0\\n0 0 0 1\") == \"NO\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"912\") == \"YES\"\nassert solution(\"912\") == \"YES\"\nassert solution(\"912345\") == \"NO\"\nassert solution(\"912345\") == \"NO\"\nassert solution(\"91234\") == \"YES\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('912') == 'YES'\nassert solution('09') == 'NO'\nassert solution('12') == 'YES'\n\n\"\"\"\n\nimport collections\nimport math\nimport sys\n\nsys.setrecursionlimit(100000)\nMOD = 10 ** 9 + 7\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"566\") == 'YES'\nassert solution(\"811\") == 'NO'\nassert solution(\"912\") == 'YES'\nassert solution(\"999\") == 'YES'\n\"\"\"\n\nn = int(input())\nnum = input()"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\", \"586\") == \"NO\"\nassert solution(\"3\", \"911\") == \"YES\"\nassert solution(\"9\", \"123456789\") == \"YES\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"912\") == \"NO\"\nassert solution(\"913\") == \"NO\"\nassert solution(\"914\") == \"YES\"\nassert solution(\"912\") == \"NO\"\nassert solution(\"911\") == \"YES\"\n\"\"\""
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n914\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n09\") == \"NO\"\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n586') == 'NO'\n\nassert solution('2\\n09') == 'NO'\n\nassert solution('9\\n123456789') == 'YES'\n\nassert solution('3\\n911') == 'YES'\n\n\n\"\"\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n09') == 'NO'\nassert solution('2\\n09') == 'NO'\nassert solution('9\\n123456789') == 'YES'"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n2 1\\n3 5\\n2 3\\n1 5\") == \"10\"\nassert solution(\"4 1\\n0 2\\n0 3\\n3 5\\n0 6\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(4, 2) == 10\n\"\"\"\n\nimport collections"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n2 1\\n3 5\\n2 3\") == 10\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n0 2\\n0 3\\n3 5\\n0 6\") == \"5\"\n\"\"\"\n\nn, f = [int(i) for i in input().split()]\narr = []\nfor i in range(n):\n    arr.append([int(i) for i in input().split()])\n\narr.sort(key=lambda x: x[0])\n\nans = 0\nfor i in range(f):\n    ans += (arr[i][1] * 2)\n    if arr[i][0]!= 0:\n        ans += arr[i][0]\n    else:\n        ans -= arr[i][1]\n\nprint(ans)\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2 1\\n3 5\\n2 3\") == 10\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n2 1\\n3 5\\n2 3\") == 10\n\"\"\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2 1\\n3 5\\n2 3\\n1 5\\n\") == 5\nassert solution(\"4 1\\n0 2\\n0 3\\n3 5\\n0 6\\n\") == 5\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n2 1\\n3 5\\n2 3\") == \"10\"\nassert solution(\"4 1\\n0 2\\n0 3\\n3 5\\n0 6\") == \"5\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n2 1\\n3 5\\n2 3\\n1 5\\n') == 10\n\"\"\"\n\nf, n = map(int, input().split())\ns = [tuple(map(int, input().split())) for _ in range(n)]"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 1\\n3 5\\n2 3\\n1 5\") == 10\nassert solution(\"4 1\\n0 2\\n0 3\\n3 5\\n0 6\") == 5\n\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solve(self, n, f):\n        pass"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 10') == 10\nassert solution('1 10\\n') == 0\nprint(solution(stdin))\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n1 10') == '10'\nassert solution('1 10\\n') == '0'\nprint('Success')\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == 10\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"10\"\n\"\"\"\n\nfrom tools import timing"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"10\"\n\nassert solution(\"1 10\") == \"0\"\n\nassert solution(\"1 1\") == \"0\""
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"10\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"10 10\") == \"0\"\n\nimport os, sys, re, array, itertools\nfrom collections import deque, Counter, defaultdict, OrderedDict\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom itertools import accumulate, product, combinations, combinations_with_replacement\nfrom bisect import bisect, bisect_left, bisect_right\nfrom functools import reduce\nfrom decimal import Decimal, getcontext\nfrom array import array"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == 10\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 10') == '0'\nassert solution('1 2') == '1'\nassert solution('1 3') == '2'\nassert solution('1 4') == '3'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 10') == 10\nassert solution('1 10\\n') == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 10\") == 10\n\"\"\""
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 15 2 3\") == \"1\"\nassert solution(\"10 11 2 4\") == \"-1\"\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 15 2 3\") == \"1\"\nassert solution(\"10 11 2 4\") == \"-1\"\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 11 2 4\") == \"-1\"\nassert solution(\"20 15 2 3\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport time"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 11 2 4') == '-1'\nassert solution('20 15 2 3') == '1'\nassert solution('10 11 2 4') == '-1'\nassert solution('20 15 2 3') == '1'\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '-1'\nassert solution('1 2 3 4') == '2'\nassert solution('1 2 3 4 5') == '3'\nassert solution('1 2 3 4 5 6') == '4'\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 15 2 3\") == \"1\"\nassert solution(\"10 11 2 4\") == \"-1\"\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == -1\nassert solution('2 5 1 4') == 3\nassert solution('5 15 2 3') == 1\nassert solution('7 7 4 7') == -1\nassert solution('5 9 4 5') == 4\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 11 2 4\") == \"1\"\nassert solution(\"20 15 2 3\") == \"1\"\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 11 2 4\") == \"1\"\nassert solution(\"10 11 2 3\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 11 2 4\") == \"1\"\nassert solution(\"20 15 2 3\") == \"1\"\nassert solution(\"10 11 2 3\") == \"-1\"\nassert solution(\"10 10 2 3\") == \"-1\"\nassert solution(\"10 10 2 3\") == \"-1\"\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\nW W\\nW W') == '1'\nassert solution('1 1\\nW') == '-1'\nassert solution('3 3\\nW W W\\nW W W\\nW W W') == '1'\n\n\"\"\""
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW\") == 5\nassert solution(\"1 2\\nBB\") == -1\nassert solution(\"3 3\\nWWW\\nWWW\\nWWW\") == 1\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW\") == \"5\"\nassert solution(\"1 2\\nBB\") == \"1\"\nassert solution(\"3 3\\nWWW\\nWWW\\nWWW\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\nW WB\\nWB W\\nWWB\\nB WB\\nWBB\\n\") == \"1\"\nassert solution(\"3 3\\nW W\\nB W\\nW W\\n\") == \"-1\"\nassert solution(\"1 1\\nW\\n\") == \"0\"\nassert solution(\"1 1\\nW W\\n\") == \"1\"\nassert solution(\"1 1\\nW W\\nW W\\n\") == \"-1\"\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5, 4, \"WWWW\") == \"5\"\nassert solution(5, 4, \"WWWB\") == \"5\"\nassert solution(5, 4, \"WWBB\") == \"-1\"\nassert solution(5, 4, \"WWWW\") == \"5\"\nassert solution(3, 3, \"WWW\") == \"1\"\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW\") == 5\nassert solution(\"1 2\\nBB\") == -1\nassert solution(\"3 3\\nWWW\\nWWW\\nWWW\") == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nWBRW\\nRBRW\\nRWRB\\nWRWB\") == \"5\"\nassert solution(\"3 3\\nWWW\\nWWW\\nWWW\") == \"1\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW') == 5\nassert solution('1 2\\nBB') == -1\nassert solution('3 3\\nWWW\\nWWW\\nWWW') == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW\") == \"5\"\nassert solution(\"1 2\\nBB\") == \"-1\"\nassert solution(\"3 3\\nWWW\\nWWW\\nWWW\") == \"1\"\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW\") == \"5\"\nassert solution(\"1 2\\nBB\") == \"-1\"\nassert solution(\"3 3\\nWWW\\nWWW\\nWWW\\n\") == \"1\""
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('2 1 4 3 5') == 'Yes'\nassert solution('1 1 1 1 1') == 'Yes'"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 3 4 5\") == \"Yes\"\nassert solution(\"5 1 1 1 1 5\") == \"Yes\"\nassert solution(\"5 0 1 0 1 5\") == \"Yes\"\nassert solution(\"3 2 9\") == \"No\"\nassert solution(\"1 7 9\") == \"No\"\n\"\"\"\n\n\n\n\"\"\"\n\n-----"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 1 4 3 5\") == \"Yes\"\nassert solution(\"5\\n1 1 1 1 1\\n1 0 1 0 1\") == \"Yes\"\nassert solution(\"3\\n2 3 9\") == \"No\"\nassert solution(\"3\\n1 7 9\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 1 4 3 5\") == \"Yes\"\nassert solution(\"5\\n1 1 1 1 1\\n1 0 1 0 1\") == \"Yes\"\nassert solution(\"3\\n2 3 9\\n1 7 9\") == \"No\"\n\"\"\"\n\nimport sys\nfrom itertools import zip_longest\nfrom typing import List, Set, Tuple\nfrom unittest import mock, TestCase\n\nsys.stdin = mock.Mock(spec=sys.stdin, readline=lambda: '5\\n1 2 3 4 5\\n2 1 4 3 5')\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 2 3 4 5') == 'Yes'\nassert solution('5 1 1 1 1') == 'Yes'\nassert solution('5 1 0 1 0 1') == 'Yes'\nassert solution('3 2 9') == 'No'\nassert solution('1 7 9') == 'No'\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 1 4 3 5\\n\") == \"Yes\"\nassert solution(\"5\\n1 1 1 1 1\\n1 0 1 0 1\\n\") == \"Yes\"\nassert solution(\"5\\n1 1 1 1 1\\n1 0 1 0 1\\n\") == \"No\"\nassert solution(\"5\\n1 1 1 1 1\\n1 0 1 0 1\\n\") == \"No\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 9\") == \"No\"\nassert solution(\"1 7 9\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 3 4 5\\n2 1 4 3 5\") == \"Yes\"\nassert solution(\"5 1 2 3 4 5\\n2 1 4 3 5\") == \"Yes\"\nassert solution(\"5 1 2 3 4 5\\n1 1 4 3 5\") == \"No\"\nassert solution(\"5 1 2 3 4 5\\n1 0 4 3 5\") == \"No\"\nassert solution(\"5 1 2 3 4 5\\n1 1 1 1 1\") == \"Yes\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 1 4 3 5') == 'Yes'\nassert solution('5\\n1 1 1 1 1\\n1 0 1 0 1') == 'Yes'\nassert solution('3\\n2 3 9\\n1 7 9') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 1 1 1\\n1 0 1 0 1') == 'Yes'\nassert solution('5\\n2 1 4 3 5\\n1 2 4 3 5') == 'No'\nassert solution('3\\n2 3 9\\n1 7 9') == 'No'\n\"\"\"\n\nn = int(stdin.readline())\nx = [int(i) for i in stdin.readline().split()]\ny = [int(i) for i in stdin.readline().split()]\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n90 90 90 90\") == \"0\"\nassert solution(\"1\\n360\") == \"360\"\nassert solution(\"4\\n170 30 150 10\") == \"0\""
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n170 30 150 10\") == \"0\"\nassert solution(\"1\\n360\") == \"360\"\nassert solution(\"4\\n100 100 160\") == \"0\"\nassert solution(\"3\\n100 100 160\") == \"40\"\n\"\"\""
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n170 30 150 10') == '0'\nassert solution('3\\n100 100 160') == '0'\nassert solution('1\\n360') == '360'\nassert solution('4\\n170 30 150 10') == '0'\nassert solution('1\\n1') == '1'\n\n\"\"\"\n\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\ns = sum(a)\ns = s % 360\nans = 0\nfor i in range(n):\n    ans = max(ans, abs((360 * (i + 1)) - s))\nprint(ans)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n100 100 160\\n\") == \"0\"\nassert solution(\"3\\n100 100 160\\n\") == \"0\"\nassert solution(\"1\\n360\\n\") == \"360\"\nassert solution(\"4\\n170 30 150 10\\n\") == \"0\"\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n100 100 160\") == \"0\"\nassert solution(\"3\\n100 100 160\") == \"40\"\nassert solution(\"1\\n360\") == \"360\"\nassert solution(\"4\\n170 30 150 10\") == \"0\""
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n90 90 90 90\") == \"0\"\nassert solution(\"3\\n100 100 160\") == \"40\"\nassert solution(\"1\\n360\") == \"360\""
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n100 100 160\\n') == '0'\nassert solution('1\\n360\\n') == '360'\nassert solution('4\\n170 30 150 10\\n') == '0'\n\n----"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n100 100 160\\n') == '0'\n\n\"\"\"\nfrom math import atan, pi\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 2 3\\n\") == \"0\"\nassert solution(\"3\\n100 100 160\\n\") == \"0\"\nassert solution(\"4\\n170 30 150 10\\n\") == \"0\"\nassert solution(\"1\\n360\\n\") == \"360\"\nassert solution(\"4\\n170 30 150 10\\n\") == \"0\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n100 100 160\\n\") == \"0\\n\"\nassert solution(\"1\\n360\\n\") == \"360\\n\"\nassert solution(\"4\\n170 30 150 10\\n\") == \"0\\n\"\n\n\"\"\"\nfrom dataclasses import dataclass\nfrom typing import List, Tuple\n\nfrom solutions.utils.main import app\n\nfrom dataclasses_json import dataclass_json\n\n\n@dataclass_json\n@dataclass\nclass PuzzleInput:\n    n: int\n\n    sectors: List[int]\n\n\n@dataclass_json\n@dataclass\nclass Solution:\n    diff: int\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('3 3\\n') == '9'\nassert solution('2 2\\n') == '9'\nassert solution('2 1\\n') == '0'\nassert solution('3 2\\n') == '7'\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3') == '7'\nassert solution('2 2') == '9'\n\"\"\"\n\n\nfrom typing import Dict\nfrom collections import Counter\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 3''') == '9'\nassert solution('''1 3''') == '7'\n\"\"\""
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3') == '9'\nassert solution('1 3') == '7'\nassert solution('2 2') == '9'\n\"\"\"\n\nfrom collections import defaultdict, Counter"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3') == '7'\n\nassert solution('2 2') == '9'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == '7'\n\"\"\"\n\n\n\nfrom collections import Counter"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"9\"\nassert solution(\"1 3\") == \"7\"\nassert solution(\"2 2\") == \"9\"\n\n-----\n\nfrom collections import Counter\n\nMOD = 10**9+7\n\nn, m = [int(x) for x in input().split()]\npresents = Counter()\nfor _ in range(n):\n    presents[int(input())] += 1\n\nans = 1\nfor i, v in presents.items():\n    ans *= (i*(i+1)//2)\n    ans %= MOD\n    for _ in range(v):\n        for j in range(i, m+1):\n            ans *= (i + j)\n            ans %= MOD\nfor _ in range(m):\n    ans *= (m+1)\n    ans %= MOD\nprint(ans)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"2 2\") == \"9\""
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\\n2 2\") == \"7\"\n\"\"\"\n\n\nfrom itertools import combinations\nfrom functools import reduce\nfrom operator import xor\n\nstdin = open(\"input.txt\", \"r\").read().split(\"\\n\")\n\nn, m = stdin[0].split(\" \")\n\nn = int(n)\nm = int(m)\n\npresents = list(range(1, n+1))\nboxes = list(range(m))\n\ncombinations_of_boxes = combinations(boxes, 2)\nunique_boxes = [\n    reduce(xor, x)\n    for x in combinations_of_boxes\n]"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == '7'\nassert solution('2 2') == '9'\nassert solution('3 4') == '15'\nassert solution('2 4') == '9'\n\n\"\"\""
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\nassert solution('67') == '2244 2245'\n\"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '4 5'\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"4 5\"\nassert solution(\"6\") == \"8 10\"\nassert solution(\"1\") == \"-1\"\nassert solution(\"17\") == \"144 145\"\n\n\"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"4 5\"\nassert solution(\"6\") == \"8 10\"\nassert solution(\"1\") == \"-1\"\nassert solution(\"17\") == \"144 145\"\nassert solution(\"67\") == \"2244 2245\"\n\n\"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"4 5\"\n\nassert solution(\"6\") == \"8 10\"\n\nassert solution(\"1\") == \"-1\"\n\nassert solution(\"17\") == \"144 145\"\n\nassert solution(\"67\") == \"2244 2245\""
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"4 5\"\nassert solution(\"6\") == \"8 10\"\nassert solution(\"1\") == \"-1\"\nassert solution(\"17\") == \"144 145\"\nassert solution(\"67\") == \"2244 2245\""
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\n\"\"\"\nimport math\n\nn = int(input())\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '4 5'\nassert solution('6') == '8 10'\nassert solution('1') == '-1'\nassert solution('17') == '144 145'\nassert solution('67') == '2244 2245'\n\n\"\"\"\n\nn = int(input())\n\na = 1\nb = 1\nc = 2\n\nwhile a < n:\n    while a ** 2 + b ** 2 < n ** 2:\n        if a ** 2 + b ** 2 == c ** 2:\n            print(a, b, c)\n            break\n        b += 1\n        c += 1\n    a += 1\n    b = 1\n    c = 2"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"No\"\nassert solution(\"5 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"No\"\nassert solution(\"5 3\") == \"Yes\"\nassert solution(\"5 8\") == \"No\"\nassert solution(\"7 6\") == \"Yes\"\nassert solution(\"6 9\") == \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4') == 'No'\nassert solution('5 3') == 'Yes'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"No\"\nassert solution(\"5 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == 'Yes'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4') == 'No'\nassert solution('5 3') == 'Yes'\n\n'''"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"No\"\nassert solution(\"5 3\") == \"Yes\"\nassert solution(\"5 5\") == \"Yes\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n') == 'No\\n'\nassert solution('5 3\\n') == 'Yes\\n'\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"No\"\nassert solution(\"5 3\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"1 2 3\") == \"No\"\nassert solution(\"1 2 4\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\">\") == \">\"\nassert solution(\"<\") == \"<\"\nassert solution(\"=\") == \"=\"\n\n\"\"\"\n\na = input()\nb = input()\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\", \"10\") == \"<\"\nassert solution(\"11\", \"10\") == \">\"\nassert solution(\"00012345\", \"12345\") == \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n10\") == \"<\"\nassert solution(\"11\\n10\") == \">\"\nassert solution(\"00012345\\n12345\") == \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 10\") == \"<\"\nassert solution(\"11 10\") == \">\"\nassert solution(\"00012345 12345\") == \">\"\n\n---"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9\\n10') == '<'\nassert solution('11\\n10') == '>'\nassert solution('0123\\n12345') == '='\nassert solution('0123\\n111') == '>'\nassert solution('000123\\n111') == '>'\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0123\", \"9\") == \"<\"\nassert solution(\"10\", \"10\") == \"=\"\nassert solution(\"0123\", \"111\") == \">\"\n\"\"\"\nimport sys\nfrom typing import IO\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n10\") == \"<\"\nassert solution(\"11\\n10\") == \">\"\nassert solution(\"00012345\\n12345\") == \"=\"\nassert solution(\"0123\\n111\") == \">\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\">\") == \">\"\nassert solution(\"<\") == \"<\"\nassert solution(\"=\") == \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\n10') == '<'\nassert solution('11\\n10') == '>'\nassert solution('0123\\n12345') == '='\nassert solution('000123\\n12345') == '>'\nassert solution('000123\\n1111') == '>'"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n10\") == \"<\"\nassert solution(\"11\\n10\") == \">\"\nassert solution(\"00012345\\n12345\") == \"=\"\nassert solution(\"0123\\n111\") == \">\"\n\n\"\"\""
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n-1 0 1\") == \"6\"\nassert solution(\"1 1\\n-1\") == \"2\"\nassert solution(\"1 1\\n0\") == \"1\"\n\"\"\"\n\nimport sys\nimport queue"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n-1 0 1\") == 2\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n-1 0 1') == '6'\nassert solution('2 1\\n1 0') == '1'\nassert solution('1 1\\n-1') == '2'\n\"\"\"\nimport collections"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n-1 0 1') == '6'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n-1 0 1') == '6'\n\"\"\""
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n-1 0 1') == '6'\nassert solution('2 1\\n1 0') == '1'\nassert solution('1 1\\n-1') == '2'\n\"\"\"\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n-1 0 1\") == \"6\"\nassert solution(\"2 1\\n1 0\") == \"1\"\nassert solution(\"1 1\\n-1\") == \"2\"\nassert solution(\"1 0\\n-1\") == \"2\"\nassert solution(\"2 0\\n1 0\") == \"2\"\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n-1 0 1') == '6'\nassert solution('2 1\\n1 0') == '1'\n\n\"\"\""
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n-1 0 1') == '6'\n\n'''\nimport time\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n-1 0 1') == '6'\nassert solution('2 1\\n1 0') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 3 4\") == '3'\nassert solution(\"6 2 1 1\") == '1'\nassert solution(\"4 4 4 4\") == '0'\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == '1000000000'\n\n\"\"\""
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 3\") == \"3\"\n\nassert solution(\"6 2 1 1\") == \"1\"\n\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == \"1000000000\"\n\n\"\"\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 3 4\") == \"3\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"4 4 4 4\") == \"0\"\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == \"1000000000\"\n\"\"\""
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 3 4\") == \"3\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"4 4 4 4\") == \"0\"\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == \"1000000000\""
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 3 4') == '3'\nassert solution('6 2 1 1') == '1'\nassert solution('4 4 4 4') == '0'\n\n\"\"\""
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 3 4') == '3'\nassert solution('6 2 1 1') == '1'\nassert solution('4 4 4 4') == '0'\nassert solution('999999999 1000000000 1000000000 1000000000') == '1000000000'\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 3 4\") == \"3\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == \"1000000000\"\n\n\"\"\"\n\nn, a, b, c = map(int, input().split())\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 3 4') == '3'\nassert solution('6 2 1 1') == '1'\nassert solution('4 4 4 4') == '0'\nassert solution('999999999 1000000000 1000000000 1000000000') == '1000000000'\n\"\"\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"4 4 4 4\") == \"0\"\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == \"1000000000\"\n\n-----\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 4 4\") == \"0\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == \"1000000000\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 2\\n2 3\\n3 2\\n3 1\") == \"YES\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\") == \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n1 2\\n2 3\\n3 2\\n3 1\") == \"YES\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\") == \"NO\"\nprint('All tests passed.')\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5\") == \"NO\"\nassert solution(\"4 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5\") == \"YES\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5\") == \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1 2\\n2 3\\n3 2\\n3 1\") == \"YES\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\") == \"NO\"\n\"\"\"\nimport sys\nimport os"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1') == 'YES'\nassert solution('5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1') == 'NO'\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n1 2\\n2 3\\n3 2\\n3 1') == 'YES'\nassert solution('5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1') == 'NO'"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2\\n2 3\\n3 2\\n3 1\\n') == 'YES'\nassert solution('5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5\\n') == 'NO'\n\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 2\\n3 1\\n4 5\") == \"YES\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 2\\n3 1\\n4 5\") == \"NO\""
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n1 2\\n2 3\\n3 2\\n3 1\") == \"YES\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\") == \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2\\n2 3') == 'YES'\nassert solution('3\\n1 2\\n2 3\\n3 2') == 'NO'\nassert solution('1\\n2\\n2 3') == 'YES'\nassert solution('1\\n2') == 'NO'\nassert solution('5\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1') == 'NO'\n\n\"\"\""
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 50\\n3 1\") == \"30\"\nassert solution(\"5 240\\n13 0\\n50 25\\n60 5\\n155 70\\n165 70\") == \"26\"\nassert solution(\"1 1\\n1 1\") == \"0\"\nassert solution(\"5 240\\n13 0\\n50 25\\n60 5\\n155 70\\n165 70\") == \"26\"\nassert solution(\"3 1\\n1 1\") == \"0\"\n\n\"\"\"\n\nn, m = list(map(int, stdin.split()))\nx, s = [0] * n, [0] * n\nfor i in range(n):\n    x[i], s[i] = map(int, stdin.split()[i * 2 + 1: i * 2 + 3])"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 595\\n43 2\\n300 4\\n554 10\\n\") == \"281\"\nassert solution(\"1 1\\n1 1\\n\") == \"0\"\nassert solution(\"2 50\\n20 0\\n3 1\\n\") == \"30\"\nassert solution(\"5 240\\n13 0\\n50 25\\n60 5\\n155 70\\n165 70\\n\") == \"26\"\n\n\n\"\"\""
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3 595\n43 2\n300 4\n554 10\n''') == '281'\n\nassert solution('''\n1 1\n1 1\n''') == '0'\n\nassert solution('''\n2 50\n20 0\n3 1\n''') == '30'\n\nassert solution('''\n5 240\n13 0\n50 25\n60 5\n155 70\n165 70\n''') == '26'\n\nassert solution('''\n5 240\n13 0\n50 25\n60 5\n155 70\n165 70\n''') == '26'"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n1 1\") == '0'\nassert solution(\"2 50\\n20 0\\n3 1\") == '30'\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 23\") == \"30\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 50\") == \"30\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 595\\n43 2\\n300 4\\n554 10\") == \"281\"\nassert solution(\"1 1\\n1 1\") == \"0\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 595\\n43 2\\n300 4\\n554 10\") == \"281\"\n\nprint(solution(stdin))"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 9\\n4 1\\n6 2\\n3 5\\n2 0\\n6 1\\n1 0\\n9 5\") == \"3\"\nassert solution(\"1 2\\n2 1\") == \"0\"\nassert solution(\"5 15\\n1 1\\n1 1\\n1 1\\n2 1\\n3 1\\n2 1\\n3 1\\n3 1\\n2 1\\n3 1\\n4 1\\n4 1\\n3 1\\n1 1\\n2 1\\n3 1\\n4 1\") == \"3\"\nassert solution(\"5 4\\n1 1\\n1 1\\n1 1\\n2 1\\n2 1\\n3 1\\n3 1\\n3 1\\n4 1\") == \"2\"\nassert solution(\"1 1\\n1 1\") == \"0\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 50\\n20 0\\n3 1\\n\") == \"30\"\nassert solution(\"5 240\\n13 0\\n50 25\\n60 5\\n155 70\\n165 70\\n\") == \"26\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 595\\n43 2\\n300 4\\n554 10\") == \"281\"\nassert solution(\"1 1\\n1 1\") == \"0\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 2 3 4 5 6 7 8\") == \"10\"\nassert solution(\"0\\n0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"3\\n0 4 1 0 0 9 8 3\") == \"3\""
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 2 3 4 5 6 7 8\") == \"10\"\nassert solution(\"0\\n0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"3\\n0 4 1 0 0 9 8 3\") == \"3\"\n\nimport sys\nassert sys.version_info >= (3, 7)\nimport subprocess\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n1 2 3 4 5 6 7 8') == '10'\nassert solution('0\\n0 0 0 0 0 0 0 0') == '0'\nassert solution('3\\n0 4 1 0 0 9 8 3') == '3'\n\"\"\"\nimport math\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 2 3 4 5 6 7 8\") == \"10\"\n\nassert solution(\"0\\n0 0 0 0 0 0 0 0\") == \"0\"\n\nassert solution(\"3\\n0 4 1 0 0 9 8 3\") == \"3\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 2 3 4 5 6 7 8\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0 0 0 0 0 0 0') == '0'\nassert solution('1 2 3 4 5 6 7 8') == '10'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 51') == '100'\n\n\"\"\"\n\nW = int(input())\n\ncnt = list(map(int, input().split()))\n\nmax_weight = 0\n\nfor i in range(1 << len(cnt)):\n    weight = 0\n    for j in range(len(cnt)):\n        if i & (1 << j):\n            weight += cnt[j]\n\n    max_weight = max(max_weight, weight)\n\nprint(max_weight)\n\n\"\"\"\n\nW = int(input())\n\ncnt = list(map(int, input().split()))\n\nmax_weight = 0\n\nfor i in range(1 << len(cnt)):\n    weight = 0\n    for j in range(len(cnt)):\n        if i & (1 << j):\n            weight += cnt[j]\n\n    max_weight = max(max_weight, weight)\n\nprint(max_weight)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 2 3 4 5 6 7 8\") == \"10\"\n\n\"\"\"\n\nimport sys\n\nw = int(sys.stdin.readline())\n\nitems = [int(i) for i in sys.stdin.readline().split()]\n\ndp = [0] * (w + 1)\ndp[0] = 0\n\nfor item in items:\n    for i in range(item, w + 1):\n        if dp[i - item]!= 0:\n            dp[i] = max(dp[i], dp[i - item] + item)\n\nprint(dp[w])\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 2 3 4 5 6 7 8\") == \"10\"\nassert solution(\"0\\n0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"3\\n0 4 1 0 0 9 8 3\") == \"3\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 2 3 4 5 6 7 8\") == \"10\"\nassert solution(\"0\\n0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"3\\n0 4 1 0 0 9 8 3\") == \"3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8\") == \"10\"\nassert solution(\"0\\n0 0 0 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\n\"\"\"\n\nW = int(input())\n\narr = [int(x) for x in input().split()]\n\narr_copy = arr.copy()\narr_copy.sort(reverse=True)"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 12\\n20 30 70 90') == 150\n\nassert solution('4 3\\n10 100 1000 10000') == 30\n\nassert solution('5 787787787\\n123456789 234567890 345678901 456789012 987654321') == 44981600785557577\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 12\") == \"150\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"5 787787787\") == \"44981600785557577\"\n\"\"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 12\\n20 30 70 90') == 150\nassert solution('4 3\\n10 100 1000 10000') == 30\nassert solution('5 787787787\\n123456789 234567890 345678901 456789012 987654321') == 44981600785557577\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\") == \"150\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"5 787787787\") == \"44981600785557577\"\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 12') == 150\nassert solution('4 3') == 10\nassert solution('5 787787787') == 44981600785557577\n\n\n\n\"\"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\") == \"150\"\n\nassert solution(\"4 3\") == \"10\"\n\nassert solution(\"5 787787787\") == \"44981600785557577\"\n\n\"\"\""
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 12\") == \"150\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"5 787787787\") == \"44981600785557577\"\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12') == '150'\nassert solution('4 3') == '10'\nassert solution('5 787787787') == '44981600785557577'\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12\") == \"150\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"5 787787787\") == \"44981600785557577\"\n\"\"\"\n\n\nfrom math import log"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 12\") == \"150\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"5 787787787\") == \"44981600785557577\"\nassert solution
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 3 3 6') == '5'\nassert solution('2\\n2 1') == '3'\nassert solution('5\\n6 2 4 5 3') == '5'\n\nprint('test passed')\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 3 3 6') == '5'\nassert solution('2\\n2 1') == '3'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 3 3 6\") == 5\n\"\"\"\nimport sys\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 3 3 6\") == \"5\"\nassert solution(\"2\\n2 1\") == \"3\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"3\"\nassert solution(\"3 3 3 6\") == \"5\"\nassert solution(\"1 3 3 6\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3 3 3 6\") == \"5\"\nassert solution(\"2\\n2 1\") == \"3\"\nassert solution(\"1\\n1\") == \"1\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 3 3 6\") == \"5\"\nassert solution(\"2\\n2 1\") == \"3\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0443\u044e \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0425 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u044b \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u0438\u0437 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\nSample Input 1:\n\n8\n10\n2\n\nSample Output 1:\n\n2\n\nSample Input 2:\n\n3\n5\n4\n\nSample Output 2:\n\n3\n\nSample Input 3:\n\n10\n1\n2\n\nSample Output 3:\n\n1\n\"\"\"\n\n\"\"\"\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\n8\n10\n2\n\nSample Output 1:\n\n2\n\nSample Input 2:\n\n5\n1\n2\n\nSample Output 2:\n\n1\n\nSample Input 3:\n\n10\n1\n2\n\nSample Output 3:\n\n1\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 \u0432\u0430\u0448\u0435\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0432 \u043f\u043e\u043b\u044f\u0440\u043d\u044b\u0435, \n\u0430 \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043f\u0435\u0440\u0432\u0443\u044e \u0438 \u0432\u0442\u043e\u0440\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 \u043d\u0430 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u043d\u043e\u0439 \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u0438. \n\u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0430\u0434\u0430\u043d\u044b \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u043c \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b \u2013 \u0447\u0438\u0441\u043b\u0430 x \u0438 y.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u043e\u0434: \u041f\u0435\u0440\u0432\u0430\u044f \u0442\u043e\u0447\u043a\u0430 (1; 2).\n\u0412\u044b\u0432\u043e\u0434: \u041f\u0435\u0440\u0432\u0430\u044f \u0442\u043e\u0447\u043a\u0430 (1.41; 2.23).\n\n\u041a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: 2.23, 1.41\n\n\u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0432\u0442\u043e\u0440\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0430\u0434\u0430\u043d\u044b \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u043c \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b \u2013 \u0447\u0438\u0441\u043b\u0430 x \u0438 y.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u043e\u0434: \u0412\u0442\u043e\u0440\u0430\u044f \u0442\u043e\u0447\u043a\u0430 (0.0; -2.0).\n\u0412\u044b\u0432\u043e\u0434: \u0412\u0442\u043e\u0440\u0430\u044f \u0442\u043e\u0447\u043a\u0430 (-1.57; -2.00)\n\n\u041a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442: -2.00, -1.57\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0443\u044e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 \u043f\u0435\u0440\u0438\u043c\u0435\u0442\u0440\u0430 \u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u0437 \u0434\u0432\u0443\u0445 \u0440\u0430\u0432\u043d\u044b\u0445 \u0441\u0442\u043e\u0440\u043e\u043d.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(    '5\\n1 3 3 3 6') == '5'\nassert solution(    '2\\n2 1') == '3'\nassert solution(    '2\\n2 1') == '3'\nassert solution(    '5\\n1 3 3 3 6') == '5'\nassert solution(    '2\\n2 1') == '3'\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 3 3 6\") == '5'\nassert solution(\"2\\n2 1\") == '3'\n\"\"\"\nimport math\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 3 3 6\\n\") == 5\nassert solution(\"2 1\\n\") == 3\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('73452') == 'YES'\nassert solution('1248') == 'NO'"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('73452') == \"YES\"\nassert solution('1248') == \"NO\"\n\"\"\""
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"73452\") == \"YES\"\nassert solution(\"1248\") == \"NO\"\nassert solution(\"1234\") == \"NO\"\nassert solution(\"123\") == \"NO\"\n\"\"\"\n\nimport sys\nimport string\nimport collections"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"73452\") == \"YES\"\nassert solution(\"1248\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1248') == 'NO'\nassert solution('5\\n73452') == 'YES'\nprint(solution(input()))\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == expected_output\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"73452\") == \"YES\"\nassert solution(\"1248\") == \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('73452') == \"YES\"\nassert solution('1248') == \"NO\"\n\"\"\"\n\nfrom itertools import groupby\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('73452') == 'YES'\nassert solution('1248') == 'NO'\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"73452\") == 'YES'\nassert solution(\"1248\") == 'NO'\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('wjmzbmr') == 'CHAT WITH HER!'\nassert solution('xiaodao') == 'IGNORE HIM!'\nassert solution('sevenkplus') == 'CHAT WITH HER!'"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('wjmzbmr') == 'CHAT WITH HER!'\nassert solution('xiaodao') == 'IGNORE HIM!'\n\nassert solution('sevenkplus') == 'CHAT WITH HER!'\n\"\"\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n\n-----\n\"\"\""
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\""
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n\n\"\"\""
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('wjmzbmr') == 'CHAT WITH HER!'\nassert solution('xiaodao') == 'IGNORE HIM!'\nassert solution('sevenkplus') == 'CHAT WITH HER!'\n\"\"\""
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n\nimport string\n\ns = stdin\nl = list(string.ascii_lowercase)\ns = set(s.lower())\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\""
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n\n\"\"\"\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == 2\n\n\"\"\""
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == 2\nassert solution(\"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\") == 9\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == '2'\nassert solution(\"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\") == '9'"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == 2\n\nassert solution(\"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\") == 9\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 -1 1\") == \"2\"\nassert solution(\"14 3 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\") == \"9\"\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''14 3\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1''') == '9'\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == 2\nassert solution(\"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\") == 9\n\"\"\"\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == 2\nassert solution(\"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\") == 9\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 1 -1 1\") == '2'\nassert solution(\"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\") == '9'\n\"\"\"\n\nn, k = map(int, input().split())\nlst = [int(i) for i in input().split()]\n\nl = k - 1\ne = 0\ns = 0\nfor i in range(1, n + 1):\n    if i % k == 1:\n        e += 1\n        s += 1\n    else:\n        if lst[i - 1] == 1:\n            e += 1\n        else:\n            s += 1\nprint(max(abs(e - s), 0))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 1 -1 1') == '2'\nassert solution('14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1') == '9'\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 2') == 12\n\"\"\"\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2\") == \"12\"\n\"\"\""
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(4 1 2) == 12\n\"\"\""
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2') == 12\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 1 2\n''') == \"12\"\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2\") == 12\n\"\"\"\nimport sys"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 2') == 12\n\"\"\"\n\nimport unittest\nfrom typing import List, Dict, Any\n\nclass Solution:\n    def __init__(self) -> None:\n        self.encodings: Dict[Any, List[Any]] = {\n            '0': [0],\n            '1': [1],\n        }\n\n    def solution(self, stdin: str) -> int:\n        encodings = self.encodings\n        encodings[stdin[0]] = [0, 1]\n        encodings[stdin[1]] = [1, 0]\n        for letter in stdin[2:]:\n            encodings[letter] = [0] + encodings[letter] + [1]\n        return sum(encodings[letter][index] * (1 << index) for index, letter in enumerate(stdin))\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution().solution\n\n    def test_first_example(self) -> None:\n        self.assertEqual(12, self.solution('4 1 2'))\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2') == 12\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def __init__(self, input_str):\n        self.n, self.c0, self.c1 = input_str.split()\n        self.n, self.c0, self.c1 = int(self.n), int(self.c0), int(self.c1)\n\n    def solve(self):\n        return int(self.n * self.c0 + self.n * self.c1)\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(Solution('4 1 2').solve(), 12)\n        self.assertEqual(Solution('1 1 1').solve(), 3)\n        self.assertEqual(Solution('4 1 1').solve(), 12)\n        self.assertEqual(Solution('3 2 2').solve(), 12)\n        self."
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2\") == \"12\"\nprint(\"The code is correct.\")\n\n---"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == \"12\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 4 3 2\") == 'YES'\nassert solution(\"10 2 1 9 10\") == 'NO'\nassert solution('4 2 7 6 5') == 'YES'\nassert solution('5 1 1 2 2') == 'YES'\nassert solution('5 7 6 1 2') == 'YES'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(5 1 4 3 2) == \"YES\"\nassert solution(10 2 1 9 10) == \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\n\"\"\"\n\n\n\"\"\"\n@parameters:\nn - number of stations\na - start station\nx - finish station\nb - start station\ny - finish station\n\n@return:\n\"YES\" if there is a time moment when Vlad and Daniel are at the same station, and \"NO\" otherwise.\n\"\"\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\n\"\"\"\n\nn, a, x, b, y = [int(i) for i in stdin.split()]\na = a % n\nx = x % n\nb = b % n\ny = y % n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\""
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 4 3 2') == 'YES'\nassert solution('10 2 1 9 10') == 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\nassert solution(\"10 2 1 1 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 10\") == \"1\"\nassert solution(\"3 5 10 22\") == \"8\"\nassert solution(\"2 3 3 5\") == \"0\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 1 10') == '1'\nassert solution('3 5 10 22') == '8'\n\n\"\"\""
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(['2', '3', '1', '10']) == '1'\nassert solution(['3', '5', '10', '22']) == '8'\n\n'''"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 10\") == \"1\"\nassert solution(\"3 5 10 22\") == \"8\"\nassert solution(\"2 3 3 5\") == \"0\"\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 1 10') == '1'\nassert solution('3 5 10 22') == '8'\nassert solution('2 3 3 5') == '0'\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 1 10') == '1'\nassert solution('3 5 10 22') == '8'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 10\") == '1'\nassert solution(\"3 5 10 22\") == '8'\n\n\"\"\"\nfrom itertools import count\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 1 10\") == \"1\"\nassert solution(\"3 5 10 22\") == \"8\"\nassert solution(\"2 3 3 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1 10\") == '1'\nassert solution(\"3 5 10 22\") == '8'\nassert solution(\"2 3 3 5\") == '0'"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 10\") == \"1\"\nassert solution(\"3 5 10 22\") == \"8\"\nassert solution(\"2 3 3 5\") == \"0\"\n\"\"\"\n\nx, y, l, r = list(map(int, input().split()))\n\nmax_len = 0\nfor a in range(0, x):\n    for b in range(0, y):\n        n = pow(a, b) + pow(b, a)\n        if n <= r and n >= l:\n            max_len = max(max_len, b + 1)\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == 2\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '2'\nassert solution('27') == '3'\n\"\"\""
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(4) == 2\nassert solution(27) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == 2\nassert solution(\"27\") == 3\nassert solution(\"99999\") == 5\nassert solution(\"1\") == 1\nassert solution(\"2\") == 2\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"6\") == \"3\"\nassert solution(\"25\") == \"5\"\nassert solution(\"27\") == \"3\"\n\"\"\""
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"2\"\n\"\"\""
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(0) == 1\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"3\"\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == 2\nassert solution(\"27\") == 3\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asd fasd f\"\nassert solution(\"helllo\") == \"hell lo\"\n\"\"\"\nimport sys\nimport re"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"asdfasdf\") == \"asd fasd f\"\nassert solution(\"hellno\") == \"hell no\"\n\"\"\"\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('hellno') == 'hell no'\nassert solution('helllllooooo') == 'hell ll loooo'\nassert solution('tobeornottobe') == 'tobe or not to be'\nassert solution('backtothefutttture') == 'back to the future'\nassert solution('asdfasdf') == 'asd fasd f'\n\nprint(solution('hellno'))\nprint(solution('helllllooooo'))\nprint(solution('tobeornottobe'))\nprint(solution('backtothefutttture'))\nprint(solution('asdfasdf'))"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('hellno') == 'he llno'\nassert solution('helllno') == 'he llno'\nassert solution('hellnooo') == 'he llno'\nassert solution('hellnoi') == 'he llno'\nassert solution('hellono') == 'he llno'\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"hackcerrs\") == \"hackcerrs\"\nassert solution(\"backtothefutttture\") == \"backtothefuttture\"\nassert solution(\"helllllooooo\") == \"helllllooooo\"\nassert solution(\"tobeornottobe\") == \"tobeornottobe\"\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('hellno') == 'he ll no'\nassert solution('helllllooooo') == 'he ll ll o o'\nassert solution('tobeornottobe') == 'tobe o ntobe'\nassert solution('asdfasdf') == 'as d f s d f'\nassert solution('abacaba') == 'abac aba cab'\n\n'''\n\nstdin = 'helllllooooo'"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"hellno\") == \"he ll no\"\nassert solution(\"backtothefuttture\") == \"back to the future\"\nassert solution(\"hackcerrs\") == \"h ack c er s\"\nassert solution(\"tobeornottobe\") == \"to be or not to be\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hackcerrs\") == \"h a c c e r r s\"\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hello\") == \"hello\"\nassert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\n\"\"\"\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asd fasd f\"\nassert solution(\"hello\") == \"hello\"\nassert solution(\"chocolate\") == \"chocolate\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == '20'\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == \"20\"\nassert solution(\"20 3 2\\n10 99\\n200 100 400\\n4 15\\n10 80\") == \"200\""
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == \"20\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n100 800\") == \"200\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == \"200\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n100 800\") == \"200\"\n\"\"\""
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\\n\") == \"20\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n10 80\\n\") == \"200\""
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3 2\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == \"20\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == \"20\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n100 800\") == \"200\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n10 80\") == \"200\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n10 80\") == \"200\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n3 4 5\\n1 2 3\\n2 2\\n1 1\\n2 2') == '2'\nassert solution('7 3\\n3 1 2\\n2 3 4\\n4 5 6\\n6 7 7\\n7 8 9\\n4 3\\n1 2\\n2 1') == '4'\nassert solution('8 2\\n1 5 2\\n1 4 3\\n5 7 8\\n1 1 2\\n1 2 3\\n2 3 4\\n4 5 6\\n6 7 7\\n8 9 10') == '4'\nassert solution('7 3\\n3 1 2\\n2 3 4\\n4 5 6\\n6 7 7\\n7 8 9\\n4 3\\n1 2\\n2 1') == '4'\nassert solution('6 3\\n3 1 2\\n2 3 4\\n4 5 6\\n6 7 7\\n7 8 9\\n4 3\\n1 2\\n2 1') == '4'\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''20 3 2\n10 99\n2 4 3\n20 10 40\n4 15\n10 80''') == '200'\n\nassert solution('''20 3 2\n10 99\n2 4 3\n200 100 400\n4 15\n100 800''') == '200'\n\nassert solution('''20 3 2\n10 99\n2 4 3\n200 100 400\n4 15\n100 800\n''') == '200'\n\nassert solution('''1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\nassert solution('''1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 3 2\\n10 99\\n2 4 3\\n20 10 40\\n4 15\\n10 80\") == \"20\"\nassert solution(\"20 3 2\\n10 99\\n2 4 3\\n200 100 400\\n4 15\\n10 80\") == \"200\"\n\n\nimport sys\nfrom collections import deque, defaultdict"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin_1) == test_stdin_1_result\nassert solution(test_stdin_2) == test_stdin_2_result\n\"\"\"\n\n\nfrom sys import stdin\n\nstdin = open(\"input.txt\", \"r\")\n\nn, m, k = [int(x) for x in stdin.readline().split()]\n\na = [int(x) for x in stdin.readline().split()]\nb = [int(x) for x in stdin.readline().split()]\nc = [int(x) for x in stdin.readline().split()]\nd = [int(x) for x in stdin.readline().split()]\n\n\"\"\"\n1 2 3 4 5 6 7 8 9 10\na b c d\n10 100 400\n4 15\n100 800\n\"\"\"\n\nn_pots, min_time = 0, 0\ntime = 0\nfor i in range(k):\n    cur_time = c[i] * d[i]\n    if cur_time > time:\n        time = cur_time\n        n_pots = 1\n    elif cur_time == time:\n        n_pots += 1\nprint(time)\n\nn_a = n_pots\n\nfor i in range(k):\n    cur_time = c[i] * b[i]\n    if cur_time > time:\n        time = cur_time\n        n_a = 1\n    elif cur_time == time:\n        n_a += 1\n\nprint(time)\n\nprint(n_a)\n\ntime = 0\nfor i in range(k):\n    cur_time = c[i] * a[i]\n    if cur_time > time:\n        time = cur_time\n        n_a = 1\n    elif cur_time == time:\n        n_a += 1\n\nprint(time)\n\nprint(n_a)\n\nprint(n_a * time)\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 10\\n1 2 4 8 16\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 4 11''') == '''6'''\nassert solution('''5 5 10''') == '''7'''\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 11\") == \"6\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 6\") == \"3\"\nassert solution(\"5 5 10\") == \"7\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3 4 11\n1 2 3 4\n''') == '6'\n\n\"\"\"\nimport collections\n\nn, m, k = [int(n) for n in stdin.readline().split()]\nt = collections.defaultdict(list)\nfor j in range(k):\n    a, b = [int(n) for n in stdin.readline().split()]\n    t[a].append(b)\n\nt = {k: sorted(v) for k, v in t.items()}"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 11\\n1 2 3 4\") == 6\nassert solution(\"5 5 10\\n1 2 4 8 16\") == 7"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 2') == '2'\n\n\"\"\"\n\nn, k, t = map(int, input().split())\nT = [int(x) for x in input().split()]\ntasks = n * k\npoints = 0\n\nfor i in range(n):\n    if T[i] == 1:\n        points += tasks\n    else:\n        points += t\n\n\nprint(points)\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 11\\n1 2 3 4') == '6'\nassert solution('5 5 10\\n1 2 4 8 16') == '7'\n\"\"\"\n\nn, k, m = map(int, input().split())\nt = list(map(int, input().split()))\nt = [x + 1 for x in t]\nres = 0\nwhile m > 0:\n    cur = min(t)\n    if cur <= k:\n        t = [x - 1 for x in t]\n        res += k + 1\n        m -= cur\n    else:\n        t = [x - 1 for x in t]\n        res += k\n        m -= cur - k\n    if m < 0:\n        res += k + 1\n        m = 0\nprint(res)\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 11') == 6\n\"\"\"\n\nn, k, m = map(int, input().split())\nt = list(map(int, input().split()))"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '0'\n\n\n-----Explanation-----\nThe binary tree in the first example satisfies the condition because it has a perfect balance, and it is striped.\n\nThe binary tree in the second example is not striped, because it doesn't satisfy the conditions.\n\nA binary tree is perfectly balanced if its vertices have the same depth. The depth of a vertex is the number of edges on the simple path from the vertex to the root.\n\"\"\"\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"4\") == 1\n\"\"\""
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"4\") == 1\nassert solution(\"5\") == 0\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '3'\nassert solution('6') == '4'\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '0'"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(4) == 1\n\n-----\n\nInput\n5\n\nOutput\n1\n\nInput\n5\n\nOutput\n4\n\n-----\n\nInput\n1\n\nOutput\n0\n\n-----\n\nInput\n4\n\nOutput\n1\n\n\n\nInput\n\n-----\n\nSolution for\n4\n\n1\n2\n\n-----\n\nSolution for\n4\n\n1\n1\n1\n1\n\n-----\n\nSolution for\n5\n\n2\n1\n2\n\n-----\n\nSolution for\n5\n\n2\n1\n3\n2\n\n-----\n\nSolution for\n1\n\n0\n\n-----\n\nSolution for\n5\n\n2\n3\n4\n3\n\n-----\n\nSolution for\n5\n\n1\n1\n2\n3\n2\n\n-----\n\nSolution for\n5\n\n3\n1\n3\n3\n3\n\n-----\n\nSolution for\n4\n\n2\n1\n2\n2\n\n-----\n\nSolution for\n5\n\n2\n2\n3\n4\n2\n\n-----\n\nSolution for\n5\n\n2\n1\n1\n2\n1\n\n-----\n\nSolution for\n5\n\n1\n1\n2\n2\n1\n\n-----\n\nSolution for\n5\n\n1\n2\n3\n4\n1\n\n-----\n\nSolution for\n6\n\n1\n2\n1\n2\n1\n2\n\n-----\n\nSolution for\n6\n\n2\n3\n4\n3\n1\n1\n\n-----\n\nSolution for\n6\n\n1\n3\n3\n3\n1\n1\n\n-----\n\nSolution for\n6\n\n3\n1\n3\n3\n3\n1\n1\n\n-----\n\nSolution for\n6\n\n1\n1\n2\n3\n2\n2\n2\n\n-----\n\nSolution for\n6\n\n2\n1\n2\n2\n1\n3\n1\n\n-----\n\nSolution for\n6\n\n2\n2\n1\n1\n2\n1\n1\n\n-----\n\nSolution for\n6\n\n2\n2\n3\n2\n1\n1\n2\n\n-----\n\nSolution for\n6\n\n1\n1\n2\n1\n2\n2\n2\n\n-----\n\nSolution for\n6\n\n1\n1\n1\n3\n1\n1\n1\n\n-----\n\nSolution for\n6\n\n2\n2\n1\n2\n2\n2\n2\n\n-----\n\nSolution for\n6\n\n2\n2\n2\n2\n2\n2\n2\n\n-----\n\nSolution for\n6\n\n1\n2\n1\n1\n2\n3\n3\n\n-----\n\nSolution for\n6\n\n1\n1\n1\n3\n2\n3\n1\n\n-----\n\nSolution for\n6\n\n1\n2\n3\n1\n1\n1\n2\n\n-----\n\nSolution for\n6\n\n1\n1\n1\n1\n1\n1\n1\n\n-----\n\nSolution for\n6\n\n2\n2\n3\n2\n2\n3\n3\n\n-----\n\nSolution for\n7\n\n1\n2\n2\n1\n2\n3\n3\n3\n\n-----\n\nSolution for\n7\n\n1\n2\n1\n2\n1\n1\n1\n2\n\n-----\n\nSolution for\n7\n\n1\n1\n2\n1\n1\n1\n1\n1\n\n-----\n\nSolution for\n7\n\n1\n1\n1\n1\n1\n1\n1\n1\n\n-----\n\nSolution for\n7\n\n1\n1\n1\n1\n1\n2\n1\n1\n\n-----\n\nSolution for\n7\n\n1\n1\n2\n1\n1\n1\n1\n1\n\n-----\n\nSolution for\n7\n\n1\n1\n1\n1\n1\n2\n1\n1\n\n-----\n\nSolution for\n7\n\n1\n2\n1\n1\n1\n1\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n1\n2\n1\n1\n1\n1\n1\n2\n\n-----\n\nSolution for\n8\n\n1\n2\n1\n1\n1\n2\n2\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n2\n1\n1\n1\n1\n2\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n1\n1\n1\n1\n2\n2\n\n-----\n\nSolution for\n8\n\n1\n1\n2\n1\n1\n1\n1\n2\n1\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n2\n1\n1\n1\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n2\n1\n1\n1\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n1\n2\n1\n1\n1\n1\n2\n1\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n1\n2\n1\n1\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n1\n1\n1\n1\n1\n2\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n2\n2\n1\n1\n2\n1\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n1\n2\n1\n1\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n2\n1\n1\n1\n1\n1\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n1\n1\n1\n2\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n1\n1\n1\n1\n1\n2\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n1\n1\n2\n2\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n2\n1\n1\n1\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n2\n1\n1\n1\n1\n1\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n2\n1\n1\n1\n1\n2\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n2\n2\n1\n1\n1\n1\n1\n1\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n1\n2\n1\n1\n1\n2\n\n-----\n\nSolution for\n8\n\n1\n1\n1\n2\n1\n1\n1\n1\n1\n\n-----\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 0\nassert solution('4') == 0\nassert solution('5') == 1\nassert solution('6') == 3\nassert solution('7') == 12\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '0'\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '0'\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\n\"\"\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\n\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"3 2\"\nassert solution(\"4 3 7\") == \"3 2\"\n\"\"\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 0') == '1 1'\n\nassert solution('4 3 11') == '1 2'\n\nassert solution('4 3 7') == '3 2'\n\"\"\"\n\nimport math\n\nn, m, k = map(int, input().split())"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 0') == '1 1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\n\"\"\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 0\") == \"1 1\"\nassert solution(\"4 3 11\") == \"1 2\"\nassert solution(\"4 3 7\") == \"3 2\"\n\"\"\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6') == '1 2'\nassert solution('4') == '1 4'\nassert solution('1') == '1 1'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"6\") == \"2 3\"\nassert solution(\"4\") == \"1 4\"\nassert solution(\"1\") == \"1 1\""
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"6\") == \"2 3\"\nassert solution(\"4\") == \"1 4\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"3\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '1 2'\nassert solution('6') == '2 3'\nassert solution('4') == '1 4'\nassert solution('1') == '1 1'\n\n\"\"\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == '1 2'\nassert solution('3') == '1 2'\nassert solution('4') == '1 4'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"6\") == \"2 3\"\nassert solution(\"4\") == \"1 4\"\nassert solution(\"1\") == \"1 1\"\n\"\"\""
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"6\") == \"2 3\"\nassert solution(\"4\") == \"1 4\"\nassert solution(\"1\") == \"1 1\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '1 4'\nassert solution('2') == '1 2'\nassert solution('6') == '2 3'\nassert solution('1') == '1 1'\n\"\"\"\n\nfrom sys import stdin\n\nX = int(stdin.readline())"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"6\") == \"2 3\"\nassert solution(\"4\") == \"1 4\"\nassert solution(\"1\") == \"1 1\"\n\nprint(\"Well done!\")\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '1 2'\nassert solution('6\\n') == '2 3'\nassert solution('4\\n') == '1 4'\nassert solution('1\\n') == '1 1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n5\\n7\\n') == '7'\nassert solution('4\\n7\\n13\\n') == '21'\nassert solution('2\\n3\\n2\\n') == '0'\n\"\"\""
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5\\n7\") == \"7\\n\"\nassert solution(\"4\\n7\\n13\") == \"21\\n\"\nassert solution(\"2\\n3\\n2\") == \"0\\n\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5\\n7\") == '7'\nassert solution(\"4\\n7\\n13\") == '21'\nassert solution(\"2\\n3\\n2\") == '0'\n\n\"\"\""
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n5\\n7\") == \"7\\n\"\nassert solution(\"4\\n7\\n13\") == \"21\\n\"\nassert solution(\"2\\n3\\n2\") == \"0\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n5\\n7') == '7'\nassert solution('4\\n7\\n13') == '21'\nassert solution('2\\n3\\n2') == '0'\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n5\\n7\") == \"7\\n\"\nassert solution(\"4\\n7\\n13\") == \"21\\n\"\nassert solution(\"2\\n3\\n2\") == \"0\\n\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n5\\n7\\n') == '7\\n'\nassert solution('4\\n7\\n13\\n') == '21\\n'\n\"\"\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n5\\n7') == '7'\nassert solution('4\\n7\\n13') == '21'\nassert solution('2\\n3\\n2') == '0'\n\"\"\"\n\na = int(stdin.readline())\nb = int(stdin.readline())\nc = int(stdin.readline())\n\nprint(max(a//2, b//2, c//2))\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5\\n7\") == \"7\"\nassert solution(\"4\\n7\\n13\") == \"21\"\nassert solution(\"2\\n3\\n2\") == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n5\\n7\\n') == '7'\nassert solution('4\\n7\\n13\\n') == '21'\nassert solution('2\\n3\\n2\\n') == '0'\nassert solution('2\\n2\\n2\\n') == '0'\nassert solution('2\\n1\\n1\\n') == '1'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 3 2 4') == 'YES'\nassert solution('1\\n3 3') == 'NO'\n\nprint(solution('3\\n1 3 2 4'))\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 3 2 4') == 'YES'\nassert solution('1\\n3 3') == 'NO'\nassert solution('3\\n1 2 3') == 'NO'\nassert solution('1\\n3 3') == 'NO'\nassert solution('1\\n3\\n1 2 3') == 'YES'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 3 2 4\") == \"YES\"\nassert solution(\"1\\n3 3\") == \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 3 2 4\") == \"YES\"\n\"\"\""
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 3 2 4\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"YES\"\nassert solution(\"2\\n1 3\") == \"NO\"\nassert solution(\"2\\n1 1\") == \"YES\"\nassert solution(\"2\\n2 2\") == \"NO\"\nassert solution(\"2\\n2 1\") == \"YES\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ncount_dict = dict()\nfor i in range(n):\n    if a[i] in count_dict:\n        count_dict[a[i]] += 1\n    else:\n        count_dict[a[i]] = 1\n\nprint(\"YES\") if n % 2 == 0 else print(\"NO\")\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 2 4') == 'YES'\nassert solution('3 3') == 'NO'\n\n\"\"\"\n\nn = int(input())\nnums = [int(num) for num in input().split()]"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('1 3 2 4') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('1 2 3 5 4') == 'NO'"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 3 2 4\") == \"YES\"\nassert solution(\"2\\n1 1\") == \"YES\"\nassert solution(\"2\\n1 1\") == \"NO\"\nassert solution(\"2\\n1 1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 3 3\") == \"YES\"\nassert solution(\"2 2 5 5\") == \"YES\"\nassert solution(\"2 2 3 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 7 28\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 7 28\") == \"1\"\nassert solution(\"2 7 2 7\") == \"0\"\nassert solution(\"7 2 4 3\") == \"0\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 7 28') == '1'\nassert solution('1 2 7 28') == '1'\n\"\"\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 7 28\") == \"1\\n2 7 9 28\"\n\"\"\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 7 28') == '1'\nassert solution('1 2 2') == '0'\nassert solution('4 7 8') == '1'\nassert solution('2 7 2') == '1'\nassert solution('2 7 2') == '1'\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 7 28') == '1'\nassert solution('3 9 29') == '2'\n\"\"\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 28\\n\") == \"1\\n5 7 9 28\"\n\n\"\"\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n6\\n2\\n4\\n3\\n7\\n2\\n5\\n2') == '1\\n4\\n2\\n7\\n4\\n5\\n2\\n6\\n2'\n\"\"\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 7 28\") == \"1\"\nassert solution(\"2 7 9 28\") == \"1\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\ndp = [[0] * (1 << n) for _ in range(n)]\nfor mask in range(1 << n):\n    for i in range(n):\n        if not mask & (1 << i):\n            dp[i][mask] = min(dp[i][mask], 1 + dp[i + 1][mask | (1 << i)])\n    dp[n][mask] = min(dp[n][mask], 1 + dp[n][mask ^ (1 << n) - 1])\n\nprint(dp[0][(1 << n) - 1])\n\nfor i in range(n):\n    print(dp[i][(1 << n) - 1] - 1, end=' ')\n\nprint()\nprint(\" \".join(map(str, arr)))\n\nfor i in range(n):\n    print(dp[i + 1][(1 << n) - 1] - 1, end=' ')\nprint()\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 7 28') == '1'\n\"\"\""
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1 2\\n') == '2'\nassert solution('1 2 3\\n') == '1'\nassert solution('2 2\\n') == '1'\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 20\") == \"7\"\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n8 20\") == \"7\"\nassert solution(\"6 2\\n8 20\") == \"1\"\nassert solution(\"5 3\\n1 2 3 5\") == \"1\"\nassert solution(\"5 2\\n1 2 3 5\") == \"1\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n8 20\") == \"7\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n8 20\") == \"7\"\n\n-------------------------\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n8 20\") == 7\nassert solution(\"1 1\\n2 1\") == 2\n\"\"\""
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 20\") == \"7\"\n\"\"\""
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n8 20\") == \"7\"\n\"\"\"\n\nn, k = input().strip().split(' ')\nn, k = [int(n), int(k)]\n\na = input().strip().split(' ')\na = list(map(int, a))\n\nmax_divider = 1\n\nfor i in range(n):\n    max_divider = max(max_divider, a[i] // (k - 1))\n\nprint(max_divider)"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\n8 20\") == \"7\"\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 20\\n') == '7'\n\"\"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('39') == '4 5 3'\nassert solution('7') == '0'\nassert solution('1') == '0'\nassert solution('0') == '0'\nassert solution('2') == '0'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('39') == '4 5 3'\nassert solution('1') == '0'\nassert solution('7') == '0'\nassert solution('15') == '0'\nassert solution('12345') == '0'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(38) == 4\nassert solution(1) == 0\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"39\") == \"4 5 3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"7\") == \"0\"\n\"\"\""
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('39') == '4 5 3'\nassert solution('1') == '0'\nassert solution('7') == '0'\nassert solution('55') == '3'\nassert solution('31') == '0'\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"39\") == \"4 5 3\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"39\") == \"4 5 3\"\n\"\"\"\n\n\n\n\"\"\"\nThis problem is one of the easiest transformations to do on cats.\n\nLet's talk about the operations of cat transformations.\n\nOperation A: replace x with x \\oplus (2^n - 1), where n is some non-negative integer.\n\nOperation B: replace x with x + 1.\n\nOur goal is to reduce the number of operations, such that it is at most 40.\n\nWe have to perform all operations in this order:\n\noperation A.\noperation A.\noperation B.\noperation A.\noperation B.\noperation A.\noperation A.\noperation B.\noperation A.\noperation A.\nOperation B.\noperation A.\noperation A.\nOperation A.\n\nWe start with number x = 1, and then transform it. At this point x = 2^0 - 1.\n\nWe perform the following operations:\n\noperation A.\noperation A.\noperation B.\n\nx = 1 \\oplus (2^0 - 1) \\oplus (2^0 - 1) = 1.\n\nx = 1 \\oplus (2^1 - 1) \\oplus (2^1 - 1) = 3.\n\nx = 3 \\oplus (2^2 - 1) \\oplus (2^2 - 1) = 7.\n\nx = 7 \\oplus (2^3 - 1) \\oplus (2^3 - 1) = 15.\n\nx = 15 \\oplus (2^4 - 1) \\oplus (2^4 - 1) = 31.\n\nx = 31 \\oplus (2^5 - 1) \\oplus (2^5 - 1) = 63.\n\nx = 63 \\oplus (2^6 - 1) \\oplus (2^6 - 1) = 127.\n\nx = 127 \\oplus (2^7 - 1) \\oplus (2^7 - 1) = 255.\n\nx = 255 \\oplus (2^8 - 1) \\oplus (2^8 - 1) = 511.\n\nx = 511 \\oplus (2^9 - 1) \\oplus (2^9 - 1) = 1023.\n\nx = 1023 \\oplus (2^10 - 1) \\oplus (2^10 - 1) = 2047.\n\nx = 2047 \\oplus (2^11 - 1) \\oplus (2^11 - 1) = 4095.\n\nx = 4095 \\oplus (2^12 - 1) \\oplus (2^12 - 1) = 8191.\n\nx = 8191 \\oplus (2^13 - 1) \\oplus (2^13 - 1) = 16383.\n\nx = 16383 \\oplus (2^14 - 1) \\oplus (2^14 - 1) = 32767.\n\nx = 32767 \\oplus (2^15 - 1) \\oplus (2^15 - 1) = 65535.\n\nx = 65535 \\oplus (2^16 - 1) \\oplus (2^16 - 1) = 131071.\n\nx = 131071 \\oplus (2^17 - 1) \\oplus (2^17 - 1) = 262143.\n\nx = 262143 \\oplus (2^18 - 1) \\oplus (2^18 - 1) = 524287.\n\nx = 524287 \\oplus (2^19 - 1) \\oplus (2^19 - 1) = 1048579.\n\nx = 1048579 \\oplus (2^20 - 1) \\oplus (2^20 - 1) = 2097151.\n\nx = 2097151 \\oplus (2^21 - 1) \\oplus (2^21 - 1) = 4194303.\n\nx = 4194303 \\oplus (2^22 - 1) \\oplus (2^22 - 1) = 8388607.\n\nx = 8388607 \\oplus (2^23 - 1) \\oplus (2^23 - 1) = 16777215.\n\nx = 16777215 \\oplus (2^24 - 1) \\oplus (2^24 - 1) = 33554431.\n\nx = 33554431 \\oplus (2^25 - 1) \\oplus (2^25 - 1) = 67108863.\n\nx = 67108863 \\oplus (2^26 - 1) \\oplus (2^26 - 1) = 134217727.\n\nx = 134217727 \\oplus (2^27 - 1) \\oplus (2^27 - 1) = 268435455.\n\nx = 268435455 \\oplus (2^28 - 1) \\oplus (2^28 - 1) = 536870911.\n\nx = 536870911 \\oplus (2^29 - 1) \\oplus (2^29 - 1) = 1073741823.\n\nx = 1073741823 \\oplus (2^30 - 1) \\oplus (2^30 - 1) = 2147483647.\n\nx = 2147483647 \\oplus (2^31 - 1) \\oplus (2^31 - 1) = 4294967295.\n\nx = 4294967295 \\oplus (2^32 - 1) \\oplus (2^32 - 1) = 8589934591.\n\nx = 8589934591 \\oplus (2^33 - 1) \\oplus (2^33 - 1) = 17179869183.\n\nx = 17179869183 \\oplus (2^34 - 1) \\oplus (2^34 - 1) = 34359738"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"39\") == \"4 5 3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"39\") == \"4\"\nassert solution(\"7\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'3 6\\n2 3 5'\n) == '2'\n\nassert solution(\n'6 7\\n1 2 3 4 5 6'\n) == '7'\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n2 3 5\") == \"2\"\nassert solution(\"6 7\\n1 2 3 4 5 6\") == \"7\""
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n2 3 5') == '2'\nassert solution('6 7\\n1 2 3 4 5 6') == '7'\n\"\"\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 6\\n2 3 5') == '2'\nassert solution('6 7\\n1 2 3 4 5 6') == '7'\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\ndp = [[0]*k for _ in range(n)]\n\ndp[0][a[0] - 1] = 1\n\nfor i in range(1, n):\n    for j in range(k):\n        if j - 1 >= 0 and dp[i-1][j - 1] == 1:\n            dp[i][j] = 1\n        if j + a[i] - 1 < k and dp[i-1][j + a[i] - 1] == 1:\n            dp[i][j] = 1\nprint(sum(map(sum, dp)))\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n2 3 5') == '2'\nassert solution('6 7\\n1 2 3 4 5 6') == '7'\nassert solution('6 7\\n1 2 5 7 8 9') == '6'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n2 3 5\") == \"2\"\nassert solution(\"6 7\\n1 2 3 4 5 6\") == \"7\"\n\"\"\""
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\") == \"2\"\nassert solution(\"6 7\") == \"7\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6\\n2 3 5') == 2\nassert solution('6 7\\n1 2 3 4 5 6') == 7\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 7\\n1 2 3 4 5 6\") == \"7\"\nassert solution(\"6 7\\n2 3 4 5 6\") == \"2\"\nassert solution(\"3 6\\n2 3 5\") == \"2\"\n\"\"\"\n\nn, k = input().split()\na = input().split()\n\nfor i in range(len(a)):\n    a[i] = int(a[i])\n\ncount = 0\nc = 0\nfor i in range(len(a)):\n    if a[i] < k:\n        c += a[i]\n        count += 1\n    else:\n        c += k\n        count += 1\n\nprint(count)"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n2 3 5\") == \"2\"\nassert solution(\"6 7\\n1 2 3 4 5 6\") == \"7\"\n\"\"\""
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5 2\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n#G#T#\") == \"YES\"\nassert solution(\"6 1\\nT..G\") == \"YES\"\nassert solution(\"7 3\\nT..#..G\") == \"NO\"\nassert solution(\"6 2\\n..GT..\") == \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2#T#G\") == \"YES\"\nassert solution(\"6 1G#T#\") == \"NO\"\nassert solution(\"7 3G#T.\") == \"NO\"\nassert solution(\"8 2G#T.G\") == \"NO\"\nassert solution(\"9 3G#T..G\") == \"YES\"\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n#G#T#\") == \"YES\"\nassert solution(\"6 1\\nT..G\") == \"YES\"\nassert solution(\"7 3\\nT..#..G\") == \"NO\"\nassert solution(\"6 2\\n..GT..\") == \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n..T.\") == \"YES\"\nassert solution(\"2 1\\n#.T.\") == \"NO\"\nassert solution(\"4 2\\n..G#G\") == \"YES\"\nassert solution(\"2 1\\n.#G.\") == \"NO\"\nassert solution(\"2 3\\nG.#T\") == \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n#G#T#') == 'YES'\nassert solution('6 1\\nT....G') == 'YES'\nassert solution('7 3\\nT..#..G') == 'NO'\nassert solution('6 2\\n..GT..') == 'NO'\nassert solution('5 3\\nG#T#G') == 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n#G#T#\\n\") == \"YES\"\nassert solution(\"6 1\\nT....G\\n\") == \"YES\"\nassert solution(\"7 3\\nT..#..G\\n\") == \"NO\"\nassert solution(\"6 2\\n..GT..\\n\") == \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n#G#T#\") == \"YES\"\nassert solution(\"6 1\\nT..G\") == \"YES\"\nassert solution(\"7 3\\nT..#..G\") == \"NO\"\nassert solution(\"6 2\\n..GT..\") == \"NO\"\nassert solution(\"7 2\\nG..T#\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n#G#T#\") == \"YES\"\nassert solution(\"6 1\\nT....G\") == \"YES\"\nassert solution(\"7 3\\nT..#..G\") == \"NO\"\nassert solution(\"6 2\\n..GT..\") == \"NO\"\nassert solution(\"7 2\\n..T#..\") == \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5 2\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10 13 10 3 1') == '4.375'\n\"\"\"\n\nimport math"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333333333\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10 13 10 3 1') == '4.375'\nassert solution('1 4 6 2 2 1') == '-1'\nassert solution('3 10 15 17 9 2') == '11.3333333333'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333\"\n\"\"\"\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10 13 10 3 1') == '4.375'\nassert solution('1 4 6 2 2 1') == '-1'\nassert solution('3 10 15 17 9 2') == '11.3333333333'\n\"\"\""
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333333333\"\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.375\"\nassert solution(\"1 4 6 2 2 1\") == \"-1\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333\"\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 13 10 3 1\") == \"4.3750000000\"\nassert solution(\"1 4 6 2 2 1\") == \"-\"\nassert solution(\"3 10 15 17 9 2\") == \"11.3333333333\"\n\"\"\"\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 4 6 2 2 1\") == \"11.3333333333\"\nassert solution(\"3 10 15 17 9 2\") == \"-1\"\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 1') == '1'\nassert solution('1 0 0') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1000000000000000000 0 1000000000000000000') == '999999999999999999'\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3, 2, 1) == 1\nassert solution(1, 0, 0) == 0\nassert solution(1, 1, 1) == 0\nassert solution(1000000000000000000, 1000000000000000000, 1000000000000000000) == 9999999999999999999\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"1\"\nassert solution(\"1 0 0\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1000000000000000000 0 1000000000000000000\") == \"999999999999999999\"\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == '1'\nassert solution('1 0 0') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1000000000000000000 0 1000000000000000000') == '999999999999999999'\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 1') == '1'\nassert solution('1 0 0') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1000000000000000000 0 1000000000000000000') == '999999999999999999'\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == 1\nassert solution(\"1 0 0\") == 0\nassert solution(\"1 1 1\") == 0\nassert solution(\"1000000000000000000 0 1000000000000000000\") == 9999999999999999999\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1\") == 1\nassert solution(\"1 0 0\") == 0\nassert solution(\"1 1 1\") == 0\nassert solution(\"1000000000000000000 0 1000000000000000000\") == 9999999999999999999\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 0 0\n''') == '0'\nassert solution('''1 1 1\n''') == '0'\nassert solution('''1000000000000000000 0 1000000000000000000\n''') == '999999999999999999'\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 1') == '1'\nassert solution('1 0 0') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1000000000000000000 0 1000000000000000000') == '999999999999999999'\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0 0\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1000000000000000000 0 1000000000000000000\") == \"999999999999999999\"\n\"\"\"\n\nb, d, s = [int(x) for x in stdin.split()]\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == 'YES\\n2 1'\nassert solution('3\\n1 2 3') == 'YES\\n1 1'\nassert solution('6\\n1 2 1 2 5 3') == 'NO'\nassert solution('3\\n1 10') == 'YES\\n4 9'\n\n\"\"\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1 2 3 6 9 8 5 2\") == \"YES\\n3 3\"\nassert solution(\"6\\n1 2 1 2 5 3\") == \"NO\\n\"\nassert solution(\"2\\n1 10\") == \"YES\\n4 9\"\nassert solution(\"1\\n10\") == \"YES\\n10 10\"\n\"\"\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 2 3 6 9 8 5 2\") == \"YES\\n3 3\"\n\nassert solution(\"6\\n1 2 1 2 5 3\") == \"NO\"\n\nassert solution(\"2\\n1 10\") == \"YES\\n4 9\"\n\n\"\"\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"YES\\n2 4\"\nassert solution(\"6\\n1 2 1 2 5 3\") == \"YES\\n2 5\"\nassert solution(\"8\\n1 2 3 6 9 8 5 2\") == \"NO\"\nassert solution(\"2\\n1 10\") == \"YES\\n4 9\"\nassert solution(\"6\\n1 2 1 2 5 3\") == \"NO\""
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 2 3 6 9 8 5 2\") == \"YES\\n3 3\"\nassert solution(\"6\\n1 2 1 2 5 3\") == \"NO\"\nassert solution(\"2\\n1 10\") == \"YES\\n4 9\"\n\"\"\"\n\nfrom typing import List, Set, Dict\nfrom collections import Counter, defaultdict\nfrom itertools import product\nfrom pprint import pprint\n\nclass Solution:\n    def __init__(self):\n        self.indices = defaultdict(list)\n\n    def find_x_y(self, seq: List[int], x: int, y: int) -> bool:\n        \"\"\"\n        Finds whether x and y are possible values to have\n        for x and y in order to be consistent with the \n        sequence of indices and values\n\n        \"\"\"\n        self.indices = defaultdict(list)\n        self.seq = seq\n        # Collect indices\n        for i, num in enumerate(seq):\n            self.indices[num].append(i)\n\n        for i in range(len(seq)):\n            x_next, y_next = i + 1, i + y\n            # If x is ok\n            if x_next in self.indices:\n                # If y is ok\n                if y_next in self.indices:\n                    return True\n            else:\n                break\n        return False\n\n\ns = Solution()\nassert s.find_x_y([1, 2, 3, 6, 9, 8, 5, 2], 3, 3) == True\nassert s.find_x_y([1, 2, 1, 2, 5, 3], 4, 9) == False\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 2 3 6 9 8 5 2\") == \"YES\\n3 3\"\nassert solution(\"6\\n1 2 1 2 5 3\") == \"NO\\n\"\nassert solution(\"2\\n1 10\") == \"YES\\n4 9\""
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 2 3 6 9 8 5 2\\n\") == 'YES\\n3 3'\n\"\"\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 2 3 6 9 8 5 2\\n\") == \"YES\\n3 3\"\nassert solution(\"6\\n1 2 1 2 5 3\\n\") == \"NO\"\nassert solution(\"2\\n1 10\\n\") == \"YES\\n4 9\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n1 2 3 6 9 8 5 2') == \"YES\\n3 3\"\nassert solution('6\\n1 2 1 2 5 3') == \"NO\"\nassert solution('2\\n1 10') == \"YES\\n4 9\"\n\n\"\"\""
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 5\\n') == 'YES\\n2 2'\nassert solution('6\\n1 2 1 2 5 3\\n') == 'NO\\n3 4'\n\"\"\""
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('hi', 'bob') == '-'\nassert solution('abca', 'abcdcba') == 'abcba'\nassert solution('abacaba', 'abcdcba') == 'abacaba'\nassert solution('ABA', 'ABAC') == 'ABA'\nassert solution('ACB', 'ABC') == 'CB'"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hi\") == \"-\"\nassert solution(\"bob\") == \"-\"\nassert solution(\"abacaba\") == \"abcba\"\nassert solution(\"abcdcba\") == \"abccba\"\n\"\"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"hi\", \"bob\") == \"-\"\nassert solution(\"abca\", \"abcdcba\") == \"abcba\"\nassert solution(\"abacaba\", \"abcdcba\") == \"abcba\"\nassert solution(\"yfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxzfnejxz"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"hi\") == \"\"\nassert solution(\"bob\") == \"-\"\nassert solution(\"abca\") == \"abc\"\n\nassert solution(\"abacaba\") == \"abcba\"\n\n\"\"\""
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('hi') == '-'\nassert solution('bob') == 'b'\nassert solution('abacaba') == 'abcba'\nassert solution('abcdcba') == 'abcdcba'\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('hi', 'bob') == '-'\nassert solution('abca', 'abcdcba') == 'abcba'\nassert solution('abacaba', 'abcdcba') == 'abacaba'\n\na = 'abcdefghijklmnopqrstuvwxyz'\nfor i in range(len(a)):\n    print(solution(a[:i], a[i:]))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('hi') == '-'\nassert solution('bob') == '-'\nassert solution('abca') == 'ac'\nassert solution('abcdcba') == 'abcba'\nassert solution('abacaba') == 'abca'\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hi\") == \"-\"\nassert solution(\"bob\") == \"-\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"abcdcba\") == \"abcdcba\"\nassert solution(\"\") == \"-\"\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacaba') == 'abacaba'\nassert solution('hi') == '-'\nassert solution('abcdcba') == 'abcba'\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('hi') == '-'\nassert solution('bob') == '-'\nassert solution('abacaba') == 'abcba'\n\"\"\""
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 1\nassert solution(\"4\") == 2\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4+\") == 3\nassert solution(\"5-\") == 1\n\"\"\"\n\nn = int(input())\ns = input()\nnum_of_piles = 0\nfor i in range(len(s)):\n    if s[i] == '-':\n        num_of_piles += 1\n    else:\n        num_of_piles -= 1\nprint(abs(num_of_piles))"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"++++\") == \"3\"\n\"\"\"\n\nn = int(input())\ns = input()\n\ndp = [0] * (n + 1)\n\nfor i in range(n):\n    if s[i] == \"-\" and i == 0:\n        dp[i + 1] = 1\n    elif s[i] == \"+\":\n        dp[i + 1] = dp[i] + 1\n    else:\n        dp[i + 1] = dp[i]\n\nprint(dp[n])\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == '0'\nassert solution(\"4\") == '4'\nassert solution(\"5\") == '3'\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n---\") == \"0\"\nassert solution(\"4\\n++++\") == \"4\"\nassert solution(\"2\\n---\") == \"1\"\nassert solution(\"5\\n++-++\") == \"3\"\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\", \"---\") == '0'\nassert solution(\"4\", \"++++\") == '4'\nassert solution(\"2\", \"--\") == '1'\nassert solution(\"5\", \"++-++\") == '3'\nassert solution(\"1\", \"-\" * 100) == '0'\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '4'\nassert solution('2') == '1'\nassert solution('5') == '3'\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2--\") == 1\nassert solution(\"++\") == 0\nassert solution(\"++\") == 1\nassert solution(\"00\") == 0\n\"\"\"\n\nn = int(input())\n\npile = 0\n\nfor i in range(n):\n    stone = input()\n    if stone == '+':\n        pile += 1\n    else:\n        pile -= 1\n\nprint(pile)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1-\") == \"0\"\nassert solution(\"3-1+\") == \"1\"\nassert solution(\"3--1+\") == \"2\"\nassert solution(\"3-0+\") == \"1\"\nassert solution(\"0-1\") == \"1\"\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1+') == '1'\nassert solution('1-') == '0'\nassert solution('2+3-') == '3'\nassert solution('5+5-') == '5'\nassert solution('5-3-5+1+1-') == '3'\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n11\\n9\\n8\\n\") == \"2\"\nassert solution(\"10\\n5\\n6\\n1\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n11\\n9\\n8\\n\") == \"2\"\nassert solution(\"10\\n5\\n6\\n1\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 11 9 8\") == \"2\"\nassert solution(\"10 5 6 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n11\\n9\\n8') == '2'\nassert solution('10\\n5\\n6\\n1') == '2'\n\"\"\"\n\nn = int(input())\na, b, c = map(int, input().split())"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n11\\n9\\n8\\n') == '2'\nassert solution('10\\n5\\n6\\n1\\n') == '2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n11\\n9\\n8') == '2'\nassert solution('10\\n5\\n6\\n1') == '2'\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 11 9 8\\n1 2 3 4\") == \"2\"\nassert solution(\"10 5 6 1\") == \"2\""
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n11\\n9\\n8\\n') == '2'\nassert solution('10\\n5\\n6\\n1\\n') == '2'\nassert solution('10\\n11\\n11\\n10\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n11\\n9\\n8\") == \"2\"\nassert solution(\"10\\n5\\n6\\n1\") == \"2\"\n\"\"\"\n\n\nimport sys\n\nn = int(sys.stdin.readline())\na, b, c = [int(x) for x in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 3\") == \"6 2\"\nassert solution(\"4 2 3\") == \"-1\"\nassert solution(\"6 5 5\") == \"1\"\nassert solution(\"2 2 2\") == \"1 2\"\nassert solution(\"4 4 4\") == \"1\"\n\n\"\"\"\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 3\\n2 4 2\") == \"6 2\"\nassert solution(\"3\\n1 2\\n2 1 3\") == \"-1\"\nprint(\"All tests passed.\")\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 1 3\\n2 4 2\") == \"6 2\"\nassert solution(\"3\\n1 2\\n2 1 3\") == \"-1\"\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4\n2 1 3\n2 4 2\n''') == '6 2'\n\n\"\"\"\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(4, 2, 1, 3) == 6, 'Wrong answer'\nassert solution(3, 1, 2, 1) == -1, 'Wrong answer'\nassert solution(1, 2) == -1, 'Wrong answer'\nprint('Test passed')\n\"\"\""
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 3\\n2 4 2') == '6 2'\n\"\"\""
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1 3\") == \"6 2\"\nassert solution(\"3 1 2\") == \"1 2\"\nassert solution(\"3 1 1\") == \"1 2\"\nassert solution(\"1 2 1\") == \"1 1\"\nassert solution(\"2 2 1\") == \"1 2\"\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 3\\n2 4 2\") == \"6 2\"\nassert solution(\"3\\n1 2\\n2 1 3\") == \"0 -1\"\nassert solution(\"3\\n1 2\\n3 1 2\") == \"1 2\"\nassert solution(\"3\\n1 2\\n1 2 3\") == \"0 -1\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4\\n2 1 3\\n2 4 2\"\n) == \"6 2\"\nassert solution(\n    \"3\\n1 2\\n2 1 3\"\n) == \"2 1\"\nassert solution(\n    \"3\\n2 1\\n1 2 3\"\n) == \"1 1\"\n\"\"\""
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 1 3\\n2 4 2\\n\") == '6 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == \"Correct\"\nassert solution(\"X12345\") == \"Too weak\"\nassert solution(\"CONTEST_is_STARTED!!11\") == \"Correct\"\nassert solution(\"abacaba12\") == \"Too weak\"\nassert solution(\"abacaba!\") == \"Correct\"\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == 'Correct'\nassert solution('X12345') == 'Too weak'\nassert solution('CONTEST_is_STARTED!!11') == 'Correct'\n\"\"\"\n\nimport re"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacaba') == 'Correct'\nassert solution('X12345') == 'Too weak'\n\"\"\"\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CONTEST_is_STARTED!!11\") == 'Correct'\n\"\"\"\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"Correct\"\nassert solution(\"X12345\") == \"Too weak\"\n\"\"\"\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('CONTEST_is_STARTED!!11') == 'Correct'\nassert solution('aaaaaaaaaaaaaaaaa') == 'Too weak'\nassert solution('abcd') == 'Too weak'\nassert solution('X12345') == 'Correct'\nassert solution('A1a2') == 'Too weak'\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"X12345\") == \"Correct\"\nassert solution(\"abacaba\") == \"Too weak\"\nassert solution(\"!\") == \"Too weak\"\nassert solution(\"!\") == \"Too weak\"\nassert solution(\"!_\") == \"Too weak\"\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"Correct\"\nassert solution(\"X12345\") == \"Too weak\"\nassert solution(\"CONTEST_is_STARTED!!11\") == \"Correct\"\nassert solution(\"Cd_Fv_Fd_Cd_Fv_Fd\") == \"Too weak\"\nassert solution(\"tHIs$!Is tHIs$!Is\") == \"Correct\"\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"Correct\"\nassert solution(\"X12345\") == \"Too weak\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == 'Correct'\nassert solution('X12345') == 'Too weak'\nassert solution('CONTEST_is_STARTED!!11') == 'Correct'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5 4 4 4\\n5 5 4 5\") == '1'\nassert solution(\"6\\n1 1 1 1 1 1\\n5 5 5 5 5 5\") == '3'\nassert solution(\"1\\n5\\n3\") == '-1'\nassert solution(\"9\\n3 2 5 5 2 3 3 3 2\\n4 1 4 1 1 2 4 4 1\") == '4'\nassert solution(\"100\\n3 1 5 2 5 3 4 2 1\\n5 4 3 1 4 1 5 2\") == '4'\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 4 4 4\\n5 5 4 5\") == \"1\"\nassert solution(\"6\\n1 1 1 1 1 1\\n5 5 5 5 5 5\") == \"3\"\nassert solution(\"1\\n5\\n3\") == \"-1\"\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5 4 4 4\\n5 5 4 5\") == '1'\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        stdin = stdin.split('\\n')\n        group_a = stdin[1].split()\n        group_b = stdin[2].split()\n        n = int(stdin[0])\n\n        sums = defaultdict(list)\n        for i in range(n):\n            sums[int(group_a[i])].append(group_a[i])\n            sums[int(group_b[i])].append(group_b[i])\n        \n        group_a_b = defaultdict(list)\n        group_b_a = defaultdict(list)\n        exchanges = []\n        \n        for i in sums:\n            if len(sums[i]) % 2 == 0:\n                group_a_b[i] = sums[i][0::2]\n                group_b_a[i] = sums[i][1::2]\n            else:\n                group_a_b[i] = sums[i][0::2]\n                group_b_a[i] = sums[i][1::2]\n                exchanges.append((i, i))\n        \n        if len(exchanges) == 0:\n            return '-1'\n        \n        exchanges = exchanges + [exchange for exchange in zip(group_a_b.keys(), group_b_a.keys())]\n        return str(len(exchanges))\n        \n\nsolution = Solution().solution\nassert solution(\"4\\n5 4 4 4\\n5 5 4 5\") == '1'\nassert solution(\"6\\n1 1 1 1 1 1 1\") == '3'\nassert solution(\"1\\n5\\n3\") == '-1'\nassert solution(\"9\\n3 2 5 5 2 3 3 3 2\\n4 1 4 1 1 2 4 4 1\") == '4'"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5 4 4 4\") == \"1\"\nassert solution(\"5\\n5 4 5\") == \"3\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"3\"\nassert solution(\"1\\n5\") == \"1\"\nassert solution(\"9\\n3 2 5 5 2 3 3 3 2\") == \"4\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndic = {}\nfor i in range(n):\n    dic[a[i]] = dic.get(a[i], 0) + 1\n    dic[b[i]] = dic.get(b[i], 0) + 1\n\nres = 0\nfor key in dic:\n    if dic[key] % 2 == 1:\n        res += 1"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5 4 4 4\\n5 5 4 5') == '1'\nassert solution('6\\n1 1 1 1 1 1\\n5 5 5 5 5 5') == '3'\nassert solution('1\\n5\\n3') == '-1'\nassert solution('9\\n3 2 5 5 2 3 3 3 2\\n4 1 4 1 1 2 4 4 1') == '4'\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2 3 1 4 5 2 4 3') == '4'\nassert solution('5 4 4 4') == '1'\nassert solution('6 5 4 5') == '-1'\nassert solution('1 1 1 1 1 1 1') == '6'\nassert solution('5 5 4 5') == '3'\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 4 4\") == \"1\"\nassert solution(\"5 5 4 5\") == \"1\"\nassert solution(\"5 5 4 5\") == \"3\"\nassert solution(\"5 5 5 5 5 5\") == \"-1\"\nassert solution(\"1 1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 4 1 1 2 4 4 1\") == \"3\"\nassert solution(\"6 5 4 5\") == \"2\"\nassert solution(\"1 1 1 1 1 1\") == \"6\"\nassert solution(\"5 5 4 5\") == \"1\"\nassert solution(\"9 3 2 5 5 2 3 3 2\") == \"4\"\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n5') == '1\\n1'\nassert solution('2\\n3') == '1\\n1\\n1\\n1'\nassert solution('1\\n1\\n1\\n1') == '1\\n1\\n1\\n1'\nassert solution('4\\n1\\n2\\n3\\n4\\n5\\n6\\n7') == '1\\n1\\n1\\n1\\n1\\n1\\n1'\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5 4 4 4\\n5 5 4 5') == '1'\nassert solution('6\\n1 1 1 1 1 1\\n5 5 5 5 5 5') == '3'\nassert solution('1\\n5\\n3') == '-1'\nassert solution('9\\n3 2 5 5 2 3 3 3 2\\n4 1 4 1 1 2 4 4 1') == '4'\n\n\"\"\"\n\nimport sys\n\n_, a_str, b_str = sys.stdin.read().strip().split('\\n')\na = list(map(int, a_str.split()))\nb = list(map(int, b_str.split()))\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n><\\nvv') == 'NO'\nassert solution('4 6\\n><><\\nvvv^') == 'YES'\nassert solution('1 1\\n><\\n^') == 'YES'\nassert solution('4 6\\n<><\\nvvv^') == 'NO'\nassert solution('2 3\\n><\\n^v') == 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n><>\\nvvv') == 'NO'\nassert solution('4 6\\n><><\\nv^v^v^') == 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n><\\nvv\") == \"NO\"\nassert solution(\"4 6\\n<><\\nvvv\") == \"YES\"\n\n\n-----Tests-----\ntest_1 = \"3 3\\n><\\nvv\"\ntest_1_result = \"NO\"\ntest_2 = \"4 6\\n<><\\nvvv\"\ntest_2_result = \"YES\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n><\\nvv') == 'NO'\nassert solution('4 6\\n><\\nvvv') == 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"><><\") == \"NO\"\nassert solution(\"vvv\") == \"YES\"\nassert solution(\"v^v^v^\") == \"YES\"\nassert solution(\"<><\") == \"NO\"\nassert solution(\"vvv^v^v^\") == \"YES\"\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3<><>v^v\") == \"NO\"\nassert solution(\"4 6<><>v^v^v^\") == \"YES\"\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\">><\") == \"NO\"\nassert solution(\">^v\") == \"YES\"\n\"\"\"\n\nn, m = map(int, input().split())\ninput_string_hor = list(input())\ninput_string_ver = list(input())\n\nans = \"YES\"\n\nfor i in range(n):\n    if input_string_hor[i] == \"<\":\n        if input_string_ver[i] == \"^\":\n            ans = \"NO\"\n        elif input_string_ver[i] == \"v\":\n            ans = \"NO\"\n    elif input_string_hor[i] == \">\":\n        if input_string_ver[i] == \"v\":\n            ans = \"NO\"\n        elif input_string_ver[i] == \"^\":\n            ans = \"NO\"\n    elif input_string_hor[i] == \"^\":\n        if input_string_ver[i] == \"<\":\n            ans = \"NO\"\n        elif input_string_ver[i] == \">\":\n            ans = \"NO\"\n    elif input_string_hor[i] == \"v\":\n        if input_string_ver[i] == \">\":\n            ans = \"NO\"\n        elif input_string_ver[i] == \"<\":\n            ans = \"NO\"\n\nprint(ans)"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"><>\") == \"NO\"\nassert solution(\"v^v\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n><\\nv^v\") == \"NO\"\nassert solution(\"4 6\\n><\\nv^v^v^\") == \"YES\"\nassert solution(\"3 2\\n><\\nv^v\") == \"YES\"\nassert solution(\"3 2\\n><\\nvv\") == \"YES\"\nassert solution(\"3 2\\n><\\nv^v\") == \"NO\"\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('4 6') == 'YES'\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 1 1 0') == 'YES\\n(((0)->1)->(1->0))'\nassert solution('2\\n1 1') == 'NO'\nassert solution('1\\n1') == 'YES\\n1'\nassert solution('1\\n0') == 'YES\\n0'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 1 1 0') == 'YES\\n(((0)->1)->(1->0))'\nassert solution('2\\n1 1') == 'NO'\nassert solution('1\\n0') == 'YES\\n0'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 1 0\") == \"YES\\n(((0)->1)->(1->0))\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"1 0\") == \"YES\\n1\""
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 1 0\") == 'YES\\n(((0)->1)->(1->0))'\nassert solution(\"2 1 1 0\") == 'NO'\n\"\"\"\n\nn = int(stdin.readline().strip())\n\narr = list(map(int, stdin.readline().strip().split(' ')))\n\nflag = False\nstack = []\nresult = []\nfor i in arr:\n    if i == 0:\n        if len(stack) >= 1:\n            if stack[len(stack) - 1] == 1:\n                result.append('1')\n                stack.pop()\n            else:\n                result.append('0')\n                stack.append(i)\n        else:\n            result.append('1')\n            stack.append(i)\n    elif i == 1:\n        if len(stack) >= 1:\n            if stack[len(stack) - 1] == 0:\n                result.append('0')\n                stack.pop()\n            else:\n                result.append('1')\n                stack.append(i)\n        else:\n            result.append('1')\n            stack.append(i)\n    else:\n        stack.append(i)\n        if len(stack) >= 2:\n            if stack[len(stack) - 1] == 0 and stack[len(stack) - 2] == 1:\n                result.append('0')\n                stack.pop()\n                stack.pop()\n            elif stack[len(stack) - 1] == 1 and stack[len(stack) - 2] == 0:\n                result.append('1')\n                stack.pop()\n                stack.pop()\n    if len(stack) == 0:\n        flag = True"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 1 0\") == \"YES\"\nassert solution(\"2 1 1 0\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 1 0\") == \"YES\"\nassert solution(\"3 1 1 0\") == \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 0 0\") == \"YES\\n((0)->1)->(1->0)\"\nassert solution(\"0 0 0 0\") == \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0 1 1 0') == 'YES\\n(((0)->1)->(1->0))'\nassert solution('2\\n1 1') == 'NO'\nassert solution('1\\n1') == 'YES\\n1'"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 1 0\") == \"YES\\n(((0)->1)->(1->0))\"\nassert solution(\"2\\n1 1\") == \"NO\"\nassert solution(\"1\\n1\") == \"YES\\n1\"\nassert solution(\"5\\n0 1 1 0 1\") == \"YES\\n(((0)->(1))->((1)->(0)))->(((0)->1)->(1->0))\"\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 0 1 1 0') == \"YES\"\nassert solution('2 1 1') == \"NO\"\nassert solution('1 1') == \"YES\"\nassert solution('1 0') == \"YES\"\nassert solution('0 0') == \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 1 0') == 'YES\\n(((0)->1)->(1->0))'\nassert solution('2 1 1 0') == 'NO'\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 5\") == \"0 1\"\nassert solution(\"31 12\") == \"7 12\"\n\"\"\""
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 5\\n\") == \"0 1\"\nassert solution(\"31 12\\n\") == \"7 12\"\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 5\") == \"0 1\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 5\\n') == '0 1'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 5\") == \"0 1\"\nassert solution(\"31 12\") == \"7 12\"\nassert solution(\"1 100\") == \"1 100\"\nassert solution(\"10000 10001\") == \"10000 10001\"\n\n\"\"\"\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 5') == '0 1'\nassert solution('31 12') == '7 12'\nassert solution('12 5') == '0 1'\nassert solution('31 12') == '7 12'\nassert solution('1 2') == '0 0'\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12 5') == '0 1'\nassert solution('31 12') == '7 12'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 5\") == \"0 1\"\nassert solution(\"31 12\") == \"7 12\"\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12 5') == '0 1'\nassert solution('31 12') == '7 12'\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 5') == '0 1'\nassert solution('31 12') == '7 12'\n\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 10\") == \"10\"\n\"\"\"\n\nk, a, b = [int(i) for i in stdin.split()]\n\nprint(((b - a) // k + 1) * (k - a % k + 1) // 2)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 10\") == \"10\"\nassert solution(\"2 -4 4\") == \"5\"\nassert solution(\"0 -2 4\") == \"0\"\nassert solution(\"4 4 0\") == \"0\"\nassert solution(\"2 3 5\") == \"1\""
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 -4 4\") == '5'\nassert solution(\"1 1 10\") == \"10\"\nassert solution(\"1 1 10\") == \"10\"\nassert solution(\"2 -4 4\") == \"5\"\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 10\") == \"10\"\n\"\"\""
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 10') == 10\nassert solution('2 -4 4') == 5\nassert solution('3 -2 4') == 1\nassert solution('2 -5 4') == 0\nassert solution('2 -4 4') == 0\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 10\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\na, b, k = map(int, input().split())"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 10') == '10'\n\"\"\"\n\na, b, k = map(int, input().split())\nprint(b - a + 1 - (a % k - 1))\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 10\") == \"10\"\nassert solution(\"2 -4 4\") == \"5\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 100 1\") == \"1\"\nassert solution(\"2 -4 1\") == \"2\"\n\"\"\"\n\nk, a, b = [int(s) for s in input().split()]\n\ncount = 0\nfor i in range(a, b + 1):\n    if i % k == 0:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 10\") == \"10\"\nassert solution(\"2 -4 4\") == \"5\"\n\nimport sys\n\nnumbers = list(map(int, sys.stdin.readlines()[0].split()))\n\nprint(sum(n % numbers[0] == 0 for n in range(numbers[1], numbers[2] + 1)))\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"21\") == \"5\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n7') == '7'\nassert solution('21\\n5') == '5'\nassert solution('5\\n11') == '9'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"21\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"21\") == \"5\"\n\"\"\""
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(123456789101112131415161718192021222324252627282930313233343536) == 5\n\"\"\"\n\nk = int(input())\n\nnum = 123456789101112131415161718192021222324252627282930313233343536\n\nfor i in range(k - 1):\n    num *= 10\n\nprint(int(str(num)[k - 1]))\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'\nassert solution('4') == '4'\nassert solution('3') == '4'\nassert solution('2') == '3'\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '1'\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"7\"\nassert solution(\"21\") == \"5\""
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11') == '0'\nassert solution('1 2 3 4 5 6 7 8 9 1011121314151617181920') == '0'\nassert solution('1 2 3 4 5 6 7 8 9 1011121314151617181920 2 3 4 5 6 7 8 9 1011121314151617181920') == '0'\nassert solution('1 2 3 4 5 6 7 8 9 1011121314151617181920 2 3 4 5 6 7 8 9 1011121314151617181920 3') == '0'\n\n\"\"\"\n\nk = int(stdin.readline().strip())\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == '7'\nassert solution('21') == '5'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8380011324455') == 'YES'\nassert solution('38802350340057') == 'YES'\nassert solution('567') == 'YES'\nassert solution('838001132445') == 'NO'\nassert solution('567') == 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('83800') == 'YES'\nassert solution('800123456789') == 'NO'\nassert solution('3800') == 'YES'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"383838383838\") == \"YES\"\nassert solution(\"7383838383838\") == \"NO\"\nassert solution(\"8383838383838\") == \"YES\"\nassert solution(\"8383838383838\") == \"NO\"\nassert solution(\"8383838383838\") == \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8380011113344\") == \"YES\"\nassert solution(\"80734561935\") == \"NO\"\nassert solution(\"123345678\") == \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13') == 'YES'\nassert solution('15') == 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123456789') == 'YES'\nassert solution('838011223344') == 'YES'\nassert solution('12345') == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1121) == \"NO\"\nassert solution(838001111) == \"YES\"\nassert solution(838001112) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"838011111\") == \"YES\"\nassert solution(\"807345619350641\") == \"NO\"\n\"\"\""
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8380011223344\") == \"YES\"\nassert solution(\"807345619350641\") == \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"838001232334\") == \"YES\"\nassert solution(\"80734561935\") == \"NO\"\nassert solution(\"999999999\") == \"YES\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2\") == '824071958'\nassert solution(\"123 42 24\") == '824071958'"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == 6\nassert solution(\"4 1 2\") == 8\nassert solution(\"123 42 24\") == 824071958\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2') == '824071958'\n\"\"\"\nimport math\n\nn, x, pos = map(int, input().split())\na = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n    if i <= pos:\n        if a[i] == x:\n            cnt += 1\n    else:\n        if a[i] > x:\n            break\n        if a[i] == x:\n            cnt += 1\nprint(math.factorial(n) // math.factorial(n - pos) // math.factorial(pos) // math.factorial(n - pos - 1))\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2') == '824071958'\n\n\"\"\""
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2\") == \"6\"\nassert solution(\"123 42 24\") == \"824071958\""
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2\") == \"824071958\"\nassert solution(\"123 42 24\") == \"824071958\"\nassert solution(\"123 42 -24\") == \"0\"\nassert solution(\"123 -24\") == \"0\"\nassert solution(\"4 1 -2\") == \"824071958\"\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 2') == 6\nassert solution('123 42 24') == 824071958\n\n\"\"\"\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2') == '6'\n\"\"\"\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123 4 2\") == \"824071958\"\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(input()))\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"happynewyear\") == \"happynewyear\"\nassert solution(\"abaaaa\") == \"aaaaa\"\nassert solution(\"ab?a\") == \"aba\"\nassert solution(\"ab*a\") == \"aba\"\nassert solution(\"ab*a\") == \"aba\"\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('hw?ap*yn?eww*ye*ar') == 'happynewyear'\nassert solution('ab?a') == 'aa'\nassert solution('ababb') == 'ababb'\n\n\"\"\"\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ab?a\") == \"aba\"\nassert solution(\"ababb\") == \"ababb\"\nassert solution(\"ab?a\") == \"Impossible\"\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc??*') == 'Impossible'\nassert solution('h*w??r') == 'Impossible'\nassert solution('h*w??r') == 'Impossible'\nassert solution('h*w??r') == 'Impossible'\nassert solution('h*w??r') == 'Impossible'\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    'hw?ap*yn?eww*ye*ar'\n) == 'happynewyear'\nassert solution(\n    'ab?a'\n) == 'aa'\nassert solution(\n    'ababb'\n) == 'ababb'\nassert solution(\n    'ab?a'\n) == 'Impossible'\n\"\"\"\n\nimport re\nimport string\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == answer\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aba\"\nassert solution(\"ababb\") == \"ababb\"\nassert solution(\"ab?a\") == \"Impossible\"\nassert solution(\"abc\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"h*p*y*y*n*w*y*w*y*s\") == \"happy new year\"\nassert solution(\"h*p*y*y*n*w*y*w*y*s\") == \"h*p*y*y*n*w*y*w*y*s\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"ab?a\")!= \"aba\"\nassert solution(\"ababb\") == \"ababb\"\nassert solution(\"ab?a\")!= \"aba\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"60\") == \"1\"\nassert solution(\"-60\") == \"3\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"60\") == \"3\"\nassert solution(\"-60\") == \"3\"\nassert solution(\"-90\") == \"2\"\nassert solution(\"-120\") == \"1\"\nassert solution(\"-150\") == \"1\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"60\") == \"3\"\nassert solution(\"-60\") == \"3\"\nassert solution(\"0\") == \"1\"\nassert solution(\"-0\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"60\") == \"3\"\nassert solution(\"-60\") == \"1\"\nassert solution(\"120\") == \"3\"\nassert solution(\"-120\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"60\") == \"1\"\nassert solution(\"-60\") == \"3\"\n\"\"\""
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"60\") == \"3\"\nassert solution(\"-60\") == \"1\"\nassert solution(\"60\") == \"3\"\nassert solution(\"-60\") == \"1\"\nassert solution(\"60\") == \"3\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"60\") == \"3\"\nassert solution(\"-60\") == \"3\"\nassert solution(\"300\") == \"1\"\nassert solution(\"-300\") == \"1\"\nassert solution(\"-90\") == \"1\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"60\") == \"1\"\nassert solution(\"-60\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"60\") == \"1\"\nassert solution(\"-60\") == \"3\"\nassert solution(\"-120\") == \"2\"\nassert solution(\"-330\") == \"1\"\n\"\"\"\n\n\"\"\"\nhttps://www.coursera.org/learn/python-osnovy-programmirovaniya/programming/66KjY/vyzvayie-na-90-degrees-kak-dobavlyay-i-minimno-y-90-degrees-povest-i-tak-dlya-sposobno-90-degrees-povest\n\n\u0412\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0446\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u043e\u0440\u043e\u0442\u043e\u0432 \u0441\u043e \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u043d\u0430 90 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432. \n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (1 \u2264 n \u2264 100) \u2014 \u0447\u0438\u0441\u043b\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 n \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043f\u0430\u0440\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u0430, \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0435 \u043e\u0441\u0438 x \u0438 y \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k (1 \u2264 k \u2264 10^6) \u2014 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0432\u043e\u0440\u043e\u0442\u043e\u0432 \u0441\u043e \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u043d\u0430 90 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432. \n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 k \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043f\u0430\u0440\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u0430, \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0445 \u0443\u0433\u043e\u043b \u043f\u043e\u0432\u043e\u0440\u043e\u0442\u0430 \u0432 \u0433\u0440\u0430\u0434\u0443\u0441\u0430\u0445.\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e t (0 \u2264 t \u2264 n) \u2014 \u043d\u043e\u043c\u0435\u0440 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u043f\u043e \u043f\u043e\u043b\u044e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u0443\u0433\u043e\u043b 90 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u043d\u0430 \u043e\u0441\u0438 x \u0438 y. \n\u0415\u0441\u043b\u0438 \u043e\u0442\u0432\u0435\u0442 \u043d\u0435\u0442, \u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \"No\". \n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n4\n4 -2\n4 -2\n1 0\n2 0\n1 0\n\n3\n1 1\n0 1\n3 1\n\n2\n0 0\n1 0\n\n3\n1 1\n0 0\n0 1\n\n0\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n2\n2\nNo\n\n0\n\n3\nNo\n\n1\n\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043d\u0435 \u0432\u0441\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u043f\u043e \u043f\u043e\u043b\u044e, \u0442.\u043a. \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442.\n\"\"\""
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('60') == '1'\nassert solution('-60') == '3'\n\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 0\\n2 1 2\") == \"Yes\"\nassert solution(\"5 6 1\\n2 7 2\") == \"No\"\nassert solution(\"3 3 3\\n2 2 2\") == \"Yes\"\nassert solution(\"1 1 1\\n1 1 1\") == \"Yes\"\nassert solution(\"1 1 1\\n3 3 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 0\") == \"Yes\"\nassert solution(\"2 1 2\") == \"No\"\n\n\"\"\"\n\na, b, c = map(int, stdin.split())\nx, y, z = map(int, stdin.split())\n\nblue, violet, orange = 0, 0, 0\n\nwhile x + y + z!= 0:\n    x, y, z = x - max(0, min(x, y)), y - max(0, min(y, z)), z - max(0, min(z, x))\n    blue, violet, orange = blue + max(0, min(x, y)), violet + max(0, min(y, z)), orange + max(0, min(z, x))\n\nprint(\"Yes\" if blue + violet + orange == a + b + c else \"No\")\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 0\") == \"Yes\"\nassert solution(\"2 1 2\") == \"No\"\n\nassert solution(\"5 6 1\") == \"No\"\nassert solution(\"3 3 3\") == \"Yes\"\nassert solution(\"2 2 2\") == \"Yes\"\n\n\"\"\"\n\n\nimport unittest\nimport collections\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 2\") == \"Yes\"\nassert solution(\"4 4 0\") == \"Yes\"\nassert solution(\"2 7 2\") == \"No\"\nassert solution(\"5 6 1\") == \"Yes\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 0\") == \"Yes\"\nassert solution(\"2 1 2\") == \"Yes\"\nassert solution(\"5 6 1\") == \"No\"\nassert solution(\"3 3 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 4 0\n2 1 2''') == 'Yes'\nassert solution('''5 6 1\n2 7 2''') == 'No'\n\n\"\"\""
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 0\") == \"Yes\"\nassert solution(\"5 6 1\") == \"No\"\nassert solution(\"3 3 3\") == \"Yes\""
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 0\\n2 1 2') == 'Yes'\nassert solution('5 6 1\\n2 7 2') == 'No'\nassert solution('3 3 3\\n2 2 2') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6 1\") == \"No\"\nassert solution(\"4 4 0\") == \"Yes\"\nassert solution(\"2 1 2\") == \"Yes\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5 6 1) == \"No\"\nassert solution(4 4 0) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 1000') == '4'\nassert solution('2 2 1000') == '45'\nassert solution('5 3 1103') == '590'"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 1103\") == \"590\"\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1000\") == \"4\"\nassert solution(\"2 2 1000\") == \"45\"\nassert solution(\"5 3 1103\") == \"590\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nn, k, m = map(int, input().split())"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1000\") == \"4\"\nassert solution(\"2 2 1000\") == \"45\"\nassert solution(\"5 3 1103\") == \"590\"\n\n\n-----"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1000\") == '4'\nassert solution(\"2 2 1000\") == '45'\nassert solution(\"5 3 1103\") == '590'\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1000\") == \"4\"\nassert solution(\"2 2 1000\") == \"45\"\nassert solution(\"5 3 1103\") == \"590\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 1000') == '45'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 1000') == '4'\nassert solution('2 2 1000') == '45'\nassert solution('5 3 1103') == '590'\n\"\"\"\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1000\") == \"4\"\nassert solution(\"2 2 1000\") == \"45\"\nassert solution(\"5 3 1103\") == \"590\""
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 1000') == '45'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 0\") == \"0\"\nassert solution(\"1 4 2\") == \"6\"\nassert solution(\"5 5 5\") == \"14\"\nassert solution(\"0 2 0\") == \"0\"\n\"\"\"\n\nl, r, a = list(map(int, input().split()))\nprint((l*r-a)//2)\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4 2\") == 6\nassert solution(\"5 5 5\") == 14\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 4 2') == '6'\nassert solution('5 5 5') == '14'\nassert solution('0 2 0') == '0'\n\"\"\"\n\nl, r, a = list(map(int, input().split()))"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 4 2') == 6\nassert solution('5 5 5') == 14\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 4, 2) == 6\nassert solution(5, 5, 5) == 14\n\"\"\""
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 4 2') == 6\nassert solution('5 5 5') == 14\nassert solution('0 2 0') == 0\n\"\"\"\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 5') == '6'\nassert solution('1 2 2') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1 1 4') == '0'\nassert solution('0 2 0') == '0'\n\"\"\""
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 5') == '14'\nassert solution('0 2 0') == '0'"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 5\") == \"14\"\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 4 2\") == \"6\"\nassert solution(\"5 5 5\") == \"14\"\nassert solution(\"0 2 0\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == 6\nassert solution(\"4 2\") == 13\nassert solution(\"5 1\") == 15\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 2') == '13'\nassert solution('5 1') == '15'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"4 2\") == \"13\"\nassert solution(\"5 1\") == \"15\"\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == 6\nassert solution(\"4 2\") == 13\nassert solution(\"5 1\") == 15\n\"\"\""
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == 6\nassert solution(\"4 2\") == 13\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2') == '13'\nassert solution('2 2') == '6'\nassert solution('5 1') == '15'\n\n\"\"\""
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"13\"\nassert solution(\"2 1\") == \"6\""
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == 6\nassert solution(\"4 2\") == 13\nassert solution(\"5 1\") == 15\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 2') == '13'\n\"\"\"\nfrom functools import lru_cache\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_LINE = INPUT_LINES[0]\nINTEGER_MAPPING = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9\n}"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2, 2) == 6\nassert solution(4, 2) == 13\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"9\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"5 0\") == \"10\""
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"9\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"5 0\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"9\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"5 0\") == \"10\"\nprint(\"Success!\")"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3') == '9'\nassert solution('3 2') == '8'\nassert solution('5 0') == '10'\n\"\"\"\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"9\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"5 0\") == \"10\"\n\nprint(solution(stdin))"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"1 3\"\n    ) == \"9\"\n\nassert solution(\n    \"3 2\"\n    ) == \"8\"\n\nassert solution(\n    \"5 0\"\n    ) == \"10\"\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3') == '9'\nassert solution('3 2') == '8'\nassert solution('5 0') == '10'\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1, 3) == \"9\"\n\"\"\"\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 2''') == '8'\nassert solution('''5 0''') == '10'\nassert solution('''5 2''') == '9'\nassert solution('''1 3''') == '9'\nassert solution('''0 1''') == '10'\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n11\\n27\\n27\\n11\\n\") == 'YES\\n11 27'\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\\n\") == 'NO'\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\\n\") == 'NO'\nassert solution(\"6\\n10\\n20\\n30\\n20\\n10\\n20\\n\") == 'NO'\nassert solution(\"6\\n10\\n20\\n30\\n20\\n10\\n20\\n\") == 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'YES'\nassert solution('11\\n27') == 'YES'\nassert solution('1\\n1\\n2\\n2') == 'NO'\nassert solution('1\\n6\\n6\\n10\\n20\\n30\\n20\\n10\\n20') == 'NO'\n\nprint('Hooray!')\n\n\"\"\""
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n11\\n27\\n27\\n11') == 'YES\\n11 27'\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3') == 'NO'\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3') == 'NO'\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3') == 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n11\\n27\\n27\\n11') == \"YES\\n11 27\"\nassert solution('2\\n6\\n6') == \"NO\"\nassert solution('6\\n10\\n20\\n30\\n20\\n10\\n20') == \"NO\"\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3') == \"NO\"\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3\\n3\\n3') == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n11\\n27\\n27\\n11\") == \"YES\\n11 27\"\nassert solution(\"6\\n10\\n20\\n30\\n20\\n10\\n20\") == \"NO\\n\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\\n\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\\n4\") == \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n11\\n27\\n27\\n11\") == 'YES\\n11 27'\nassert solution(\"2\\n6\\n6\") == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n11\\n27\\n27\\n11\\n') == 'YES\\n11 27'\nassert solution('2\\n6\\n6\\n') == 'NO'\nassert solution('6\\n10\\n20\\n30\\n20\\n10\\n20\\n') == 'NO'\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3\\n') == 'NO'\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3\\n') == 'NO'\n\n\"\"\""
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n11\\n27\\n27\\n11\\n\") == \"YES\\n11 27\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\\n\") == \"NO\"\nassert solution(\"6\\n10\\n20\\n30\\n20\\n10\\n20\\n\") == \"NO\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\\n\") == \"NO\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3') == 'NO'\nassert solution('2\\n6\\n6') == 'NO'\nassert solution('6\\n10\\n20\\n30\\n20\\n10\\n20') == 'NO'\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3') == 'YES\\n1 1'\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n11\\n27\\n27\\n11\\n') == 'YES\\n11 27'\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3\\n') == 'NO'\nassert solution('6\\n1\\n1\\n2\\n2\\n3\\n3\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2') == 'YES'\nassert solution('5 8') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('1 4') == 'YES'\nassert solution('1 4') == 'YES'\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n5 8\") == \"YES\"\nassert solution(\"1 2\\n7 1\") == \"NO\"\nassert solution(\"1 4\\n2 2 1 2\") == \"YES\""
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n5 8\\n') == 'YES'\nassert solution('1 2\\n7 1\\n') == 'NO'\nassert solution('1 4\\n2 2 1 2\\n') == 'YES'\nassert solution('1 4\\n2 2 1 1\\n') == 'NO'\nassert solution('1 4\\n2 2 1 3\\n') == 'YES'\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n5 8\\n\") == \"YES\"\nassert solution(\"1 2\\n7 1\\n\") == \"NO\"\nassert solution(\"1 4\\n2 2 1 2\\n\") == \"YES\"\n\"\"\""
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 4\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\n\nprint(solution(\"5 8\"))\nprint(solution(\"1 2\"))\nprint(solution(\"1 4\"))\nprint(solution(\"1 2\"))\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n\") == \"YES\"\nassert solution(\"4 2\\n2 2 1 2\\n\") == \"NO\"\nassert solution(\"1 2\\n1 2\\n\") == \"YES\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n7 1') == 'YES'\nassert solution('2 2\\n2 2') == 'NO'\nassert solution('1 4\\n7 1') == 'YES'\nassert solution('1 4\\n4 4') == 'YES'\nassert solution('1 4\\n6 2') == 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2\\n3 5\\n5 8\\n4 2') == \"YES\"\nassert solution('5 4\\n1 2\\n3 5\\n5 8\\n4 2') == \"NO\"\nassert solution('1 2\\n7 1\\n2 2') == \"YES\""
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n5 8') == 'YES'\nassert solution('1 4\\n2 2 1 2') == 'YES'\nassert solution('1 4\\n2 2 1 3') == 'NO'"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n5 8\\n') == 'YES'\nassert solution('1 2\\n7 1\\n') == 'NO'\nassert solution('1 4\\n2 2 1 2\\n') == 'YES'\nassert solution('1 4\\n2 2 2\\n') == 'NO'\nassert solution('1 4\\n2 2 3\\n') == 'NO'\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10 1 4\") == \"3 7\"\nassert solution(\"5\\n1 1 2 2 3\") == \"2 0\""
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n10 1 4') == '3 7'\nassert solution('5\\n1 1 2 2 3') == '2 0'\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1 4\") == \"3 7\"\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_str) == answer\nprint(solution(input_str))\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n10 1 4\n\"\"\") == \"3 7\"\n\"\"\"\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 4\") == \"3 7\"\nassert solution(\"5 1 1 2 2 3\") == \"2 0\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n10 1 4\\n\") == \"3 7\"\n\n\"\"\"\n\nimport sys\nimport heapq\nimport collections\nfrom collections import deque, defaultdict"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n10 1 4') == '3 7'\nassert solution('5\\n1 1 2 2 3') == '2 0'\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 2 2 3') == '3 7'\nassert solution('5\\n1 1 2 2 3') == '2 0'\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 1 4') == '3 7'\nassert solution('5 1 2 2 3') == '2 0'\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 3') == '3'\nassert solution('3 3') == '3'\nassert solution('4 4') == '2'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n.\\n*') == '1'\nassert solution('4 4\\n....\\n..*.\\n...*\\n..**') == '3'\nassert solution('1 3\\n.\\n*') == '1'\nassert solution('2 1\\n.\\n*') == '1'\n\"\"\"\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n....\\n..*\\n...*\\n..**') == '3'\nassert solution('1 3\\n.*\\n') == '1'\nassert solution('2 1\\n.\\n*') == '1'\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n....\\n..*\\n...*\\n..**') == '3'\nassert solution('1 3\\n.*\\n.*') == '1'\nassert solution('2 1\\n.\\n*') == '1'\n\"\"\"\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('.*.**') == '3'\nassert solution('**.*') == '3'\nassert solution('**.***') == '4'\nassert solution('**.*.*') == '5'\nassert solution('**.*.*.*') == '7'\n"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n....\\n..*.\\n...*\\n..**\") == 3\nassert solution(\"1 3\\n*.*\\n\") == 1\nassert solution(\"2 1\\n.\\n*\") == 1"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n....\\n..*.\\n...*\\n..**\") == \"3\"\nassert solution(\"1 3\\n*.*\\n\") == \"1\"\nassert solution(\"2 1\\n.\\n*\") == \"1\"\n\"\"\""
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*') == 3\nassert solution('4 4\\n....\\n..*.\\n...*\\n..**') == 3\nassert solution('1 3\\n.\\n*') == 1\nassert solution('2 1\\n.\\n*') == 1\nprint('Success')\n\n\"\"\"\n\n\n\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u00ab\u0411\u043e\u043b\u044c\u0448\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0435\u043b\u0438\u0442\u0441\u044f\u00bb\n\n\u041f\u0435\u0440\u0435\u0434 \u0412\u0430\u043c\u0438 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n \u0438 m (1 \u2264 n, m \u2264 10^12) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e n, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 m. \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0438\u0437 \u0442\u0430\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b, \u0434\u0435\u043b\u044f\u0449\u0438\u0445\u0441\u044f \u043d\u0430 m \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u043b\u044f\u0449\u0438\u0445\u0441\u044f \u043d\u0430 m \u0438 \u0441\u0430\u043c\u043e\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0435\u0435\u0441\u044f \u0432 \u043d\u0438\u0445 \u0447\u0438\u0441\u043b\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e t (1 \u2264 t \u2264 10000) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c. \u0414\u0430\u043b\u0435\u0435, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 t \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 n \u0438 m (1 \u2264 n, m \u2264 10^12) \u2014 \u043a\u043e\u043b"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n....\\n..*\\n...*\\n..**') == 3\nassert solution('1 3\\n*.*\\n') == 1\nassert solution('2 1\\n.\\n*') == 1\n\nprint(solution('4 4\\n....\\n..*\\n...*\\n..**'))\nprint(solution('1 3\\n*.*\\n'))\nprint(solution('2 1\\n.\\n*'))\n\n'''\n\nimport sys"
    },
    {
        "number": 190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n....\\n..*.\\n...*\\n..**\") == \"3\"\nassert solution(\"1 3\\n.*\\n\") == \"1\"\nassert solution(\"2 1\\n.\\n*\") == \"1\"\nprint(solution(\"4 4\\n....\\n..*.\\n...*\\n..**\"))\n\n\n\u0412 \u0432\u0435\u0440\u0441\u0438\u0438 \u0441 \u043e\u0444\u043b\u0430\u0439\u043d-\u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u043d\u0430 \u0441\u0442\u0435\u043f\u0438\u043a\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u043b \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u0434:"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n0 1 0\") == \"333333336\"\nassert solution(\"5 1\\n1 1 1 0 0\") == \"0\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 0 0 1 1 0\") == \"0\"\nassert solution(\"6 4 1 0 1 1 0\") == \"968493834\"\n\"\"\"\n\nimport sys\n\ninputs = []\nfor line in sys.stdin:\n    inputs.append(line)\n\na = list(map(int, inputs[1].split()))\nn, k = list(map(int, inputs[0].split()))\n\nmax_a = max(a)\nmax_a_count = a.count(max_a)\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"333333336\"\nassert solution(\"5 1\") == \"0\"\nassert solution(\"6 4\") == \"968493834\"\n\"\"\""
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n0 1 0\") == \"333333336\"\nassert solution(\"5 1\\n1 1 1 0 0\") == \"0\"\nassert solution(\"6 4\\n1 0 0 1 1 0\") == \"968493834\"\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 0 1 1 0\") == \"0\"\nassert solution(\"6 4 1 0 1 1 0\") == \"968493834\"\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n0 1 0\") == \"333333336\"\nassert solution(\"5 1\\n1 1 1 0 0\") == \"0\"\nassert solution(\"6 4\\n1 0 0 1 1 0\") == \"968493834\"\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n0 1 0\") == \"333333336\"\nassert solution(\"5 1\\n1 1 1 0 0\") == \"0\"\nassert solution(\"6 4\\n1 0 0 1 1 0\") == \"968493834\"\n\n\n\"\"\""
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 1\n1 1 1 1''') == '1'\nassert solution('''6 4\n1 0 0 1 1 0\n''') == '968493834'\n\nprint(solution(input()))\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n0 1 0\") == \"333333336\"\nassert solution(\"5 1\\n1 1 1 0 0\") == \"0\"\nassert solution(\"6 4\\n1 0 0 1 1 0\") == \"968493834\"\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\n\nn, k = [int(x) for x in input[0].split()]\na = [int(x) for x in input[1].split()]\n\nc = [0] * n\n\nfor i in range(k):\n    ind = [int(x) for x in input[i + 2].split()]\n    if a[ind[0]] == 0 and a[ind[1]] == 0:\n        c[ind[0]] += 1\n        c[ind[1]] += 1\n    elif a[ind[0]] == 1 and a[ind[1]] == 1:\n        c[ind[1]] += 1\n    elif a[ind[0]] == 1 and a[ind[1]] == 0:\n        c[ind[0]] += 1\n    elif a[ind[0]] == 0 and a[ind[1]] == 1:\n        c[ind[1]] += 1\n    else:\n        c[ind[0]] += 1\n        c[ind[1]] += 1\n    a[ind[0]], a[ind[1]] = a[ind[1]], a[ind[0]]\n\nprint(sum(c) if c[0] == 0 else 0)"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 2\\n0 1 0\"\n) == \"333333336\"\nassert solution(\n    \"5 1\\n1 1 1 0 0\"\n) == \"0\"\nassert solution(\n    \"6 4\\n1 0 0 1 1 0\"\n) == \"968493834\"\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom itertools import count, repeat\nfrom typing import Generator, List, Tuple\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n\"\"\"\nfrom typing import List, Dict\nfrom collections import defaultdict, Counter\nfrom itertools import combinations\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3') == '4'\nassert solution('8 5') == '3'\nassert solution('22 4') == '6'\n\n\"\"\"\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 5\") == \"3\"\nassert solution(\"6 3\") == \"4\"\nassert solution(\"22 4\") == \"6\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"100000 100000\") == \"100000\"\n\"\"\"\n\nx, y = [int(n) for n in stdin.split(\" \")]\nimport math\n\nprint(math.ceil(y/x) - math.floor(y/x))\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n6,\n3\n) ==\n4\nassert solution(\n8,\n5\n) ==\n3\nassert solution(\n22,\n4\n) ==\n6\n\"\"\"\n\nfrom typing import Dict, List, NamedTuple, Set\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        x, y = (int(x) for x in stdin.split(' '))\n        cur = x\n        s = 0\n        while cur > y:\n            cur /= 2\n            s += 1\n        return s\n\n\nassert Solution().solution(\n6,\n3\n) ==\n4\nassert Solution().solution(\n8,\n5\n) ==\n3\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n\"\"\"\nimport sys"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\") == 4\nassert solution(\"8 5\") == 3\nassert solution(\"22 4\") == 6\nassert solution(\"1 1\") == 0\nassert solution(\"1 1000000000\") == 0\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3\") == 4\nassert solution(\"8 5\") == 3\nassert solution(\"22 4\") == 6\n\n\n----\n\n'''"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n\"\"\"\n\nfrom collections import deque\nfrom math import sqrt\nfrom typing import Tuple\n\nINPUT_1 = \"6 3\"\nINPUT_2 = \"8 5\"\nINPUT_3 = \"22 4\"\n\nSTART, END = map(int, INPUT_1.split())\nSTART = int(START)\nEND = int(END)\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 5') == '3'\nassert solution('6 3') == '4'\nassert solution('22 4') == '6'\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n3 4') == '0.2000000000'\nassert solution('1 0\\n0 1') == '0.5000000000'"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0.5000000000\"\n\"\"\"\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0.20000000000\"\n\nassert solution(\"1 0\\n0 1\") == \"0.50000000000\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n3 4') == '0.2000000000'\n\"\"\"\nimport numpy as np\nfrom scipy.linalg import det"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0.2000000000\"\nassert solution(\"1 0\\n0 1\") == \"0.5000000000\"\n\n\"\"\""
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n3 4') == 0.2000000000\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2 3 4\\n1 2 3 4') == '0.20000000'\nassert solution('4 1\\n1 2 3 4\\n1 2 3 4') == '0.5000000'\nassert solution('4 0\\n1 2 3 4\\n1 2 3 4') == '0.20000000'\n\"\"\""
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 1') == '0.5'\nassert solution('1 0\\n0 1') == '0.5'\n\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0.2000000000\"\nassert solution(\"1 0\\n0 1\") == \"0.5000000000\"\n\n\"\"\""
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == 0.5\nassert solution(\"1 0\") == 0.5\n\n\"\"\""
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2\\n1 2 1 1\") == \"0\"\nassert solution(\"4 1 1\\n1 1 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2\\n1 1 2 1') == '0'\nassert solution('4 1 1\\n1 1 2 1') == '2'\n\"\"\""
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\\n1 2 1 1\") == \"0\"\nassert solution(\"4 1 1\\n1 1 2 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2\\n1 2 1 1\") == \"0\"\nassert solution(\"4 1 1\\n1 1 2 1\") == \"2\"\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2\\n1 2 1 1') == '0'\nassert solution('4 1 1\\n1 1 2 1') == '2'\nassert solution('4 1 1\\n1 1 1 1') == '2'\nassert solution('3 1 2\\n1 2') == '0'\nassert solution('4 1 1\\n1 1 1 1') == '2'"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2\\n1 1 2 1') == '0'\nassert solution('4 1 1\\n1 1 2 1') == '2'"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 2\\n1 2 1 1') == '0'\nassert solution('4 1 1\\n1 1 2 1') == '2'\nassert solution('4 1 1\\n1 1 2 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\") == \"0\"\nassert solution(\"4 1 1\") == \"2\"\nassert solution(\"1 1 2 1\") == \"0\"\nassert solution(\"1 1 2 1\") == \"2\"\nassert solution(\"4 1 1\") == \"2\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2\\n1 2 1 1\") == \"0\"\nassert solution(\"4 1 1\\n1 1 2 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\\n1 2 1 1\") == \"0\"\nassert solution(\"4 1 1\\n1 1 2 1\") == \"2\""
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 5 20\") == \"5\"\nassert solution(\"2 2 0 4\") == \"-1\"\nassert solution(\"2 2 2 1\") == \"-1\"\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\"\"\""
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 10 5 20') == '5'\nassert solution('2 2 0 4') == '-1'\nassert solution('2 2 2 1') == '-1'\n\"\"\"\n\n\nimport itertools\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 10 5 20') == '5'\nassert solution('2 2 0 4') == '-1'\nassert solution('2 2 2 1') == '-1'\nassert solution('2 2 3 1') == '-1'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 10 5 20') == '5'\nassert solution('2 2 0 4') == '-1'\nassert solution('2 2 2 1') == '-1'\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 2 1') == -1\nassert solution('2 2 0 4') == 5\nassert solution('10 10 5 20') == 5\nassert solution('2 2 0 2') == -1\nassert solution('2 2 2 1') == -1\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\nassert solution('3 4 5 0') == '-1'\nassert solution('1 0 2 3') == '4'\nassert solution('10 10 5 20') == '5'\n'''\n\na, b, c, n = map(int, input().split())\n\nans = n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 5 20\") == \"5\"\nassert solution(\"2 2 0 4\") == \"-\"\nassert solution(\"2 2 2 1\") == \"-\"\n\"\"\"\nfrom functools import reduce"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 10 5 20') == '5'\nassert solution('2 2 0 4') == '-1'\nassert solution('2 2 2 1') == '-1'\n\"\"\""
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 0 4') == -1\nassert solution('2 2 2 1') == -1\nassert solution('2 2 2 2') == 0\nassert solution('2 2 0 4') == 0\nassert solution('3 3 3 0') == 0\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 0') == '4'\nassert solution('2 1') == '7'\nassert solution('3 2') == '21'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\n\nprint('Success')"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(2) +'' + str(0)) == '4'\nassert solution(str(2) +'' + str(1)) == '7'\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\n\n\"\"\"\n\nimport collections\n\nx, k = map(int, input().split())\nd = collections.deque([x])\n\nfor _ in range(k):\n    d.append(d[-1] * 2 % (10 ** 9 + 7))\n\nprint(sum(d) % (10 ** 9 + 7))\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 0\\n') == '4'\nassert solution('2 1\\n') == '7'\nassert solution('3 2\\n') == '21'"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0\\n\") == \"4\"\nassert solution(\"2 1\\n\") == \"7\"\nassert solution(\"3 2\\n\") == \"21\"\n\n\"\"\"\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\n\nimport sys\na,b = input().split()\nx = int(a)\ny = int(b)\n\nc = [0] * (x+1)\n\nfor i in range(1,x+1):\n    if i % 2 == 0:\n        c[i] = int((i / 2) + 1)\n    else:\n        c[i] = int((i / 2) + 1) * 2\n    if i == 1:\n        c[i] = 1\n\nprint(c[y])\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0\") == 4\nassert solution(\"2 1\") == 7\nassert solution(\"3 2\") == 21\nassert solution(\"2 10\") == 18\nassert solution(\"7 6\") == 42\n\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 0\\n') == '4'\nassert solution('2 1\\n') == '7'\nassert solution('3 2\\n') == '21'\nassert solution('3 3\\n') == '28'\n\"\"\"\n\nimport math"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1') == '7'\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n1 2\") == \"1\"\n\"\"\"\n\nfrom fractions import gcd"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n1 2\") == \"499122177\"\nassert solution(\"2\\n42 1337\\n13 420\") == \"578894053\"\nassert solution(\"2\\n1 1\\n1 1\") == \"1\"\n\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n1 2\\n1 2\\n\") == \"499122177\"\nassert solution(\"2\\n42 1337\\n13 420\\n\") == \"578894053\"\nassert solution(\"2\\n1 1\\n1 1\\n\") == \"1\"\nassert solution(\"2\\n1 1\\n1 1\\n\") == \"1\""
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 1\\n1 1\\n\") == \"1\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2\\n1 2\") == \"499122177\"\nassert solution(\"2\\n42 1337\\n13 420\") == \"578894053\"\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 1\\n1 1') == '1'\nassert solution('2\\n42 1337\\n13 420') == '578894053'\nassert solution('2\\n1 1\\n1 1') == '1'\nassert solution('2\\n0 0\\n0 0') == '1'\nassert solution('2\\n0 0\\n42 1337') == '1'\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 1\\n0 0') == '1'\nassert solution('1 2\\n1 2') == '1'\nassert solution('1 2\\n2 2') == '1'\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '1/2'\nassert solution('1 2\\n1 2') == '1/2'\nassert solution('42 1337\\n13 420') == '578894053'\nassert solution('1 1\\n1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 1\\n1 1\") == \"1\"\nassert solution(\"2\\n1 1\\n0 0\") == \"1\"\nassert solution(\"2\\n42 1337\\n13 420\") == \"578894053\"\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n1 2\") == '1'\nassert solution(\"2\\n42 1337\\n13 420\") == '578894053'\n\"\"\"\nimport math\nimport functools\nimport operator\nfrom functools import reduce\nfrom collections import Counter\nfrom itertools import combinations, accumulate, combinations_with_replacement\nimport numpy as np\nfrom math import gcd\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20') == '4'\n\"\"\""
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == '1'\nassert solution('20') == '4'\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"20\") == \"4\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(6) == 1\nassert solution(20) == 4\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '1'\nassert solution('20') == '4'\n\nprint(\"Hooray!\")\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"1\"\n\"\"\""
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"20\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == 1\nassert solution('11') == 1\nassert solution('12') == 2\nassert solution('13') == 2\nassert solution('14') == 3\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 1\nassert solution('6') == 1\nassert solution('8') == 1\nassert solution('10') == 0\nassert solution('11') == 0"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6') == '1'\nassert solution('20') == '4'\n\n\"\"\""
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3\n4 3 5''') == '3'\nassert solution('''3 4\n5 3 4''') == '2'\nassert solution('''3 7\n1 2 3''') == '-1'\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 3\n4 3 5''') == '3'\nassert solution('''3 4\n5 3 4''') == '2'\nassert solution('''3 7\n1 2 3''') == '-1'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"3 7\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n4 3 5\") == \"3\"\nassert solution(\"3 4\\n5 3 4\") == \"2\"\nassert solution(\"3 7\\n1 2 3\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n4 3 5') == '3'\nassert solution('3 4\\n5 3 4') == '2'\nassert solution('3 7\\n1 2 3') == '-1'\n\"\"\""
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n4 3 5\") == \"3\"\nassert solution(\"3 4\\n5 3 4\") == \"2\"\nassert solution(\"3 7\\n1 2 3\") == \"-1\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3, 3, 4, 5) == 3\nassert solution(3, 4, 5, 3) == 2\nassert solution(3, 7, 1, 2, 3) == -1\n\"\"\""
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"3 7\") == \"-1\"\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3, 3, 4, 5) == 3\nassert solution(3, 4, 5, 3) == 2\nassert solution(3, 7, 1, 2, 3) == -1\nassert solution(2, 2, 1, 1) == -1\nassert solution(2, 2, 3, 4) == -1\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n4 3 5\\n\") == \"3\"\nassert solution(\"3 4\\n5 3 4\\n\") == \"2\"\nassert solution(\"3 7\\n1 2 3\\n\") == \"-\"\nassert solution(\"3 4\\n5 3 4\\n\") == \"2\"\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 13\\n1 1\") == '1'\nassert solution(\"10 19\\n1 2\") == '-1'\nassert solution(\"10 19\\n5 4\") == '1'\n\n\"\"\"\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 30\\n2 1') == '1'\nassert solution('10 13\\n1 1') == '0'\nassert solution('1 50\\n5 4') == '1'\nassert solution('10 19\\n1 2') == '-1'\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 13\") == \"1\"\nassert solution(\"10 19\") == \"-1\"\nassert solution(\"1 50\") == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"10 30\"\n    \"2 1\"\n) == \"1\"\nassert solution(\n    \"10 13\"\n    \"1 1\"\n) == \"0\"\nassert solution(\n    \"1 50\"\n    \"5 4\"\n) == \"1\"\nassert solution(\n    \"10 19\"\n    \"1 2\"\n) == \"-1\"\nassert solution(\n    \"10 10\"\n    \"1 2\"\n) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 13') == '1'\nassert solution('10 19') == '-1'\nassert solution('1 50') == '1'\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 30\") == '1'\nassert solution(\"10 13\") == '-1'\nassert solution(\"1 50\") == '1'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 13\") == \"1\"\nassert solution(\"10 19\") == \"0\"\nassert solution(\"1 50\") == \"1\"\n\nimport numpy as np\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 13\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 50\") == \"-1\"\nassert solution(\"10 19\") == \"1\"\nassert solution(\"10 30\") == \"1\"\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 13\\n1 2') == '1'\nassert solution('10 19\\n1 2') == '-1'\n\"\"\"\n\n\"\"\"\nThe 9-th grade student Gabriel noticed a caterpillar on a tree when walking around in a forest after the classes. The caterpillar was on the height h_1 cm from the ground. On the height h_2 cm (h_2 > h_1) on the same tree hung an apple and the caterpillar was crawling to the apple.\n\nGabriel is interested when the caterpillar gets the apple. He noticed that the caterpillar goes up by a cm per hour by day and slips down by b cm per hour by night.\n\nIn how many days Gabriel should return to the forest to see the caterpillar get the apple. You can consider that the day starts at 10 am and finishes at 10pm. Gabriel's classes finish at 2pm. You can consider that Gabriel noticed the caterpillar just after the classes at 2pm.\n\nNote that the forest is magic so the caterpillar can slip down under the ground and then lift to the apple.\n\n\n-----Input-----\n\nThe first line contains two integers h_1, h_2 (1 \u2264 h_1 < h_2 \u2264 10^5) \u2014 the heights of the position of the caterpillar and the apple in centimeters.\n\nThe second line contains two integers a, b (1 \u2264 a, b \u2264 10^5) \u2014 the distance the caterpillar goes up by day and slips down by night, in centimeters per hour.\n\n\n-----Output-----\n\nPrint the only integer k \u2014 the number of days Gabriel should wait to return to the forest and see the caterpillar getting the apple.\n\nIf the caterpillar can't get the apple print the only integer  - 1.\n\n\n-----Examples-----\nInput\n10 30\n2 1\n\nOutput\n1\n\nInput\n10 13\n1 2\n\nOutput\n0\n\nInput\n1 50\n5 4\n\nOutput\n1\n\nInput\n1 50\n10 20\n\nOutput\n0\n\"\"\""
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 20\\n2 1') == '1'\nassert solution('1 50\\n5 4') == '-1'\nassert solution('10 13\\n1 1') == '0'\n\"\"\"\n\nh_1, h_2 = map(int, input().split())\na, b = map(int, input().split())\n\nday = 0\nwhile h_1 < h_2:\n    day += 1\n    h_1 += a\n    h_1 -= b"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3 5 2 3\") == 16\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10 3 5 2 3''') == 16\n\"\"\"\n\nimport collections"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3 5 2 3\") == \"16\"\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '10 3 5 2 3'\n) == '16'\n\"\"\"\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3 5 2 3\") == 16\n\"\"\"\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3 5 2 3\") == 16\nassert solution(\"10 3 2 4 4\") == 16\nassert solution(\"1 1 1 1 1\") == 1\nassert solution(\"1 10 100 100 100\") == 101\nassert solution(\"1 10 100 10 100\") == 101\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == answer\n--------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3 5 2 3\") == 16\n\"\"\"\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 3 5 2 3') == 16\n\"\"\"\n\nimport re\nfrom functools import reduce"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 3 5 2 3') == '16'\n\"\"\"\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0\\n4 5') == '5'\nassert solution('3 4\\n6 1') == '3'\n\"\"\""
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\nassert solution(\"3 4\\n6 1\") == \"3\"\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\nassert solution(\"3 4\\n6 1\") == \"3\"\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\nassert solution(\"3 4\\n6 1\") == \"3\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\nassert solution(\"3 4\\n6 1\") == \"3\"\nassert solution(\"3 4\\n6 7\") == \"4\"\nassert solution(\"3 4\\n7 7\") == \"0\"\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\nassert solution(\"3 4\\n6 1\") == \"3\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0\\n4 5') == '5'\n\"\"\"\n\nfrom collections import deque\nfrom sys import stdin\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\nassert solution(\"3 4\\n6 1\") == \"3\"\n\n-----Tests-----\n\n\"\"\""
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0\\n4 5\") == \"5\"\nassert solution(\"3 4\\n6 1\") == \"3\"\n\nimport unittest\n\nclass TestCase(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"0 0\\n4 5\"), \"5\")\n        self.assertEqual(solution(\"3 4\\n6 1\"), \"3\")"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0\\n4 5') == '5'\nassert solution('3 4\\n6 1') == '3'\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5DRR') == 'R'\nassert solution('5DDRR') == 'D'\nassert solution('5DDRRR') == 'R'\n\"\"\"\n\nimport math"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nDDRRR\") == 'D'\nassert solution(\"6\\nDDRRRR\") == 'R'\n\"\"\"\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nDDRRR') == 'D'\nassert solution('6\\nDDRRRR') == 'R'"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nDDRRR') == 'D'\n\nassert solution('6\\nDDRRRR') == 'R'"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5DRDRR\") == \"D\"\nassert solution(\"6DRDRRR\") == \"R\"\nassert solution(\"1DRDRRR\") == \"R\"\nassert solution(\"6DRDRRR\") == \"R\"\nassert solution(\"6DRDRRR\") == \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5, 'DRRR') == 'D'\nassert solution(6, 'DRRRR') == 'R'\n\"\"\"\n\nimport math"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5DDRRR') == 'D'\nassert solution('6DDRRRR') == 'R'\n\"\"\"\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5RRDDR\") == \"D\"\n\n\"\"\"\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nDRRRR') == 'D'\nassert solution('6\\nDDRRRR') == 'R'\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nDRDRR') == 'D'\nassert solution('6\\nDRDRRR') == 'R'\nassert solution('10\\nDRRRDRRRRRDRRRRRDRRRDRRRRRR') == 'D'\nassert solution('1\\nR') == 'R'\n\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"17 15 5 3\") == \"3\"\nassert solution(\"14 16 7 22\") == \"0\"\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == \"1000000063\"\nprint('Success')"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''17 15 5 3''') == '3'\nassert solution('''14 16 7 22''') == '0'\nassert solution('''1000000000000000000 1000000000000000000 999999866000004473 999999822000007597''') == '1000000063'\n\"\"\"\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('17 15 5 3') == '3'\nassert solution('14 16 7 22') == '0'\nassert solution('1000000000000000000 1000000000000000000 999999866000004473 999999822000007597') == '1000000063'\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"17 15 5 3\") == 3\nassert solution(\"14 16 7 22\") == 0\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == 100000000063\n\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"17 15 5 3\") == \"3\"\nassert solution(\"14 16 7 22\") == \"0\"\nassert solution(\"4 2 6 4\") == \"1\"\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 6 4\") == '1'\n\"\"\""
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"17 15 5 3\") == \"3\"\nassert solution(\"14 16 7 22\") == \"0\"\nassert solution(\"4 2 6 4\") == \"1\"\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"17 15 5 3\") == \"3\"\nassert solution(\"14 16 7 22\") == \"0\"\nassert solution(\"4 2 6 4\") == \"1\"\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == \"1000000063\"\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"17 15 5 3\") == \"3\"\nassert solution(\"14 16 7 22\") == \"0\"\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == \"1000000063\""
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"17 15 5 3\") == \"3\"\nassert solution(\"14 16 7 22\") == \"0\"\nassert solution(\"4 2 6 4\") == \"1\"\n\nprint('Hooray!')\n\n\"\"\""
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 9\") == \"1\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 10\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 9\") == \"1\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 10\") == \"1\"\nassert solution(\"2 1\") == \"0\"\n\"\"\"\n\nn, b = list(map(int, input().split()))\nres = 0\nwhile n > 0:\n    r = n % b\n    res += n // b\n    if r:\n        res += 1\n    n = r\nprint(res)\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 9') == '1'\nassert solution('38 11') == '3'\nassert solution('5 2') == '3'\nassert solution('5 10') == '1'"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n9 8\n''') == '1'\nassert solution('''\n38 11\n''') == '3'\nassert solution('''\n5 10\n''') == '1'\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == res\nprint(solution(s))\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 9\") == \"1\"\nassert solution(\"6 9\") == \"1\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 10\") == \"1\"\n\"\"\"\nimport math"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 9\") == \"1\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 10\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"6 9\"\n) == \"1\"\nassert solution(\n\"38 11\"\n) == \"3\"\nassert solution(\n\"5 2\"\n) == \"3\"\nassert solution(\n\"5 10\"\n) == \"1\"\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 9') == '1'\nassert solution('5 2') == '3'\nassert solution('5 10') == '1'\n\n'''"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 3\") == \"19\"\nassert solution(\"100 100000 1\") == \"101\"\nassert solution(\"6 4 5\") == \"10\"\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 3\") == 19\nassert solution(\"1000000000 1 2019\") == 500000001500000001\nassert solution(\"100 100000 1\") == 101"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 3\") == \"19\"\nassert solution(\"1000000000 1 2019\") == \"500000001500000001\"\nassert solution(\"100 100000 1\") == \"101\"\n\n-----Input-----\n\n100\n1\n101\n\n-----Output-----\n\n101\n\n-----Explanation-----\n\nYou can try:\n\n$f(0) = 0+1=1\n$f(1) = 1+1=2\n$f(2) = 2+1=3\n$f(3) = 3+1=4\n$f(4) = 4+1=5\n$f(5) = 5+1=6\n$f(6) = 6+1=7\n$f(7) = 7+1=8\n$f(8) = 8+1=9\n$f(9) = 9+1=10\n$f(10) = 10+1=11\n$f(11) = 11+1=12\n$f(12) = 12+1=13\n$f(13) = 13+1=14\n$f(14) = 14+1=15\n$f(15) = 15+1=16\n$f(16) = 16+1=17\n$f(17) = 17+1=18\n$f(18) = 18+1=19\n$f(19) = 19+1=20\n\nThe frog has landed on the number 19.\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 3\") == \"19\"\nassert solution(\"1 100000 1\") == \"500000001500000001\"\nassert solution(\"100 100000 1\") == \"101\"\n\n\"\"\"\n\nm, a, b = map(int, stdin.readline().strip().split())\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 3') == '19'\nassert solution('1000000000 1 2019') == '500000001500000001'\nassert solution('100 100000 1') == '101'\n\"\"\"\nfrom itertools import count\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 3\\n\") == 19\nassert solution(\"1000000000 1 2019\\n\") == 500000001500000001\nassert solution(\"100 100000 1\\n\") == 101"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 1\") == \"10\"\nassert solution(\"100 100000 1\") == \"101\"\nassert solution(\"6 4 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 2 5') == '3'\nassert solution('1 2 5') == '3'\nassert solution('1 2 5') == '3'\nassert solution('1 2 5') == '3'\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 3\") == \"19\"\nassert solution(\"1000000000 1 2019\") == \"500000001500000001\"\nassert solution(\"100 100000 1\") == \"101\"\n\"\"\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 5\") == 'Yes'\nassert solution(\"5\\n1 0 1 5 1\") == 'Yes'\nassert solution(\"3\\n4 3 1\") == 'No'\nassert solution(\"4\\n3 9 9 3\") == 'No'\nassert solution(\"4\\n3 9 9 7\") == 'No'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\ncount = 0\n\nfor i in range(0, N):\n    if A[i] % 2 == 1:\n        count += 1\n    else:\n        count = 0\n\nprint('Yes' if count < 2 else 'No')\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 9 9 3') == \"No\"\nassert solution('1 3 5') == \"Yes\"\nassert solution('4 3 1') == \"No\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\ncount = 0\nfor i in range(n):\n    if a[i] % 2 == 1:\n        count += 1\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1\") == \"No\"\nassert solution(\"4 3 1\") == \"No\"\nassert solution(\"4 3 1\") == \"No\"\nassert solution(\"4 3 1\") == \"No\"\nassert solution(\"3 9 9 3\") == \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1\") == \"No\"\nassert solution(\"3 9 9 3\") == \"No\"\n\"\"\""
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 9 3\") == \"No\"\nassert solution(\"1 0 1 5 1\") == \"Yes\"\nassert solution(\"3 9 9 3\") == \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 1\") == \"No\"\nassert solution(\"3 9 9 3\") == \"No\"\nassert solution(\"4 3 1\") == \"Yes\"\nassert solution(\"3 9 9 3\") == \"Yes\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 9 9 3\") == \"No\"\nassert solution(\"1 0 1 5 1\") == \"Yes\"\nassert solution(\"4 3 1\") == \"No\"\nassert solution(\"5 9 9 3\") == \"Yes\"\nassert solution(\"4 3 9 3\") == \"Yes\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 9 9 3\") == \"No\"\nassert solution(\"1 0 1 5 1\") == \"Yes\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 9 9 3') == 'No'\nassert solution('4 3 9 9 3') == 'Yes'\nassert solution('4 3 9 9') == 'No'\nassert solution('4 3 9 8 3') == 'Yes'\nassert solution('4 3 9 7 3') == 'Yes'\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 9 9 3\") == \"No\"\nassert solution(\"1 3 5\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 1 1\") == \"1 0 1 1\"\nassert solution(\"0 0 1 2\") == \"-1\"\nassert solution(\"0 0 1 1\") == \"0 1 1 0\"\n\"\"\"\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 1 1\") == \"1 0 1 1\"\nassert solution(\"0 0 1 2\") == \"0 1 1 0\"\nassert solution(\"0 0 2 1\") == \"-1\"\nassert solution(\"1 0 1 1\") == \"0 0 1 1\"\nassert solution(\"1 0 1 2\") == \"1 1 0 1\"\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 1 1\") == \"1 0 1 1\"\nassert solution(\"0 0 1 2\") == \"0 1 1 0\"\nassert solution(\"0 0 1 3\") == \"0 1 1 0\"\nassert solution(\"0 0 1 4\") == \"0 1 1 0\"\nassert solution(\"0 0 1 5\") == \"0 1 1 0\"\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 1 1\") == \"1 0 1 1\"\nassert solution(\"0 0 2 2\") == \"0 1 1 0\""
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 1 1\") == \"1 0 1 1\"\n\"\"\"\nfrom math import gcd\nfrom functools import reduce\nfrom typing import Tuple, List\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 1 1\") == \"0 1 1 0\"\n\nassert solution(\"0 0 1 2\") == \"1 1 0 0\"\n\nassert solution(\"0 0 1 3\") == \"0 1 0 1\"\n\nassert solution(\"0 0 2 1\") == \"0 0 1 1\"\n\nassert solution(\"0 0 2 3\") == \"1 1 1 1\""
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == -1\nassert solution('0 0 0 1') == '1 0 1 1'\nassert solution('0 0 1 1') == '0 1 1 0'\nassert solution('0 0 1 2') == '-1'\nassert solution('0 0 1 2 2') == '-1'"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0 1 1') == '1 0 1 1'\nassert solution('0 0 1 2') == '0 1 1 0'\n\"\"\"\n\n\"\"\"\nSolved and submitted.\n\"\"\"\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 1 1\") == \"1 0 1 1\"\nassert solution(\"0 0 1 2\") == \"-1\"\nassert solution(\"0 0 0 1\") == \"1 1 1 1\"\nassert solution(\"0 0 0 0\") == \"0 1 1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"0 -1\") == \"1000000006\""
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1'\nassert solution('0 -1') == '1000000006'"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"0 -1\") == \"1000000006\"\nassert solution(\"2 10\") == \"2\"\nassert solution(\"0 -1 10\") == \"2\"\nassert solution(\"1 10\") == \"1\"\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\", \"3\") == \"1\"\nassert solution(\"0 -1\", \"2\") == \"1000000006\"\n\"\"\""
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"0 -1\") == \"1000000006\"\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 -1') == 1000000006\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == result\n\n\"\"\"\nimport math\n\nfrom sys import stdin\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 -1\") == (10**9 + 6)\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n3') == '1'\nassert solution('0 -1\\n2') == '1000000006'\nassert solution('3 5\\n1') == '1'\nassert solution('-3 5\\n1') == '1'\nassert solution('0 0\\n1') == '1'\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"0 -1\") == \"1000000006\"\n\n\n-----Time Complexity-----\n\nO(log(n))\n\n-----Space Complexity-----\n\nO(1)\n\n\"\"\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 -3') == 'YES\\n2\\n1 2\\n3 3'\nassert solution('8\\n9 -12 3 4 -4 -10 7 3') == 'YES\\n2\\n1 2\\n3 8\\n4 9\\n5 10'\nassert solution('1\\n0') == 'NO'\n\n'''"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 -3') == 'YES\\n2\\n1 1\\n2 2\\n3 3'\nassert solution('8\\n9 -12 3 4 -4 -10 7 3') == 'YES\\n2\\n1 1\\n2 2\\n3 8\\n4 4'\nassert solution('1\\n0') == 'NO'\nassert solution('4\\n1 2 3 -5') == 'YES\\n4\\n1 1\\n2 2\\n3 3\\n4 4'\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 -3\\n\") == \"YES\\n2\\n1 2\\n3 3\"\nassert solution(\"8\\n9 -12 3 4 -4 -10 7 3\\n\") == \"YES\\n2\\n1 2\\n3 8\\n4 4\"\nassert solution(\"1\\n0\\n\") == \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 -3\") == \"YES\"\nassert solution(\"8\\n9 -12 3 4 -4 -10 7 3\") == \"YES\"\nassert solution(\"1\\n0\") == \"NO\"\nassert solution(\"4\\n1 2 3 -5\") == \"YES\"\n\n\"\"\"\n\nimport sys\n\na = [int(i) for i in sys.stdin.readline().strip().split()]\nn = a[0]\na = a[1:]\n\nans = False\nfor i in range(1, n + 1):\n    a1 = a[:i]\n    s1 = sum(a1)\n    if s1 == 0:\n        ans = True\n        for j in range(i):\n            print(1, i + 1)\n        break\n    elif s1 < 0:\n        break"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n9 -12 3 4 -4 -10 7 3\") == \"YES\\n2\\n1 1\\n2 2\\n3 8\\n4 4\"\nassert solution(\"1\\n0\") == \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 -3') == 'YES\\n2\\n1 2\\n3 3'\nassert solution('8\\n9 -12 3 4 -4 -10 7 3') == 'YES\\n2\\n1 2\\n3 8\\n4 9'\nassert solution('1\\n0') == 'NO'\n\nprint(solution(\"8\\n9 -12 3 4 -4 -10 7 3\"))\nprint(solution(\"8\\n9 -12 3 4 -4 -10 7 3\"))\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 -3\") == 'YES\\n2\\n1 1\\n3 8'\nassert solution(\"8\\n9 -12 3 4 -4 -10 7 3\") == 'YES\\n2\\n1 1\\n3 8'\nassert solution(\"1\\n0\") == 'NO'\nassert solution(\"4\\n1 2 3 -5\") == 'YES\\n4\\n1 1\\n2 2\\n3 3'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n1 2 3 -5''') == 'YES\\n4\\n1 1\\n2 2\\n3 3\\n4 4'\nassert solution('''5\n1 2 3 4 -5''') == 'YES\\n2\\n1 1\\n3 3\\n2 2\\n4 4\\n3 4'\nassert solution('''5\n1 2 3 4 -5''') == 'YES\\n2\\n1 1\\n3 3\\n2 2\\n4 4'\nassert solution('''5\n1 2 3 4 -5''') == 'YES\\n2\\n1 1\\n3 3\\n2 2\\n4 4'\nassert solution('''5\n1 2 3 4 -5''') == 'YES\\n2\\n1 1\\n3 3\\n2 2\\n4 4'\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 -3\\n\") == \"YES\\n2\\n1 2\\n3 3\"\nassert solution(\"8\\n9 -12 3 4 -4 -10 7 3\\n\") == \"YES\\n2\\n1 2\\n3 8\\n4 4\"\nassert solution(\"1\\n0\\n\") == \"NO\"\nassert solution(\"4\\n1 2 3 -5\\n\") == \"YES\\n4\\n1 1\\n2 2\\n3 3\\n4 4\""
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 -3\\n\") == \"YES\\n2\\n1 2\\n3 3\"\nassert solution(\"8\\n9 -12 3 4 -4 -10 7 3\\n\") == \"YES\\n2\\n1 2\\n3 8\\n4 4\"\nassert solution(\"1\\n0\\n\") == \"NO\"\nassert solution(\"4\\n1 2 3 -5\\n\") == \"YES\\n4\\n1 1\\n2 2\\n3 3\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\") == '6'\nassert solution(\"4 4 2\") == '0'\nassert solution(\"5 4 2\") == '6'\nassert solution(\"5 5 2\") == '6'\nassert solution(\"5 5 3\") == '0'\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5 3 2) == 3\nassert solution(5 4 2) == 6\n\"\"\"\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\") == \"3\"\nassert solution(\"5 4 2\") == \"6\"\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2\") == 3\nassert solution(\"5 4 2\") == 6\n\"\"\""
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 2') == '3'\nassert solution('5 4 2') == '6'\n\"\"\""
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1') == '0'\nassert solution('6 4 1') == '6'\nassert solution('4 4 2') == '0'\nassert solution('4 5 2') == '6'\nassert solution('5 4 1') == '3'\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2\") == \"3\"\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 2') == '3'\nassert solution('5 4 2') == '6'\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2\") == \"3\"\nassert solution(\"5 4 2\") == \"6\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1\") == \"6\"\nassert solution(\"4 3 2\") == \"3\"\nassert solution(\"5 4 2\") == \"6\"\nassert solution(\"5 4 1\") == \"1\"\nassert solution(\"5 3 2\") == \"3\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3454') == 'YES'\nassert solution('111111') == 'NO'\nassert solution('1110') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('45') == 'NO'\nassert solution('5') == 'YES'\nassert solution('11') == 'YES'\nassert solution('111111') == 'NO'\nassert solution('100') == 'NO'\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111111\") == \"NO\"\nassert solution(\"3454\") == \"YES\"\nassert solution(\"5\") == \"NO\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('111111') == 'NO'\nassert solution('3454') == 'YES'\nassert solution('4') == 'NO'\nassert solution('222222') == 'YES'\nassert solution('1234') == 'YES'\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3454\") == \"YES\\n344\"\nassert solution(\"111111\") == \"YES\\n0\"\nassert solution(\"999999999\") == \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3454) == \"YES\"\nassert solution(10) == \"YES\"\nassert solution(111111) == \"NO\"\nassert solution(12345) == \"NO\"\n\nSolution:\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f solution \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u043f\u0438\u0441\u044c\u044e \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 100 \u0446\u0438\u0444\u0440.\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \"YES\" \u0435\u0441\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0446\u0438\u0444\u0440 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0442\u0430\u043a \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430\u0441\u044c \u0446\u0438\u0444\u0440\u0430, \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0430\u044f \u043d\u0438 \u043e\u0434\u043d\u043e\u0439 \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u0446\u0438\u0444\u0440\u044b, \u0438 \u0441 \u043d\u0435\u0439 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u043d\u0430 8.\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \"NO\" \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0446\u0438\u0444\u0440 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0438 \u0435\u0441\u043b\u0438 \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u043d\u0430 8.\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u043e \u0431\u044b\u043b\u043e \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c \u0446\u0435\u043b\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0438 \u043d\u0435 \u0438\u043c\u0435\u0442\u044c \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0446\u0438\u0444\u0440.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\n>>> solution('3454')\n'YES'\n>>> solution('10')\n'YES'\n>>> solution('111111')\n'NO'\n>>> solution('12345')\n'NO'\n\n\n\n-----\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3454\") == 'YES\\n344'\nassert solution(\"111111\") == 'YES\\n0'\nassert solution(\"999\") == 'NO'\nassert solution(\"0\") == 'NO'\nassert solution(\"11111111\") == 'NO'\n\n\"\"\""
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3454\") == \"NO\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"111111\") == \"NO\"\nassert solution(\"102030405060708090\") == \"YES\"\nassert solution(\"010203\") == \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3454\") == \"YES\\n344\"\nassert solution(\"111111\") == \"NO\\n0\"\nassert solution(\"111111111\") == \"NO\\n0\"\nassert solution(\"111111111\") == \"NO\\n0\"\nassert solution(\"111111111\") == \"NO\\n0\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12345') == '12345'\nassert solution('111') == '111'\nassert solution('11111') == '1111'\nassert solution('1234') == '1234'\nassert solution('123456789') == '1234567'\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == \"4\"\nassert solution(\"8 4\\n3 1\\n6 2\\n5 2\\n2 1\") == \"-1\"\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 3\n6 2\n2 1\n7 3''') == '4'\nassert solution('''8 4\n3 1\n6 2\n5 2\n2 1''') == '-1'\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 3\n6 2\n2 1\n7 3''') == '4'\n\nassert solution('''8 4\n3 1\n6 2\n5 2\n2 1''') == '-1'\n\nassert solution('''8 4\n3 1\n6 2\n5 2\n2 1''') == '-1'\n\nassert solution('''8 4\n3 1\n6 2\n5 2\n2 1''') == '-1'\n\nassert solution('''8 4\n3 1\n6 2\n5 2\n2 1''') == '-1'"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 3\\n6 2\\n2 1\\n7 3') == '4'\nassert solution('8 4\\n3 1\\n6 2\\n5 2\\n2 1') == '-1'\nprint('Success')"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == \"4\"\nassert solution(\"8 4\\n3 1\\n6 2\\n5 2\\n2 1\") == \"-1\"\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n2 1\\n6 2\\n5 2\\n2 1\") == \"4\"\nassert solution(\"8 4\\n3 1\\n6 2\\n5 2\\n2 1\") == \"-1\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == \"4\"\nassert solution(\"8 4\\n3 1\\n6 2\\n5 2\\n2 1\") == \"-\"\nassert solution(\"7 4\\n3 1\\n6 2\\n5 2\\n2 1\") == \"-\"\nassert solution(\"10 3\\n6 2\\n2 1\\n7 3\") == \"4\"\n\nprint(\"Success!\")\n\n\"\"\""
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 3\\n6 2\\n2 1\\n7 3') == '4'\nassert solution('8 4\\n3 1\\n6 2\\n5 2\\n2 1') == '-1'\n\"\"\"\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin_lines) == expected_output\n\"\"\"\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\nprint(solution(input()))\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0X0X0\") == \"2\"\nassert solution(\"0XXX0\") == \"0\"\nassert solution(\"0X0X0X0\") == \"1\"\nassert solution(\"0X0X0X0X0\") == \"2\"\nassert solution(\"0X0X0X0X0X0X0\") == \"3\"\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"00\") == \"1\"\nassert solution(\"00X00X0XXX0\") == \"4\"\nassert solution(\"0XXX0X00X00\") == \"4\"\nassert solution(\"0X0X0\") == \"0\"\nassert solution(\"0X0X0\") == \"0\"\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('00X0X0') == 2\nassert solution('0XXX0') == 0\nassert solution('0X0X0') == 0"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0X0X0') == '0'\nassert solution('0XX0X0X0') == '0'\nassert solution('0XX0X0X0') == '0'\nassert solution('0X0X0X0X0X0X0X0X0') == '0'\nassert solution('0XX0X0X0X0X0X0X0') == '2'\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"00X0X0X0X0\") == 2\nassert solution(\"0X0X0\") == 0\nassert solution(\"0XXX0\") == 0\nassert solution(\"0X0X0XX0\") == 1\nassert solution(\"0X0X0XXXX0\") == 2\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0XXX0') == '2'\nassert solution('0X0X0') == '0'\nassert solution('0X0X0X0') == '2'\nassert solution('0X0X0X0X0X0') == '4'\n\"\"\""
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00X0X0\") == \"2\"\nassert solution(\"0X0X0\") == \"0\"\n\"\"\"\n\n\"\"\"\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 m \u0434\u043e n (\u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e) \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u043b\u0430 m \u0438 n.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f\n\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043c\u0435\u0442\u043e\u0434 sort \u0441\u043f\u0438\u0441\u043a\u0430.\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('00') == '0'\nassert solution('00X00') == '0'\nassert solution('00X0X0') == '0'\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaaaBaabAbA\") == \"2\"\nassert solution(\"zACaAbbaazzC\") == \"3\"\nassert solution(\"ABC\") == \"0\"\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaaaBaabAbA\") == 2\nassert solution(\"zACaAbbaazzC\") == 3\nassert solution(\"ABC\") == 0\nassert solution(\"bbbbBB\") == 1\nassert solution(\"wwwwww\") == 1\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abbbbaaabbccccc\") == 3\n\"\"\""
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabbbaaaba\") == 5\nassert solution(\"aaaaBaabAbA\") == 2\nassert solution(\"zACaAbbaazzC\") == 3\n\nprint(solution(input()))\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaaaBaabAbA\") == 2\nassert solution(\"zACaAbbaazzC\") == 3\nassert solution(\"ABC\") == 0\n\nprint(solution(stdin))\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaaBaabAbA') == 2\nassert solution('zACaAbbaazzC') == 3\nassert solution('ABC') == 0\n\"\"\"\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaaaBaabAbA\") == 2\nassert solution(\"zACaAbbaazzC\") == 3\nassert solution(\"ABC\") == 0\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aABb') == '2'\nassert solution('AaBB') == '0'\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('aaaa') == 1\nassert solution('aaaBB') == 1\nassert solution('zACaAbbaazzC') == 3\nassert solution('ABABz') == 3\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaaaBaabAbA\") == 2\nassert solution(\"zACaAbbaazzC\") == 3\nassert solution(\"ABC\") == 0\nassert solution(\"AAaAaAaaAa\") == 1\n\nprint(\"Passed.\")\n\"\"\"\nfrom collections import defaultdict\nimport numpy as np\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 -2 0') == '3'\nassert solution('6\\n16 23 16 15 42 8') == '120'\n\"\"\"\nimport sys"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 -2 0\") == 3\nassert solution(\"16 23 16 15 42 8\") == 120\n\"\"\"\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"6\"\nassert solution(\"4\\n-1 -2 -3 -4\") == \"0\"\nassert solution(\"7\\n16 23 16 15 42 8\") == \"120\"\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 -2 0\") == \"3\"\nassert solution(\"6\\n16 23 16 15 42 8\") == \"120\"\n\"\"\""
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 -2 0\") == \"3\"\nassert solution(\"6\\n16 23 16 15 42 8\") == \"120\"\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 -2\") == \"3\"\nassert solution(\"3\\n1 -2 0\") == \"3\"\nassert solution(\"4\\n16 23 16 15 42 8\") == \"120\""
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 -2 0\\n\") == \"3\"\nassert solution(\"6\\n16 23 16 15 42 8\\n\") == \"120\"\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 -2 0\") == \"3\"\nassert solution(\"6\\n16 23 16 15 42 8\") == \"120\"\n\"\"\"\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nmax = 0\n\nfor i in range(n):\n    for j in range(i, n):\n        temp = sum(a[i:j])\n        if temp > max:\n            max = temp\n\nprint(max)"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 -2 0\") == \"3\"\n\nassert solution(\"6\\n16 23 16 15 42 8\") == \"120\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 -2 0\") == \"3\"\nassert solution(\"6\\n16 23 16 15 42 8\") == \"120\"\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\nassert solution(\"6 10 2 4\") == \"2\"\nassert solution(\"6 5 4 3\") == \"-1\"\n\"\"\""
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\nassert solution(\"6 10 2 4\") == \"2\"\nassert solution(\"6 5 4 3\") == \"-1\"\nassert solution(\"6 5 8 6\") == \"2\"\nassert solution(\"6 5 4 7\") == \"2\"\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(6 9 2 4) == 4\n\n\"\"\"\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\nassert solution(\"6 10 2 4\") == \"2\"\nassert solution(\"6 5 4 3\") == \"-1\"\nassert solution(\"6 9 2 6\") == \"2\"\nassert solution(\"6 9 2 11\") == \"4\"\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 9 2 4\") == '4'\nassert solution(\"6 10 2 4\") == '2'\nassert solution(\"6 5 4 3\") == '-1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\n\nassert solution(\"6 10 2 4\") == \"2\"\n\nassert solution(\"6 5 4 3\") == \"-1\"\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\nassert solution(\"6 10 2 4\") == \"2\"\nassert solution(\"6 5 4 3\") == \"-1\"\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 9 2 4') == '4'\nassert solution('6 10 2 4') == '2'\nassert solution('6 5 4 3') == '-1'\nassert solution('6 5 4 1') == '-1'\nassert solution('10 10 2 10') == '3'\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 9 2 4\") == 4\nassert solution(\"6 10 2 4\") == 2\nassert solution(\"6 5 4 3\") == -1"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 9 2 4') == '4'\nassert solution('6 10 2 4') == '2'\nassert solution('6 5 4 3') == '-1'\n\"\"\"\n\na, b, f, k = map(int, input().split())\nt = k * (b - a) // f"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Hello\") == 2\nassert solution(\"Codeforces\") == 2\nassert solution(\"abacabac\") == 8\nassert solution(\"Privet\") == -1\nassert solution(\"\") == 0\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacabac\") == \"3\"\nassert solution(\"Codeforces\") == \"3\"\nassert solution(\"Privet\") == \"3\"\nassert solution(\"abacabac\") == \"3\"\n\"\"\""
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Hello\") == [(\"H\", \"e\", \"l\", \"l\", \"o\"), (\"He\", \"ll\", \"o\")]\nassert solution(\"Codeforces\") == [(\"C\", \"o\", \"d\", \"e\", \"F\", \"o\", \"r\", \"s\"), (\"C\", \"o\", \"d\", \"e\", \"F\", \"o\", \"r\", \"s\")]\nassert solution(\"Privet\") == []\nassert solution(\"abacabac\") == [(\"a\", \"b\", \"a\", \"c\", \"a\", \"b\", \"a\", \"c\")]\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Hello') == '2'\nassert solution('Codeforces') == '3'\nassert solution('Privet') == '-1'\nassert solution('abacabac') == '8'\n\"\"\""
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == 2\nassert solution(\"abacabac\") == 8\nassert solution(\"Privet\") == -1\n\"\"\""
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('codeforces') == '-1'\nassert solution('codeforces') == '2'\nassert solution('codeforces') == '-1'\nassert solution('codeforces') == '-1'\nassert solution('codeforces') == '-1'\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacabac') == 8\nassert solution('Codeforces') == 2\nassert solution('Privet') == -1\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Hello') == 2\nassert solution('Codeforces') == -1\nassert solution('abacabac') == 8\n\n\"\"\"\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Codeforces\") == \"Codeforces\"\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10 1 3\\n3 4 7\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\"\nassert solution(\"2 9 2 3\\n6 4\") == \"IMPOSSIBLE\"\n\"\"\"\n\nimport math\nimport sys\n\ns = input().split()\nn = int(s[0])\nm = int(s[1])\ns = int(s[2])\nd = int(s[3])\n\nobstacles = []\n\nfor i in range(n):\n    obstacles.append(int(input()))\n\nobstacles.sort()\n\nstart = 0\nfinish = m\nfinish_jump = 0\nmax_jump = 0\n\nfor obstacle in obstacles:\n    if obstacle < finish:\n        finish = obstacle - 1\n        max_jump = math.ceil((finish - start) / s)\n    if obstacle > finish_jump:\n        finish_jump = obstacle"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 1 3\\n3 4 7\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\"\n\nassert solution(\"2 9 2 3\\n6 4\") == \"IMPOSSIBLE\"\n\n\"\"\"\n\nimport unittest\nimport sys\nfrom collections import defaultdict\n\nclass Solution:\n    def __init__(self, n: int, m: int, s: int, d: int):\n        self.n = n\n        self.m = m\n        self.s = s\n        self.d = d\n        self.obstacles = defaultdict(list)\n        \n    def run(self, n: int, m: int, s: int, d: int, obstacles: list) -> str:\n        state = []\n        moves = ['RUN', 'JUMP']\n        cur_moves = 0\n        prev_moves = 0\n        cur_move = moves[0]\n        prev_move = moves[0]\n        obstacles = list(set(obstacles))\n        obstacles.sort()\n        obstacles_cnt = len(obstacles)\n        obstacles_idx = 0\n        finish = None\n        # run to beginning of jumps\n        if obstacles_cnt > 0:\n            while obstacles_idx < obstacles_cnt and obstacles[obstacles_idx] < m:\n                self.obstacles[obstacles[obstacles_idx]].append(obstacles_idx)\n                obstacles_idx += 1\n        while True:\n            if cur_move == 'JUMP':\n                jump = min(self.m - prev_moves, d)\n                state.append(f\"JUMP {jump}\")\n                cur_moves += jump\n            elif cur_move == 'RUN':\n                run = min(self.m - prev_moves, s)\n                state.append(f\"RUN {run}\")\n                prev_moves += run\n                prev_move = cur_move\n                cur_moves += run\n                if prev_moves > self.m:\n                    finish = prev_moves - self.m\n                    break\n            if obstacles_cnt > 0:\n                while obstacles_idx < obstacles_cnt and obstacles[obstacles_idx] < prev_moves:\n                    self.obstacles[obstacles[obstacles_idx]].append(obstacles_idx)\n                    obstacles_idx += 1\n            if obstacles_idx < obstacles_cnt:\n                prev_move = cur_move\n                cur_move = moves[obstacles_idx % 2]\n            else:\n                if finish is None:\n                    finish = prev_moves\n                break\n        return '\\n'.join(state)\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(Solution(3, 10, 1, 3).run(3, 4, 7), \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\")\n        self.assertEqual(Solution(2, 9, 2, 3).run(6, 4), \"IMPOSSIBLE\")\n        self.assertEqual(Solution(2, 9, 2, 3).run(6, 6), \"IMPOSSIBLE\")\n        self."
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 1 3\\n3 4 7\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\"\n\nassert solution(\"2 9 2 3\\n6 4\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('5 1 2 3') == 'IMPOSSIBLE'\nassert solution('0 1 2 3') == 'IMPOSSIBLE'\nassert solution('0 1 2 3 4') == 'RUN 1\\nJUMP 2'\n\nassert solution('') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3 10 1 3\"\n) == \"RUN 2\"\nassert solution(\n    \"2 9 2 3\"\n) == \"IMPOSSIBLE\"\nassert solution(\n    \"5 9 2 3\"\n) == \"RUN 4\"\nassert solution(\n    \"6 9 2 3\"\n) == \"IMPOSSIBLE\"\nassert solution(\n    \"1 1 1 1\"\n) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 1 3\\n3 4 7\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10 1 3\\n3 4 7\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\"\n\nassert solution(\"2 9 2 3\\n6 4\") == \"IMPOSSIBLE\"\n\nassert solution(\"2 10 1 5\\n1 4 2\") == \"JUMP 3\\nRUN 5\"\nassert solution(\"1 10 1 5\\n0 4 2\") == \"IMPOSSIBLE\"\n\nassert solution(\"2 10 1 5\\n1 4 2\\n1 2 10\") == \"JUMP 2\\nRUN 2\\nJUMP 2\\nJUMP 10\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 1 3\\n3 4 7\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\"\nassert solution(\"2 9 2 3\\n6 4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10 1 3\\n3 4 7\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\"\nassert solution(\"2 9 2 3\\n6 4\") == \"IMPOSSIBLE\"\nassert solution(\"4 4 1 3\\n3 4 7\") == \"RUN 2\\nJUMP 3\"\nassert solution(\"4 8 5 2\\n1 3 4 8\") == \"IMPOSSIBLE\"\nassert solution(\"4 8 5 2\\n1 5 1 8\") == \"RUN 1\\nJUMP 1\\nRUN 3\\nJUMP 2\"\n\"\"\"\n\nn, m, s, d = map(int, input().split())\na = list(map(int, input().split()))\n\nans = [\"IMPOSSIBLE\"]\n\nfor i in range(1, n):\n    if s + i < a[i] < m - s:\n        ans.append(i)\n\nans.append(n)\n\nprint(' '.join(map(str, ans)))\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 5\") == \"4\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"5 2\") == \"0\"\n\"\"\"\n\ns, x = input().split()\nx = int(x)\ns = int(s)\nprint((s+x) * s // 2 - s * s // 2)\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 5\\n\") == \"4\"\nassert solution(\"3 3\\n\") == \"2\"\nassert solution(\"5 2\\n\") == \"0\""
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 5') == '4'\nassert solution('3 3') == '2'\nassert solution('5 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 5') == '4'\nassert solution('3 3') == '2'\nassert solution('5 2') == '0'\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(b'9 5\\n') == b'4\\n'\nassert solution(b'3 3\\n') == b'2\\n'\nassert solution(b'5 2\\n') == b'0\\n'\n\na, x = map(int, stdin.decode().split())"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n3 2\") == 2\nassert solution(\"9 5\\n3 2\") == 4\nassert solution(\"5 2\\n3 2\") == 0\nassert solution(\"3 3\\n2 1\") == 0"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == 2\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\nc = a ^ b\ns = a + b\n\nn = 2 ** 32 - 1\nprint(sum([x for x in range(n + 1) if x ^ c == s]))\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5\") == \"4\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"7 1\") == \"0\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 5\\n\") == \"4\"\nassert solution(\"3 3\\n\") == \"2\"\nassert solution(\"5 2\\n\") == \"0\"\nassert solution(\"5 3\\n\") == \"0\"\nassert solution(\"1 1\\n\") == \"1\"\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 5\") == 4\nassert solution(\"3 3\") == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('./input1.txt') == '2\\n2 3 5\\n'\nassert solution('./input2.txt') == '2\\n2 3 4\\n'\nassert solution('./input3.txt') == '2\\n2 3 4\\n'\nassert solution('./input4.txt') == '2\\n2 3 5\\n'\nassert solution('./input5.txt') == '2\\n2 3 5\\n'\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2') == 2\nassert solution('5 1') == 2\n\nn, k = map(int, stdin.readline().split())\n\nsk = list(range(1, n + 1))\nfor i in range(k):\n    sk = sk[:len(sk) // 2] + sk[len(sk) // 2:][::-1]\n\nprint(len(sk))\nprint(' '.join(map(str, sk)))\n\n'''\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1') == '2'\nassert solution('5 1') == '2'\nassert solution('6 1') == '2'\nassert solution('7 1') == '2'\nassert solution('7 2') == '2'\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 1\") == \"2 1 6\"\n\"\"\""
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5, 1) == \"2 1 4\"\nassert solution(7, 2) == \"2 1 6\"\nassert solution(6, 1) == \"2 1 4\"\nassert solution(4, 1) == \"2 1 3\"\nassert solution(3, 1) == \"2 1 2\"\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\") == \"2\\n1 6\"\nassert solution(\"5 1\") == \"2\\n1 4\"\n\"\"\""
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n\") == \"2\\n1 6\\n\"\nassert solution(\"5 1\\n\") == \"2\\n1 4\\n\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\") == '2'\nassert solution(\"5 1\") == '2'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\") == \"2 1 4\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8314\") == \"2\"\nassert solution(\"625\") == \"0\"\nassert solution(\"333\") == \"-1\"\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5314\") == 2\nassert solution(\"3125\") == 0\nassert solution(\"999\") == -1\nassert solution(\"25\") == 0\nassert solution(\"333\") == -1\n\"\"\"\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8314\") == \"2\"\nassert solution(\"625\") == \"0\"\nassert solution(\"333\") == \"-1\"\n\"\"\"\nimport re"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8314\") == \"2\"\nassert solution(\"625\") == \"0\"\nassert solution(\"333\") == \"-\"\nassert solution(\"3456\") == \"5\"\n\"\"\""
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8314\") == \"2\"\nassert solution(\"625\") == \"0\"\nassert solution(\"333\") == \"-1\"\n\n\n\"\"\""
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8314\") == \"2\"\nassert solution(\"625\") == \"0\"\nassert solution(\"333\") == \"-\"\nassert solution(\"9\") == \"1\"\n\n---\n\n## \u0421\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0440\u0438 \u043f\u043e\u0438\u0441\u043a\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430\n\n\u0414\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b $n_1, \\, n_2, \\ldots, n_k$, \u0437\u0430\u0434\u0430\u044e\u0449\u0430\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442 \u0441 \u0434\u043b\u0438\u043d\u043e\u0439 $k$ \u0441\u0442\u043e\u0440\u043e\u043d\u044b $n_i$. \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u0435\u0435 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0430\u0432\u044b\u043c \u043f\u043e\u0442\u043e\u043b\u043a\u043e\u043c.\n\n\u041f\u0435\u0440\u0432\u044b\u043c \u0448\u0430\u0433\u043e\u043c \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u044b $n_i$ \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0438\u0441\u043a \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b $n_{i+1}$ \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u0441 \u0434\u043b\u0438\u043d\u043e\u0439 $k-1$. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b $n_{i+1}$ \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u0439\u0434\u0435\u043d\u0430, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0448\u0430\u0433\u043e\u043c \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u044b $n_i$ \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0438\u0441\u043a \u0441\u043b\u0435\u0432\u0430 \u043e\u0442 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 $n_{i+1}$ \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b $n_k$. \u0415\u0441\u043b\u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b $n_{i+1}$ \u0431\u044b\u043b\u0430 \u043d\u0430\u0439\u0434\u0435\u043d\u0430, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0448\u0430\u0433\u043e\u043c \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u044b $n_i$ \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0438\u0441\u043a \u0441\u043f\u0440\u0430\u0432\u0430 \u043e\u0442 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 $n_{i+1}$.\n\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0448\u0430\u0433\u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u043d\u0435 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u0440\u0438\u0448\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 -1. \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0448\u0430\u0433 \u043f\u043e\u0438\u0441\u043a\u0430, \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0439 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0448\u0430\u0433\u043e\u043c \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u044b $n_i$ \u0438 \u043f\u0435\u0440\u0432\u044b\u043c \u0448\u0430\u0433\u043e\u043c \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u044b $n_{i+1}$.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0415\u0441\u043b\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u0430, \u0442\u043e \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u044b $n_i$ \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0436\u0430\u0442\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0442\u0435\u0445 \u043c\u0435\u0441\u0442\u0430\u0445, \u0433\u0434\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b $n_i$ \u043d\u0430\u0439\u0434\u0435\u043d\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\n8314\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\n1\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\n8314 -> 9 -> 16 -> 36 -> 81 -> 144 -> 289 -> 512 -> 625 -> 676 -> 729 -> 832 -> 927 -> 936 ->...\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\n364\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\n3\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435:\n\n364 -> 36 -> 24 -> 9 -> 4 -> 1 -> 1 -> 4 -> 9 -> 36 -> 36 -> 36 ->...\n\n\u041f\u0440\u0438\u043c\u0435\u0440 3.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\n3333\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\n-1\n\n\n\u0422\u0435\u0441\u0442 1\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n8314\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n2\n\n\u0422\u0435\u0441\u0442 2\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n625\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n0\n\n\u0422\u0435\u0441\u0442 3\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n444\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1\n\n\u0422\u0435\u0441\u0442 4\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8314') == '2'\nassert solution('625') == '0'\nassert solution('333') == '-1'\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == '120'\n\"\"\"\nimport math"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"6\") == \"120\"\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '4'\nassert solution('6') == '120'\nprint(solution(input()))\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\n\"\"\"\nimport sys\nfrom math import gcd"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"6\") == \"120\"\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"6\") == \"120\"\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\n\"\"\"\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('6') == '120'\n\nprint(solution('2'))\nprint(solution('3'))\nprint(solution('6'))\n\nprint(solution('2'))\nprint(solution('3'))\nprint(solution('6'))\n\n\"\"\""
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\n\"\"\"\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABABBBACFEYUKOTT\") == 4\n\"\"\""
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABABBBACFEYUKOTT\") == 4\nprint(solution(\"ABABBBACFEYUKOTT\"))"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\nassert solution('AAA') == 1\n\nprint(solution('ABABBBACFEYUKOTT'))\nprint(solution('AAA'))\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABABBBACFEYUKOTT\") == \"4\"\nprint(solution(\"AAA\"))"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABABBBACFEYUKOTT\") == 4\nprint(solution(\"AAA\"))\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABABBBACFEYUKOTT\") == 4\nassert solution(\"AAA\") == 1\n\"\"\""
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\n\"\"\""
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\nassert solution('AAA') == 1\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABABBBACFEYUKOTT') == 4\n\"\"\""
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABABBBACFEYUKOTT\") == 4\nassert solution(\"AAA\") == 1\n\"\"\""
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    [1, 7, 11, 5]\n) == 'YES'\nassert solution(\n    [7, 3, 2, 5]\n) == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 7 11 5\") == \"YES\"\nassert solution(\"7 3 2 5\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 7 11 5\") == \"YES\"\nassert solution(\"7 3 2 5\") == \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 7 11 5\") == 'YES'\nassert solution(\"7 3 2 5\") == 'NO'\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 7 11 5\") == \"YES\"\nassert solution(\"7 3 2 5\") == \"NO\"\nassert solution(\"4 3 4 3\") == \"YES\"\nassert solution(\"2 3 4 5\") == \"YES\"\nassert solution(\"7 4 4 2\") == \"NO\"\n\n\"\"\"\n\n\"\"\"\nWrite a program that finds all pairs of integers $(a, b)$ such that $a$ and $b$ are coprime and $a < b$, and $a^2 + b^2 = n$, and $n$ is given.\n\n-----Input-----\n\nThe only line of the input contains one integer $n$, which is given in the example.\n\n-----Output-----\n\nPrint all pairs of integers $(a, b)$ such that $a$ and $b$ are coprime and $a < b$, and $a^2 + b^2 = n$. Each pair should be printed in a separate line. If there are no such pairs, print \"NO\".\n\n-----Example-----\nInput\n\n9\n\nOutput\n\n(3, 4)\n(2, 5)\n\n-----Note-----\n\nIn the example, there are two pairs (3, 4) and (2, 5).\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 7 11 5\") == 'YES'\nassert solution(\"7 3 2 5\") == 'NO'\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 7 11 5\") == \"YES\"\nassert solution(\"7 3 2 5\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 7 11 5') == 'YES'\nassert solution('7 3 2 5') == 'NO'\n\"\"\""
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 7 11 5''') == \"YES\"\nassert solution('''7 3 2 5''') == \"NO\""
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 3 4') == 'YES'\nassert solution('7 3 2 5') == 'NO'\nassert solution('1 7 3 4') == 'YES'\nassert solution('2 1 4 2') == 'YES'\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n141 592 653') == '653 733'\nassert solution('5\\n10 21 10 21 10') == '31 41'\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n141 592 653\") == \"653 733\"\nassert solution(\"5\\n10 21 10 21 10\") == \"31 41\"\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n141 592 653\") == \"653 733\"\n\"\"\"\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n141 592 653\") == \"653 733\"\nassert solution(\"5\\n10 21 10 21 10\") == \"31 41\"\n\"\"\"\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n141 592 653\") == \"653 733\"\nassert solution(\"5\\n10 21 10 21 10\") == \"31 41\"\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n141 592 653\") == \"653 733\"\nassert solution(\"5\\n10 21 10 21 10\") == \"31 41\"\nprint(\"Passed all test cases!\")\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"141 592 653\") == \"653 733\"\nassert solution(\"10 21 10 21 10\") == \"31 41\"\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n141 592 653\") == \"653 733\"\nassert solution(\"5\\n10 21 10 21 10\") == \"31 41\"\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"141 592 653\") == \"653 733\"\nassert solution(\"5 21 10 21 10\") == \"31 41\""
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n1\n2\n3\n4''') == '1\\n4'\nassert solution('''5\n1\n2\n3\n4\n5''') == '3\\n15'\nassert solution('''6\n1\n2\n3\n4\n5\n6''') == '3\\n9'\nassert solution('''8\n1\n2\n3\n4\n5\n6\n7\n8''') == '3\\n15'\nassert solution('''10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '5\\n25'\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 6 8\") == \"2\"\nassert solution(\"6\\n2 4 8 6 10 18\") == \"3\"\nassert solution(\"3\\n3 6 5\") == \"1\"\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 6 8') == '2'\nassert solution('3\\n3 6 5') == '-1'\nassert solution('6\\n2 4 8 6 10 18') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 6 8\") == \"2\"\nassert solution(\"3\\n3 6 5\") == \"-1\"\nassert solution(\"6\\n2 4 8 6 10 18\") == \"3\"\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 6 8') == '2'\n\"\"\"\n\nimport itertools\nimport math\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 6 8\") == 2\n\"\"\"\n\nn = int(input())\n\na = [int(i) for i in input().split()]\n\narr = [0] * n\n\nfor i in range(n):\n    arr[i] = i + 1\n\nwhile True:\n    max_ind = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[max_ind]:\n            max_ind = i\n    if a[max_ind] > 0:\n        if a[max_ind] == arr[max_ind]:\n            print(max_ind + 1)\n            break\n        else:\n            print(-1)\n            break\n    else:\n        print(-1)\n        break\n    a[max_ind] -= 1\n    for i in range(n):\n        if arr[i] > arr[max_ind]:\n            arr[i] -= 1\n    \n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 6 8') == 2\nassert solution('3\\n3 6 5') == -1\nassert solution('6\\n2 4 8 6 10 18') == 3\n\n\n\n-----\n-----\n\n\n-----\n\"\"\"\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 3 6 8\") == 2\nassert solution(\"3 6 5\") == -1\nassert solution(\"6 2 4 8 6 10 18\") == 3"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 6 8\") == \"2\"\nassert solution(\"3\\n3 6 5\") == \"-1\"\nassert solution(\"6\\n2 4 8 6 10 18\") == \"3\"\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 6 8') == '2'\nassert solution('3\\n3 6 5') == '-1'\nassert solution('6\\n2 4 8 6 10 18') == '3'\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 6 8\") == \"2\"\nassert solution(\"3\\n3 6 5\") == \"-1\"\nassert solution(\"6\\n2 4 8 6 10 18\") == \"3\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 8\") == \"Bob\"\nassert solution(\"3 1 4 1\") == \"Alice\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''8 8\n''') == 'Bob'\nassert solution('''4 1 4 1\n''') == 'Alice'\nassert solution('''3 1 4 1\n''') == 'Alice'\nassert solution('''4 2 6 2\n''') == 'Alice'\nassert solution('''4 1 5 2\n''') == 'Bob'\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"2\", \"3\", \"4\", \"1\", \"2\"]) == \"Alice\"\nassert solution([\"1\", \"2\", \"4\", \"2\"]) == \"Bob\"\nassert solution([\"2\", \"4\", \"2\"]) == \"Bob\"\nassert solution([\"2\", \"4\", \"2\"]) == \"Bob\"\nassert solution([\"1\", \"1\", \"2\"]) == \"Alice\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Bob'\nassert solution('4 4') == 'Bob'\nassert solution('3 1 4 1') == 'Alice'\nassert solution('4 4') == 'Bob'\nassert solution('2 2') == 'Alice'\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 8') == 'Bob'\nassert solution('3 1 4 1') == 'Alice'\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 8\") == \"Bob\"\nassert solution(\"4 1 4 1\") == \"Alice\"\n\n\"\"\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 8\") == \"Bob\"\nassert solution(\"4 1 4 1\") == \"Alice\"\n\n\n-----"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2) == \"Bob\"\nassert solution(4) == \"Alice\"\n\"\"\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n8 8\") == \"Bob\"\nassert solution(\"4\\n3 1 4 1\") == \"Alice\""
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 4 1\") == \"Bob\"\nassert solution(\"4 1 3 1\") == \"Alice\"\nassert solution(\"8 8\") == \"Bob\"\nassert solution(\"3 1 4 1\") == \"Alice\"\nassert solution(\"4 1 3 1\") == \"Alice\"\n\n\"\"\""
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 3 2 1') == 'YES'"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 3 2 1') == 'YES'\nassert solution('5\\n1 2 3 4 5') == 'NO'\nassert solution('3\\n1 3 5') == 'NO'\n\n\"\"\""
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"5\\n1 3 3 2 1\") == \"YES\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 3 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"2\\n1 1\") == \"YES\"\nassert solution(\"2\\n2 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 3 3 2 1\") == \"YES\"\nassert solution(\"5 1 2 3 4 5\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 2 3 1\") == \"YES\"\nassert solution(\"5 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 3 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 3 2 1') == 'YES'\nassert solution('1 2 3 4 5') == 'NO'"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 3 2 1\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\nassert solution(\"5 1 1 5 1\") == \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 3 2 1\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ababa') == 2\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ababa') == 2\n\"\"\""
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ababa') == 2\n\"\"\""
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ababa\") == 2\n\"\"\""
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ababa\") == \"2\"\n\"\"\""
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ababa\") == 2\nassert solution(\"z\") == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ababa') == 2\n\"\"\"\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ababa\") == 2\nassert solution(\"baabba\") == 2\nassert solution(\"abcabcbb\") == 3\nassert solution(\"aaaa\") == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ababa\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 ababa\") == \"2\"\nassert solution(\"1 ababa\") == \"0\"\n\"\"\""
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 5\") == \"3\"\nassert solution(\"6 7\") == \"5\"\n\n\"\"\"\n\nimport sys\nimport math\n\nn, target = [int(x) for x in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 5\") == \"3\""
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2') == '2'\nassert solution('8 5') == '3'\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 5\") == \"3\"\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 5\") == \"3\"\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 5\") == \"3\"\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 5\") == \"3\"\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"100 5\") == \"10\"\nassert solution(\"14 1\") == \"13\"\nassert solution(\"6 1\") == \"3\"\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('4 2') == '2'\nassert solution('8 5') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n2 1\") == \"YES\"\nassert solution(\"4 3\\n2 1 2 1\") == \"NO\"\nassert solution(\"4 3\\n2 2 1\") == \"NO\"\nassert solution(\"5 5\\n2 1 1 2 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 1') == 'NO'\nassert solution('5 3\\n2 2 2 3 2 1') == 'YES'\n\nprint(solution('2 3\\n1 1\\n2 2'))\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n5 2\n1 1 2 2 1\n1 2\n    \"\"\") == \"YES\"\n\nassert solution(\n    \"\"\"\n7 2\n1 1 2 2 2 1 1\n1 2\n    \"\"\") == \"NO\"\n\nassert solution(\n    \"\"\"\n6 3\n1 1 2 2 2 1\n1 2\n3 3\n\nOutput\nYES\n\"\"\"\n) == \"YES\"\n\nassert solution(\n    \"\"\"\n7 4\n1 1 2 2 2 1 1\n1 2\n3 3\n\nOutput\nNO\n\"\"\"\n) == \"NO\"\n\nassert solution(\n    \"\"\"\n7 1\n1 1 2 2 2 1 1\n1\n\nOutput\nYES\n\"\"\"\n) == \"YES\""
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 2 1\") == \"YES\"\nassert solution(\"1 2 1 2\") == \"NO\"\n\nassert solution(\"2 2 2\") == \"YES\"\nassert solution(\"2 2 3\") == \"NO\"\n\nassert solution(\"2 2 1\") == \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 1 2 2 1\\n1 2') == 'YES'\nassert solution('5 2\\n1 2 2 1 1\\n1 2') == 'NO'\nassert solution('5 2\\n2 2 1 1 2\\n1 2') == 'NO'\nassert solution('5 2\\n2 2 1 2 1\\n1 2') == 'YES'\nassert solution('5 2\\n1 1 1 1 1\\n1 2') == 'YES'\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('3 2\\n1 2 1\\n1') == 'YES'\nassert solution('6 2\\n1 2 2 2 1 1\\n1') == 'NO'\n\"\"\""
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 2 1\") == \"YES\"\nassert solution(\"1 2 2 1 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 2\n1 1 2 2 1\"\"\") == 'YES'\nassert solution(\"\"\"5 2\n1 1 2 2 2\"\"\") == 'NO'\nassert solution(\"\"\"5 2\n3 2 1 2 1\"\"\") == 'YES'\nassert solution(\"\"\"5 2\n1 2 2 2 1\"\"\") == 'NO'\n\"\"\""
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 1\\n1 1 2 2 3\\n\") == \"NO\"\nassert solution(\"5 2\\n1 1 1 1\\n\") == \"YES\"\nassert solution(\"6 3\\n1 2 2 2 2 1 2\\n\") == \"YES\"\nassert solution(\"4 2\\n1 2 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == 'NO'\nassert solution('1 2 1') == 'YES'\nassert solution('1 2 2') == 'YES'\nassert solution('1 1 1') == 'YES'\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 5\\n2 1\\n4 2\") == \"Mishka\"\nassert solution(\"2\\n6 1\\n1 6\") == \"Friendship is magic!^^\"\nassert solution(\"3\\n1 5\\n3 3\\n2 2\") == \"Chris\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n2 1\\n4 2\") == \"Mishka\"\nassert solution(\"2\\n6 1\\n1 6\") == \"Friendship is magic!\"\nassert solution(\"3\\n1 5\\n3 3\\n2 2\") == \"Chris\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 1\\n4 2\") == \"Mishka\"\nassert solution(\"1 5\\n3 3\\n2 2\") == \"Friendship is magic!\"\nassert solution(\"3 5\\n1 6\\n4 2\") == \"Chris\"\nassert solution(\"3 5\\n6 1\\n2 2\") == \"Chris\"\nassert solution(\"3 5\\n6 1\\n2 1\") == \"Mishka\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n3 3\\n1 6\") == \"Chris\"\nassert solution(\"3 5\\n2 1\\n4 2\") == \"Mishka\"\nassert solution(\"3 5\\n1 5\\n2 2\") == \"Friendship is magic!\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 1\\n4 2\") == \"Mishka\"\n\"\"\""
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5\\n2 1\\n4 2\\n') == 'Mishka'\nassert solution('2\\n6 1\\n1 6\\n') == 'Friendship is magic!^^'\nassert solution('3\\n1 5\\n3 3\\n2 2\\n') == 'Chris'"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"Mishka\"\nassert solution(\"2 1\") == \"Friendship is magic!^^\"\nassert solution(\"3 3\") == \"Chris\"\n\"\"\"\n\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5\\n2 1\\n4 2') == 'Mishka'\nassert solution('2\\n6 1\\n1 6') == 'Friendship is magic!^^'\nassert solution('3\\n1 5\\n3 3\\n2 2') == 'Chris'\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n6 1\\n1 6\\n') == 'Friendship is magic!^^'\nassert solution('2\\n6 1\\n1 6\\n') == 'Chris'\nassert solution('3\\n1 5\\n3 3\\n2 2\\n') == 'Mishka'\nassert solution('3\\n1 5\\n3 3\\n2 2\\n') == 'Mishka'\n\n-----Problem-----\n\nMishka is a little polar bear. As known, little bears loves spending their free time playing dice for chocolates. Once in a wonderful sunny morning, walking around blocks of ice, Mishka met her friend Chris, and they started playing the game.\n\nRules of the game are very simple: at first number of rounds n is defined. In every round each of the players throws a cubical dice with distinct numbers from 1 to 6 written on its faces. Player, whose value after throwing the dice is greater, wins the round. In case if player dice values are equal, no one of them is a winner.\n\nIn average, player, who won most of the rounds, is the winner of the game. In case if two players won the same number of rounds, the result of the game is draw.\n\nMishka is still very little and can't count wins and losses, so she asked you to watch their game and determine its result. Please help her!\n\n\n-----Input-----\n\nThe first line of the input contains single integer n n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of game rounds.\n\nThe next n lines contains rounds description. i-th of them contains pair of integers m_{i} and c_{i} (1 \u2264 m_{i},  c_{i} \u2264 6)\u00a0\u2014 values on dice upper face after Mishka's and Chris' throws in i-th round respectively.\n\n\n-----Output-----\n\nIf Mishka is the winner of the game, print \"Mishka\" (without quotes) in the only line.\n\nIf Chris is the winner of the game, print \"Chris\" (without quotes) in the only line.\n\nIf the result of the game is draw, print \"Friendship is magic!^^\" (without quotes) in the only line.\n\n\n-----Examples-----\nInput\n3\n3 5\n2 1\n4 2\n\nOutput\nMishka\nInput\n2\n6 1\n1 6\n\nOutput\nFriendship is magic!^^\nInput\n3\n1 5\n3 3\n2 2\n\nOutput\nChris\n\n\n-----Note-----\n\nIn the first sample case Mishka loses the first round, but wins second and third rounds and thus she is the winner of the game.\n\nIn the second sample case Mishka wins the first round, Chris wins the second round, and the game ends with draw with score 1:1.\n\nIn the third sample case Chris wins the first round, but there is no winner of the next two rounds. The winner of the game is Chris.\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == 'Mishka'\nassert solution(2) == 'Chris'\nassert solution(3) == 'Friendship is magic!'\n\n\"\"\"\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n111\\n1*1\\n111\\n\") == \"YES\"\nassert solution(\"2 4\\n*.*.\\n1211\\n\") == \"NO\"\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1*1\\n111\\n\") == \"YES\"\nassert solution(\"2 4\\n*.*.\\n1211\\n\") == \"NO\"\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n111\\n1*1\\n111\") == 'YES'\nassert solution(\"2 4\\n*.*.\\n1211\") == 'NO'"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1*1\\n111\") == \"YES\"\nassert solution(\"2 4\\n1211\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n111\\n1*1\\n111\\n') == 'YES'\nassert solution('2 4\\n*.*.\\n1211\\n') == 'NO'\nassert solution('1 1\\n1*1\\n1*1\\n') == 'YES'"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n111\\n1*1\\n111') == 'YES'\nassert solution('2 4\\n*.*.\\n1211') == 'NO'\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n111\\n1*1\\n111\") == 'YES'\nassert solution(\"2 4\\n*.*.\\n1211\") == 'NO'\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n111\\n1*1\\n111\") == \"YES\"\nassert solution(\"2 4\\n*.*.\\n1211\") == \"NO\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".*.*\") == \"YES\"\nassert solution(\"1211\") == \"NO\""
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"1*1\\n\"\n    \"111\\n\"\n) == \"YES\"\nassert solution(\n    \"2 4\\n\"\n    \"*.*.\\n\"\n    \"1211\\n\"\n) == \"NO\"\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"68\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(68) == 3\n\"\"\"\n\nn = int(stdin)\nk = 0\nwhile n > 0:\n    k += 1\n    n = n//10\nprint(k)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('68') == '3'\nassert solution('12') == '2'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('68') == 3\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"68\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"76\") == \"5\"\nassert solution(\"1234567890\") == \"9\"\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('68') == '3'\nassert solution('97') == '7'\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"16\") == \"4\"\nassert solution(\"18\") == \"5\"\nassert solution(\"36\") == \"9\"\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('68') == '3'\nassert solution('97') == '9'\n\"\"\""
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('68') == 3\nassert solution('5') == 2\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(68) == 3\nassert solution(72) == 2\nassert solution(19) == 1\n\"\"\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-o-o--\") == \"YES\"\nassert solution(\"-o---\") == \"YES\"\nassert solution(\"ooo\") == \"YES\"\n\"\"\""
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-oo-o--\") == \"YES\"\nassert solution(\"-o---\") == \"YES\"\nassert solution(\"ooo\") == \"YES\"\nassert solution(\"-o---o-\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('-o---o-') == 'YES'\nassert solution('ooo') == 'YES'\nassert solution('-o-o--') == 'YES'\nassert solution('--') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-o--o--\") == \"YES\"\nassert solution(\"-o---o-\") == \"YES\"\nassert solution(\"ooo\") == \"YES\"\nassert solution(\"-o-o--\") == \"NO\"\nassert solution(\"-o---o\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('-o-o--') == 'YES'\nassert solution('-o---') == 'YES'\nassert solution('ooo') == 'YES'\nassert solution('-o-') == 'NO'\nassert solution('--o') == 'NO'\n\nprint('Test pass.')\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-o--\") == \"YES\"\nassert solution(\"-o-o-\") == \"YES\"\nassert solution(\"-o--o\") == \"NO\"\nassert solution(\"ooo\") == \"YES\"\n\"\"\""
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-o-o-o--') == 'YES'\nassert solution('-o---') == 'YES'\nassert solution('ooo') == 'YES'\nassert solution('o-o-o--') == 'NO'\nassert solution('--o-o-o') == 'NO'\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-o---o-\") == \"YES\"\nassert solution(\"-o-oo-\") == \"NO\"\nassert solution(\"oo-oo\") == \"YES\"\nassert solution(\"ooo\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('-o-o--') == 'YES'\nassert solution('-o---') == 'YES'\nassert solution('ooo') == 'YES'\nassert solution('o-o') == 'NO'\n\"\"\""
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"-o-o--\") == \"YES\"\nassert solution(\"-o---\") == \"YES\"\nassert solution(\"ooo\") == \"YES\"\nassert solution(\"ooo-o-o--\") == \"NO\"\nassert solution(\"-o---o-\") == \"NO\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 6 2') == '2'\nassert solution('3 10 3') == '4'\nassert solution('3 6 1') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 6 2') == '2'\nassert solution('3 10 3') == '4'\nassert solution('3 6 1') == '3'\nassert solution('2 2 1') == '0'\nassert solution('1 3 1') == '2'\n\n\"\"\"\n\nfrom functools import reduce\nimport operator\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 2\") == \"2\"\nassert solution(\"3 10 3\") == \"4\"\nassert solution(\"3 6 1\") == \"3\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6 2') == '2'\nassert solution('3 10 3') == '4'\nassert solution('3 6 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6 2') == 2\nassert solution('3 10 3') == 4\nassert solution('3 6 1') == 3\n\n\"\"\"\nimport sys"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6 2\") == \"2\"\nassert solution(\"3 10 3\") == \"4\"\nassert solution(\"3 6 1\") == \"3\"\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10 3\") == \"4\"\nassert solution(\"4 6 2\") == \"2\"\nassert solution(\"3 10 1\") == \"3\"\nassert solution(\"3 6 1\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6 2') == 2\nassert solution('3 10 3') == 4\nassert solution('3 6 1') == 3\n\"\"\"\n\nfrom math import ceil, log2"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6 2') == '2'\nassert solution('3 10 3') == '4'\nassert solution('3 6 1') == '3'\nassert solution('4 6 6') == '4'\nassert solution('4 10 5') == '5'\n\"\"\"\n\nn, m, k = [int(i) for i in input().split()]\n\nprint((n // k) * (m // k))\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6 2') == '2'\nassert solution('3 10 3') == '4'\nassert solution('3 6 1') == '3'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3 10\\n2 -4 15 -3 4 8 3') == '7'\n\"\"\"\nfrom typing import List, Dict"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 1000\\n1 2 3 4\") == \"0\"\nassert solution(\"6 3 1000\\n-5 -2 -3 -4 -6 -1\") == \"0\"\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 3 1000\\n-13 -4 -9 -20 -11') == '0'\nassert solution('10 3 1000\\n2 -4 15 -3 4 8 3') == '7'"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 10\\n2 -4 15 -3 4 8 3\") == \"7\"\nassert solution(\"5 2 1000\\n-13 -4 -9 -20 -11\") == \"0\"\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 1000\") == \"0\"\n\"\"\"\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ncnt = 0\nmax_cnt = 0\n\ni = 0\nj = 0\n\nwhile j < n:\n    if sum(a[i:j+1]) >= k:\n        max_cnt = max(max_cnt, j - i + 1)\n        j += 1\n    else:\n        i += 1\n        if j == i:\n            j += 1\n\nprint(max_cnt)"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 1000\\n-13 -4 -9 -20 -11') == '0'\nassert solution('6 2 1000\\n-10 -3 -10 -7 -8 -1') == '0'\n\"\"\"\n\nn, m, k = [int(x) for x in stdin.split()]\na = [int(x) for x in stdin.split()]"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 10') == '5'\nassert solution('4 3 10') == '6'\nassert solution('4 3 9') == '4'\nassert solution('1 3 10') == '5'\nassert solution('2 4 10') == '4'\n\"\"\"\nfrom sys import stdin\nfrom collections import deque\nfrom math import ceil\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3 10\\n2 -4 15 -3 4 8 3') == '7'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 10\\n2 -4 15 -3 4 8 3\") == \"7\"\n\"\"\"\nimport sys\n\n_, m, k = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\n\nmax_cost = 0\nfor i in range(m):\n    max_cost = max(max_cost, sum(arr[i: i + m]) - k)\n\nprint(max_cost)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(output())"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '1 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0 0\\n1 0\\n0 1\\n0"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 10\") == \"0 1\\n0 10\\n0 0\\n0 9\"\n\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\n\npolyline = []\npolyline.append([0, 0])\n\nfor _ in range(4):\n    x, y = [int(x) for x in input().split()]\n    polyline.append([x, y])\n\npolyline = sorted(polyline, key=lambda p: p[0])"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0\") == \"0 0\"\nassert solution(\"0 10\") == \"0 0\"\nassert solution(\"10 10\") == \"10 9\"\nassert solution(\"0 1\") == \"0 0\"\n\n\"\"\""
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0\\n1 0\") == \"0 1\\n0 10\\n0 0\\n0 9\"\nassert solution(\"3 3\\n1 0 2 1\\n0 1 0 1\\n1 0 2 1\") == \"1 2 1 0 2 1 0 2 1\\n0 1 0 1\\n1 0 2 1 1 1 1 1 1\"\n\"\"\""
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0\\n10 10\") == \"0 0\\n0 9\\n0 0\\n0 0\"\nassert solution(\"5 1\\n1 5\") == \"0 0\\n1 1\\n2 2\\n3 3\\n4 4\"\nassert solution(\"1 1\\n2 2\") == \"0 0\\n0 0\"\nassert solution(\"1 10\\n2 10\") == \"0 0\\n1 0\\n0 0\\n0 9\\n0 0\\n0 0\\n0 0\"\nassert solution(\"9 1\\n9 2\") == \"0 0\\n0 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\"\n\n\"\"\""
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1\\n1 1\") == \"1 1\"\nassert solution(\"1 1\") == \"0 0\"\nassert solution(\"1 1\\n0 1\") == \"1 0\"\nassert solution(\"0 0\") == \"0 0\"\n\"\"\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''0 1\n1 1\n''') == '1 1\\n0 0\\n1 0\\n0 1\\n'\n\n\"\"\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == expected_result\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''1 1''') == '''1 1\\n0 0\\n1 0\\n0 1\\n0 10\\n0 0\\n0 9'''\nassert solution(\n'''0 10''') == '''0 1\\n0 10\\n0 0\\n0 9\\n0 1\\n0 10\\n0 0'''"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''0 0\n0 10\n1 1''') == '0 0\\n0 1\\n1 1'\nassert solution('''0 0\n1 1\n0 0\n1 0\n0 10\n0 0\n1 1\n1 1''') == '0 0\\n1 0\\n0 0\\n0 9\\n1 1\\n1 1'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"003512\") == \"30021\"\nprint(solution(\"199966633300\"))\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\nInput\n3512\n021\n\nOutput\n30021\n\nInput\n99999\n63\n\nOutput\n99998\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1234') == '12345'\nassert solution('123456') == '654321'\nassert solution('9999') == '99999'\nassert solution('20000') == '2000'\nassert solution('123456789') == '987654321'\n\"\"\"\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"99999\") == \"99999\"\nassert solution(\"999992222\") == \"99999\"\nassert solution(\"12345\") == \"12345\"\nassert solution(\"123465\") == \"123465\"\nassert solution(\"1234\") == \"1234\"\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"003512\") == \"30021\"\nassert solution(\"199966633300\") == \"3036366999\"\n\nprint(solution(\"003512\"))\nprint(solution(\"199966633300\"))\n\n\"\"\"\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"003512\") == \"30021\"\n\"\"\"\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('100000101') == '1'\nassert solution('13579') == '12345'\nassert solution('5611') == '56611'\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('003512') == '30021'\nassert solution('199966633300') == '3036366999'"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"003512\") == \"30021\"\nassert solution(\"021\") == \"21\"\n\"\"\"\n\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n\n    def test_solution_1(self):\n        self.assertEqual(solution(\"003512\"), \"30021\")\n\n    def test_solution_2(self):\n        self.assertEqual(solution(\"199966633300\"), \"3036366999\")"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('003512') == '30021'\n\"\"\""
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 1 3\\n2') == 'Correct'\nassert solution('3 1 1 3\\n2') == 'Incorrect'\nassert solution('2 1 1 3\\n1') == 'Incorrect'\nassert solution('2 1 1 2\\n2') == 'Correct'\nassert solution('1 1 1 1\\n1') == 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1 3') == 'Correct'\nassert solution('3 1 1 3') == 'Incorrect'\n\"\"\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 3\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Incorrect\"\nassert solution(\"2 1 1 3\") == \"Correct\""
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1 3') == 'Correct'\nassert solution('3 1 1 3') == 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 3\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Incorrect\""
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Incorrect\"\n\"\"\"\nfrom collections import Counter\n\nn, m, min_, max_ = [int(x) for x in input().split()]\n\ntemp_ = [int(x) for x in input().split()]\n\ntemp = Counter(temp_)\n\ntemp_ = list(temp_)\ntemp_.sort()"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 2\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 1 1 2\n1''') == \"Correct\"\nassert solution('''3 1 1 3\n2''') == \"Incorrect\"\nassert solution('''2 1 1 3\n2''') == \"Incorrect\"\nassert solution('''3 1 1 3\n2''') == \"Correct\"\nassert solution('''2 1 1 3\n2\n2\n3\n3''') == \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1, 1, 1, 2) == \"Correct\"\nassert solution(2, 1, 1, 2) == \"Correct\"\nassert solution(2, 1, 1, 3) == \"Incorrect\"\nassert solution(3, 1, 1, 3) == \"Incorrect\"\nassert solution(1, 2, 1, 3) == \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 3\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Incorrect\"\n\"\"\"\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '0 1 2 3 4 5'\nassert solution('1') == '0'\nassert solution('8') == '0 1 2 3 4 5 6 7 8'\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"5\"\n\"\"\""
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"5\") == \"5 6 7 8 9\"\nassert solution(\"10\") == \"0 1 2 3 4 5 6 7 8 9 10\""
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0\") == '5\\n5 6 7 8 9'\nassert solution(\"2\") == '0'\nassert solution(\"1\") == '5\\n5 6 7 8 9'\nassert solution(\"3\") == '0'\nassert solution(\"100\") == '5\\n5 6 7 8 9'\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('5') == '5 6 7 8 9'\nassert solution('11') == '0'\nassert solution('23') == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23'\n\"\"\"\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '5'\nassert solution('5') == '0'\nassert solution('100') == '5 6 7 8 9'\n\"\"\""
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"5 6 7 8 9\\n\"\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '5'\nassert solution('5') == '0'\n\"\"\""
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '5'\nassert solution('5') == '0'\nassert solution('4') == '5 6 7 8 9'\nassert solution('2') == '0'\nassert solution('6') == '5 6 7 8 9'\n\"\"\""
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '5\\n5 6 7 8 9'\nassert solution('5') == '0\\n0 1 2 3 4'\n\"\"\""
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n''') == '3 3 3'\n\nassert solution('''\n2 3 2\n2 1\n1 2 3\n1 2 2\n2 2 1\n''') == '2 2'\n\nassert solution('''\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n''') == '3 3 3'\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 2\\n2 1\\n1 2 3\\n1 2 2\") == \"2 2\"\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\\n2 1\\n1 2 3\\n1 2 2\\n2 2 1\") == \"2 2\"\nassert solution(\"4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\") == \"3 3 3\"\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 2\\n2 1\\n1 2 3\\n1 2 2') == '2 2'\nassert solution('4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3') == '3 3 3'\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\\n2 1\\n1 2 3\\n1 2 2\\n2 2 1\") == \"2 2\"\nassert solution(\"4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\") == \"3 3 3\""
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 2\\n2 1\\n1 2 3\\n1 2 2\\n2 2 1') == '2 2'\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n\"\"\") == \"\"\"\n2 2\n3 3 3\n\"\"\"\n\nassert solution(\"\"\"\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n\"\"\") == \"\"\"\n3 3 3\n\"\"\"\n\nassert solution(\"\"\"\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n\"\"\") == \"\"\"\n2 2\n3 3 3\n\"\"\"\n\nassert solution(\"\"\"\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n\"\"\") == \"\"\"\n2 2\n3 3 3\n\"\"\"\n\nassert solution(\"\"\"\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n\"\"\") == \"\"\"\n2 2\n3 3 3\n\"\"\""
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3'\n) == '3 3 3'\nassert solution(\n    '4 6 3\\n1 2 3\\n1 2 6\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\\n1 4 6'\n) == '1 1 2'\nassert solution(\n    '4 6 3\\n1 2 3\\n1 2 6\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\\n1 4 6'\n) == '2 1 3'\n\n\"\"\"\n\n\"\"\"\n<Notes on solution>\n\n[1] This is the Floyd Warshall Algorithm in disguise!\n\nTo understand it, first the following definitions are needed:\n\nThis is the disjoint set union. A disjoint set is a set of disjoint sets,\nthat is, if two disjoint sets have an intersection, the sets are just sets.\n\nThe union operation is a little bit different from what you may have\nlearned: instead of combining two disjoint sets, they are combined into one\nnew set. This is called the disjoint set union.\n\nTo represent this union operation, we will need to use a tree. \nEach node will be assigned a number.\n\nThe root of the tree is the number 1.\n\nFor a set of nodes {i_1, i_2, \\ldots, i_n}, there is a parent in the tree\nthat is equal to the root of the tree that contains the node with the least\nnumber.\n\nFor example, the root of the set {2, 5, 7, 8} is the root with the least\nnumber in the tree.\n\nAnother way to say this: the parent of node 2, 5, 7, 8 is the root with the\nleast number.\n\nThe goal of the union operation is to combine all the disjoint sets into\none disjoint set.\n\nThe union operation is called \"merge\" because the two sets that are combined\nare the same set.\n\nThe disjoint set union operation is called \"find\".\n\nSo, the union operation (find) is a set operation and the disjoint set union\n(merge) is a set operation.\n\nThe union operation is defined as:\n\nparent[i] = j if: j < i and sets[j] contains the element i, where j is the\nleast number in the tree\n\nparent[i] = i if i is not in any set, but is the root of a tree\n\nThe union operation is defined as:\n\nsets[i] = {j} where: j < i and sets[j] contains the element i, where j is the\nleast number in the tree\n\nSo, the disjoint set union (merge) is defined as:\n\nsets[i] = sets[j] where: j < i and sets[j] contains the element i\n\nSo, the disjoint set union (merge) is defined as:\n\nsets[i] = {i} where i is not in any set, but is the root of a tree\n\nSo, the disjoint set union (merge) is defined as:\n\nsets[i] = {i} where i is not in any set, but is the root of a tree\n\nThis is a disjoint set union, which is also known as the union by rank.\n\nThis is also called the union by rank.\n\nLet's try to understand what is going on here.\n\nTo see that this works, let's imagine we have a graph where the edge between\nany two nodes is of the same weight.\n\nWe can perform a disjoint set union (merge) to combine the two sets that have\nthe same root.\n\nSo, if we have two sets that have the same root, i.e., one is the parent of\nanother, then we can say that the nodes in the parent set are the same and\nthose in the child set are different, so we can say that nodes in the parent\nset are in the same set, and we can say that nodes in the child set are in\nthe same set, but in the parent set.\n\nThis works because we have the same weight for all the edges connecting\nany two nodes.\n\nIf the graph is not connected, then we will have more than one set that has\nthe same root.\n\nSo, let's say we have two sets where there is an edge between node 1 and node\n6 and an edge between node 2 and node 5.\n\nWe can say that node 1 is in the first set, and node 2 is in the first set,\nand node 6 is in the second set, and node 5 is in the second set.\n\nNow we can say that nodes in the second set are in the same set, and nodes\nin the first set are in the same set, but in the second set.\n\nThis is how the union operation works.\n\nNow, if we have three sets, the disjoint set union will make some changes.\n\nIn this case, we will have four sets.\n\nTo get the parent of node 2, we will have to go to the node 1, and then go\none step further to find the root of the tree with the least number.\n\nIn this case, node 1 is in the first set, and node 2 is in the first set,\nand node 6 is in the second set, and node 5 is in the second set.\n\nIn the following picture, we can see the disjoint set union operation.\n\nIn the same way, if we have many edges between the same nodes, we will have\nmany sets, but the disjoint set union operation will make it to a single set.\n\nTo be able to understand what is happening, let's go through the process.\n\nTo see this, let's see what happens when we have one node.\n\nIn this case, we"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\") == \"3 3 3\""
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n1 2 3\") == \"2 2\"\nassert solution(\"2 2\\n1 2 3\") == \"3 3\"\nassert solution(\"3 2\\n1 2 3\") == \"3 3\"\nassert solution(\"4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\") == \"3 3 3\"\nassert solution(\"4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\\n1 1\") == \"3 3 3\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2\") == \"1\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2') == '1'\nassert solution('1\\n1') == '0'\nassert solution('1\\n0') == '2'\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2') == '1'\nassert solution('1\\n1') == '0'\nassert solution('7\\n2') == '0'\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n2''') == '1'\nassert solution('''1\n1''') == '0'\n\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2') == '1'\nassert solution('1\\n1') == '0'\n\"\"\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2') == '1'\n\"\"\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2') == '1'\nassert solution('1\\n1') == '0'\nassert solution('1\\n0') == '2'\n\"\"\""
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\n\n\"\"\"\n\nimport unittest\nimport sys\n\nsys.setrecursionlimit(2000)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2') == '1'\nassert solution('1\\n1') == '0'\n\n\"\"\"\n\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == \"YES\"\nassert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == 'YES'\n\nassert solution(\"4\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\") == 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 5 5 1\") == 'YES'\nassert solution(\"3\\n2 5 5 4\") == 'YES'\nassert solution(\"3\\n2 5 5 2\") == 'NO'\nassert solution(\"2\\n2 2 3 3\") == 'NO'\nassert solution(\"3\\n0 0 2 3\") == 'YES'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == \"YES\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == \"YES\"\nassert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == \"YES\"\nassert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\") == \"NO\"\n\"\"\"\nimport sys"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\\n\") == \"YES\"\n\nassert solution(\"4\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n\") == \"NO\"\n\nassert solution(\"1\\n0 0 2 3\\n0 3 3 5\\n\") == \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3') == 'YES'\nassert solution('4\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5') == 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\n\"\"\"\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3 5\") == 'YES'\nassert solution(\"1 1 1 1\") == 'YES'\nassert solution(\"0 0 5 5\") == 'NO'\nassert solution(\"0 0 5 2\") == 'NO'"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\\n\") == \"YES\"\nassert solution(\"4\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n\") == \"NO\"\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 9\") == \"1\"\nassert solution(\"12 1\") == \"3\"\nassert solution(\"25 20\") == \"0\"\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 1\") == \"3\"\nassert solution(\"25 20\") == \"0\"\nassert solution(\"10 9\") == \"1\"\n\n\n\n\"\"\""
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 1') == '1'\nassert solution('25 20') == '0'\nassert solution('10 9') == '1'\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 9\\n12 1') == '3'\nassert solution('25 20\\n') == '0'\nassert solution('10 9\\n12 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 1\") == \"3\"\nassert solution(\"25 20\") == \"0\"\nassert solution(\"10 9\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12 1') == '3'\nassert solution('25 20') == '0'\nassert solution('10 9') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12 1') == 3\nassert solution('25 20') == 0\nassert solution('10 9') == 1\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 1\") == \"3\"\nassert solution(\"25 20\") == \"0\"\nassert solution(\"10 9\") == \"1\"\n\nprint('The local tests are done. Try this online judge for more: '\n    'https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1451')\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 1\") == 3\nassert solution(\"25 20\") == 0\nassert solution(\"10 9\") == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 10\") == \"0\"\nassert solution(\"25 20\") == \"0\"\nassert solution(\"10 9\") == \"1\"\n\nprint(\"Success\")\n\"\"\""
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\") == \"YES\"\nassert solution(\"5\\n0 0\\n1 0\\n2 1\\n1 1\\n2 3\") == \"NO\"\n\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\") == \"YES\"\nassert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\") == \"NO\"\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\") == 'YES'\nassert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0\\n0 1\\n1 1\\n1 -1\\n2 2\") == \"YES\"\nassert solution(\"0 0\\n1 0\\n2 1\\n1 1\\n2 3\") == \"NO\"\n\n-----\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nsys.stdin = open('../input.txt', 'r')\nsys.stdout = open('../output.txt', 'w')"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n0 0\\n0 2\\n1 1\\n2 3\") == \"YES\"\nassert solution(\"1 2\\n0 0\\n0 2\\n1 1\\n2 3\") == \"NO\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0\\n0 1\\n1 1\\n1 -1\\n2 2') == 'YES'\nassert solution('5\\n0 0\\n1 0\\n2 1\\n1 1\\n2 3') == 'NO'\n\"\"\"\n\n\n\n\"\"\"\n\u041e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044f \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u0442\u043e\u0447\u043e\u043a \u0437\u0430\u0434\u0430\u043d\u043e\u0457 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043d\u0430 \u043f\u043b\u043e\u0449\u0438\u043d\u0456.\n\n\u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0438 \u0442\u043e\u0447\u043e\u043a \u0437\u0430\u0434\u0430\u043d\u043e \u0432\u0432\u043e\u0434\u043e\u043c \u0437 \u0440\u043e\u0437\u0434\u0456\u043b\u043e\u0432\u0438\u043c\u0438 \u043f\u0440\u043e\u0431\u0456\u043b\u0430\u043c\u0438 \u0437 \u0432\u0438\u0441\u043e\u043a\u043e\u044e \u0442\u043e\u0447\u043d\u0456\u0441\u0442\u044e \u0432 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0456 \u0432\u0456\u0434 -1 \u0434\u043e 1.\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u043f\u043e\u0432\u0438\u043d\u043d\u0430 \u0432\u0438\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u0435\u043a\u0440\u0430\u043d \u00abYES\u00bb, \u044f\u043a\u0449\u043e \u0437\u0430\u0434\u0430\u043d\u0456 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442\u044c \u043f\u0440\u044f\u043c\u0438\u043c\u0438, \u0456 \u00abNO\u00bb, \u043a\u043e\u043b\u0438 \u043d\u0456.\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043d\u0435\u043e\u0431\u0445\u0456\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432 \u0434\u0456\u0430\u043f\u0430\u0437\u043e\u043d\u0456 [1, 10^9].\n\n\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0432\u0445\u0456\u0434\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445:\n\n5\n0 0\n0 1\n1 1\n1 -1\n2 2\n\n\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0432\u0438\u0445\u0456\u0434\u043d\u0438\u0445 \u0434\u0430\u043d\u0438\u0445:\nYES\n\n\"\"\""
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\") == \"YES\"\nassert solution(\"5\\n0 0\\n1 0\\n2 1\\n1 1\\n2 3\") == \"NO\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\\n') == 'YES'\nassert solution('5\\n0 0\\n1 0\\n2 1\\n1 1\\n2 3\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\") == \"YES\"\nassert solution(\"5\\n0 0\\n1 0\\n2 1\\n1 1\\n2 3\") == \"NO\"\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\\n') == 'YES'\nassert solution('5\\n0 0\\n0 1\\n1 0\\n1 1\\n1 -1\\n2 2\\n') == 'NO'\nassert solution('5\\n0 0\\n0 1\\n1 0\\n1 1\\n2 2\\n') == 'NO'\nassert solution('5\\n0 0\\n0 1\\n1 0\\n2 2\\n') == 'YES'\nassert solution('5\\n0 0\\n0 1\\n1 0\\n2 2\\n') == 'YES'\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 2 1\") == 6\n\"\"\"\n\nimport sys\n\nfrom collections import deque"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 2 1') == '6'\n\"\"\"\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 1\") == \"6\"\n\"\"\""
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3 3 3 2') == '1'\nassert solution('1 1 1 2') == '31'\nassert solution('2 12 3 1') == '0'\nassert solution('1 2 2 1') == '6'\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 1\") == 6\n\"\"\""
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2 1\") == \"6\"\n\n-----"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2 1\") == \"6\"\nassert solution(\"1 1 1 2\") == \"31\"\nassert solution(\"2 12 3 1\") == \"0\"\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 1\") == \"6\"\n\"\"\"\n\na, b, k, t = map(int, input().split())\nans = 0\nfor i in range(-k, k + 1):\n    for j in range(-k, k + 1):\n        if k == 0 or i * b < k * t or k * t < i * a:\n            continue\n        else:\n            ans += 1\nprint(ans)"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 1\") == \"6\"\nassert solution(\"1 1 1 2\") == \"31\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 2 1') == '6'\n\"\"\"\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 250 185 230\") == \"1 230\"\nassert solution(\"4 250 185 230\") == \"0 230\"\nassert solution(\"2 300 185 230\") == \"2 185 230\"\n\"\"\"\n\n\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 4\n\u0412 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u043d\u0438\u0436\u0435 \u0434\u043e\u0440\u043e\u0433\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0442\u0440\u0438 \u0441\u0442\u0435\u043d\u044b. \u0412\u0441\u0435 \u0446\u0438\u0444\u0440\u044b \u0432 \u043d\u0438\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435. \u0422\u043e \u0435\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0435\u043d\u0430 \u0438\u043c\u0435\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0442\u0440\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0441\u0442\u0430\u0432\u043a\u0438:\n\n\u0441\u0442\u0430\u0432\u043a\u0430 0, \u0435\u0441\u043b\u0438 \u043d\u0438 \u043e\u0434\u043d\u0430 \u0441\u0442\u0435\u043d\u0430 \u043d\u0435 \u0441\u0442\u0430\u0432\u0438\u0442\u044c\n\u0441\u0442\u0430\u0432\u043a\u0430 1, \u0435\u0441\u043b\u0438 \u0441\u0442\u0435\u043d\u0430 \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u043c\u0435\u0441\u0442\u0435\n\u0441\u0442\u0430\u0432\u043a\u0430 2, \u0435\u0441\u043b\u0438 \u0441\u0442\u0435\u043d\u0430 \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u043c\u0435\u0441\u0442\u0435\n\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043e\u0434\u043d\u0443 \u0438\u0437 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0445 \u0441\u0442\u0430\u0432\u043e\u043a, \u0441\u0442\u0430\u0432\u044f \u043d\u0430 \u043f\u0435\u0440\u0432\u0443\u044e, \u0432\u0442\u043e\u0440\u0443\u044e, \u0442\u0440\u0435\u0442\u044c\u044e \u0441\u0442\u0435\u043d\u044b \u0434\u043e\u0440\u043e\u0433\u0438.\n\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0441\u0442\u0430\u0432\u043e\u043a \u0438\u0437 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0441\u0442\u0430\u0432\u043e\u043a, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0434\u043e\u0440\u043e\u0433\u0430 \u043c\u043e\u0436\u043d\u043e \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0441\u0442\u0435\u043d\u044b.\n\n-----Input-----\n\nThe first line contains two space-separated integers n and m (2 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 10^9). The next line contains n space-separated integers a_1, a_2,..., a_n, where a_i (0 \u2264 a_i \u2264 10^9) \u2014 the number of marks on the i-th place.\n\n\n-----Output-----\n\nPrint one line with one integer v (1 \u2264 v \u2264 10^9). The number v is the minimum number of simple marks that one needs to add on the roads so that all marks are placed on the same set of walls.\n\nIf multiple solutions exist, print any of them.\n\nInput\n4 3\n0 1 2 3\n\nOutput\n0\n\nInput\n5 5\n0 1 2 3 4\n\nOutput\n1\n\nInput\n4 4\n0 1 2 3\n\nOutput\n1\n\nInput\n4 1\n1 2 3 4\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first sample there is one simple solution: to add the marks on the first and the last place of the road, because they are the same.\n\nIn the second sample there are no simple solutions: if one tries to add marks on the first place, then the second and the third place will be marked with the same value and the same for the last place.\n\nIn the third sample there are no simple solutions because one tries to add marks on the first and the third place. There is no way to add marks on the second place to make sure that all marks are placed on the same set of walls.\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 300 185 230\") == \"2\"\nassert solution(\"4 250 185 230\") == \"0\"\nassert solution(\"3 250 185 230\") == \"2\"\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 250 185 230\") == \"1\", \"Test 1 Failed\"\nassert solution(\"4 250 185 230\") == \"0\", \"Test 2 Failed\"\nassert solution(\"2 300 185 230\") == \"2\", \"Test 3 Failed\"\n\nprint(\"All tests passed!\")"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 250 185 230\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 250 185 230\") == \"1\"\nassert solution(\"4 250 185 230\") == \"0 2\"\nassert solution(\"2 300 185 230\") == \"2\""
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 300 185 230\\n0 20 185 250\") == '2'\nassert solution(\"2 300 185 230\\n0 300\") == '0'\nassert solution(\"4 250 185 230\\n0 20 185 250\") == '2'\n\n\"\"\"\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 250 185 230\") == \"0\"\nassert solution(\"2 300 185 230\") == \"2\"\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 250 185 230\") == \"1\\n230\"\n\n\"\"\"\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 250 185 230\") == \"1 230\"\nassert solution(\"4 250 185 230\") == \"0 230\"\nassert solution(\"2 300 185 230\") == \"2 185 230\"\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 0\") == \"1\"\nassert solution(\"3 1 2\") == \"1 2\"\nassert solution(\"1 1 0\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1\\n9 7\\n1 4\\n10 7\") == \"3983.539484752\""
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 30\") == \"942477.796077\"\nassert solution(\"4 1\") == \"3983.539484752\"\n\"\"\"\n\nfrom math import *"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 30\\n40 10\\n1 4\\n10 7\") == \"3983.539484752\"\n\"\"\"\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == 6\nassert solution(5) == 9\nassert solution(7) == 7\nassert solution(7) == 7\nassert solution(8) == 10\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n100 30\\n40 10\") == \"942477.796077000\"\nassert solution(\"4\\n1 1\\n9 7\\n1 4\\n10 7\") == \"3983.539484752\"\n\"\"\"\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n100 30\n40 10''') == '942477.796077000'\nassert solution('''4\n1 1\n9 7\n1 4\n10 7''') == '3983.539484752'\n\n\n-----"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 30\\n40 10\\n1 4\\n10 7\\n\") == \"942477.796077000\"\n\"\"\"\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n9 7\\n1 4\\n10 7') == '3983.539484752'\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n') == '1'\nassert solution('1\\n1\\n2\\n') == '2'\nassert solution('1\\n1\\n2\\n3\\n') == '3'\nassert solution('1\\n1\\n2\\n3\\n4\\n') == '4'\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n3 1 2 2 4\") == \"2\"\nassert solution(\"4 5\\n2 3 4 5\") == \"2\"\nassert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"1 1\\n1 1\") == \"1\"\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n3 1 2 2 4') == '2'\nassert solution('4 5\\n2 3 4 5') == '2'"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5 5\n3 1 2 2 4\"\"\") == \"2\"\nassert solution(\"\"\"4 5\n2 3 4 5\"\"\") == \"2\"\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n3 1 2 2 4') == '2'\nassert solution('4 5\\n2 3 4 5') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n3 1 2 2 4\") == 2\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n3 1 2 2 4\") == \"2\"\nassert solution(\"4 5\\n2 3 4 5\") == \"2\"\n\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image]\n\n[Image"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n2 3 4 5\") == 2\nassert solution(\"6 5\\n1 2 2 3 4 5\") == 1\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n3 1 2 2 4\") == \"2\"\n\"\"\"\n\n\"\"\"\nIdea:\n1. Get a sorted list of heights\n2. We want to slice the towers with lowest height and return the number of slices\n\nSlice - Count Slices\n    Cost:\n        total cost of slices\n        num of slices\n\n\"\"\"\nfrom collections import defaultdict\n\nimport sys\n\nINPUT_LINES = list(sys.stdin.read().splitlines())\n\nN_T, K = list(map(int, INPUT_LINES[0].split()))\n\nHEIGHT_L = list(map(int, INPUT_LINES[1].split()))\n\nclass Solution:\n    def getSlicesCount(self, heights, k):\n        heights.sort()\n        cost, curr_cost = 0, 0\n        n = len(heights)\n        i, j = 0, 1\n        while j < n:\n            if heights[j] - heights[i] >= k:\n                curr_cost += j - i\n                i, j = j, j + 1\n            else:\n                j += 1\n            cost += curr_cost\n\n        return cost\n\n\n    def solution(self, stdin: str) -> str:\n        cost = self.getSlicesCount(HEIGHT_L, K)\n        return str(cost)\n\n\ns = Solution()\n\nprint(s.solution(INPUT_LINES[0]))\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n2 3 4 5\") == \"2\"\nassert solution(\"4 5\\n1 2 4 5\") == \"0\"\nassert solution(\"4 5\\n3 2 4 5\") == \"1\"\nassert solution(\"4 5\\n3 1 2 4 5\") == \"1\"\nassert solution(\"4 5\\n3 2 4 1 5\") == \"2\"\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n2 3 4 5') == '2'\nassert solution('5 5\\n3 1 2 2 4') == '2'\nassert solution('5 5\\n2 3 4 5') == '2'\nassert solution('5 5\\n1 1 1 1 1') == '0'\nassert solution('5 5\\n5 5 5 5 5') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 -2 10 -1 4\") == \"6\"\nassert solution(\"5 2 5 3 -30 -30 6 9\") == \"10\"\nassert solution(\"-10 6 -15\") == \"0\"\nassert solution(\"3 -10 6 -15\") == \"0\"\nassert solution(\"5 -2 10 -1 4\") == \"6\"\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 -10 6 -15\") == \"0\"\nassert solution(\"5 -2 10 -1 4\") == \"6\"\nassert solution(\"5 2 5 3 -30 -30 6 9\") == \"10\"\nassert solution(\"8 5 2 5 3 -30 -30 6 9\") == \"10\"\nassert solution(\"3 -10 6 -15\") == \"0\"\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 -2 10 -1 4\") == 6\nassert solution(\"5 2 5 3 -30 -30 6 9\") == 10\nassert solution(\"-10 6 -15\") == 0\n\"\"\"\n\nn = int(stdin.readline().strip())\nlst = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 -2 10 -1 4\") == \"6\"\nassert solution(\"8 5 2 5 3 -30 -30 6 9\") == \"10\"\nassert solution(\"3 -10 6 -15\") == \"0\"\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 -2 10 -1 4\") == 6\nassert solution(\"5 2 5 3 -30 -30 6 9\") == 10\nassert solution(\"-10 6 -15\") == 0\n\n\n\n-----Solution-----"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 -2 10 -1 4\") == 6\nassert solution(\"5 2 5 3 -30 -30 6 9\") == 10\nassert solution(\"-10 6 -15\") == 0\nassert solution(\"8 5 2 5 3 -30 -30 6 9\") == 10\nprint('The solution is correct!')\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 -2 10 -1 4\") == 6\nassert solution(\"5 2 5 3 -30 -30 6 9\") == 10\nassert solution(\"-10 6 -15\") == 0\nassert solution(\"3 -10 -15\") == 0\nassert solution(\"4 2 3 -30 -30 6 9\") == 10\nprint(\"Success\")"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 -2 10 -1 4\") == 6\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 -2 10 -1 4') == 6\nassert solution('8 -10 6 9') == 10\nassert solution('3 -10 6 -15') == 0\nassert solution('8 -10 6 9') == 10\nassert solution('7 -10 6 9') == 8\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 -10 6 -15\") == '0'\nassert solution(\"5 2 5 3 -30 -30 6 9\") == '10'\nassert solution(\"5 -2 10 -1 4\") == '6'\n\n\n\n\"\"\""
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\") == \"NO\"\nassert solution(\"2 2 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 3') == 'YES'\nassert solution('4 2 3') == 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 2 3\") == \"NO\"\nassert solution(\"2 2 2\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"2 2 1\") == \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 2 3\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 2 3\") == \"NO\"\nassert solution(\"1 2 3\") == \"YES\"\nassert solution(\"2 2 2\") == \"NO\"\nassert solution(\"2 1 1\") == \"YES\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 2 3\") == \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 2 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 2 3\") == \"NO\"\nassert solution(\"2 2 3\") == \"YES\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3\") == 'YES'\nassert solution(\"4 2 3\") == 'NO'\nassert solution(\"1 1 2\") == 'NO'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"1 2 1\") == \"YES\"\nassert solution(\"1 1 3\") == \"NO\"\n\n-----\n5 2 1\n1 1 2 2\n0\n1\n3\n1 1 3\n2\n1 2 3\n2 3 2\n0\n1\n3\n2\n3 2\n1 1 3\n0\n1\n3\n2\n3 2\n1 2 3\n2 2 3\n0\n1\n3\n2\n3 2\n1 2 3\n2 2 3\n0\n1\n3\n2\n3 2\n1 1 3\n2\n1 2 3\n1 2 3\n0\n1\n3\n2\n3 2\n0\n1\n3\n2\n3 2\n1 2 3\n0\n1\n3\n2\n3 2\n1 2 3\n2 2 3\n0\n1\n3\n2\n3 2\n1 1 3\n0\n1\n3\n2\n3 2\n1 2 3\n2 2 3\n0\n1\n3\n2\n3 2\n1 1 3\n0\n1\n3\n2\n3 2\n1 2 3\n0\n1\n3\n2\n3 2\n1 2 3\n0\n1\n3\n2\n3 2\n1 1 3\n0\n1\n3\n2\n3 2\n0\n1\n3\n2\n3 2\n1 2 3\n0\n1\n3\n2\n3 2\n0\n1\n3\n2\n3 2\n0\n1\n3\n2\n3 2\n0\n1\n3\n2\n3 2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abaca\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaca\") == 3\nassert solution(\"abcddcba\") == 4\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaca') == 3\nassert solution('abcddcba') == 4\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abaca') == 3\nassert solution('abcddcba') == 4\nprint('test passed')"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''abaca''') == 3\nassert solution('''abcddcba''') == 4\n\"\"\"\n\nfrom functools import reduce\nfrom collections import Counter\n\nn = int(input())\ns = input()\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcddcba\") == 4\n\nassert solution(\"aabbccddee\") == 6\n\nassert solution(\"abacaca\") == 5\n\nassert solution(\"abacacac\") == 1\n\nassert solution(\"abacacaca\") == 2"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abaca\") == 3\nassert solution(\"abcddcba\") == 4\nassert solution(\"abcddcbaa\") == 4\nassert solution(\"abcddcbaaa\") == 5\nassert solution(\"abcddcbaaaaa\") == 6\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaca\") == 3\nassert solution(\"abcddcba\") == 4\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abaca\") == \"3\"\nassert solution(\"abcddcba\") == \"4\"\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaaaaaaaaaa') == 0\nassert solution('a') == 0\nassert solution('aaaaaaaaaaa') == 1\nassert solution('abababa') == 1\nassert solution('abababab') == 1\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n1 2 3 4\\n5\\n5 1 5 7 9\") == \"3\"\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n1 2 3 4\\n5\\n1 1 1 1 1\\n') == '3'\n\"\"\""
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 4 6 2\\n5\\n5 1 5 7 9\") == \"3\"\n\"\"\"\n\na = []\nb = []\n\nwith open('../input.txt', 'r') as f:\n    n = f.readline()\n    a = list(map(int, f.readline().split()))\n    m = f.readline()\n    b = list(map(int, f.readline().split()))\n\na.sort()\nb.sort()\n\nres = 0\ni, j = 0, 0\nwhile i < len(a) and j < len(b):\n    dif = abs(a[i] - b[j])\n    if dif > 1:\n        break\n    res += 1\n    i += 1\n    j += 1\n\nprint(res)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n1 2 3 4\\n5\\n5 1 5 7 9\") == 3\n\"\"\"\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n1 4 6 2\\n5\\n5 1 5 7 9\\n\") == '3'\n\"\"\"\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 4 6 2\\n5\\n5 1 5 7 9') == '3'\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 4 6 2\\n5\\n5 1 5 7 9') == '3'\nassert solution('4\\n1 2 3 4\\n4\\n10 11 12 13') == '0'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5\\n1 2 3 4\\n10 11 12 13') == '0'\n\"\"\""
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 2 3 4\\n5\\n5 1 5 7 9\\n\") == 3\nprint('Test pass.')\n\n-----\n4\n1 4 6 2\n5\n5 1 5 7 9\n\n3\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5\\n1 2 3 4\\n5\\n1 2 3 4') == '3', 'fails'\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100\\n100 1\\n99 99\\n99 99\") == \"Team 1\"\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\") == \"Draw\""
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 100\\n100 1\\n99 99\\n99 99\") == \"Team 1\"\nassert solution(\"1 1\\n2 2\\n3 3\\n2 2\") == \"Team 2\"\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\") == \"Draw\""
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 100\\\\n100 1\\\\n99 99\\\\n99 99\") == \"Team 1\"\nassert solution(\"1 1\\\\n2 2\\\\n3 3\\\\n2 2\") == \"Team 2\"\nassert solution(\"1 1\\\\n2 2\\\\n3 3\\\\n2 2\") == \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 100\\n100 1\\n99 99\\n99 99\") == \"Team 1\"\n\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\") == \"Team 2\"\n\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\") == \"Draw\"\n\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 100\\n100 1\\n99 99\\n99 99\") == \"Team 1\"\n\"\"\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 100\\n100 1\\n99 99\\n99 99\") == \"Team 1\"\n\"\"\"\n\nfrom collections import deque\nfrom itertools import permutations\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\\n2 2\\n\") == \"Team 1\"\nassert solution(\"1 1\\n100 1\\n99 99\\n99 99\\n\") == \"Team 2\"\nassert solution(\"1 1\\n100 1\\n3 3\\n2 2\\n\") == \"Draw\""
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 100\\n100 1\\n99 99\\n99 99\") == \"Team 1\"\nassert solution(\"1 1\\n2 2\\n3 3\\n2 2\") == \"Team 2\"\nassert solution(\"3 3\\n2 2\\n1 1\\n2 2\") == \"Draw\"\n\"\"\""
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\\n2 2\") == \"Team 1\"\n\n\"\"\"\n\nimport unittest\nfrom collections import defaultdict\nfrom itertools import product\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n1 100\n100 1\n99 99\n99 99\n''') == 'Team 1'\nassert solution('''\n3 3\n2 2\n1 1\n2 2\n''') == 'Draw'\nassert solution('''\n1 1\n2 2\n3 3\n2 2\n''') == 'Team 2'\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\") == \"2.4\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100_000)"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n-1 0 3\\n0 0 3\\n1 0 2\") == \"2.4\"\nassert solution(\"5 5\\n1 1 1\\n1 2 2\\n1 3 3\\n1 4 4\\n4 4 4\") == \"9.7\"\n\"\"\"\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\") == \"2.4\"\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\") == \"2.4\"\n\"\"\"\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40') == '2.4'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\") == \"2.4\"\n\"\"\"\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 0 3\\n1 1 1\\n2 2 2\\n3 2 3\\n1 2 2\") == \"1.414\"\n\"\"\"\n\nfrom math import sqrt, inf\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\") == \"2.4\"\n\"\"\"\n\nN, K = map(int, stdin.readline().split())\nfoods = [list(map(int, stdin.readline().split())) for _ in range(N)]\nfoods.sort()\n\nend = 0\nfor i in range(N):\n    start = i + 1\n    for j in range(start, N):\n        if foods[j][1] <= foods[i][1]:\n            start = j\n            break\n    if foods[i][0] >= foods[start - 1][0] or foods[i][1] >= foods[start - 1][1]:\n        end = max(end, foods[i][2] * (foods[i][0] - foods[start - 1][0]) * (foods[i][1] - foods[start - 1][1]))\n\nprint(end)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\") == \"2.4\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\") == \"2.4\"\n\"\"\""
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0523') == 'Bicarp'\nassert solution('????') == 'Bicarp'\nassert solution('?054??0?') == 'Bicarp'\nassert solution('???00?') == 'Monocarp'\n\n---\n\nUsing built-in functions\n\n\nfor value in stdin:\n    value = value.replace('?', '0')\n    value = value.replace('?', '1')\n    value = value.replace('?', '2')\n    value = value.replace('?', '3')\n    value = value.replace('?', '4')\n    value = value.replace('?', '5')\n    value = value.replace('?', '6')\n    value = value.replace('?', '7')\n    value = value.replace('?', '8')\n    value = value.replace('?', '9')\n    print('Bicarp' if int(value[:len(value)//2]) == int(value[len(value)//2:]) else 'Monocarp')\n\n\"\"\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0523\") == \"Monocarp\"\nassert solution(\"???00?\") == \"Bicarp\"\nassert solution(\"04??0\") == \"Bicarp\"\nassert solution(\"0523\") == \"Bicarp\"\nassert solution(\"054??0?0?0?\") == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0523?\") == \"Monocarp\"\nassert solution(\"??0?0\") == \"Bicarp\"\nassert solution(\"???00?\") == \"Bicarp\"\n\"\"\""
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0523\") == \"Monocarp\"\nassert solution(\"?054??0?0\") == \"Bicarp\"\nassert solution(\"?0?0?0?0?0?0\") == \"Bicarp\"\nassert solution(\"?054??0?0\") == \"Bicarp\"\nassert solution(\"0523\") == \"Bicarp\""
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4?0???0\") == \"Monocarp\"\nassert solution(\"2??0?0\") == \"Bicarp\"\nassert solution(\"???00?0\") == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0523\") == \"Bicarp\"\nassert solution(\"??00?\") == \"Bicarp\"\nassert solution(\"054??0?\") == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2??0?0\") == \"Bicarp\"\nassert solution(\"?0?0?\") == \"Bicarp\"\nassert solution(\"??0?0\") == \"Monocarp\"\nassert solution(\"0?0?0?0\") == \"Monocarp\"\nassert solution(\"?00?0?0\") == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0523') == 'Bicarp'\nassert solution('?054??0?') == 'Bicarp'\nassert solution('?054??0?') == 'Bicarp'\n\"\"\""
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0523\") == \"Bicarp\"\nassert solution(\"??0?0??\") == \"Bicarp\"\nassert solution(\"?054??0?0?\") == \"Bicarp\"\nassert solution(\"?054??0?0?0?0?0?0?\") == \"Monocarp\"\nassert solution(\"06?\") == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0523') == 'Bicarp'\nassert solution('?054??0?') == 'Bicarp'\nassert solution('???00?0') == 'Monocarp'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n6 4\\n9 5\") == \"1\"\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == \"1\"\nassert solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\") == \"3\"\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 2\\n6 4\\n9 5\") == \"1\"\nassert solution(\n    \"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\") == \"3\"\nassert solution(\n    \"3 7\\n2 2\\n2 3\\n2 4\") == \"1\"\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n6 4\\n9 5\") == \"1\"\nassert solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\") == \"3\"\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == \"1\"\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == \"1\"\nassert solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\") == \"3\"\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n6 4\\n9 5\") == \"1\"\nassert solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\") == \"3\"\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == \"1\"\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == \"1\"\nassert solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\") == \"3\"\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n2 5\\n2 7\\n') == '1'\nassert solution('3 7\\n2 2\\n2 3\\n2 4\\n') == '1'\nassert solution('5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\\n') == '3'\nassert solution('7 3\\n1 2\\n1 5\\n1 7\\n') == '1'\nassert solution('6 2\\n6 4\\n6 6\\n') == '2'\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == '1'\nassert solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\") == '3'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\") == \"1\"\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == \"1\"\nassert solution(\"6 4\\n8 2\\n4 3\\n1 6\\n8 5\") == \"3\"\nassert solution(\"3 4\\n1 1\\n2 1\\n2 3\") == \"3\"\nassert solution(\"5 5\\n6 4\\n3 2\\n1 7\\n7 2\") == \"1\"\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7\\n2 2\\n2 3\\n2 4\") == \"1\"\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == \"1\"\nassert solution(\"3 7\\n2 2\\n2 3\\n2 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('3 2\\n') == '5'\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"5\"\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == '1'\nassert solution(\"3 2\") == '5'\n\"\"\"\n\nimport math\n\nm, k = map(int, input().split())"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '5'\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"5\""
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"10\"\nassert solution(\"2 2\") == \"101\"\nassert solution(\"2 3\") == \"1010\"\nassert solution(\"3 2\") == \"101101\"\n\"\"\"\n\n\n\nfrom collections import deque"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"5\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.*.*.*.1.\") == \"yes\"\nassert solution(\"1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"16.**.*..*.***.**.\\n.*.*...*.*.\\n\") == 'yes'\n\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"*.*...\") == \"no\"\nassert solution(\".*.*...\") == \"yes\"\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('.**.*..*.***.**.\\n') == 'yes'\nassert solution('.*.*...*.*.\\n') == 'no'\nassert solution('**.**.**.**.\\n') == 'yes'\nassert solution('.*.*.*.*.*.\\n') == 'yes'\nassert solution('.*.*.*.*.*.*.\\n') == 'yes'\n\n-----Problem-----\n\nYou are given a level map (list of strings) and you are tasked to find the shortest path from the top left corner to the bottom right corner in the level.\n\nYour character can jump from a given position on the level to the neighbouring positions (up, down, left, right) in the following way:\n\n- the position of the character on the level is represented as a tuple of pairs of integers (i, j), the first element of the tuple is the row index, the second element is the column index.\n\n- the character can jump to the position (i + 2, j + 1)\n- the character can jump to the position (i + 2, j - 1)\n- the character can jump to the position (i + 1, j - 2)\n- the character can jump to the position (i + 1, j + 2)\n- the character can jump to the position (i - 1, j - 2)\n- the character can jump to the position (i - 1, j + 2)\n- the character can jump to the position (i - 2, j - 1)\n- the character can jump to the position (i - 2, j + 1)\n\nGiven the level map and the initial position of the character, find the shortest path from the top left corner to the bottom right corner in the level. If there are several paths with the same length, return the path with the minimum sum of all characters of all cells visited on the path.\n\n-----Tests-----\n\nInput:\n3\n..*\n.*.\n*..\n\nOutput:\n6\nInput:\n4\n.**\n*.**\n**.*\n\nOutput:\n13\n\n\"\"\"\n\nimport queue"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n.**.*\") == 'yes'\nassert solution(\"9\\n.*.*.*.*.*.*.*\") == 'yes'\nassert solution(\"16\\n.*.*.*.*.*.*.*.*\") == 'yes'\nassert solution(\"11\\n.*.*.*.*.*.*.*.*\") == 'no'\nassert solution(\"4\\n.**.*\") == 'yes'\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('.*.*...*.*.') == 'yes'\nassert solution('.*.*.*.*.*.*.*.*.*.*') == 'yes'\nassert solution('.*.*...*.*.') == 'no'\nassert solution('*.*.*...*.*.') == 'no'\n\nSolution:"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"**.**.*..*.***.**\") == \"yes\"\nassert solution(\"**.*..*.*.**.**\") == \"yes\"\nassert solution(\"**.*.*.*.*.*\") == \"no\"\nassert solution(\"*.*.*.*.*.*\") == \"yes\"\nassert solution(\"*.**.*..*.*.**\") == \"no\"\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"16\\n.*.*...*.*.\\n\") == \"yes\"\nassert solution(\"11\\n.*.*...*.*.\\n\") == \"no\"\nassert solution(\"11\\n.**.*...*.*.\\n\") == \"yes\"\n\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"**.**.**\") == \"yes\"\nassert solution(\"*.**.*..*.*\") == \"yes\"\nassert solution(\"**.**.**.**\") == \"yes\"\nassert solution(\"**.**.**.*\") == \"yes\"\nassert solution(\"**.**.**.**.**\") == \"yes\"\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('16\\n.*.*...*.*.\\n') == \"yes\"\nassert solution('11\\n.*.*...*.*.\\n') == \"no\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 0 2\\n3 5 7\\n8 1 6\") == \"9\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1\\n\") == \"1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 2\\n3 5 7\\n8 1 6\") == \"9\"\nassert solution(\"1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1\") == \"1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1\") == \"-1\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\\n0\\n2\\n3\\n5\\n7\\n8\\n1\\n6\") == \"9\"\nassert solution(\"4\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"4\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\") == \"-1\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 0 2\\n3 5 7\\n8 1 6\") == \"9\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1\") == \"1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\") == \"-1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 2\") == \"9\"\nassert solution(\"3 5 7\") == \"1\"\nassert solution(\"8 1 6\") == \"1\"\n\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 0 1\") == \"1\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('4 0 2') == '9'\nassert solution('3 5 7') == '9'\nassert solution('8 1 6') == '1'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4 0 2\\n3 5 7\\n8 1 6\") == \"9\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1\") == \"1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\") == \"-1\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 0 2\\n3 5 7\\n8 1 6\") == \"9\\n\", \"Example #1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\") == \"1\\n\", \"Example #2\"\nassert solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\") == \"-1\\n\", \"Example #3\"\n\n\"\"\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4 0 2\\n3 5 7\\n8 1 6\") == '9'\n\"\"\"\n\nn = int(input())\n\ng = [[0]*n for i in range(n)]\nfor i in range(n):\n    g[i] = [0]+[int(j) for j in input().split()]+[0]\n\ng = [x[1:-1] for x in g[1:-1]]"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n4 0 2') == '9'\nassert solution('4\\n1 1 1 1') == '1'\nassert solution('4\\n1 1 1 1') == '-1'\nassert solution('4\\n1 1 1 1') == '1'\nassert solution('4\\n1 1 1 1') == '1'\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6\\n1\\n6\\n5\\n\") == \"3 7\"\nassert solution(\"1\\n10\\n5\\n\") == \"15 15\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\n\"\"\"\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n6\\n1\\n1\\n1\\n1') == '3 7'\nassert solution('1\\n10\\n5\\n') == '15 15'\nassert solution('3\\n7\\n1\\n6\\n5\\n') == '6 12'\nassert solution('3\\n7\\n1\\n6\\n5\\n') == '7 13'\n\n\"\"\""
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n6\\n1\\n1\\n1\\n1\") == \"3 7\"\n\nassert solution(\"1\\n10\\n5\\n\") == \"15 15\"\n\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\n\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n6\\n1\\n1\\n1\\n1') == '3 7'\nassert solution('1\\n10\\n5\\n') == '15 15'\nassert solution('3\\n7\\n1\\n6\\n5\\n') == '6 12'\nassert solution('3\\n7\\n1\\n6\\n5\\n') == '6 12'"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n6\\n1\\n1\\n1\\n1\\n') == '3 7'\nassert solution('1\\n10\\n5\\n') == '15 15'\nassert solution('3\\n7\\n1\\n6\\n5\\n') == '6 12'\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n1\\n6\\n5\\n\") == \"3 7\"\nassert solution(\"4\\n6\\n1\\n1\\n1\\n1\\n\") == \"3 7\"\nassert solution(\"1\\n10\\n5\\n\") == \"15 15\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\""
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n6\n1\n1\n1\n1''') == '3 7'\nassert solution('''1\n10\n5\n''') == '15 15'\nassert solution('''3\n7\n1\n6\n5\n''') == '6 12'\nassert solution('''3\n7\n1\n6\n5\n''') == '7 13'\nassert solution('''3\n7\n1\n6\n5\n''') == '7 13'\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n6\\n1\\n1\\n1\\n1') == '3 7'\nassert solution('1\\n10\\n5\\n') == '15 15'\nassert solution('3\\n7\\n1\\n6\\n5') == '6 12'\nassert solution('3\\n7\\n1\\n6\\n5') == '6 12'\n\nfrom collections import Counter\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n6\\n1\\n1\\n1\\n1\") == \"3 7\"\nassert solution(\"1\\n10\\n5\\n\") == \"15 15\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\nassert solution(\"3\\n7\\n1\\n6\\n5\\n\") == \"6 12\"\n\n\"\"\"\n\nimport sys\nimport itertools\nimport collections\nfrom typing import List, Tuple\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n6\\n1\\n1\\n1\\n1') == '3 7'\nassert solution('1\\n10\\n5\\n') == '15 15'\nassert solution('3\\n7\\n1\\n6\\n5') == '6 12'\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3') == '128'\nassert solution('1 1') == '1'\nassert solution('2 1') == '1'\nassert solution('2 2') == '1'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"128\"\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"128\"\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"128\"\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 3) == 128\nassert solution(10, 5) == 23243119366310240\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == answer\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"128\"\n\"\"\"\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1') == '4'\nassert solution('3 3') == '128'\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == '6'\nassert solution('3 3') == '144'\nassert solution('5 5') == '180'\nassert solution('3 3') == '72'\n\nassert solution('2 5') == '72'\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"128\"\n\n\"\"\""
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n2 6 7\\n4 2 3 9 5\\n3 2 3 9') == '2 3'\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4') == '1 2'\n\"\"\""
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4') == '1 2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4') == '1 2'\nassert solution('4 3\\n9 9 8 7 6 5 4 3 2 1\\n3 4 1 2 3 4\\n1 4 5 6 7 8\\n4 4 1 3 5 7\\n1 4 2 4 6 8\\n5 4 1 9 2 8\\n') == '1 2'\nassert solution('3 4\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4') == '1 2'\n\n-----\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\\n4 2 3 9 5\\n3 2 3 9\\n100 1 7\\n400 3 3 2 5\\n100 2 9 2\\n500 3 2 9 5\") == \"2 3\"\nassert solution(\"3 4\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4\") == \"1 2\"\nassert solution(\"1 5\\n9 9 8 7 6 5 4 3 2 1\\n3 4 1 2 3 4\\n1 4 5 6 7 8\\n4 4 1 3 5 7\\n1 4 2 4 6 8\\n5 4 1 9 2 8\\n\") == \"2 4\"\nassert solution(\"3 4\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4\") == \"1 2\"\nassert solution(\"3 4\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4\") == \"1 2\"\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"2 3\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"2 3\"\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n2 6 7\\n4 2 3 9 5\\n3 2 3 9\\n100 1 7\\n400 3 3 2 5\\n100 2 9 2\\n500 3 2 9 5\\n') == '2 3'\n\"\"\""
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n2 6 7\\n4 2 3 9 5\\n3 2 3 9\\n100 1 7\\n400 3 3 2 5\\n100 2 9 2\\n500 3 2 9 5\\n') == '2 3'\n\nassert solution('4 3\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4\\n') == '1 2'\n\nassert solution('1 5\\n9 9 8 7 6 5 4 3 2 1\\n3 4 1 2 3 4\\n1 4 5 6 7 8\\n4 4 1 3 5 7\\n1 4 2 4 6 8\\n5 4 1 9 2 8\\n') == '2 4'\n\nprint(solution(input()))\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\n\nassert solution('') == ''\nassert solution('1\\n') == ''\n\nassert solution('') == ''\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n2 6 7\\n4 2 3 9 5\\n3 2 3 9\\n100 1 7\\n400 3 3 2 5\\n100 2 9 2\\n500 3 2 9 5\") == \"2 3\"\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 15\") == \"69 96\"\n\"\"\""
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 15') == '69 96'\n\"\"\"\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 15') == '69 96'\nassert solution('3 0') == '-1 -1'\n\"\"\""
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 15\") == \"69 96\"\nassert solution(\"3 0\") == \"-1 -1\"\nassert solution(\"1 1\") == \"1 1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 15''') == '69 96'\nassert solution('''3 0''') == '-1 -1'\n\"\"\"\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 15\") == \"69 96\"\nassert solution(\"3 0\") == \"-1 -1\"\n\nprint(\"Success\")\n\nimport sys"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 15\") == \"69 96\"\nassert solution(\"3 0\") == \"-1 -1\"\nassert solution(\"5 11\") == \"12 34\"\n\n\"\"\"\n\nfrom sys import stdin\n\ninp = stdin.readline().split()\nm, s = int(inp[0]), int(inp[1])"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 15\") == \"69 96\"\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 15\") == \"69 96\"\nassert solution(\"3 0\") == \"-1 -1\""
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 15\") == \"69 96\"\n\nassert solution(\"3 0\") == \"-1 -1\"\n\nprint(\"Cool!\" if solution(\"2 15\") == \"69 96\" else \"\")\nprint(\"Cool!\" if solution(\"3 0\") == \"-1 -1\" else \"\")"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 50 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 50 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 50 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\n\"\"\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 50 2') == '1230'\nassert solution('1 2345 10') == '2750685'\nassert solution('101 154 2') == '2189'\n\n\"\"\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 50 2') == '1230'\nassert solution('1 2345 10') == '2750685'\nassert solution('101 154 2') == '2189'\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 50 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 50 2') == '1230'\nassert solution('1 2345 10') == '2750685'\nassert solution('101 154 2') == '2189'\n\n\"\"\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 50 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\n\"\"\""
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 50 2') == '1230'\nassert solution('1 2345 10') == '2750685'\nassert solution('101 154 2') == '2189'\n\"\"\""
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 50 2') == 1230\n\"\"\""
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3 10\\n7 2 7 7 4 2') == 'YES'\nassert solution('6 2 3\\n4 5 3 13 4 10') == 'YES'\nassert solution('3 2 5\\n10 16 22') == 'NO'\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2 7 7 4 2') == 'YES'\nassert solution('6 3 10') == 'NO'\nassert solution('4 5 3 13 4 10') == 'YES'\nassert solution('3 2 5') == 'YES'\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 10\\n7 2 7 7 4 2\\n\") == \"YES\"\nassert solution(\"6 2 3\\n4 5 3 13 4 10\\n\") == \"YES\"\nassert solution(\"3 2 5\\n10 16 22\\n\") == \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 10\") == \"YES\"\nassert solution(\"6 2 3\") == \"YES\"\nassert solution(\"3 2 5\") == \"NO\"\nassert solution(\"10 16 22\") == \"NO\"\nassert solution(\"7 2 7 7 4 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3 10') == \"YES\"\nassert solution('6 2 3') == \"NO\"\nassert solution('3 2 5') == \"YES\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 10\") == \"YES\"\nassert solution(\"6 2 3\") == \"YES\"\nassert solution(\"6 3 5\") == \"NO\"\n\"\"\"\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 5\\n10 16 22\") == 'YES'\nassert solution(\"3 2 5\\n10 16 22\") == 'NO'\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 5\\n10 16 22\") == \"YES\"\nassert solution(\"6 3 10\\n7 2 7 7 4 2\") == \"YES\"\nassert solution(\"6 2 3\\n4 5 3 13 4 10\") == \"YES\"\n\"\"\"\n\nn, k, d = map(int, input().split())\narr = [int(i) for i in input().split()]\n\narr.sort()\n\nlow = 1\nhigh = max(arr)\n\nans = \"NO\"\n\nwhile low <= high:\n    mid = low + (high - low) // 2\n    count = 0\n    i = 0\n    while i < len(arr):\n        j = i + 1\n        while j < len(arr) and arr[j] - arr[i] <= mid:\n            j += 1\n        count += j - i\n        i = j\n    if count < k:\n        high = mid - 1\n    else:\n        if (high - low) % 2 == 0:\n            ans = \"YES\"\n            break\n        low = mid + 1\n\nprint(ans)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 10\\n7 2 7 7 4 2\") == \"YES\"\nassert solution(\"6 2 3\\n4 5 3 13 4 10\") == \"YES\"\nassert solution(\"3 2 5\\n10 16 22\") == \"NO\"\nassert solution(\"6 5 3\\n10 4 5 2 7 8 10\") == \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 10\\n7 2 7 7 4 2\") == \"YES\"\nassert solution(\"6 2 3\\n4 5 3 13 4 10\") == \"YES\"\nassert solution(\"3 2 5\\n10 16 22\") == \"NO\"\nassert solution(\"1 1 1\\n0 0 0\") == \"NO\"\nassert solution(\"2 1 5\\n10 16 22\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RYBGRYBGR\") == (0, 0, 0, 0)\nassert solution(\"!RGYB\") == (0, 1, 0, 0)\nassert solution(\"!GB!RG!Y!\") == (1, 1, 1, 1)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RYBGRYBGR\") == '0 0 0 0'\nassert solution(\"!RGYB\") == '0 1 0 0'\nassert solution(\"!GB!RG!Y!\") == '2 1 1 0'\n\"\"\""
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RYBGRYBGR\") == (0, 0, 0, 0)\nassert solution(\"!RGYB\") == (0, 1, 0, 0)\nassert solution(\"!!!!YGRB\") == (1, 1, 1, 1)\n\"\"\"\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RBYB\") == \"0 1 0 0\"\nassert solution(\"RBYG\") == \"0 0 1 0\"\nassert solution(\"RBYBGRYBGR\") == \"0 0 0 0\"\nassert solution(\"!RGYB\") == \"0 1 0 0\"\nassert solution(\"!GB!RG!Y! \") == \"1 1 1 1\"\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RYBGRYBGR\") == \"0 0 0 0\"\nassert solution(\"!RGYB\") == \"0 1 0 0\"\nassert solution(\"!GB!RG!Y!\") == \"1 1 1 1\"\n\"\"\""
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RGYB\") == \"0 1 0 0\"\nassert solution(\"RBGY\") == \"0 1 0 0\"\nassert solution(\"RBYG\") == \"0 0 1 0\"\nassert solution(\"YBRG\") == \"0 0 0 1\"\nassert solution(\"YBGR\") == \"0 0 0 1\"\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RYBGRYBGR\") == \"0 0 0 0\"\nassert solution(\"!RGYB\") == \"0 1 0 0\"\nassert solution(\"!!!!YGRB\") == \"1 1 1 1\"\nassert solution(\"!GB!RG!Y!\") == \"2 1 1 0\"\n\"\"\"\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RBYRGBG\") == (0, 0, 0, 0)\nassert solution(\"RBYG\") == (0, 1, 0, 0)\nassert solution(\"RGB\") == (0, 0, 1, 0)\nassert solution(\"R\") == (0, 0, 0, 1)\nassert solution(\"GGGGGG\") == (0, 0, 0, 0)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RBYGRYYGRGBBRYGB\") == \"0 0 0 0\"\nassert solution(\"BBBBRRYGGYY\") == \"0 1 1 0\"\nassert solution(\"RGGBBBRRYB\") == \"0 1 1 1\"\nassert solution(\"GGRBGBB\") == \"1 1 1 1\"\nassert solution(\"BBBGRYBYGG\") == \"2 1 1 0\"\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RYBGRYBGR\") == \"0 0 0 0\"\nassert solution(\"!RGYB\") == \"0 1 0 0\"\nassert solution(\"!!!!YGRB\") == \"1 1 1 1\"\nassert solution(\"!GB!RG!Y!\") == \"2 1 1 0\"\n\n\"\"\"\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4\") == \"1.5000000000\"\n\"\"\"\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4\\n') == '1.5000000000'\n\"\"\"\nfrom typing import List, Dict\n\nfrom local_search import LocalSearch, DummyLocalSearch\n\n\nclass SearchProblem:\n    def __init__(self, N: int, M: int, s: int, t: int, passages: List[List[int]], blocked: Dict[int, List[int]]):\n        self.N = N\n        self.M = M\n        self.s = s\n        self.t = t\n        self.passages = passages\n        self.blocked = blocked\n\n    def __str__(self) -> str:\n        return 'N: {}, M: {}, s: {}, t: {}, passages: {}, blocked: {}'.format(\n            self.N, self.M, self.s, self.t, self.passages, self.blocked)\n\n    def copy(self) -> 'SearchProblem':\n        passages = self.passages.copy()\n        blocked = self.blocked.copy()\n        return SearchProblem(self.N, self.M, self.s, self.t, passages, blocked)\n\n\nclass SearchSolution:\n    def __init__(self, problem: SearchProblem, cost: float):\n        self.problem = problem\n        self.cost = cost\n\n    def __str__(self) -> str:\n        return '{} cost: {}'.format(self.__class__.__name__, self.cost)\n\n\nclass SearchSolver(LocalSearch):\n    def __init__(self, N: int, M: int, s: int, t: int, passages: List[List[int]], blocked: Dict[int, List[int]]):\n        super().__init__()\n        self.N = N\n        self.M = M\n        self.s = s\n        self.t = t\n        self.passages = passages\n        self.blocked = blocked\n\n    def solve(self, problem: SearchProblem) -> SearchSolution:\n        pass\n\n    def estimate(self, problem: SearchProblem) -> float:\n        pass\n\n\nclass ConstraintCalculator:\n    def __init__(self, N: int, M: int, s: int, t: int, passages: List[List[int]], blocked: Dict[int, List[int]]):\n        self.N = N\n        self.M = M\n        self.s = s\n        self.t = t\n        self.passages = passages\n        self.blocked = blocked\n\n    def calculate(self, problem: SearchProblem) -> float:\n        pass\n\n\nclass ConstraintCalculator(ConstraintCalculator):\n    def __init__(self, N: int, M: int, s: int, t: int, passages: List[List[int]], blocked: Dict[int, List[int]]):\n        super().__init__(N, M, s, t, passages, blocked)\n\n    def calculate(self, problem: SearchProblem) -> float:\n        # takaheis[i][j] := takahei\u304ci\u756a\u76ee\u306epassage\u304b\u3089j\u756a\u76ee\u306epassage\u306b\u79fb\u52d5\u3059\u308b\u5834\u5408\u306b\u5408\u308f\u305b\u308b\u6b8b\u30ea\u30f3\u30b0\n        takaheis = [[0 for j in range(self.N)] for i in range(self.M)]\n\n        for j, (s_j, t_j) in enumerate(self.passages):\n            for i, (s_i, t_i) in enumerate(self.passages):\n                if s_j == s_i and t_j == t_i:\n                    continue\n                if s_j < t_i and s_i < t_j:\n                    takaheis[i][j] = 1\n\n        # for i in range(self.M):\n        #     for j in range(self.N):\n        #         print('i: {}, j: {} = {}'.format(i, j, takaheis[i][j]))\n        #     print()\n\n        res = 0\n        takaheis_t = [sum(takaheis[i]) for i in range(self.M)]\n        takaheis_s = [sum(takaheis[i][j] for j in range(self.N)) for i in range(self.M)]\n        takaheis_t_minus_s = [takaheis_t[i] - takaheis_s[i] for i in range(self.M)]\n        for i in range(self.M):\n            if takaheis_t_minus_s[i] < 0:\n                continue\n            for j in range(self.N):\n                res += takaheis[i][j] * takaheis_t_minus_s[i]\n\n        return res / self.M\n\n\nclass ConstraintCalculator(ConstraintCalculator):\n    def __init__(self, N: int, M: int, s: int, t: int, passages: List[List[int]], blocked: Dict[int, List[int]]):\n        super().__init__(N, M, s, t, passages, blocked)\n\n    def calculate(self, problem: SearchProblem) -> float:\n        takaheis = [[0 for j in range(self.N)] for i in range(self.M)]\n\n        for j, (s_j, t_j) in enumerate(self.passages):\n            for i, (s_i, t_i) in enumerate(self.passages):\n                if s_j == s_i and t_j == t_i:\n                    continue\n                if s_j < t_i and s_i < t_j:\n                    takaheis[i][j] = 1\n\n        takaheis_t = [sum(takaheis[i]) for i in range(self.M)]\n        takaheis_s = [sum(takaheis[i][j] for j in range(self.N)) for i in range"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\") == '1.5'\n\"\"\"\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4\") == \"1.5000000000\"\n\"\"\"\nimport sys\nimport math\nimport random\n\nsys.setrecursionlimit(2000)\n\nN, M = map(int, sys.stdin.readline().split())\n\nfirst_rooms = [0] * (N + 1)\n\nfor _ in range(M):\n    s, t = map(int, sys.stdin.readline().split())\n    first_rooms[s] += 1\n    first_rooms[t] -= 1\n\ntotal = 0\nfor room in first_rooms:\n    if room!= 0:\n        total += room\n\nprint(total / (N - 1))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4') == '1.5000000000'\n\n\"\"\"\n\n\"\"\"\n\n---SOLUTION---\n\nWe can do this recursively in O(N^3) time.\n\n\"\"\"\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4\") == '1.5'\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(sample_input) == sample_output\n\n-----Test Case-----\ninput1:\n2 3\n1 2\n1 3\n1 2\n\noutput1:\n0.5\n\ninput2:\n5 5\n1 2\n1 3\n1 4\n2 3\n2 4\n\noutput2:\n0.5\n\ninput3:\n2 3\n1 2\n1 3\n1 2\n\noutput3:\n0.5\n\ninput4:\n2 2\n1 2\n1 2\n\noutput4:\n1\n\"\"\"\n\n\"\"\"\nimport math\n\ns, t = list(map(int, input().split()))\nedges = []\nfor i in range(s):\n    edges.append(list(map(int, input().split())))\n\nedges.sort()"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4\") == '1.5000000000'"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\n\"\"\""
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\") == \"1.5\"\n\"\"\""
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '0'\nassert solution('113') == '110'\nassert solution('5432359') == '5432360'\nassert solution('0') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\"\nassert solution(\"0\") == \"0\""
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '0'\nassert solution('4722') == '4720'\nassert solution('5432359') == '5432360'"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\"\n\"\"\"\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\"\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '0'\nassert solution('113') == '110'\nassert solution('1000000000') == '1000000000'\nassert solution('5432359') == '5432360'\n\"\"\""
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\"\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '0'\nassert solution('5432359') == '5432360'\nassert solution('123') == '124'\n\"\"\"\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\""
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"113\") == \"110\"\nassert solution(\"1000000000\") == \"1000000000\"\nassert solution(\"5432359\") == \"5432360\"\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"helloworld\") == \"h e l l o w w o r l d\"\nassert solution(\"ehoolwlroz\") == \"e h o o l w l o r z\"\nassert solution(\"hastalavistababy\") == \"h a s t a l a v i s t a b a\"\nassert solution(\"merrychristmas\") == \"m e r r y c h i s t o m s\"\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('helloworld') == 'h e l l o w'\nassert solution('hastalavistababy') == 'h a t a l a'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('hastalavista') == '-1'\nassert solution('helloworld') == 'h e l l o w o r l d'\nassert solution('hastalavistababy') == '0'\nassert solution('merrychristmas') == '-1'\nassert solution('christmasmerry') == '0'\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"helloworld\") == \"h e l l w o r l d\"\nassert solution(\"hastalavistababy\") == \"h a s t a l a v i s t a b a y\"\nassert solution(\"merrychristmas\") == \"-1\"\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"helloworld\") == \"h e l l o w l d\"\nassert solution(\"hastalavistababy\") == \"h a s t a l a v i s t a b a\"\nassert solution(\"merrychristmas\") == \"m e r r y c h e s t s\"\n\"\"\"\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"helloworld\") == \"h e l l o w l o r l d\"\nassert solution(\"hastalavistababy\") == \"h a s t a l a v i s t a b a\"\nassert solution(\"merrychristmas\") == \"-\"\n\n\"\"\"\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('helloworld') == 'h e l l o w l r o z'\nassert solution('hastalavistababy') == 'h a s t a l a v i s t a b a'\nassert solution('merrychristmas') == 'c h i s t o m r y'\nassert solution('aaaaaaaaaaaaaa') == 'a'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'z a y b c d e f g h i j k l m n o p q r s t u v w x'\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aaaa') == ''\nassert solution('helloworld') == ''\nassert solution('hastalavistababy') == ''\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n---"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('helloworld') == 'h e l l o w l o r l d'\nassert solution('hastalavistababy') == '-1'\nassert solution('merrychristmas') == '-1'\nassert solution('helloworld') == 'h e l l o w l o r l d'\nassert solution('hastalavistababy') == '-1'\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\n\"\"\""
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\nassert solution(\"harry james\") == \"hja\"\nassert solution(\"harry john\") == \"hja\"\nassert solution(\"harry james daniel\") == \"hjad\"\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'\n\"\"\"\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\n\"\"\"\n\n\n\n\"\"\"\nYour input\nHarry Potter\n\nYour output\nhp\n\nSample test(s)\nInput\nHarry Potter\nOutput\nhp\n\"\"\"\n\nimport math\n\nfirst_name, last_name = input().strip().split()"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abd') == 'ab'\nassert solution('abc') == 'abc'\nassert solution('ah') == 'a'\nassert solution('abcde') == 'abcde'\nassert solution('zachary') == 'zach'\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\nassert solution(\"larry page\") == \"larryp\"\n\"\"\""
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\nassert solution(\"alice clinton\") == \"acl\"\nassert solution(\"michael jordan\") == \"mjc\"\nassert solution(\"johnny five-star\") == \"j5s\"\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\nassert solution(\"lancelot\") == \"lot\"\nassert solution(\"tolbert\") == \"tol\"\nassert solution(\"camelot\") == \"camel\"\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected_result\n\n\"\"\"\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n[][]') == '+- -+\\n|   |||\\n+- -+\\n'\nassert solution('4\\n[[][]]') == '+- -+\\n|   |||\\n+- -+\\n'\nassert solution('2\\n[]') == '+- -+\\n|   ||\\n+- -+\\n'\nassert solution('2\\n[[]]') == '+- -+\\n|   ||\\n+- -+\\n'\nassert solution('8\\n[[][]]') == '+- -+\\n|   |||\\n+- -+\\n'\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n[[][]]\\n') == '+- -++- -+\\n|   ||   |\\n+- -++- -+\\n'\nassert solution('6\\n[[[]]]\\n') == '+- -+\\n|   |\\n+- -+\\n|   |\\n|   |\\n+- -+\\n'\nassert solution('2\\n[]\\n') == '+- -+\\n|   |\\n+- -+'\nassert solution('8\\n[[][]][]\\n') == '+- -+ -+\\n|   |   |\\n+- -+ -+\\n|   |   |\\n+- -+ -+\\n'\nassert solution('6\\n[[[]]]\\n') == '+- -+\\n|   |\\n+- -+'\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(    \"    [[[][]]]    \") == \"+- -+\\n|   |||\\n+- -+-\"\nassert solution(\"    [[[][]]]    \") == \"+- -+\\n|   |||\\n+- -+-\"\nassert solution(\"    [[][]]    \") == \"+- -+\\n|   |||\\n+- -+-\"\nassert solution(\"    [[][]]    \") == \"+- -+\\n|   |||\\n+- -+-\"\n\nassert solution(\"    [[][]]    \") == \"+- -+\\n|   |||\\n+- -+-\"\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n[[][]][]') == '+-\\n|+- -+\\n||   ||\\n|+- -+\\n+-\\n'\nassert solution('6\\n[[[]]]') == '+-\\n|+-   -+\\n||+- -+||\\n|||   |||\\n||+- -+||\\n|+-   -+\\n+-\\n'\nassert solution('6\\n[[[]]]') == '+-\\n|+-   -+\\n||+- -+||\\n|||   |||\\n||+- -+||\\n|+-   -+\\n+-\\n'\nassert solution('2\\n[]') == '+- -+\\n|   |\\n+- -+\\n'\nassert solution('4\\n[][]') == '+- -+\\n|   ||\\n+- -+\\n'\n\"\"\""
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[[][]]\") == \"+- -+\\n|   ||\\n+- -+\"\nassert solution(\"[[][]]\") == \"+- -+\\n|   ||\\n+- -+\"\nassert solution(\"[[][]]\") == \"+- -+\\n|   ||\\n+- -+\"\nassert solution(\"[[][]]\") == \"+- -+\\n|   ||\\n+- -+\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n[[][]][]') == '+-\\n|+- -+\\n||   ||\\n|+- -+\\n+-\\n'\nassert solution('6\\n[[[]]]') == '+-\\n|+- -+\\n||   ||\\n|+- -+\\n+-\\n'\nassert solution('6\\n[[[]]]') == '+-\\n|+- -+\\n||   ||\\n|+- -+\\n+-\\n'\nassert solution('2\\n[]') == '+- -+\\n|   |\\n+- -+\\n'\nassert solution('4\\n[][]') == '+- -+\\n|   ||\\n+- -+\\n'\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n[[][]\\n') == '+- -+\\n|   ||\\n+- -+\\n'\nassert solution('4\\n[][]') == '+- -+\\n|   ||\\n+- -+\\n'\nassert solution('6\\n[[][]]') == '+- -+\\n|   ||\\n+- -+\\n'\nassert solution('6\\n[[][]]\\n') == '+- -+\\n|   ||\\n+- -+\\n'\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[][]\") == \"+- -+\\n|   ||\\n+- -+\\n\"\nassert solution(\"[[][]]\") == \"+- -+\\n|   ||\\n+- -+\\n\"\nassert solution(\"[[][]]\") == \"+- -+\\n|   ||\\n+- -+\\n\"\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n[[][]][]\") == \"+-\\n|+- -+\\n||   ||\\n|+- -+\\n+-\\n\"\nassert solution(\"6\\n[[[]]]\") == \"+-\\n|+-   -+|\\n||+- -+||\\n|||   |||\\n||+- -+||\\n|+-   -+|\\n+-\\n\"\nassert solution(\"6\\n[[][]]\") == \"+-\\n|+-   -+|\\n||   |||\\n|+- -+||\\n+-\\n\"\nassert solution(\"2\\n[]\") == \"+- -+\\n|   |\\n+- -+\\n\"\nassert solution(\"4\\n[][]\") == \"+- -+\\n|   ||\\n+- -+\\n\"\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\", \"[]\") == \"+- -+\\n|   |\\n+- -+\"\nassert solution(\"3\", \"[]\") == \"+- -+ -+\\n|   |\\n-+-+-\\n|   |\\n-+-+-\\n|   |\\n-+-+-\\n\"\nassert solution(\"4\", \"[]\") == \"+- -+ -+ -+\\n|   |\\n-+-+-\\n|   |\\n-+-+-\\n|   |\\n-+-+-\\n\"\nassert solution(\"5\", \"[]\") == \"+- -+ -+ -+ -+\\n|   |\\n-+-+-\\n|   |\\n-+-+-\\n|   |\\n-+-+-\\n\"\nassert solution(\"6\", \"[]\") == \"+- -+ -+ -+ -+ -+\\n|   |\\n-+-+-\\n|   |\\n-+-+-\\n|   |\\n-+-+-\\n\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10011') == '<'\nassert solution('10010') == '='\nassert solution('10101') == '>'\n\n\"\"\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000\") == \">\"\nassert solution(\"11\") == \"<\"\nassert solution(\"110\") == \"=\"\n\"\"\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000\") == '>'\nassert solution(\"11\") == '<'\nassert solution(\"00100\") == '='\nassert solution(\"110\") == '>'\n\n\"\"\""
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000') == '<'\nassert solution('1111') == '='\nassert solution('10010') == '>'\n\"\"\""
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000\") == \">\"\nassert solution(\"00100\") == \"=\"\nassert solution(\"110\") == \"<\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000') == '<'\nassert solution('1100') == '='\nassert solution('11') == '>'\nassert solution('101') == '<'\n\n\"\"\""
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000') == '<'\nassert solution('110') == '='\nassert solution('101') == '>'\nassert solution('111') == '>'\n\n\"\"\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10111\") == \">\"\nassert solution(\"1111\") == \">\"\nassert solution(\"11\") == \"<\"\nassert solution
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100101\") == \">\"\nassert solution(\"101110\") == \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == '<'\nassert solution('1000') == '>'\nassert solution('1100') == '='\nassert solution('111111111111111111') == '<'\nassert solution('100011010101111111') == '>'\n\n\"\"\""
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\npurple\\nred') == '1\\nSpace'\nassert solution('0\\n') == '6\\nTime\\nMind\\nSoul\\nPower\\nReality'\n\n\"\"\""
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nred\\npurple\\nyellow\\norange\") == \"2\\nSpace\\nTime\"\n\"\"\""
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nred\\npurple\\nyellow\\norange\") == \"2\\nSpace\\nTime\"\nassert solution(\"0\") == \"6\\nTime\\nMind\\nSoul\\nPower\\nReality\\n\"\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\nred\") == \"6\\nTime\"\nassert solution(\"2\\npurple\") == \"2\\nSpace\"\nassert solution(\"0\") == \"6\\nTime\\nMind\\nSoul\\nPower\\nReality\"\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nr\\np\\ny\\no') == '2\\nSpace\\nTime'\nassert solution('0') == '6\\nTime\\nMind\\nSoul\\nPower\\nReality'\nprint('test passed')"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\npurple\\ngreen\\nblue\\norange\\nred\\nyellow\\n6\\npurple\\ngreen\\nblue\\norange\\nred\\nyellow\\n6\") == \"2\\nSpace\\nTime\"\nassert solution(\"0\\npurple\\ngreen\\nblue\\norange\\nred\\nyellow\\n6\\npurple\\ngreen\\nblue\\norange\\nred\\nyellow\\n6\") == \"6\\nTime\\nMind\\nSoul\\nPower\\nReality\\nSpace\"\nassert solution(\"0\\npurple\\ngreen\\nblue\\norange\\nred\\nyellow\\n6\\npurple\\ngreen\\nblue\\norange\\nred\\nyellow\\n6\") == \"6\\nTime\\nMind\\nSoul\\nPower\\nReality\\nSpace\""
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nr\\np\\ny\\no\") == '2\\nSpace\\nTime'\nassert solution(\"0\") == '6\\nTime\\nMind\\nSoul\\nPower\\nReality\\nSpace'\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nred\\npurple\\nyellow\\norange') == '2\\nSpace\\nTime'\nassert solution('0') == '6\\nTime\\nMind\\nSoul\\nPower\\nReality\\nSpace'\n\"\"\""
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\nred\\npurple\\nyellow\\norange') == '2\\nSpace\\nTime'\nassert solution('0\\n') == '6\\nTime\\nMind\\nSoul\\nPower\\nReality'\n\"\"\"\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nred\\npurple\\nyellow\\norange\") == '2\\nSpace\\nTime'\nassert solution(\"0\") == '6\\nTime\\nMind\\nSoul\\nPower\\nReality'\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2\") == \"1\"\nassert solution(\"8 2 6\") == \"Final!\"\nassert solution(\"8 7 5\") == \"2\"\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2\\n\") == \"1\"\nassert solution(\"8 2 6\\n\") == \"Final!\"\nassert solution(\"8 7 5\\n\") == \"2\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\nn, a, b = map(int, input().split())\ncounter = defaultdict(int)\n\nfor team in range(1, n + 1):\n    counter[team] = 1\n\nfor team in range(1, n + 1):\n    if team!= a and team!= b:\n        counter[team] = counter[team - 1] + 1"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\") == '1'\nassert solution(\"8 2 6\") == 'Final!'\nassert solution(\"8 7 5\") == '2'\n\nprint(\"Success!\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2\") == \"1\"\nassert solution(\"8 2 6\") == \"Final!\"\nassert solution(\"8 7 5\") == \"2\"\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == \"Final!\\n\"\nassert solution(\"8 1 2\") == \"2\\n\"\nassert solution(\"8 2 6\") == \"Final!\\n\"\nassert solution(\"8 7 5\") == \"2\\n\""
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2\") == \"1\"\nassert solution(\"8 2 6\") == \"Final!\"\nassert solution(\"8 7 5\") == \"2\"\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2\") == \"1\"\nassert solution(\"8 2 6\") == \"Final!\"\nassert solution(\"8 7 5\") == \"2\"\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2\") == \"1\"\nassert solution(\"8 2 6\") == \"Final!\"\nassert solution(\"8 7 5\") == \"2\"\n\"\"\"\n\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(\"Final!\" if (a + b) % 2 == 0 and a % 2 == 1 and b % 2 == 1 else a + b - 1)\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 1 2''') == '1'\nassert solution('''8 2 6''') == 'Final!'\nassert solution('''8 7 5''') == '2'\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == \"1\"\nassert solution(\"8 2 6\") == \"Final!\"\nassert solution(\"8 7 5\") == \"2\"\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2 1\\n0 0 0\\n\") == \"2\"\nassert solution(\"3 2 1\\n0 0 0\\n\") == \"1\"\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 2 1') == '2'\nassert solution('3 2 1') == '1'\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2 1\") == \"2\"\nassert solution(\"2 3 1\") == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2 1') == '2'\nassert solution('3 2 1') == '1'\nassert solution('3 2 2 2 1 2 2 2 1 2 1 2 2 1 2') == '1'\nassert solution('3 2 2 2 1 2 2 2 1 2 1 2 2 1 2') == '1'\nassert solution('4 3 2 1') == '2'\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 2 1\\n0 1 1 1') == '2'\n\nassert solution('3 2 1\\n0 0 0') == '1'\n\nassert solution('4 3 2 1\\n0 1 1 1') == '1'\n\nassert solution('4 3 2 1\\n0 0 0') == '1'\n\nassert solution('4 3 2 1\\n0 1 1 1') == '2'"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 2 1\\n0 1 1 1') == 2\nassert solution('3 2 1\\n0 0 0') == 1\n\"\"\"\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 2 1\\n0 1 1 1\\n') == '2'\nassert solution('3 2 1\\n0 0 0\\n') == '1'\n\n-----\n\nSample Tests:\n\nInput:\n3\n1 2 3\n1 1 0\n\nOutput:\n2\n\nInput:\n3\n1 2 3\n1 1 1\n\nOutput:\n1\n\nInput:\n4\n4 3 2 1\n1 1 1 1\n\nOutput:\n0\n\nInput:\n3\n1 2 3\n1 1 0\n\nOutput:\n2\n\nInput:\n4\n4 3 2 1\n1 1 1 1\n\nOutput:\n2\n\nInput:\n4\n4 3 2 1\n1 1 1 1\n\nOutput:\n2\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2 1\") == \"2\"\nassert solution(\"3 2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2 1\\n0 1 1 1\") == 2\n\"\"\""
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 2 1\\n0 1 1 1') == 2\n\n\"\"\"\nimport sys\nfrom typing import List, Dict\n\nfrom utils.get_inputs import get_inputs\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6\\n4 2') == '26'\nprint('Test 1: OK\\n')\n\nassert solution('10 10\\n10 0') == '100'\nprint('Test 2: OK\\n')\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"26\"\nassert solution(\"10 10\") == \"100\"\n\"\"\"\n\nfrom math import *\n\nv_1, v_2, d, t = map(int, input().split())\n\nprint(f\"{(v_2 - v_1) * t + v_1 * d}\")\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n4 2\") == \"26\"\n\"\"\""
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n4 2') == '26'\nassert solution('10 10\\n10 0') == '100'\nassert solution('4 2\\n10 2') == '12'\nassert solution('5 2\\n10 10') == '12'\nassert solution('10 2\\n10 10') == '100'\n\n\"\"\""
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10\") == \"100\"\nassert solution(\"5 6\") == \"26\"\n\"\"\"\n\nv1, v2 = map(int, input().split())\nt, d = map(int, input().split())"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n4 2\") == \"26\"\n\"\"\"\n\nimport sys\n\nv1, v2 = map(int, sys.stdin.readline().split())\nt, d = map(int, sys.stdin.readline().split())\n\nprint(abs(v2 - v1) * t + abs(d * t - abs(v2 - v1)))"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n4 2\") == \"26\"\nassert solution(\"10 10\\n10 0\") == \"100\"\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n4 2') == '26'\nassert solution('10 10\\n10 0') == '100'\nassert solution('10 10\\n1 0') == '10'\nassert solution('10 10\\n9 10') == '110'\nassert solution('10 10\\n11 0') == '110'\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n4 2') == '26'\nassert solution('10 10\\n10 0') == '100'\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n4 2\") == \"26\"\n\"\"\"\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3 2\n1 4 2\n10 4\n2 6\n\"\"\") == \"10\"\nassert solution(\n\"\"\"\n3 2\n1 4 2\n10 4\n2 6\n\"\"\") == \"-1\"\nassert solution(\n\"\"\"\n4 2\n1 4 2\n10 4\n1 6 3\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n5 2\n1 4 2\n10 4\n1 6 3\n\"\"\") == \"-1\"\nassert solution(\n\"\"\"\n5 2\n1 4 2\n10 4\n1 6 3\n\"\"\") == \"6\"\n\n\"\"\"\nN=3\nM=2\nw_1 w_2 \\cdots w_N\nl_1 v_1\n\\vdots\nl_M v_M\n\n1,4,2\n10,4\n2,6\n\n10,4\n1,6,3\n\"\"\"\n\nn, m = map(int, input().split())\nweights = list(map(int, input().split()))\nlengths = list(map(int, input().split()))\nweights.sort(reverse=True)\nlengths.sort(reverse=True)"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 4 2\\n10 4\") == \"10\"\nassert solution(\"4 2\\n1 4 2\\n10 4\") == \"-1\"\nassert solution(\"4 2\\n1 10 2\\n10 4\") == \"10\"\n\"\"\""
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 4 2\\n10 4\") == \"10\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\nweights = [int(x) for x in input().split()]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        dp[i][j] = max(\n            dp[i - 1][j],\n            dp[i][j - 1],\n            dp[i - 1][j - 1] + abs(weights[i - 1] - weights[j - 1])\n        )\n\nprint(dp[-1][-1])\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == '3'\nassert solution(\"1 4 2\") == '0'\nassert solution(\"1 2 1\") == '1'\nassert solution(\"1 1 1\") == '-1'\nassert solution(\"3 2 2\") == '3'\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 4 2\\n10 4\\n2 6') == '10'\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 4 2\\n10 4') == '10'\n\"\"\"\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 4 2\\n10 4\\n2 6\") == \"10\"\nassert solution(\"3 2\\n1 4 2\\n10 4\\n2 6\") == \"10\"\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\n------Solution------\n\"\"\""
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 4 2\\n10 4\\n2 6\") == 10\n\n\"\"\""
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 2\n1 4 2\n10 4\n2 6''') == '10'\n\nassert solution('''3 2\n1 4 2\n10 4\n2 6''') == '-1'\n\nassert solution('''1 1\n1 1\n0 1''') == '-1'\n\nassert solution('''3 2\n1 4 2\n10 4\n2 6''') == '10'\n\nassert solution('''3 2\n1 4 2\n10 4\n2 6''') == '10'"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == '2'\nassert solution(\"0 10\") == '0'\nassert solution(\"107 109\") == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4\\n') == '2'\nassert solution('0 10\\n') == '0'\nassert solution('107 109\\n') == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4') == '2'\nassert solution('0 10') == '0'\nassert solution('107 109') == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"0 10\") == \"0\"\nassert solution(\"107 109\") == \"2\"\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\") == \"2\"\nassert solution(\"0 10\") == \"0\"\n\"\"\""
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4') == '2'\nassert solution('0 10') == '0'\nassert solution('107 109') == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4\\n') == '2'\nassert solution('0 10\\n') == '0'\nassert solution('107 109\\n') == '2'\nassert solution('4 6\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4') == '2'\n\nassert solution('0 10') == '0'\n\nassert solution('107 109') == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\") == \"2\"\n\nassert solution(\"0 10\") == \"0\"\n\nassert solution(\"107 109\") == \"2\"\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"2\"\n\nassert solution(\"0 10\") == \"0\"\n\nassert solution(\"107 109\") == \"2\"\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10010101\") == \"2\"\nassert solution(\"11100101\") == \"-1\"\nassert solution(\"101111100101\") == \"4\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 4 10010101') == '2'\nassert solution('4 2 1001') == '-1'\nassert solution('12 3 101111100101') == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 4\\n10010101\") == \"2\"\nassert solution(\"4 2\\n1001\") == \"-1\"\nassert solution(\"8 4\\n11100101\") == \"3\"\n\nimport math\nimport time\nimport sys\nfrom random import randint\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10010101\") == \"2\"\nassert solution(\"11100101\") == \"-1\"\nassert solution(\"101111100101\") == \"4\"\n\"\"\""
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 4') == '2'\nassert solution('11100101') == '4'\nassert solution('12 3') == '-1'\n\nprint('The solution is correct!')"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 4 10010101') == '2'\nassert solution('4 2 1001') == '-1'\nassert solution('12 3 101111100101') == '4'\nassert solution('8 3 11100101') == '3'\n\n\"\"\""
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10010101') == 2\n\nassert solution('11100101') == -1\n\nassert solution('101111100101') == 4\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 4') == '2'\nassert solution('12 3') == '-1'\nassert solution('10010101') == '2'\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\") == \"2\"\nassert solution(\"11100101\") == \"3\"\nassert solution(\"12 3\") == \"-1\"\nassert solution(\"10010101\") == \"4\""
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 4 10110101') == '2'\nassert solution('4 2 11111101') == '-1'\nassert solution('8 4 10110101') == '2'\nassert solution('12 3 101111100101') == '4'\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == '1'\nassert solution(\"4\") == '2'\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '5'\n\n\"\"\""
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\n\"\"\""
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\""
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '1'\nassert solution('6') == '2'\nassert solution('7') == '1'\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\n\"\"\"\n\nn = int(stdin.readline())\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1359257\") == \"YES\"\nassert solution(\"17851817\") == \"NO\"\n\"\"\""
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1359257) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1359257) == \"YES\"\nassert solution(17851817) == \"NO\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1359257\") == \"YES\"\nassert solution(\"17851817\") == \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\nprint(solution('1359257'))\nprint(solution('17851817'))\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\nassert solution('9124') == 'YES'\nassert solution('91248') == 'NO'\nassert solution('0') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1359257\") == \"YES\"\nassert solution(\"17851817\") == \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1359257') == 'YES'\nassert solution('17851817') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n1 2\n1 0\n0 2''') == 'NO'\nassert solution('''2\n1 3\n1 0\n0 3''') == 'YES'\nassert solution('''2\n1 3\n1 0\n0 3\n2 4\n4 0\n-1 2\n''') == 'YES'\nassert solution('''2\n1 2\n1 0\n0 2\n1 0\n0 3''') == 'NO'\nassert solution('''2\n1 3\n1 0\n0 2\n0 3\n1 0\n0 3\n2 4\n4 0\n-1 2\n''') == 'YES'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\") == \"YES\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\") == \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\\n1 0\\n0 1\\n0 2\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\\n\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\\n\") == \"YES\"\nassert solution(\"2\\n1 3\\n1 0\\n0 3\\n\") == \"YES\"\n\"\"\"\n\nn = int(input())\nx1, x2 = map(int, input().split())\n\nlines = [tuple(map(int, input().split())) for _ in range(n)]\n\nfor k, b in lines:\n    if (x1 < k * x2 + b) and (x1 < k * x1 + b):\n        print(\"YES\")\n        exit()\nprint(\"NO\")"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2') == 'NO'\nassert solution('2\\n1 3\\n1 0\\n-1 3') == 'YES'\nassert solution('2\\n1 3\\n1 0\\n0 3') == 'YES'\nassert solution('2\\n1 3\\n1 0\\n0 2') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\\n\") == \"NO\"\nassert solution(\"2\\n1 3\\n1 0\\n-1 3\\n\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"8\") == \"5\"\nassert solution(\"9\") == \"5\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"8\") == \"5\"\nassert solution(\"9\") == \"5\"\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"9\") == \"5\"\nassert solution(\"7\") == \"4\"\nassert solution(\"16\") == \"4\"\n\"\"\""
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7') == 4\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == 5\n\"\"\"\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"8\") == \"5\"\nassert solution(\"9\") == \"5\"\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"9\") == \"5\"\nassert solution(\"7\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(8) == 5\n\nassert solution(9) == 5\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"9\") == \"5\"\nassert solution(\"7\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n''') == '1 3'\nassert solution('''\n7 3\n''') == '1 4'\nassert solution('''\n6 3\n''') == '1 5'\nassert solution('''\n6 3\n''') == '1 5'\nassert solution('''\n6 1\n''') == '1 2 3'\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '1 3'\nassert solution('2 2') == '1'\nassert solution('6 3') == '1 3'\nassert solution('10 10') == '5 9'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3') == '1 3'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n2 1 2\") == \"1 3\"\nassert solution(\"6 3\\n3 2 3 1 2 4\") == \"1 3\"\n\"\"\"\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3') == '1 3'\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 4\") == \"1 3\"\nassert solution(\"6 3\\n1 2 3 4 5 6 7\\n2 5\\n1 3\") == \"1 4\"\n\"\"\"\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"1 3\"\nassert solution(\"5 4\") == \"1 4\"\nassert solution(\"10 10\") == \"2 10\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3') == '1 3'\n\"\"\""
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3') == '1 3'\nassert solution('7 3') == '1 4'\nassert solution('10 1') == '1 1'\nassert solution('10 10') == '1 2'\nassert solution('10 100') == '1 2'\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2') == '1 3'\nassert solution('4 4') == '1 4'\nassert solution('6 5') == '1 3'\nassert solution('7 5') == '1 3'\nassert solution('8 5') == '1 5'\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"4\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == 2\nassert solution(\"10\") == 4\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('4') == '2'\n\"\"\"\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 1\nassert solution('3') == 2\nassert solution('4') == 2\nassert solution('10') == 4\n\"\"\"\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('10') == '4'\n\nassert solution(2) == '1'\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\n\"\"\"\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"VV\") == 1\nassert solution(\"VK\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"VK\") == 1\nassert solution(\"VV\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('VV') == 1\nassert solution('VK') == 1\nassert solution('VKKKKKKKKKVVVVVVVVVK') == 3\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('VK') == 1\nassert solution('VV') == 1\nassert solution('VKKKKKKKKKVVVVVVVVVK') == 3\nassert solution('KVKV') == 1\nassert solution('VKKK') == 1\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"V\") == 0\nassert solution(\"VK\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3\n\"\"\"\n\ns = input()\n\nprint(s.count(\"VV\") + s.count(\"KK\") - 1)\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"VV\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"VV\") == 1\nassert solution(\"V\") == 0\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"VV\") == 1\nassert solution(\"VK\") == 1\nassert solution(\"VKK\") == 1\nassert solution(\"VKKKK\") == 1\nassert solution(\"VVVV\") == 1\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"VK\") == 1\nassert solution(\"VV\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"VK\") == 1\nassert solution(\"VV\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVK\") == 3\n\n\"\"\"\n\n\"\"\"\nYou are given an array of strings\u00a0words\u00a0and a string\u00a0mask.\n\nThis is the\u00a0mask\u00a0of a\u00a0given\u00a0secret\u00a0string,\u00a0which\u00a0is\u00a0a string\u00a0made up of only\u00a0lowercase letters.\n\nThe\u00a0other\u00a0words\u00a0in\u00a0words\u00a0are\u00a0secret\u00a0friends of the\u00a0mask\u00a0string.\u00a0A\u00a0word\u00a0is\u00a0a\u00a0secret\u00a0friend\u00a0if\u00a0it\u00a0shares\u00a0exactly\u00a0one\u00a0letter\u00a0with\u00a0the\u00a0mask\u00a0string.\u00a0\n\nReturn\u00a0the\u00a0number\u00a0of\u00a0secret\u00a0friends of the\u00a0mask\u00a0string.\n\n\u00a0\n\nExample 1:\n\nInput: words = [\"word\",\"world\",\"row\"], mask = \"worl\"\nOutput: 1\nExplanation:\nIf we select \"word\" or \"world\", we will have \"worl\" which shares 8/10\u00a0characters with it.\nThere is\u00a0exactly\u00a0one\u00a0word in\u00a0words\u00a0that\u00a0matches\u00a0with\u00a0the\u00a0mask\u00a0\"worl\".\n\nExample 2:\n\nInput: words = [\"apple\",\"pleas\"], mask = \"apple\"\nOutput: 1\n\nExample 3:\n\nInput: words = [\"please\",\"me\",\"apple\"], mask = \"mpple\"\nOutput: 3\nExplanation: All the three words can be used to create a string\u00a0that\u00a0matches\u00a0the\u00a0mask.\nPlease choose \"me\" since it has only 1 character, then choose\u00a0\"pleas\".\nThen,\u00a0we\u00a0will\u00a0have\u00a0\"mpple\"\u00a0which\u00a0matches\u00a0with\u00a0the\u00a0mask.\n\nExample 4:\n\nInput: words = [\"blue\",\"green\",\"bu\"]\nOutput: 0\nExplanation:\u00a0No word in\u00a0words\u00a0matches\u00a0the\u00a0mask.\n\n\u00a0\n\nConstraints:\n\n    1 <=\u00a0words.length <= 100\n    1 <=\u00a0words[i].length <= 100\n    1 <=\u00a0mask.length\u00a0<= 100\n    words[i]\u00a0and\u00a0mask\u00a0consist\u00a0of\u00a0lowercase\u00a0English letters.\n    Each\u00a0word\u00a0in\u00a0words\u00a0has\u00a0exactly\u00a0one\u00a0letter\u00a0that\u00a0matches\u00a0with\u00a0a\u00a0letter\u00a0in\u00a0the\u00a0mask.\n\n\n\"\"\""
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 2\n\"\"\"\n\nimport itertools\nfrom itertools import combinations\nfrom collections import defaultdict"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"4\""
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\nassert solution('6') == '6'\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '5'\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == 2\nassert solution(2) == 3\nassert solution(3) == 4\n\"\"\""
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 3\nassert solution('4') == 4\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 2\nassert solution(\"2\") == 3\nassert solution(\"4\") == 4\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\n\nassert solution(\"4\") == \"3\"\n\nassert solution(\"5\") == \"4\"\n\nassert solution(\"10\") == \"9\"\n\nassert solution(\"100\") == \"18\"\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7\") == \"2\"\nassert solution(\"4 9\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 7') == '2'\nassert solution('4 9') == '3'\nassert solution('1 1') == '1'\n\"\"\"\n\na, b = [int(i) for i in input().split()]\nprint(int(a * (a * 3 + 1) / 2 < a * b) + 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7\") == \"2\"\nassert solution(\"4 9\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7\") == \"2\"\nassert solution(\"4 9\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7\") == \"2\"\nassert solution(\"4 9\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 7') == '2'\nassert solution('4 9') == '3'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7\") == 2\nassert solution(\"4 9\") == 3\n\"\"\"\n\na, b = map(int, input().split())\ncount = 0\n\nwhile a <= b:\n    count += 1\n    a = 3 * a\n    b = 2 * b\n\nprint(count)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7\") == \"2\"\nassert solution(\"4 9\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7') == '2'\nassert solution('4 9') == '3'\nassert solution('1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7') == '2'\nassert solution('4 9') == '3'\nassert solution('1 1') == '1'\n\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 3') == '5'\nassert solution('3 6') == '10'\n\"\"\"\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"1 2 3 4 5\") == \"13\"\nassert solution
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"3 6\") == \"10\"\nassert solution(\"10 1024\") == \"2046\"\n\n\"\"\"\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"3 6\") == \"10\"\nassert solution(\"10 1024\") == \"2046\"\n\n\n\n\"\"\"\nfrom typing import List\n\nfrom termcolor import colored\n\nfrom common import INPUT_TXT, print_solution\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"3 6\") == \"10\"\nassert solution(\"10 1024\") == \"2046\"\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 3') == '5'\nassert solution('3 6') == '10'\nassert solution('10 1024') == '2046'\n\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 3') == '5'\nassert solution('3 6') == '10'\nassert solution('10 1024') == '2046'\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2 1 2\"\nassert solution(\"8\") == \"1 8\\n2 3\\n3 2\\n8 1\"\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('26') == '6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1'\n\"\"\"\nimport sys\n\nx = int(sys.stdin.readline().rstrip())\n\nassert x <= 10 ** 18, \"\u0427\u0438\u0441\u043b\u043e \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\""
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"1\") == 1\nassert solution(\"3\") == 3\nassert solution(\"6\") == 6\nassert solution(\"8\") == 4\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('26') == 6\nassert solution('2') == 2\nassert solution('8') == 4\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('26') == '6'\nassert solution('2') == '2'\n\"\"\"\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"26\") == \"6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1\"\nassert solution(\"2\") == \"2\\n1 2\\n2 1\"\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"26\") == \"6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1\"\nassert solution(\"2\") == \"2\\n1 2\\n2 1\"\nassert solution(\"8\") == \"4\\n1 8\\n2 3\\n3 2\\n8 1\"\nprint('Success')\n\"\"\"\n\nx = int(input())"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"26\") == \"6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1\"\nassert solution(\"2\") == \"2\\n1 2\\n2 1\"\nassert solution(\"8\") == \"4\\n1 8\\n2 3\\n3 2\\n8 1\"\n\"\"\""
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"26\") == \"6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1\"\nassert solution(\"2\") == \"2\\n1 2\\n2 1\"\nassert solution(\"8\") == \"4\\n1 8\\n2 3\\n3 2\\n8 1\"\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"26\") == \"6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1\"\nassert solution(\"2\") == \"2\\n1 2\\n2 1\"\nassert solution(\"8\") == \"4\\n1 8\\n2 3\\n3 2\\n8 1\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"31 31 30 31\") == \"Yes\"\nassert solution(\"31 31 30 31 30\") == \"No\"\nassert solution(\"29 31 30 31 30\") == \"Yes\"\nassert solution(\"31 31 28\") == \"No\"\nassert solution(\"31 31 28 30\") == \"Yes\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 31 31 30 31\") == \"YES\"\nassert solution(\"2 30 30\") == \"NO\"\nassert solution(\"5 29 31 30 31 30\") == \"YES\"\nassert solution(\"3 31 31 28\") == \"NO\"\nassert solution(\"3 31 31 28\") == \"YES\"\n\"\"\"\n\n\nimport sys\nfrom collections import namedtuple\n\n\"\"\"\ngcd(a, b) -> int: \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0431\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u0430 \u0438 b\n\"\"\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n31 31 30 31\\n\") == \"Yes\"\nassert solution(\"2\\n30 30\\n\") == \"No\"\nassert solution(\"5\\n29 31 30 31 30\\n\") == \"Yes\"\nassert solution(\"3\\n31 31 28\\n\") == \"No\"\n\nSolution:\n    def can_be_duration(days_array):\n        days_array.sort()\n        for i in range(len(days_array) - 1):\n            if (days_array[i + 1] - days_array[i]) % 7!= 0:\n                return False\n        return True\n\n    days_list = list(map(int, stdin.split(\"\\n\")))[1:]\n\n    if len(days_list) == 1:\n        return \"YES\" if can_be_duration(days_list) else \"NO\"\n\n    for i in range(1, len(days_list)):\n        days_list[i] += days_list[i - 1]\n        days_list[i] %= 7\n\n    return \"YES\" if can_be_duration(days_list) else \"NO\"\n\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n31 31\\n30 30\") == \"No\"\nassert solution(\"4\\n31 31 30 31\\n\") == \"Yes\"\nassert solution(\"5\\n29 31 30 31 30\\n\") == \"Yes\"\nassert solution(\"3\\n31 31 28\\n\") == \"No\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 31 30 31\\n') == 'Yes'\nassert solution('2 30 30\\n') == 'No'\nassert solution('5 29 31 30 31 30\\n') == 'Yes'\nassert solution('3 31 28\\n') == 'No'\nassert solution('3 31 31 28\\n') == 'No'\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 31 31 30 31\") == \"Yes\"\nassert solution(\"2 30 30\") == \"No\"\nassert solution(\"5 29 31 30 31 30\") == \"Yes\"\nassert solution(\"3 31 28\") == \"No\"\nassert solution(\"3 31 31 28\") == \"Yes\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n31 31 30 31 30''') == 'YES'\nassert solution('''2\n30 30''') == 'NO'\nassert solution('''3\n31 28 30''') == 'YES'\nassert solution('''3\n31 31 28''') == 'NO'\nassert solution('''3\n31 31 28 30''') == 'YES'\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n 31 31 30 31\") == \"YES\"\nassert solution(\"2\\n 30 30\") == \"NO\"\nassert solution(\"5\\n 29 31 30 31 30\") == \"YES\"\nassert solution(\"3\\n 31 31 28\") == \"NO\"\nassert solution(\"3\\n 31 31 28\") == \"YES\"\n\nsolution(\"5\\n 29 31 30 31 30\")\nsolution(\"3\\n 31 31 28\")"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n31 31 30 31\\n') == 'Yes'\nassert solution('5\\n29 31 30 31 30\\n') == 'No'\nassert solution('3\\n31 31 28\\n') == 'Yes'\n\n\"\"\"\n\nn = int(stdin.readline().strip())\n\ndays = list(map(int, stdin.readline().split(' ')))"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n31 31 30 31\\n') == 'Yes'\nassert solution('2\\n30 30\\n') == 'No'\nassert solution('5\\n29 31 30 31 30\\n') == 'Yes'\nassert solution('3\\n31 31 28\\n') == 'Yes'\nassert solution('3\\n31 31 28\\n') == 'No'\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 'YES'\nassert solution('6') == 'YES'\nassert solution('7') == 'YES'\nassert solution('8') == 'YES'\nassert solution('9') == 'YES'\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'NO'\nassert solution('6') == 'YES'\nassert solution('1') == 'NO'\nassert solution('10') == 'NO'\nassert solution('15') == 'YES'\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == \"NO\"\nassert solution(6) == \"YES\"\nassert solution(10) == \"YES\"\nassert solution(7) == \"NO\"\nassert solution(10000) == \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"3 2\") == \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 'NO'\nassert solution('6') == 'YES'\nassert solution('10') == 'YES'\nassert solution('11') == 'NO'\nassert solution('101010') == 'YES'\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(6) == 'YES\\n2\\n1 2'\nassert solution('1') == 'YES\\n1\\n1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"10\") == \"YES\"\n\"\"\"\n\nfrom collections import deque\nfrom fractions import Fraction\n\nfrom collections import deque\nfrom fractions import Fraction"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"6\") == \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'NO'\nassert solution('6') == 'YES'\nassert solution('10') == 'YES'\nassert solution('11') == 'NO'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"4 3\"\n) == 3\nassert solution(\n\"3 2\"\n) == -1\n\"\"\""
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 3 1\") == \"3\"\nassert solution(\"3 3 4 1\") == \"2\"\nassert solution(\"3 3 4 1\") == \"2\"\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n3 3 4 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7\") == '3', f\"Test 1 {solution('4 7')}\"\nassert solution(\"3 3 4 1\") == '3', f\"Test 2 {solution('3 3 4 1')}\"\nassert solution(\"3 3\") == '-1', f\"Test 3 {solution('3 3')}\"\nassert solution(\"3\") == '2', f\"Test 4 {solution('3')}\"\nassert solution(\"2 2 2\") == '-1', f\"Test 5 {solution('2 2 2')}\"\n\"\"\""
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 3 1\\n') == \"3\"\nassert solution('3 3\\n2 2 2\\n') == \"-1\"\n\"\"\""
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == 3\nassert solution(\"5 7\") == 3\nassert solution(\"3 3 4 1\") == 2\nassert solution(\"1 1 2\") == 2\nassert solution(\"1 2 1 2 3 1 1 1 2\") == 2\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 2 3\") == \"7\"\nassert solution(\"3 3 4 1\\n2 2 2\\n1 3 1\") == \"3\"\nassert solution(\"3 3 4 1\\n2 2 2\\n1 3 1\") == \"2\"\nassert solution(\"3 3 4 1\\n2 2 2\\n1 3 1\") == \"2\"\n\"\"\"\n\n\n\nfrom typing import Tuple\nfrom math import ceil\nimport sys\nimport os\nimport argparse\nimport operator\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 3 3 1\") == 3\nassert solution(\"3 3 4 1\") == 2\nassert solution(\"3 3 4 1\") == 2\nassert solution(\"2 3 3 1\") == -1\n\"\"\""
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 3 3 4 1\") == \"3\"\nassert solution(\"5 7 2 3 4 1\") == \"4\"\nassert solution(\"3 3 4 1\") == \"2\"\nassert solution(\"2 2 2\") == \"-1\""
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7\\n3 3 4 1\") == \"3\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 3') == \"YES\\n1 0\\n2 3\\n4 1\"\nassert solution('4 4 7') == \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 3') == 'YES'\nassert solution('4 4 7') == 'NO'\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 3') == 'YES'\nassert solution('4 4 7') == 'NO'\nassert solution('5 5 1') == 'NO'\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 3') == 'YES\\n1 0\\n2 3\\n4 1'\nassert solution('4 4 7') == 'NO'"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 3\") == \"YES\"\nassert solution(\"4 4 7\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 3\") == \"YES\\n1 0\\n2 3\\n4 1\"\nassert solution(\"4 4 7\") == \"NO\"\nassert solution(\"10 9 9\") == \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 3\") == \"YES\\n1 0\\n2 3\\n4 1\"\nassert solution(\"4 4 7\") == \"NO\"\n\"\"\"\n\nimport math\n\nn, m, k = [int(i) for i in input().split()]\n\nl = int(math.floor(m / k))\n\nfor i in range(l):\n    if i * k + m % k == 0:\n        print(\"YES\")\n        print(f\"{i + 1} {i + 1}\")\n        print(f\"{i + 1} {m - i - 1}\")\n        break\nelse:\n    print(\"NO\")\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 3\") == \"YES\\n1 0\\n2 3\\n4 1\\n\"\nassert solution(\"4 4 7\") == \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"YES\\n1 0\\n2 3\"\nassert solution(\"3 3 3\") == \"NO\""
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 3') == 'YES\\n1 0\\n2 3\\n4 1'\nassert solution('4 4 7') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"10 4\") == \"NO\""
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('10 4') == 'NO'\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == \"YES\"\nassert solution('10 4\\n') == \"NO\"\n\nprint(\"All test cases passed.\")"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\nassert solution(\"5 4\") == \"YES\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('10 4') == 'NO'\nassert solution('10 2') == 'YES'\nassert solution('10 1') == 'NO'\nassert solution('10 10') == 'YES'\n\"\"\"\n\nn, k = [int(x) for x in input().split()]"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"YES\"\nassert solution(\"10 4\") == \"NO\"\nassert solution(\"9 10\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"2 1\") == \"NO\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 8\") == \"biceps\"\nassert solution(\"3 5 1 10\") == \"back\"\nassert solution(\"7 3 3 2 7 9 6 8\") == \"chest\"\n\"\"\""
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2\n8\n''') == 'biceps'\nassert solution('''\n3\n5 1 10\n''') == 'back'\nassert solution('''\n7\n3 3 2 7 9 6 8\n''') == 'chest'\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\n8\n''') == 'biceps'\nassert solution('''3\n5 1 10\n''') == 'back'\nassert solution('''7\n3 3 2 7 9 6 8\n''') == 'chest'\nprint(\"Passed\")\n\n-----\n2\n8\n\nbiceps\n\n3\n5 1 10\n\nback\n\n7\n3 3 2 7 9 6 8\n\nchest\n\n>>> \n\n-----\n3\n5 1 10\n\nback\n\n>>> \n\n-----\n7\n3 3 2 7 9 6 8\n\nchest\n\n>>> \n\n-----\n2\n8\n\nbiceps\n\n>>> \n\n-----\n5\n1 10\n\nback\n\n>>> \n\n-----\n1\n9\n\nchest\n\n>>> \n\n-----\n9\n9\n\nback\n\n>>> \n\n-----\n18\n9\n\nbiceps\n\n>>> \n\n-----\n12\n12\n\nback\n\n>>> \n\n-----\n'''\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n2 8\n''') == 'biceps'\n\nassert solution('''3\n5 1 10\n''') == 'back'\n\nassert solution('''7\n3 3 2 7 9 6 8\n''') == 'chest'\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n5 1 10''') == 'back'\n\nassert solution('''7\n3 3 2 7 9 6 8''') == 'chest'\n\nassert solution('''2\n8 8''') == 'biceps'\n\nassert solution('''1\n1''') == 'chest'\n\nassert solution('''4\n5 1 10''') == 'back'"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2 7 9 6 8\") == \"chest\"\nassert solution(\"5 1 10\") == \"back\"\nassert solution(\"7 3 3 2 7 9 6 8\") == \"chest\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n3 3 2 7 9 6 8\") == \"chest\"\nassert solution(\"5\\n1 10 1 1 1\") == \"biceps\"\nassert solution(\"2\\n8 1\") == \"biceps\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 8\") == \"biceps\"\nassert solution(\"3 5 1 10\") == \"back\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 4 1\") == \"back\"\nassert solution(\"4\\n3 3 3 1\") == \"biceps\"\nassert solution(\"4\\n1 2 3 4\") == \"chest\"\nassert solution(\"3\\n1 2 3\") == \"back\"\nassert solution(\"3\\n3 1 2\") == \"biceps\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n8') == 'biceps'\nassert solution('3\\n5 1 10') == 'back'\nassert solution('7\\n3 3 2 7 9 6 8') == 'chest'\n\"\"\"\nimport sys"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 4\") == \"2\"\nassert solution(\"5 4 5 5\") == \"0\"\nassert solution(\"4 3 3 5\") == \"1\"\nprint('The code ran successfully')\n\n---Problem 3.\n\nGiven two strings of the same length, determine whether one of them is a permutation of the other.\n\n-----Input-----\n\nThe first line contains a single integer\u00a0$n$\u00a0\u2014 the length of the first string. The second line contains a string\u00a0$s$\u00a0\u2014 the first string. The third line contains a single integer\u00a0$m$\u00a0\u2014 the length of the second string. The fourth line contains a string\u00a0$t$\u00a0\u2014 the second string.\n\n-----Output-----\n\nA string\u00a0\"YES\"\u00a0if\u00a0one of the strings is a permutation of the other one; \"NO\"\u00a0otherwise.\n\n-----Examples-----\nInput\n5\ntoast\n4\ntoast\n3\ntoast\n\nOutput\nYES\n\nInput\n5\ntoast\n4\ntoast\n3\ntoast\n\nOutput\nNO\n\nInput\n6\ntat\ncat\n6\ntat\ncat\n\nOutput\nNO\n\nInput\n6\ntat\ntat\n6\ntat\ntat\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first sample, there is no need to compare the strings because both of them are the same length and contain the same letters.\n\nIn the second sample, the strings are not permutations of each other because there are two distinct letters 't' in them.\n\nIn the third sample, Vasya should compare the strings because the first string contains two distinct letters.\n\nIn the fourth sample, the strings are not permutations of each other because there is no letter in the first string that doesn't appear in the second one.\n\nIn the fourth sample, Vasya should compare the strings because the second string contains two distinct letters.\n\nIn the fourth sample, Vasya should compare the strings because the first string contains two distinct letters.\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n4 4 4') == '2'\nassert solution('4\\n5 4 5 5') == '0'\nassert solution('4\\n5 3 3 5') == '1'\n\n\"\"\""
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4 4 4\") == \"2\"\nassert solution(\"4\\n5 4 5 5\") == \"0\"\nassert solution(\"4\\n5 3 3 5\") == \"1\"\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 4\") == '2'\nassert solution(\"5 4 5 5\") == '0'\nassert solution(\"4 5 3 5\") == '1'\n\n'''"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 4\") == \"2\"\nassert solution(\"5 4 5 5\") == \"0\"\nassert solution(\"4 3 3 5\") == \"1\"\nassert solution(\"4 4 4\") == \"2\"\nassert solution(\"4 4 4\") == \"2\"\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 4\") == \"2\"\nassert solution(\"5 4 5 5\") == \"0\"\nassert solution(\"5 3 3 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 4\\n5 4 5 5\") == \"2\"\nassert solution(\"4 5 4 5\\n5 3 3 5\") == \"1\"\nassert solution(\"5 4 5 4\\n5 4 5 5\") == \"0\"\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 4 4\") == '2'\nassert solution(\"4\\n5 4 5 5\") == '0'\nassert solution(\"4\\n5 3 3 5\") == '1'\n\"\"\""
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4 5 4\") == \"1\"\nassert solution(\"5 3 5 3 5\") == \"0\"\nassert solution(\"4 5 4\") == \"2\""
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5 4 5 5\") == \"1\"\nassert solution(\"3\\n5 4 5\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4') == '2'\nassert solution('1 3') == '3 1'\nassert solution('8 5') == '-1'\nassert solution('0 0') == '0'\n\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"2\"\nassert solution(\"1 3\") == \"3 1\"\nassert solution(\"8 5\") == \"1 1 1\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"8 1\") == \"1 1 1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4') == '2'\nassert solution('1 3') == '3 1'\nassert solution('8 5') == '-1'\nassert solution('0 0') == '0'\n\"\"\"\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4') == '2'\nassert solution('1 3') == '3'\nassert solution('8 5') == '-1'\nassert solution('0 0') == '0'\nassert solution('3 17') == '-1'\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"1 3\") == \"3 1\"\nassert solution(\"8 5\") == \"1 1 1\"\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == \"2\\n3 1\"\nassert solution(\"1 3\") == \"3\\n1 1 1\"\nassert solution(\"8 5\") == \"-1\"\nassert solution(\"0 0\") == \"0\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3') == '2'\nassert solution('2 4') == '2'\nassert solution('8 5') == '-1'\nassert solution('0 0') == '0'\n\"\"\"\n\nimport collections\nimport sys"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"2\", \"O(n^2)\"\nassert solution(\"1 3\") == \"3\", \"O(n)\"\nassert solution(\"8 5\") == \"-1\", \"O(n^2)\"\nassert solution(\"0 0\") == \"0\", \"O(n)\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"2 1\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"8 5\") == \"-1\"\nassert solution(\"0 0\") == \"0\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"8 5\") == \"-\"\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('121') == 6\n'''\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('121') == 6\n\"\"\"\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nn = int(input())\ni = 0\nwhile n > 0:\n    n -= 1\n    i += 1\nprint(i)\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12345\") == \"3\"\nassert solution(\"13579\") == \"2\"\nassert solution(\"99999\") == \"4\"\n\nassert solution(\"123456789\") == \"4\"\nassert solution(\"987654321\") == \"5\""
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"121\") == 6\nprint(solution(\"121\"))\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == 2\nassert solution(\"123\") == 3\nassert solution(\"4\") == 1\nassert solution(\"43\") == 2\n\"\"\""
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('121') == 6\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('121') == 6\nprint(solution('121'))\n\nInput\n7\n\nOutput\n1\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"121\") == 6\n\n\"\"\"\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('121') == 6\n\"\"\""
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 6\\n1 5\") == \"YES\"\nassert solution(\"1 1 3 6\\n1 5\") == \"NO\"\n\"\"\"\n\nx1, y1, x2, y2 = [int(num) for num in stdin.split()]\nx, y = [int(num) for num in stdin.split()]"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 6\") == \"YES\"\nassert solution(\"1 1 3 6\") == \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 6\") == \"YES\"\nassert solution(\"1 1 3 6\") == \"NO\"\n\"\"\"\n\nimport os\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 6\") == \"YES\"\n\nassert solution(\"1 1 3 6\") == \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 6\\n1 5\") == \"YES\"\nassert solution(\"1 1 3 6\\n1 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution_input_0) == solution_output_0\nassert solution(solution_input_1) == solution_output_1\n\"\"\"\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 3 6\") == \"NO\"\nassert solution(\"0 0 0 6\") == \"YES\"\n\"\"\"\n\nimport math\nfrom collections import deque\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 6\") == \"YES\"\nassert solution(\"1 1 3 6\") == \"NO\"\nassert solution(\"1 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a=\"0 0 0 6\") == 'YES'\nassert solution(a=\"1 1 3 6\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 3 6\") == \"YES\"\nassert solution(\"0 0 0 6\") == \"YES\"\nassert solution(\"0 0 0 0\") == \"NO\"\nassert solution(\"0 1 2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2028') == 13\nassert solution('97') == 2\nassert solution('0') == 1\nassert solution('8022') == 2\nassert solution('80') == 1\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"97\") == 2\nassert solution(\"2028\") == 13\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 5\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('97') == 2\nassert solution('2028') == 13\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"97\") == 2\nassert solution(\"2028\") == 13\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('97') == 2\nassert solution('2028') == 13\n\"\"\"\nimport math\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"97\") == \"2\"\nassert solution(\"2028\") == \"13\"\n\"\"\"\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2028') == 13\n\"\"\"\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('97') == 2\nassert solution('2028') == 13\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"97\") == 2\nassert solution(\"2028\") == 13\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5266876b8f4bf2da9b000362\n\"\"\""
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6') == '102'\nassert solution('17\\n14\\n5\\n21\\n15\\n17') == '325'\nprint('The local tests are done. Click on \"Check\" for more details about the cloud tests.')\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n0') == '0'\nassert solution('2\\n4\\n3') == '10'\nassert solution('4\\n3\\n4\\n5\\n6') == '33'\n\"\"\"\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6') == '102'\nassert solution('17\\n14\\n5\\n21\\n15\\n17') == '325'\nprint('Test finished')\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n6\\n3\\n1\\n2\") == \"6\"\n\nassert solution(\"12\\n11\\n13\\n20\\n4\\n6\") == \"102\"\n\nassert solution(\"17\\n14\\n5\\n21\\n15\\n17\") == \"325\""
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6') == '325'\nassert solution('17\\n14\\n5\\n21\\n15\\n17') == '325'\n\"\"\""
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n6\\n3\\n1\\n2\") == \"6\"\nassert solution(\"12\\n11\\n13\\n20\\n4\\n6\") == \"102\"\nassert solution(\"17\\n14\\n5\\n21\\n15\\n17\") == \"325\"\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6') == '102'\nassert solution('17\\n14\\n5\\n21\\n15\\n17') == '325'\n\n\"\"\""
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n6\\n3\\n1\\n2\") == \"6\"\nassert solution(\"12\\n11\\n13\\n20\\n4\\n6\") == \"102\"\nassert solution(\"17\\n14\\n5\\n21\\n15\\n17\") == \"325\""
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\\n11\\n13\\n20\\n4\\n6\") == \"325\"\nassert solution(\"17\\n14\\n5\\n21\\n15\\n17\") == \"325\""
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5\\n6\\n3\\n1\\n2\\n') == '6'\nassert solution('12\\n11\\n13\\n20\\n4\\n6\\n') == '102'\nassert solution('17\\n14\\n5\\n21\\n15\\n17\\n') == '325'\n\"\"\""
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 5 8\") == \"2\"\nassert solution(\"4 6 7 13\") == \"1\"\n\n\n\n-----Test-----\nYour code should pass the following tests:\n\nsolution(\n    \"\"\"233 233 10007 1\"\"\"\n    ) == \"1\"\nsolution(\n    \"\"\"2 3 5 8\"\"\"\n    ) == \"2\"\nsolution(\n    \"\"\"4 6 7 13\"\"\"\n    ) == \"1\"\nsolution(\n    \"\"\"233 233 10007 1\"\"\"\n    ) == \"1\"\nsolution(\n    \"\"\"2 3 5 8\"\"\"\n    ) == \"2\"\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 5 8\") == \"2\"\nassert solution(\"4 6 7 13\") == \"1\"\nassert solution(\"233 233 10007 1\") == \"1\"\n\n\"\"\"\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 5 8') == '2'\nassert solution('4 6 7 13') == '1'\nassert solution('233 233 10007 1') == '1'\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 5 8\") == \"2\"\n\nsolution(\"4 6 7 13\") == \"1\"\n\nsolution(\"233 233 10007 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6 7 13') == '1'\nassert solution('233 233 10007 1') == '1'\n\"\"\"\nimport math\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 5 8') == 2\nassert solution('4 6 7 13') == 1\n\n\n\n-----Test Case-----\npython3 -m cProfile -s cumulative solution(6)\n1    0.000    0.000    0.010    0.010 <string>:1(<module>)\n1    0.000    0.000    0.002    0.002 task_2.py:23(solution)\n100    0.010    0.010    0.010    0.010 task_2.py:23(solution)\n1    0.000    0.000    0.010    0.010 {built-in method builtins.exec}\n1    0.000    0.000    0.010    0.010 {built-in method builtins.len}\n1    0.000    0.000    0.010    0.010 {method 'disable' of '_lsprof.Profiler' objects}\n\n\u0412\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u043c\u0435\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438, \u0447\u0442\u043e \u043e\u0431\u044a\u0435\u043c \u0437\u0430\u0442\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u044a\u0435\u043c\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c: https://habr.com/ru/post/349034/\n\"\"\"\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 5 8\") == \"2\"\nassert solution(\"4 6 7 13\") == \"1\"\nassert solution(\"233 233 10007 1\") == \"1\"\n\n\"\"\"\nimport math\nimport numpy as np"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 5 8\") == \"2\"\nassert solution(\"4 6 7 13\") == \"1\"\n\"\"\"\n\nfrom typing import Dict\n\nimport math\nimport itertools\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 5 8') == '2'\nassert solution('4 6 7 13') == '1'\nassert solution('233 233 10007 1') == '1'\nassert solution('233 233 100001 1') == '-1'\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 5 8\") == \"2\"\nassert solution(\"4 6 7 13\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '256'\nassert solution('5 1 3 4') == '800'\nassert solution('5 1 1 1') == '256'\n\nprint('Success')"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 1 3 4''') == '800'\n\"\"\""
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 3 4\") == \"800\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 1 1') == '256'\nassert solution('2 1 3 4') == '800'\n\"\"\"\nimport itertools"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 3 4\") == '800'\n\"\"\"\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 3 4\") == \"800\"\nassert solution(\"1 1 1 1\") == \"256\"\nassert solution(\"1 1 1 1\") == \"256\"\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '256'\nassert solution('1 1 1 1') == '256'\n\"\"\"\n\n\nimport itertools\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 3 4\") == '800'\nassert solution(\"1 1 1 1\") == '256'"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 3 4\") == \"800\"\n\n\"\"\""
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 3 4') == '800'\nassert solution('1 1 1 1') == '256'\n\"\"\"\nimport itertools\nimport functools"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('\\n') == 0\nassert solution('6 4 3 1\\n') == 0\nassert solution('9 3 8 10\\n') == 2\nassert solution('2 2 1 1\\n') == 0\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 3 8 10') == 2\nassert solution('6 4 3 1') == 0\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 4 3 1\") == \"0\"\nassert solution(\"9 3 8 10\") == \"2\"\n\"\"\""
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4 3 1\") == 0\nassert solution(\"9 3 8 10\") == 2\n\"\"\"\n\nn, x, y, c = map(int, input().split())"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 3 1\") == \"0\"\nassert solution(\"9 3 8 10\") == \"2\"\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 4 3 1\") == 0\nassert solution(\"9 3 8 10\") == 2\n\nprint(\"Tests passed.\")\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 4 3 1') == '0'\nassert solution('9 3 8 10') == '2'\n\"\"\""
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 6 3 1\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4 3 1\") == '0'\nassert solution(\"9 3 8 10\") == '2'\nassert solution(\"1 1 1 1\") == '0'\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 8 10\") == \"0\"\nassert solution(\"5 6 3 1\") == \"0\"\nassert solution(\"6 7 3 1\") == \"0\"\nassert solution(\"9 3 8 10\") == \"2\"\nassert solution(\"9 3 8 10\") == \"2\"\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n') == 3\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == 3\n\"\"\""
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n') == 3\nassert solution('8 16\\n') == 31\nassert solution('1 1\\n') == 0\n\nprint('Success')\n\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"1 2\"\n) == \"3\"\n\nassert solution(\n    \"8 16\"\n) == \"31\"\n\nassert solution(\n    \"1 1\"\n) == \"0\"\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n') == 3\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"8 16\") == \"31\"\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"8 16\") == \"31\""
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n') == 3\nassert solution('8 16\\n') == 31"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2') == '3'"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 12\") == \"3\"\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 12\") == \"3\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3') == '1'\nassert solution('4 12') == '3'\nassert solution('999999999999999999 999999999999999986') == '1'\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 3') == '1'\nassert solution('4 3') == '1'\nassert solution('1 1') == '0'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '4 3'\n) == '1'\n\nassert solution(\n    '4 12'\n) == '3'\n\nassert solution(\n    '999999999999999999 999999999999999986'\n) == '1'\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 12\") == \"3\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\""
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"4 3\"\"\"\n    ) == \"1\"\n\nassert solution(\n    \"\"\"4 12\"\"\"\n    ) == \"3\"\n\nassert solution(\n    \"\"\"999999999999999999 999999999999999986\"\"\"\n    ) == \"1\"\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 12\") == \"3\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 12\") == \"3\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n') == '1'\nassert solution('4 12\\n') == '3'\nassert solution('999999999999999999 999999999999999986\\n') == '1'\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"NO\"\nassert solution(\"1 1 1 1 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"YES\"\n\nassert solution(\"3 3 3 1 1\") == \"NO\"\nassert solution(\"3 3 3 2 1\") == \"NO\"\n\"\"\"\n\n\"\"\"\nTODO:\n\n\"\"\"\n\nx, y, z, t1, t2, t3 = map(int, input().split())\n\nt1_elevator = (x - z) * t1\nt2_elevator = x * (z - y) * t2\nt3_elevator = t3 * (x - y) * (z - x)\nt_total_elevator = t1_elevator + t2_elevator + t3_elevator\n\nt1_stairs = (y - x) * t1\nt2_stairs = (y - z) * t2\nt3_stairs = t3 * (z - y) * (x - z)\nt_total_stairs = t1_stairs + t2_stairs + t3_stairs"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 4 4 2 1') == 'YES'\nassert solution('1 6 6 2 1 1') == 'NO'\nassert solution('4 1 7 4 1 2') == 'YES'\n\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nx, y, z, t1, t2, t3 = [int(i) for i in stdin.readline().split()]"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\""
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 4 4 2 1\") == 'YES'\nassert solution(\"1 6 6 2 1 1\") == 'NO'\nassert solution(\"4 1 7 4 1 2\") == 'YES'\n\"\"\""
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 4 4 2 1') == 'YES'\nassert solution('1 6 6 2 1 1') == 'NO'\nassert solution('4 1 7 4 1 2') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"1 6 6 2 1 1\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\n\"\"\"\n\n\nimport unittest\nimport time\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == 2\nassert solution('4 3') == 2\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"3 1\") == \"2\"\n\"\"\"\nimport bisect\nimport math\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3 1') == '2'\nassert solution('4 3') == '2'"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 3\") == \"2\"\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n3 1\") == \"2\"\nassert solution(\"4 3\\n1 1\") == \"2\"\nassert solution(\"4 4\\n4 4\") == \"4\"\nassert solution(\"4 5\\n5 5\") == \"4\"\nassert solution(\"4 6\\n6 6\") == \"4\"\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n4 3') == '2'\n\"\"\"\n\nimport sys\nimport os\nimport collections\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n\") == \"2\"\nassert solution(\"4 3\\n\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n') == '2'\nassert solution('4 3\\n') == '2'\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '2'\nassert solution('4 3 2') == '2'\nassert solution('4 1 2') == '1'\n\nassert solution('5 1 1') == '1'\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n0 1 0 1 1\\n') == '4'\nassert solution('7\\n1 0 1 0 0 1 0\\n') == '4'\nassert solution('1\\n0\\n') == '0'\n\n\"\"\""
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 0 1 1\\n\") == \"4\"\n\nassert solution(\"7\\n1 0 1 0 0 1 0\\n\") == \"4\"\n\nassert solution(\"1\\n0\\n\") == \"0\""
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n0 1 0 1 1 1') == '4'\nassert solution('7\\n1 0 1 0 0 1 0') == '4'\nassert solution('1\\n0') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n0 1 0 1 1 1') == '4'\nassert solution('7\\n1 0 1 0 0 1 0') == '4'\nassert solution('1\\n0') == '0'\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 1 0 1 1 1\") == \"4\"\n\nassert solution(\"7\\n1 0 1 0 0 1 0\") == \"4\"\n\nassert solution(\"1\\n0\") == \"0\"\n\nassert solution(\"7\\n1 0 1 0 0 1 0\") == \"4\"\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n0 1 0 1 1\\n') == 4\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 1 0 1 1 1\") == \"4\"\nassert solution(\"7\\n1 0 1 0 0 1 0\") == \"4\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"7\\n0 1 0 0 0 1 0\") == \"0\"\nassert solution(\"7\\n1 1 1 1 1 1 1\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 0 0 0 1 1\") == \"4\"\nassert solution(\"7 1 0 0 0 1 0\") == \"4\"\nassert solution(\"1 0\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0 1 0 1 1 1\") == \"4\"\nassert solution(\"7\\n1 0 1 0 0 1 0\") == \"4\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"1\\n0 0\") == \"0\"\nassert solution(\"1\\n0 1\") == \"1\"\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 1 0 1 1\\n\") == \"4\"\nassert solution(\"7\\n1 0 1 0 0 1 0\\n\") == \"4\"\nassert solution(\"1\\n0\\n\") == \"0\"\n\n'''\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 3\n1 2\n''') == '2'\nassert solution('''3 17\n10 10 10\n''') == '3'\nassert solution('''1 9\n10\n''') == '-1'\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 2\") == '2'\nassert solution(\"3 17\\n10 10 10\") == '3'\nassert solution(\"1 9\\n10\") == '-1'\n\"\"\"\n\n\nfrom collections import deque\n\nn, k = map(int, input().split())\n\ncandies = list(map(int, input().split()))\n\ncnt = 0\n\nqueue = deque([candies[0]])\n\nfor i in range(1, n):\n    queue.append(max(queue[i - 1] + candies[i], candies[i]))\n\nfor i in range(n):\n    if queue[i] >= k:\n        cnt = i + 1\n        break"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2\") == 2\nassert solution(\"3 17\\n10 10 10\") == 3\nassert solution(\"1 9\\n10\") == -1\nassert solution(\"1 20\\n
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2') == '2'\nassert solution('3 17\\n10 10 10') == '3'\nassert solution('1 9\\n10') == '-1'\n\"\"\"\n\nimport sys\n\n_, k = map(int, sys.stdin.readline().split())\nl = [int(x) for x in sys.stdin.readline().split()]\n\nl.sort()\n\nn = len(l)\n\ni, j = 0, n - 1\n\nwhile i < j:\n    if l[i] + l[j] < k:\n        i += 1\n    elif l[i] + l[j] > k:\n        j -= 1\n    else:\n        break\nelse:\n    print(-1)\n    exit()\n\nprint(j + 1)\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2\") == 2\nassert solution(\"3 17\\n10 10 10\") == 3\nassert solution(\"1 9\\n10\") == -1\nassert solution(\"7 9\\n3 7 1 8 4 6 2 5\") == -1\nassert solution(\"3 9\\n3 3 2 1 2 3 1 1\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 2\\n') == '2'\nassert solution('3 17\\n10 10 10\\n') == '3'\nassert solution('1 9\\n10\\n') == '-1'\n\n\"\"\""
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2') == '2'\nassert solution('3 17\\n10 10 10') == '3'\nassert solution('1 9\\n10') == '-1'\nprint(\"Passed!\")\n\"\"\"\nimport sys"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3 17) == 3\nassert solution(1 9) == -1"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 2') == '2'\nassert solution('3 17\\n10 10 10') == '3'\nassert solution('1 9\\n10') == '-1'\n\nsolution(stdin)"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 17\\n10 10 10') == '3'\nassert solution('1 9\\n10') == '-1'"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\n2 0 1') == '4'\nassert solution('4 6\\n2 4 3 5') == '0'\nassert solution('3 1\\n0 0 0') == '1'\n\"\"\"\n\nfrom math import ceil\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(ceil((n-1)/(k-1)))\nprint(*[a[i]+i for i in range(n) if a[i] < a[i//(k-1)] + k-1])"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(expected_result)\n\nprint('Success')\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 0 1\") == '4'\n\nassert solution(\"3 1\\n0 0 0\") == '1'\n\nassert solution(\"4 6\\n2 4 3 5\") == '0'\n\nassert solution(\"4 1\\n0 0 0\") == '1'\n\nprint(\"All test cases passed\")\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == e\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 5\n2 0 1\n''') == '4'\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\n2 0 1') == '4\\n2 3 2'\nassert solution('3 1\\n0 0 0') == '1\\n0 1 0'\nassert solution('4 6\\n2 4 3 5') == '0\\n2 4 3 5'\n\"\"\""
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n2 0 1\\n') == '4'\nassert solution('3 1\\n0 0 0\\n') == '1'\nassert solution('4 6\\n2 4 3 5\\n') == '0'\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 0 1\\n\") == \"4\\n2 3 2\"\nassert solution(\"3 1\\n0 0 0\\n\") == \"1\\n0 1 0\"\nassert solution(\"4 6\\n2 4 3 5\\n\") == \"0\\n2 4 3 5\"\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 7\") == \"2 3 3 4 4\"\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 0 1\") == \"4\\n2 3 2\"\nassert solution(\"4 6\\n2 4 3 5\") == \"0\\n2 4 3 5\"\nassert solution(\"5 3\\n2 3 0\") == \"3\\n2 2 1\"\n\"\"\"\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '5'\nassert solution('3') == '13'\nprint(solution('1'))\nprint(solution('2'))\nprint(solution('3'))\n\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('1\\n') == 1\nassert solution('2\\n') == 5\nassert solution('3\\n') == 13\nassert solution('4\\n') == 21\n\n
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '5'\nassert solution('3') == '13'\n\n\"\"\"\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '5'\nassert solution('3\\n') == '13'\nassert solution('1\\n') == '1'\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '5'\nassert solution('3') == '13'\n\n\"\"\""
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"13\"\nassert solution(\"4\") == \"25\"\nassert solution(\"5\") == \"41\"\n\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"13\"\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"13\"\n\"\"\""
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"13\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 5\nassert solution(\"3\") == 13\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('TheQuickBrownFoxJumpsOverTheLazyDog') == 'YES'\nassert solution('toosmallword') == 'NO'\n\n\"\"\""
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"toosmallword\") == \"NO\"\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\""
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\naaa\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n4\nTgjghbvj\n\"\"\"\n) == \"NO\"\nassert solution(\n\"\"\"\n5\naaaa\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n5\naAaAaAa\n\"\"\"\n) == \"NO\"\nassert solution(\n\"\"\"\n1\nF\n\"\"\"\n) == \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"NO\"\nassert solution(\"toosmallword\") == \"NO\"\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\n\nprint(\"Passed\")"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"toosmallword\") == \"NO\"\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"NO\"\nassert solution(\"toosmallword\") == \"NO\"\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\nassert solution(\"KPQHiH\") == \"NO\"\nassert solution(\"KPQHiH\") == \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"The quick brown fox jumps over the lazy dog\") == \"YES\"\nassert solution(\"the quick brown fox jumps over the lazy dog\") == \"YES\"\nassert solution(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"YES\"\nassert solution(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\") == \"YES\"\nassert solution(\"The quick brown fox jumps over the lazy dog\") == \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('The quick brown fox jumps over the lazy dog') == 'YES'\nassert solution('Twelve, twelve, twelve to twelve, twelve, twelve, twelve, twelve, twelve, twelve, twelve, twelve, twelve, twelve') == 'NO'\nassert solution('abracadabra') == 'NO'\nassert solution('abac') == 'YES'\nassert solution('aabac') == 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('toosmallword') == 'NO'\nassert solution('TheQuickBrownFoxJumpsOverTheLazyDog') == 'YES'\nassert solution('xabcdx') == 'YES'\nassert solution('xabCDX') == 'YES'\nassert solution('ab') == 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"NO\"\nassert solution(\"toosmallword\") == \"NO\"\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(    \"23:59\" ) == \"00:09\"\nassert solution(    \"20:20\" ) == \"22:21\"\nassert solution(    \"10:10\" ) == \"10:10\"\nassert solution(    \"0:10\" ) == \"10:10\"\n\"\"\""
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20:20') == '22:21'\nassert solution('23:59') == '00:09'\n\"\"\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\nassert solution(\"10:10\") == \"10:10\"\n\"\"\""
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('23:59') == '00:09'\nassert solution('20:20') == '22:21'\nassert solution('10:10') == '10:10'\n\"\"\"\n\nimport math"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20:20') == '22:21'\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10:10\") == \"10:10\"\nassert solution(\"20:20\") == \"22:20\"\nassert solution(\"23:59\") == \"00:09\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\nassert solution(\"10:10\") == \"10:10\"\nassert solution(\"0:10\") == \"10:10\"\n\"\"\"\n\nfrom datetime import datetime\nimport os"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\nassert solution(\"10:10\") == \"10:10\"\nassert solution(\"00:09\") == \"00:09\"\n\"\"\""
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\nassert solution(\"10:10\") == \"10:10\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20:20\") == \"22:21\"\nassert solution(\"10:10\") == \"10:10\"\nassert solution(\"23:59\") == \"00:09\"\n\"\"\""
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(10101) == \"YES\"\nassert solution(10100) == \"YES\"\nassert solution(01110) == \"NO\"\nassert solution(10001) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n10101\\n01000\\n00111\\n10000\") == \"YES\"\n\"\"\""
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10101\\n01000\\n00110\\n00101\") == \"YES\"\nassert solution(\"10101\\n01010\\n11110\\n11010\") == \"NO\"\nassert solution(\"10101\\n01010\\n11110\\n11010\") == \"YES\"\nassert solution(\"101010\\n101010\\n101010\\n101010\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n10101\\n01000\\n00111\\n10000\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101010\\n101010\\n101010\\n101010\\n101010\") == \"YES\"\nassert solution(\"101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\n101010\\"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n10101\\n01000\\n00111\\n10000\") == \"YES\"\nassert solution(\"4 5\\n10101\\n01010\\n00110\\n00101\") == \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n10100\\n01000\\n00110\\n00101') == 'YES'\nassert solution('4 5\\n10101\\n01010\\n00100\\n11110') == 'YES'\nassert solution('4 5\\n10110\\n01010\\n11110\\n11010') == 'NO'\nassert solution('4 5\\n10100\\n01010\\n11110\\n11010') == 'NO'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n10101\\n01000\\n00111\\n10000\\n') == 'YES'\nassert solution('4 5\\n10100\\n01000\\n00110\\n00101\\n') == 'NO'\nassert solution('4 5\\n101010\\n01010\\n101010\\n101010\\n') == 'YES'\n\n\"\"\""
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10101\\n01000\\n00111\\n10000\") == \"YES\"\nassert solution(\"10100\\n01000\\n00110\\n00101\") == \"NO\"\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n10100\\n01000\\n00110\\n00101\") == \"YES\"\n\"\"\"\n\nn, m = [int(x) for x in stdin.readline().split()]\na = []\nfor i in range(n):\n    a.append(list(stdin.readline().split()))\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == \"0\":\n            print(a)\n            print(i, j)\n            for k in range(n):\n                print(k)\n                if a[i][k] == \"1\":\n                    print(a)\n                    print(i, k)\n                    for l in range(m):\n                        if a[i][k] == \"1\":\n                            print(a)\n                            print(i, k)\n                            print(l)\n                            if a[k][l] == \"1\":\n                                print(a)\n                                print(k, l)\n                                print(i, j)\n                                print(\"YES\")\n                                quit()\n\nprint(\"NO\")\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n6 4\") == \"0\"\nassert solution(\"1 2\\n2 3\") == \"-1\"\nassert solution(\"3 1\\n4 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"0\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"1 4\") == \"-1\"\nassert solution(\"4 4\") == \"0\"\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n6 4\") == 0\nassert solution(\"1 4\\n2 3\") == -1\nassert solution(\"3 1\\n4 4\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n6 4\") == \"0\"\nassert solution(\"1 4\\n2 3\") == \"1\"\nassert solution(\"3 1\\n4 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == str\n\"\"\""
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n6 4\") == 0\nassert solution(\"1 4\\n2 3\") == -1\nassert solution(\"3 1\\n4 4\") == 1\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 2\n6 4\n''') == '0'\n\nassert solution('''1 4\n2 3\n4 4\n''') == '1'\n\nassert solution('''3 1\n2 3\n4 4\n''') == '-1'\n\nassert solution('''6 3\n4 5\n2 4\n1 3\n5 6\n''') == '1'\n\nprint('Success')\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2') == '0'\nassert solution('6 4') == '-1'\nassert solution('1 4') == '1'\nassert solution('2 3') == '-1'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n6 4') == '0'\nassert solution('1 2\\n3 4') == '-1'\nassert solution('3 1\\n4 4') == '1'\n\"\"\"\n\nimport collections\nimport itertools\nimport functools\n\nINPUT_1 = '4 2\\n6 4'\nINPUT_2 = '1 2\\n3 4'\nINPUT_3 = '3 1\\n4 4'\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"0\"\nassert solution(\"6 4\") == \"0\"\nassert solution(\"1 4\") == \"-1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"4 4\") == \"0\"\n\"\"\"\nfrom math import gcd\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\\n\") == \"YES\\nNO\\nNO\\nYES\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\\nNO\\nNO\\nYES\"\n\"\"\"\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == 'YES'\nassert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == 'NO'\n\"\"\"\n\nimport math"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\"\nassert solution(\"4\\n5 3\\n7 9\\n12 6\") == \"NO\"\n\"\"\""
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\"\nassert solution(\"1\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"NO\"\nassert solution(\"1\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"NO\"\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''4\n6 5\n16 13\n61690850361 24777622630\n34 33\n'''\n) == 'YES\\nNO\\nNO\\nYES'\nassert solution(\n'''4\n6 5\n16 13\n61690850361 24777622630\n34 33\n'''\n) == 'YES\\nNO\\nNO\\nYES'\nassert solution(\n'''4\n6 5\n16 13\n61690850361 24777622630\n34 33\n'''\n) == 'YES\\nNO\\nNO\\nYES'\nassert solution(\n'''4\n6 5\n16 13\n61690850361 24777622630\n34 33\n'''\n) == 'YES\\nNO\\nNO\\nYES'\nassert solution(\n'''4\n6 5\n16 13\n61690850361 24777622630\n34 33\n'''\n) == 'YES\\nNO\\nNO\\nYES'\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33') == 'YES\\nNO\\nNO\\nYES'\n\"\"\"\n\nimport itertools\nimport math\n\nT = int(input())\n\nfor _ in range(T):\n    a, b = list(map(int, input().split()))\n\n    if a > b:\n        print(\"YES\")\n    else:\n        s = math.sqrt(b * b - a * a)\n        print(\"YES\" if s == int(s) else \"NO\")\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\"\nassert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\"\nassert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\"\nassert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\"\nassert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\"\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\") == \"YES\\nNO\\nNO\\nYES\"\n\"\"\"\n\nimport unittest\nimport random\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10') == 'NO'\nassert solution('6 5') == 'YES'\nassert solution('6 1690850361 24777622630') == 'YES'\nassert solution('34 33') == 'NO'\nassert solution('4 8') == 'NO'\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n-1 1\\n-2 2\") == 'Yes'\nassert solution(\"4\\n1 1\\n2 2\\n-1 1\\n-2 2\") == 'No'\nassert solution(\"3\\n1 2\\n2 1\\n4 60\") == 'Yes'\n\n\n'''"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2 -1\\n-2 2\") == \"Yes\"\nassert solution(\"1 2\\n2 1\\n4 60\") == \"No\"\nassert solution(\"1 2\\n2 1\\n4 5\") == \"Yes\"\nassert solution(\"1 1\\n2 2\\n4 5\") == \"Yes\"\nassert solution(\"1 2\\n2 1\\n4 5\") == \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n-1 1\\n-2 2\") == 'Yes'\nassert solution(\"4\\n1 1\\n2 2\\n-1 1\\n-2 2\") == 'No'\nassert solution(\"3\\n1 1\\n2 2\\n4 60\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 1\n2 2\n-1 1\n-2 2''') == 'Yes'\nassert solution('''4\n1 1\n2 2\n-1 1\n-2 2''') == 'No'\nassert solution('''3\n1 2\n2 1\n4 60''') == 'Yes'\nassert solution('''4\n1 1\n2 2\n-1 1\n-2 2''') == 'No'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n-1 1\\n-2 2\") == \"Yes\"\nassert solution(\"4\\n1 1\\n2 2\\n-1 1\\n-2 2\") == \"No\"\nassert solution(\"3\\n1 2\\n2 1\\n4 60\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n-1 1\\n-2 2\") == \"Yes\"\nassert solution(\"4\\n1 1\\n2 2\\n-1 1\\n-2 2\") == \"No\"\nassert solution(\"3\\n1 1\\n2 2\\n4 60\") == \"Yes\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 1\\n4 60\") == \"Yes\"\nassert solution(\"1 1\\n2 2\\n-1 1\\n-2 2\") == \"No\"\nassert solution(\"1 1\\n2 2\\n-1 1\\n-2 2\\n1 2\\n3 2\") == \"No\"\nassert solution(\"1 2\\n2 1\\n4 60\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n-1 1\\n-2 2\\n4 60\") == \"Yes\"\nassert solution(\"4\\n1 1\\n2 2\\n-1 1\\n-2 2\\n4 60\") == \"No\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n-1 1\\n-2 2\") == \"Yes\"\nassert solution(\"4\\n1 1\\n2 2\\n-1 1\\n-2 2\") == \"No\"\nassert solution(\"3\\n1 2\\n2 1\\n4 60\") == \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1\n2 2\n-1 1\n-2 2''') == 'Yes'\nassert solution('''4\n1 1\n2 2\n-1 1\n-2 2''') == 'No'\nassert solution('''4\n1 1\n2 2\n-1 1\n-2 2''') == 'Yes'\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"6 3\") == \"6\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 9\") == \"1\"\nassert solution(\"12 24\") == \"6\"\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '6'\nassert solution('4 2') == '2'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"6\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == '6'\nassert solution('2 4') == '2'\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == 6\nprint(\"Codewars\")\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('4 3') == '6'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3') == '6'\n\"\"\""
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3\") == \"6\"\nassert solution(\"5 4\") == \"5\"\nassert solution(\"3 10\") == \"1\"\nassert solution(\"20 12\") == \"4\"\nassert solution(\"17 8\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == 2\nassert solution(\"3 5\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == 6\n\"\"\"\n\n\nfrom math import factorial\n\nA, B = map(int, input().split())\nprint(factorial(A) // factorial(B) // factorial(A - B))\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '10'\n\"\"\"\n\nn = int(input())\n\nfor a in range(2, n):\n    b = n - a\n    if b % a == 0:\n        print(a, b)\n        break\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"9 8\"\n\"\"\"\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\") == \"9 8\"\nassert solution(\"1\") == \"2 2\"\nassert solution(\"100\") == \"108 108\"\nassert solution(\"100100\") == \"1080 1080\"\nassert solution(\"100100101\") == \"1080 1080\"\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"9 8\"\n\"\"\"\n\nn = input()\nprint(int(n[:-1]) + 2, int(n))\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"9 8\"\nassert solution(\"3\") == \"4608 4096\"\nassert solution(\"5\") == \"1437 378\"\nassert solution(\"8\") == \"1264 9800\"\nassert solution(\"10\") == \"220 229\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"9 8\"\nassert solution(\"2\") == \"1 9\"\nassert solution(\"3\") == \"2 9\"\n\"\"\"\nimport math"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"9 8\"\nassert solution(\"2\") == \"11 10\"\nassert solution(\"3\") == \"13 12\"\nassert solution(\"4\") == \"17 16\"\nassert solution(\"5\") == \"19 18\"\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('512') == '4608 4096'"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12') == '9 8'\nassert solution('128') == '9 8'\nassert solution('10') == '9 8'\nassert solution('5') == '9 8'\nassert solution('7') == '9 8'\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6') == '9 8'\nprint(solution('6'))\n\nassert solution('13') == '9 8'\nprint(solution('13'))\n\nassert solution('5') == '9 8'\nprint(solution('5'))\n\nassert solution('256') == '8 16'\nprint(solution('256'))\n\nassert solution('255') == '9 16'\nprint(solution('255'))"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == '35'"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\") == \"35\"\nassert solution(\"5 5 10\\n1 2 3\\n1 3 4\\n1 4 5\\n1 5 3\\n3 4 5\") == \"7\"\nassert solution(\"5 5 10\\n1 2 3\\n1 3 4\\n1 4 5\\n1 5 3\\n3 4 5\") == \"-1\"\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == -1\nassert solution('4 5 20') == 36\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 10\\n1 2 20\\n2 3 30\\n1 3 45') == '35'\nassert solution('2 1 10\\n1 1 1') == '-1'\nassert solution('1 1 1\\n1 1 1') == '0'\nassert solution('1 1 1\\n2 1 1') == '1'\nassert solution('2 2 100\\n1 1 1') == '-1'\n\n------\n1. Check whether there is a path from the source vertex to the destination vertex.\n2. For each edge, check whether the number of coins on the edge is smaller than the limit on the edge.\n3. If there is no path and it is impossible to collect the coins on the path, return -1.\n4. If there is a path and it is possible to collect the coins on the path, calculate the maximum score that can be obtained.\n5. Return the maximum score.\n-----\nfrom collections import deque\nimport sys\nclass Vertex:\n    def __init__(self, id: int):\n        self.id = id\n        self.edges = []\n        self.min_cost = 0\n    def __repr__(self):\n        return f'Vertex({self.id})'\n    def __str__(self):\n        return f'Vertex({self.id})'\n\nclass Edge:\n    def __init__(self, start: Vertex, end: Vertex, cost: int):\n        self.start = start\n        self.end = end\n        self.cost = cost\n    def __repr__(self):\n        return f'Edge({self.start}, {self.end}, {self.cost})'\n    def __str__(self):\n        return f'Edge({self.start}, {self.end}, {self.cost})'\n\nclass EdgeWithCost:\n    def __init__(self, edge: Edge, cost: int):\n        self.edge = edge\n        self.cost = cost\n    def __repr__(self):\n        return f'EdgeWithCost({self.edge}, {self.cost})'\n    def __str__(self):\n        return f'EdgeWithCost({self.edge}, {self.cost})'\n\nclass Graph:\n    def __init__(self, edges: [str]):\n        self.edges = []\n        for edge in edges:\n            start, end, cost = edge.split()\n            start_id, end_id, cost = int(start), int(end), int(cost)\n            self.edges.append(Edge(Vertex(start_id), Vertex(end_id), cost))\n    def __repr__(self):\n        return f'Graph({self.edges})'\n    def __str__(self):\n        return f'Graph({self.edges})'\n\nclass VertexWithCost:\n    def __init__(self, vertex: Vertex, cost: int):\n        self.vertex = vertex\n        self.cost = cost\n    def __repr__(self):\n        return f'VertexWithCost({self.vertex}, {self.cost})'\n    def __str__(self):\n        return f'VertexWithCost({self.vertex}, {self.cost})'\n\nclass EdgeWithCosts:\n    def __init__(self, edge: Edge, costs: [int]):\n        self.edge = edge\n        self.costs = costs\n    def __repr__(self):\n        return f'EdgeWithCosts({self.edge}, {self.costs})'\n    def __str__(self):\n        return f'EdgeWithCosts({self.edge}, {self.costs})'\n\nclass GraphWithCosts:\n    def __init__(self, edges: [str]):\n        self.edges = []\n        self.vertices = set()\n        for edge in edges:\n            start, end, cost = edge.split()\n            start_id, end_id, cost = int(start), int(end), int(cost)\n            self.edges.append(Edge(Vertex(start_id), Vertex(end_id), cost))\n            self.vertices.add(Vertex(start_id))\n            self.vertices.add(Vertex(end_id))\n    def __repr__(self):\n        return f'GraphWithCosts({self.edges})'\n    def __str__(self):\n        return f'GraphWithCosts({self.edges})'\n\nclass VertexWithCostsAndOrder:\n    def __init__(self, vertex: Vertex, costs: [int], order: int):\n        self.vertex = vertex\n        self.costs = costs\n        self.order = order\n    def __repr__(self):\n        return f'VertexWithCostsAndOrder({self.vertex}, {self.costs}, {self.order})'\n    def __str__(self):\n        return f'VertexWithCostsAndOrder({self.vertex}, {self.costs}, {self.order})'"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\\n\") == \"35\"\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3 10\n1 2 20\n2 3 30\n1 3 45''') == '35'\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 10\\n1 2 20\\n2 3 30\\n1 3 45') == '35'\nassert solution('4 4 10\\n1 2 20\\n2 3 30\\n3 4 50\\n1 4 100') == '100'\nassert solution('4 5 10\\n1 2 10\\n2 3 30\\n3 4 50\\n1 4 100') == '100'\n\"\"\"\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\") == \"35\"\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\\n\") == \"35\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 10\\n1 2 20\\n2 3 30\\n1 3 45\") == \"35\"\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nba 3\\nabc 4\\n\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ba 3\\nabc 4') == '7'\n\n-----------------------------------------------------"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nba 3\\nabc 4\\n\") == 7\n\"\"\"\nimport sys\nimport os\nimport time\nimport typing\nimport collections\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nba 3\\nabc 4\\n') == '7'\nassert solution('5\\nba 3\\nabc 4\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nba 3\\nabc 4\\n\") == \"7\"\nassert solution(\"3\\nba 5\\nabc 4\\n\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nba 3\\nabc 4\") == '7'\n\"\"\""
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\nba 3\\nabc 4\\n') == '7\\n'\n\"\"\""
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nba 3\\nabc 4\\n\") == 7\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nba 3\\nabc 4\\n\") == 7\n\n\"\"\"\n\nN = int(input().rstrip())\narr = []\nfor i in range(N):\n    s, c = input().rstrip().split(\" \")\n    arr.append([s, int(c)])\n\narr = sorted(arr, key=lambda x: x[1])"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == 7\n\"\"\"\n\nfrom sys import stdin\nfrom math import inf\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == 7\n\"\"\""
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '7'\nassert solution('6 6') == '7'\n\"\"\"\n\nfrom typing import List\n\n\nclass Xor(object):\n    def __init__(self, n: int, k: int) -> None:\n        self.__n = n\n        self.__k = k\n        self.__candy_total = 0\n        self.__candy_total_list = []\n        self.__binary_sum_list = []\n\n    def __create_binary_list(self, number: int) -> List[str]:\n        binary_list = list(bin(number)[2:])\n        for i in range(self.__n - len(binary_list)):\n            binary_list.insert(0, '0')\n        return binary_list\n\n    def __create_candy_list(self, number: int) -> List[int]:\n        binary_list = self.__create_binary_list(number)\n        candy_list = []\n        for i in range(len(binary_list)):\n            if binary_list[i] == '1':\n                candy_list.append(i + 1)\n        return candy_list\n\n    def __find_binary_sum_list(self, candy_list: List[int]) -> List[str]:\n        binary_sum_list = []\n        for i in range(len(candy_list)):\n            for j in range(len(candy_list)):\n                if i == j:\n                    continue\n                binary_sum_list.append(self.__create_binary_list(candy_list[i] ^ candy_list[j]))\n        return binary_sum_list\n\n    def __convert_binary_sum_list(self, binary_sum_list: List[str]) -> List[int]:\n        binary_sum_list_int = []\n        for i in range(len(binary_sum_list)):\n            binary_sum_list_int.append(int(''.join(binary_sum_list[i]), 2))\n        return binary_sum_list_int\n\n    def __find_candy_total(self, binary_sum_list: List[int]) -> int:\n        candy_total = 0\n        for i in range(len(binary_sum_list)):\n            for j in range(len(binary_sum_list)):\n                if i == j:\n                    continue\n                if binary_sum_list[i] + binary_sum_list[j] <= self.__k:\n                    candy_total += 1\n        return candy_total\n\n    def solution(self) -> int:\n        self.__candy_total = 0\n        self.__candy_total_list = []\n        self.__binary_sum_list = []\n        for i in range(1, self.__n + 1):\n            candy_list = self.__create_candy_list(i)\n            self.__candy_total += self.__find_candy_total(self.__find_binary_sum_list(candy_list))\n            self.__candy_total_list.append(self.__candy_total)\n        return max(self.__candy_total_list)\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"7\"\nassert solution(\"6 6\") == \"7\""
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"7\"\nassert solution(\"6 6\") == \"7\""
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"7\"\nassert solution(\"6 6\") == \"7\"\n\n------"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\") == 7\n\"\"\"\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3') == 7\n\"\"\"\nfrom typing import List\nfrom functools import reduce"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == 7\nassert solution('6 6') == 7\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == 7\nassert solution('6 6') == 7\n\n\"\"\"\nimport functools\nimport itertools\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"7\"\nassert solution(\"6 6\") == \"7\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '3'\n\"\"\"\nfrom math import hypot\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n2 1\\n2 2\") == '3'\nassert solution(\"4\\n1 1\\n1 2\\n2 1\\n2 2\") == '4'\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1\\n1 2\\n2 1\\n2 2\") == \"4\", \"First\"\nassert solution(\"4\\n1 1\\n1 2\\n2 1\\n2 2\") == \"3\", \"Second\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nn = int(input())\npoints = [tuple(map(int, input().split())) for _ in range(n)]"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1\\n1 2\\n2 1\\n2 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n2 1\\n2 2\\n\") == \"3\"\n\"\"\"\n\n\"\"\"\n\u0421\u0430\u043c\u043e\u043f\u0438\u0441\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\n\"\"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1\\n1 2\\n2 1\\n2 2\") == \"4\"\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n2 1\\n2 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1\\n1 2\\n2 1\\n2 2') == '3'\nassert solution('4\\n1 1\\n1 2\\n2 1\\n2 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1\\n1 2\\n2 1\\n2 2\") == \"3\"\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"nineteenineteen\") == 2\n\"\"\""
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xiineteenppnnnewtnee\") == 2\nassert solution(\"nineteenppnineteenw\") == 2\nassert solution(\"nineteenppnineteenw\") == 2\nassert solution(\"nineteenppnineteenw\") == 2\nassert solution(\"nineteenppnineteenw\") == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"nineteenineteen\") == 2\nprint(solution(\"nineteenineteen\"))\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('xiinneeneeenineeee') == 2\nassert solution('nineteen') == 1\nassert solution('nineteene') == 2\nassert solution('nineteenee') == 2\nassert solution('nineteeneeeeee') == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('nineteenineteen') == 2\nassert solution('nneteenabcnneteenabcnneteenabcnneteenabcii') == 2\nassert solution('nniinneetteeeenn') == 2\nassert solution('nninneeeeeeeninneeeenn') == 6\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xiinneieeeeennnnteeeennnn\") == 2\nassert solution(\"nineteenineteen\") == 2\nassert solution(\"nniinneeeeeeenneinneeeennnnteeeennnn\") == 2\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\") == 2\n\n\"\"\""
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('xiineteenppnnnewtnee') == 'xnineteenppnineteenw'\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xiineteenppnnnewtnee\") == 2\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcii\") == 2\nassert solution(\"nineteen\") == 1\nassert solution(\"nnnineteen\") == 1\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"nineteenineteen\") == 2\n\"\"\""
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('nineteenineteen') == 2\nassert solution('nniinneetteeeenn') == 2\nassert solution('nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii') == 2"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\") == \"5\"\nassert solution(\"3 4\") == \"-1\"\nassert solution(\"1 10\") == \"1\"\nassert solution(\"1 10\") == \"1\"\nassert solution(\"3 7\") == \"3\"\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4 6') == '5'\nassert solution('1 2') == '-1'\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\") == \"5\"\nassert solution(\"3 4\") == \"-1\"\n\"\"\"\n\nfrom math import floor, ceil"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\") == \"5\"\nassert solution(\"3 4\") == \"-1\"\n\"\"\""
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == '5'\n\"\"\"\n\nfrom math import floor\nfrom typing import Dict, List, Optional, Tuple\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6') == '5'\nassert solution('3 4') == '-1'\nassert solution('1 1') == '1'\n\"\"\"\n\n\nimport math\n\nimport unittest\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n') == '5'\nassert solution('3 4\\n') == '-1'\nprint('Test Success!')\n\"\"\"\n\nfrom math import floor, log"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6\\n') == 5\n\"\"\"\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 6\") == \"5\"\nassert solution(\"3 4\") == \"-\"\nassert solution(\"2 1\") == \"1\"\n\nprint(solution(input().split()))\n\n'''"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\") == \"5\"\nassert solution(\"3 4\") == \"-1\""
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 20\\n0 27 32 21 19\") == \"40\"\n\"\"\"\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/z-function/problem\n\n\"\"\""
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 20\\n0 27 32 21 19\\n') == '40'\nassert solution('7 3 50\\n62 0 0 0 99 33 22\\n') == '30'\nassert solution('10 5 100\\n1 0 1 0 0 0 0 0 1 1\\n') == '20'\n\"\"\"\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 20\\n0 27 32 21 19\\n\") == \"40\"\n\"\"\"\n\nn, m, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nfor i in range(n):\n    if a[i] == 0:\n        continue\n    if i == m - 1:\n        break\n    if a[i + 1] == 0:\n        a[i + 1] = 100\n        break\n\nans = 0\nfor i in range(n - 1):\n    if a[i] == 0:\n        continue\n    if i + 1 == m - 1:\n        break\n    ans += 10 + 10 + 10 + a[i + 1]\n    if ans > k:\n        break\nprint(ans)\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 20\\n0 27 32 21 19') == \"40\"\nassert solution('7 3 50\\n62 0 0 0 99 33 22') == \"30\"\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 3\") == \"12\"\nassert solution(\"6 5 100\") == \"50\"\nassert solution(\"10 5 100\") == \"20\"\nassert solution(\"10 5 1\") == \"10\"\nassert solution(\"6 5 1\") == \"6\"\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 20\\n0 27 32 21 19') == '40'\nassert solution('7 3 50\\n62 0 0 0 99 33 22') == '30'\n\n\"\"\""
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 20\\n0 27 32 21 19') == '40'\nassert solution('7 3 50\\n62 0 0 0 99 33 22') == '30'\nassert solution('10 5 100\\n1 0 1 0 0 0 0 0 1 1') == '20'\nassert solution('15 4 150\\n69 0 41 0 7 32 0 17 0 32 6 13 0 45 0 28 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 20\\n0 27 32 21 19\\n') == '40'\nassert solution('7 3 50\\n62 0 0 0 99 33 22\\n') == '30'\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 20\\n0 27 32 21 19\") == \"40\"\nassert solution(\"7 3 50\\n62 0 0 0 99 33 22\") == \"20\"\nassert solution(\"10 5 100\\n1 0 1 0 0 0 0 0 1 1\") == \"20\"\n\n\n'''\n\nimport math"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 20\\n0 27 32 21 19\") == \"40\"\nassert solution(\"7 3 50\\n62 0 0 0 99 33 22\") == \"30\"\nassert solution(\"10 5 100\\n1 0 1 0 0 0 0 0 1 1\") == \"20\"\n\n\"\"\"\n\nn, m, k = map(int, input().split())\ncosts = list(map(int, input().split()))\n\nhouses = []\nfor i in range(n):\n    if costs[i]!= 0:\n        houses.append(i)\n\nhouses.append(m)\nhouses.sort()\nhouses = houses[1:]"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"YES\"\nassert solution(\"2 2\\n4 4\\n5 5\") == \"YES\"\nassert solution(\"2 2\\n4 4\\n5 6\") == \"NO\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"YES\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n6 1\\n1 6\\n1 1\") == \"YES\"\n\"\"\"\n\nn, m = map(int, input().split())\nA = []\nfor i in range(n):\n    A.append([int(j) for j in input().split()])\nB = []\nfor i in range(n):\n    B.append([int(j) for j in input().split()])\n\nA = [A[i][:m] for i in range(n)]\nB = [B[i][:m] for i in range(n)]"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 1\\n6 1\\n1 6\\n1 1\") == \"YES\"\nassert solution(\"2 2\\n4 4\\n4 5\\n5 4\\n4 4\") == \"NO\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\\n1 1 1\\n2 2 2\\n3 3 3\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\") == \"NO\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n6 1\\n1 6\\n1 1\") == \"YES\"\nassert solution(\"2 2\\n4 4\\n4 5\\n5 4\\n4 4\") == \"NO\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\\n1 4 7\\n2 5 6\\n3 8 9\") == \"YES\"\nassert solution(\"2 2\\n4 4\\n5 4\\n4 4\") == \"NO\"\nassert solution(\"1 1\\n6 1\\n1 6\\n1 1\") == \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 1\\n6 1\\n1 6\\n1 1\\n1 1\\n\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\\n\") == \"YES\""
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n6 1\\n1 6\\n1 1\") == \"YES\"\nassert solution(\"2 2\\n4 4\\n4 5\\n5 4\\n4 4\") == \"NO\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\") == \"NO\""
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 3\\n4 5 6\\n7 8 9\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\") == \"NO\"\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n6 1\\n1 6\\n1 1\") == \"YES\"\nassert solution(\"2 2\\n4 4\\n4 5\\n5 4\\n4 4\") == \"NO\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\\n1 1 1\") == \"YES\"\n\"\"\"\n\nimport sys\n\nn, m = [int(i) for i in input().split()]\na = [[int(j) for j in input().split()] for i in range(n)]\nb = [[int(j) for j in input().split()] for i in range(n)]\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2 3\\n4 5 6\") == \"YES\"\nassert solution(\"4 4\\n1 2 3\\n4 5 6\\n7 8 9\") == \"YES\"\nassert solution(\"4 5\\n1 2 3\\n4 5 6\\n7 8 9\") == \"NO\"\nassert solution(\"4 5\\n1 2 3\\n4 5 6\\n7 8 9\") == \"NO\"\nassert solution(\"4 5\\n1 2 3\\n4 5 6\\n7 8 9\") == \"NO\"\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"YES\"\nassert solution(\"2 2\\n4 4\\n5 5\") == \"NO\"\nassert solution(\"2 2\\n4 4\\n6 6\\n6 6\") == \"YES\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n4 5 6\\n3 8 9\\n2 3 7\") == \"YES\"\nassert solution(\"1 1\\n6 1\") == \"NO\"\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcd', 'defgh') == 5\nassert solution('a', 'a') == -1\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == \"5\"\nassert solution(b) == \"-1\"\n\n\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == \"ab\"\nassert solution(\"abcdec\") == \"e\"\nassert solution(\"abcdf\") == \"-1\"\nassert solution(\"abcde\") == \"ab\"\nassert solution(\"abcdde\") == \"dd\"\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcd', 'defgh') == 5\nassert solution('a', 'a') == -1\n\n\nimport math\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcd\", \"defgh\") == \"5\"\nassert solution(\"a\", \"a\") == \"-\"\nassert solution(\"cabbba\", \"abccba\") == \"2\"\nassert solution(\"abdca\", \"cbda\") == \"2\"\n\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcd', 'defgh') == 5\nassert solution('a', 'a') == -1\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcd\\nefgh') == '5'\nassert solution('a\\na') == '-1'\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcd', 'defgh') == 5\nassert solution('a', 'a') == -1\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abcd', 'defgh') == 5\nassert solution('a', 'a') == -1\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcd', 'defgh') == '5'\nassert solution('a', 'a') == '-1'\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 2\\n9 19\") == \"82\"\nassert solution(\"2 1\\n16 12\") == \"-\"\nassert solution(\"20 20\\n9 19\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2 1\n16 12\n\"\"\") == '82'\n\n\"\"\"\n\ntest.assert_equals(solution(\n\"\"\"\n2 1\n16 12\n\"\"\"\n), '82')\n\n\"\"\"\n\ntest.assert_equals(solution(\n\"\"\"\n4 2\n8 16\n\"\"\")\n, '-1')\n\n\"\"\"\n\ntest.assert_equals(solution(\n\"\"\"\n2 1\n8 16\n\"\"\"\n), '-1')\n\n\"\"\"\n\ntest.assert_equals(solution(\n\"\"\"\n1 1\n5 5\n\"\"\"\n), '0')\n\n\"\"\"\n\ntest."
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == 'a'\nassert solution('a\\nb\\nc') == 'b'\nassert solution('a\\nb\\nc\\nd') == 'c'\nassert solution('a\\nb\\nc\\nd\\ne') == 'd'\n\"\"\"\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 2\\n9 19') == '82'\nassert solution('2 1\\n16 12') == '-1'\n\"\"\"\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 2\\n9 19\") == \"82\"\nassert solution(\"2 1\\n16 12\") == \"-1\""
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 2\\n9 19\") == \"82\"\nassert solution(\"2 1\\n16 12\") == \"-\"\nassert solution(\"5 1\\n3 9\") == \"3\"\nassert solution(\"4 7\\n4 7\") == \"7\"\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 2\\n9 19\") == \"82\"\nassert solution(\"2 1\\n16 12\") == \"-1\"\nprint(\"Ok!\")\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 2\\n9 19') == '82'\nassert solution('2 1\\n16 12') == '-1'\n\"\"\"\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 2\\n9 19') == 82\nassert solution('2 1\\n16 12') == -1"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"4\"\nassert solution(\"2 3\") == \"4\"\nassert solution(\"3 1\") == \"4\"\nassert solution(\"3 3\") == \"-1\"\nassert solution(\"1 3 4\") == \"4\"\n\"\"\"\n\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"233\") == \"77 77 79\"\n\n\"\"\"\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '1 1 1'\nassert solution('233\\n') == '77 77 79'\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\".\n\nSample Input:\n\n\\w denotes word character\nNo \\n or empty string\n\nSample Output:\n\n\\w denotes word character\n\"\"\"\n\ns = input()\n\nwhile s!= '':\n    if s[0] == '\\\\':\n        print(s)\n        s = input()\n        continue\n    s = input()\n\n\"\"\"\nSample Input:\n\n\\w denotes word character\nNo \\n or empty string\n\nSample Output:\n\n\\w denotes word character\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\".\n\nSample Input:\n\n\\w denotes word character\nNo \\n or empty string\n\nSample Output:\n\n\\w denotes word character\n\"\"\"\n\ns = input()\n\nwhile s!= '':\n    if s[-1] == '\\\\':\n        print(s)\n        s = input()\n        continue\n    s = input()\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0446\u0438\u0444\u0440\u0443 2 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437.\n\nSample Input:\n\n1\n22\n333\n2\n3\n4\n5\n2\n4\n\nSample Output:\n\n22\n333\n\"\"\"\n\ns = input()\n\nwhile s!= '':\n    if s.isdigit():\n        print(s)\n    s = input()\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043d\u0435\u0447\u0451\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\nSample Input:\n\n1234\nabcde\n123abc\n12abcde\n12nnnnnn\n\nSample Output:\n\n12abcde\n123abcde\n12nnnnnn\n\"\"\"\n\ns = input()\n\nwhile s!= '':\n    if len(s) % 2!= 0:\n        print(s)\n    s = input()\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439 (\u0442\u0430\u043d\u0434\u0435\u043c\u043d\u044b\u0439 \u043f\u043e\u0432\u0442\u043e\u0440).\n\nSample Input:\n\nblabla is a tandem repetition\n123123 is good too\ngo go\naaa\nSample Output:\n\nblabla is a tandem repetition\n123123 is good too\n\"\"\"\n\ns = input()\n\nwhile s!= '':\n    if s.count(s[0]) > 1:\n        print(s)\n    s = input()\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439 (\u0442\u0430\u043d\u0434\u0435\u043c\u043d\u044b\u0439 \u043f\u043e\u0432\u0442\u043e\u0440).\n\nSample Input:\n\nblabla is a tandem repetition\n123123 is good too\ngo go\naaa\nSample Output:\n\nblabla is a tandem repetition\n123123 is good too\n\"\"\"\n\ns = input()\n\nwhile s!= '':\n    if s.find(s[0])!= -1:\n        print(s)\n    s = input()\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u0447\u0451\u0442\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\nSample Input:\n\nblabla is a tandem repetition\n123123 is good too\ngo go\naaa\nSample Output:\n\nblabla is a tandem repetition\n\"\"\"\n\ns = input()\n\nwhile s!= '':\n    if len(s) % 2 == 0:\n        print(s)\n    s = input()\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0446\u0438\u0444\u0440\u0443 1 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437.\n\nSample Input:\n\n11\n2234\n4555\n22\n333\n\nSample Output:\n\n2234\n333\n\"\"\"\n\ns = input()\n\nwhile s!= '':\n    if s.isdigit():\n        print(s)\n    s = input()\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439 (\u0442\u0430\u043d\u0434\u0435\u043c\u043d\u044b\u0439 \u043f\u043e\u0432\u0442\u043e\u0440).\n\nSample Input:\n\nblabla is a tandem repetition\n123123 is good too\ngo go\naaa\nSample Output:\n\nblabla is a tandem repetition\n123123 is good too\n\"\"\"\n\ns = input()\n\nwhile s!= '':\n    if s.count(s[0]) > 1:\n        print(s)\n    s = input()\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1 1 1'\nassert solution('233') == '77 77 79'\n\"\"\""
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1 1 1'\nassert solution('233') == '77 77 79'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == '1 1 1'\nassert solution(\"233\") == '77 77 79'\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1 1 1'\nassert solution('233') == '77 77 79'\n\"\"\"\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"233\") == \"77 77 79\""
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == '1 1 1'\nassert solution(233) == '77 77 79'\nprint('Success')\n\"\"\""
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1 1 1\"\nassert solution(\"233\") == \"77 77 79\"\nassert solution(\"999\") == \"777 778 888\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"233\") == \"77 77 79\"\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 1 1 1 2\n''') == 2\nassert solution('''3 3 1 2 3\n''') == 6\nassert solution('''5 2 1 1 2\n''') == 5\nassert solution('''5 1 1 1 2\n''') == 5\nassert solution('''5 2 1 2 2\n''') == 0\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 1 2\") == 2\nassert solution(\"3 3 1 2 3\") == 6\nassert solution(\"3 3 1 1 1\") == 6\nassert solution(\"3 3 1 3 1\") == 6\nassert solution(\"3 3 1 2 2\") == 6\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 1 2\") == 2\nassert solution(\"3 3 1 2 3\") == 6\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 1 2\") == \"2\"\nassert solution(\"3 3 1 2 3\") == \"6\"\nassert solution(\"4 4 4 4 4\") == \"1\"\nassert solution(\"5 1 2 3 4\") == \"0\"\nassert solution(\"6 6 6 6 6\") == \"0\"\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1 1 2') == 2\nassert solution('3 3 1 2 3') == 6\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 1 2\") == 2\nassert solution(\"3 3 1 2 3\") == 6\nassert solution(\"1 1 1 1 1\") == 1\nassert solution(\"1 1 1 1 1\") == 1\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 1 2\") == 2\nassert solution(\"3 3 1 2 3\") == 6"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1 1 2\") == 2\nassert solution(\"3 3 1 2 3\") == 6\n\"\"\"\n\nn, a, b, c, d = map(int, input().split())\nsum1 = b + c\nsum2 = a + d\nsum3 = a + b\nsum4 = c + d\n\nprint(n - sum1 + sum3 + sum2 - sum4 - c)\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 1 2\") == 2\nassert solution(\"3 3 1 2 3\") == 6\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 1 2\") == 2\nassert solution(\"3 3 1 2 3\") == 6\nassert solution(\"1 1 1 1 2\") == 1\nassert solution(\"5 5 1 1 3\") == 6\nassert solution(\"1 2 2 1 2\") == 3\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 1\\n1 2') == '8'\nassert solution('4 3\\n9 2\\n0 1') == '1'\nassert solution('4 3\\n9 2\\n0 0') == '0'\n\"\"\"\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 1\\n1 2\") == \"8\"\nassert solution(\"4 3\\n9 2\\n0 1\") == \"1\"\nassert solution(\"4 3\\n9 2\\n0 0\") == \"0\"\n\n------Solution------\n\nn, h = map(int, stdin.readline().split())\nu1, d1 = map(int, stdin.readline().split())\nu2, d2 = map(int, stdin.readline().split())\n\nw = n\nwhile w > 0:\n    if u1 < w and d1 < w:\n        break\n    if u2 < w and d2 < w:\n        break\n    if d1 > d2:\n        w += u1\n    elif u1 < u2:\n        w += d1\n    else:\n        w += u2\n\nprint(w)\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(4, 3, 1, 1) == 8\nassert solution(4, 3, 1, 2) == 1\nassert solution(4, 3, 9, 2) == 1\n\"\"\"\n\n\nfrom __future__ import annotations\n\nimport math\nimport re\nfrom collections import defaultdict\nfrom dataclasses import dataclass\nfrom typing import List, Dict, Optional, Union\n\nfrom utils import BaseChallenge, memoize\n\nTREE = \"#\"\nFREE = \".\"\n\nfrom typing import Tuple\n\n\nclass Day3(BaseChallenge[str]):\n    def solve(self, _input, debug=False):\n        steps = self.read_input_text(_input)\n        positions = dict()\n        for step in steps:\n            x, y = self.get_position(step)\n            if x in positions:\n                positions[x][y] = TREE\n            else:\n                positions[x] = dict()\n                positions[x][y] = TREE\n\n        dx = 3\n        dy = 1\n\n        height = len(steps)\n        width = len(steps[0])\n\n        for i in range(1, height):\n            x, y = self.get_position(steps[i])\n            x += dx\n            y += dy\n            if x > 0 and x < width and y > 0 and y < height:\n                positions[x][y] = TREE\n\n        count = 0\n        for x in positions:\n            for y in positions[x]:\n                if positions[x][y] == TREE:\n                    count += 1\n        return count\n\n    def get_position(self, step):\n        x = 0\n        y = 0\n        for c in step:\n            if c == \"^\":\n                y += 1\n            elif c == \"v\":\n                y -= 1\n            elif c == \"<\":\n                x -= 1\n            elif c == \">\":\n                x += 1\n        return x, y\n\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 1\\n1 2\") == \"8\"\nassert solution(\"4 3\\n9 2\\n0 1\") == \"1\"\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 1 1 2') == '1'\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nThe snowball has a maximum weight of 100, and the maximum height of 100. The stones have weights and heights between 0 and 100, so we can use a 0-1 knapsack problem.\n\nLet's denote the two stones by 1 and 2. The stone with weight 1 has a height of d_1 and the other stone has a height of d_2.\n\nIf a snowball has a weight of w and a height of h, then the solution to the problem is max(w, h) - h * w.\n\"\"\""
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"9 2\") == \"1\"\nassert solution(\"1 2\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 1\\n1 2') == '8'\nassert solution('4 3\\n9 2\\n0 1') == '1'\nassert solution('4 3\\n9 2\\n0 0') == '0'\nassert solution('4 3\\n9 2\\n5 3') == '0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(8, 3, 1, 1) == 1\nassert solution(4, 3, 9, 2) == 1\n\n\n-----\n\n'''\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 1\\n1 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"3 2 1 2\") == \"3\"\nassert solution(\"4 3 1 1\") == \"4\"\nassert solution(\"4 3 0 1\") == \"1\"\nassert solution(\"4 3 9 2\") == \"1\"\n\"\"\"\n\nw, h = map(int, input().split())\nu, d = map(int, input().split())"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('1 2 3 4 5 6 7 8') == '3'\n\nassert solution('0 3 4 5 6 7 8') == '0'\nassert solution('0 1 2 3 4 5 6 7 8') == '1'\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 4 3 2 1\\n6 8\") == \"3\"\nassert solution(\"5 0 3 4 3 2\\n6 10\") == \"0\"\nassert solution(\"5 0 3 4 3 2\\n3 10\") == \"4\"\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3 4 3 2 1\\n6 8\\n') == '3'\nassert solution('5\\n0 3 3 4 2\\n6 8\\n') == '0'\nassert solution('2\\n2 5\\n3 6\\n') == '0'"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 4 3 2 1\\n6 8\") == \"3\"\nassert solution(\"5\\n0 3 3 4 2\\n6 8\") == \"4\"\nassert solution(\"2\\n2 5\\n3 6\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n3 4 3 2 1\n6 8\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n5\n0 3 3 4 2\n3 10\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n2\n2 5\n3 6\n\"\"\") == \"0\"\n\"\"\")\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 4 3 2 1\\n6 8\\n\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 4 3 2 1\\n6 8\\n\") == \"3\\n\"\nassert solution(\"5\\n0 3 3 4 2\\n3 10\\n\") == \"4\\n\"\nassert solution(\"2\\n2 5\\n3 6\\n\") == \"0\\n\"\nassert solution(\"2\\n2 5\\n3 6\\n\") == \"0\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5) == 3\nassert solution(5, 6, 8, 3, 10) == 4\nassert solution(2, 5, 6, 3, 6) == 0\nassert solution(2, 2, 3, 6, 6) == 0\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3 4 3 2 1\\n6 8') == '3'\nassert solution('5\\n0 3 4 3 2\\n6 8') == '4'\nassert solution('2\\n2 5\\n3 6') == '0'\nassert solution('2\\n4 7') == '1'\nassert solution('2\\n2 5\\n2 6') == '0'\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\n\nassert solution(test_stdin_2) == test_stdout_2"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\n2\\n3\\n1\\n') == '6'\nassert solution('5\\n5\\n2\\n20\\n') == '8'\nassert solution('19\\n3\\n4\\n2\\n') == '12'\n\"\"\""
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n2\\n3\\n1\") == \"6\"\nassert solution(\"5\\n5\\n2\\n20\") == \"8\"\nassert solution(\"19\\n3\\n4\\n2\") == \"12\"\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n2\\n3\\n1\\n\") == \"6\"\nassert solution(\"5\\n5\\n2\\n20\\n\") == \"8\"\nassert solution(\"19\\n3\\n4\\n2\\n\") == \"12\"\n\"\"\"\n\nn = int(input())\nk = int(input())\na = int(input())\nb = int(input())\n\n\"\"\"\n1. \u0412\u044b\u0447\u0438\u0442\u0430\u0442\u044c 1 \u043e\u0442 n. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0446\u0438\u0444\u0440\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u043d\u0435\u0442 \u0434\u043b\u044f \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\n2. \u0412\u044b\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0442 n 1 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0434\u043e \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u0446\u0438\u0444\u0440\u044b. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0434\u043b\u044f \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 k \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0446\u0435\u043b\u0443\u044e \u0447\u0430\u0441\u0442\u044c n, \u0430 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 n \u043d\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 k, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043e\u0441\u0442\u0430\u0442\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u0436\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u043d\u0443\u043b\u044e.\n3. \u0412\u044b\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0442 \u0446\u0435\u043b\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e \u043e\u0441\u0442\u0430\u0442\u043a\u0430. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u044b\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 n \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0436\u043d\u043e \u0438 \u0432\u0435\u0440\u043d\u043e, \u043d\u043e \u0435\u0441\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0434\u0432\u0443\u0437\u043d\u0430\u0447\u043d\u044b\u043c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0432 \u0435\u0434\u0438\u043d\u0443\u044e \u0446\u0438\u0444\u0440\u0443, \u0438\u043d\u0430\u0447\u0435 \u043f\u043e\u0441\u043b\u0435 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0432\u0430 \u043e\u043f\u0435\u0440\u0430\u043d\u0434\u0430 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b.\n4. \u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0442 \u0434\u0432\u0443\u0437\u043d\u0430\u0447\u043d\u043e\u0433\u043e \u0432 \u0435\u0434\u0438\u043d\u0443\u044e \u0446\u0438\u0444\u0440\u0443.\n\"\"\"\nmin_count = 0\ntemp_n = n\nwhile temp_n >= k:\n    temp_n = temp_n - k\n    min_count += 1\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 9 2 3\") == \"8\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"9 2 3 4\") == \"9\"\nassert solution(\"9 1 2 3 4\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 2 3 1\") == \"6\"\nassert solution(\"5 2 1 20\") == \"8\"\nassert solution(\"19 3 4 2\") == \"12\"\n\"\"\""
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n2\\n3\\n1\\n\") == \"6\"\nassert solution(\"5\\n5\\n2\\n20\\n\") == \"8\"\nassert solution(\"19\\n3\\n4\\n2\\n\") == \"12\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n2\\n3\\n1\") == \"6\"\nassert solution(\"5\\n5\\n2\\n20\") == \"8\"\nassert solution(\"19\\n3\\n4\\n2\") == \"12\"\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 2 3 1\") == \"6\"\nassert solution(\"5 5 2 20\") == \"8\"\nassert solution(\"19 3 4 2\") == \"12\"\n\n\"\"\"\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n2\\n3\\n1\\n\") == \"6\"\nassert solution(\"5\\n5\\n2\\n20\\n\") == \"8\"\nassert solution(\"19\\n3\\n4\\n2\\n\") == \"12\"\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20') == '10 2'\nassert solution('5184') == '6 4'\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20') == '10 2'\nassert solution('5184') == '6 4'\n\"\"\""
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20') == '10 2'\n\"\"\""
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20\") == \"10 2\"\nassert solution(\"5184\") == \"6 4\"\nassert solution(\"100000000\") == \"10 26\"\n\"\"\""
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20') == '10 2'\nassert solution('5184') == '6 4'\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20\") == \"10 2\"\nassert solution(\"5184\") == \"6 4\"\nassert solution(\"4\") == \"4 0\"\nassert solution(\"1296\") == \"6 2\"\nassert solution(\"10\") == \"10 0\"\n\"\"\""
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"2 1\"\nassert solution(\"5184\") == \"6 4\"\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20') == '10 2'\nassert solution('5184') == '6 4'\n\"\"\""
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20') == '10 2'\n\"\"\"\nimport math\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == (5, 0)\nassert solution(\"72\") == (6, 1)\nassert solution(\"96\") == (6, 2)\nassert solution(\"100\") == (10, 2)\nassert solution(\"1024\") == (10, 6)\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 2\\nr s p\\nrp\\nrps\") == \"27\"\n\"\"\"\n\nN, K = stdin.split()\n\nN, K = int(N), int(K)\n\narr = stdin.split()[K:]\n\ncount = 0\nfor i in range(0, N-K):\n    if arr[i] == 'r':\n        count += 3\n    elif arr[i] == 'p':\n        count += 2\n    elif arr[i] =='s':\n        count += 1\n    else:\n        pass\n\nprint(count)\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n8 7 6\\nrsrpr') == '27'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n8 7 6\\nrsrpr\") == \"27\"\n\"\"\"\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n8 7 6\\nrsrpr') == '27'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\nppp\\nrrs') == '8'\nassert solution('3 3\\nprs\\nrrs') == '0'\nassert solution('5 3\\nrsr\\nrrs') == '7'\n\"\"\""
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 2\n8 7 6\nrsrpr''') == '27'\n\n'''\n5 2\n8 7 6\nrsrpr\n'''"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n8 7 6\\nrsrpr\") == \"27\"\nprint(solution(\"5 2\\n8 7 6\\nrsrpr\"))\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n8 7 6\\nrsrpr') == '27'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n8 7 6\\nrsp\\nr\") == '27'\nprint(\"Passed!\")\n\n\"\"\""
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2\\n8 7 6\\nrsrpr') == '27'\n\"\"\""
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1\") == 4\nassert solution(\"2 1 2\") == 7\nassert solution(\"3 5 2\") == 11\n\"\"\"\n\nimport sys"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == 4\nassert solution('2 1 2') == 7\nassert solution('3 5 2') == 11\nassert solution('1000000000 1000000000 1000000000') == 4000000000\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"4\"\nassert solution(\"2 1 2\") == \"7\"\nassert solution(\"3 5 2\") == \"11\"\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == 4\nassert solution(\"2 1 2\") == 7\nassert solution(\"3 5 2\") == 11\n\"\"\"\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"4\"\nassert solution(\"2 1 2\") == \"7\"\nassert solution(\"3 5 2\") == \"11\"\nassert solution(\"10000000 1000000000 1000000000\") == \"40000000\"\n\nfrom datetime import datetime\nstart_time = datetime.now()\nresult = solution(input())\nprint(result)\nprint(datetime.now() - start_time)\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == \"4\"\nassert solution(\"2 1 2\") == \"7\"\nassert solution(\"3 5 2\") == \"11\"\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"4\"\nassert solution(\"2 1 2\") == \"7\"\nassert solution(\"3 5 2\") == \"11\"\nassert solution(\"1000000000 1000000000 1000000000\") == \"4000000000\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == 4\nassert solution(\"2 1 2\") == 7\nassert solution(\"3 5 2\") == 11\nassert solution(\"1000000000 1000000000 1000000000\") == 4000000000\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"4\"\nassert solution(\"1 1 1\") == \"4\"\nassert solution(\"2 1 2\") == \"7\"\nassert solution(\"3 5 2\") == \"11\"\nassert solution(\"1000000000 1000000000 1000000000\") == \"4000000000\"\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 2\") == \"7\"\nassert solution(\"1 1 1\") == \"4\"\nassert solution(\"3 5 2\") == \"11\"\nassert solution(\"2 2 1\") == \"6\"\n\n-----"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 5 18 4\\n3 5 4\") == \"4 1\"\nassert solution(\"5 3 5 16 4\\n5 5 5\") == \"-1\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 5 18 4\") == \"4 1\"\nassert solution(\"5 3 5 16 4\") == \"-1\"\nassert solution(\"5 3 5 16 4\") == \"4 1\"\nassert solution(\"5 3 5 16 4\") == \"4 1\"\nassert solution(\"5 3 5 16 4\") == \"4 1\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 5 18 4\") == '4 1'\nassert solution(\"5 3 5 16 4\") == '-1'\nassert solution(\"5 5 5\") == '-1'\n\n\"\"\"\nimport itertools\nimport math\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 5 18 4\\n3 5 4\") == \"4 1\"\nassert solution(\"5 3 5 16 4\\n5 5 5\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 5 18 4\") == \"4 1\"\n\nassert solution(\"5 3 5 16 4\") == \"-1\"\nassert solution(\"5 3 5 16 18 4\") == \"4 1\"\n\nassert solution(\"5 5 5\") == \"-1\"\nassert solution(\"5 3 5 16 18\") == \"4 1\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 5 18 4\") == \"4 1\"\nassert solution(\"5 3 5 16 4\") == \"-\"\nassert solution(\"5 3 5 15 4\") == \"-\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 2 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 5 18 4\") == \"4 1\"\nassert solution(\"5 3 5 16 4\") == \"-1\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3 5 18 4\n3 5 4''') == '4 1'\n\nassert solution('''5 3 5 16 4\n5 5 5''') == '-1'\n\nassert solution('''5 3 5 16 4\n5 5 5''') == '-1'\n\nassert solution('''5 3 5 18 4\n5 5 5''') == '-1'\n\nassert solution('''5 3 5 18 4\n5 5 5''') == '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 4 1\") == \"1 2\"\nassert solution(\"3 1 1 1 1\") == \"-1\"\nassert solution(\"7 1 2 2 6 2\") == \"2 6\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 5 18 4\") == \"4 1\"\nassert solution(\"5 3 5 16 4\") == \"-1\"\nassert solution(\"5 3 5 16 4\") == \"-1\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sumimasen\") == 'YES'\nassert solution(\"ninja\") == 'YES'\nassert solution(\"codeforces\") == 'NO'\nassert solution(\"sijeesen\") == 'NO'\n\"\"\"\n\ns = input()\n\nfor i in range(len(s)):\n    if s[i] == 'a' or s[i] == 'o' or s[i] == 'u' or s[i] == 'i' or s[i] == 'e':\n        print('YES', end='')\n    else:\n        print('NO', end='')\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n\"\"\"\nimport string\n\ns = stdin\ns = s.translate(str.maketrans('', '', string.ascii_lowercase))\ns = s.translate(str.maketrans('', '', 'aeiou'))"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\nassert solution(\"zodiac\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n\"\"\"\n\ns = input()\nvowels = \"aeiou\"\n\nfor i in range(len(s)):\n    if s[i] in vowels:\n        for j in range(i + 1, len(s)):\n            if s[j] not in vowels:\n                print(\"NO\")\n                exit()\n    else:\n        for j in range(i + 1, len(s)):\n            if s[j] not in vowels and s[j]!= \"n\":\n                print(\"NO\")\n                exit()\nprint(\"YES\")\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\nprint('test passed')\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"sumimasen\") == \"YES\"\nassert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\nassert solution(\"absdfzazxcvbn\") == \"YES\"\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\") == '4'\nassert solution(\"7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\\n7 7\") == '16'\nassert solution(\"3 1\\n1 3\\n\") == '1'\nassert solution(\"7 0\\n\") == '0'\nassert solution(\"7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\\n7 7\") == '16'\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2\\n2 3\\n3 4\\n4 1\\n') == '4', 'error'\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n\n* Use `sum(range(1, n+1))` to get the number of vertices.\n* Use `sum(range(1, n+1)) * (n-1) // 2` to get the number of edges.\n\n----\n'''\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"4\"\nassert solution(\"7 0\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"16\"\n\n\"\"\"\n\n\nimport collections\n\nclass Dominoes:\n    def __init__(self, n: int, m: int):\n        self.n = n\n        self.m = m\n        self.graph = collections.defaultdict(list)\n        for _ in range(m):\n            a, b = map(int, stdin.readline().strip().split())\n            self.graph[a].append(b)\n            self.graph[b].append(a)\n        self.a = {}\n        self.b = {}\n        for i in range(1, n+1):\n            self.a[i] = self.get_a(i)\n            self.b[i] = self.get_b(i)\n\n    def get_a(self, v):\n        if v in self.graph:\n            return min(self.graph[v])\n        return v\n\n    def get_b(self, v):\n        if v in self.graph:\n            return max(self.graph[v])\n        return v\n\n    def dominoes(self):\n        # dp[i][j] = number of dominoes with a_i <= a_j <= b_i <= b_j <= i + j\n        dp = [[0] * (self.n+1) for _ in range(self.n+1)]\n        dp[0][0] = 1\n        for _ in range(1, self.n):\n            for i in range(self.n):\n                a_i = self.a[i+1]\n                b_i = self.b[i+1]\n                for j in range(self.n):\n                    a_j = self.a[j+1]\n                    b_j = self.b[j+1]\n                    if a_i <= a_j <= b_i <= b_j:\n                        dp[i+1][j+1] += dp[i][j]\n                    dp[i+1][j+1] %= 10000007\n        return dp[-1][-1]\n\n\nfor i in range(1):\n    stdin = open('test_files/Y13R5P1/A.in')\n    solution = Dominoes(int(stdin.readline().strip()), int(stdin.readline().strip()))\n    print(solution.dominoes())\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"4\"\nassert solution(\"7 0\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"16\"\nassert solution(\"3 1\\n1 3\\n\") == \"1\"\nassert solution(\"7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"16\"\n\n\"\"\"\n\n\nfrom functools import reduce\nfrom itertools import permutations\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2\\n2 3\\n3 4\\n4 1') == '4'\nassert solution('7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7') == '16'\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"4\"\nassert solution(\"7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"16\"\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 4\n1 2\n2 3\n3 4\n4 1''') == \"4\"\nassert solution('''7 0\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 3\n2 4\n2 5\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n''') == \"16\"\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n1 2\\n2 3\\n3 4\\n4 1') == '4'\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom copy import deepcopy"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2\\n2 3\\n3 4\\n4 1') == '4'\nassert solution('7 21\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7') == '16'\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4 1\n1 3 7 5\n3\n\"\"\") == \"18\"\nprint(\"Test 1 OK\")\n\nassert solution(\"\"\"3 2\n10 3 8\n2 3\n\"\"\") == \"40\"\nprint(\"Test 2 OK\")\n\nassert solution(\"\"\"4 1\n1 3 7 5\n2\n\"\"\") == \"18\"\nprint(\"Test 3 OK\")\n\nassert solution(\"\"\"4 1\n1 3 7 5\n2\n\"\"\") == \"18\"\nprint(\"Test 4 OK\")\n\nassert solution(\"\"\"4 1\n1 3 7 5\n2\n\"\"\") == \"18\"\nprint(\"Test 5 OK\")"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\nassert solution('1\\n2\\n3\\n') == '6'\nassert solution('1\\n2\\n3\\n4\\n') == '10'\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n1 3 7 5\\n3\") == '18'\nassert solution(\"3 2\\n10 3 8\\n2 3\") == '40'\nassert solution(\"2 2\\n100 200\\n1 2\") == '400'\n\"\"\"\nimport itertools\nfrom collections import defaultdict"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 3 7 5\\n3\\n\") == \"18\"\nassert solution(\"3 2\\n10 3 8\\n2 3\\n\") == \"40\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\n\n'''\n\n\nn,m = [int(x) for x in input().split()]\nl= [int(x) for x in input().split()]\nfor i in range(m):\n    a,b = input().split()\n    print(l[int(a)-1]*int(b))\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1\\n1 3 7 5\\n3\\n') == '18'\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n1 3 7 5\\n3\\n\") == \"18\"\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 3 7 5\\n3\\n\") == \"18\"\n\n\"\"\""
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n1 3 7 5\\n3\\n') == '18'\nprint('Test pass.')\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 40 60 80 100\\n0 1 2 3 4\\n1 0\") == \"4930\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 40 60 80 100\") == \"4900\"\n\n\"\"\"\nimport math\n\nm1, m2, m3, m4, m5 = map(int, stdin.readline().strip().split(' '))\nw1, w2, w3, w4, w5 = map(int, stdin.readline().strip().split(' '))\nh1, h2 = map(int, stdin.readline().strip().split(' '))\n\nscore = 0\nfor i in range(5):\n    score += math.ceil(max((0.3 * 500, (1 - m1 / 250) * 500 - 50 * w1), 0))\n    if i == 0:\n        score += 100 if h1 > 0 else 0\n    else:\n        score -= 50\n\nprint(score)\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 40 60 80 100\\n0 1 2 3 4\\n1 0') == '4900'\n\n\"\"\""
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"20 40 60 80 100\"\n) == \"4900\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 40 60 80 100') == '4900'\n\n\"\"\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 40 60 80 100\\n0 1 2 3 4\\n1 0\") == \"4900\"\nassert solution(\"119 119 119 119 119\\n0 0 0 0 0\\n10 0\") == \"4930\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"20 40 60 80 100\n0 1 2 3 4\n1 0\"\"\") == \"4930\"\nassert solution(\n\"\"\"119 119 119 119 119\n0 0 0 0 0\n10 0\"\"\") == \"4930\"\nassert solution(\n\"\"\"0 0 0 0 0\n0 0\"\"\") == \"0\"\nassert solution(\n\"\"\"1 1 1 1 1\n0 0\"\"\") == \"400\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 40 60 80 100') == '4930'\nassert solution('119 119 119 119 119') == '4930'\nassert solution('0 0 0 0 0') == '4930'\nassert solution('10 0') == '4930'\nassert solution('1 0') == '4930'\n\"\"\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 40 60 80 100\") == \"4900\"\nassert solution(\"119 119 119 119 119\") == \"4930\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 40 60 80 100\") == \"4900\"\n\"\"\"\nimport sys\nimport math\nimport re\nsys.setrecursionlimit(1_000_000)\n\ns = r\"\\s*([0-9]+)\\s*\" * 5\nm = re.findall(s, stdin)\n\nw = list(map(int, m[1::2]))\nh = m[2::2]"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 2\") == 2\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 1 1') == '1'\nassert solution('1 2 1 2') == '2'\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 2\") == 2\n\"\"\"\n\nn, m, l, r = (int(i) for i in stdin.split())\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1 1\") == \"1\"\nassert solution(\"1 2 1 2\") == \"2\"\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1\\n1 1 1 2\") == \"1\"\nassert solution(\"1 1 1 2\") == \"2\"\nassert solution(\"1 1 1 1\\n1 1 2 2\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import product"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2\") == 2\nassert solution(\"2 2 1 1\") == 1\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1 1\") == 1\nassert solution(\"1 2 1 2\") == 2\n\"\"\"\n\nstdin = input()\nn, m, l, r = [int(x) for x in stdin.split()]"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 2\") == 1\nassert solution(\"2 2 1 1\") == 1\nassert solution(\"2 2 1 2\") == 2\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1 2\") == 2\n\"\"\""
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1 1\") == 1\nassert solution(\"1 2 1 2\") == 2\n\"\"\""
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\") == \"Possible\"\nassert solution(\"3 2\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Possible\"\nassert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n\") == \"Possible\"\nassert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Possible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\") == \"Possible\"\nassert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Possible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\""
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\") == \"Possible\"\nassert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n') == 'Possible'\nassert solution('2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n') == 'Possible'\nassert solution('3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n') == 'Impossible'\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n\") == \"Possible\"\nassert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Possible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Possible\"\nassert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Impossible\"\n\n\nimport unittest\nfrom collections import defaultdict\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Possible\"\nassert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n\") == \"Possible\"\nassert solution(\"3 2\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Impossible\"\nassert solution(\"3 3\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n\") == \"Possible\"\nassert solution(\"3 2\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\") == \"Possible\"\nassert solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\") == \"Impossible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 2\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8''') == 'Impossible'\nassert solution('''2 3\n2 4 5\n4 5 6\n3 6 7\n8 10 11\n''') == 'Possible'\nassert solution('''2 3\n2 4 5\n4 5 6\n3 6 7\n8 10 11\n''') == 'Possible'"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 5\") == 11\nassert solution(\"1 1 2\") == 3\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 5\") == \"cccaabbccbb\"\nassert solution(\"3 1 1\") == \"aabcbcbcbcb\"\nassert solution(\"3 1 2\") == \"acc\"\n\"\"\""
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1 2''') == '3'\nassert solution('''3\n1 1 2''') == '3'\nassert solution('''3\n1 1 1''') == '1'\nassert solution('''2\n1 1''') == '2'\n\nassert solution('''4\n1 1 3''') == '4'\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 5\") == \"11\"\nassert solution(\"3 1 1\") == \"3\"\n\nsolution(input())\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u0412 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0439 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f. \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043e\u0434\u0438\u043d \u0432 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u0435\u0442 \u0432\u0441\u0435\u0433\u043e \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0439. \n\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0434\u043b\u0438\u043d\u043e\u0439 k, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u043e \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \n\u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0438\u0441\u043b\u0430 k. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u044e\u0431\u0430\u044f \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u0438\u043d\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0439 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0435:   \n1) \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u043d \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0441\u044f \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u0441\u044f, \u0442\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c. \n2) \u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u043d \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0441\u044f \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u0441\u044f, \u0442\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c.\n\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0434\u043b\u044f \u043b\u044e\u0431\u043e\u0439 \u0434\u043b\u0438\u043d\u044b \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430\u044f \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 \u0443 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0440\u0435\u0437\u0430\u043d\u0430 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438 \u0442\u0430\u043a\u043e\u0439 \u0434\u043b\u0438\u043d\u044b, \n\u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043b\u0438\u043d\u044b k, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c \u0442\u0435\u043a\u0441\u0442\u0430 \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043a\u0430\u043a\u0430\u044f \u0438\u0437 \u0442\u0440\u0435\u0445 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430. \n\u041d\u0430\u0439\u0434\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432.\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\n\u0412 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0439 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f. \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043e\u0434\u0438\u043d \u0432 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u0435\u0442 \u0432\u0441\u0435\u0433\u043e \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0439. \n\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0434\u043b\u0438\u043d\u043e\u0439 k, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u043e \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0438\u0441\u043b\u0430 k. \n\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u044e\u0431\u0430\u044f \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u0438\u043d\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0439 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0435:   \n1) \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u0434\u043b\u044f \u043a\u0430\ufffd"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 5\") == \"11\"\nassert solution(\"1 1 2\") == \"3\"\n\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 2\") == \"3\"\nassert solution(\"3\\n2 5 5\") == \"11\"\n\"\"\"\n\n\n\nimport heapq\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 2\") == \"3\"\nassert solution(\"3\\n1 1 2\") == \"3\"\nassert solution(\"3\\n1 1 2\") == \"3\""
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 1\") == 3\nassert solution(\"3 2 5\") == 11\nassert solution(\"3 5 5\") == 11\nassert solution(\"3 1 5\") == 3\nassert solution(\"3 2 4\") == 6\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n2 1 9\") == \"1\"\nassert solution(\"4 20\\n10 3 6 3\") == \"0\"\nassert solution(\"3 2\\n1 1 9\") == \"1\"\nassert solution(\"4 10\\n10 3 6 3\") == \"0\"\nassert solution(\"3 3\\n2 1 9\") == \"1\"\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 20\\n10 3 6 3') == '0'\nassert solution('4 20\\n10 3 6 3') == '0'\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n2 1 9') == 1\nassert solution('4 20\\n10 3 6 3') == 0\nassert solution('4 20\\n6 7 2 6') == 2\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3\n2 1 9''') == '1'\nassert solution('''4 20\n10 3 6 3''') == '0'\nassert solution('''1 1000000000\n1''') == '1'\nassert solution('''3 3\n2 1 9''') == '1'\nassert solution('''4 20\n10 3 6 3''') == '0'\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n2 1 9\") == \"1\"\nassert solution(\"4 20\\n10 3 6 3\") == \"0\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nassert solution(\"3 3\\n2 1 9\") == \"1\"\nassert solution(\"4 20\\n10 3 6 3\") == \"0\"\n\nn, k = [int(i) for i in stdin.readline().split()]\na = [int(i) for i in stdin.readline().split()]\n\nmax_a = max(a)\nmin_a = sum([a[i]//2 for i in range(n)])\n\nmin_a = min(max_a, min_a)\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 20\\n10 3 6 3') == '0'\nassert solution('3 3\\n2 1 9') == '1'\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a_1, a_2,..., a_n) == result\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n2 1 9') == '1'\nassert solution('4 20\\n10 3 6 3') == '0'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 3\n1 1 1\n\n\"\"\") == \"0\"\nassert solution(\"\"\"4 20\n10 3 6 3\n\n\"\"\") == \"0\"\nassert solution(\"\"\"4 20\n10 3 6 1\n\n\"\"\") == \"1\"\nassert solution(\"\"\"4 20\n10 1 3 6 3\n\n\"\"\") == \"0\"\nassert solution(\"\"\"4 20\n10 3 6 1\n\n\"\"\") == \"1\"\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n2 1 9\\n') == '1'\nassert solution('4 20\\n10 3 6 3\\n') == '0'\n\"\"\""
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 3\\n2 2\\n2 2') == '2 2 2'\n\"\"\"\n\nn = int(input())\nmin1, max1 = map(int, input().split())\nmin2, max2 = map(int, input().split())\nmin3, max3 = map(int, input().split())\ncount1 = (n // min1 + n // max1) * max1\ncount2 = (n // min2 + n // max2) * max2\ncount3 = (n // min3 + n // max3) * max3\nprint(min(count1, count2, count3))\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n1 3\\n2 2\\n2 2\") == \"2 2 2\"\nassert solution(\"6\\n1 5\\n1 5\\n1 5\") == \"1 2 1\"\nassert solution(\"6\\n1 3\\n1 5\\n1 3\") == \"1 2 1\"\n\"\"\""
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 5\\n2 6\\n3 7\") == \"1 2 3\"\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1 2'\nassert solution('3 3') == '3 3'\nassert solution('3 3') == '3 3'\nassert solution('1 1') == '1 1'\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 5\\n2 6\\n3 7\") == \"1 2 3\"\nassert solution(\"10\\n1 2\\n1 3\\n1 5\\n\") == \"2 3 5\"\nassert solution(\"6\\n1 3\\n2 2\\n2 2\\n\") == \"2 2 2\"\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n1 5\") == \"1 2 3\"\nassert solution(\"6\\n1 5\\n1 3\\n1 2\") == \"1 2 3\"\nassert solution(\"10\\n1 3\\n1 2\\n1 2\\n1 2\") == \"1 2 2\"\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 3\\n2 2\\n2 2\\n\") == '2 2 2'\nassert solution(\"6\\n1 3\\n2 2\\n2 2\\n\") == '2 2 2'\nassert solution(\"10\\n1 2\\n1 3\\n1 5\\n\") == '2 3 5'\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2 3 4 3') == '1 2 3', 'Case 1'\nassert solution('3 1 2 3') == '2 3', 'Case 2'\nassert solution('1 1 1 1 1') == '1 1 1', 'Case 3'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 3\\n2 2\\n2 2\\n\") == \"2 2 2\"\nassert solution(\"10\\n1 2\\n1 3\\n1 5\\n\") == \"2 3 5\"\nassert solution(\"6\\n1 3\\n2 2\\n2 2\\n\") == \"2 2 2\"\n\nassert solution(\"10\\n1 2\\n1 3\\n1 5\\n\") == \"2 3 5\"\nassert solution(\"6\\n1 3\\n2 2\\n2 2\\n\") == \"2 2 2\"\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n1 5\\n2 6\\n3 7') == '1 2 3'\nassert solution('10\\n1 2\\n1 3\\n1 5') == '2 3 5'\nassert solution('6\\n1 3\\n2 2\\n2 2') == '2 2 2'\nassert solution('6\\n1 3\\n2 2\\n2 2') == '2 2 2'\nassert solution('6\\n1 5\\n2 6\\n3 7') == '1 2 3'\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n3 4 5 6 7''') == 'UP'\n\nassert solution('''7\n12 13 14 15 14 13 12''') == 'DOWN'\n\nassert solution('''1\n8''') == '-1'\n\n'''\n4\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 4 5 6 7\") == \"UP\"\nassert solution(\"7\\n12 13 14 15 14 13 12\") == \"DOWN\"\nassert solution(\"1\\n8\") == \"-1\""
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5 6 7\") == \"UP\"\nassert solution(\"7 12 13 14 15 14 13 12\") == \"DOWN\"\nassert solution(\"1 8\") == \"-1\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"4\"\n) == \"UP\"\n\nassert solution(\n\"5\"\n) == \"DOWN\"\n\nassert solution(\n\"7\"\n) == \"-1\"\n\n\"\"\""
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 4 5 6 7') == 'UP'\nassert solution('7\\n12 13 14 15 14 13 12') == 'DOWN'\nassert solution('1\\n8') == '-1'\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 4 5 6 7\") == \"UP\"\nassert solution(\"7\\n12 13 14 15 14 13 12\") == \"DOWN\"\nassert solution(\"1\\n8\") == \"-1\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 4 5 6 7\") == \"UP\"\nassert solution(\"7\\n12 13 14 15 14 13 12\") == \"DOWN\"\nassert solution(\"1\\n8\") == \"-1\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5 6 7\") == \"UP\"\nassert solution(\"12 13 14 15 14 13 12\") == \"DOWN\"\nassert solution(\"1 8\") == \"-1\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 4 5 6 7\") == \"UP\"\nassert solution(\"7\\n12 13 14 15 14 13 12\") == \"DOWN\"\nassert solution(\"1\\n8\") == -1\nassert solution(\"0\\n8\") == \"UP\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3 4 5 6 7') == 'UP'\nassert solution('7\\n12 13 14 15 14 13 12') == 'DOWN'\nassert solution('1\\n8') == '-1'"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"u\") == \"Yes\"\nassert solution(\"aa\") == \"Yes\"\nassert solution(\"uu\") == \"Yes\"\nassert solution(\"akm\") == \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"ua\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"u\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"ua\") == \"No\"\nassert solution(\"akm\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == 'Yes'\nassert solution('ua') == 'Yes'\nassert solution('u') == 'No'\n\nassert solution('akm') == 'Yes'\nassert solution('ua') == 'Yes'\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"ua\") == \"No\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"u\") == \"Yes\"\nassert solution(\"k\") == \"No\"\n\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"ukm\") == \"Yes\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'Yes'\nassert solution('u') == 'Yes'\nassert solution('abc') == 'Yes'\nassert solution('ukm') == 'Yes'\nassert solution('akm') == 'No'\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"ua\") == \"Yes\"\nassert solution(\"akm\") == \"No\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"ukm\") == \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'Yes'\nassert solution('u') == 'Yes'\nassert solution('abc') == 'Yes'\nassert solution('ukm') == 'Yes'\nassert solution('akm') == 'No'\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == 'Yes'\nassert solution(u) == 'Yes'\nassert solution(abc) == 'Yes'\nassert solution(ukm) == 'Yes'\nassert solution(akm) == 'No'\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"...B....W....W.W\") == \"A\"\nassert solution(\"........\") == \"B\"\n\"\"\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"........\") == \"A\"\nassert solution(\"B....B.\\n....W...\\n........\\n..W.....\\n........\\n........\") == \"A\"\nassert solution(\"..B.....\\n..W.....\\n......B.\\n........\\n.....W..\\n......B.\\n........\\n........\") == \"B\"\nassert solution(\".B....B.\\n....W...\\n........\\n..W.....\\n........\\n........\") == \"B\"\nassert solution(\"........\\n.B....B.\\n....W...\\n........\\n..W.....\\n........\") == \"B\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_stdin_1) == 'A'\nassert solution(test_stdin_2) == 'B'\nprint('All tests passed.')\n\n-----\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('........\\n........\\n.B....B.\\n....W...\\n........\\n..W.....\\n........\\n........') == 'A'\nassert solution('........\\n........\\n.B....B.\\n....W...\\n........\\n..W.....\\n........\\n........') == 'B'\n\"\"\""
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"........\\n........\\n.B....B.\\n....W...\\n........\\n..W.....\\n........\\n........\") == \"A\"\nassert solution(\"......B.\\n........\\n.W....B.\\n........\\n...W...\\n....W..\\n...B...\\n....B..\\n........\\n.B....B\\n\") == \"B\"\nassert solution(\"........\\n......B.\\n........\\n......B.\\n........\\n......B.\\n........\\n.B......\\n\") == \"A\"\nassert solution(\"..B.....\\n..W.....\\n......B.\\n........\\n.....W..\\n......B.\\n........\\n.B......\\n\") == \"B\"\nassert solution(\".....B..\\n....W...\\n...B....\\n....W...\\n..B.....\\n......B.\\n........\\n....B...\\n...B....\\n......B.\\n\") == \"A\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".W.B.W.\") == \"A\"\nassert solution(\"...W.B.W.\") == \"A\"\nassert solution(\"..B..W....\") == \"A\"\nassert solution(\"......B.W..\") == \"A\"\nassert solution(\".........\") == \"A\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"........\\n\"\n                \".B....B.\\n\"\n                \"....W...\\n\"\n                \"..W.....\\n\"\n                \"........\\n\"\n                \"........\") == \"A\"\n\nassert solution(\"........\\n\"\n                \".B....B.\\n\"\n                \"....W...\\n\"\n                \"..W.....\\n\"\n                \"........\\n\"\n                \"........\") == \"B\"\n\nassert solution(\"........\\n\"\n                \".B.W.B.\\n\"\n                \"....B.B\\n\"\n                \"..W....\\n\"\n                \"........\\n\"\n                \"........\") == \"A\"\n\nassert solution(\"........\\n\"\n                \".B.B....\\n\"\n                \"....B.B.\\n\"\n                \"..W.W..B\\n\"\n                \"........\\n\"\n                \"........\") == \"A\"\n\nassert solution(\"........\\n\"\n                \".B....B.\\n\"\n                \"....W...\\n\"\n                \"..B.W.B.\\n\"\n                \"........\\n\"\n                \"........\") == \"B\""
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".B....B\\n....W...\\n........\\n..W.....\\n........\") == 'A'\n\nassert solution(\".W..B..W\\n...WB..W\\n....BW...\\n..B.W...\\n......B.\") == 'B'\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".......\") == \"A\"\nassert solution(\"........\") == \"A\"\nassert solution(\"...B...B\") == \"B\"\nassert solution(\"...B.B...\") == \"B\"\nassert solution(\"B....B...\") == \"A\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"........\\n........\\n.B....B.\\n....W...\\n........\\n..W.....\\n........\\n........\") == 'A'\nassert solution(\"........\\n........\\n.W....B.\\n....W...\\n........\\n..W.....\\n........\\n........\") == 'B'\nassert solution(\"........\\n...B...\\n....W..\\n...W..\\n......\\n..W....\\n...W..\\n....W..\\n........\") == 'B'\nassert solution(\"........\\n........\\n........\\n..B....\\n...W...\\n......\\n........\\n...W..\\n....W..\") == 'B'\nassert solution(\"........\\n........\\n........\\n........\\n.B....B.\\n....W...\\n...W..\\n....W..\\n........\") == 'A'\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3 5 7\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"5\n11 2 3 5 7\n4\n11 7 3 7\"\"\") == \"3\"\n\nassert solution(\n\"\"\"2\n1 2\n1\n100\"\"\") == \"-1\"\n\nassert solution(\n\"\"\"3\n1 2 3\n3\n1 2 3\"\"\") == \"3\"\n\nprint('Hooray!')\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n11 2 3 5 7\\n4\\n11 7 3 7') == '3'\nassert solution('2\\n1 2\\n1\\n100') == '-1'\nassert solution('3\\n1 2 3\\n3\\n1 2 3') == '3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 2 3 5 7\\n4\\n11 7 3 7\") == \"3\"\nassert solution(\"1 2 3\\n3\\n1 2 3\") == \"1\"\nassert solution(\"11 2 3 5 7\\n4\\n10 2 3 7\") == \"-1\"\nassert solution(\"1 2 3 4 5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"10\\n1 2 3 4 5 6\") == \"6\"\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([\"11\", \"2\", \"3\", \"5\", \"7\"], [\"11\", \"7\", \"3\", \"7\"]) == \"3\"\nassert solution([\"1\", \"2\"], [\"1\", \"2\", \"3\"]) == \"3\"\nassert solution([\"1\", \"2\"], [\"1\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\"], [\"1\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\"], [\"1\", \"2\"]) == \"-1\"\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n11 2 3 5 7\\n4\\n11 7 3 7') == 3\nassert solution('2\\n1 2\\n1\\n100') == -1\nassert solution('3\\n1 2 3\\n3\\n1 2 3') == 3\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n11 2 3 5 7\") == \"3\"\nassert solution(\"4\\n11 7 3 7\") == \"3\"\nassert solution(\"2\\n1 2\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"1\\n100\") == \"1\"\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n11 2 3 5 7\\n4\\n11 7 3 7\") == \"3\"\nassert solution(\"2\\n1 2\\n1\\n100\") == \"-1\"\nassert solution(\"3\\n1 2 3\\n3\\n1 2 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n11 2 3 5 7\\n4\\n11 7 3 7\") == \"3\"\nassert solution(\"2\\n1 2\\n1\\n100\") == \"-1\"\nassert solution(\"3\\n1 2 3\\n3\\n1 2 3\") == \"3\""
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 5 7\") == \"3\"\nassert solution(\"11 2 3 5 7\") == \"3\"\nassert solution(\"11 7 3 7\") == \"3\"\n\nassert solution(\"1 2 3 5 7\") == \"3\"\nassert solution(\"11 2 3 5 7\") == \"3\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"NO\"\nassert solution(\"NikitaAndString\") == \"YES\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\nassert solution(\"Hakan_and_Ronit\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"NikitaAndString\") == \"YES\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\nassert solution(\"J_and_K\") == \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Danil_and_Olya\") == \"NO\"\nassert solution(\"NikitaAndString\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"NikitaAndString\") == \"YES\"\nassert solution(\"Alex_and_broken_contest\") == \"NO\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\nassert solution(\"Alex_and_Olya\") == \"NO\"\nassert solution(\"Alex_and_Andrey\") == \"NO\"\n\nprint(\"All test cases passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Danil_and_Olya') == 'YES'\nassert solution('Nikita_and_string') == 'YES'\nassert solution('Alex_and_broken_contest') == 'NO'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Alex_and_broken_contest') == 'NO'\nassert solution('Nikita_and_String') == 'YES'\nassert solution('Danil_and_Olya') == 'NO'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n\"\"\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Alex_and_broken_contest') == 'NO'\nassert solution('NikitaAndString') == 'YES'\nassert solution('Danil_and_Olya') == 'NO'\n\n\"\"\""
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Alex_and_broken_contest') == 'NO'\nassert solution('Nikita_and_String') == 'YES'\n\n---"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"NO\"\nassert solution(\"NikitaAndString\") == \"YES\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\n\"\"\""
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''NikitaAndString''') == 'YES'\nassert solution('''Alex_and_broken_contest''') == 'NO'\nassert solution('''Danil_and_Olya''') == 'NO'\n\n'''\nGiven a string of numbers, find the max sum of numbers.\n\nExample:\n\n\"1, 2, 3, 4, -1, -2, -3, -4\" should return 6, because the sum of all numbers is 6.\n\n\"1, 2, 3, 4, -1, -2, -3, -4, -5\" should return 4, because the sum of the largest\nnon-negative subset is 4.\n\n\"1, 2, 3, 4, -1, -2, -3, -4, -5, -6\" should return 6, because the sum of the\nlargest non-negative subset is 6.\n\nThe algorithm should work even if there is no zero in the array."
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 2') == '3'\nassert solution('6 13 1') == '4'\nassert solution('1 4 3') == '-1'\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 2') == 3\n\"\"\"\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 2') == '3','solution 1'\nassert solution('6 13 1') == '4','solution 2'\n\"\"\"\nfrom math import sqrt\n\nfrom collections import Counter"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '2 4 2'\n) == '3'\n\nassert solution(\n    '6 13 1'\n) == '4'\n\nassert solution(\n    '1 4 3'\n) == '-1'\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 2\") == \"3\"\nassert solution(\"1 2 2\") == \"2\"\nassert solution(\"6 13 1\") == \"4\"\n\"\"\"\n\na, b, k = map(int, input().split())\ncnt = 0\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 2\") == \"3\"\nassert solution(\"6 13 1\") == \"4\"\nassert solution(\"1 4 3\") == \"-\"\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 2\") == 3\nassert solution(\"6 13 1\") == 4\n\n\"\"\"\n\nimport math\nfrom math import sqrt"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 2\") == 3\nassert solution(\"6 13 1\") == 4"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 2\") == \"3\"\nassert solution(\"1 4 3\") == \"-1\"\nassert solution(\"1 1 1\") == \"1\"\n\nfrom typing import List, Dict, Union\n\nclass Solution:\n    def __init__(self, *args, **kwargs):\n        self._ans = None\n\n    def solution(self, stdin: str) -> str:\n        a, b, k = map(int, stdin.split())\n        if k < 2:\n            return \"-1\"\n        elif k > b:\n            return \"1\"\n        l = 0\n        while l < b - a + 1:\n            found_primes = 0\n            for i in range(a, a + l + 1):\n                if self._is_prime(i):\n                    found_primes += 1\n            if found_primes >= k:\n                self._ans = l\n                break\n            l += 1\n        return str(self._ans)\n\n    def _is_prime(self, n: int) -> bool:\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, n // 2 + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 2') == 3\n\n'''\n\na, b, k = map(int, input().split())"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 4\") == \"0\"\nassert solution(\"3 4 3\") == \"0\"\nassert solution(\"2 18 13\") == \"0.5\"\n\"\"\""
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''4 4 4\n'''\n) == '0'\n\nassert solution(\n'''3 4 3\n'''\n) == '-1'\n\nassert solution(\n'''2 18 13\n'''\n) == '0.5'\n\nassert solution(\n'''4 4 4\n'''\n) == '0'\n\nassert solution(\n'''3 4 3\n'''\n) == '-1'"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 4\") == \"0\"\nassert solution(\"2 18 13\") == \"0.5\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 18 13') == '0.5'\nassert solution('4 4 4') == '0'\nassert solution('3 4 3') == '-1'\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 18 13\") == \"0.5\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"3 4 3\") == \"-1\""
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 18 13\") == \"0.5\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"3 4 3\") == \"-1\"\n\"\"\"\n\nimport math\n\na, h, w = map(int, input().split())\n\nh -= 1\nw -= 1\n\ntop_left_row_wall = int(math.ceil(a/w))\n\ntop_left_column_wall = int(math.ceil(a/h))"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 18 13\n''') == '0.5'\nassert solution('''4 4 4\n''') == '0'\nassert solution('''3 4 3\n''') == '-1'\nassert solution('''1 1 1\n''') == '-1'\n\nimport sys\nimport os\n\npath = os.path.dirname(os.path.abspath(__file__))\n\nsys.stdin = open(path + '/test.txt', 'r')\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 18 13\") == \"0.5\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"3 4 3\") == \"-1\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 18 13''') == '0.5'\nassert solution('''4 4 4''') == '0'\nassert solution('''3 4 3''') == '-1'\n\n'''\nimport math\n\na, h, w = [int(i) for i in input().split(' ')]\nx = h / a\ny = w / a"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 18 13\") == \"0.5\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"3 4 3\") == \"-1\"\n\"\"\""
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3\\n4 7\\n8 11\\n2\") == 3\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\n\npages = [int(x) for x in input().split()]\n\nmarks = int(input())\n\ncounter = Counter(pages)\n\nfor page in range(1, n + 1):\n    if page not in counter:\n        print(page)\n        break\nelse:\n    if marks in counter:\n        print(n)\n    else:\n        print(n - marks)\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\") == \"2\"\nassert solution(\"1\\n1 7\\n4\") == \"1\""
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\\n\") == \"2\"\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n\") == \"3\"\nassert solution(\"1\\n1 7\\n4\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\\n4 7\\n8 11\\n2\") == \"3\"\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\") == \"2\"\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\") == \"2\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n2\n\n\n\n-----\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n2\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n2\n\n\n\n-----\n\n\n1\n1 4\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n4\n1 4\n5 9\n10 12\n9\n\n4\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n4\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n5\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n2\n\n\n\n-----\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n2\n\n\n\n-----\n\n\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n2\n\n\n\n-----\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n2\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n2\n\n\n\n-----\n\n\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n2\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n2\n\n\n\n-----\n\n\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n4\n1 4\n5 9\n10 12\n9\n\n4\n\n\n\n-----\n\n\n\n4\n1 4\n5 9\n10 12\n9\n\n4\n\n\n\n-----\n\n\n\n4\n1 4\n5 9\n10 12\n9\n\n4\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n2\n\n\n\n-----\n\n\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n2\n\n\n\n-----\n\n\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n1\n1 7\n4\n\n1\n\n\n\n-----\n\n\n\n3\n1 4\n5 9\n10 12\n9\n\n3\n\n\n\n-----\n\n\n\n3\n1 4\n5 9"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3\\n4 7\\n8 11\\n2\\n') == 3\nassert solution('3\\n1 4\\n5 9\\n10 12\\n9\\n') == 2\nassert solution('1\\n1 7\\n4\\n') == 1\n\n\"\"\"\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\") == \"2\"\nassert solution(\"1\\n1 7\\n4\") == \"1\"\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 4\n5 9\n10 12\n9\n''') == '2'\nassert solution('''\n3\n1 3\n4 7\n8 11\n2\n''') == '3'\nassert solution('''\n1\n1 7\n4\n''') == '1'\nassert solution('''\n1\n1 4\n4\n''') == '1'\n\nprint('Success')"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\\n\") == \"2\"\nassert solution(\"3\\n1 2\\n3 5\\n4 7\\n\") == \"3\"\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n3\n1 3\n4 7\n8 11\n2\n\"\"\") == '3'\nassert solution(\n    \"\"\"\n3\n1 4\n5 9\n10 12\n9\n\"\"\") == '2'\nassert solution(\n    \"\"\"\n1\n1 7\n4\n\"\"\") == '1'\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 4\\n5 9\\n10 12\\n9\") == '2'\nassert solution(\"3\\n1 4\\n5 9\\n10 12\\n\") == '1'\nassert solution(\"1\\n1 7\\n4\\n\") == '1'\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CODEWAITFORITFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('DOGEFORCES') == 'NO'\n\"\"\""
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"DECODEFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DOGEFORCES\") == \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"YES\"\nassert solution(\"DOGEFORCES\") == \"NO\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"TEMPLATE\") == \"YES\"\nassert solution(\"CODEFORCES\") == \"NO\"\nassert solution(\"CODEFORCES\") == \"YES\"\nassert solution(\"CODEFORCES\") == \"YES\"\nassert solution(\"CODEFORCES\") == \"YES\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'NO'\nassert solution('CODEWAITFORITFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'YES'\n\n\"\"\""
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CODEFORCES\") == 'YES'\nassert solution(\"CODEWAITFORITFORCES\") == 'YES'\nassert solution(\"DOGEFORCES\") == 'NO'\nassert solution(\"BOTTOMCODER\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('TEMPLATE') == 'TEMPLE'\nassert solution('CODEFORCES') == 'CODEFORCES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'YES'\nassert solution('DOGEFORCES') == 'NO'\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == 'YES'\nassert solution(\"BOTTOMCODER\") == 'NO'\nassert solution(\"DECODEFORCES\") == 'YES'\nassert solution(\"DOGEFORCES\") == 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"YES\"\nassert solution(\"DOGEFORCES\") == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"YES\"\nassert solution(\"DOGEFORCES\") == \"NO\""
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == 6\nassert solution(4) == 18\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == '6'\nassert solution(\"4\") == '18'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n\") == \"6\"\nassert solution(\"4\\n\") == \"18\""
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"18\"\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 3\") == \"6\"\nassert solution(\"3\\n1 3 2\") == \"4\"\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"18\"\nassert solution(\"3\") == \"6\"\n\"\"\"\n\nfrom math import acos, atan, pi, sin, cos\n\nn = int(input())\nS = []\nfor i in range(n):\n    x, y = map(float, input().split())\n    S.append((x, y))"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '6'\nassert solution('4\\n') == '18'\nassert solution('5\\n') == '41'\n\"\"\""
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"18\"\nassert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n') == '6'\n\nassert solution('4\\n') == '18'"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 6\nassert solution(\"4\") == 18\n\n'''\n\nimport math"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == '17'\nassert solution(\"4\") == '4'\nassert solution(\"10\") == '17'\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '17'\nassert solution('4') == '4'\nassert solution('20') == '22'\nassert solution('21') == '23'\nassert solution('10') == '12'\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13\") == \"17\"\nassert solution(\"4\") == \"4\"\nassert solution(\"10\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13') == '17'\nassert solution('4') == '4'\nassert solution('7') == '7'\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"17\"\nassert solution(\"4\") == \"4\""
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"17\"\nassert solution(\"4\") == \"4\"\nassert solution(\"4\") == \"4\""
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"4\"\n\nassert solution(\"13\") == \"17\"\n\n\"\"\"\nfrom typing import Any, List, Dict"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13\") == '17'\nassert solution(\"4\") == '4'\nassert solution(\"1\") == '1'\n\"\"\"\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"17\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13\") == \"17\"\nassert solution(\"4\") == \"4\"\n\"\"\""
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(r\"D:\\GitHub\\Cyber\\Cyber-Dojo\\CyberDojo\\week_3\\input_2.txt\", 'r').read()) == '-1'\nassert solution(open(r\"D:\\GitHub\\Cyber\\Cyber-Dojo\\CyberDojo\\week_3\\input_1.txt\", 'r').read()) == '2'\nassert solution(open(r\"D:\\GitHub\\Cyber\\Cyber-Dojo\\CyberDojo\\week_3\\input_3.txt\", 'r').read()) == '3'\nassert solution(open(r\"D:\\GitHub\\Cyber\\Cyber-Dojo\\CyberDojo\\week_3\\input_4.txt\", 'r').read()) == '5'\nassert solution(open(r\"D:\\GitHub\\Cyber\\Cyber-Dojo\\CyberDojo\\week_3\\input_5.txt\", 'r').read()) == '4'"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1') == '2'\nassert solution('5 2') == '-1'\nassert solution('3 10') == '4'\n\"\"\""
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n2 1 4 2\") == '2'\nassert solution(\"5 2\\n2 2 4 5 3\") == '-1'\nassert solution(\"3 10\\n1 2 3\") == '4'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"5 2\") == \"-1\"\nassert solution(\"3 10\") == \"4\"\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"5 2\") == -1\nassert solution(\"3 10\") == \"4\"\n\"\"\"\n\nn, a = input().split()\nn, a = int(n), int(a)\narr = input().split()\nfor i in range(len(arr)):\n    arr[i] = int(arr[i])\n\nb = -1\nfor i in arr:\n    if a > i:\n        b = i\n        break\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n2 1 4 2\") == \"2\"\nassert solution(\"5 2\\n2 2 4 5 3\") == \"-1\"\nassert solution(\"3 10\\n1 2 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1\\n2 1 4 2') == '2'\nassert solution('5 2\\n2 2 4 5 3') == '-1'\nassert solution('3 10\\n1 2 3') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n2 1 4 2\") == \"2\"\nassert solution(\"5 2\\n2 2 4 5 3\") == -1\nassert solution(\"3 10\\n1 2 3\") == \"4\"\nassert solution(\"4 1\\n2 1 4 2\") == \"2\"\nassert solution(\"4 1\\n3 1 4 2\") == \"3\"\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1') == '2'\nassert solution('5 2') == '-1'\nassert solution('3 10') == '4'\nassert solution('1 2 3') == '4'\nassert solution('4 1') == '2'\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n2 1 4 2') == 2\n\"\"\""
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n3 3 2') == 'YES'\nassert solution('4 4\\n3 3 2\\n1 2\\n2 3') == 'YES'\nassert solution('4 4\\n3 3 2\\n1 2\\n2 3\\n1 2') == 'NO'\n\n\"\"\""
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4') == 'NO'\nassert solution('3 10') == 'YES'\nassert solution('2 10') == 'NO'\nassert solution('3 10') == 'YES'\nassert solution('1 3') == 'NO'\n\"\"\"\n\nimport sys\n\nn, x = list(map(int, sys.stdin.readline().strip().split()))\nencoding = list(map(int, sys.stdin.readline().strip().split()))\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4\\n1 3\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES'\nassert solution('2 3\\n1 3') == 'NO'\nassert solution('3 10\\n3 3 2') == 'YES'\nassert solution('2 10\\n1 3') == 'NO'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('3 10') == 'NO'\nassert solution('2 10') == 'YES'\nassert solution('2 3') == 'YES'\nassert solution('3 10') == 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n1 3\") == \"NO\"\nassert solution(\"3 10\\n3 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n1 3\") == \"NO\"\nassert solution(\"3 10\\n3 3 2\") == \"YES\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4\\n1 3') == 'NO'\nassert solution('3 10\\n3 3 2') == 'YES'\nassert solution('2 10\\n1 3') == 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4\\n1 3') == 'NO'\nassert solution('3 10\\n3 3 2') == 'YES'\nassert solution('2 10\\n1 3') == 'NO'\n\n\"\"\"\n\n\nimport math\nimport itertools"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4\\n1 3') == 'NO'\nassert solution('3 10\\n3 3 2') == 'YES'\n\nprint(solution('2 10\\n1 3'))\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 11') == '3'\nassert solution('6 16') == '3'\n\"\"\"\nimport sys\nfrom itertools import combinations\n\nn, S = map(int, sys.stdin.readline().strip().split())\n\narr = [i for i in range(1, n+1)]\ncases = list(combinations(arr, n//2))\nprint(len(list(filter(lambda x: sum(x) == S, cases))))\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 11\") == \"3\"\nassert solution(\"6 16\") == \"3\"\n\"\"\""
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 11') == '3'\nassert solution('6 16') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 11\") == \"3\"\nassert solution(\"6 16\") == \"3\"\nassert solution(\"5 11\") == \"3\"\nassert solution(\"6 16\") == \"3\"\nassert solution(\"3 16\") == \"3\"\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5, 11) == 3\nassert solution(6, 16) == 3\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 11\") == \"3\"\n\"\"\""
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5, 11) == '3'\nassert solution(6, 16) == '3'\n\"\"\""
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''5 11'''\n) == '3'\nassert solution(\n'''6 16'''\n) == '3'"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 11') == '3'\nassert solution('6 16') == '3'\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 11') == '3'\nassert solution('6 16') == '3'\n\"\"\"\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabc\") == \"abba\"\nassert solution(\"aabcd\") == \"abcba\""
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aabc') == 'abba', 'case1'\nassert solution('aabcd') == 'abcba', 'case2'\n\n\"\"\""
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabc') == 'abba'\nassert solution('aabcd') == 'abcba'\n\"\"\"\n\nimport sys\nimport copy\n\nclass Solution:\n    def __init__(self, s: str):\n        self.s = s\n\n    def solution(self):\n        pass\n\n    def is_palindrome(self, s: str) -> bool:\n        s = s.lower()\n        for i in range(len(s) // 2):\n            if s[i]!= s[-(i+1)]:\n                return False\n        return True\n\n    def solve_linear(self) -> str:\n        min_change = len(self.s)\n        for i in range(len(self.s)):\n            for letter in \"abcdefghijklmnopqrstuvwxyz\":\n                new_s = copy.deepcopy(self.s)\n                new_s = new_s[:i] + letter + new_s[i+1:]\n                # print(new_s)\n                if self.is_palindrome(new_s):\n                    if len(new_s) < min_change:\n                        min_change = len(new_s)\n                        print(min_change)\n        return min_change\n\n    def solve_linear_two(self) -> str:\n        min_change = len(self.s)\n        for i in range(len(self.s)):\n            for letter in \"abcdefghijklmnopqrstuvwxyz\":\n                new_s = copy.deepcopy(self.s)\n                new_s = new_s[:i] + letter + new_s[i+1:]\n                # print(new_s)\n                if self.is_palindrome(new_s):\n                    if len(new_s) < min_change:\n                        min_change = len(new_s)\n                        print(min_change)\n        return min_change\n\n    def solve_linear_three(self) -> str:\n        min_change = len(self.s)\n        for i in range(len(self.s)):\n            for letter in \"abcdefghijklmnopqrstuvwxyz\":\n                new_s = copy.deepcopy(self.s)\n                new_s = new_s[:i] + letter + new_s[i+1:]\n                # print(new_s)\n                if self.is_palindrome(new_s):\n                    if len(new_s) < min_change:\n                        min_change = len(new_s)\n                        print(min_change)\n        return min_change\n\n    def solve_linear_four(self) -> str:\n        min_change = len(self.s)\n        for i in range(len(self.s)):\n            for letter in \"abcdefghijklmnopqrstuvwxyz\":\n                new_s = copy.deepcopy(self.s)\n                new_s = new_s[:i] + letter + new_s[i+1:]\n                # print(new_s)\n                if self.is_palindrome(new_s):\n                    if len(new_s) < min_change:\n                        min_change = len(new_s)\n                        print(min_change)\n        return min_change\n\n    def solve_linear_five(self) -> str:\n        min_change = len(self.s)\n        for i in range(len(self.s)):\n            for letter in \"abcdefghijklmnopqrstuvwxyz\":\n                new_s = copy.deepcopy(self.s)\n                new_s = new_s[:i] + letter + new_s[i+1:]\n                # print(new_s)\n                if self.is_palindrome(new_s):\n                    if len(new_s) < min_change:\n                        min_change = len(new_s)\n                        print(min_change)\n        return min_change\n\n    def solve_linear_six(self) -> str:\n        min_change = len(self.s)\n        for i in range(len(self.s)):\n            for letter in \"abcdefghijklmnopqrstuvwxyz\":\n                new_s = copy.deepcopy(self.s)\n                new_s = new_s[:i] + letter + new_s[i+1:]\n                # print(new_s)\n                if self.is_palindrome(new_s):\n                    if len(new_s) < min_change:\n                        min_change = len(new_s)\n                        print(min_change)\n        return min_change\n\n    def solve_linear_seven(self) -> str:\n        min_change = len(self.s)\n        for i in range(len(self.s)):\n            for letter in \"abcdefghijklmnopqrstuvwxyz\":\n                new_s = copy.deepcopy(self.s)\n                new_s = new_s[:i] + letter + new_s[i+1:]\n                # print(new_s)\n                if self.is_palindrome(new_s):\n                    if len(new_s) < min_change:\n                        min_change = len(new_s)\n                        print(min_change)\n        return min_change\n\n    def solve_linear_eight(self) -> str:\n        min_change = len(self.s)\n        for i in range(len(self.s)):\n            for letter in \"abcdefghijklmnopqrstuvwxyz\":\n                new_s = copy.deepcopy(self.s)\n                new_s = new_s[:i] + letter + new_s[i+1:]\n                # print(new_s)\n                if self.is_palindrome(new_s):\n                    if len(new_s) < min_change:\n                        min_change = len(new_s)\n                        print(min_change)\n        return min_change\n\n    def solve_linear_nine(self) -> str:\n        min_change = len(self.s)\n        for i in range(len(self.s)):\n            for letter in \"abcdefghijklmnopqrstuvwxyz\":\n                new_s = copy.deepcopy(self.s)\n                new_s = new_s[:i] + letter + new_s[i+1:]\n                # print(new_s)\n                if self.is_palindrome(new_s):\n                    if len(new_s) < min_change:\n                        min_change = len(new_s)\n                        print(min_change)\n        return min_change\n\n    def solve_linear_ten(self) -> str:\n        min_change = len(self.s)\n        for i in range(len(self.s)):\n            for letter in \"abcdefghijklmnopqrstuvwxyz\":\n                new_s = copy.deepcopy(self.s)\n                new_s = new_s[:i] + letter + new_s[i+1:]\n                # print(new_s)\n                "
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcd') == 'dcba'\nassert solution('aabc') == 'abac'\nassert solution('mjkji') == 'jiminjk'\nassert solution('mioi') == 'ejmoi'\n\"\"\""
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabc') == 'abba'\nassert solution('aabcd') == 'abcba'\n\"\"\"\n\nimport collections\nimport itertools\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabc\") == \"abba\"\nassert solution(\"aabcd\") == \"abcba\"\n\"\"\"\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabc\") == \"abba\"\nassert solution(\"abcd\") == \"abcba\"\nassert solution(\"abc\") == \"aba\"\nassert solution(\"aab\") == \"aba\"\n\"\"\"\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabc') == 'abba'\nassert solution('aabcd') == 'abcba'\n\n\"\"\"\n\ns = input()"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabcd\") == \"abcba\"\nassert solution(\"aabc\") == \"abba\"\nassert solution(\"kazak\") == \"kazak\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aabc\") == \"abba\"\nassert solution(\"aabcd\") == \"abcba\"\nassert solution(\"abcdba\") == \"cdcba\"\nassert solution(\"kazak\") == \"kazak\"\nassert solution(\"oo\") == \"oo\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"kqK...\") == \"Black\"\nassert solution(\"rnbqkbnr\") == \"Draw\"\nassert solution(\"rppppppr\") == \"White\"\nassert solution(\"...q...\") == \"Black\"\nassert solution(\"...r...\") == \"Black\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"rnbqkbnr\"\n\"pppppppp\"\n\"........\"\n\"........\"\n\"........\"\n\"PPPPPPPP\"\n\"RNBQKBNR\"\n) == \"White\"\n\nassert solution(\"rppppppr\"\n\"...k....\"\n\"........\"\n\"........\"\n\"........\"\n\"K...Q...\"\n\"........\"\n) == \"Black\"\n\nassert solution(\"rppppppr\"\n\"rppppppr\"\n\"rppppppr\"\n\"rppppppr\"\n\"rppppppr\"\n\"rppppppr\"\n\"rppppppr\"\n\"rppppppr\"\n) == \"Draw\"\nassert solution(\"rnbqkbnr\"\n\"pppppppp\"\n\"........\"\n\"........\"\n\"........\"\n\"PPPPPPPP\"\n\"RNBQKBNR\"\n) == \"White\"\n\nassert solution(\"rppppppr\"\n\"...k....\"\n\"........\"\n\"........\"\n\"........\"\n\"K...Q...\"\n\"........\"\n) == \"Black\""
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('.QK...') == 'White'\nassert solution('rppppppr') == 'Black'\nassert solution('rnbqkbnr') == 'Draw'\nassert solution('......K') == 'Black'\nassert solution('rqrqkqrq') == 'White'"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''...QK...\n........\n........\n........\n........\n........\n........\n...rk...''') == 'White'\nassert solution('''rnbqkbnr\npppppppp\n........\n........\n........\n........\nPPPPPPPP\nRNBQKBNR''') == 'Draw'\nassert solution('''rppppppr\n...k....\n........\n........\n........\n........\nK...Q...\n........\n''') == 'Black'\n\n\n\nimport re"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"...\") == \"White\"\nassert solution(\"........\") == \"Draw\"\nassert solution(\"rppppppr\") == \"Black\"\nassert solution(\"rnbqkbnr\") == \"Draw\"\n\"\"\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n...QK...\n........\n........\n........\n........\n........\n........\n...rk...\n''') == 'White'\nassert solution('''\nrppppppr\n...k....\n........\n........\n........\n........\nK...Q...\n........\n''') == 'Black'\nassert solution('''\nrnbqkbnr\npppppppp\n........\n........\n........\n........\nPPPPPPPP\nRNBQKBNR\n''') == 'Draw'\n\n-----\n'''"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"rkpK...\") == \"White\"\nassert solution(\"qrRQK...\") == \"White\"\nassert solution(\"rpppkr...\") == \"Black\"\nassert solution(\"rpkpkr...\") == \"Black\"\nassert solution(\"rpppkR...\") == \"Black\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"rnbqkbnr\\npppppppp\\n........\\n........\\n........\\n........\\nPPPPPPPP\\nRNBQKBNR\") == \"White\"\nassert solution(\"rppppppr\\n.k....\\n........\\n........\\n........\\n........\\nKQ......\\n........\") == \"Black\"\nassert solution(\"rppppppr\\n.k....\\n........\\n........\\n........\\n........\\nKQ......\\n........\") == \"Draw\"\nassert solution(\"rppppppr\\n.k....\\n........\\n........\\n........\\n........\\nKQ......\\n........\") == \"Draw\"\nassert solution(\"rppppppr\\n.k....\\n........\\n........\\n........\\n........\\nKQ......\\n........\") == \"Draw\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"QK\") == 'White'\nassert solution(\"RNB\") == 'White'\nassert solution(\"rNB\") == 'Black'\nassert solution(\"rK\") == 'White'\nassert solution(\"rnbqkbnr\") == 'Draw'\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"rpkp.ppq...\") == \"White\"\nassert solution(\"...rpp..r...\") == \"Black\"\nassert solution(\"rnbqkb1r...pp1Qpppp...\") == \"Draw\"\nassert solution(\"...rppp...pppp...\") == \"Black\"\nassert solution(\"rpppppk.pppq1...\") == \"Black\"\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 3\\n0001000100') == '1 3 2 3'\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 3\\n0001000100\") == \"1 3 2 3\"\n\"\"\""
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 3\\n0001000100\") == \"1 3 2 3\"\nassert solution(\"9 3\\n111111111\") == \"-1\"\nassert solution(\"9 3\\n011110010\") == \"1 3 2 3\"\nassert solution(\"9 3\\n111011100\") == \"1 2 3 3\"\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 3\\n0001000100\") == \"1 3 2 3\"\nassert solution(\"9 4\\n010010010\") == \"-1\"\nassert solution(\"3 3\\n010\") == \"1 3\"\n\"\"\"\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n101 11110\\n') == '1 3 2 4'\nassert solution('4 2\\n11110 101\\n') == '1 3 2 4'\nassert solution('4 2\\n11110 1\\n') == '-1'\nassert solution('4 2\\n10111110\\n') == '-1'\n\"\"\"\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''9 3\n0001000100''') == '1 3 2 3'\nassert solution('''9 3\n0111011101''') == '-1'\nassert solution('''6 3\n000000010''') == '-1'\nassert solution('''9 3\n111011011''') == '1 2 3'\nassert solution('''6 3\n100011011''') == '1 2 2'\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 3\\n0001000100\") == \"1 3 2 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n01\\n\") == \"2 3\"\nassert solution(\"3 3\\n10001\\n\") == \"2 3\"\nassert solution(\"3 3\\n11101\\n\") == \"1 3 2 3\"\nassert solution(\"3 3\\n11110\\n\") == \"1 3 2 3\"\nassert solution(\"3 3\\n11110\\n\") == \"1 3 2 3\"\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 3\\n0001000100\") == \"1 3 2 3\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1 << 20)\nINF = float('inf')\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''9 3\n1 0 1 0 1 0 1 0 1\n''') == '1 3 2 3'\nassert solution('''9 3\n0 1 0 1 0 1 0 1 0\n''') == '1 2 3'\nassert solution('''9 3\n0 1 1 1 0 1 0 1 1\n''') == '1 2 3'\nassert solution('''9 3\n0 1 1 1 1 1 1 1 1\n''') == '1 2 3'\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\\n-1 2\") == \"3\\n7 4\\n2 10\\n-1 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin=\"11\\n-1 2\") == \"3\\n7 4\\n2 10\\n-1 2\"\n\n-----Problem-----\n\nYou are given a set of points on the coordinate plane. Write a program that returns the minimum Manhattan distance between two points in the set. If the answer is not unique, return any answer.\n\n-----Solution-----\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\\n-1 2\") == \"3\\n7 4\"\n\"\"\"\nfrom copy import deepcopy\nimport numpy as np\nfrom itertools import combinations\nfrom collections import deque"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n7 4\\n2 10') == '7 4\\n2 10\\n-1 2'"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\\n-1 2\") == \"3\\n7 4\\n2 10\\n-1 2\"\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11\\n-1 2') == '3\\n7 4\\n2 10\\n-1 2'\n\"\"\""
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\\n-1 2\") == \"3\\n7 4\\n2 10\\n-1 2\"\n\"\"\"\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\\n-1 2\") == \"3\\n7 4\\n2 10\\n-1 2\"\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1\\n2 3\\n5 -1\\n2 4\\n') == '4 1\\n2 3\\n2 4'\nassert solution('5 1\\n-1 1\\n2 3\\n5 -1\\n2 4\\n') == '5 1\\n-1 1\\n2 3\\n5 -1\\n2 4\\n'\nassert solution('5 1\\n-1 1\\n2 3\\n5 -1\\n2 4\\n5 -1\\n2 4\\n') == '5 1\\n-1 1\\n2 3\\n5 -1\\n2 4\\n'\nassert solution('5 1\\n-1 1\\n2 3\\n5 -1\\n2 4\\n5 -1\\n2 4\\n5 -1\\n2 4\\n5 -1\\n2 4\\n5 -1\\n2 4\\n') == '-1 1'\n\"\"\"\n\nfrom itertools import product\nfrom typing import List, Tuple"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11\\n-1 2') == '3\\n7 4\\n2 10\\n-1 2'\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '4'\nassert solution('1') == '8'\nassert solution('10') == '-1'\nassert solution('8') == '54'\n\"\"\"\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == '8'\nassert solution(\"8\") == '54'\nassert solution(\"10\") == '-1'\n\"\"\""
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '8'\nassert solution('8') == '54'\nassert solution('10') == '-1'\nassert solution('10**15') == '-1'"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"8\"\nassert solution(\"10\") == \"54\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"-1\") == \"1\"\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"8\") == \"54\"\nassert solution(\"10\") == \"-1\"\nassert solution(\"11\") == \"-1\""
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '8'\nassert solution('8') == '54'\nassert solution('10') == '-1'\nassert solution('818') == '54'\nassert solution('81880') == '54'\n\n\"\"\""
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '8'\nassert solution('10') == '-1'\nassert solution('8') == '8'\nassert solution('10') == '-1'\n\n\"\"\""
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '8'\nassert solution('8') == '54'\nassert solution('10') == '-1'\nassert solution('11') == '-1'\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\") == \"8\"\nassert solution(\"10\") == \"54\"\nassert solution(\"1\") == \"1\"\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"8\"\nassert solution(\"10\") == \"54\"\nassert solution(\"1\") == \"8\"\nassert solution(\"5\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 6\\n2 3 2\") == \"0.7853981633974483\"\n\"\"\"\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 4\\n6 0 4\") == \"7.25298806364175601379\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''0 0 5\n11 0 5''') == '0.00000000000000000000'\nassert solution('''0 0 4\n6 0 4''') == '7.25298806364175601379'\n\"\"\"\n\nimport math"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 4\\\\n6 0 4') == '7.25298806364175601379'"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''0 0 4\n6 0 4''') == '7.25298806364175601379'\nassert solution('''0 0 5\n11 0 5''') == '0.00000000000000000000'\n\n\n\n'''\n\u0417\u0430\u0434\u0430\u0447\u0430:\n\u041f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u043a\u0440\u0443\u0433\u043e\u0432\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0446\u0435\u043b\u044b\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0434\u0432\u0443\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \n\u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u043d\u043e\u0439 \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u0438.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430:\n\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u044b \u0432\u043e\u0442 \u0442\u0430\u043a:\n\nx1, y1, r1\nx2, y2, r2\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043e\u0434\u043d\u0443 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a:\n\n\u0422\u043e\u0447\u043a\u0430 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043a\u0440\u0443\u0433\u0443\n\u0422\u043e\u0447\u043a\u0430 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043a\u0440\u0443\u0433\u0443\n\u0422\u043e\u0447\u043a\u0430 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043a\u0440\u0443\u0433\u0443, \u043d\u043e \u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0440\u0443\u0433\u0430\n\u0422\u043e\u0447\u043a\u0430 \u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043a\u0440\u0443\u0433\u0443, \u043d\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0440\u0443\u0433\u0430\n\n'''\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 4\\n6 0 4\") == \"7.25298806364175601379\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 4\\n6 0 4\") == '7.25298806364175601379'\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 5\\n6 0 4\") == \"7.25298806364175601379\"\nprint(\"Test 1 OK\")\n\nassert solution(\"5 0 5\\n-1 0 5\") == \"0.00000000000000000000\"\nprint(\"Test 2 OK\")\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 4\\n6 0 4\") == \"7.25298806364175601379\"\nassert solution(\"0 0 5\\n11 0 5\") == \"0.00000000000000000000\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"4.433981132056603\", \"wrong result\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8') == '1'\nassert solution('1') == '1'\nassert solution('6') == '6'\n\"\"\"\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(8) == 1\nassert solution(1) == 1\nassert solution(0) == 0\n\"\"\"\n\nfrom typing import List, Set, Dict\n\nfrom solutions.utils.main import read_inputs, p1, solve_puzzle\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\") == \"1\"\n\"\"\"\n\nimport sys\n\nv = int(sys.stdin.readline())"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"1\"\nassert solution(\"1\") == \"1\"\n\"\"\"\nfrom collections import Counter\nimport sys\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == 1\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"9\") == \"1\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8') == '1'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\") == \"1\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 1\nassert solution('2') == 1\nassert solution('3') == 1\nassert solution('8') == 1\nassert solution('1') == 1\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n3 1 3\") == \"4\"\n\"\"\"\n\nimport sys\nimport collections\n\n\nclass Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.children = collections.defaultdict(Node)\n\nclass Trie:\n    def __init__(self):\n        self.root = Node()\n\n    def insert(self, line: str):\n        node = self.root\n        for char in line:\n            node = node.children[char]\n        node.data = line\n\n    def find(self, line: str) -> bool:\n        node = self.root\n        for char in line:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.data == line"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1\\n3 1 3\") == \"3\"\nassert solution(\"3\\n1 1\\n3 2 3\") == \"3\"\nassert solution(\"3\\n1 1\\n3 3 3\") == \"4\"\nassert solution(\"3\\n1 1\\n3 1 1\") == \"2\"\nassert solution(\"3\\n1 2 2\\n3 1 1\") == \"2\"\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 1\\n3 1 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\\n3 1 3\") == \"4\"\nassert solution(\"3\\n1 1\\n3 1 3\") == \"4\"\nassert solution(\"3\\n1 1\\n3 1 3\") == \"4\"\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1\\n3 1 3\") == 4\n\"\"\""
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1\\n3 1 3') == '4'\nassert solution('3\\n1 1\\n3 1 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n3 1 3') == '4'\nassert solution('3\\n1 1\\n3 1 3') == '4'\nassert solution('3\\n1 1\\n3 3 3') == '0'\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n1 1\n3 1 3\"\"\") == \"4\"\nassert solution(\"\"\"3\n1 1\n3 1 2\"\"\") == \"4\"\nassert solution(\"\"\"2\n1 1\n2 1\"\"\") == \"2\"\nassert solution(\"\"\"4\n2 1 2 3\n1 2 2 3\"\"\") == \"6\"\nassert solution(\"\"\"5\n1 3 1 4 5\n3 1 3 5 1\"\"\") == \"11\"\n\"\"\""
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n3 1 3\") == \"4\"\nassert solution(\"3\\n1 1\\n3 1 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n3 1 3') == '4'\nassert solution('3\\n1 1\\n3 3 3') == '2'\n\n\"\"\""
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3, 'toy', 'try') == 2\nassert solution(5,'sweet','sheep') == 0\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\ntrading\") == \"1\"\nassert solution(\"5\\nsweet\") == \"0\"\nassert solution(\"3\\ntry\") == \"2\"\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"toy\", \"sheep\") == 2\nassert solution(\"reading\", \"trading\") == 1\nassert solution(\"toy\", \"sheep\") == 0\nassert solution(\"toy\", \"try\") == 2\nassert solution(\"toy\", \"troy\") == 0\n\nprint('Success')\n\n\nSolution:"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\ntoy\\ntry\\n\") == '2'\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\ntrading\\n') == '1\\n'\nassert solution('5\\nsweet\\n') == '0\\n'\nassert solution('3\\ntry\\n') == '2\\n'\n\"\"\"\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 abc\") == \"0\"\nassert solution(\"5 abc\") == \"0\"\nassert solution(\"3 abc\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 2') == '0'\nassert solution('a b c') == '2'\n\nimport timeit\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nmpl.use('Agg')\nfrom random import randint\nimport random\nfrom collections import Counter"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 toy\") == \"2\"\nassert solution(\"3 sheep\") == \"0\""
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\nbbc\\nccb\") == \"3\"\nassert solution(\"3\\ntoy\\ntry\") == \"2\"\nassert solution(\"3\\nbbb\\nccb\") == \"0\"\nassert solution(\"3\\ntoy\\ntry\") == \"2\"\n\"\"\"\nimport sys\n\na, b = map(str, input().split())\n\nx, y = \"\", \"\"\nx_set, y_set = set(), set()\n\nfor i in range(len(a)):\n    if a[i] not in x_set:\n        x += a[i]\n        x_set.add(a[i])\n    if b[i] not in y_set:\n        y += b[i]\n        y_set.add(b[i])\n\nprint(x == y and len(x_set) == len(y_set))\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"5\"\n\"\"\"\n\nn = int(stdin.readline().rstrip())\nnums = [int(x) for x in stdin.readline().rstrip().split()]\n\ndp = [[0] * (n + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    dp[i][i] = 1\n\nfor i in range(1, n):\n    for j in range(i + 1, n + 1):\n        dp[i][j] = dp[i][j - 1] + 1 if nums[j - 1] < nums[i - 1] else dp[i - 1][j] + 1\n\nprint(max(max(dp)))\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"5\"\nassert solution(\"7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\\n\") == \"93\"\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '5', 'Test 1'\nassert solution('5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '5', 'Test 2'\nassert solution('7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\\n') == '93', 'Test 3'\nassert solution('5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '5', 'Test 4'\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"5\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 7\\n7 6\") == \"93\"\nassert solution(\"7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\") == \"93\""
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"5\\n\"\nassert solution(\"7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\\n\") == \"93\""
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"5\"\nassert solution(\"7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\") == \"93\"\nassert solution(\"7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\") == \"93\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"5\"\nassert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"5\"\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"5\"\nassert solution(\"7\\n38 -29 87 93 39 28 -55\\n1 2\\n2 5\\n3 2\\n2 4\\n1 7\\n7 6\\n\") == \"93\"\nassert solution(\"5\\n1 2 7 6 7\\n1 5\\n5 3\\n3 4\\n2 4\\n\") == \"8\"\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"5\"\nassert solution(\"\"\"\n7\n38 -29 87 93 39 28 -55\n1 2\n2 5\n3 2\n2 4\n1 7\n7 6\n\"\"\") == \"93\"\n\"\"\"\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"5\"\nassert solution(\"\"\"\n7\n38 -29 87 93 39 28 -55\n1 2\n2 5\n3 2\n2 4\n1 7\n7 6\n\"\"\") == \"93\"\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"5\"\nassert solution(\"5\\n1 2 7 6 7\\n1 5\\n5 3\\n3 4\\n2 4\\n\") == \"93\"\n\"\"\"\n\nfrom itertools import permutations\nimport collections\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4') == '2'\nassert solution('5 2') == '0'\nassert solution('2 2') == '0'\nassert solution('3 0') == '1'\n\"\"\"\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4') == '3'\nassert solution('6 2') == '2'\nassert solution('3 0') == '1'\nassert solution('2 2') == '0'\n\n\"\"\"\n\nn, m = map(int, stdin.split())\nans = 0\nwhile n >= m:\n    if n % m == 0:\n        ans += 1\n        n //= m\n    else:\n        ans += 2\n        n //= m\nprint(ans)\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n\"\"\"\n\nn, m = map(int, input().split())\n\nleft = m\n\ngroups = 0\n\nwhile left > 0:\n    left -= n - groups\n    groups += 1\n\nprint(groups)\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4') == '3'\nassert solution('6 2') == '2'\nassert solution('3 0') == '1'\nassert solution('2 2') == '0'"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn, m = [int(x) for x in stdin.readline().split()]\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4') == 3\n\"\"\""
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('2 3') == '0'\nassert solution('3 2') == '2'\nassert solution('3 0') == '1'\nassert solution('2 2') == '0'\n\"\"\"\nfrom typing import List, Set\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4') == '3'\nassert solution('6 2') == '2'\nassert solution('3 0') == '1'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\") == 3\nassert solution(\"6 2\") == 2\nassert solution(\"3 0\") == 1\nassert solution(\"2 2\") == 0\nassert solution(\"3 3\") == 0\n\n\"\"\""
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"117 3\") == \"9\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\"\nassert solution(\"123 4\") == \"2\"\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"117 3\") == \"9\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\"\n\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n') == ''\nassert solution('1\\n2\\n3\\n1\\n') == '1'\nassert solution('1\\n2\\n3\\n2\\n') == '1'\nassert solution('1\\n2\\n3\\n1\\n2\\n') == '2'\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('237 7') == '1'\nassert solution('15 2') == '2'\nassert solution('117 3') == '9'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"117 3\") == \"9\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\"\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"117 3\") == \"9\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"117 3\") == \"9\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"117 3\") == \"9\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\"\n\nprint(\"All tests passed.\")\n\n\"\"\""
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"117 3\") == '9'\nassert solution(\"237 7\") == '1'\nassert solution(\"15 2\") == '2'\n\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"117 3\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('2 2') == 'NO'\nassert solution('5 5') == 'YES'"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"XXX\") == \"YES\"\nassert solution(\"XX.\") == \"NO\"\nassert solution(\"XXXXX\") == \"YES\"\nassert solution(\"XXXXX.\") == \"YES\"\nassert solution(\"....\") == \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\nXXX\\nXXX') == 'YES'\nassert solution('2 2\\n.X\\nXX') == 'NO'\nassert solution('5 5\\n.....\\n..X..\\n.....\\n.....\\n.....') == 'YES'\nassert solution('2 2\\n.X\\nXX') == 'NO'\nassert solution('5 5\\n...\\n..X\\n....\\n...\\n....') == 'YES'\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n.X\\nXXX\") == 'YES'\n\nassert solution(\"2 2\\n.X\\nXX\") == 'NO'\n\nassert solution(\"5 5\\n.....\\n..X..\\n.....\\n.....\\n.....\") == 'YES'\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nXXX\\nXXX\") == \"YES\"\nassert solution(\"2 2\\n.X\\nXX\") == \"NO\"\nassert solution(\"5 5\\n.....\\n..X..\\n.....\\n.....\\n.....\") == \"YES\""
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\nXXX\\nXXX') == \"YES\"\nassert solution('2 2\\n.X\\nXX') == \"NO\"\nassert solution('5 5\\n.....\\n..X..\\n.....\\n.....\\n.....') == \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n.X\\nXX\") == \"NO\"\nassert solution(\"5 5\\n.....\\n..X..\\n.....\\n.....\\n.....\") == \"YES\"\nassert solution(\"3 3\\n.X\\nXX\\n..\") == \"YES\"\nassert solution(\"2 2\\n.X\\n..\") == \"NO\"\nassert solution(\"4 2\\n.X\\n.X\\nXX\\n..\") == \"NO\"\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\nXXX\\nXXX\") == \"YES\"\nassert solution(\"2 2\\n.X\\nXX\") == \"NO\"\nassert solution(\"5 5\\n.....\\n..X..\\n.....\\n.....\\n.....\") == \"YES\"\n\n\"\"\"\n\n\"\"\"\n1. build a graph\n2. use DFS\n\nwhen find a 'X', see if it can be placed in a rectangle\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"XXX\\nXXX\") == \"YES\"\nassert solution(\"2 2\\n.X\\nXX\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"XXX\\nXXX\") == \"YES\"\nassert solution(\"XXX\\nXXX\\nXXX\") == \"NO\"\nassert solution(\"..X..\\n..X..\\n..X..\") == \"YES\"\nassert solution(\"..X..\\n..X..\\n..X..\\n..X..\") == \"NO\"\nassert solution(\"...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n...\\n..."
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\") == 1\n\nassert solution(\"-1 -1\\n-1 3\\n4 3\") == 2\n\nassert solution(\"1 1\\n2 3\\n3 2\") == 3\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n1 2\\n1 3\") == 1\n\"\"\"\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\") == '1'\nassert solution(\"-1 -1\\n-1 3\\n4 3\") == '2'\nassert solution(\"1 1\\n2 3\\n3 2\") == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\") == '1'\nassert solution(\"-1 -1\\n-1 3\\n4 3\") == '2'\nassert solution(\"1 1\\n2 3\\n3 2\") == '3'\n\"\"\"\nimport math\n\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\") == \"1\"\nassert solution(\"-1 -1\\n-1 3\\n4 3\") == \"2\"\nassert solution(\"1 1\\n2 3\\n3 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint(solution(input))\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 -1\\\\n1 1\\\\n1 2') == '1'\nassert solution('-1 -1\\\\n-1 3\\\\n4 3') == '2'\nassert solution('1 1\\\\n2 3\\\\n3 2') == '3'\n\"\"\"\n\n\"\"\"\n\u7528\u5b9a\u70b9\u6cd5\u5206\u6790\u95ee\u9898\u3002\n\n\u5148\u5728\u6839\u636e\u5206\u6790\u51fa\u7684\u4e09\u4e2a\u70b9\uff0c\u5efa\u7acb\u6811\uff0c\u53ef\u4ee5\u89c2\u5bdf\u51fa\u4e24\u6761\u8fb9\uff0c\u5206\u522b\u4e0e\u4e09\u4e2a\u70b9\u6784\u6210\u7684\u4e00\u7ec4\u4e09\u89d2\u5f62\u3002\n\n\u6240\u4ee5\uff0c\u7ec8\u6b62\u6761\u4ef6\u662f\uff0c\u6ee1\u8db3\u4e09\u4e2a\u70b9\u80fd\u591f\u6784\u6210\u4e09\u4e2a\u4ea4\u70b9\u7684\u4e24\u6761\u76f4\u7ebf\uff0c\u901a\u8fc7\u4e24\u4e2a\u70b9\u7684\u4ea4\u70b9\u5224\u65ad\u81f3\u5c11\u6709\u4e09\u4e2a\u70b9\uff0c\u6ee1\u8db3\u6761\u4ef6\u5219\u8fd4\u56de\n\"\"\"\n\nclass Node(object):\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n    def __str__(self):\n        return 'Node{val: {}, left: {}, right: {}}'.format(\n            self.val, self.left.val if self.left else None, self.right.val if self.right else None\n        )"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\") == '1'\nassert solution(\"-1 -1\\n-1 3\\n4 3\") == '2'\nassert solution(\"1 1\\n2 3\\n3 2\") == '3'\n\"\"\"\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 -1\\n1 1\\n1 2') == 1\nassert solution('-1 -1\\n-1 3\\n4 3') == 2\nassert solution('1 1\\n2 3\\n3 2') == 3\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 -1\\n1 1\\n1 2\") == '1'\nassert solution(\"-1 -1\\n-1 3\\n4 3\") == '2'\nassert solution(\"1 1\\n2 3\\n3 2\") == '3'\n\"\"\""
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"YES\\n2 1\\n1 2\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'YES'\nassert solution('2 1') == 'YES'\nassert solution('1 2') == 'YES'\nassert solution('1 2 3') == 'YES'\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'YES\\n2 1\\n1 2'\nassert solution('2') == 'NO'\nassert solution('3') == 'NO'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES\\n5 2\\n4 3\\n4 1\\n5 1'\n\nimport math"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == \"YES\"\nassert solution('2 1') == \"NO\"\nassert solution('3 1') == \"YES\"\nassert solution('4 3') == \"NO\"\nassert solution('5 2') == \"NO\"\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'YES'\nassert solution('2 1') == 'YES'\nassert solution('2 2') == 'NO'\nassert solution('3 2') == 'YES'\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"4 2\") == \"NO\"\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 'YES\\n2 1\\n1 2'\n\n\n-----Solution-----"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"YES\\n2 1\\n1 2\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\\n3 2\\n1 2\"\nassert solution(\"4\") == \"YES\\n4 3\\n1 2\\n1 3\\n2 3\"\nassert solution(\"5\") == \"YES\\n5 4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\"\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 'YES\\n2 1\\n1 2'\nassert solution('2') == 'NO'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES\\n1 2\\n1 3\\n2 3'\nassert solution('5') == 'YES\\n3 2\\n1 2\\n2 4\\n1 3'\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\", \"for\", [1, 3], [3, 10]) == \"0\\n1\\n0\\n1\\n\"\n\nassert solution(\"codeforces\", \"for\", [1, 3], [3, 10]) == \"0\\n1\\n0\\n1\\n\"\n\nassert solution(\"codeforces\", \"for\", [1, 3], [3, 10]) == \"0\\n1\\n0\\n1\\n\""
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\", \"for\") == 1\nassert solution(\"codeforces\", \"deforces\") == 0\nassert solution(\"codeforces\", \"fo\") == 0\nassert solution(\"codeforces\", \"for\") == 1\n\"\"\"\n\nn, m, q = map(int, input().split())\n\ns = input()\nt = input()\n\nfor i in range(q):\n    l, r = map(int, input().split())\n    l -= 1\n    r -= 1\n    r_count = 0\n    for i in range(l, r + 1):\n        if s[i:i+len(t)] == t:\n            r_count += 1\n    print(r_count)\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\", \"for\", \"1 3\", \"3 10\", \"5 6\") == \"0 1 0 1\"\n\"\"\"\n\nn, m, q = map(int, input().split())\ns = input()\nt = input()\nfor i in range(q):\n    l, r = map(int, input().split())\n    print(s[l - 1:r].count(t))\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\", \"for\", \"3 10\") == '0'\nassert solution(\"abacabadabacaba\", \"ba\", \"1 15\") == '4'\nassert solution(\"aaa\", \"baaab\", \"1 3\") == '0'\n\n-----Comment-----\n\n\u0412\u0437\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0438 \u0440\u0435\u0448\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0438\u0437 \u043d\u0435\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0415\u0441\u043b\u0438 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u0443\u0441\u0442\u044b\u0448\u043a\u0430, \u0442\u043e \u0438 \u0441\u043f\u0440\u0430\u0432\u0430 \u043f\u0443\u0441\u0442\u044b\u0448\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 \u043a\u043e\u043d\u0446\u0435, \u043d\u043e \u0432 \u0441\u0430\u043c\u043e\u043c \u043a\u043e\u043d\u0446\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0443\u0441\u043e\u0447\u043a\u0438 \u0434\u043b\u0438\u043d\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u0434\u043b\u0438\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u043e\u043a\u0438. \u0415\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u043f\u0443\u0441\u0442\u044b\u0448\u043a\u0438 \u0441\u0442\u043e\u044f\u0442 \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u043e\u044f\u0442\u044c \u0432 \u043d\u0430\u0447\u0430\u043b\u0435.\n\n\"\"\"\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacabadabacaba\", \"ba\", [1, 3], [3, 10], [5, 6], [5, 7]) == [0, 1, 0, 1]\nassert solution(\"codeforces\", \"for\", [1, 3], [3, 10], [5, 6], [5, 7]) == [0, 1, 0, 1]\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\", \"for\", 2, 3) == \"1\", \"example 1\"\nassert solution(\"codeforces\", \"for\", 1, 3) == \"0\", \"example 2\"\nassert solution(\"aaaa\", \"ba\", 2, 3) == \"0\", \"example 3\"\n\"\"\"\n\ns, t, q = map(int, input().split())\ns = input()\nt = input()\n\nfor i in range(q):\n    l, r = map(int, input().split())\n    count = 0\n    for j in range(l - 1, r):\n        if s[j:j + len(t)] == t:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\", \"for\", [1, 3], [3, 10]) == \"0\"\nassert solution(\"abacabadabacaba\", \"ba\", [1, 15], [3, 4]) == \"4\"\nassert solution(\"aaa\", \"baaab\", [1, 3], [1, 1]) == \"3\"\n\"\"\"\n\nimport sys\n\nn, m, q = [int(x) for x in input().split()]\ns = input()\nt = input()\nl = [int(x) for x in input().split()]\n\nn_ = len(s)\nm_ = len(t)\n\nt_num = 0\n\nfor i in range(q):\n    l_, r_ = l[i] - 1, l[i]\n    s_l, s_r = 0, n_ - 1\n    t_num += (n_ - r_) * s.count(t[l_:r_])\n\nprint(t_num)\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\", \"for\", 1, 3) == \"0\"\nassert solution(\"codeforces\", \"fo\", 1, 3) == \"1\"\nassert solution(\"codeforces\", \"for\", 1, 3) == \"0\"\nassert solution(\"codeforces\", \"for\", 1, 3) == \"0\"\n\n\n\"\"\"\n\nfrom collections import Counter\nimport string\nimport sys"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\", \"for\", 3) == \"1\"\nassert solution(\"abacabadabacaba\", \"ba\", 1) == \"0\"\nassert solution(\"aaa\", \"baaab\", 1) == \"0\"\nassert solution(\"codeforces\", \"for\", 3) == \"1\"\nassert solution(\"aaaaaaaaaaaaaa\", \"baaaaaaaaaaaaaa\", 1) == \"10\"\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2\") == 3\nassert solution(\"4 5 2\") == 7\nassert solution(\"3 3 3\") == 1\nassert solution(\"3 3 1\") == 3\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('abc') == 0\nassert solution('abca') == 0\nassert solution('abc') == 0\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2\") == 3\nassert solution(\"3 3 3\") == 1\nassert solution(\"4 5 2\") == 7"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 2') == '3'\nassert solution('3 3 3') == '1'\nassert solution('4 3 2') == '6'\nassert solution('4 5 2') == '7'\n\nprint('Passed')\n\n------------------"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2\") == 3\nassert solution(\"3 3 3\") == 1\nassert solution(\"4 3 2\") == 6\nassert solution(\"4 5 2\") == 7\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 2') == '3'\nassert solution('3 3 3') == '1'\nassert solution('4 3 2') == '6'\nassert solution('4 5 2') == '7'\n\n\"\"\""
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 2') == '7'\n\nassert solution('4 5 2') == '7'\n\nassert solution('1 3 3') == '1'\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 2\\n') == 3\nassert solution('4 3 2\\n') == 6\nassert solution('4 5 2\\n') == 7\nassert solution('6 3 5\\n') == 20\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 2') == 3\n\nassert solution('4 3 2') == 6\n\nassert solution('4 5 2') == 7\n\nprint('Success')"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 2') == '3'\nassert solution('4 3 2') == '6'\nassert solution('4 5 2') == '7'"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nWWWW\\n') == '1\\n1 1 1'\nassert solution('5\\nBWBWB\\n') == '3\\n1 1 1'\nassert solution('4\\nBBBB\\n') == '0\\n4'\nassert solution('13\\nWBBBBWWBWBBBW\\n') == '3\\n4 1 3'\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5WWWW\") == \"1 1 1\"\nassert solution(\"5BWBWBW\") == \"1 1 1\"\nassert solution(\"4WWWW\") == \"0\"\nassert solution(\"4BWBWBW\") == \"1 1 1\"\nassert solution(\"13WBBBBWWBWBBBW\") == \"3 4 1 3\"\n\"\"\"\nimport math"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nBBW\") == '1\\n2\\n'\nassert solution(\"5\\nBWBW\") == '1\\n1\\n2\\n'\nassert solution(\"4\\nWWWW\") == '0\\n'\nassert solution(\"13\\nWBBBBWWBWBBBW\") == '3\\n4\\n1\\n3\\n'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(TEST_CASE[0]) == TEST_CASE[1]\n\"\"\"\n\nimport math"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3\nBBW\n''') == '1 2'\n\nassert solution('''\n5\nBWB\n''') == '2 1 1'\n\nassert solution('''\n4\nWWW\n''') == '0'\n\nassert solution('''\n13\nWBBBBWWBWBBBW\n''') == '3 4 1 3'\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nWWW\") == \"1\\n2\\n3\"\nassert solution(\"5\\nWWWWWW\") == \"1\\n1\\n1\\n1\"\nassert solution(\"13\\nWBBBBWWBWBBW\") == \"3\\n4\\n1 1 1\"\n\"\"\"\n\nn = int(input())\nbw = input()\n\nimport collections\n\nc = collections.Counter(bw)\n\nprint(sum(c.values()))\n\nc = sorted(c.items())\n\nn = len(c)\n\nres = []\n\nfor i in range(n):\n    res.append(c[i][1])\n\nprint(' '.join(map(str, res)))"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nWWWW\") == \"1 1 1\"\nassert solution(\"4\\nBBBB\") == \"0\"\nassert solution(\"13\\nWBBBBWWBWBBBW\") == \"3 4 1 3\"\n\"\"\"\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '2 1 1'\nassert solution('2') == '2'\nassert solution('1 1 1') == '3'\nassert solution('1 1 1 1') == '5'\n\"\"\""
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\", \"BWBWB\") == \"3 1 1\"\nassert solution(\"13\", \"WBBBBWWBWBBBW\") == \"3 4 1 3\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\\n2\\n3\\n\"\nassert solution(\"5\") == \"1\\n2\\n3\\n\"\nassert solution(\"4\") == \"1\\n4\\n\"\nassert solution(\"13\") == \"3\\n4\\n1\\n3\\n\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 4 5') == '()()()'\nassert solution('12 5 3') == '(()(()))'\nassert solution('8 8 8') == '()()'"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 4 5\") == \"()\"\nassert solution(\"12 5 3\") == \"(()(()))\"\nassert solution(\"8 8 8\") == \"()\"\n\nassert solution(\"8 4 5\", \"((()())(()))\", \"RRDLD\") == \"()(())\"\nassert solution(\"8 4 5\", \"((()())(()))\", \"LLLLLLDD\") == \"()()\""
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 4 5\\n((()())(()))\\nRRDLD') == '()'\nassert solution('12 5 3\\n((()())(()))\\nRRDLD') == '(()(()))'\nassert solution('8 8 8\\n((()())(()))\\nLLLLLLDD') == '()()'\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 4 5\\n((()())(()))\\nRRDLD') == '()(())(())'\nassert solution('12 5 3\\n((()())(()))\\nRRDLD') == '((()())(())'\nassert solution('8 8 8\\n((()())(()))\\nLLLLLLDD') == '((()())(())'\n\n\"\"\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 4 5\") == \"(()())\"\nassert solution(\"12 5 3\") == \"(()(()))\"\nassert solution(\"8 8 8\") == \"(()())\"\n\n\"\"\"\n\nfrom operator import add\nfrom operator import sub\nfrom operator import mul\nfrom operator import truediv\nimport itertools\n\nclass stack(list):\n    def __init__(self):\n        list.__init__(self)\n\n    def push(self,x):\n        self.append(x)\n\n    def pop(self):\n        return self.pop()\n\n    def empty(self):\n        return len(self) == 0"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(()())(()\") == \"()()\"\nassert solution(\"((()())(()))\") == \"(()())\"\nassert solution(\"(())(())(()())\") == \"()()()\"\nassert solution(\"(()())(()())\") == \"()()()\"\nassert solution(\"()((()())(()))\") == \"()(()())\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(()())(())\") == \"()(())\"\nassert solution(\"((()()))\") == \"()()()\"\nassert solution(\"(()())(()())\") == \"()()()\"\nassert solution(\"((()()))\") == \"()()()\"\nassert solution(\"((()())(()()))\") == \"()()()\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4 5\\n(())()()\\nRDLD\") == \"()\"\nassert solution(\"12 5 3\\n((()())(()))\\nRRDLD\") == \"(()(()))\"\nassert solution(\"8 8 8\\n(())()()\\nLLLLLLDD\") == \"()()\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(r\"\"\"8 4 5\n(())()()\nRRDLD\"\"\") == '(()(()))'\nassert solution(r\"\"\"12 5 3\n((()())(()))\nRRDLD\"\"\") == '(()(()))'\nassert solution(r\"\"\"8 8 8\n(())()()\nLLLLLLDD\"\"\") == '(()(()))'\n\"\"\""
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 4 5\\n(())()()\\nRDLD\\n\") == '(()(()))'\nassert solution(\"12 5 3\\n((()())(()))\\nRRDLD\\n\") == '(()(()))'\nassert solution(\"8 8 8\\n(())()()\\nLLLLLLDD\\n\") == '(()(()))'\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n>= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N\") == '17'\nassert solution(\"2\\n> 100 Y\\n< -100 Y\") == 'Impossible'\nassert solution(\"1\\n< 10 Y\") == 'Impossible'\n\n\"\"\"\n\nimport string\nimport itertools\nimport math\nfrom typing import List\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\n> 1 Y\n< 2 N\n> 3 Y\n> 4 N\n< 5 N\n''') == \"3\"\nassert solution('''\n7\n> 5 Y\n< 7 N\n> 7 Y\n> 7 N\n> 9 Y\n> 11 N\n< 9 N\n''') == \"Impossible\"\nassert solution('''\n8\n< 1 Y\n> 1 Y\n> 4 N\n> 6 Y\n< 6 N\n> 7 Y\n< 3 N\n> 2 N\n''') == \"Impossible\"\n\nassert solution('''\n5\n>= 1 N\n< 3 N\n<= -3 N\n> 55 N\n>= 1 Y\n< 2 N\n<= -3 N\n> 5 Y\n<= 1 Y\n>= 1 N\n>= 1 Y\n''') == \"5\"\nassert solution('''\n4\n>= 1 N\n< 3 N\n>= 1 Y\n>= 1 N\n''') == \"Impossible\"\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n>= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N') == '17'\nassert solution('2\\n> 100 Y\\n< -100 Y') == 'Impossible'\n\n'''\nimport sys\nimport re"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == output"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\">= 1 Y\") == \"1\"\nassert solution(\">= 1 Y\") == \"1\"\nassert solution(\">= 1 Y\") == \"1\"\nassert solution(\">= 1 Y\") == \"1\"\nassert solution(\">= 1 Y\") == \"1\"\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n>= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N\") == \"17\"\n\"\"\""
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('> 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N') == '17'\n\"\"\"\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n>= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N\") == \"17\"\nassert solution(\"2\\n> 100 Y\\n< -100 Y\") == \"Impossible\"\nassert solution(\"3\\n>= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N\") == \"Impossible\"\nassert solution(\"1\\n>= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N\") == \"Impossible\"\n\n\"\"\"\n\nimport re\n\nn = int(input())\ntrue_answers = {}\nfalse_answers = {}\nfor _ in range(n):\n    line = input()\n    parts = re.split(\"\\s+\", line)\n    if parts[1] == \"Y\":\n        true_answers[int(parts[0])] = True\n    elif parts[1] == \"N\":\n        false_answers[int(parts[0])] = False\n\nresult = []\nfor key in true_answers.keys():\n    if key in false_answers:\n        continue\n    else:\n        result.append(key)\n\nfor key in result:\n    if key + 1 in true_answers:\n        continue\n    elif key - 1 in false_answers:\n        continue\n    else:\n        result.append(key)\n\nfor i in range(len(result)):\n    if i == len(result) - 1:\n        print(result[i])\n    else:\n        print(result[i], end=\" \")\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n>= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N\") == \"17\"\n\"\"\""
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n>= 1 Y\\n< 3 N\\n<= -3 N\\n> 55 N') == '17'\nassert solution('2\\n> 100 Y\\n< -100 Y') == 'Impossible'\n\"\"\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == \"4\"\nassert solution(\"5 3\") == \"5\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"4\"\nassert solution(\"5 3\") == \"5\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == \"4\"\nassert solution(\"5 3\") == \"5\"\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    2 4\n    \"\"\"\n) == 4, f\"Expected 4, got {solution(\n    \"\"\"\n    2 4\n    \"\"\"\n    )}\"\n\nassert solution(\n    \"\"\"\n    5 3\n    \"\"\"\n) == 5, f\"Expected 5, got {solution(\n    \"\"\"\n    5 3\n    \"\"\"\n    )}\"\n\nprint(\"Success\")"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\") == '4'\nassert solution(\"5 3\") == '5'\n\n---Problem Solving---\n\n*   *\n*   *\n\npattern = \"*\"\npattern\n\"*\"\n\nletters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nletters\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\npattern = \"ABA\"\npattern\n\"ABA\"\n\npattern = \"AB\"\npattern\n\"AB\"\n\npattern = \"ABBA\"\npattern\n\"ABBA\"\n\npattern = \"ABB\"\npattern\n\"ABB\"\n\npattern = \"ABAB\"\npattern\n\"ABAB\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"5\"\nassert solution(\"2 4\") == \"4\"\nassert solution(\"5 4\") == \"5\"\nassert solution(\"2 10\") == \"10\"\nassert solution(\"10 2\") == \"10\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == \"4\"\nassert solution(\"5 3\") == \"5\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4') == '4', \"WA\"\nassert solution('5 3') == '5', \"WA\"\nassert solution('5 5') == '1', \"WA\"\nassert solution('1 1') == '0', \"WA\"\nassert solution('2 5') == '4', \"WA\"\n\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(a + b)\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\") == \"4\"\nassert solution(\"5 3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == 4\nassert solution(\"5 3\") == 5\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\nassert solution(\"9 8\\nYES NO\") == \"R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc\"\nassert solution(\"3 2\\nNO NO\") == \"Na Na Na\"\n\"\"\"\n\n\"\"\"\nThe first line of the input contains two integers n and k (2 \u2264 k \u2264 n \u2264 50)\u00a0\u2014 the number of soldiers and the size of a group respectively.\n\nThe second line contains n - k + 1 strings s_1, s_2,..., s_{n} - k + 1. The string s_{i} is \"YES\" if the group of soldiers i through i + k - 1 is effective, and \"NO\" otherwise.\n\nFind and print any solution. It can be proved that there always exists at least one solution.\n\n-----Output-----\nFind any solution satisfying all given conditions. In one line print n space-separated strings, denoting possible names of soldiers in the order. The first letter of each name should be uppercase, while the other letters should be lowercase. Each name should contain English letters only and has length from 1 to 10.\n\nIf there are multiple valid solutions, print any of them.\n\n\"\"\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3\\nNO NO YES YES YES NO') == 'Adam Bob Bob Cpqepqwer Limak Adam Bob Adam'\nassert solution('9 8\\nYES NO') == 'R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc'\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"Na Na Na\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u043c. \u0427\u0438\u0441\u043b\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u043e\u0435, \u0435\u0441\u043b\u0438 \u0435\u0433\u043e \u043d\u0435\u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0435\u0434\u0438\u043d\u0438\u0446\u0430, \u0435\u0441\u043b\u0438 \u0436\u0435 \u043e\u043d\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c \u0434\u0432\u0443\u0445 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0438 \u0442.\u0434.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u00abYES\u00bb, \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u043c, \u0438 \u00abNO\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\nSample Input 1:\n\n4\nSample Output 1:\n\nYES\nSample Input 2:\n\n9\nSample Output 2:\n\nNO\nSample Input 3:\n\n5\nSample Output 3:\n\nYES\n\"\"\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\nassert solution(\"9 8\\nYES NO\") == \"R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc\"\nassert solution(\"3 2\\nNO NO\") == \"Na Na Na\"\n\n\nassert solution(\"8 3\\nYES YES YES YES YES YES\\nYES YES YES YES YES YES\\nYES YES YES YES YES YES\\nYES YES YES YES YES YES\\nYES YES YES YES YES YES\\nYES YES YES YES YES YES\\nYES YES YES YES YES YES\\nYES YES YES YES YES YES\\nYES YES YES YES YES YES\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam Limak Adam Bob Adam Adam\"\nassert solution(\"9 8\\nYES YES\\nYES YES\\nYES YES\\nYES YES\\nYES YES\\nYES YES\\nYES YES\\nYES YES\\nYES YES\\nYES YES\\nYES YES\\nYES YES\\nYES YES\\nYES YES\\nYES YES\\nYES YES\") == \"R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc Adam Bob Adam\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\nNO NO YES YES YES NO') == 'Adam Bob Bob Cpqepqwer Limak Adam Bob Adam'\nassert solution('9 8\\nYES NO') == 'R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc'\nassert solution('3 2\\nNO NO') == 'Na Na Na'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3\\nNO NO YES YES YES NO') == 'Adam Bob Bob Cpqepqwer Limak Adam Bob Adam'\nassert solution('9 8\\nYES NO') == 'R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc'\n\n\"\"\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\nNO NO YES YES YES NO\") == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\nassert solution(\"9 8\\nYES NO\") == \"R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\nNO NO YES YES YES NO\") == \"R Q Ccocc So Strong Samples Ccc\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5\") == \"0\"\nassert solution(\"13 14\") == \"3\"\nassert solution(\"9 9\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 10\") == \"1\"\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"15 20\") == 3\nassert solution(\"14 8\") == -1\nassert solution(\"6 6\") == 0\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"15 20\") == \"3\"\nassert solution(\"14 8\") == \"3\"\nassert solution(\"6 6\") == \"0\"\n\"\"\"\n\nimport math\na, b = map(int, input().split())\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15 20\") == \"3\"\nassert solution(\"14 8\") == \"0\"\nassert solution(\"6 6\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15 20\") == \"3\"\nassert solution(\"14 8\") == \"-1\"\nassert solution(\"6 6\") == \"0\"\n\n\"\"\"\n\nimport math\n\na, b = input().split()\na, b = int(a), int(b)\n\nm = int(a // 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('15 20') == '3'\nassert solution('14 8') == '-1'\nassert solution('6 6') == '0'\nassert solution('4 4') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 6') == '0'\nassert solution('14 8') == '-1'\nassert solution('15 20') == '3'\n\n\"\"\"\n\n\na, b = map(int, stdin.readline().split())\ns = (a + b) // 3\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 6') == 0\nassert solution('15 20') == 3\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('14 8') == '-1'\nassert solution('15 20') == '3'"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 20\") == \"3\"\n\nassert solution(\"14 8\") == \"0\"\n\nassert solution(\"6 6\") == \"0\"\n\nassert solution(\"7 2\") == \"-1\"\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 100 1\") == \"101\"\nassert solution(\"3 10 12\") == \"-\"\nassert solution(\"3 12 1\") == \"0\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn, a, b = list(map(int, stdin.readline().strip().split()))\n\nstdin.readline()\n\ncolors = list(map(int, stdin.readline().strip().split()))\n\nprint(colors)\n\n\ndp = [[0, 0] for _ in range(n)]\ndp[0] = [a, b]\n\nfor i in range(1, n):\n    dp[i][0] = dp[i - 1][1] + a\n    dp[i][1] = dp[i - 1][0] + b\n\nprint(dp)\n\ndp[0][0] = min(a, dp[0][0])\ndp[0][1] = min(b, dp[0][1])\n\nfor i in range(1, n):\n    dp[i][0] = min(dp[i][0], dp[i - 1][1] + a)\n    dp[i][1] = min(dp[i][1], dp[i - 1][0] + b)\n\nprint(dp)\n\nmin_cost = 10 ** 9\nfor i in range(n):\n    if colors[i] == 0:\n        if min_cost > dp[i][0]:\n            min_cost = dp[i][0]\n    else:\n        if min_cost > dp[i][1]:\n            min_cost = dp[i][1]"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 100 1\\n0 1 2 1 2\\n\") == \"101\"\nassert solution(\"3 10 12\\n1 2 0\\n\") == \"-1\"\nassert solution(\"3 12 1\\n0 1 0\\n\") == \"0\"\n\"\"\"\nfrom collections import Counter\nfrom itertools import permutations"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 100 1\") == \"101\"\nassert solution(\"3 10 12\") == \"-1\"\nassert solution(\"3 12 1\") == \"0\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 12\") == \"101\"\n\"\"\""
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 100 1\\n0 1 2 1 2\") == \"101\"\nassert solution(\"3 10 12\\n1 2 0\") == \"-1\"\nassert solution(\"3 12 1\\n0 1 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 12\") == \"101\"\nassert solution(\"5 100 1\") == \"101\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 100 1\") == \"101\"\nassert solution(\"3 10 12\") == \"-1\"\nassert solution(\"3 12 1\") == \"0\"\nprint(\"Ok!\")\n\n\"\"\"\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 100 1\") == \"101\"\nassert solution(\"3 10 12\") == \"-1\"\nassert solution(\"3 12 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100 1\\n0 1 2 1 2\") == \"101\"\nassert solution(\"3 10 12\\n1 2 0\") == \"-1\"\nassert solution(\"3 12 1\\n0 1 0\") == \"0\"\nassert solution(\"1 2 0\\n1 2 0\") == \"0\"\nassert solution(\"3 12 1\\n0 1 2\") == \"-1\"\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 100 1') == '101'\nassert solution('3 10 12') == '-1'\nassert solution('3 12 1') == '0'\nassert solution('7 10 5 3 2 5') == '15'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'bb\\nww'\nassert solution('3') == 'bbbb\\nwbbb\\nwbbb\\nbbbb\\nbbbb'\nassert solution('4') == 'bbbbbb\\nwbbbbb\\nwbbbbb\\nwbbbbb\\nbbbbbb\\nbbbbbb'\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"\"\"bb\nbb\nbb\nww\nww\nww\n\"\"\"\nassert solution(\"4\") == \"\"\"bbbbb\nbbbbb\nbbbbb\nbbbbb\nbbbbb\n\"\"\"\nassert solution(\"5\") == \"\"\"bbbbbb\nbbbbbb\nbbbbbb\nbbbbbb\nbbbbbb\nbbbbbb\nbbbbbb\nbbbbbb\nbbbbbb\n\"\"\""
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"bb\\nww\"\n\n\"\"\""
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"bb\\nww\"\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"bb\\nww\"\n\nassert solution(\"3\") == \"bb\\nww\\nw\"\n\nassert solution(\"4\") == \"bb\\nww\\nw\\nw\"\n\nassert solution(\"1\") == \"b\"\n\"\"\""
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n''') == '''\nbb\nbb\nbb\n'''\nassert solution('''2\n''') == '''\nbb\nww\n'''\nassert solution('''1\n''') == '''\nw\n'''\nassert solution('''0\n''') == '''\nw\n'''\nassert solution('''4\n''') == '''\nbb\nww\nbb\nww\n'''\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '-1\\n'\nassert solution('w') == 'bb\\nww\\n'\nassert solution('b') == 'bb\\nww\\n'\nassert solution('ww') == 'bb\\nww\\n'\nassert solution('bb') == 'bb\\nww\\n'\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '-1'\nassert solution('2\\n') == 'bb\\nww\\n'\nassert solution('3\\n') == 'bbbbb\\nwwwwb\\nwwbbb\\nwbbbb\\nwwwww\\nwbbbb\\nwbbbb\\nwwbbb\\nwwwww\\n'\nassert solution('4\\n') == 'bbbbbb\\nwwwwbb\\nwwwwbb\\nwbbbbb\\nwbbbbb\\nwbbbbb\\nwbbbbb\\nwwwwbb\\nwwwwbb\\nwwbbbb\\nwwbbbb\\n'\nassert solution('5\\n') == 'bbbbbbbb\\nwwwwbbbb\\nwwwwbbbb\\nwbbbbbbb\\nwbbbbbbb\\nwwwwbbbb\\nwwwwbbbb\\nwbbbbbbb\\nwwbbbbbb\\nwwbbbbbb\\nwwbbbbbb\\nwwbbbbbb\\n'\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\nbb\\nww') == 'bb\\nww'\nassert solution('3\\nbbbb\\nwwww\\nbbbbb') == 'bbbb\\nwwww\\nbbbbb'\nassert solution('1\\nbb') == '-1'\nassert solution('2\\nbbbb') == 'bbbb'\nassert solution('3\\nbb\\nww\\nbb\\nww') == 'bb\\nww\\nbb\\nww'\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n') == 'b\\n'\nassert solution('2\\n') == 'bb\\nw\\nw\\n'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '10'\nassert solution('12') == '6'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nmin_ = 1\nmax_ = 1\nfor i in range(2,n):\n    min_ *= i\n    max_ *= i\n    while min_ % n == 0:\n        min_ /= n\n    while max_ % n == 0:\n        max_ /= n\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"12\") == \"6\"\nassert solution(\"100\") == \"10\"\nassert solution(\"1000\") == \"100\"\nassert solution(\"1000\") == \"100\"\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '10'\nassert solution('12') == '6'\n\"\"\"\n\n\nfrom math import ceil"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"6\"\n) == 6\n\nassert solution(\n    \"12\"\n) == 6\n\n\"\"\"\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '10'\nassert solution('12') == '6'\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"12\") == \"6\"\n\"\"\""
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"12\") == \"6\"\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"12\") == \"6\""
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '5'\nassert solution('10') == '10'\nassert solution('12') == '6'\nassert solution('15') == '15'\n\"\"\"\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"12\") == \"6\"\n\nprint(solution(\"10\"))\nprint(solution(\"12\"))\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == 'Yes'\nassert solution('1011') == 'No'\nassert solution('10001') == 'No'\n\nprint(solution('101'))\nprint(solution('1011'))\nprint(solution('10001'))"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\"\nassert solution(\"11101\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\"\nassert solution(\"11110\") == \"Yes\"\nassert solution(\"11111\") == \"No\"\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\""
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\"\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == 'Yes'\nassert solution(\"1011\") == 'No'\nassert solution(\"10001\") == 'No'\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\""
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"10111\") == \"No\"\n\"\"\""
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\nassert solution(\"10001\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == 'Yes'\nassert solution('10001') == 'No'\nassert solution('10011') == 'Yes'\nassert solution('11100') == 'No'\nassert solution('11101') == 'Yes'\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"5\\n1 3 5 6 8\") == \"2\\n3 5\"\nassert solution(\"3\\n1 5 3\") == \"1\\n3\"\n\n\"\"\""
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"5\\n1 2 3 4 5\"\nassert solution(\"5\\n1 3 5 6 8\\n\") == \"2\\n3 5\"\nassert solution(\"3\\n1 5 3\\n\") == \"1\\n3\"\nassert solution(\"1\\n1\\n1\\n\") == \"1\\n1\\n1\\n\"\nassert solution(\"2\\n1 5 3\\n\") == \"2\\n3\\n\"\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"1 3 5 6 8\") == \"2\"\nassert solution(\"1 5 3\") == \"1\"\nassert solution(\"1 5 3\") == \"1\"\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5'\n\n\"\"\""
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"5\\n1 3 5 6 8\") == \"2\\n3 5\"\nassert solution(\"3\\n1 5 3\") == \"1\\n3\"\nassert solution(\"3\\n1 5 3\") == \"1\\n3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"5\\n1 3 5 6 8\") == \"2\\n3 5\"\nassert solution(\"3\\n1 5 3\") == \"1\\n3\""
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5'\nassert solution('5\\n1 3 5 6 8') == '2'\nassert solution('3\\n1 5 3') == '1'\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nx = set()\nfor i in range(len(a)):\n    x.add(sum(a[i:]))\nprint(len(x))\n\nfor i in x:\n    print(i)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"5\\n1 2 3 4 5\\n\"\nassert solution(\"5\\n1 3 5 6 8\\n\") == \"2\\n3 5\\n\"\nassert solution(\"3\\n1 5 3\\n\") == \"1\\n3\\n\"\nassert solution(\"1\\n5 3\\n\") == \"1\\n3\\n\"\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '''5\n1 2 3 4 5 \n'''\n\nassert solution('''5\n1 3 5 6 8''') == '''2\n3 5 \n'''\n\nassert solution('''3\n1 5 3''') == '''1\n3 \n'''\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 5 6 8\") == \"2\\n3 5\"\nassert solution(\"3\\n1 5 3\") == \"1\\n3\"\nassert solution(\"5\\n1 3 5 6 8\") == \"5\\n1 2 3 4 5\""
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 2 1 2 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\nassert solution('1 1 1 1 1 1') == 'YES'\n\"\"\""
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\nprint('Success')"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 1 1 1 99') == 'NO'\nassert solution('1 3 2 1 2 1') == 'YES'\n\n\"\"\"\n\nimport sys\nfrom typing import List, Set\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3 2 1 2 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\nassert solution('0 9 0 1 0') == 'YES'\nassert solution('0 1 0 1 0') == 'NO'\nassert solution('1 3 2 1 2 1') == 'YES'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 2 1 2 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\n\nprint('Test succeeded.')\n\n\"\"\""
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 2 1 2 1') == 'YES'\nassert solution('1 1 1 1 1 99') == 'NO'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 10\") == \"7\"\nassert solution(\"100 200\") == \"5\"\nassert solution(\"1 2000000000\") == \"326\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10\") == '7'\nassert solution(\"100 200\") == '5'\nassert solution(\"1 2000000000\") == '326'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '0'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n3\\n4') == '2'\nassert solution('1\\n2\\n3\\n4\\n5') == '3'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10\") == \"7\"\nassert solution(\"1 2000000000\") == \"326\"\nprint(\"Ok!\")\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 10') == '7'\n\nassert solution('100 200') == '5'\n\nassert solution('1 2000000000') == '326'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n1 10\n\"\"\") == \"7\"\nassert solution(\n\"\"\"\n100 200\n\"\"\") == \"5\"\nassert solution(\n\"\"\"\n1 2000000000\n\"\"\") == \"326\"\nprint(\"Passed all test cases!\")\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 10') == '7'\nassert solution('100 200') == '5'\nassert solution('1 2000000000') == '326'\n\n\"\"\"\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 10') == '7'\nassert solution('1 2000000000') == '326'\n\nassert solution('1 2') == '0'\nassert solution('1 20') == '0'\nassert solution('2 4') == '0'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10\") == \"7\"\nassert solution(\"100 200\") == \"5\"\nassert solution(\"1 2000000000\") == \"326\"\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 10') == '7'\nassert solution('100 200') == '5'\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == '0'\nassert solution('9 11') == '4'\nassert solution('5 0') == '3'\nassert solution('3 2') == '1'\nassert solution('5 1') == '3'\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0'\nassert solution('9 11') == '4'\nassert solution('5 0') == '3'\nassert solution('3 2') == '1'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == '0'\nassert solution('9 11') == '4'\nassert solution('5 0') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"9 11\") == \"4\"\nassert solution(\"5 0\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == 0\nassert solution(\"9 11\") == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == '0'\nassert solution(\"9 11\") == '4'\nassert solution(\"5 0\") == '3'\nassert solution(\"3 2\") == '1'\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"9 11\") == \"4\"\nassert solution(\"5 0\") == \"3\"\nassert solution(\"3 2\") == \"1\""
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"9 11\") == \"4\"\nassert solution(\"5 0\") == \"3\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"7 27\") == \"10\"\n\nprint(\"Passed all tests\")\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"9 11\") == \"4\"\nassert solution(\"5 0\") == \"3\"\n\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nans = 0\nfor i in range(1, n + 1):\n    ans += min(n - i + 1, k)\nprint(ans)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0'\nassert solution('9 11') == '4'\nassert solution('5 0') == '3'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2\") == \"NO\"\nassert solution(\"5 1 2 4\") == \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 3 2 4\") == \"YES\"\nassert solution(\"3\\n4 1 2\") == \"NO\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"1\\n1\") == \"YES\"\nassert solution(\"1\\n2\") == \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2\\n') == 'YES'\nassert solution('1 5 3 2 4\\n') == 'YES'\nassert solution('1 4 2\\n') == 'NO'\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 3 2 4\") == \"YES\"\nassert solution(\"3 4 1 2\") == \"NO\"\nprint('Success')\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 5 3 2 4\\n') == 'YES'\nassert solution('3\\n4 1 2\\n') == 'NO'\n\n\"\"\""
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 5 3 2 4\\n\") == 'YES'\nassert solution(\"3\\n4 1 2\\n\") == 'NO'\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n1 5 3 2 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"3\n4 1 2\n\"\"\") == \"NO\"\nassert solution(\"\"\"5\n1 1 1 1 1\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 5 3 2 4\") == \"YES\"\nassert solution(\"3\\n4 1 2\") == \"NO\"\n\n\"\"\"\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.splitlines()[0])\n        arr = list(map(int, stdin.splitlines()[1].split()))\n\n        counter = Counter(arr)\n        print(counter)\n\n        if n < 3:\n            return \"NO\"\n\n        if counter[1] == 0:\n            return \"NO\"\n\n        return \"YES\"\n\nsolution = Solution().solution\nassert solution(\"5\\n1 5 3 2 4\") == \"YES\"\nassert solution(\"3\\n4 1 2\") == \"NO\"\nassert solution(\"1\\n2\") == \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 5 3 2 4\") == \"YES\"\nassert solution(\"3\\n4 1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 5 3 2 4\\n') == 'YES'\nassert solution('3\\n4 1 2\\n') == 'NO'\nassert solution('5\\n1 1 1 1 1\\n') == 'YES'\nassert solution('5\\n1\\n1\\n1\\n1\\n') == 'YES'\nassert solution('6\\n1 1 1 1 1 1\\n') == 'NO'\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"Yes\"\nassert solution(\"1000 1001\") == \"Yes\"\nassert solution(\"6 3\") == \"No\"\nassert solution(\"1000 1000\") == \"No\"\n\n---"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"Yes\"\nassert solution(\"6 3\") == \"Yes\"\nassert solution(\"1000 1001\") == \"Yes\"\nassert solution(\"1000 100100\") == \"No\"\nassert solution(\"10000 100001\") == \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"Yes\"\nassert solution(\"6 3\") == \"Yes\"\nassert solution(\"1000 1001\") == \"No\"\n\n\n'''\n\n\n\nimport collections\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"1000 1001\") == \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"No\"\nassert solution(\"6 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"1000 1001\") == \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\nassert solution(\"1000 1001\") == \"Yes\"\n\n\n\n----\n\nYour solution should be able to process the input in the following format:\n\nThe first line contains two integers n and m \u2014 the number of copies and the number of original toys, respectively.\n\nThe second line contains n integers a1, a2,..., an.\n\nThe i-th of them is the value of the i-th original toy.\n\nThe next m lines contain n integers b1, b2,..., bm.\n\nThe i-th of them is the value of the i-th copied toy.\n\nAfter those m + n lines there is a single line containing two integers x and y \u2014 the number of copies and the number of original toys, respectively.\n\n-----"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"No\"\nassert solution(\"6 3\") == \"Yes\"\nassert solution(\"1000 1001\") == \"Yes\"\n\"\"\"\n\nfrom collections import deque\n\nclass ToyMachine:\n    def __init__(self, stdin: str):\n        stdin = stdin.split(\" \")\n        self.n_copies = int(stdin[0])\n        self.n_original_toys = int(stdin[1])\n\n        self.copied_toys = deque()\n        self.original_toys = deque()\n\n    def clone(self):\n        self.copied_toys.append(0)\n        self.original_toys.append(0)\n        self.n_copies += 1\n        self.n_original_toys += 1\n\n    def apply(self, index: int):\n        self.copied_toys[index] += 1\n        self.original_toys[index] += 1\n\n    def unapply(self, index: int):\n        self.copied_toys[index] -= 1\n        self.original_toys[index] -= 1\n\n    def is_desired_configuration(self) -> bool:\n        return self.n_original_toys == self.n_copies and all(original_toy >= copies for original_toy, copies in zip(self.original_toys, self.copied_toys))"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3') == 'Yes'\nassert solution('4 2') == 'No'\n\n\n'''"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == 2\nassert solution(\"3 8\") == 5\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n7 9\") == \"2\"\nassert solution(\"3 8\\n17 15 19\") == \"5\"\nassert solution(\"2 2\\n99 100\") == \"20\"\nassert solution(\"3 8\\n17 15 19\") == \"5\"\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '2 4'\n) == '2'\nassert solution(\n    '3 8'\n) == '5'\nassert solution(\n    '2 2'\n) == '20'\nassert solution(\n    '99 100'\n) == '20'\nassert solution(\n    '99 19'\n) == '5'\n\nprint(solution(input()))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n7 9\") == \"2\"\nassert solution(\"3 8\\n17 15 19\") == \"5\"\nassert solution(\"2 2\\n99 100\") == \"20\"\n\"\"\""
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 9\") == 2\nassert solution(\"17 15 19\") == 5\nassert solution(\"99 100\") == 20\nassert solution(\"100 0\") == 100\n\"\"\""
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 4\n7 9''') == '2'\nassert solution('''3 8\n17 15 19''') == '5'\nassert solution('''2 2\n99 100''') == '20'\n\n'''\nn, k = map(int, stdin.readline().split())\narr = [int(i) for i in stdin.readline().split()]\n\narr.sort()"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4\\n7 9') == '2'\nassert solution('3 8\\n17 15 19') == '5'\nassert solution('2 2\\n99 100') == '20'"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(\"input.txt\").read()) == \"5\"\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n7 9\") == \"2\"\nassert solution(\"3 8\\n17 15 19\") == \"5\"\nassert solution(\"2 2\\n99 100\") == \"20\"\nassert solution(\"3 8\\n17 15 19\") == \"5\"\nassert solution(\"2 2\\n99 100\") == \"20\"\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n7 9\") == '2'\nassert solution(\"3 8\\n17 15 19\") == '5'\nassert solution(\"2 2\\n99 100\") == '20'\n\n\"\"\"\n\nfrom __future__ import annotations\nfrom collections import Counter\nfrom typing import List"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n5 7 6') == '25'\nassert solution('8 8\\n1 2 3 4 5 6 7 8') == '1'\nassert solution('1 1\\n7 7') == '7'\nassert solution('8 8\\n5 6 7 8') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n5 7 6\") == \"25\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\") == \"1\""
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n4 2\n5 7 6\n''') == '25'\nassert solution('''\n8 8\n1 2 3 4 5 6 7 8\n8 7 6 5 4 3 2 1\n''') == '1'\nassert solution('''\n2 3\n5 5\n6 6 6\n''') == '4'\nassert solution('''\n2 3\n5 5\n9 9 9\n''') == '6'\nassert solution('''\n8 8\n1 2 3 4 5 6 7 8\n8 7 6 5 4 3 2 1\n''') == '1'\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n4 2\\n\") == \"25\"\n\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\") == \"1\"\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n4 2\\n5 7 6') == '25'\nassert solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nlist_a = set(map(int, sys.stdin.readline().split()))\nlist_b = set(map(int, sys.stdin.readline().split()))\n\nres = set()\nfor i in range(1, 1000001):\n    str_i = str(i)\n    if any(x in str_i for x in list_a) and any(x in str_i for x in list_b):\n        res.add(i)\n\nres = list(res)\nres.sort()\nprint(res[0])\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n4 2\\n5 7 6') == '25'\nassert solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\nassert solution('8 8\\n1 2 3 4 5 6 7 8\\n9 2 3 4 5 6 7 8') == '1'\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n4 2\\n5 7 6\") == \"25\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\") == \"1\"\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a1, b1) == ans\nassert solution(a2, b2) == ans\nassert solution(a3, b3) == ans\nassert solution(a4, b4) == ans\nassert solution(a5, b5) == ans"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4\\n9 7 6 5 4 3 2 1\\n3 4 2\") == \"1\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\") == \"1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n4 2\\n5 7 6') == '25'\nassert solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\nassert solution('8 7\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\nassert solution('8 9\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\nassert solution('8 2\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1') == '1'\n\"\"\""
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 222\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 222') == '2'\nassert solution('4 190') == '4'\nassert solution('7 1') == '7'\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 222\") == 2\nassert solution(\"4 190\") == 4\nassert solution(\"7 1\") == 7\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('3 22') == '2'\nassert solution('3 222') == '2'\nassert solution('4 190') == '4'\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 222\") == 2\nassert solution(\"4 190\") == 4\nassert solution(\"7 1\") == 7\n\"\"\"\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 190') == '4'\nassert solution('7 1') == '7'\n\"\"\"\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 222') == 2\nassert solution('4 190') == 4\nassert solution('7 1') == 7\n\"\"\""
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 222\") == \"2\"\nassert solution(\"4 190\") == \"4\"\nassert solution(\"7 1\") == \"7\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 222') == 2\nassert solution('4 190') == 4\nassert solution('7 1') == 7\n\n\"\"\""
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '2'\nassert solution('5') == '5'\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('1\\n1') == '2'\nassert solution('1\\n2') == '1'\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '5'\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('5') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"<<><\") == 2\nassert solution(\">><<\") == 0\nassert solution(\">><>\") == 5\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"><<\") == 2\nassert solution(\">><<\") == 0\nassert solution(\"<<<\") == 5\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('<<<') == '2'\nassert solution('>>>>') == '5'\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"<><><\") == 2\nassert solution(\"<>><\") == 1\nassert solution(\"<<<<\") == 0\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"<<><\") == \"2\"\nassert solution(\">>>>>\") == \"5\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"<<><\") == 2\nassert solution(\">><<\") == 0\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"><<\") == \"2\"\nassert solution(\"<<<\") == \"0\"\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('<<>>') == 1\nassert solution('<<<<<') == 0\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n<<<<\\n\") == 2\nassert solution(\"5\\n>>>>>\\n\") == 5\n\nimport sys\nassert sys.stdin.read() == '4\\n<<<<\\n'\nassert sys.stdin.read() == '5\\n>>>>>\\n'\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('<<><') == 2\nassert solution('>>>>>') == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 2 3 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 4 4 2\") == \"8\"\n\nimport numpy as np"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n2 4 4 2\n''') == '8'\nassert solution('''4\n100003 100004 100005 100006\n''') == '0'\nassert solution('''4\n2 2 3 5\n''') == '0'"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 4 4 2') == '8'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == e\nprint(solution(s))\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n2 4 4 2\n''') == '8'\nassert solution('''4\n2 2 3 5\n''') == '0'\n'''"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 4 4 2\\n\") == 8\n\"\"\"\n\nn = int(stdin.readline())\n\nl = list(map(int, stdin.readline().split()))\nl.sort()\n\na = l[0]\nb = l[1]\nc = l[2]\nd = l[3]"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"4\\n2 4 4 2\") == \"8\"\n\"\"\"\nimport sys\n\nsys.stdin = open('./test/0.txt', 'r')\n\nINF = int(1e9)\n\nn = int(input())\n\nlst = list(map(int, input().split(' ')))\n\nleft, right = 0, INF\nresult = 0\nwhile left <= right:\n    mid = (left + right) // 2\n    total = 0\n    for i in range(len(lst)):\n        total += lst[i] // mid\n    if total <= n:\n        right = mid - 1\n        result = mid\n    else:\n        left = mid + 1\n\nprint(result)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5\n2 4 4 2 5\n''') == '8', 'Test #1'\nassert solution('''\n5\n2 2 3 5 2\n''') == '0', 'Test #2'\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 4 4 2\") == \"8\"\n\"\"\"\n\n\nfrom typing import List\n\nimport sys"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"4\"\nassert solution(\"de\") == \"8\"\nassert solution(\"aj\") == \"9\"\n\n'''"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == 47\nassert solution(\"de\") == 136542\nassert solution(\"aj\") == 44\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"47\"\nassert solution(\"de\") == \"136542\"\nassert solution(\"aj\") == \"44\"\nassert solution(\"abcdef\") == \"136542\"\nassert solution(\"ghij\") == \"136542\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"1\"\nassert solution(\"de\") == \"3\"\nassert solution(\"aj\") == \"9\"\nassert solution(\"abcdef\") == \"136542\"\nassert solution(\"ghij\") == \"136542\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"1\"\nassert solution(\"de\") == \"3\"\nassert solution(\"aj\") == \"9\"\nassert solution(\"abcdef\") == \"12345\"\nassert solution(\"ghij\") == \"2345\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nab\\ncd\\nef') == '47'\nassert solution('5\\nabcdef\\ng\\nhij') == '136542'\n\"\"\""
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 a a b\") == 4\nassert solution(\"3 a a a\") == 7\nassert solution(\"3 a a b\") == 13\nassert solution(\"5 a a a a b\") == 20\nassert solution(\"2 a a b\") == 4\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == 47\nassert solution(\"de\") == 136542\nassert solution(\"aj\") == 44\n\nprint(solution(\"abcdef\"))"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nabcdef\\nghij\\nbdef\\naccbd\\ng') == '136542'\nassert solution('3\\naa\\njj\\naa\\n') == '44'\n\"\"\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aa\") == \"44\"\nassert solution(\"ab\") == \"136542\"\nassert solution(\"abcdef\") == \"136542\"\nassert solution(\"g\") == \"136542\"\nassert solution(\"gh\") == \"136542\"\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6\") == 2\nassert solution(\"4 5\") == 3\n\"\"\"\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '4 5'\n) == '3'\nassert solution(\n    '2 6'\n) == '2'\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6\") == \"2\"\nassert solution(\"4 5\") == \"3\"\n\"\"\""
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5') == '3'\nassert solution('2 6') == '2'\nassert solution('4 5') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == 3\n\"\"\""
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2 6\n''') == '2'\nassert solution('''\n4 5\n''') == '3'\nassert solution('''\n1 2\n''') == '1'\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6\") == 2\nassert solution(\"4 5\") == 3\n\"\"\""
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 6\\n4 5') == '2'\nassert solution('4 5\\n4 5') == '3'\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 6') == '2'\nassert solution('4 5') == '3'\n\"\"\"\n\nn, m = list(map(int, input().split()))"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"3\"\nassert solution(\"2 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('ABBA') == 'YES'\nassert solution('AXBYBXC') == 'NO'\n\"\"\"\n\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution(s), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 s \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 True \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0430\u043d\u0434\u043e\u043c\u0430\u043c\u0438 \u0438 False \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041f\u0430\u043d\u0434\u043e\u043c \u2014 \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u043e \u0438\u043b\u0438 \u0444\u0440\u0430\u0437\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u043e\u0432\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f \u0438 \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0438\u0445 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043d\u0435 \u0432\u0430\u0436\u0435\u043d. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u043e\u0432\u043e \u00ab\u0421\u0410\u041c\u041e\u0415\u00bb \u0431\u0443\u0434\u0435\u0442 \u043f\u0430\u043d\u0434\u043e\u043c\u043e\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u043e\u0432\u0430 \u00ab\u0441\u0430\u043c\u043e\u0435\u00bb \u0438 \u00ab\u043c\u043e\u0436\u043d\u043e\u00bb. \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043b\u043e\u0432\u0430 \u00ab\u0421\u0410\u041c\u041e\u0415\u00bb \u0438 \u00ab\u043c\u043e\u0436\u043d\u043e\u00bb \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0430\u043d\u0434\u043e\u043c\u0430\u043c\u0438, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u0445 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0437\u0430\u0434\u0430\u0451\u0442 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0446\u0438\u044e.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0421\u043b\u043e\u0432\u0430 \u00ab\u0441\u0430\u043c\u043e\u0435\u00bb \u0438 \u00ab\u043c\u043e\u0436\u043d\u043e\u00bb \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u043f\u0430\u043d\u0434\u043e\u043c\u0430\u043c\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438 \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u0430\u0445.\n\n\n-----Input-----\n\n\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0432\u0432\u0435\u0434\u0451\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\n-----Output-----\n\n\u0415\u0441\u043b\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0430\u043d\u0434\u043e\u043c\u0430\u043c\u0438, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u00abYES\u00bb, \u0438\u043d\u0430\u0447\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u00abNO\u00bb.\n\n\n-----Examples-----\nInput\n\nOutput\n\nInput\n\nOutput\n\nInput\n\nOutput\n\nInput\n\nOutput\n\nInput\n\nOutput\n\nInput\n\nOutput\n\nInput\n\nOutput\n\"\"\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\"\nassert solution(\"AXBYBXA\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(ABA) == 'YES'\nassert solution(BACFAB) == 'NO'\nassert solution(AXBYBXA) == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\"\nassert solution(\"AXBYBXA\") == \"NO\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AXBYBXA') == 'NO'\nassert solution('BACFAB') == 'YES'"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABA') == 'YES'\nassert solution('BACFAB') == 'YES'\nassert solution('AXBYBXA') == 'NO'\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\"\nassert solution(\"AXBYBXA\") == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABA') == 'NO'\nassert solution('BACFAB') == 'YES'\nassert solution('AXBYBXA') == 'NO'\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABBACAB') == 'YES'\nassert solution('AXBYBXA') == 'NO'\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\"\nassert solution(\"AXBYBXA\") == \"NO\"\n\"\"\""
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 1 3 3\") == \"YES\\n2 L\\n1 R\\n4 L\\n3 L\"\nassert solution(\"5\\n1 1 1 3 3\") == \"YES\\n2 L\\n1 R\\n4 L\\n3 L\"\n\nassert solution(\"5\\n1 1 1 3 3\") == \"YES\\n2 L\\n1 R\\n4 L\\n3 L\"\nassert solution(\"5\\n1 1 1 3 3\") == \"YES\\n2 L\\n1 R\\n4 L\\n3 L\"\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 1 1 3 3\\n2 1 6') == 'NO'\nassert solution('6\\n1 2 2 2 1 2\\n2') == 'YES\\n2 L\\n1 R'\nassert solution('5\\n1 1 1 3 3\\n3') == 'YES\\n5 L'\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 2 2 2 1 2\\n2\\n5 5\") == \"YES\\n2 L\\n1 R\\n4 L\\n3 L\"\nassert solution(\"5\\n1 1 1 3 3\\n3\\n2 1 6\") == \"NO\"\nassert solution(\"5\\n1 1 1 3 3\\n3\\n2 1 6\") == \"NO\"\nassert solution(\"5\\n1 1 1 3 3\\n3\\n2 1 6\") == \"NO\"\nassert solution(\"5\\n1 1 1 3 3\\n3\\n2 1 6\") == \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n6\n1 2 2 2 1 2\n2\n5 5\n''') == 'YES\\n2 L\\n1 R\\n4 L\\n3 L'\n\nassert solution('''\n5\n1 1 1 3 3\n3\n2 1 6\n''') == 'YES\\n5 L\\n4 L\\n3 L\\n2 L'\n\nassert solution('''\n5\n1 1 1 3 3\n3\n2 1 6\n''') == 'NO'\n\nassert solution('''\n5\n1 1 1 3 3\n3\n2 5 6\n''') == 'NO'\n\nassert solution('''\n5\n1 1 1 3 3\n3\n2 1 6\n''') == 'NO'"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6\n1 2 2 2 1 2\n2\n5 5''') == 'YES'\nassert solution('''5\n1 1 1 3 3\n3\n2 1 6''') == 'NO'\nassert solution('''5\n1 1 1 3 3\n3\n2 1 6''') == 'YES'\nassert solution('''5\n1 1 1 3 3\n3\n2 1 6''') == 'YES'\nassert solution('''5\n1 1 1 3 3\n3\n2 1 6''') == 'YES'\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 1 2 2 1 2\") == \"YES\\n2 L\\n1 R\"\nassert solution(\"5 1 1 3 3\") == \"YES\\n5 L\"\nassert solution(\"5 1 1 3 3\") == \"YES\\n4 L\"\nassert solution(\"5 1 1 3 3\") == \"YES\\n3 L\"\nassert solution(\"5 1 1 3 3\") == \"YES\\n2 L\"\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2 2 1 2\") == \"2 L\"\nassert solution(\"1 1 1 3 3\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"YES\""
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 3 4 5\") == \"YES\\n2 L\\n1 R\\n4 L\\n3 L\"\nassert solution(\"5 1 2 3 4 5\") == \"YES\\n5 L\\n4 L\\n3 L\\n2 L\"\n\nassert solution(\"1 1 1 3 3\") == \"YES\\n5 L\\n4 L\\n3 L\"\nassert solution(\"1 1 1 3 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 2 2 1\n2\n1 1\n''') == 'NO'\n\nassert solution('''\n5\n1 1 2 2 1\n1\n1\n''') == 'YES\\n1\\n5\\n4\\n3\\n2\\n2\\n1\\n'\n\nassert solution('''\n5\n3 3 3 3 3\n3\n1 1 1\n''') == 'NO'\n\nassert solution('''\n6\n1 1 2 2 1 2\n2\n1 1\n''') == 'YES\\n2\\n1\\n4\\n3\\n5\\n2\\n2\\n1\\n'\n\nassert solution('''\n5\n1 1 1 3 3\n3\n2 1 6\n''') == 'NO'"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 2 2 1 2\\n2\\n5 5\") == \"YES\\n2 L\\n1 R\\n4 L\\n3 L\"\nassert solution(\"5\\n1 1 1 3 3\\n3\\n2 1 6\") == \"NO\"\nassert solution(\"5\\n1 1 1 3 3\\n3\\n2 1 6\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\") == \"Yes\"\nassert solution(\"2 1\\n1 0\\n2 2\\n3 1\") == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\") == \"Yes\"\nassert solution(\"2 1\\n1 0\\n2 2\\n3 1\") == \"No\"\n\nprint(solution(\"2 3\\n1 1\\n2 1\\n3 1\"))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n0 0\\n2 0\\n3 1\") == \"Yes\"\nassert solution(\"2 1\\n1 0\\n2 2\\n3 1\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2') == 'Yes'\nassert solution('2 1\\n1 0\\n2 2\\n3 1') == 'No'\n\"\"\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 'No'\nassert solution('3 1') == 'Yes'\nassert solution('2 1') == 'No'\nassert solution('2 2') == 'No'\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n0 0\\n2 0\\n3 1\") == \"Yes\"\nassert solution(\"2 1\\n1 0\\n2 2\\n3 1\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2') == 'Yes'\nassert solution('2 1\\n1 0\\n2 2\\n3 1') == 'No'\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 0\\n2 2\\n3 1\\n\") == \"No\"\nassert solution(\"3 3\\n0 0\\n2 0\\n3 1\\n\") == \"Yes\"\nassert solution(\"3 3\\n0 0\\n0 0\\n3 1\\n\") == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input_1) == \"Yes\"\nassert solution(input_2) == \"No\"\n\"\"\"\n\nimport sys\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(input_1), \"Yes\")\n        self.assertEqual(solution(input_2), \"No\")\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\") == \"Yes\"\nassert solution(\"2 1\\n1 0\\n2 2\\n3 1\") == \"No\"\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n80 7 16 4 48\") == '16 3'\n\nassert solution(\"4\\n21 5 3 33\") == '1 4'\n\nassert solution(\"4\\n9 9 9 10\") == '0 4'\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n80 7 16 4 48') == '16 3'\nassert solution('4\\n21 5 3 33') == '1 4'\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().split()\nn = int(a[0])\na = a[1].split()\n\n\"\"\"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0447\u0438\u0441\u0435\u043b \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e\"\"\"\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n80 7 16 4 48') == '16 3'\nassert solution('4\\n21 5 3 33') == '1 4'\nassert solution('4\\n31 21 5 3 33') == '1 4'\nassert solution('4\\n31 21 5 3 33') == '1 4'\nassert solution('4\\n31 21 5 3 33') == '1 4'\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n80 7 16 4 48\") == \"16 3\"\nassert solution(\"4\\n21 5 3 33\") == \"1 4\"\nassert solution(\"1\\n21 5 3 33\") == \"1 4\"\nassert solution(\"2\\n1 2\") == \"1 2\"\nassert solution(\"1\\n10\") == \"1 1\"\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n80 7 16 4 48\") == \"16 3\"\nassert solution(\"4\\n21 5 3 33\") == \"1 4\"\nassert solution(\"2\\n3 4\") == \"0 0\"\nassert solution(\"1\\n1\") == \"1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n80 7 16 4 48\") == \"16 3\"\nassert solution(\"4\\n21 5 3 33\") == \"1 4\"\nassert solution(\"1\\n2\") == \"1 1\"\nassert solution(\"2\\n1 3\") == \"1 1\"\nassert solution(\"10\\n2 4 6 8 10\") == \"2 1\"\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n80 7 16 4 48') == '16 3'\nassert solution('4\\n21 5 3 33') == '1 4'\nassert solution('4\\n21 5 3 33') == '1 4'"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n80 7 16 4 48') == '16 3'\nassert solution('4\\n21 5 3 33') == '1 4'\nassert solution('4\\n21 5 3 33') == '1 4'\nassert solution('4\\n21 5 3 33') == '1 4'\nassert solution('4\\n21 5 3 33') == '1 4'\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n80 7 16 4 48\") == \"16 3\"\nassert solution(\"4\\n21 5 3 33\") == \"1 4\"\nassert solution(\"4\\n0 1 2 3\") == \"2 0\""
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n80 7 16 4 48') == '16 3'\nassert solution('4\\n21 5 3 33') == '1 4'\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\nr = 2\nwhile r ** 2 <= max(a):\n    for i in a:\n        if r ** 2 == i:\n            d[r] = d.get(r, 0) + 1\n    r += 1\nfor i in d.keys():\n    if d[i]!= 0:\n        print(i, d[i])\n        break"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\") == \"2\"\nassert solution(\"10 1\") == \"9\"\nprint(\"Check completed.\")\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6\") == \"2\"\nassert solution(\"10 1\") == \"9\"\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\") == \"2\"\nassert solution(\"10 1\") == \"9\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6\") == \"2\"\nassert solution(\"10 1\") == \"9\"\n\"\"\""
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\") == \"2\"\nassert solution(\"10 1\") == \"9\"\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 6') == '2'\nassert solution('10 1') == '9'\n\"\"\"\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6') == '2'\nassert solution('10 1') == '9'\n\"\"\""
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6') == '2'\nassert solution('10 1') == '9'\nassert solution('1 10') == '9'\nassert solution('1 1000') == '999'\n\"\"\"\n\nn, m = [int(c) for c in stdin.split()]\n\ni = 0\nwhile m > n:\n    if i % 2 == 0:\n        m = m // 2\n    else:\n        m = m + 1\n    i = i + 1"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2, 1) == 2\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\") == \"2\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\") == \"YES\"\nassert solution(\"5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\") == \"NO\"\nassert solution(\"5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n') == 'YES'\nassert solution('5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n') == 'NO'\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n2 9\\n1 4\\n5 8\\n3 6\\n7 10\") == \"NO\"\nassert solution(\"4 8\\n2 9\\n1 4\\n6 10\\n3 7\") == \"NO\"\nassert solution(\"4 10\\n2 9\\n1 4\\n6 10\\n3 7\") == \"YES\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"YES\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n6\") == \"NO\"\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n\") == \"NO\"\nassert solution(\"6\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\\n\") == \"YES\"\nassert solution(\"5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\\n\") == \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8') == 'YES'\nassert solution('5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\\n') == 'NO'\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n\") == \"NO\"\nassert solution(\"6 10\\n9 11\\n2 3\\n5 7\\n4 8\\n1 2\\n\") == \"NO\"\nassert solution(\"6 10\\n9 11\\n2 3\\n5 7\\n4 8\\n1 2\\n\") == \"NO\"\nassert solution(\"6 10\\n9 11\\n2 3\\n5 7\\n4 8\\n1 2\\n\") == \"NO\"\nassert solution(\"6 10\\n9 11\\n2 3\\n5 7\\n4 8\\n1 2\\n\") == \"NO\"\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 6\\n2 9\\n7 10\\n1 4\\n\") == \"NO\"\n\nassert solution(\"5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n\") == \"NO\"\n\nassert solution(\"5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\\n\") == \"NO\"\n\nassert solution(\"5\\n3 6\\n2 9\\n7 10\\n1 4\\n\") == \"NO\"\n\nassert solution(\"5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\\n\") == \"NO\""
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n\") == \"NO\"\nassert solution(\"6 10\\n2 5\\n3 7\\n4 9\\n1 8\\n\") == \"NO\"\nassert solution(\"6 10\\n2 5\\n3 7\\n4 9\\n1 8\\n\") == \"NO\"\nassert solution(\"6 10\\n2 5\\n3 7\\n4 9\\n1 8\\n\") == \"NO\"\nassert solution(\"6 10\\n2 5\\n3 7\\n4 9\\n1 8\\n\") == \"NO\"\n\n\"\"\"\nfrom __future__ import annotations\nfrom collections import defaultdict\nfrom collections import Counter\nfrom math import floor\nfrom math import ceil\nfrom typing import List, DefaultDict, Tuple, Optional, Dict\nfrom unittest import TestCase, main, skip\n\nSegment = Tuple[int, int]\n\nclass SegmentTree:\n    def __init__(self, segments: List[Segment]) -> None:\n        n = len(segments)\n        self.n: int = 2 ** (ceil(n.bit_length() / 2) + 1)\n        self.data: DefaultDict[int, int] = defaultdict(int)\n        self.left: DefaultDict[int, int] = defaultdict(int)\n        self.right: DefaultDict[int, int] = defaultdict(int)\n        self.segments: List[Segment] = []\n        for l, r in segments:\n            self.segments.append((l, r))\n            self.left[l] = self.right[r] = 1\n            self.data[l] = r\n            self.data[r] = l\n        for i in range(self.n - 1, 0, -1):\n            self.data[i] = self.left[self.data[i << 1]] + self.right[(self.data[(i << 1) + 1] if i << 1 + 1 < self.n else self.segments[0][0])]\n        \n    def get_count(self, low: int, high: int) -> int:\n        l: int = low\n        r: int = high\n        x: int = l\n        while True:\n            if self.left[x]!= self.right[x]:\n                return self.right[x] - self.left[x]\n            x = self.left[x]\n            if x == l:\n                break\n            l = x\n        x = r\n        while True:\n            if self.left[x]!= self.right[x]:\n                return self.right[x] - self.left[x]\n            x = self.right[x]\n            if x == r:\n                break\n            r = x\n        return r - l + 1\n    \n    def add(self, l: int, r: int) -> None:\n        "
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n') == 'NO'\nassert solution('5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n') == 'NO'\n\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\") == \"YES\"\nassert solution(\"5\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\") == \"NO\"\nassert solution(\"5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\") == \"NO\"\nassert solution(\"5\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\") == \"YES\"\nassert solution(\"5\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\") == \"NO\"\n\n----\n5\n9 12\n2 11\n1 3\n6 10\n5 7\n4 8\n\nYES\n\n----\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n\nNO\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(r'3\\n100 200 1 1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n100 200 1 1 1') == 3\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n100 200 1 1 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n100 200 1 1 1\\n') == '3'\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100 200 1 1 1\\n') == 3\nassert solution('101 99\\n') == 1\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 200 1 1 1\") == 3\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\nr = list(map(int, input().split()))\n\nr.sort()\n\nprint(r[-1] * n // r[-1])\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n100 200 1 1 1') == '3'\nassert solution('2\\n101 99') == '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"100 200 1 1 1\") == \"3\"\nassert solution(\n\"1 2 3 4 5\") == \"0\"\nassert solution(\n\"101 99\") == \"1\"\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n100 200 1 1 1\") == '3'\n\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"\n5\n100 200 1 1 1\n\"\"\") == '3'\nassert solution(r\"\"\"\n5\n101 99\n\"\"\") == '0'\nassert solution(r\"\"\"\n5\n101 101\n\"\"\") == '0'\nassert solution(r\"\"\"\n4\n101 100 200\n\"\"\") == '0'\nassert solution(r\"\"\"\n1\n101\n\"\"\") == '0'\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 NYNNY\") == \"YES\"\nassert solution(\"6 1?NNNN\") == \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 NYNNY\") == \"YES\"\nassert solution(\"6 1?NNNN\") == \"NO\""
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\nNYNNY\") == \"YES\"\nassert solution(\"6 1\\n????NN\") == \"NO\""
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 NNNYY') == 'YES'\nassert solution('6 1?NNNN') == 'NO'\n\"\"\"\n\nn, k = map(int, input().split())\nx = list(map(lambda s: 'Y' if s == '?' else s, input().strip()))\n\ncnt = 0\ncnt2 = 0\n\nfor i in range(len(x)):\n    if x[i] == 'Y':\n        cnt += 1\n    else:\n        if cnt >= k:\n            cnt = 0\n        else:\n            cnt2 += 1\n\nprint('YES') if cnt2 >= k else print('NO')\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 YNNNN') == 'YES'\nassert solution('6 1 YNNNN') == 'NO'\nassert solution('5 2 NNNNY') == 'NO'\nassert solution('6 1 NNNNY') == 'NO'\nassert solution('5 2?NNNN') == 'YES'\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\nYNNY\") == 'YES'\nassert solution(\"6 1\\n????NN\") == 'NO'\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 NYNNY\") == \"YES\"\nassert solution(\"6 1????NN\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\nNYNNY\") == \"YES\"\nassert solution(\"6 1\\n????NN\") == \"NO\"\n\n---"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\nNYNNY') == 'YES'\nassert solution('6 1\\n????NN') == 'NO'\n\n\"\"\""
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\nNNYNNN\\n\") == \"NO\"\nassert solution(\"4 2\\nNNNNY\\n\") == \"YES\"\nassert solution(\"4 2\\nNNNNNN\\n\") == \"NO\"\nassert solution(\"4 2\\nNNNNNN\\n\") == \"YES\"\nassert solution(\"4 2\\nNNNNNN\\n\") == \"NO\"\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 2\\n') == '8'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"8\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\n---SOLUTION---"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 2\\n\") == \"8\"\n\"\"\"\n\nfrom collections import deque\nimport sys\n\nstdin = deque(sys.stdin.readlines())\n\nX, D = [int(x) for x in stdin.pop().split()]\n\nfor line in stdin:\n    N = int(line)\n    break\n\nS = 0\nT = 0\ntakahashi = deque([])\ntakahashi.append(X)\naoki = deque([])\naoki.append(X)\n\nfor i in range(N):\n    takahashi.appendleft(X)\n    takahashi.append(X + D)\n    aoki.appendleft(X + D)\n    aoki.append(X)\n    X += D\n\nprint(aoki)\n\nfor i in range(N):\n    t = takahashi.pop()\n    a = aoki.pop()\n    T += t\n    S += a\n    print(\"i: {}, t: {}, a: {}\".format(i, t, a))\n\nprint(S - T)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3 4 2) == 8\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\") == '8'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\\n\") == \"8\"\n\"\"\"\n\nimport sys\n\nX, D = [int(x) for x in sys.stdin.readline().split()]\nprint(((1 + X + X * D) * (1 + X * D) + D) * (1 + X * D) // 2)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 2\\n') == '8'\n\"\"\""
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 4 2''') == '8'\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\") == \"NO\"\nassert solution(\"3\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\") == \"YES\"\n\"\"\"\n\nn = int(input())\n\nd = {}\nfor i in range(n):\n    s = input().split()\n    s[1] = int(s[1])\n    if s[1] > 2400:\n        d[s[0]] = s[1]\n    else:\n        if s[0] in d.keys():\n            del d[s[0]]\n\nprint(\"NO\" if len(d.keys()) > 0 else \"YES\")\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\") == \"YES\"\nassert solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\") == \"NO\"\n\"\"\""
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\\n') == 'YES'\nassert solution('3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\\n') == 'NO'\n\nprint(\"Test 1:\", solution('2\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\\n'))\nprint(\"Test 2:\", solution('3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\\n'))\n\"\"\"\n\nimport sys\n\nd = {}\n\nfor _ in range(int(input())):\n    handle, before, after = input().split()\n    before = int(before)\n    after = int(after)\n    d[handle] = (before, after)\n\n\nfor _ in range(int(input())):\n    name, before, after = input().split()\n    before = int(before)\n    after = int(after)\n    if name not in d or d[name][1] < before < after < d[name][0]:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\") == \"YES\"\nassert solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\") == \"NO\"\n\"\"\"\n\nn = int(input())\nresult = []\nfor i in range(n):\n    try:\n        username, before, after = input().split()\n        if after > before and username[0]!= '-':\n            result.append(username)\n    except:\n        break"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\") == \"NO\"\nassert solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\\n\") == \"YES\"\nassert solution(\"2\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\n\") == \"NO\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\") == \"YES\"\nassert solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\") == \"NO\"\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'YES'\nassert solution('1') == 'NO'\nassert solution('1\\nBurunduk1 2 2') == 'YES'\nassert solution('1\\nBurunduk1 2 2\\nApplejack 3 3') == 'NO'\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b: \u0421\u0442\u0440\u043e\u0433\u043e\u0435 \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u0423\u0447\u0438\u0442\u0435\u043b\u044c, \u0441\u0442\u043e\u043b\u044f\u0440, \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0435\u0431\u0435 \u043f\u0435\u0440\u0432\u044b\u0435 \u0442\u0440\u0438 \u043d\u0435\u0434\u0435\u043b\u0438 \u0432 \u043a\u0443\u0440\u0441\u0435 \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043a\u043e\u0434\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u0434\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u043a\u0443\u0440\u0441\u0430. \u041f\u0435\u0440\u0432\u044b\u043c \u0434\u043d\u0435\u043c \u043e\u043d \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0441 \u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a\u0430, \u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0441\u0432\u044b\u043a\u0430\u0435\u0442 \u043a \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u0435\u043c\u0443 \u0434\u043d\u044e. \u0423\u0447\u0438\u0442\u0435\u043b\u044c \u0437\u043d\u0430\u0435\u0442, \u0447\u0442\u043e \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u043e\u043d \u0441\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043f\u043e\u043b\u0447\u0430\u0441\u0430 \u0434\u043d\u044f \u043a\u0430\u0436\u0434\u044b\u0435 \u0442\u0440\u0438 \u043d\u0435\u0434\u0435\u043b\u0438. \u0423\u0447\u0438\u0442\u0435\u043b\u044c \u0445\u043e\u0447\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u044d\u0442\u0443 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u043c\u043e\u0439 \u0440\u0430\u0437 \u043d\u0430 \u0434\u0432\u0430 \u0437\u0430\u043d\u044f\u0442\u0438\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0443\u0447\u0438\u0442\u0435\u043b\u044c \u0445\u043e\u0447\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u0441\u0432\u043e\u0451\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0437\u0430 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u0443\u0447\u0438\u0442\u0435\u043b\u044e \u043d\u0430\u0439\u0442\u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043d\u0435\u0439 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0439 \u043e\u0441\u043d\u043e\u0432\u0435.\n\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b: \u0421\u0442\u0440\u043e\u0433\u043e\u0435 \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u0423\u0447\u0438\u0442\u0435\u043b\u044c, \u0441\u0442\u043e\u043b\u044f\u0440, \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0435\u0431\u0435 \u043f\u0435\u0440\u0432\u044b\u0435 \u0442\u0440\u0438 \u043d\u0435\u0434\u0435\u043b\u0438 \u0432 \u043a\u0443\u0440\u0441\u0435 \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043a\u043e\u0434\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u0434\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u043a\u0443\u0440\u0441\u0430. \u041f\u0435\u0440\u0432\u044b\u043c \u0434\u043d\u0435\u043c \u043e\u043d \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0441 \u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a\u0430, \u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0441\u0432\u044b\u043a\u0430\u0435\u0442 \u043a \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u0435\u043c\u0443 \u0434\u043d\u044e. \u0423\u0447\u0438\u0442\u0435\u043b\u044c \u0437\u043d\u0430\u0435\u0442, \u0447\u0442\u043e \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u043e\u043d \u0441\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043f\u043e\u043b\u0447\u0430\u0441\u0430 \u0434\u043d\u044f \u043a\u0430\u0436\u0434\u044b\u0435 \u0442\u0440\u0438 \u043d\u0435\u0434\u0435\u043b\u0438. \u0423\u0447\u0438\u0442\u0435\u043b\u044c \u0445\u043e\u0447\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u044d\u0442\u0443 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u043c\u043e\u0439 \u0440\u0430\u0437 \u043d\u0430 \u0434\u0432\u0430 \u0437\u0430\u043d\u044f\u0442\u0438\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0443\u0447\u0438\u0442\u0435\u043b\u044c \u0445\u043e\u0447\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u0441\u0432\u043e\u0451\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0437\u0430 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u0443\u0447\u0438\u0442\u0435\u043b\u044e \u043d\u0430\ufffd"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\\n\") == \"YES\"\nassert solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\\n\") == \"NO\"\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10100') == 3\nassert solution('101') == 2\nassert solution('1111111111111111111111111111111111111111111111111111111111111111111111110') == 10\n\nprint(solution(stdin))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10100') == 3\nassert solution('101') == 2\nassert solution('10010001') == 2\nassert solution('10010101') == 2\n\n\"\"\"\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10100\") == \"3\"\nassert solution(\"101\") == \"2\"\nassert solution(\"100\") == \"1\"\nassert solution(\"011\") == \"0\"\nassert solution(\"10100\") == \"3\"\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10100\") == \"3\"\nassert solution(\"101010\") == \"2\"\nassert solution(\"101110\") == \"1\"\nassert solution(\"10111010\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10100\") == \"3\"\nassert solution(\"10101\") == \"2\"\nassert solution(\"10110\") == \"1\"\nassert solution(\"11100\") == \"2\"\nassert solution(\"11101\") == \"1\"\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10100\") == 3\nassert solution(\"101\") == 2\nassert solution(\"1011\") == 1\nassert solution(\"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1010') == 3\nassert solution('10100') == 3\nassert solution('10101') == 2\nassert solution('101100') == 3\n\nprint('Success')\n\n\nhttps://www.codewars.com/kata/57db066d7c76d60b960000c0\n\"\"\"\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10100') == 3\nassert solution('101') == 2\nassert solution('10010') == 4\nassert solution('111110') == 5\nassert solution('11110') == 6\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\"\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10100') == 3\n\"\"\"\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10100') == 3\nassert solution('101') == 2\n\"\"\""
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1') == '2'\nassert solution('3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '3'\nassert solution('8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n0') == '2'\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1') == '2'\nassert solution('3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n') == '3'\nassert solution('8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n') == '2'\n\"\"\"\nimport sys"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\") == \"2\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == \"3\"\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\\n') == '2'\nassert solution('3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n') == '3'\nassert solution('8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n') == '2'\n\n\n\"\"\""
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\") == \"2\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == \"3\"\nassert solution(\"8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\") == \"2\"\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1') == '2'\nassert solution('3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '3'\nassert solution('8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n') == '2'\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1') == '2'\nassert solution('3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '3'\nassert solution('8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n0\\n') == '2'\nassert solution('8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n0\\n') == '3'\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\") == '2'\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == '3'\nassert solution(\"8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n\") == '2'\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\") == '2'\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n\") == '3'\nassert solution(\"8 1\\n0\\n1\\n1\\n0\\n0\\n1\\n1\\n0\") == '2'\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1'\n) == '2'\n\nassert solution(\n    '3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0'\n) == '3'\n\nassert solution(\n    '8 1\\n0'\n) == '2'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nassert solution('4 7') == '1'\nassert solution('1 5') == '2'\nassert solution('2 5') == '1'\nassert solution('1 3') == '0'\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 11\\n4 7\") == \"1\"\nassert solution(\"5 6\\n1 2\\n4 7\\n2 5\\n1 3\\n6 8\") == \"2\"\n\n\"\"\"\nimport sys\nfrom itertools import chain\nimport collections\n\nDEBUG = False\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'a'\nassert solution('abc\\ndef') == 'a'\nassert solution('abc\\ndef\\nghi') == 'a'\nassert solution('abc\\ndef\\nghi\\n') == 'a'\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2\\n4 7') == '1'\nassert solution('5\\n4 7\\n2 5\\n1 3\\n6 8') == '2'\n\"\"\"\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 7\\n2 5\\n1 3\\n6 8\") == \"2\"\nassert solution(\"6\\n4 8\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8\") == \"3\""
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n4 7\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8\") == \"2\"\nassert solution(\"5\\n4 7\\n2 5\\n1 3\\n6 8\") == \"3\"\nassert solution(\"6\\n4 8\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8\") == \"2\"\n\"\"\""
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1 1 2\") == \"1\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"1 1 2 2 3 3\") == \"1\"\nassert solution(\"5 5 4 4 3 3\") == \"5\"\nassert solution(\"5 5 5 5 5 5\") == \"1\"\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n1 5\\n1 6\\n2 3') == 2\n\"\"\"\n\nimport sys\n\nN = int(input())\nL = [tuple(map(int, sys.stdin.readline().split())) for i in range(N)]\nL.sort()\n\nans = 0\nnow = L[0][0]\nfor i in range(1, N):\n    if L[i][0] < now:\n        ans += 1\n        now = L[i][1]\nprint(ans)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 11\\n4 7\") == \"1\"\nassert solution(\"5\\n1 2\\n4 7\\n2 5\\n1 3\\n6 8\") == \"2\""
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2\\n4 7\\n2 5\\n1 3\\n6 8\\n\") == \"2\"\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n5 6\\n2 2\") == \"NO\"\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\") == \"YES\"\nassert solution(\"2 2\\n5 6\\n2 2\") == \"NO\"\nassert solution(\"2 2\\n3 3\\n2 2\") == \"NO\"\n\"\"\"\n\nn, k = map(int, input().split())\ntables = list(map(int, input().split()))\nformulas = list(map(int, input().split()))\n\ntables_count = formulas_count = 0\nfor i in range(len(tables)):\n    tables_count += tables[i]\n    formulas_count += formulas[i]\n    if tables_count > k or formulas_count > k:\n        print(\"NO\")\n        break\nelse:\n    print(\"YES\")"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 2\n5 5\n2 2''') == \"YES\"\n\nassert solution('''4 1\n4 1 10 1\n3 2 10 1''') == \"YES\"\n\nassert solution('''2 2\n5 6\n2 2''') == \"NO\"\n\nassert solution('''4 1\n4 1 10 1\n3 2 10 1''') == \"YES\"\n\nassert solution('''5 1\n10 10\n10 10''') == \"NO\""
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n5 5\\n2 2\") == \"YES\"\nassert solution(\"2 2\\n5 6\\n2 2\") == \"NO\"\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\") == \"YES\"\n\n\n\n\n'''\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n5 5\n2 2\n''') == \"YES\"\n\nassert solution('''\n4 1\n4 1 10 1\n3 2 10 1\n''') == \"YES\"\n\nassert solution('''\n4 1\n4 1 10 1\n3 2 10 1\n''') == \"NO\"\nassert solution('''\n2 2\n5 6\n2 2\n''') == \"NO\"\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3 1\n2 2 3\n\n\"\"\") == 'NO'\n\nassert solution(\n\"\"\"\n6 2\n4 4 6 3 2 5\n4 4 6 3 2 5\n\n\"\"\") == 'YES'\n\nassert solution(\n\"\"\"\n5 1\n3 4 3 5 5\n5 1\n4 2 1 3 2\n\n\"\"\") == 'YES'\n\nassert solution(\n\"\"\"\n5 2\n2 1 3 4 3\n4 1 3 2 2\n\n\"\"\") == 'NO'\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 2\n5 5\n2 2\"\"\") == 'YES'\nassert solution(\"\"\"2 2\n5 6\n2 2\"\"\") == 'NO'\nassert solution(\"\"\"4 1\n4 1 10 1\n3 2 10 1\"\"\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n5 5\\n2 2') == 'YES'\nassert solution('2 2\\n5 6\\n2 2') == 'NO'\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1\\n2\\n') == 'YES'\nassert solution('3 1\\n1\\n3\\n') == 'NO'\nassert solution('1 1\\n1\\n1\\n') == 'YES'\nassert solution('2 1\\n1\\n2\\n') == 'YES'\n\n\"\"\""
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(    '2 2\\n5 6\\n2 2') == 'YES'\nassert solution(    '2 2\\n5 6\\n2 2') == 'YES'\nassert solution(    '4 1\\n4 1 10 1\\n3 2 10 1') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n5 5\\n2 2\") == 'YES'\nassert solution(\"4 1\\n4 1 10 1\\n3 2 10 1\") == 'NO'\nassert solution(\"2 1\\n2 1\\n2 1\") == 'YES'\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n-1\\n?\\n0 1\\n?\\n') == 'Yes'\nassert solution('1 2\\n0\\n0 1\\n0\\n') == 'Yes'\nassert solution('1 2\\n-10000\\n0 1\\n0\\n') == 'Yes'\nassert solution('1 2\\n-10000\\n0 1\\n1\\n') == 'No'\nassert solution('1 2\\n-1\\n0 1\\n1\\n') == 'No'\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n-1\\n?\\n0\\n1\\n\") == \"Yes\"\nassert solution(\"1 2\\n-1\\n?\\n0\\n1\\n\") == \"Yes\"\nassert solution(\"2 100\\n-10000\\n0\\n1\\n\\n1\\n-10000\\n0\\n1\\n\\n1\\n-10000\\n0\\n1\\n\") == \"No\"\nassert solution(\"4 5\\n-1\\n0\\n1\\n1\\n\\n1\\n0\\n1\\n1\\n0\\n\") == \"No\"\n\"\"\"\n\n\nfrom collections import deque\nfrom functools import reduce"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 100\\n-10000\\n1\\n1\\n1\") == \"Yes\"\nassert solution(\"1 2\\n-1\\n?\\n1\") == \"Yes\"\nassert solution(\"4 5\\n1\\n1\\n1\\n?\\n\") == \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n-1\\n?\\n1 1\\n1?\\n1 1\\n0\") == \"Yes\"\nassert solution(\"2 100\\n-10000\\n0\\n1\\n?\\n1\\n?\\n1\\n0\") == \"Yes\"\nassert solution(\"4 5\\n?\\n1\\n?\\n1\\n?\\n1\\n0\") == \"No\"\nassert solution(\"4 5\\n1\\n?\\n1\\n?\\n1\\n0\") == \"Yes\"\n\nassert solution(\"1 2\\n-1\\n0\\n1 1\\n1?\\n1 1\\n0\") == \"Yes\""
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n-1\\n?\\n0\\n1\\n\") == 'Yes'\nassert solution(\"2 100\\n-10000\\n0\\n1\\n\\n\") == 'Yes'\nassert solution(\"4 5\\n?\\n1\\n?\\n1\\n?\\n\") == 'No'"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n-1\\n?\\n1 1\") == \"Yes\"\nassert solution(\"2 100\\n-10000\\n0\\n1\\n1\\n1\") == \"Yes\"\nassert solution(\"4 5\\n?\\n1\\n?\\n1\\n?\\n1\") == \"No\""
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n-1\\n?\\n\") == \"Yes\"\nassert solution(\"4 5\\n-10000\\n0\\n1\\n?\\n\") == \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n-1\\n?\\n2\\n0\\n0\") == \"Yes\"\nassert solution(\"2 100\\n-10000\\n0\\n1\\n?\\n?\\n\") == \"Yes\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n-1\\n?\\n1 1\\n-1\\n?\") == \"Yes\"\nassert solution(\"4 5\\n?\\n1\\n?\\n1\\n?\\n\") == \"No\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n-1\\n?\\n1\\n1\\n1\\n\") == \"Yes\"\nassert solution(\"2 100\\n-10000\\n0\\n1\\n1\\n1\\n\") == \"Yes\"\nassert solution(\"4 5\\n-10000\\n0\\n1\\n1\\n1\\n\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('14') == '6'\nassert solution('20') == '15'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"14\") == '6'\nassert solution(\"20\") == '15'\nassert solution(\"8192\") == '8191'\n\"\"\""
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\"\nassert solution(\"8192\") == \"8191\"\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('14') == '6'\nassert solution('20') == '15'\nassert solution('8192') == '8191'\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"8192\") == \"8191\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('14') == '6'\nassert solution('20') == '15'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('14') == '6'\nassert solution('20') == '15'\n\n\"\"\""
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\"\nassert solution(\"8192\") == \"8191\"\n\"\"\""
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\"\nassert solution(\"8192\") == \"8191\""
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"24 0\") == \"2\"\nassert solution(\"24 1\") == \"3\"\nassert solution(\"24 -1\") == \"4\"\nassert solution(\"1 1\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 0\") == \"1\"\nassert solution(\"5 1\") == \"2\"\nassert solution(\"5 -1\") == \"4\"\nassert solution(\"4 -7\") == \"2\"\n\n\"\"\"\n\nn, p = [int(n) for n in input().split()]\n\ns = 0\ni = 0"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"24 0\") == \"2\"\nassert solution(\"24 1\") == \"3\"\nassert solution(\"24 -1\") == \"4\"\nassert solution(\"4 -7\") == \"2\"\nassert solution(\"1 1\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"24 0\") == \"2\"\nassert solution(\"24 1\") == \"3\"\nassert solution(\"24 -1\") == \"4\"\nassert solution(\"4 -7\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 -7') == '2'\nassert solution('24 1') == '3'\nassert solution('24 -1') == '4'\nassert solution('1 1') == '-1'\nassert solution('1 0') == '-1'\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '-1'\nassert solution('1 1\\n0 1') == '1'\nassert solution('1 -1\\n0 1') == '1'\nassert solution('1 -1\\n0 1\\n') == '-1'\nassert solution('1 1\\n-1 1') == '1'\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == -1\nassert solution(\"24 0\") == 2\nassert solution(\"24 1\") == 3\nassert solution(\"24 -1\") == 4\nassert solution(\"4 -7\") == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(24, 0) == 2\nassert solution(24, 1) == 3\nassert solution(24, -1) == 4\nassert solution(4, -7) == 2\n\nassert solution('0 0 0 0 0') == -1\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 -7') == 2\nassert solution('1 1') == -1\nassert solution('1 0') == 2\n\"\"\"\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('24 0') == '2'\nassert solution('24 1') == '3'\nassert solution('24 -1') == '4'\nassert solution('4 -7') == '2'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('51528') == '10028'\nassert solution('102') == '100'\nassert solution('1') == '0'\nassert solution('0') == '0'\n\"\"\"\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('51528') == '10028'\nassert solution('102') == '100'\nassert solution('1 1') == '0'\n\n\"\"\""
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"51528\") == \"10028\"\nassert solution(\"102\") == \"100\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1\") == \"0\"\n\"\"\"\n\n\"\"\"\n\u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u043b\u043e\u0436\u043d\u043e\u0439, \u0435\u0441\u043b\u0438 \u0432\u0441\u0435 \u043a\u043b\u0435\u0442\u043a\u0438 \u0438\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c.\n\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0435\u0441\u043b\u0438 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 36 \u043a\u043b\u0435\u0442\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u0430 \u0434\u0432\u0443\u043c\u044f \u0437\u043d\u0430\u0447\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u0442\u043e \u0441\u0443\u043c\u043c\u0430 \u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u044c\u044e, \u0441\u0443\u043c\u043c\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0443\u043c\u043c\u044b \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u044c\u044e, \u0441\u0443\u043c\u043c\u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u0438 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0443\u043c\u043c\u044b \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u044c\u044e \u0438 \u0442.\u0434.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0435 \u0431\u044b\u043b\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0447\u0438\u0441\u043b\u0430 \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u043f\u043e\u0440\u044f\u0434\u043a\u0443:\n111111\n\u041a\u0430\u043a\u043e\u0432\u0430 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c, \u0435\u0441\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u043e \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0439 \u043a\u043b\u0435\u0442\u043a\u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0434\u0440\u0443\u0433\u0430\u044f \u043a\u043b\u0435\u0442\u043a\u0430?\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c.\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n444\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n26 18\n\"\"\"\n\n\"\"\"\n\u0414\u0430\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c n\u00d7n, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e n.\n\u0412\u044b\u044f\u0441\u043d\u0438\u0442\u044c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438 \u0447\u0435\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0440\u0430\u0432\u043d\u044b \u043d\u0443\u043b\u044e.\n\u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043c\u043e\u0434\u0443\u043b\u0438, \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438 \u0438 \u0446\u0438\u043a\u043b\u044b.\n\n\"\"\"\n\n\"\"\"\n\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:\n\u0414\u0430\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c n\u00d7m, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e n. \u0412\u044b\u044f\u0441\u043d\u0438\u0442\u044c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438 \u0447\u0435\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0440\u0430\u0432\u043d\u044b \u043d\u0443\u043b\u044e.\n\u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043c\u043e\u0434\u0443\u043b\u0438, \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438 \u0438 \u0446\u0438\u043a\u043b\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5 2\n3 0\n0 0\n1 1\n0 0\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n2 2\n\n\"\"\"\n\n\"\"\"\n\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:\n\u0414\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0434\u0432\u043e\u0439\u043a\u0438, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435 n, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043e\u0442\u0432\u0435\u0442 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0415"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"51528\") == \"10028\"\nassert solution(\"102\") == \"100\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('51528') == '10028'\n\"\"\"\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3\n51528\n''') == '10028'\nassert solution('''3 2\n102\n''') == '100'\nassert solution('''1 1\n1\n''') == '0'\n'''\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"51528\") == \"10028\"\nassert solution(\"102\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('51528') == '10028'\nassert solution('102') == '100'\nassert solution('101') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n51528') == '10028'\n\"\"\"\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n51528\") == \"10028\"\nassert solution(\"3 2\\n102\") == \"100\"\nassert solution(\"1 1\\n1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 2 3') == '5'\nassert solution('1 3 2 4') == '4'\nassert solution('1 2 2 3') == '4'\nassert solution('2 2 3 4') == '5'\nassert solution('2 2 3') == '3'\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\nassert solution(\"1 3 2 4\") == \"3\"\nassert solution(\"1 2 1 1\") == \"3\"\n\nassert solution(\"1 3 2 3\") == \"5\"\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == ''\nassert solution('1\\n2\\n3') == ''\nassert solution('1\\n2\\n3\\n1\\n2') == ''\nassert solution('1\\n2\\n3\\n1\\n2\\n1') == ''\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3 2 3') == '5'\nassert solution('1 3 2 4') == '4'\n\"\"\"\n\nfrom sys import stdin, stdout\n\nstdout.write(\n    solution(stdin.read())\n)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2 3') == '5'\nassert solution('1 3 2 3') == '4'\n\"\"\"\n\nx, y, cnt_1, cnt_2 = list(map(int, input().split()))\n\nres = 0\n\nfor i in range(1, y + 1):\n    if i % x == 0 or i % y == 0:\n        continue\n    res += 1\nprint(res)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\nassert solution(\"1 3 2 4\") == \"5\"\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 2 3') == '5'\nassert solution('1 3 2 3') == '4'\nassert solution('1 3 2 3') == '4'\nassert solution('3 1 2 3') == '5'\nassert solution('1 3 2 3') == '4'\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 0 1 2\") == '3 1'\nassert solution(\"1 1 1 -1 -1 2\") == '1 1'\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 1 2 0 1 2\n''') == '3 1'"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\n\"\"\""
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\n\n\"\"\"\n\nimport sys\n\nn, sx, sy, dx, dy, t = [int(x) for x in sys.stdin.readline().strip().split()]\n\nx, y = sx, sy\nwhile t > 0:\n    x = (x + dx - 1) % n + 1\n    y = (y + dy - 1) % n + 1\n    t -= 1\n\nprint(x, y)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\nassert solution(\"3 10 -5 -1 1 1\") == \"2 2\"\n\n\"\"\"\n\nfrom math import gcd\nfrom typing import Tuple\nfrom collections import defaultdict"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\nassert solution(\"7 1 3 0 2 3\") == \"2 2\"\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"5 1 2 0 1 2\n\"\"\") == \"3 1\"\nassert solution(\n\"\"\"1 1 1 -1 -1 2\n\"\"\") == \"1 1\"\nassert solution(\n\"\"\"5 5 4 -2 3 1 2\n\"\"\") == \"4 4\"\nassert solution(\n\"\"\"1 1 1 -1 -1 2\n\"\"\") == \"1 1\"\nassert solution(\n\"\"\"5 5 4 -2 3 1 2\n\"\"\") == \"4 4\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''ABC??FGHIJK???OPQR?TUVWXY?''') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('''WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO''') == '-1'\nassert solution('''??????????????????????????''') == 'MNBVCXZLKJHGFDSAQPWOEIRUYT'\nassert solution('''AABCDEFGHIJKLMNOPQRSTUVW??M''') == '-1'\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY?\") == \"ABCDEFGHIJKLMNOPQRZTUVWXYS\"\nassert solution(\"WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO\") == \"-\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == \"-\"\n\n---\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u0430. \u0421\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430. \u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0431\u0443\u043a\u0432\u044b \u0438 \u0434\u0430\u044e\u0442 \u043d\u043e\u043c\u0435\u0440 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \u041f\u043e\u0441\u043b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u0442\u043e\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0432 \u0432\u0438\u0434\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 '?' \u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432. \u0422\u0430\u043a\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u043b\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0441\u0442\u0440\u043e\u043a \u0438\u0437 \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u0430. \u0421\u0442\u0440\u043e\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u043b\u043e\u0432\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0431\u0443\u043a\u0432\u044b \u0438 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u043c \u0432 \u0432\u0438\u0434\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 '?' \u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432. \u0422\u0430\u043a\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0441\u043b\u043e\u0432\u043e, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u0437 \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u043b\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u043e\u043c\u0435\u0440\u0430 \u0432\u0441\u0435\u0445 \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u044d\u0442\u043e\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0435. \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u043e\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 ABCDEFGHIJKLMNOPQRSTUVWXYZ? \u043d\u043e\u043c\u0435\u0440\u0430 \u0431\u0443\u0434\u0443\u0442: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043d\u043e\u043c\u0435\u0440\u0430 \u0432\u0441\u0435\u0445 \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0412 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0431\u0443\u043a\u0432\u044b \u0432\u043e\u043f\u0440\u043e\u0441\u0430, \u0430 \u0432 \u043d\u0438\u0436\u043d\u0435\u043c \u2014 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \"Q?? W? E?\" \u043d\u043e\u043c\u0435\u0440\u0430 \u0431\u0443\u0434\u0443\u0442: 1, 2, 3.\n\n\u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 "
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC??FGHIJK???OPQR?TUVWXY?') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('ABC??FGHIJK???OPQR?TUVWXY?') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('AAAAAAAAABBCCCDE') == 'ABBCCDE'\nassert solution('AAAAAAAAABBCCCD') == '-1'\nassert solution('AAAAAAAAABBCCC') == 'ABC'\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC??FGHIJK???OPQR?TUVWXY?') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('??????????????????') == 'MNBVCXZLKJHGFDSAQPWOEIRUYT'\nassert solution('AABCDEFGHIJKLMNOPQRSTUVW??M') == '-1'\n\n\"\"\"\n\nfrom typing import Dict, Set\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY??\") == \"ABCDEFGHIJKLMNOPQRZTUVWXYS\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\nassert solution(\"???????????????????\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\n\"\"\""
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY??\") == \"ABCDEFGHIJKLMNOPQRZTUVWXYS\"\nassert solution(\"WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO?\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == \"-\"\nassert solution(\"???????????????????\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY??\") == \"ABCDEFGHIJKLMNOPQRZTUVWXYS\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\nassert solution(\"???????????????????\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\nassert solution(\"\") == \"\"\nassert solution(\"AAABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"AAABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == expected_result\n\n\"\"\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC??FGHIJK???OPQR?TUVWXY?K\") == \"ABCDEFGHIJKLMNOPQRZTUVWXYS\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\nassert solution(\"???????????????????\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\n\n\"\"\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''ABC??FGHIJK???OPQR?TUVWXY?''') == 'ABCDEFGHIJKLMNOPQRZTUVWXYS'\nassert solution('''WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO''') == '-1'\nassert solution('''AABCDEFGHIJKLMNOPQRSTUVW??M''') == '-1'\n\n'''\nInput\nABC??FGHIJK???OPQR?TUVWXY?\n\nOutput\nABCDEFGHIJKLMNOPQRZTUVWXYS\n\nInput\nWELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO\n\nOutput\n-1\n\nInput\nAABCDEFGHIJKLMNOPQRSTUVW??M\n\nOutput\n-1\n\n\n-----Explanation-----\n\nIn the first case, it is possible to replace all the question marks with uppercase letters such that the resulting word is nice.\n\nIn the second case, there are no missing letters. In addition, the given string does not have a substring of length 26 that contains all the letters of the alphabet, so the answer is  - 1.\n\nIn the third case, any string of length 26 that contains all letters of the English alphabet fits as an answer.\n\n'''\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n100') == 'NO'\nassert solution('2\\n100 100') == 'YES'\nassert solution('3\\n100 100 100') == 'YES'\nassert solution('4\\n100 100 100 200') == 'NO'\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n100 200 100\\n') == 'YES'\nassert solution('4\\n100 100 100 200\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n100 200 100\") == \"YES\"\nassert solution(\"4\\n100 100 100 200\") == \"NO\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n100 200 100\\n') == 'YES'\nassert solution('4\\n100 100 100 200\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == b\n\n\"\"\"\n\n\nimport math\n\nn = int(input())\n\nw = [int(i) for i in input().split()]\n\nx = min(w)\ny = max(w)"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n100 200 100\\n\") == \"YES\"\nassert solution(\"4\\n100 100 100 200\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n100 200 100\\n\") == \"YES\"\nassert solution(\"4\\n100 100 100 200\\n\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n100 200 100\") == \"YES\"\nassert solution(\"4\\n100 100 100 200\") == \"NO\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n100 200 100\\n\") == \"YES\"\nassert solution(\"4\\n100 100 100 200\\n\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n100 100 100 200\") == \"YES\"\n\"\"\""
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n10101\\n10101\\n10101\\n10101\\n10101\") == 18\nassert solution(\"3 4\\n101010\\n101010\\n101010\\n101010\") == 12\nassert solution(\"2 2\\n101010\\n101010\") == 5"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0010\\n0100\") == \"5\"\nassert solution(\"01110\\n01110\\n01110\\n01110\") == \"18\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n01110\\n01110\\n01110\\n01110\") == \"12\"\nassert solution(\"2 2\\n10\\n10\") == \"5\"\nassert solution(\"4 4\\n11110\\n11110\\n11110\\n11110\") == \"18\"\nassert solution(\"2 2\\n10\\n10\") == \"5\"\nassert solution(\"3 2\\n10\\n10\\n10\") == \"15\"\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0010\\n0100\") == \"5\"\nassert solution(\"01110\\n01110\\n01110\\n01110\") == \"18\"\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n0010\\n0100\") == \"5\"\nassert solution(\"3 4\\n001000\\n000010\\n000010\\n000010\") == \"12\"\nassert solution(\"4 3\\n01110\\n01110\\n01110\\n01110\") == \"18\"\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n001010\\n111110\\n111110') == '12'\n\nassert solution('4 3\\n01110\\n01110\\n01110\\n01110') == '18'\n\nassert solution('2 2\\n10\\n01') == '5'\n\nassert solution('2 2\\n10\\n10') == '0'\n\nassert solution('2 3\\n10\\n101010') == '5'"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0010\\n0100\") == 5\nassert solution(\"00110\\n10101\\n01110\\n11110\") == 18\n\"\"\"\n\nimport sys"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0010\\n0100\") == \"5\"\n\"\"\"\n\nimport numpy as np\n\nn, m = [int(i) for i in input().split()]\narr = np.array([list(map(int, input())) for _ in range(n)])\n\nprint(np.sum(arr, axis=1).min() + 2 * (np.sum(arr, axis=0) - 1).min())\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n10110\\n11100\\n11010\\n11110\\n\") == \"12\"\nassert solution(\"2 2\\n01\\n10\") == \"5\"\nassert solution(\"4 3\\n101010\\n101010\\n101010\\n101010\") == \"18\"\nprint(\"Test Completed\")"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('ab') == ''\nassert solution('ab\\n') == ''\nassert solution('ab\\ncd') == ''\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '6'\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 10 2 10\\n2 4 2 2\") == \"10\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == \"2\"\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 1 3 4\\n1 3 3 3') == '3'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 2 10\\n1 3 4 3 3\") == \"3\"\nassert solution(\"4\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == \"10\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == \"2\"\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 2 10\\n1 3 4 3 3\") == \"3\"\nassert solution(\"4\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 2 10\") == \"3\"\nassert solution(\"1 1 1 1 1 1 1\") == \"2\"\nassert solution(\"1 10 2 10\") == \"10\"\nassert solution(\"1 1 1 1 1 1 1\") == \"2\"\nassert solution(\"7 1 1 1 1 1 1\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 2 10\\n1 3 4 3 3\") == 3\nassert solution(\"4\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == 10\nassert solution(\"7\\n1 1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == 2\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 2 10\\n1 3 4 3 3\") == '3'\nassert solution(\"4\\n1 10 2 10\\n2 4 2 2\") == '10'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 10 2 10\\n2 4 2 2\") == \"10\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\") == \"2\"\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 2 10\\n1 3 4 3 3\") == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 3\") == \"4\"\nassert solution(\"3 2 7\") == \"3\"\nassert solution(\"4 1 -1\") == \"1\"\nassert solution(\"6 2 0\") == \"5\"\nassert solution(\"5 1 3\") == \"4\"\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2 -5') == 3\nassert solution('5 1 3') == 4\n\"\"\""
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2 -5\") == 3\n\"\"\"\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2 -5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 -5\") == 3\nassert solution(\"5 1 3\") == 4\nassert solution(\"3 2 7\") == 3\n\n\"\"\""
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 -5\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 -5\") == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2 -5\") == \"3\"\nassert solution(\"5 1 3\") == \"4\"\nassert solution(\"3 2 7\") == \"3\"\n\"\"\"\n\nn, a, b = input().split()\nn = int(n)\na = int(a)\nb = int(b)"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2\") == \"2\"\nassert solution(\"5 1 3\") == \"4\"\nassert solution(\"6 1 -5\") == \"3\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9\\n8 6 4 2 1 4 7 10 2') == 3\nassert solution('9\\n-1 6 -1 2 -1 4 7 -1 2') == 3\nassert solution('5\\n-1 -1 -1 -1 -1') == 1\nassert solution('7\\n-1 -1 4 5 1 2 3') == 2"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n8 6 4 2 1 4 7 10 2\\n\") == \"3\"\n\nassert solution(\"9\\n-1 6 -1 2 -1 4 7 -1 2\\n\") == \"3\"\n\nassert solution(\"5\\n-1 -1 -1 -1 -1\\n\") == \"1\"\n\nassert solution(\"7\\n-1 -1 4 5 1 2 3\\n\") == \"2\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 -1 2 3 -1 4 7 10 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == str\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 7\\n1 2 3 6 8 9\") == \"3\"\nassert solution(\"5 7\\n-1 -1 2 3 4 5\") == \"2\"\nassert solution(\"7 -1\\n-1 -1 4 5 1 2 3\") == \"1\"\nassert solution(\"5 -1 -1 -1 -1 1\") == \"1\"\nassert solution(\"-1 1 -1 -1 1 -1\") == \"1\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nk = 0\ni = 0\nwhile i < len(a):\n    if a[i] > 0:\n        k += 1\n    elif a[i] < 0:\n        while a[i] < 0:\n            i += 1\n        k += 1\n    i += 1\nprint(k)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n-1 -1 4 5 1 2 3\n''') == \"1\"\nassert solution('''7\n-1 -1 4 5 1 2 3\n''') == \"2\"\nassert solution('''9\n-1 -1 -1 -1 -1 8 9 1 2 3 4 5\n''') == \"3\"\nassert solution('''8\n-1 -1 -1 -1 -1 8 9 1 2 3 4 5\n''') == \"1\"\nassert solution('''5\n-1 -1 4 5 1 2 3\n''') == \"1\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n8 6 4 2 1 4 7 10 2\") == \"3\"\nassert solution(\"9\\n-1 6 -1 2 -1 4 7 -1 2\") == \"3\"\nassert solution(\"5\\n-1 -1 -1 -1 -1\") == \"1\"\nassert solution(\"7\\n-1 -1 4 5 1 2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n8 6 4 2 1 4 7 10 2\") == \"3\"\nassert solution(\"9\\n-1 6 -1 2 -1 4 7 -1 2\") == \"3\"\nassert solution(\"5\\n-1 -1 -1 -1 -1\") == \"1\"\nassert solution(\"7\\n-1 -1 4 5 1 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 6 4 2 1 4 7 10 2\") == \"3\"\nassert solution(\"9 -1 6 -1 2 -1 4 7 -1 2\") == \"3\"\nassert solution(\"5 -1 -1 -1 -1\") == \"1\"\nassert solution(\"7 -1 -1 4 5 1 2 3\") == \"2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n8 6 4 2 1 4 7 10 2\\n\") == \"3\"\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import Deque, Deque\nfrom unittest import TestCase\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 abba') == 4\nassert solution('8 1 aabaabaa') == 5\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abbbbaa') == 4\nassert solution('abbbbaa') == 4\nassert solution('aabababa') == 5\n\nstdin = [int(i) for i in stdin.strip().split('\\n')]\nn, k = stdin\ns = [stdin[1][i] for i in range(len(stdin[1]))]\ns = ''.join(s)\nres = 0\ni, j = 0, 0\nwhile i < n and j < n:\n    if s[j]!= s[i]:\n        res = max(res, j - i)\n        i += 1\n    else:\n        j += 1\nprint(res)"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\nabba\") == 4\nassert solution(\"8 1\\naabaabaa\") == 5\nprint(\"Success!\")\n\n\"\"\"\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abba', 2) == 4\nassert solution('aabaabaa', 1) == 5\nassert solution('aaabbb', 3) == 4\nassert solution('aaaa', 0) == 4\nassert solution('aaabbb', 1) == 4\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\", \"abba\") == 4\nassert solution(\"8 1\", \"aabaabaa\") == 5\n\"\"\"\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abba', 2) == 4\nassert solution('aabaabaa', 1) == 5\n\"\"\""
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abba', 2) == 4\nassert solution('abba', 1) == 4\nassert solution('abba', 0) == 0\nassert solution('abba', 5) == 4\nassert solution('abba', 10) == 4\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 abba') == 4\n\nassert solution('8 1 aabaabaa') == 5\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 aabaabaa\") == \"5\"\nassert solution(\"8 1 aabaabaa\") == \"5\""
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 abba') == '4'\nassert solution('8 1 aabaabaa') == '5'"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n100 50 50\\n') == '2\\n1 2\\n'\nassert solution('2\\n6 5\\n') == '1\\n1\\n'\nassert solution('4\\n51 25 99 25\\n') == '3\\n1 2 4\\n'\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 50 50\") == \"2 1\"\nassert solution(\"80 60 60\") == \"0\"\nassert solution(\"51 25 99 25\") == \"3 1 2\"\nassert solution(\"51 25 99 75\") == \"3 1 2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\n\n\"\"\"\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 50 50\") == \"2\\n1 2\"\nassert solution(\"80 60 60\") == \"0\"\nassert solution(\"51 25 99 25\") == \"3\\n1 2 4\"\n\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n100 50 50\") == \"2\\n1 2\"\nassert solution(\"3\\n80 60 60\") == \"0\"\nassert solution(\"2\\n6 5\") == \"1\\n1\"\nassert solution(\"4\\n51 25 99 25\") == \"3\\n1 2 4\""
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 50 50\\n\") == \"2 1\"\nassert solution(\"80 60 60\\n\") == \"0\"\nassert solution(\"51 25 99 25\\n\") == \"3 1 2\"\nassert solution(\"50 24 98 36\\n\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n100 50 50') == '2\\n1 2'\nassert solution('2\\n6 5') == '1\\n1'\nassert solution('4\\n51 25 99 25') == '3\\n1 2 4'\n\n\"\"\"\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '3\\n100 50 50\\n'\n) == '2\\n1 2\\n'\nassert solution(\n    '2\\n6 5\\n'\n) == '1\\n1\\n'\nassert solution(\n    '4\\n51 25 99 25\\n'\n) == '3\\n1 2 4\\n'\nassert solution(\n    '4\\n51 25 99 25\\n'\n) == '3\\n1 2 4\\n'\nassert solution(\n    '3\\n6 5 6\\n'\n) == '0\\n'\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 50 50\") == \"2 1\"\nassert solution(\"80 60 60\") == \"0\"\nassert solution(\"51 25 99 25\") == \"3 1 2\"\nassert solution(\"51 25 99 30\") == \"3 1 2\"\n\n-----Test 1-----\n\n-----Test 2-----\n\n-----Test 3-----\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n100 50 50\") == \"2\\n1 2\\n\"\nassert solution(\"4\\n51 25 99 25\") == \"3\\n1 2 4\\n\"\nassert solution(\"2\\n6 5\") == \"1\\n1\\n\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"2\") == \"1.5\"\nassert solution(\"3\") == \"2.0\"\n\n\"\"\""
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"10\") == 1.5\n\"\"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '1.5'\n\n\"\"\""
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1.000000000000\"\nassert solution(\"2\") == \"1.500000000000\"\n\"\"\"\n\nN = int(input())\n\np = 1.0\n\nfor i in range(N):\n    p *= (N - i) / (i + 1)\n    p = round(p, 4)\n\nprint(p)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1.000000000000'\nassert solution('2') == '1.500000000000'\n\"\"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1.0'\nassert solution('2') == '1.5'\nassert solution('3') == '2.0'\n\"\"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == 1.0\n\n\"\"\""
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1.0'\nassert solution('2') == '1.5'\n\"\"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1.000000000000\"\nassert solution(\"2\") == \"1.500000000000\"\n\"\"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"2\") == \"1.5\"\nassert solution(\"3\") == \"1.666666666667\"\nassert solution(\"4\") == \"2.0\"\nassert solution(\"5\") == \"2.5\"\n\"\"\"\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5) == 2\nassert solution(9) == 3\n\"\"\"\n\nn = int(input())\n\ncount = 0\nmaxi = 0\ncurrent = 0\ndistinct = []\n\nwhile current <= n:\n    if current == n:\n        count += 1\n        break\n    if current not in distinct:\n        count += 1\n        distinct.append(current)\n        current += 1\n    else:\n        distinct.remove(current)\n        current += 1\n    maxi = max(maxi, count)\n\nprint(count)\nfor i in distinct:\n    print(i, end=' ')\n\nprint()\nprint(maxi)\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == '2'\nassert solution('9') == '3'\nassert solution('2') == '1'\n\n\n\n'''"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 3\") == \"2\\n2 3\"\nassert solution(\"9\\n3 5 1\") == \"3\\n3 5 1\"\nassert solution(\"2\\n1 2\") == \"1\\n2\"\n\"\"\"\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 2\nassert solution('9') == 3\nassert solution('2') == 1\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('9') == '3'\n\"\"\"\nimport collections"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 3') == '2\\n2 3'\n\"\"\""
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == 2\nassert solution(\"9\") == 3\nassert solution(\"2\") == 1\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\") == \"5\\n2\"\nassert solution(\"4\\n3\") == \"3\\n2\"\nassert solution(\"3\\n5\") == \"3\\n5\"\nassert solution(\"3\\n5\\n4\\n2\\n3\\n1\\n5\") == \"5\\n2\\n3\\n3\"\nassert solution(\"3\\n1\\n2\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\") == \"3\\n2\\n1\\n3\"\n\nprint('Success')\n\n-----\n3\n2\n1\n3\n2\n4\n5\n1\n2\n3\n4\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(5) == 2\nassert solution(9) == 3\nassert solution(6) == 1\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '2'\nassert solution('9') == '3'\nassert solution('2') == '1'\nassert solution('1') == '1'\n\"\"\"\n\nn = int(input())\n\nnumber_of_children = 0\nresult_children = 0\n\nfor i in range(1, n + 1):\n    if n % i == 0:\n        number_of_children += 1\n    if number_of_children > result_children:\n        result_children = number_of_children\n        number_of_children = 0\n\nprint(result_children)\nprint(*[i for i in range(1, n + 1, n // result_children)])\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 42') == '10'\nassert solution('1 58') == '0'\nassert solution('98765432 23456789') == '23456789'\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 42\") == \"10\"\nassert solution(\"1 58\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 42') == '10'\nassert solution('1 58') == '0'\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 42') == '10'\nassert solution('1 58') == '0'\nassert solution('98765432 23456789') == '23456789'\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 42\") == \"10\"\nassert solution(\"1 58\") == \"0\"\nassert solution(\"98765432 23456789\") == \"23456789\"\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 42\") == \"10\"\nassert solution(\"1 58\") == \"0\"\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 42') == '10'\nassert solution('1 58') == '0'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 42\") == \"10\"\nassert solution(\"1 58\") == \"0\""
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n42''') == '10'\n\nassert solution('''1\n58''') == '0'"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 42\") == \"10\"\nassert solution(\"1 58\") == \"0\"\n\"\"\""
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5', 'weird') == 'werd'\nassert solution('4', 'word') == 'word'\nassert solution('5', 'aaeaa') == 'aaeaa'"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4word\") == \"word\"\nassert solution(\"aaeaa\") == \"aaeaa\"\nassert solution(\"5word\") == \"word\"\nassert solution(\"weird\") == \"werd\"\nassert solution(\"3word\") == \"3word\"\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4', 'weird') == 'werd'\nassert solution('5', 'aaeaa') == 'a'\n\"\"\""
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nweird') == 'werd'\nassert solution('4\\nword') == 'word'\nassert solution('5\\naaeaa') == 'aaeaa'\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"weird\") == \"werd\"\nassert solution(\"word\") == \"word\"\nassert solution(\"aaeaa\") == \"aaeaa\"\n\n-----Test1-----\nhttps://app.codility.com/demo/results/trainingQ6L7WU-S5J/\n\n\n-----Test2-----\nhttps://app.codility.com/demo/results/trainingQ6L7WU-S5J/\n\n\"\"\"\n\n\"\"\"\nYou are given a string s.\n\nIn one operation, you can change one letter to another in the string.\n\nThe string is considered to be in the user's possession.\n\nYour task is to calculate the minimum number of operations needed to obtain a string that consists of only one unique letter.\n\nInput\n\nThe first line of the input contains a single integer t (1 \u2264 t \u2264 10) \u2014 the number of test cases.\n\nEach test case is described as follows. The first line contains a string s of length 10. The string s is made of the characters a\u2013z and consists of at least one letter.\n\nOutput\n\nFor each test case, print a single line containing one integer \u2014 the minimum number of operations needed.\n\nConstraints\n\n1 \u2264 t \u2264 10\ns consists of at least one letter\nExample\n\nInput\n5\nexample\n\nOutput\n4\nexample\n\"\"\""
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"werd\") == \"werd\"\nassert solution(\"aaeaa\") == \"aaeaa\"\nassert solution(\"word\") == \"word\"\n\"\"\"\n\nimport sys\nimport re\n\nn = int(sys.stdin.readline())\n\ns = sys.stdin.readline()"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nweird\") == \"werd\"\nassert solution(\"5\\naaeaa\") == \"a\""
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aaeaa') == 'a'\nassert solution('word') == 'word'\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 aa') == 'a'\nassert solution('5 aa') == 'aa'\nassert solution('1 a') == 'a'\nassert solution('2 a') == 'a'\nassert solution('3 a') == 'a'\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nweird\") == \"werd\"\nassert solution(\"4\\nword\") == \"word\"\nassert solution(\"5\\naaeaa\") == \"aaeaa\"\n\"\"\"\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('.') == 0\nassert solution('**') == 1\nassert solution('***') == 3\nassert solution('*...') == 2\nassert solution('*...*') == 4\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 1\\n*...*\") == \"2\"\nassert solution(\"6 2 3\\n*...*.\\n\") == \"4\"\nassert solution(\"11 3 10\\n.*....**.*.\\n\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"*..*\") == \"0\"\nassert solution(\"**.**\") == \"0\"\nassert solution(\"***.**\") == \"1\"\nassert solution(\"***.*\") == \"1\"\nassert solution(\"***.**\") == \"2\"\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"*...*\") == 2\nassert solution(\"*.AB*\") == 2\nassert solution(\"*.AB*B*\") == 4\nassert solution(\"*.AB*B.B*\") == 4\nassert solution(\"*A.B*\") == 2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".***\\n*.*.*\\n.*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\\n*******\\"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"*....**.*.**\") == \"7\"\nassert solution(\"*....*.*.**\") == \"4\"\nassert solution(\"*....*.**.**\") == \"2\"\nassert solution(\"*.***.*.***\") == \"0\"\nassert solution(\"*...*.**.**\") == \"4\"\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"*....**.*.**\") == \"7\"\nassert solution(\"***\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('*...*') == '2'\nassert solution('*...*. *') == '0'\n\"\"\""
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"*.*.*\") == '0'\nassert solution(\"*..*.*\") == '2'\nassert solution(\"*.*.*.*\") == '4'\nassert solution(\"*.*.*.*.*\") == '7'\nassert solution(\"*.*.*.*.*.*\") == '9'\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('*...*') == 2\nassert solution('*...*.\\n*..**.*\\n***..*.') == 4\nassert solution('*...*.\\n*..**.*\\n***..*.') == 7\n\"\"\""
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"19\") == \"1 8\"\nassert solution(\"16\") == \"NO\""
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"19\") == \"1 8\"\nprint(solution(\"19\"))\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"NO\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"8\") == \"NO\"\nassert solution(\"9\") == \"1 8\"\nassert solution(\"23\") == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('19') == '1 8'\n\"\"\""
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"19\") == \"1 8\"\n\"\"\"\n\nfrom math import ceil, sqrt"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"16\") == \"NO\"\nassert solution(\"19\") == \"1 8\"\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"19\") == \"1 8\"\nprint(solution(\"19\"))\n\nassert solution(\"16\") == \"NO\"\nprint(solution(\"16\"))\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"19\") == \"1 8\"\nassert solution(\"16\") == \"NO\"\nprint(\"All tests passed.\")"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"NO\"\nassert solution(\"19\") == \"1 8\""
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"19\") == \"1 8\"\nassert solution(\"16\") == \"NO\"\nprint(solution(\"19\"))\nprint(solution(\"16\"))\n\n\"\"\""
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 1') == '2 1'\nassert solution('2\\n5 5') == '-1'\nassert solution('1\\n10') == '-1'\n\"\"\""
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 1''') == '2 1'\nassert solution('''2\n5 5''') == '-1'\nassert solution('''1\n10''') == '-1'"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2 1\") == \"2 1\"\nassert solution(\"1\\n5\") == \"1 5\"\nassert solution(\"2\\n1 2 1\") == \"2 1\"\nassert solution(\"2\\n3 4\") == \"1 3\"\nassert solution(\"1\\n10\") == \"-1\"\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 1\\n') == '2\\n1 2'\nassert solution('2\\n5 5\\n') == '-1'\nassert solution('1\\n10\\n') == '-1'\n\"\"\"\n\nn = int(input().strip())\nnums = list(map(int, input().strip().split()))"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 1\") == \"2\\n1 2\"\nassert solution(\"2\\n5 5\") == \"-1\"\nassert solution(\"1\\n10\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 1') == '2\\n1 2'\nassert solution('2\\n5 5') == '-1'\nassert solution('1\\n10') == '-1'\nassert solution('5\\n1 1 1 1 1') == '1\\n1'"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 1\") == \"2\\n1 2\"\nassert solution(\"2\\n5 5\") == \"-1\"\nassert solution(\"1\\n10\") == \"-1\"\nassert solution(\"1\\n5\") == \"1\\n5\"\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 1\\n') == '2\\n1 2'\nassert solution('2\\n5 5\\n') == '-1'\nassert solution('1\\n10\\n') == '-1'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 1\") == \"2\\n1 2\"\nassert solution(\"2\\n5 5\") == \"-1\"\nassert solution(\"1\\n10\") == \"-1\"\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 1\") == \"2\\n1 2\"\nassert solution(\"2\\n5 5\") == \"-1\"\nassert solution(\"1\\n10\") == \"-1\"\n\n\n---\n\n\nIncorrect solution attempt (too many nodes/children/childrens):"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2 2\"\nassert solution(\"27\") == \"3 9 9\"\nassert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2 2\"\nassert solution(\"27\") == \"3 9 9\"\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2 2'\nassert solution('27') == '3 9 9'\nassert solution('101') == '1 1 0 1'\nassert solution('9') == '1 1 1'\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2 2\"\nassert solution(\"27\") == \"3 9 9\"\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2 2'\nassert solution('27') == '3 9 9'\nassert solution('9') == '1 1 1'\nassert solution('100') == '1 1 1'\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2 2\"\nassert solution(\"27\") == \"3 9 9\"\nassert solution(\"10000\") == \"4 9 9 9\"\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2 2'\nassert solution('27') == '3 9 9'\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"2 2\"\nassert solution(\"27\") == \"3 9 9\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nimport sys\nimport collections\n\nsys.stdin = open('input.txt', 'r')\n\nn = int(sys.stdin.readline().rstrip())\n\nd = collections.Counter([int(i) for i in str(n)])\nprint(d.most_common()[0][1])\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2 2'\nassert solution('27') == '3 9 9'\n\n'''\n\nn = int(stdin.readline())\ncount = 0\nlst = []\nfor i in range(n, 0, -1):\n    if n % i == 0:\n        lst.append(i)\n        n = n / i\n        count += 1\n        if n == 1:\n            print(count)\n            print(*lst)\n            break"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == '2 2'\nassert solution(\"27\") == '3 9 9'"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 3\n''') == '2\\n3 2'\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n2 1 1\") == \"2 3\"\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 1 1\") == \"3\"\n\nassert solution(\"83 14\") == \"2\"\nassert solution(\"2 1 1\") == \"3\"\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 1 1') == '3\\n1 1 2'\nassert solution('4\\n2 1 1') == '4\\n1 1 2'\nassert solution('4\\n3 2 1') == '4\\n1 1 2'\nassert solution('4\\n1 1 2') == '4\\n1 1 2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"83 14\") == \"2\"\nassert solution(\"2 1 1\") == \"3\"\nassert solution(\"2 1 1\") == \"3\""
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 2 1\") == \"3\"\nassert solution(\"83 14\") == \"3\"\nassert solution(\"83 14\") == \"3\""
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == 2, \"WA!\"\nassert solution('2 2') == 1, \"WA!\"\nassert solution('3 2 1') == 3, \"WA!\"\nassert solution('83 14') == 2, \"WA!\"\nassert solution('2 1 1') == 3, \"WA!\"\n\nprint(\"PASSED\")\n\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == '2', '1'\nassert solution('2 2') == '1', '2'\nassert solution('3 2 1') == '3', '3'\nassert solution('2 1 1') == '2', '1'\nassert solution('83 14') == '2', '14 83'\n\n\"\"\""
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == 3\nassert solution(\"4\\n1 1 2 2\") == 1\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"992\") == \"496\"\n\"\"\""
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"992\") == \"496\"\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 1\nassert solution('992') == 496\n\n\"\"\"\n\nfrom sys import stdin\nfrom math import floor"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\n\"\"\"\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('992') == '496'\nassert solution('998') == '512'\nassert solution('999') == '513'\nassert solution('1') == '1'\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == 1\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\n\nassert solution('992') == '496'\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123) == 3\nassert solution(1234) == 2\nassert solution(9990) == 0\n\"\"\""
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 1\nassert solution('992') == 496\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == 1\nassert solution(992) == 496\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 0\") == \"2\"\nassert solution(\"0 2\") == \"1\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 6\\n10\\n99\") == \"8\"\nassert solution(\"2 0\\n1\\n9\") == \"4\"\nassert solution(\"19 7\\n1000\\n9999\") == \"6\"\nprint('Test pass.')"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6\") == \"8\"\nassert solution(\"2 0\") == \"4\"\nassert solution(\"19 7\") == \"6\""
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 6\\n10\\n99') == '8'\nassert solution('2 0\\n1\\n9') == '4'\nassert solution('19 7\\n1000\\n9999') == '6'\n\"\"\"\n\nm, d = map(int, stdin.readline().split())\na = int(stdin.readline())\nb = int(stdin.readline())\n\ncount = 0\nfor number in range(a, b+1):\n    if number % 10 == 0:\n        continue\n    if str(number).count(str(number)[-1]) % 2 == 0:\n        continue\n    flag = True\n    for index, digit in enumerate(str(number)):\n        if index % 2 == 0:\n            if int(digit) == int(str(number)[index+1]):\n                continue\n            else:\n                flag = False\n                break\n    if flag:\n        count += 1\nprint(count % (10**9 + 7))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 6\\n10\\n99\") == \"8\"\nassert solution(\"19 7\\n1000\\n9999\") == \"6\"\nassert solution(\"2 0\\n1\\n9\") == \"4\"\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 6\\n10\\n99') == '8'\nassert solution('2 0\\n1\\n9') == '4'\nassert solution('19 7\\n1000\\n9999') == '6'"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6\") == '8'\nassert solution(\"2 0\") == '4'\nassert solution(\"19 7\") == '6'\n\n\"\"\"\n\nfrom math import log10\nimport re\nfrom functools import reduce\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 6\\n10\\n99\\n') == '8'\nassert solution('2 0\\n1\\n9\\n') == '4'\nassert solution('19 7\\n1000\\n9999\\n') == '6'\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 6\") == \"8\"\nassert solution(\"2 0\") == \"4\"\nassert solution(\"19 7\") == \"6\"\n\"\"\""
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 6\\n10\\n99') == '8'\nassert solution('2 0\\n1\\n9') == '4'\nassert solution('19 7\\n1000\\n9999') == '6'\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 3 1 4 2') == '4'\n\"\"\""
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 3 1 4 2\") == \"4\"\n\nassert solution(\"6 4\\n1 1 2 2 3 3\") == \"6\"\nassert solution(\"6 4\\n1 1 2 2 3 3\\n1 1 2 2 3 3\\n1 1 2 2 3 3\\n1 1 2 2 3 3\") == \"1\"\nassert solution(\"6 4\\n1 1 2 2 3 3\\n1 1 2 2 3 3\\n1 1 2 2 3 3\\n1 1 2 2 3 3\") == \"2\"\nassert solution(\"6 4\\n1 1 2 2 3 3\\n1 1 2 2 3 3\\n1 1 2 2 3 3\\n1 1 2 2 3 3\") == \"3\"\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"4\"\nassert solution(\"6 4\") == \"6\"\nassert solution(\"5 2\") == \"5\"\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 3 1 4 2') == 4\n\"\"\"\nimport numpy as np\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = np.array(list(map(int, sys.stdin.readline().split())))\ni = 0\nwhile n > 0:\n    a[:m] = np.where(a[:m] < m, m, a[:m])\n    i += 1\nprint(i)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 3 1 4 2\") == \"4\"\nassert solution(\"6 4\\n1 1 2 2 3 3\") == \"6\"\nassert solution(\"7 8\\n1 1 2 2 3 3 4 4\") == \"7\"\nassert solution(\"8 6\\n1 1 2 2 3 3 4 4 5 5\") == \"8\"\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 3 1 4 2\") == \"4\"\nassert solution(\"6 4\\n1 1 2 2 3 3\") == \"6\"\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 2\n1 3 1 4 2\n''') == '4'\n\nassert solution('''6 4\n1 1 2 2 3 3\n''') == '6'\n\nassert solution('''5 2\n1 2 1 4 2\n''') == '4'\n\nassert solution('''6 4\n1 2 2 3 3 4\n''') == '1'\n\nassert solution('''7 5\n1 2 3 4 2 5 3\n''') == '3'"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 3 1 4 2\") == '4'\nassert solution(\"6 4\\n1 1 2 2 3 3\") == '6'\nassert solution(\"1 1\\n1\") == '1'\nassert solution(\"10 5\\n1 1 1 1 1 1 1 1 1 1 1\") == '1'\n\n\"\"\"\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 3 1 4 2\") == \"4\"\nassert solution(\"6 4\\n1 1 2 2 3 3\") == \"6\"\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\nidx = 0\ncnt = 0\nwhile cnt < m:\n    for i in range(n):\n        if cnt < m:\n            if idx < n and cnt < m:\n                print(idx+1)\n                cnt += 1\n                idx += 1\n            else:\n                break\n        else:\n            break\n    if idx == n:\n        idx = 0\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 2 3 4') == '4'\nassert solution('10 4\\n1 2 1 2 1 1 1 2 2 2') == '10'\nassert solution('5 2\\n1 3 1 4 2') == '4'\nassert solution('6 4\\n1 1 2 2 3 3') == '6'\nassert solution('7 5\\n1 1 1 1 1 1 1') == '7'\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"125\") == \"3\"\nassert solution(\"43\") == \"5\"\nassert solution(\"1000000000\") == \"10000000\"\n\n\"\"\"\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\n\"\"\"\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"125\") == \"3\"\nassert solution(\"43\") == \"5\"\nassert solution(\"1000000000\") == \"10000000\"\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(125) == 3\nassert solution(43) == 5\nassert solution(1000000000) == 1000000000\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(12)) == '2'\nassert solution(str(123)) == '3'\n\"\"\""
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"125\") == \"3\"\nassert solution(\"43\") == \"5\"\nassert solution(\"1000000000\") == \"10000000\"\n\"\"\"\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('125') == '3'\nassert solution('43') == '5'\nassert solution('1000000000') == '10000000'\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"125\") == \"3\"\nassert solution(\"43\") == \"5\"\nassert solution(\"1000000000\") == \"10000000\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"125\") == 3\nassert solution(\"43\") == 5\nassert solution(\"1000000000\") == 1000000000\n\"\"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == 0\nassert solution(\"3 2\") == 4\nassert solution(\"4 1\") == 6\n\n\"\"\"\n\n\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == 0\n\nassert solution(\"3 2\") == 4\n\nassert solution(\"4 1\") == 6\n\nassert solution(\"7 4\") == 328\n\n\"\"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"4 1\") == \"6\"\nassert solution(\"7 4\") == \"328\"\n\"\"\"\n\nn, k = map(int, input().split())"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '0'\nassert solution('3 2') == '4'\nassert solution('4 1') == '6'\nassert solution('7 4') == '328'\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2') == 4\nassert solution('4 1') == 6\nassert solution('7 4') == 328\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '0'\nassert solution('3 2') == '4'\nassert solution('4 1') == '6'\nassert solution('7 4') == '328'\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '0'\nassert solution('3 2') == '4'\nassert solution('4 1') == '6'\nassert solution('7 4') == '328'\n\"\"\"\nimport sys\nimport math\nfrom typing import Dict, List, Set, Tuple, Generator"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '0'\nassert solution('3 2') == '4'\nassert solution('4 1') == '6'\nassert solution('7 4') == '328'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1') == 6\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"4 1\") == \"6\"\nassert solution(\"7 4\") == \"328\"\n\n\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n4 3 4 1 6\\nRROWW\") == \"11\"\nassert solution(\"5 2\\n10 20 14 20 11\\nRRRRR\") == \"-1\"\nassert solution(\"11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW\") == \"28\"\n\nassert solution(\"6 3\\n4 3 4 1 6\\nRRRR\\nRRWW\") == \"11\"\nassert solution(\"7 2\\n10 20 14 20 11\\nWWROW\") == \"-1\"\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2 3\\nR\") == \"7\"\nassert solution(\"3 2\\n1 2 3\\nW\") == \"5\"\nassert solution(\"3 2\\n1 2 3\\nWO\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n4 3 4 1 6\\nRROWW\") == \"11\"\nassert solution(\"5 2\\n10 20 14 20 11\\nRRRRR\") == \"-1\"\nassert solution(\"11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW\") == \"28\"\n\n\"\"\""
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n4 3 4 1 6\\nRROWW\") == \"11\"\nassert solution(\"5 2\\n10 20 14 20 11\\nRRRRR\") == \"-\"\nassert solution(\"11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW\") == \"28\"\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n4 3 4 1 6\\nRROWW\") == \"11\"\nassert solution(\"5 2\\n10 20 14 20 11\\nRRRRR\") == \"-1\"\nassert solution(\"11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW\") == \"28\"\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n4 3 4 1 6\\nRROWW\") == \"11\"\nassert solution(\"5 2\\n10 20 14 20 11\\nRRRRR\") == \"-1\"\nassert solution(\"11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW\") == \"28\"\n\n\"\"\"\n\nn, k = map(int, input().split())\narray = list(map(int, input().split()))\narr = input()\n\narray_l = array.copy()\narray_l.sort(reverse=True)\n\narray_l = [array[i] for i in range(n) if arr[i] == 'O']"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n4 3 4 1 6\\nRRRRR\") == \"11\"\nassert solution(\"5 2\\n10 20 14 20 11\\nRRRRR\") == \"-1\"\nassert solution(\"11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW\") == \"28\""
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n4 3 4 1 6\\nRWOORWORROW') == '11'\nassert solution('5 2\\n10 20 14 20 11\\nRRRRR') == '-1'\nassert solution('11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW') == '28'"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n10 20 14 20 11\\nRRRRR\") == \"-1\"\nassert solution(\"5 3\\n4 3 4 1 6\\nRRRRR\") == \"11\"\n\"\"\""
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n4 3 4 1 6\\nRRRRR\") == \"11\"\nassert solution(\"5 2\\n10 20 14 20 11\\nRRRRR\") == \"-1\"\n\"\"\""
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 4\\n2\\n2 4') == 'YES'\nassert solution('9 4\\n3\\n1 2 4') == 'YES'\nassert solution('9 4\\n3\\n1 2 3') == 'NO'\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 4 2 3 1\") == \"YES\"\nassert solution(\"9 4 3 2 1\") == \"NO\"\nassert solution(\"9 4 1 2 3\") == \"YES\"\nassert solution(\"9 4 2 3 1\") == \"NO\"\nassert solution(\"9 4 3 2 1\") == \"YES\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 4\\n2\\n2 4') == \"YES\"\nassert solution('9 4\\n3\\n1 2 4') == \"YES\"\nassert solution('9 4\\n3\\n1 2 3') == \"NO\"\nassert solution('9 4\\n3\\n1 2') == \"NO\"\nassert solution('9 4\\n3\\n1') == \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 4\\n2\\n2 4\") == 'YES'\nassert solution(\"9 4\\n3\\n1 2 4\") == 'YES'\nassert solution(\"9 4\\n3\\n1 2 3\") == 'NO'"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 4 2 1\") == \"YES\"\nassert solution(\"9 4 3 1\") == \"NO\"\nassert solution(\"9 4 1 2\") == \"NO\"\nassert solution(\"3 1 2\") == \"YES\"\nassert solution(\"1 2 4\") == \"YES\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 4 2 3 1\") == 'YES'\nassert solution(\"9 4 3 1 2\") == 'NO'\nassert solution(\"9 4 1 3 2\") == 'YES'\nassert solution(\"9 4 1 2 3\") == 'NO'\nassert solution(\"9 4 1 3 2\") == 'YES'\n\n\"\"\""
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 4\") == \"YES\"\nassert solution(\"9 4 2\") == \"NO\"\nassert solution(\"9 4 2 1\") == \"YES\"\nassert solution(\"9 4 1 2\") == \"NO\"\nassert solution(\"9 4 1 3 1\") == \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    9 4\n    2\n    2 4\n    \"\"\"\n    ) == \"YES\"\n\nassert solution(\n    \"\"\"\n    9 4\n    3\n    1 2 4\n    \"\"\"\n    ) == \"YES\"\n\nassert solution(\n    \"\"\"\n    9 4\n    3\n    1 2 3\n    \"\"\"\n    ) == \"NO\"\n\nassert solution(\n    \"\"\"\n    6 2\n    1\n    4 2\n    \"\"\"\n    ) == \"YES\"\n\nassert solution(\n    \"\"\"\n    1 1\n    1\n    \"\"\"\n    ) == \"YES\""
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 4') == 'YES'\nassert solution('9 4') == 'NO'\nassert solution('9 4') == 'NO'\nassert solution('9 4') == 'YES'\nassert solution('9 4') == 'YES'\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4\\n2\\n2 3 1') == 'YES'\nassert solution('2 4\\n2\\n3 1 2') == 'NO'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"||+|=|||||\") == \"|||||+|=|||||\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"||||+||=||||||\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"||||+||=||||||\""
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"||+|=|||||\") == \"|||+|=||||\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"||+|=|||||\") == \"|||+|=||||\"\nassert solution(\"||||+||=||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"||||+||=||||||\"\nassert solution(\"||||+||=||||||\") == \"||||+||=||||||\"\nassert solution(\"||||+||=||||||\") == \"Impossible\""
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"||+|=||||||\") == \"|||+|=||||||\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|||+|=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\n\"\"\"\nfrom collections import defaultdict\nimport re"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('||||+||=||||||') == '||||+||=||||||'\nassert solution('||+|=|||||') == 'Impossible'\nassert solution('||||+||=||||||') == 'Impossible'\nassert solution('|+|=||||||') == 'Impossible'\nassert solution('||||+||=||||||') == 'Impossible'\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"||+|=|||||\") == \"|||+|=||||\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"||+|=|||||\") == \"|||+|=|||||\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"|||||+||=||\") == \"|||||+||=||||\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|+|=||||||\") == \"Impossible\"\nassert solution(\"||||+||=||||||\") == \"Impossible\"\nassert solution(\"|||||+||=||||||\") == \"Impossible\"\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == 2\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"2\"\n\n-----\nInput is given from Standard Input in the following format:\nn k\n\n-----"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n\") == 2\n\"\"\"\n\n\"\"\"\nBASE = 10 ** 9 + 7"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2') == 2\nassert solution('4 2') == 2\nassert solution('5 2') == 4\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\nimport sys\nimport math\n\n\"\"\"\nfor each permutation we want to count number of swaps\nwe also need to keep track of how many swaps we made\nfor oddness k we swap the values for each index in the permutation\n    at each swap we need to take the sum of the values of each index in the permutation\n    and subtract the new value of the index\n    and add the sum to count_swaps\n    \n    we add the number of swaps to count_swaps\n    \n    we take modulo 10^9+7\n\"\"\"\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == 2\n\n\"\"\""
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == 2\n\n\"\"\"\n\nn, k = map(int, input().split())\nprint(binomial_coefficient(n, k) % (10**9+7))\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"6\"\nassert solution(\"5 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\\nUU\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\\nUU\\nDR\"\n\"\"\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\n-1 0\n0 3\n2 -1\") == \"2\n1 2\nRL\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\\nUU\"\n\n\"\"\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\n-1 0\n0 3\n2 -1\") == \"2\n1 2\nRL\"\nassert solution(\"3\n-1 0\n0 3\n2 -1\") == \"2\n1 2\nRR\"\nassert solution(\"3\n-1 0\n0 3\n2 -1\") == \"2\n1 2\nDR\"\nassert solution(\"3\n-1 0\n0 3\n2 -1\") == \"2\n1 2\nUR\"\nassert solution(\"3\n-1 0\n0 3\n2 -1\") == \"2\n1 2\nUL\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\\nUU\"\n\"\"\"\n\nimport re\n\npattern = re.compile(r'\\d+')\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n0 3\\n2 -1') == '2\\n1 2\\nRL'\n\"\"\""
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\\nUU\\nDR\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\") == \"2\\n1 2\\nRL\\nUU\"\n\n\"\"\"\n\nfrom typing import Callable, List, Tuple\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\\n\") == \"2\\n1 2\\nRL\\nUU\\nDR\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_one) == test_output_one\nassert solution(test_input_two) == test_output_two\n\nprint(solution(stdin))\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\nogogob\") == 'a***b'\nassert solution(\"13\\nogogmgogogogo\") == '***gmg***'\nassert solution(\"9\\nogoogoogo\") == '*********'\nassert solution(\"8\\nogogogo\") == '***g***'\nassert solution(\"2\\nogog\") == '**g'\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aogogob') == 'a***b'\nassert solution('ogogmgogogogo') == '***gmg***'\nassert solution('ogoogoogo') == '*********'\nassert solution('dgd') == '***'\nassert solution('dg') == '***'\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aogogob') == 'a***b'\n\nassert solution('ogogmgogogogo') == '***gmg***'\n\nassert solution('ogoogo') == '*********'\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ogogoo') == '***g'\nassert solution('aogogob') == 'a***b'\nassert solution('aogogom') == 'a***g'\nassert solution('aogogoo') == 'a***b'\nassert solution('aogogom') == 'a***g'\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aogogob') == 'a***b'\n\nassert solution('ogogmgogogogo') == '***gmg***'\nassert solution('ogogo') == '*********'\nassert solution('a') == '***b'\nassert solution('go') == '***'\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aogogob\") == \"a***b\"\nassert solution(\"ogogmgogogogo\") == \"***gmg***\"\nassert solution(\"ogoogoogo\") == \"*********\"\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7aogogob\") == \"a***b\"\nassert solution(\"13ogogmgogogogo\") == \"***gmg***\"\nassert solution(\"9ogogogo\") == \"*********\"\n\"\"\"\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\naogogob\") == \"a***b\"\nassert solution(\"13\\ogogmgogogogo\") == \"***gmg***\"\nassert solution(\"9\\ogoogoogo\") == \"*********\""
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7\naogogob\n''') == 'a***b'\n\nassert solution('''13\nogogmgogogogo\n''') == '***gmg***'\n\nassert solution('''9\nogoogoogo\n''') == '*********'\n\nassert solution('''1\nb\n''') == 'b'\n\nassert solution('''4\ntest\n''') == 'test'"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10\") == \"10\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"10 100\") == \"10\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"1000 1\") == \"1000\"\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\") == '2'\nassert solution(\"20190929 1605\") == '363165664'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"947 987654321987654321\") == \"593574252\"\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10\") == \"1\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"1 100\") == \"10\"\nassert solution(\"100 100\") == \"1\"\nassert solution(\"1 10^10\") == \"1\"\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"20190929 1605\") == \"363165664\"\nassert solution(\"947 987654321987654321\") == \"593574252\"\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == \"9\"\nassert solution(\"10 1\") == \"4\"\nassert solution(\"10 2\") == \"8\"\nassert solution(\"20190929 1605\") == \"363165664\"\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1758 6656 78919269925327\") == \"593574252\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20190929 1605\") == \"363165664\"\n\"\"\"\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"20190929 1605\") == \"363165664\"\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1929 1219') == '363165664'\nassert solution('947 987654321987654321') == '593574252'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 8\") == \"3\"\nassert solution(\"1 2 -18\") == \"0\"\nassert solution(\"2 2 -1\") == \"4\"\nprint('Success')\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 8\") == \"3\\n10 2008 13726\"\nprint(solution(\"1 2 -18\"))\nassert solution(\"1 2 -1\") == \"0\\n1 31 337 967\"\nassert solution(\"2 2 -1\") == \"4\\n1 31 337 967\"\nprint(solution(\"2 2 -1\"))"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 8\") == '3\\n10 2008 13726'\nprint(solution(\"3 2 8\"))\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 8\") == \"3\"\nassert solution(\"1 2 -18\") == \"0\"\nassert solution(\"2 2 -1\") == \"4\"\n\"\"\""
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 8') == 3\n\"\"\""
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 -1\") == \"4\"\nassert solution(\"1 2 -18\") == \"0\"\n\"\"\""
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 8\\n') == 3\nassert solution('1 2 -18\\n') == 0\nassert solution('2 2 -1\\n') == 4\nassert solution('3 2 -8\\n') == 1\nassert solution('3 2 8\\n') == 3\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3, 2, 8) == 3\nassert solution(1, 2, -18) == 0\n\nassert solution(2, 2, -1) == 4\nassert solution(2, 2, 1) == 3\n\nassert solution(1, 1, -5) == 1"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 8\") == \"3\"\nassert solution(\"1 2 -18\") == \"0\"\nassert solution(\"2 2 -1\") == \"4\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 8\") == 3\nassert solution(\"1 2 -18\") == 0\nassert solution(\"2 2 -1\") == 4\nassert solution(\"3 5 3\") == 1\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4') == 'NO'\n\nprint('Hooray!')\n\n\"\"\""
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\") == \"NO\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\n\"\"\"\n\nimport collections\nimport math\nimport sys\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\") == \"NO\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\nassert solution
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\") == \"NO\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"YES\"\nassert solution(\"1 1 1 1 2 2 2 2\") == \"YES\"\nassert solution(\"1 1 1 2 2 2 2\") == \"NO\"\nassert solution(\"1 1 1 1 2 2 2 2\") == \"NO\"\nassert solution(\"1 1 1 1 2 2 2 2\") == \"NO\"\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\") == \"NO\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\n\n'''"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == 'YES'\nassert solution('1 1 1 2 2 2') == 'YES'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == 'NO'\nassert solution('1 1 1 2 2 2') == 'NO'\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        "
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\") == \"NO\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\") == \"NO\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"24\"\nassert solution(\"101 6800 6500\") == \"0\"\nassert solution(\"329 19913 19900\") == \"8\"\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"239 10880 9889\") == '0'\nassert solution(\"26 7258 6123\") == '2'\nassert solution(\"493 8000 8000\") == '24'\nassert solution(\"101 6800 6500\") == '0'\nassert solution(\"329 19913 19900\") == '8'\n\n\"\"\"\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"24\"\nassert solution(\"101 6800 6500\") == \"0\""
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''239 10880 9889''') == '0'\nassert solution('''26 7258 6123''') == '2'\nassert solution('''493 8000 8000''') == '24'\nassert solution('''101 6800 6500''') == '0'\nassert solution('''329 19913 19900''') == '8'\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"239 10880 9889\") == '0'\nassert solution(\"26 7258 6123\") == '2'\nassert solution(\"493 8000 8000\") == '24'\nassert solution(\"329 19913 19900\") == '8'\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"239 10880 9889\") == '0'\nassert solution(\"26 7258 6123\") == '2'\nassert solution(\"493 8000 8000\") == '24'\nassert solution(\"101 6800 6500\") == '0'\n\n-----"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"24\"\nassert solution(\"101 6800 6500\") == \"0\"\nassert solution(\"329 19913 19900\") == \"8\""
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('239 10880 9889') == '0'\nassert solution('26 7258 6123') == '2'\nassert solution('493 8000 8000') == '24'\nassert solution('101 6800 6500') == '0'\nassert solution('329 19913 19900') == '8'\n\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"24\"\nassert solution(\"101 6800 6500\") == \"0\"\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('239 10880 9889') == '0'\nassert solution('26 7258 6123') == '2'\nassert solution('493 8000 8000') == '24'\nassert solution('101 6800 6500') == '0'\nassert solution('329 19913 19900') == '8'\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2\\n3\\n1\\n') == '3'\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2\\n3\\n1\") == \"3\"\nassert solution(\"1\\n2\\n3\\n5\") == \"0\"\n\"\"\"\n\nimport sys\nimport math\n\nN = int(input())\na, b, c = map(int, input().split())\n\nprint(min(N*a, N*b, N*c))\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\\n3\\n1\\n\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2\\n3\\n1\") == \"3\"\nassert solution(\"1\\n2\\n3\\n5\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport math\n\nN = int(sys.stdin.readline())\n\nr = int(sys.stdin.readline())\no = int(sys.stdin.readline())\ne = int(sys.stdin.readline())\n\nx = min(r, e)\ny = max(r, e)"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2\\n3\\n1\\n\") == \"3\"\nassert solution(\"1\\n2\\n3\\n5\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2\\n3\\n1\\n') == '3'\nassert solution('1\\n2\\n3\\n5\\n') == '0'\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(input())\na, b, c = [int(x) for x in input().split()]\n\nwinnie_to_house = defaultdict(int)\nwinnie_to_house[0] = 0\nwinnie_to_house[1] = a\nwinnie_to_house[2] = a + b\n\nvisited = set()\nvisited.add((0, 0, 0))\n\nlast_hosue = 0\nfor i in range(3, n + 1):\n    last_hosue = min(winnie_to_house[i - 2], winnie_to_house[i - 1] + b, winnie_to_house[i - 1] + c)\n    winnie_to_house[i] = last_hosue\n    visited.add((last_hosue, winnie_to_house[i - 2], winnie_to_house[i - 1]))\n\nprint(min(visited, key=lambda v: v[0]))\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\\n3\\n1\\n\") == \"3\"\nassert solution(\"1\\n2\\n3\\n5\\n\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2\\n3\\n1\") == '3'\nassert solution(\"1\\n2\\n3\\n5\") == '0'\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n2\n3\n1\n''') == '3'\nassert solution('''1\n2\n3\n5\n''') == '0'\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 1 4') == '6'\nassert solution('30 20 10') == '20'"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n7 1 4\n''') == '3'\n\nassert solution('''\n30 20 10\n''') == '20'"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 1 4\\n') == 6\n\"\"\""
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 1 4\") == \"3\"\nassert solution(\"30 20 10\") == \"20\"\nassert solution(\"34 17 8\") == \"11\"\n\n\"\"\"\n\n\nimport sys\n\ninput = sys.stdin.readline\n\nx1, x2, x3 = map(int, input().split())\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 1 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 1 4\") == \"6\"\nassert solution(\"30 20 10\") == \"20\"\n\n\"\"\""
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 1 4') == '6'\nassert solution('30 20 10') == '20'\n\"\"\"\n\nx_1, x_2, x_3 = map(int, input().split())\n\nprint(min(x_1, x_3 - x_2, x_2 - x_1))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 1 4\\n') == '3'\nassert solution('30 20 10\\n') == '20'"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 1 4') == 6\nprint('Test success.')\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 1 4') == '3'\nassert solution('30 20 10') == '20'"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 3 7\") == 1\nassert solution(\"2 228\\n1 1\") == 0\nassert solution(\"3 7\\n1 2 3\") == -1"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3 7\") == \"1\"\nassert solution(\"2 228\\n1 1\") == \"0\"\nassert solution(\"3 7\\n1 2 3\") == \"-\"\nassert solution(\"1 1\\n1\") == \"-\"\n\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2 3 7') == '1'\nassert solution('2 228\\n1 1') == '0'\nassert solution('3 7\\n1 2 3') == '-1'\n\n\n\n-----Big O complexity-----\nThe solution is O(n), in the worst case it can be O(n^2).\n\n-----Code-----\n'''"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7') == '-1'\nassert solution('2 228') == '0'\nassert solution('1 1') == '-1'\nassert solution('1 2 3') == '1'\n\n\"\"\""
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\\n1 2 3\") == \"0\"\n\nassert solution(\"2 228\\n1 1\") == \"-1\"\n\nassert solution(\"3 7\\n1 2 3\") == \"1\"\n\nassert solution(\"1 1\\n1 1\") == \"0\"\n\nassert solution(\"3 5\\n1 2 3 7\") == \"0\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, array: List[int], number: int) -> int:\n        def count(number: int) -> int:\n            res = 0\n            while number:\n                res += number & 1\n                number >>= 1\n            return res\n\n        def get_equal_part(array: List[int], number: int) -> List[int]:\n            equal_part = []\n            for i in range(len(array) - 1):\n                if array[i] == array[i + 1]:\n                    equal_part.append(i)\n            equal_part.append(len(array) - 1)\n            return equal_part\n\n        def binary_search(array: List[int], number: int) -> int:\n            left = 0\n            right = len(array) - 1\n            while left < right:\n                mid = (left + right) // 2\n                if array[mid] == number:\n                    return mid\n                elif array[mid] < number:\n                    left = mid + 1\n                elif array[mid] > number:\n                    right = mid - 1\n            return -1\n\n        if len(array) < 2:\n            return -1\n        equal_part = get_equal_part(array, number)\n        if len(equal_part) < 2:\n            return -1\n        for i in equal_part:\n            index = binary_search(array, number ^ array[i])\n            if index == -1:\n                return -1\n            array[index] = number\n        return count(number)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == 0\nassert solution('1 1') == -1\nassert solution('3 7') == -1"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 3 7') == 1\nassert solution('2 228\\n1 1') == 0\nassert solution('3 7\\n1 2 3') == -1\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 7\") == '1'\nassert solution(\"2 228\\n1 1\") == '0'\nassert solution(\"3 7\\n1 2 3\") == '-1'\n\"\"\"\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a\\nb\\n') == 'a\\nb\\n'\nassert solution('a\\nb\\nc\\nd') == 'a\\nb\\nc\\nd'\nassert solution('a\\nb\\nc\\nd\\ne') == 'a\\nb\\nc\\nd\\ne'\nassert solution('a\\nb\\nc\\nd\\nf\\ng\\nh') == 'a\\nb\\nc\\nd\\nf\\ng\\nh'\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 7\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 7\") == \"1\"\nassert solution(\"1 2 3 7 2 4\") == \"1\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n......\\n..*...\\n.****.\\n..*...\\n..*...\") == \"YES\"\nassert solution(\"3 5\\n..*..\\n****.\\n.*...\") == \"NO\"\nassert solution(\"7 7\\n.......\\n...*...\\n..****.\\n...*...\\n...*...\\n.......\\n.*.....\") == \"NO\"\nassert solution(\"5 10\\n..........\\n..*.......\\n.*.******.\\n..*.......\\n..........\\n\") == \"NO\"\nassert solution(\"3 7\\n.*...*.\\n***.***\\n.*...*.\\n\") == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"....\") == \"YES\"\nassert solution(\"*....\") == \"YES\"\nassert solution(\"....*\") == \"NO\"\n\nassert solution(\"....*....\") == \"NO\"\nassert solution(\"**....\") == \"NO\""
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"..*..\") == \"YES\"\nassert solution(\"......\") == \"YES\"\nassert solution(\"******\") == \"YES\"\nassert solution(\"******\") == \"NO\"\nassert solution(\"***.*.\") == \"NO\"\n\n-----Problem-----\n\nYou are given a string s.\n\nIn one operation you can replace one letter by another letter.\n\nDetermine if it is possible to obtain a palindrome using at most two operations.\n\nA palindrome is a string which is the same as its reverse.\n\nA letter is a palindrome if it is not changed when reversing it.\n\nInput\nThe first line contains a string s of length l that consists only of uppercase Latin letters.\n\nOutput\nIf it is possible to obtain a palindrome using at most two operations, print YES on a new line, otherwise, print NO.\n\nIt is guaranteed that the answer is always YES.\n\nExample\nInput\n\nOutput\n\naaa\n\naa\n\na\n\nab\n\nabc\n\nOutput\n\nYES\n\nYES\n\nNO\n\nNO\n\nNO\n\nYES\n\nYES\n\nYES\n\nNO\n\"\"\"\n\nimport string"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\\n.*...*\\n***.***\\n.*...*\") == 'NO'\nassert solution(\"5 10\\n..........\\n..*.......\\n.*.******\\n..*.......\\n..........\\n\") == 'NO'\nassert solution(\"7 10\\n..........\\n...*...*\\n..******\\n...*...*\\n....*...\\n....*...\\n\") == 'NO'\n\"\"\"\n\nimport re\nfrom collections import Counter"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n***\\n*.*\\n***\\n*.*\") == \"YES\"\nassert solution(\"3 5\\n.*.*\\n***\\n.*.*\") == \"NO\"\nassert solution(\"7 7\\n.*.*.*\\n.*.*.*\\n.*.*.*\\n.*.*.*\\n.*.*.*\") == \"NO\"\nassert solution(\"4 6\\n.*.*\\n.*.*\\n.*.*\\n*.*\\n*.*\") == \"YES\"\nassert solution(\"3 7\\n.*.*\\n.*.*\\n.*.*\") == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"..........\\n..*.......\\n.*.******.\\n..*.......\\n..........\") == \"YES\"\nassert solution(\"..........\\n..*.......\\n******.***\\n..*.......\\n..........\") == \"NO\"\nassert solution(\"..........\\n..*.......\\n******.***\\n..*.......\\n..........\") == \"NO\"\nassert solution(\"..........\\n..*.......\\n******.***\\n..*.......\\n..........\") == \"NO\"\n\n-----\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n......\\n..*...\\n.****.\\n..*...\\n..*...\") == \"YES\"\nassert solution(\"3 5\\n.*...\\n***.\\n.*...\") == \"NO\"\nassert solution(\"5 10\\n..........\\n..*.......\\n.*.******.\\n..*.......\\n..........\") == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5, 6) == 'YES'\nassert solution(3, 5) == 'NO'\nassert solution(7, 7) == 'NO'\nassert solution(5, 10) == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n......\\n..*...\\n.****.\\n..*...\\n..*...\\n\") == \"YES\"\nassert solution(\"3 5\\n..*..\\n****.\\n.*...\\n\") == \"NO\"\nassert solution(\"7 7\\n.......\\n...*...\\n..****.\\n...*...\\n...*...\\n.......\\n.*.....\\n\") == \"NO\"\nassert solution(\"5 10\\n..........\\n..*.......\\n.*.******.\\n..*.......\\n..........\\n\") == \"NO\"\nassert solution(\"3 7\\n.*...*.\\n***.***\\n.*...*.\\n\") == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n......\\n..*...\\n.****.\\n..*...\\n..*...\\n') == 'YES'\nassert solution('3 5\\n..*..\\n****.\\n.*...\\n') == 'NO'\nassert solution('7 7\\n.......\\n...*...\\n..****.\\n...*...\\n...*...\\n.......\\n.*.....\\n') == 'NO'\nassert solution('5 10\\n..........\\n..*.......\\n.*.******.\\n..*.......\\n..........\\n') == 'NO'\nassert solution('5 10\\n..........\\n..*.......\\n.*.******.\\n..*.......\\n..........\\n') == 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n\") == \"YES\"\nassert solution(\"3 3 3\\n\") == \"NO\"\nassert solution(\"3 1 2\\n\") == \"YES\"\n\"\"\"\n\nn, a, b = list(map(int, input().split()))\n\nresult = [[\"0\" for _ in range(n)] for _ in range(n)]"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1 2''') == '''YES\n001\n110'''\nassert solution('''3 3 3''') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"YES\\n001\\n001\\n110\"\nassert solution(\"3 3 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"2 1 3\") == \"NO\"\nassert solution(\"3 2 1\") == \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == 'YES\\n001\\n001\\n110'\nassert solution(\"3 3 3\") == 'NO'\nassert solution(\"4 4 1\") == 'NO'\nassert solution(\"7 4 3\") == 'NO'\nassert solution(\"1 1 1\") == 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"YES\\n001\\n001\\n110\"\n\"\"\"\n\nn, a, b = input().split()\nn, a, b = int(n), int(a), int(b)"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"YES\\n001\\n001\\n110\"\n\"\"\"\n\n\"\"\"\nGiven the number of vertexes $n$, the required number of connectivity components in it, and the required amount of the connectivity component in it's complement, find if there is a graph that satisfies these constraints on a single line.\n\n-----Input-----\n\nIn a single line, three numbers are given $n, a, b \\,(1 \\le n \\le 1000, 1 \\le a, b \\le n)$: is the number of vertexes of the graph, the required number of connectivity components in it, and the required amount of the connectivity component in it's complement. \n\n\n-----Output-----\n\nIf there is no graph that satisfies these constraints on a single line, print \"NO\" (without quotes).\n\nOtherwise, on the first line, print \"YES\"(without quotes). In each of the next $n$ lines, output $n$ digits such that $j$-th digit of $i$-th line must be $1$ if and only if there is an edge between vertices $i$ and $j$ in $G$ (and $0$ otherwise). Note that the matrix must be symmetric, and all digits on the main diagonal must be zeroes. \n\nIf there are several matrices that satisfy the conditions \u2014 output any of them.\n\n\n-----Examples-----\nInput\n3 1 2\n\nOutput\nYES\n001\n001\n110\n\nInput\n3 3 3\n\nOutput\nNO\n\"\"\"\n\nfrom itertools import product\nfrom math import ceil\n\nstdin = \"\"\"3 1 2\n\"\"\""
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 3\") == \"NO\""
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"YES\\n001\\n001\\n110\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1 10\n7 2\n1''') == '2'\nassert solution('''2 2\n2 1\n2''') == '0'\nassert solution('''2 2\n1 1\n2''') == '1'\nassert solution('''2 2\n2 2\n1''') == '1'\nassert solution('''1 1\n2''') == '0'\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10\\n7 2\\n1\\n\") == \"2\"\nassert solution(\"1 10\\n7 2\\n2\\n\") == \"0\"\nassert solution(\"2 2\\n2 1\\n2\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 10\\n7 2\\n1\\n') == '2'\nassert solution('2 2\\n2 1\\n2\\n') == '0'\n\"\"\""
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n7 2\\n1\\n\") == \"2\"\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n1 10\n7 2\n1\n''') == '2'\n\nassert solution('''\n2 2\n2 1\n2\n''') == '0'\n\nassert solution('''\n1 10\n7 2\n3\n''') == '3'\n\nassert solution('''\n1 10\n7 2\n2\n''') == '0'\n\nassert solution('''\n2 10\n7 2\n3\n''') == '1'"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1\\n\") == \"2\"\nassert solution(\"7 2\\n7 2\\n1\\n\") == \"1\"\nassert solution(\"7 2\\n7 2\\n1\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 1\\n1') == '0'\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 10\\n7 2\\n1\\n\") == \"2\"\nassert solution(\"2 2\\n2 1\\n2\\n\") == \"0\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10 2 1\") == \"2\"\n\"\"\"\nimport itertools\nimport sys\nfrom collections import Counter\nfrom itertools import combinations\n\nlines = sys.stdin.readlines()\n\nc, d, n, m, k = map(int, lines[0].split())\npairs = []\nfor line in lines[1:]:\n    pairs.append(map(int, line.split()))\n\nprint(c, d, n, m, k)\nprint(pairs)\n\npairs.sort()\n\ncombinations_pairs = list(combinations(pairs, m))\npairs_in_combinations = list(itertools.chain.from_iterable(combinations_pairs))"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 10\\n7 2\\n1') == '2'\n\"\"\"\n\nc, d, n, m, k = list(map(int, input().split(' ')))"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(input()))"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABCDEFGHIJKLM') == 'YXWVUTGHIJKLM'\nassert solution('ABCDEFGHIJKLMNOPQRSGTUVWXYZ') == 'ZABCDEFSRQPON'\nassert solution('BUVTYZFQSNRIWOXXGJLKACPEMDH') == 'Impossible'\n\n\"\"\"\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCDEFGHIJKLM\") == \"YXWVUTGHIJKLM\"\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABCDEFGHIJKLM') == 'YXWVUTGHIJKLM'\nassert solution('BUVTYZFQSNRIWOXXGJLKACPEMDH') == 'Impossible'\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSGTUVWXYZ\") == \"YXWVUTGHIJKLM\"\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") in [\"YXWVUTGHIJKLM\", \"ZABCDEFSRQPON\"]\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABCDEFGHIJKLMNOPQRSGTUVWXYZ') == 'YXWVUTGHIJKLM'\nassert solution('ABCDEFGHIJKLMNOPQRSGTUVWXYZ')!= 'YXWVUTGHIJKLMNOPQRSGTUVWXYZ'\nassert solution('BUVTYZFQSNRIWOXXGJLKACPEMDH') == 'Impossible'\nassert solution('BUVTYZFQSNRIWOXXGJLKACPEMDH')!= 'Impossible'\nassert solution('ABBCDEFGHAJKLMPQRSUVWXZ') == 'Impossible'\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCDEFGHIJKLM\") == \"YXWVUTGHIJKLM\"\nassert solution(\"SIXTYONE\") == \"IMPOSSIBLE\"\nassert solution(\"ABCDBCDABCDBCDABCD\") == \"IMPOSSIBLE\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ZABCDEFGHIJKLM\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Impossible'\nassert solution('ABCDEFGHIJKLM') == 'YXWVUTGHIJKLM'\nassert solution('KXWIHIJK') == 'ABCDEFSRQPON'\n\"\"\""
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\") == \">\"\nassert solution(\"10 3\") == \"<\"\nassert solution(\"6 6\") == \"=\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 8') == '>'\nassert solution('10 3') == '<'\nassert solution('6 6') == '='\n\"\"\""
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3') == '>'\nassert solution('10 3') == '<'\nassert solution('6 6') == '='"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 8') == '>'\nassert solution('10 3') == '<'\nassert solution('6 6') == '='\n\"\"\"\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\") == '>'\nassert solution(\"10 3\") == '<'\nassert solution(\"6 6\") == '='\n\n\"\"\""
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 8') == '>'\nassert solution('10 3') == '<'\nassert solution('6 6') == '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\") == \">\", \"TEST FAILED\"\nassert solution(\"10 3\") == \"<\", \"TEST FAILED\"\nassert solution(\"6 6\") == \"=\", \"TEST FAILED\"\n\nprint(\"TESTS PASSED\")\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\">\") == \">\"\nassert solution(\"<\") == \"<\"\nassert solution(\"=\") == \"=\"\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\") == \">\"\nassert solution(\"10 3\") == \"<\"\nassert solution(\"6 6\") == \"=\"\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 8') == '>'\nassert solution('10 3') == '<'\nassert solution('6 6') == '='\nassert solution('1 9') == '>'\nassert solution('3 7') == '='\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"1 2\") == \"5\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == '3'\nassert solution('1 2') == '5'\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == 3\nassert solution(\"2 1\") == 2\nassert solution(\"5 1\") == 5\nassert solution(\"2 2\") == 5\nassert solution(\"5 2\") == 10\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '3'\n\"\"\"\n\nimport sys\n\na, b = [int(x) for x in sys.stdin.readline().split()]\n\nres = 0\n\nfor i in range(1, b+1):\n    if a*i*(i+1) <= b:\n        res += 1\n\nprint(res)\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 1\") == \"2\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"5\"\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"2 1\") == \"2\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '3'\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"2 1\") == \"2\"\n\"\"\"\nimport math"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\nassert solution(\"1 1 1 1 1\") == \"0\"\n\"\"\"\n\nimport unittest\nfrom typing import List\nfrom unittest.mock import patch\nimport functools\nfrom collections import Counter\n\nclass Solution:\n    def solve(self, input_str):\n        # Input\n        #   str of 5 ints (1 <= ints[i] <= 100)\n\n        # Solve the problem\n        #   1. get the list of ints\n        #   2. sort the list in ascending order\n        #   3. iterate through the sorted list\n        #       a. if the value is the same as the next, go to the next int in the list\n        #       b. if the value is not the same as the next, throw away all the same numbers from the list\n        #       c. if the value is the same as the previous, throw away all the same numbers from the list\n        #       d. keep track of the number of discarded cards\n        #   4. return the sum of the remaining cards\n        #\n        # Return the solution\n        #   1. if no cards are discarded, return the sum of all the cards\n        #   2. if a single card is discarded, return 0\n        #   3. if two or three cards are discarded, return the sum of the remaining cards\n\n        int_list = list(map(int, input_str.split(\" \")))\n        sorted_int_list = sorted(int_list)\n\n        sorted_int_list_diff = []\n        for index in range(0, len(sorted_int_list)):\n            if index > 0 and sorted_int_list[index] == sorted_int_list[index - 1]:\n                continue\n            sorted_int_list_diff.append(sorted_int_list[index])\n\n        if len(sorted_int_list_diff) == 0:\n            return sum(sorted_int_list)\n\n        if len(sorted_int_list_diff) == 1:\n            return 0\n\n        discarded = 0\n        same_card_count = Counter(sorted_int_list_diff)\n        for index in range(1, len(sorted_int_list_diff)):\n            if same_card_count[sorted_int_list_diff[index]] >= 2:\n                discarded += same_card_count[sorted_int_list_diff[index]]\n                sorted_int_list_diff.pop(index)\n                same_card_count[sorted_int_list_diff[index]] -= 2\n                continue\n            if same_card_count[sorted_int_list_diff[index]] == 3:\n                discarded += same_card_count[sorted_int_list_diff[index]]\n                sorted_int_list_diff.pop(index)\n                same_card_count[sorted_int_list_diff[index]] -= 3\n                continue\n            same_card_count[sorted_int_list_diff[index]] -= 1\n        return discarded + sum(sorted_int_list_diff)"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\""
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\n\n\"\"\"\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3 7 3 20') == '26'\nassert solution('7 9 3 1 8') == '28'\nassert solution('10 10 10 10 10') == '20'\nassert solution('7 7 7 7 7') == '0'\nassert solution('3 3 3 3 3') == '0'\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 7 3 20') == '26'\nassert solution('7 9 3 1 8') == '28'\nassert solution('10 10 10 10 10') == '20'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 7 3 20\") == '26'\nassert solution(\"7 9 3 1 8\") == '28'\nassert solution(\"10 10 10 10 10\") == '20'\nassert solution(\"1 1 1 1 1\") == '0'\n\"\"\""
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 7 3 20\") == \"26\"\nassert solution(\"7 9 3 1 8\") == \"28\"\nassert solution(\"10 10 10 10 10\") == \"20\"\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n1 7 12\\n\") == \"7\"\nassert solution(\"2 0\\n11 -10\\n\") == \"10\"\nassert solution(\"5 0\\n0 0 1000 0 0\\n\") == \"0\"\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n1 7 12\") == \"7\"\nassert solution(\"2 0\\n11 -10\") == \"10\"\nassert solution(\"5 0\\n0 0 1000 0 0\") == \"0\"\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10\\n1 7 12\\n') == '7'\nassert solution('2 0\\n11 -10\\n') == '10'\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 10\\n1 7 12') == '7'\nassert solution('2 0\\n11 -10') == '10'\nassert solution('5 0\\n0 0 1000 0 0') == '0'"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\") == \"7\"\nassert solution(\"2 0\") == \"10\"\nassert solution(\"5 0\") == \"0\"\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n1 7 12\\n\") == \"7\"\n\"\"\"\n\n\nfrom itertools import combinations"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3, 10) == 7\nassert solution(2, 0) == 10\nassert solution(5, 0) == 0\nassert solution('3 10', '1 7 12') == 7\nassert solution('2 0', '11 -10') == 10\n\n\"\"\"\n\nfrom collections import namedtuple\nfrom functools import reduce\nfrom operator import mul\n\nCoords = namedtuple('Coords', 'x1 x2 x3')\nPoint = namedtuple('Point', 'x1 x2')\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == \"7\"\nassert solution(\"2 0\") == \"10\"\nassert solution(\"5 0\") == \"0\"\nassert solution(\"6 0\") == \"6\"\n\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\\n1 7 12\") == \"7\"\nassert solution(\"2 0\\n11 -10\") == \"10\"\nassert solution(\"5 0\\n0 0 1000 0 0\") == \"0\"\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10\") == \"10\"\nassert solution(\"10 -10\") == \"0\"\nassert solution(\"3 10\") == \"7\"\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('110') == '10'\nassert solution('4') == '-1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"110\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"-1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"110\") == \"10\"\n\nprint(solution(\"110\"))\n\"\"\"\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"-1\"\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('110') == '10'\nassert solution('4') == '-1'\n\"\"\"\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"-1\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"110\") == \"10\"\nassert solution(\"4\") == \"-1\""
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('05:50') == '00:06'\nassert solution('00:00') == '23:59'\nassert solution('00:01') == '00:01'\nassert solution('05:44') == '00:06'\nassert solution('00:00') == '23:59'\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('05:50') == '00:06'\nassert solution('00:00') == '23:00'\nassert solution('00:01') == '00:01'\nassert solution('05:44') == '00:06'\nassert solution('01:00') == '23:00'\n\n\"\"\""
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"05:44\") == \"00:06\"\nassert solution(\"00:01\") == \"23:00\"\n\"\"\"\nimport datetime"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"05:50\") == \"0:06\"\nassert solution(\"05:44\") == \"0:06\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"00:01\") == \"23:00\"\nassert solution(\"00:01\") == \"23:00\"\n\"\"\"\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"00:01\") == \"00:01\"\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"00:01\") == \"00:01\"\n\"\"\"\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"00:60\") == \"00:01\"\nassert solution(\"01:00\") == \"23:00\"\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"05:44\") == \"00:06\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"00:01\") == \"23:00\"\nassert solution(\"00:01\") == \"23:00\"\n\n\"\"\"\n\n\nimport datetime\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"05:44\") == \"00:06\"\nassert solution(\"00:00\") == \"23:00\"\nassert solution(\"00:01\") == \"00:01\"\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6 1 6 6 0\") == \"2\"\nassert solution(\"4\\n6 1 6 6 0\") == \"2\"\nassert solution(\"5\\n6 1 6 6 0\") == \"2\"\nassert solution(\"6\\n6 1 6 6 0\") == \"3\"\nassert solution(\"7\\n6 1 6 6 0\") == \"2\"\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_data) == result\n\n'''\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n6 1 6 6 0\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a_1, a_2,..., a_n) == answer\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 3 1 1\") == \"4\"\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n6 1 6 6 0\") == \"2\"\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n6 1 6 6 0\") == 2\n\"\"\"\n\n\nfrom typing import List, Tuple"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"5\\n1 1 2 2 3\"\n) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3 2\") == \"2\"\nassert solution(\"4 1 3 2 1\") == \"4\"\nassert solution(\"2 3 4 5 6\") == \"4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n6 1 6 6 0') == '2'\n\"\"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 0\") == \"3\"\nassert solution(\"3 2 1\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 2 1''') == '4'\nassert solution('''3 2 1''') == '4'\nassert solution('''3 2 1''') == '4'\nassert solution('''3 2 1''') == '4'\nassert solution('''3 2 1''') == '4'\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 3 0\n''') == '3'\n\nassert solution('''3 2 1\n''') == '4'\n\nassert solution('''2 2 1\n''') == '2'\n\nassert solution('''1 2 1\n''') == '1'\n\nassert solution('''1 1 2\n''') == '0'"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\") == \"4\"\nassert solution(\"3 3 0\") == \"3\"\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 0\") == \"3\"\nassert solution(\"3 2 1\") == \"4\"\n\n\n'''\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 0\") == \"3\"\nassert solution(\"3 2 1\") == \"4\"\nassert solution(\"2 2 1\") == \"1\"\nassert solution(\"2 2 0\") == \"1\"\nassert solution(\"3 2 2\") == \"0\"\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1\") == \"4\"\nassert solution(\"3 2 3\") == \"0\"\n\n-----Problem-----\nNathan loves painting. He doesn't want to mess up all his nice paintings, so he decided to paint the same row of bricks.\n\nChouti, who is also a budding programmer, is the guide of Nathan. At the beginning of the year, he wants to paint the first row of the bricks, and there are $n$ bricks lined in a row. At the beginning of each day, he wants to paint one more brick, and the color of the new brick should be the same as the color of the one to the left of it.\n\nChouti gave his list of buckets for painting, and you must help him to paint the first row of the bricks. Each bucket has a different color.\n\nGiven the list of buckets, print the number of ways to paint the first row of the bricks. You should consider that the first brick won't need any colors.\n\n\n-----Input-----\n\nThe first and only line of input contains three integers $n$, $m$ and $k$ \u2014 the number of bricks, the number of buckets, and the number of bricks, such that their color differs from the color of the brick to the left of it, respectively.\n\n\n-----Output-----\n\nPrint one integer \u2014 the number of ways to paint the first row of the bricks.\n\n\n-----Examples-----\nInput\n4 3 1\n\nOutput\n1\n\nInput\n4 3 3\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first example, the color of the leftmost brick can be used to paint the first row.\n\nIn the second example, there is no way to paint the first row of the bricks, so the answer is 0.\n\"\"\"\nimport math\n\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, n: int, m: int, k: int) -> int:\n        # n, m, k = [int(i) for i in input().split()]\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            dp[i][0] = 1\n            for j in range(1, m + 1):\n                if i - 1 >= 0:\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j - 1]) % (10 ** 9 + 7)\n                if j - 1 >= 0:\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j]) % (10 ** 9 + 7)\n                dp[i][j] = (dp[i][j] + dp[i][j - 1]) % (10 ** 9 + 7)\n        return dp[n][k + 1]\n\n    def solution_v1(self, n: int, m: int, k: int) -> int:\n        # n, m, k = [int(i) for i in input().split()]\n        dp = [0] * (m + 1)\n        dp[0] = 1\n        for i in range(n):\n            new_dp = [0] * (m + 1)\n            for j in range(m + 1):\n                new_dp[j] = (dp[j] + dp[j - 1]) % (10 ** 9 + 7)\n            dp = new_dp\n        return dp[k + 1]\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 0') == 3\nassert solution('3 2 1') == 4\n\"\"\""
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"3 3 0\"\n) == \"3\"\nassert solution(\n\"3 2 1\"\n) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == ''\nassert solution('1\\n2\\n2') == '0\\n0\\n0'\nassert solution('1\\n2\\n3') == '1\\n1\\n1'\nassert solution('2\\n1\\n1') == '0\\n0\\n0'\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"114114\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"441231\") == \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"141414\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"14\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('114114') == 'YES'\nassert solution('1111') == 'YES'\nassert solution('441231') == 'NO'\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"114114\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"441231\") == \"NO\""
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('114114') == 'YES'\nassert solution('1111') == 'YES'\nassert solution('441231') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"114114\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"441231\") == \"NO\"\n\n\nprint('Successfully passed!')\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"114114\") == \"YES\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"441231\") == \"NO\"\n\n\"\"\"\n\nfrom typing import Callable"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('114114') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(0) == \"YES\"\nassert solution(114114) == \"YES\"\nassert solution(1111) == \"YES\"\nassert solution(441231) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('114114') == 'YES'\nassert solution('1111') == 'YES'\nassert solution('441231') == 'NO'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 1 3 2 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == 2\n\nprint(solution(str(input())))\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 1 3 2 2\") == 2\nassert solution(\"5 5 2 3 1 1\") == \"Poor Inna and pony!\"\n\n'''"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 1 3 2 2') == \"2\"\nassert solution('5 5 2 3 1 1') == \"Poor Inna and pony!\"\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 1 3 2 2') == '2'\nassert solution('5 5 2 3 1 1') == 'Poor Inna and pony!'\nassert solution('5 5 2 3 1 1') == 'Poor Inna and pony!'\nassert solution('5 5 2 3 1 1') == 'Poor Inna and pony!'\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 1 3 2 2\") == 2\nassert solution(\"5 5 2 3 1 1\") == \"Poor Inna and pony!\"\n\"\"\""
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 1 3 2 2') == '2'\nassert solution('5 5 2 3 1 1') == 'Poor Inna and pony!'\n\n\"\"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 1 3 2 2') == 2\n\"\"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 1 3 2 2\") == \"2\"\nassert solution(\"5 5 2 3 1 1\") == \"Poor Inna and pony!\""
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7 1 3 2 2') == 2\n\"\"\""
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bacabcab\") == 4\nassert solution(\"bcda\") == 3\nassert solution(\"abbbbb\") == 5\nassert solution(\"bcdd\") == 0\n\"\"\""
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bacabcab\") == 4\nassert solution(\"bcda\") == 3\nassert solution(\"abbbbb\") == 5\nassert solution(\"abcb\") == 3\nassert solution(\"abbccbb\") == 5\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bacabcab') == 4\nassert solution('bcda') == 3\nassert solution('abbbbb') == 5\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bacabcab') == 4\nassert solution('bcda') == 3\nassert solution('abbbbb') == 5\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('bcda') == '3'\nassert solution('abbbbb') == '5'\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bacabcab\") == 4\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bacabcab') == 4\nassert solution('bcda') == 3\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bacabcab\") == 4\nassert solution(\"bcda\") == 3\n\"\"\""
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bacabcab\") == 4\nassert solution(\"bcda\") == 3\nassert solution(\"abbbbb\") == 5\n\n\n\n---\n\nThe first solution is to check the positions of each character. This should be O(N) in time and O(1) in space. Then we iterate through each character and for each character we check the two positions before and after it. This should be O(N^2) in time, and O(1) in space. \n\nWe could do the same thing with a hash map. We could store the index of each character in a hash map. Then we could iterate through the string and for each character, we can check the index of the character to the left and right of the character. This should be O(N) in time and O(1) in space."
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('bacabcab') == '4'\nassert solution('bcda') == '3'\nassert solution('abbbbb') == '5'\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2') == '1\\n1\\n2'\nassert solution('10 3') == '2\\n1\\n2'\nassert solution('10 5') == '3\\n1\\n2'\nassert solution('10 10') == '3\\n2\\n1'\nassert solution('10 100') == '3\\n1\\n2'\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 50 100 500 1000 5000\", \"8\", \"4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\") == \"6\\n20\\n19\\n20\\n-1\\n3\\n-1\"\nprint(\"Passed\")\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950') == '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1'\nprint(solution(stdin))\n\nimport sys; x = [0] * 5000; p = 0; i = 0\nwith open(sys.argv[1], 'r') as f:\n    lines = f.read().splitlines()\n    n, k = int(lines[0].split()[0]), int(lines[0].split()[1])\n    denominations = [int(i) for i in lines[1].split()]\n    x[0] = 1; p += denominations[0]; i = 0\n    for i in range(1, len(denominations)):\n        if denominations[i] > p:\n            x[i] = x[i - 1] + 1\n            p += denominations[i] - (p - denominations[i - 1])\n        else:\n            x[i] = x[i - 1]\n            p -= denominations[i - 1]\nprint(*x, sep='\\n')"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 2 3 4\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n') == '3\\n2\\n2\\n-1\\n4\\n-1\\n-1\\n'\nassert solution('4 2\\n1 2 3 4\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n') == '3\\n2\\n2\\n-1\\n4\\n-1\\n-1\\n'\n\nsolution('5 2\\n1 2 3 4 5\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n')\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\\n\") == \"6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1\"\n\"\"\"\n\nimport bisect"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 50 100 500 1000 5000\") == '6'\nassert solution(\"1 2 3 5 8\") == '20'\nassert solution(\"1 2 3 5 8\") == '20'\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\") == '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1'\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\") == '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1'\nassert solution(\"5 2\\n1 2 3 5 8\\n8\\n1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\") == '1\\n1\\n1\\n2\\n2\\n2\\n2\\n-1\\n3'\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6 20\n10 50 100 500 1000 5000\n8\n4200\n100000\n95000\n96000\n99000\n10100\n2015\n9950''') == '''6\n20\n19\n20\n-1\n3\n-1\n-1'''\n\nassert solution('''5 2\n1 2 3 5 8\n8\n1\n3\n5\n7\n9\n11\n13\n15\n''') == '''1\n1\n1\n2\n2\n2\n2\n-1\n-1'''\n\nprint('Success')"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2 5\\n1 3\\n\") == \"2\\n1\\n1\\n2\\n1\\n\"\nassert solution(\"1 2\\n100 2 5\\n1\\n2\\n\") == \"2\\n2\\n-1\\n-1\\n\"\nassert solution(\"2 2\\n1 2 5\\n1\\n1\\n\") == \"2\\n2\\n2\\n2\\n2\\n\"\nassert solution(\"5 20\\n1 2 3 5 8\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\\n\") == \"6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1\\n\"\nprint('Success')"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 4\\n3 4\\n1 1\\n') == '8'\nassert solution('5 4 0\\n1 2\\n3 1\\n') == '7'"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 4\\n3 4\\n1 1\\n\") == \"8\"\nassert solution(\"5 4 0\\n1 2\\n3 1\\n\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 4\") == \"8\"\nassert solution(\"5 4 0\") == \"7\"\n\"\"\"\n\ns, x_1, x_2 = [int(i) for i in stdin.readline().split()]\nt_1, t_2 = [int(i) for i in stdin.readline().split()]\np, d = [int(i) for i in stdin.readline().split()]\n\ndelta = abs(x_1 - x_2)\n\nt = t_1 + t_2\nt_1 = t_2\nt_2 = t - t_1\nt_1 = t_2\nt_2 = t - t_1"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 4\") == \"8\"\nassert solution(\"5 4 0\") == \"7\"\n\"\"\"\n\ns, x_1, x_2 = list(map(int, stdin.split()))\nt_1, t_2 = list(map(int, stdin.split()))\np, d = list(map(int, stdin.split()))"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 4\") == \"8\"\nassert solution(\"5 4 0\") == \"7\"\n\n\n\n\n'''\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 4\\n3 4\\n1 1\\n\") == '8'\nassert solution(\"5 4 0\\n1 2\\n3 1\\n\") == '7'\n\"\"\"\n\ns, x_1, x_2 = map(int, input().split())\nt_1, t_2 = map(int, input().split())\np, d = map(int, input().split())\n\nt1 = (x_2 - x_1) / (s - x_1)\nt2 = (p - x_1) / (s - x_1)\n\ntime = t1 * t_1 + t2 * t_2"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 4\") == \"8\"\nassert solution(\"5 4 0\") == \"7\""
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 4\\n3 4\\n1 1\\n\") == \"8\"\nassert solution(\"5 4 0\\n1 2\\n3 1\\n\") == \"7\""
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 4\\n3 4\\n1 1\\n\") == \"8\"\nassert solution(\"5 4 0\\n1 2\\n3 1\\n\") == \"7\"\n\"\"\"\nimport time\n\ns, x_1, x_2 = map(int, input().split())\nt_1, t_2 = map(int, input().split())\np, d = map(int, input().split())\n\nstart_time = time.time()\n\ns -= 1\np -= 1"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 0\\n1 2\\n3 1\") == \"7\"\nassert solution(\"4 2 4\\n3 4\\n1 1\\n\") == \"8\"\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 13\") == \"0\"\nassert solution(\"10 5\") == \"2\"\nassert solution(\"6 12\") == \"4\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"5 10\") == \"0\"\n\n'''"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\\n\") == \"7\"\nassert solution(\"2 13\\n2 4 6 8 10\\n\") == \"0\"\nassert solution(\"6 12\\n1 2 3 4 5 6\\n\") == \"4\"\nassert solution(\"5 13\\n1 2 3 4 5 6\\n\") == \"0\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 13') == '0'\n\nassert solution('6 12') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 12\n8 17\n9 2\n10 12\n11 1\n12 6\n13 2\n14 10\n15 16\n16 4\n17 11''') == '4'\nassert solution('''6 12\n6 11\n6 10\n6 9\n6 8\n6 7\n6 6''') == '5'\nassert solution('''5 13\n5 12\n5 11\n5 10\n5 9\n5 8\n5 7\n5 6''') == '0'\n\nSolution:\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\n\nassert solution('10 5') == 2\n\nassert solution('6 12') == 4\n\nprint(solution('5 13'))\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 9') == '1'\nassert solution('5 10') == '0'\nassert solution('3 5') == '0'\nassert solution('4 15') == '1'\nassert solution('5 15') == '2'\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 5\") == 2\nassert solution(\"6 12\") == 4\nassert solution(\"5 13\") == 0\nassert solution(\"100 100\") == 0\nassert solution(\"100 200\") == 0\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 5\\n5 12\") == \"2\"\nassert solution(\"6 12\\n12 16\") == \"4\"\nassert solution(\"10 10\\n10 10\") == \"0\"\nassert solution(\"10 1000\\n1000 1000\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 5\") == \"2\"\nassert solution(\"6 12\") == \"4\"\nassert solution(\"5 13\") == \"0\"\n\"\"\"\n\n\nimport sys\n\nn, x = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 5\") == \"2\"\nassert solution(\"6 12\") == \"4\"\nassert solution(\"5 13\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == 'java'\nassert solution('6 6') == 'python'\nassert solution('5 2') == 'phphp'\n\"\"\"\nimport sys"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"java\"\nassert solution(\"6 6\") == \"python\"\nassert solution(\"5 2\") == \"phphp\"\n\nprint('Success')"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2') == 'abc'\nassert solution('4 3') == 'abacd'\nassert solution('5 2') == 'abdfh'\n\"\"\"\n\nimport string\n\nn, k = map(int, input().split())\nchars = list(string.ascii_lowercase)\n\nimport random\nwhile True:\n    password = [random.choice(chars) for _ in range(n)]\n    if (len(set(password)) == k) and (len(set(password[i-1:i+1] for i in range(1, len(password)))) == len(password)-1):\n        print(''.join(password))\n        break"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == 'java'\nassert solution('6 6') == 'python'\nassert solution('5 2') == 'phphp'\n\"\"\""
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == 'java'\nassert solution('6 6') == 'python'\nassert solution('5 2') == 'phphp'"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == 'phphp'\n\"\"\"\n\n\"\"\"\nn, k = map(int, stdin.readline().split())\n\nans = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\nwhile n > 0:\n    curr = []\n    res = []\n    for i in ans:\n        curr.append(i)\n        if len(curr) == n:\n            res.append(curr)\n            break\n    ans = ans[len(curr):]\n    n -= len(curr)\n    k -= 1\n\nprint(res[k % len(res)])\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"java\"\nassert solution(\"6 6\") == \"python\"\nassert solution(\"5 2\") == \"phphp\"\n\"\"\"\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"java\"\nassert solution(\"6 6\") == \"python\"\nassert solution(\"5 2\") == \"phphp\"\n\"\"\"\n\nfrom itertools import zip_longest\nfrom typing import List\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == 'java'\nassert solution('6 6') == 'python'\nassert solution('5 2') == 'phphp'\n\"\"\"\nimport itertools"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == 'java'\nassert solution('6 6') == 'python'\nassert solution('5 2') == 'phphp'\nassert solution('5 1') == 'aaa'\nassert solution('7 5') == 'aaaaa'\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nRL\\n2 4 6 10\") == '1'\nassert solution(\"3\\nLLR\\n40 50 60\") == '-1'\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\") == \"1\\n\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\\n\"\nprint('The local tests are done.')\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\") == \"1\"\n\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\"\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nRL\\n2 4 6 10\") == \"1\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\"\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nRL\\n2 4 6 10\") == \"1\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\"\n\"\"\"\n\nimport itertools\n\nn = int(input())\narrow = input()\nx = [int(i) for i in input().split()]\n\nx = [i for i in x if i % 2 == 0]\n\nfor i, j in itertools.combinations(x, 2):\n    if arrow[i] == arrow[j]:\n        print(i)\n        break\nelse:\n    print(-1)\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\") == \"1\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\"\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nRLRL\\n2 4 6 10') == '1'\nassert solution('3\\nLLR\\n40 50 60') == '-1'\n\"\"\"\nfrom typing import List, Tuple, Set"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\") == '1'\nassert solution(\"3\\nLLR\\n40 50 60\") == '-1'\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nLLR\\n40 50 60\\n\") == '1\\n'\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nRLRL\\n2 4 6 10\") == \"1\"\nassert solution(\"3\\nLLR\\n40 50 60\") == \"-1\"\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\\n1 2\\n2 1\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\\n1 2\\n2 1\") == \"4\"\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"56\"\nassert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\") == \"0\"\n\"\"\"\n\nfrom sys import stdin\nimport math\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"56\"\nassert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\") == \"0\"\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"56\"\n\"\"\"\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"4 10 9\") == \"56\"\nassert solution(\"3 10 10\") == \"0\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 2\\n1 2\\n2 1') == '4'\n\nassert solution('4 10 9\\n2 3\\n1 1\\n5 10\\n9 11') == '56'\n\nassert solution('3 10 10\\n6 6\\n7 7\\n20 5') == '0'\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10 9\\n2 3\\n1 1\\n5 10\\n9 11') == '56'\nassert solution('3 10 10\\n6 6\\n7 7\\n20 5') == '0'\nassert solution('4 10 10\\n6 6\\n7 7\\n20 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\\n1 2\\n2 1\") == \"4\"\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"56\"\nassert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"56\"\nassert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\") == \"0\"\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"4\"\nassert solution(\"2 2 2\\n1 2\\n2 1\") == \"4\"\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"4\"\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\\n1 2\\n2 1\") == '4'\n\"\"\"\nfrom collections import namedtuple\nfrom typing import List\n\n\nRectangle = namedtuple(\"Rectangle\", \"x y\")\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\\n1 2\\n2 1\") == \"4\"\nassert solution(\"4 10 9\\n2 3\\n1 1\\n5 10\\n9 11\") == \"56\"\nassert solution(\"3 10 10\\n6 6\\n7 7\\n20 5\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2\") == '1 1'\nassert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2\") == '0 3'\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n2 3\") == \"1 1\"\nassert solution(\"0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n2 3\") == \"0 3\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n\") == \"1 1\"\nassert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n\") == \"0 3\"\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"1 1\"\n\"\"\"\n\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"1 1\"\nassert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"0 3\"\nassert solution(\"2\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"3 1\"\nassert solution(\"2\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"0 3\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n2 0\\n2 1\\n2 2\\n2 3') == '1 1'\nassert solution('2\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n2 0\\n2 1\\n2 2\\n2 3') == '0 3'\n\n\nsolution('3\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n1 3\\n2 0\\n2 1\\n2 2\\n2 3\\n3 0\\n3 2\\n3 3') == '0 1'\nsolution('3\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n1 3\\n2 0\\n2 1\\n2 2\\n2 3\\n3 0\\n3 2\\n3 3') == '0 2'\n\n\nsolution('4\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n1 3\\n2 0\\n2 1\\n2 2\\n2 3\\n3 0\\n3 2\\n3 3\\n3 4') == '0 1'\nsolution('4\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n1 3\\n2 0\\n2 1\\n2 2\\n2 3\\n3 0\\n3 2\\n3 3\\n3 4') == '0 2'\n\n\n\n-----Problem-----\n\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 n \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 n+nn+nnn+...+nnnnnnn.\n\n\n-----Input-----\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n \\, (1 \\le n \\le 25)n (1 \\le n \\le 25)n (1 \\le n \\le 25)n (1 \\le n \\le 25).\n\n\n-----Output-----\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0437\u0430 \u0447\u0438\u0441\u043b\u043e\u043c nn \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 n+nn+nnn+...+nnnnnnn.\n\n\n-----Examples-----\nInput\n1\n3\n\nOutput\n36\n\n\nInput\n2\n3\n\nOutput\n27\n\n\n-----Note-----\n\n\u0412 \u0432\u0435\u0440\u0441\u0438\u0438 \u0441\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0451\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f\n\"\"\"\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"1 1\"\nassert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"0 3\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"1 1\"\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n2 0\\n2 2\\n\") == \"1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"1 1\"\n\"\"\"\n\nfrom math import sqrt\nfrom typing import List\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('1000000000') == '387420489'\n\n\"\"\""
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(390) == \"216\"\nassert solution(7) == \"7\"\nassert solution(1000000000) == \"387420489\"\n\"\"\"\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('1000000000') == '387420489'\nassert solution('1') == '1'\nassert solution('0') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"390\") == \"216\"\nassert solution(\"7\") == \"7\"\nassert solution(\"1000000000\") == \"387420489\""
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('1000000000') == '387420489'\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"390\") == \"216\"\nassert solution(\"7\") == \"7\"\nassert solution(\"1000000000\") == \"387420489\""
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('390') == '216'\nassert solution('7') == '7'\nassert solution('1000000000') == '387420489'\nassert solution('0') == '0'\nassert solution('99') == '99'\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"390\") == \"216\"\nassert solution(\"7\") == \"7\"\nassert solution(\"1000000000\") == \"387420489\"\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '8'\nassert solution('8') == '9'\nassert solution('387420489') == '999999999'\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"390\") == \"216\"\nassert solution(\"7\") == \"7\"\nassert solution(\"1000000000\") == \"387420489\""
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 1 5 1') == '5'\nassert solution('5\\n2 2 3 2 2') == '5'\n\"\"\""
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 1 5 1\") == \"5\"\nassert solution(\"5 2 3 2 2\") == \"5\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 1 1 5 1\\n') == '5'\nassert solution('5\\n2 2 3 2 2\\n') == '5'\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 1 5 1\") == \"5\"\nassert solution(\"5\\n2 2 3 2 2\") == \"5\"\n\"\"\"\n\nimport sys\n\n\"\"\"\n[x] max[k]\n[x] min[k]\n\"\"\"\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 1 5 1\") == \"5\"\nassert solution(\"5\\n2 2 3 2 2\") == \"5\""
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"5\\n1 1 1 5 1\"\n) == \"5\"\nassert solution(\n    \"5\\n2 2 3 2 2\"\n) == \"5\"\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 1 5 1\") == \"5\"\nassert solution(\"5\\n2 2 3 2 2\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 1 5 1\") == \"5\"\nassert solution(\"5\\n2 2 3 2 2\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3 4\") == '5'\nassert solution(\"5\\n2 2 3 2 2\") == '5'\nassert solution(\"5\\n2 2 3 2 1\") == '4'\nassert solution(\"5\\n1 1 1 5 1\") == '5'\nassert solution(\"5\\n1 1 1 1 5\") == '4'\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 1 5 1\") == '5'\nassert solution(\"5\\n2 2 3 2 2\") == '5'"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aabb') == 2\nassert solution('aabcaa') == 1\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabb\") == 2\nassert solution(\"aabcaa\") == 1\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabb\") == 2\nassert solution(\"aabcaa\") == 1\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabb\") == 2\nassert solution(\"aabcaa\") == 1\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaabbbccc\") == 3\nassert solution(\"aabbccddeeff\") == 6\n\"\"\"\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabb\") == 2\nassert solution(\"aabcaa\") == 1\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabb\") == 2\nassert solution(\"aabcaa\") == 1\n\n\"\"\""
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabb\") == 2\nassert solution(\"aabcaa\") == 1\n\"\"\""
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaa') == 0\nassert solution('abbb') == 1\nassert solution('aaabbbccc') == 3\n\"\"\"\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabb') == '2'\nassert solution('aabcaa') == '1'"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n5\n1 3 2 3 4\n    \"\"\"\n) == '1'\n\nassert solution(\n    \"\"\"\n4\n1 1 1 1\n    \"\"\"\n) == '4'\n\nassert solution(\n    \"\"\"\n6\n1 3 3 1 3 2\n    \"\"\"\n) == '1'\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"4\n1 1 1 1\n\"\"\"\n) == '4'\n\nassert solution(\n\"\"\"5\n1 3 2 3 4\n\"\"\"\n) == '1'\n\nassert solution(\n\"\"\"6\n1 3 3 1 3 2\n\"\"\"\n) == '1'\n\n\"\"\"\n###\n\"\"\"\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 1 1') == '4'\nassert solution('5\\n1 3 2 3 4') == '1'\nassert solution('6\\n1 3 3 1 3 2') == '1'\n\n\"\"\"\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1 1 1') == '4'\nassert solution('5\\n1 3 2 3 4') == '2'\nassert solution('6\\n1 3 3 1 3 2') == '1'\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"5\\n1 3 2 3 4\") == \"2\"\nassert solution(\"6\\n1 3 3 1 3 2\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('5\\n1 3 2 3 4') == '1'\nassert solution('6\\n1 3 3 1 3 2') == '1'\nassert solution('3\\n1 3 2') == '0'\n\nprint('All tests passed.')\n\n\"\"\""
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 1 1') == '4'\nassert solution('5\\n1 3 2 3 4') == '2'\nassert solution('6\\n1 3 3 1 3 2') == '1'\n\nassert solution('3\\n1 1 2') == '0'\nassert solution('2\\n1 2') == '1'\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"5\\n1 3 2 3 4\") == \"2\"\nassert solution(\"6\\n1 3 3 1 3 2\") == \"1\"\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 1 1\") == 4\nassert solution(\"5 3 2 3 4\") == 1\nassert solution(\"6 1 3 3 1 3 2\") == 1\n\"\"\""
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1 1 1') == '4'\nassert solution('5\\n1 3 2 3 4') == '1'\nassert solution('6\\n1 3 3 1 3 2') == '1'\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == 5\nassert solution(\"2\") == 2\n\"\"\"\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '5'\n\"\"\"\nimport math"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '5'\n\"\"\""
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '5'\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '5'\n\"\"\""
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\""
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"5\"\n\"\"\""
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '5'\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"4\") == 5\n\"\"\"\n\nfrom math import ceil, floor, sqrt"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"5\"\nassert solution(\"6\") == \"6\"\nassert solution(\"9\") == \"9\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2230\") == \"2230\"\nassert solution(\"-10\") == \"0\"\nassert solution(\"-100003\") == \"-10000\"\n\"\"\""
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2230') == '2230'\nassert solution('-10') == '0'\nassert solution('-100003') == '-10000'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2230''') == '2230'\nassert solution('''-10''') == '0'\nassert solution('''-100003''') == '-10000'\nassert solution('''1023''') == '1023'\nassert solution('''21010''') == '21010'\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2230\") == \"2230\"\nassert solution(\"-10\") == \"0\"\nassert solution(\"-100003\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('-13') == '0'\nassert solution('-100') == '0'\nassert solution('-1000') == '0'\nassert solution('-10000') == '0'\nassert solution('-10003') == '-1000'\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2230') == '2230'\nassert solution('-10') == '0'\nassert solution('-100003') == '-10000'\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2230') == '2230'\nassert solution('-10') == '0'\nassert solution('-100003') == '-10000'\n\n\n\"\"\"\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2230\") == \"2230\"\nassert solution(\"-10\") == \"0\"\nassert solution(\"-100003\") == \"-10000\"\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2230\") == \"2230\"\nassert solution(\"-10\") == \"0\"\nassert solution(\"-100003\") == \"-10000\"\n\n\"\"\""
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2230\") == \"2230\"\nassert solution(\"-10\") == \"0\""
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"^ >\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ v\") == \"undefined\"\nassert solution(\"^ > 6\") == \"undefined\"\nprint('All tests passed!')\n\"\"\""
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"^ >\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ v\") == \"undefined\"\n\"\"\"\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ >\") == \"cw\"\nassert solution(\"^ v\") == \"undefined\"\nassert solution(\"v ^\") == \"cw\"\nassert solution(\"v <\") == \"ccw\"\n\nprint(solution(\"< ^\"))\nprint(solution(\"^ >\"))\nprint(solution(\"^ v\"))\nprint(solution(\"v ^\"))\nprint(solution(\"v <\"))\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('< ^') == 'ccw'\nassert solution('> v') == 'cw'\nassert solution('^ v') == 'undefined'\nassert solution('< v') == 'undefined'\nassert solution('^ <') == 'ccw'\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"^ >\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ v\") == \"undefined\"\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"^ >\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ v\") == \"undefined\"\n\n-----Explanation-----\n\nSolution:\nSpinners have the form of V-shaped pieces of caramel. Each spinner can, well, spin around an invisible magic axis. At a specific point in time, a spinner can take 4 positions shown below (each one rotated 90 degrees relative to the previous, with the fourth one followed by the first one):\n\n[Image]\n\nAfter the spinner was spun, it starts its rotation, which is described by a following algorithm: the spinner maintains its position for a second then majestically switches to the next position in clockwise or counter-clockwise order, depending on the direction the spinner was spun in.\n\nSlastyona managed to have spinner rotating for exactly n seconds. Being fascinated by elegance of the process, she completely forgot the direction the spinner was spun in! Lucky for her, she managed to recall the starting position, and wants to deduct the direction given the information she knows. Help her do this.\n\nTo figure out if the spinner was spun clockwise or counter-clockwise, Slastyona had to check all the possible positions of the spinner after the first position and the last position. If the sum of the number of positions after the first position and the number of positions after the last position is odd, then the spinner was spun clockwise.\n\nTo calculate the number of the positions after the first position and the last position, Slastyona kept track of the number of the positions after the last position and the number of the positions after the first position. After calculating the difference between them, Slastyona took that difference modulo 2 and returned the result.\n\nTo check if the number of the positions after the first position and the last position is odd, Slastyona took the difference between the number of the positions after the last position and the number of the positions after the first position, divided by 2, rounded down and modulo 2. If the result is zero, then the number of the positions after the first position and the number of the positions after the last position is even.\n\nTo calculate the number of the positions after the first position and the last position, Slastyona kept track of the number of the positions after the first position and the number of the positions after the last position. After calculating the difference between them, Slastyona took that difference and divided it by 2.\n\nTo figure out if the number of the positions after the first position and the last position is odd, Slastyona took the difference between the number of the positions after the last position and the number of the positions after the first position, divided by 2, rounded down and modulo 2. If the result is zero, then the number of the positions after the first position and the number of the positions after the last position is even.\n\n\n\"\"\""
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"> ^\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ v\") == \"undefined\"\nassert solution(\"< v\") == \"undefined\"\nassert solution(\"> v\") == \"undefined\"\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"> ^\") == \"cw\"\nassert solution(\"^ <\") == \"ccw\"\nassert solution(\"v >\") == \"undefined\"\n\nprint('All tests passed.')\n\n\"\"\""
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"> v<\") == \"cw\"\nassert solution(\"^ v<\") == \"undefined\"\nassert solution(\"^ >\") == \"ccw\"\n\n\"\"\"\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"..R.L\") == 0\nassert solution(\"..R.L...\") == 0\nassert solution(\"..R.L.L..\") == 0\nassert solution(\"..R.L.L.L.\") == 0\nassert solution(\"..RRR..\") == 3\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"L.R...LR..L..\") == 4\nassert solution(\"R....\") == 0\nassert solution(\".\") == 1\n\"\"\""
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".L.R...\") == 4\nassert solution(\"R....\") == 0\nassert solution(\"........\") == 1\n\"\"\"\n\nfrom typing import Dict\n\nfrom collections import Counter\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('..R.L..L..L.R..L.R..L.R..L.R.L..R.L.L..R.R..L.L.L..L.L..') == '4'\nassert solution('..R.L..L..L.R..L.R..L.R..L.R.L..R.L.L..R.R..L.L.L..L.L..') == '0'\nassert solution('..R.L..L..L.R..L.R..L.R..L.R.L..R.L.L..R.R..L.L.L..L.L..') == '1'\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"L.R...LR..L..\") == 4\nassert solution(\"R....\") == 0\nassert solution(\".\") == 1\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".\") == 1\nassert solution(\".L.R...LR..L..\") == 4\nassert solution(\"R....\") == 0\nassert solution(\"R..R\") == 0\nassert solution(\"R..L..R\") == 0\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"L.R...LR..L..\") == 4\n\"\"\"\nfrom collections import defaultdict\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        data: List[str] = stdin.split()\n        n = int(data[0])\n        s = data[1]\n        count = 0\n        left, right = 0, 0\n        for i in range(n):\n            if s[i] == 'L':\n                left += 1\n            else:\n                right += 1\n            if left == right:\n                count += 1\n            elif left > right:\n                left -= 1\n                right += 1\n        return count\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LLRR\") == 4\nassert solution(\"L\") == 0\nassert solution(\"R\") == 1\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RL.') == 2\nassert solution('R.L') == 0\nassert solution('.L.') == 0\nassert solution('.L.L') == 1\nassert solution('LL.') == 4\n\"\"\""
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"R.LR.LL.\") == 1\nassert solution(\"R.R.R\") == 0\nassert solution(\"LL.RR.L\") == 0\nassert solution(\"L.LL.LL\") == 3\nassert solution(\"..R..L.L\") == 5\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n2 3 1 4 4\") == \"3 1 2 4\"\nassert solution(\"3 3\\n3 1 2\") == \"-\"\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n2 3 1 4 4\") == \"3 1 2 4\"\nassert solution(\"3 3\\n3 1 2\") == \"-1\""
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n2 3 1 4 4') == '3 1 2 4'\nassert solution('3 3\\n3 1 2') == '-1'\nassert solution('5 5\\n3 1 4 2 5') == '5 3 1 4 2'\nassert solution('5 5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('5 5\\n5 4 3 2 1') == '5 4 3 2 1'\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(input())\n\"\"\"\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n2 3 1 4 4\") == \"3 1 2 4\"\nassert solution(\"3 3\\n3 1 2\") == \"1 2 3\"\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 3 1 4 4\") == \"3 1 2 4\"\nassert solution(\"1 3 5 7\") == \"1 3 5 7\"\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 1 3\") == \"3 1 2 4\"\nassert solution(\"3 1 2\") == \"-1\"\nassert solution(\"3 2 1\") == \"2 1 3\"\nassert solution(\"2 1 3\") == \"3 1 2\"\n\nassert solution(\"5 4 3 2 1\") == \"3 1 2 4\"\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n2 3 1 4 4') == '3 1 2 4'\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 5\n2 3 1 4 4\n''') == '3 1 2 4'\nassert solution('''3 3\n3 1 2\n''') == '-1'\nassert solution('''4 5\n2 3 1 4 4\n''') == '3 1 2 4'\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 4 4\") == \"3 1 2 4\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"3 1 2\") == \"-1\"\nassert solution(\"4 5\") == \"3 1 2 4\"\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1990 1\") == \"9190\"\nassert solution(\"300 0\") == \"300\"\nassert solution(\"1034 2\") == \"3104\"\nassert solution(\"9090000078001234 6\") == \"9907000008001234\""
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('90 100') == '9100'\nassert solution('90 990') == '9909'\nassert solution('300 0') == '300'\nassert solution('100 300') == '100300'\n\"\"\"\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1990 1''') == '9190'\nassert solution('''300 0''') == '300'\nassert solution('''1034 2''') == '3104'\nassert solution('''9090000078001234 6''') == '9907000008001234'\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1990 1\") == \"9190\"\nassert solution(\"300 0\") == \"300\"\nassert solution(\"1034 2\") == \"3104\"\nassert solution(\"9090000078001234 6\") == \"9907000008001234\"\nprint(\"Test finished.\")\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '1990 1'\n) == '9190'\nassert solution(\n    '300 0'\n) == '300'\nassert solution(\n    '1034 2'\n) == '3104'\nassert solution(\n    '9090000078001234 6'\n) == '9907000008001234'\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1990 1\") == \"9190\"\nassert solution(\"300 0\") == \"300\"\nassert solution(\"1034 2\") == \"3104\"\nassert solution(\"9090000078001234 6\") == \"9907000008001234\"\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1990 1') == '9190'\nassert solution('300 0') == '300'\nassert solution('1034 2') == '3104'\nassert solution('9090000078001234 6') == '9907000008001234'\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"90 9\") == \"9909\"\nassert solution(\"300 0\") == \"300\"\nassert solution(\"10 34\") == \"3104\"\nassert solution(\"9090000078001234 6\") == \"9907000008001234\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1990 1''') == '9190'\n\"\"\"\n\na, k = map(int, input().split())\nk += 1\nwhile a % 10 == 0:\n    a //= 10\nwhile k > 0:\n    x = 0\n    while a % 10 == 0:\n        a //= 10\n    x = 10 * (a % 10)\n    a //= 10\n    if x > a:\n        k -= 1\n    else:\n        a = x\nprint(a * 10 ** k)\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1990 1') == '9190'\nassert solution('300 0') == '300'\nassert solution('1034 2') == '3104'\nassert solution('9090000078001234 6') == '9907000008001234'\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"1 3 6 10 15\") == \"2\"\nassert solution(\"1 2 5 8\") == \"12\"\nassert solution(\"1 2 3\") == \"42\"\nassert solution(\"1 2 3 4\") == \"42\"\n\"\"\"\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3 6 7 9') == '13'\nassert solution('1 3 6 10') == '42'\nassert solution('1 3 6 10') == '13'\n\"\"\"\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('836 624 412 200') == '-12'\nassert solution('1 334 667 1000') == '1333'\nassert solution
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"836 624 412 200\") == '-12'\nassert solution(\"1 334 667 1000\") == '1333'\nassert solution(\"1 334 667 1000\") == '1333'\nassert solution(\"1 334 667 1000\") == '1333'\nassert solution(\"1 334 667 1000\") == '1333'\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"836 624 412 200\") == \"-12\"\nassert solution(\"1 334 667 1000\") == \"1333\"\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('836 624 412 200') == '-12'\nassert solution('1 334 667 1000') == '1333'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('836 624 412 200') == '-12'\nassert solution('1 334 667 1000') == '1333'\nassert solution('1 2 3 4 5 6') == '6'\nassert solution('1 10 10 10 10 10') == '42'\nassert solution('1 2 3 4 5 6 7 8 9') == '42'\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"836 624 412 200\") == \"12\"\nassert solution(\"1 334 667 1000\") == \"1333\"\nassert solution(\"666 666 666\") == \"42\"\n\"\"\"\n\nA, B, C, D = list(map(int, input().split()))"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(836 624 412 200) == '-12'\nassert solution(1 334 667 1000) == '1333'\n\nimport sys\nprint(solution(sys.stdin.readline()))\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('836 624 412 200') == '-12'\n\n\"\"\""
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 2 3\\n\") == \"4\"\nassert solution(\"3\\n1 2 1\\n\") == \"1\"\nassert solution(\"7\\n1 1 3 1 1 1 1\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 2 3\") == \"4\"\nassert solution(\"7\\n1 1 3 1 1 1 1\") == \"4\"\nassert solution(\"3\\n1 2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2 1\n''') == '1'\n\nassert solution('''7\n1 1 3 1 1 1 1\n''') == '4'\n\n\"\"\"\n\nn = int(input())\nhouses = list(map(int, input().split()))\n\nhouses_set = set(houses)\nhouses_set.remove(max(houses_set))\nprint(max(houses_set))"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 2 3\\n\") == '4'\nassert solution(\"3\\n1 2 1\\n\") == '1'\nassert solution(\"7\\n1 1 3 1 1 1 1\\n\") == '4'\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 1\") == \"1\"\nassert solution(\"5\\n1 2 3 2 3\") == \"4\"\nassert solution(\"7\\n1 1 3 1 1 1 1\") == \"4\"\n\"\"\"\nfrom itertools import combinations\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 2 3\\n\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 2 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n3\n1 2 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n7\n1 1 3 1 1 1 1\n\"\"\") == \"4\"\n\n\"\"\"\n\nfrom collections import deque\n\n\nclass Graph(object):\n    \"\"\"docstring for Graph\"\"\"\n    def __init__(self, V):\n        super(Graph, self).__init__()\n        self.V = V\n        self.adj = [[] for i in range(self.V)]\n\n    def addEdge(self, s, d):\n        self.adj[s].append(d)\n        self.adj[d].append(s)\n\n    def dfs(self, start, visited):\n        stack = deque()\n        stack.append(start)\n\n        while stack:\n            current = stack.pop()\n            visited.add(current)\n\n            for i in self.adj[current]:\n                if i not in visited:\n                    stack.append(i)\n\n    def BFS(self, start, visited):\n        q = deque()\n        q.append(start)\n\n        while q:\n            current = q.popleft()\n            visited.add(current)\n\n            for i in self.adj[current]:\n                if i not in visited:\n                    q.append(i)\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 2 3\\n\") == \"4\"\nassert solution(\"3\\n1 2 1\\n\") == \"1\"\nassert solution(\"7\\n1 1 3 1 1 1 1\\n\") == \"4\"\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 2 3\") == \"4\"\nassert solution(\"1 1 3 1 1 1 1\") == \"1\"\nassert solution(\"1 1 3 1 1 1 1\") == \"1\""
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 2 3') == '4'\nassert solution('3\\n1 2 1') == '1'\nassert solution('7\\n1 1 3 1 1 1 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 3 9\n''') == '2 2 L'\n\nassert solution('''4 3 24\n''') == '4 3 R'\n\nassert solution('''2 4 4\n''') == '1 2 R'\n\nassert solution('''1 2 2\n''') == '1 1 R'\n\nassert solution('''5 6 3\n''') == '2 2 L'"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\nassert solution(\"4 3 24\") == \"4 3 R\"\nassert solution(\"2 4 4\") == \"1 2 R\"\nassert solution(\"2 4 8\") == \"1 2 R\"\nassert solution(\"8 5 19\") == \"6 4 L\"\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\nassert solution(\"4 3 24\") == \"4 3 R\"\nassert solution(\"2 4 4\") == \"1 2 R\"\n\"\"\""
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\nassert solution(\"4 3 24\") == \"4 3 R\"\nassert solution(\"2 4 4\") == \"1 2 R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 9\\n') == '2 2 L'\n\nassert solution('4 3 24\\n') == '4 3 R'\n\nassert solution('2 4 4\\n') == '1 2 R'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn, m, k = [int(i) for i in stdin.readline().split(' ')]"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\nassert solution(\"4 3 24\") == \"4 3 R\"\nassert solution(\"2 4 4\") == \"1 2 R\""
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 9') == '2 2 L'\nassert solution('4 3 24') == '4 3 R'\nassert solution('2 4 4') == '1 2 R'"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\nassert solution(\"4 3 24\") == \"4 3 R\"\nassert solution(\"2 4 4\") == \"1 2 R\"\n\"\"\""
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 9\\n') == '2 2 L'\nassert solution('4 3 24\\n') == '4 3 R'\nassert solution('2 4 4\\n') == '1 2 R'\n\n\"\"\"\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 9\") == \"2 2 L\"\nassert solution(\"4 3 24\") == \"4 3 R\"\nassert solution(\"2 4 4\") == \"1 2 R\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RG\") == \"G\"\nassert solution(\"GB\") == \"B\"\nassert solution(\"RR\") == \"R\"\nassert solution(\"BG\") == \"G\"\nassert solution(\"BB\") == \"B\"\n\"\"\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"GRG\") == \"B\"\nassert solution(\"BBBBB\") == \"B\"\nassert solution(\"RRRRR\") == \"R\"\nassert solution(\"GGGRR\") == \"G\"\nassert solution(\"RRRRR\") == \"R\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RB\") == \"G\"\nassert solution(\"GRG\") == \"BR\"\nassert solution(\"BBBBB\") == \"B\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BGR\") == \"BR\"\nassert solution(\"RBR\") == \"RB\"\nassert solution(\"BGBR\") == \"GB\"\nassert solution(\"GBRB\") == \"BG\"\nassert solution(\"BGRB\") == \"RB\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"GRG\") == \"BR\"\nassert solution(\"BBBBB\") == \"B\"\nassert solution(\"RBRRB\") == \"RRB\"\nassert solution(\"GBGBG\") == \"RR\"\n\n\"\"\""
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RB\") == \"G\"\nassert solution(\"GRG\") == \"BR\"\nassert solution(\"BBBBB\") == \"B\"\nassert solution(\"GGGGGRR\") == \"GRR\"\n\"\"\""
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRG\") == \"B\"\nassert solution(\"BGR\") == \"G\"\nassert solution(\"RRGGR\") == \"B\"\nassert solution(\"BGRG\") == \"G\"\nassert solution(\"BGRRR\") == \"B\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RRB') == 'R'\nassert solution('RBGG') == 'B'\nassert solution('BBRR') == 'B'"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BBB') == 'B'\nassert solution('BGB') == 'G'\nassert solution('BRRB') == 'R'\nassert solution('RGRB') == 'G'\nassert solution('GBGR') == 'B'\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n\") == 'YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2'\nassert solution(\"6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n\") == 'NO'\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\") == \"YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\"\nassert solution(\"6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\") == \"YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\"\n\"\"\""
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\\n1 0\\n0 1\\n2 0\\n2 -1\\n-1 1\\n0 2\\n-1 1\\n-1 1\\n1 2\\n0 2\\n0 1\\n2 0\\n0 2\\n0 1\\n2 0\\n1 -1\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 1\\n0 1\\n2 0\\n0 2\\n0 1\\n2 0\\n0 1\\n2 0\\n0 2\\n0 1\\n2 0\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n2 0\\n1 -1\\n0 2\\n0 1\\n1 -1\\n0 1\\n0 1\\n2 0\\n0 1\\n1 -1\\n0 1\\n0 1\\n2 0\\n0 1\\n0 1\\n1 -1\\n-1 1\\n0 1\\n-1 1\\n0 1\\n-1 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n\") == \"YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\\n1 0\\n\"\nassert solution(\"6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n\") == \"NO\\n\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"YES\\n3 3\\n4 3\\n5 3\\n6 3\\n\"\n\n\"\"\""
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n\") == \"YES\"\n\"\"\""
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\") == \"YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\"\nassert solution(\"6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\") == \"NO\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"YES\\n3 3\\n4 3\\n5 3\\n6 3\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n\") == \"YES\"\nassert solution(\"6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n\") == \"NO\"\n\n\n-----Explanation-----\n\nThe tree is built so that the segments between the edges are parallel to the axes. The coordinates of the points where the edges intersect are:\n\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n\nAs you can see, there are two possible solutions for this problem:\n\n[Image]\nor\n[Image]\n\n0 -0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\nIn the first solution, the tree is built so that the coordinates of the edges are the same:\n\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n\n0 -0\n0 -0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\nIn the second solution, the tree is built so that the coordinates of the edges are different:\n\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\n[Image]\n\nAs you can see, both solutions are correct.\n\nIn the first solution the segments between the edges are parallel:\n\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\nIn the second solution the segments between the edges are not parallel:\n\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\nThe graph is an undirected graph, so the edges are bidirectional:\n\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\nIn the first solution the graph is connected:\n\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\nIn the second solution the graph is not connected:\n\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n|0|0|0|0|0|0|\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\nIn both solutions the"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n''') == 'YES\\n3 3\\n4 3'\n\nassert solution('''\n6\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == 'NO'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\") == \"YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\"\nassert solution(\"6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\") == \"NO\"\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"5 14\") == \"105\"\n\nprint(\"Cool!\")"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"5 14\") == \"105\"\nassert solution(\"88005553535 99999999999\") == \"761141116\"\n\n\"\"\""
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3') == '7'\nassert solution('5 14') == '105'\nassert solution('88005553535 99999999999') == '761141116'\nassert solution('1 1000000000000') == '271925696'\nassert solution('1 1000000000') == '271925696'\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"5 14\") == \"105\"\nassert solution(\"88005553535 99999999999\") == \"761141116\"\n\"\"\"\n\nfrom collections import deque\n\na = list(map(int, input().split(' ')))\nN = (a[0] - 1) * 2 + 1\nk = a[1] - 1\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '1 3'\n) == '7'\nassert solution(\n    '5 14'\n) == '105'\nassert solution(\n    '88005553535 99999999999'\n) == '761141116'\n\n\"\"\""
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3') == '7'\nassert solution('5 14') == '105'\nassert solution('88005553535 99999999999') == '761141116'\nassert solution('88005553535 99999999999') == '761141116'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3\\n') == '7'\nassert solution('5 14\\n') == '105'\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 3''') == '7'\nassert solution('''5 14''') == '105'\nassert solution('''88005553535 99999999999''') == '761141116'\nprint('The local tests are done.')\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3\\n') == '7'\nassert solution('5 14\\n') == '105'\nassert solution('88005553535 99999999999\\n') == '761141116'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == 7\nassert solution('5 14') == 105\nassert solution('88005553535 99999999999') == 761141116\n\"\"\""
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected_output\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\n\"\"\"\nimport numpy as np\n\na, b, c = [np.array([int(x) for x in line.split()]) for line in stdin.split('\\n')]"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 1 1 1 1 0') == 'Yes'\nassert solution('1 1 0 0 1000 1000') == 'No'"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 1 1 1 0\") == 'Yes'\nassert solution(\"1 1 0 0 1000 1000\") == 'No'\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 1 1 1 0') == 'Yes'\nassert solution('1 1 0 0 1000 1000') == 'No'\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\""
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\n\"\"\"\n\nfrom math import acos, atan2, sqrt\n\na, b, c, d, e, f = map(int, input().split())\n\n\"\"\"\na = b + c * cos(c)\nb = c + d * cos(d)\nc = f\n\"\"\"\n\n\"\"\"\ncos(c) = (b^2 + c^2 - a^2) / (2 * b * c)\nsin(c) = sqrt(1 - cos^2(c))\n\"\"\"\n\nn = acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c))\nm = acos((d ** 2 + f ** 2 - c ** 2) / (2 * d * f))\n\n\"\"\"\nn = acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c))\nm = acos((d ** 2 + f ** 2 - c ** 2) / (2 * d * f))\n\"\"\"\n\n\"\"\"\nn = acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c))\nm = acos((d ** 2 + f ** 2 - c ** 2) / (2 * d * f))\n\"\"\"\n\n\"\"\"\nn = acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c))\nm = acos((d ** 2 + f ** 2 - c ** 2) / (2 * d * f))\n\"\"\"\n\n\"\"\"\nn = acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c))\nm = acos((d ** 2 + f ** 2 - c ** 2) / (2 * d * f))\n\"\"\"\n\n\"\"\"\nn = acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c))\nm = acos((d ** 2 + f ** 2 - c ** 2) / (2 * d * f))\n\"\"\"\n\n\"\"\"\nn = acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c))\nm = acos((d ** 2 + f ** 2 - c ** 2) / (2 * d * f))\n\"\"\"\n\n\"\"\"\nn = acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c))\nm = acos((d ** 2 + f ** 2 - c ** 2) / (2 * d * f))\n\"\"\"\n\n\"\"\"\nn = acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c))\nm = acos((d ** 2 + f ** 2 - c ** 2) / (2 * d * f))\n\"\"\""
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\""
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == 1\nassert solution('10 3') == 6\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"10 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 1 2 2 4') == 4\nassert solution('3 1\\n1 1 1') == 1"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"1\"\nassert solution(\"5 2\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 1 2 2 4') == 4\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 1 2 2 4') == 4\nassert solution('3 1\\n1 1 1') == 1\nassert solution('10 3\\n1 2 6 2 3 6 9 18 3 9') == 6\nassert solution('5 2\\n1 1 2 2 4') == 4\n\"\"\"\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 1 2 2 4\") == 4\n\"\"\"\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 2 2 4\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 6 2 3 6 9 18 3 9\") == \"6\"\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 1 2 2 4\") == 4\nassert solution(\"3 1\\n1 1 1\") == 1\nassert solution(\"10 3\\n1 2 6 2 3 6 9 18 3 9\") == 6\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n1 2 3 4 5 6 7') == '1'\nassert solution('10 3\\n1 2 3 4 5 6 7 8 9 10') == '6'\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1 1 1') == '2'\nassert solution('1\\n10 15') == '27'\nassert solution('1\\n6 1') == '7'\nassert solution('1\\n7 11') == '26'\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\\n10 15\\n6 1\") == \"27\"\nassert solution(\"3 0 3\\n10 8\\n7 11\\n5 2\") == \"26\"\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 2\\n10 15\\n6 1\") == \"27\"\nassert solution(\"3 0 3\\n10 8\\n7 11\\n5 2\") == \"26\"\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\\n10 15\\n6 1\") == \"27\"\nassert solution(\"3 0 3\\n10 8\\n7 11\\n5 2\") == \"26\"\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\\n10 15\\n6 1\\n\") == \"27\"\nassert solution(\"3 0 3\\n10 8\\n7 11\\n5 2\\n\") == \"26\"\n\n\"\"\""
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 1\\n10 15\\n6 1') == '27'\nassert solution('3 0 3\\n10 8\\n7 11\\n5 2') == '26'\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1\\n10 15\\n6 1') == '27'\nassert solution('3 0 3\\n10 8\\n7 11\\n5 2') == '26'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\\n10 15\\n6 1\") == \"27\"\nassert solution(\"3 0 3\\n10 8\\n7 11\\n5 2\") == \"26\"\n\"\"\"\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\\n10 15\\n6 1\") == \"27\"\nassert solution(\"3 0 3\\n10 8\\n7 11\\n5 2\") == \"26\"\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 1 1\n10 15\n6 1\n''') == '27'\n\nassert solution('''3 0 3\n10 8\n7 11\n5 2\n''') == '26'"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 2\\n.**\\nX..\") == \"RL\"\nassert solution(\"5 6 14\\n..***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n\") == \"DLDDLLLRRRUURU\"\nassert solution(\"3 3 4\\n***\\n*X*\\n***\\n\") == \"IMPOSSIBLE\"\n\"\"\"\n\n\"\"\"\nYou are given a string S and a pattern P of the same length.\n\nWe may apply the following operation on S:\n\nFind all occurrences of the pattern in S.\nReplace all the matched occurrences by the symbol \"*\".\n\nFor example, applying this operation on \"ababab\" and the pattern \"ab\" results in \"ab*ab*\".\n\nYour task is to find the lexicographically smallest such string S', such that applying the given operation on S' results in the string we are looking for.\n\nInput\n\nThe first line contains a string S of length n (1 \u2264 n \u2264 10^6) \u2014 the string to process. The second line contains a string P of the same length. Each of the characters in the strings are either \".\" (stands for any symbol) or \"*\" (stands for the matched symbol).\n\nOutput\n\nPrint a single line: the lexicographically smallest string S' resulting from applying the described operation or \"IMPOSSIBLE\" (without quotes) if it's not possible to obtain a string of the desired kind.\n\nConstraints\n\nThe string contains only symbols \".\" and \"*\".\nThe length of the pattern is equal to the length of the string.\nExample\n\nInput:\n\nababa\nab\n\nOutput:\n\nab*aba\n\nInput:\n\naa\n*\n\nOutput:\n\nIMPOSSIBLE\n\nInput:\n\naa\nab\n\nOutput:\n\nIMPOSSIBLE\n\"\"\"\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 2\\n.*\\nX..\") == \"RL\"\nassert solution(\"5 6 14\\n.*\\n..*.\\n..*.*\\n....*\\n\") == \"DLDDLLLRRRUURU\"\nassert solution(\"3 3 4\\n***\\n*X*\\n***\") == \"IMPOSSIBLE\"\nassert solution(\"3 3 4\\nX***\\n.**X\\n
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".**\") == \"RL\"\nassert solution(\"X..\") == \"DLRU\"\nassert solution(\"..*.\") == \"RRR\"\n\n\"\"\"\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 4') == 'IMPOSSIBLE'\nassert solution('2 3 2') == 'DL'\nassert solution('5 6 14') == 'DLDDLLLRRRUURU'\n\"\"\"\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 4\\n***\\n*X*\\n***\") == \"DLDDLLLRRRUURU\"\n\"\"\""
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 2\\n.**\\nX..') == 'RL'\nassert solution('5 6 14\\n..***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n') == 'DLDDLLLRRRUURU'\nassert solution('3 3 4\\n***\\n*X*\\n***\\n') == 'IMPOSSIBLE'\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def shortest_way(self, m, n, k):\n        pass\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(Solution().shortest_way(5, 6, 14), 'DLDDLLLRRRUURU')"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 2\\n.**\\nX..\\n\") == \"RL\"\nassert solution(\"5 6 14\\n..***\\n*...X\\n..*...\\n..*.**\\n....*.\\n\") == \"DLDDLLLRRRUURU\"\nassert solution(\"3 3 4\\n***\\n*X*\\n***\\n\") == \"IMPOSSIBLE\"\n\n\"\"\""
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 2\\n.**\\nX..\") == \"RL\"\nassert solution(\"3 3 4\\n***\\n*X*\\n***\") == \"IMPOSSIBLE\"\nassert solution(\"5 6 14\\n..***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n\") == \"DLDDLLLRRRUURU\""
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 2\\n.**\\nX..\") == \"RL\"\nassert solution(\"5 6 14\\n..***\\n*...X\\n..*...\\n..*.**\\n....*.\\n\") == \"DLDDLLRUURU\"\nassert solution(\"3 3 4\\n***\\n*X*\\n***\\n\") == \"IMPOSSIBLE\"\n\nfrom dataclasses import dataclass\n\nfrom typing import List, Dict, Optional\n\n@dataclass\nclass Cell:\n    value: int\n    is_obstacle: bool\n    is_start: bool\n\n\n@dataclass\nclass State:\n    row: int\n    col: int\n    position: int\n    cells: Dict[int, Cell]\n\n\n@dataclass\nclass Solution:\n    cycle: str\n    path: List[State]\n    previous_states: List[State]\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 2\\n.**\\nX..\\n') == 'RL'\nassert solution('5 6 14\\n.***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n') == 'DLDDLLLRRRUURU'\nassert solution('3 3 4\\n***\\n*X*\\n***\\n') == 'IMPOSSIBLE'\nassert solution('3 3 4\\n**.\\nX.**\\n***\\n') == 'DRRDRDRDDRRDRDRDRDDRDRDRDDRDDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 1''') == '2'\nassert solution('''10 7''') == '6'\nassert solution('''1000000000000 1''') == '1000000000000'\n'''"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1') == 2\nassert solution('10 7') == 6\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == 2\nassert solution(\"10 7\") == 6\n\"\"\"\n\nfrom math import sqrt\n\nn, m = map(int, input().split())\n\na = 2\nb = int(sqrt(n))\n\nwhile a <= b:\n    if n % a == 0:\n        b = n // a\n        break\n    a += 1\n\nprint(a)\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"10 7\") == \"6\"\nassert solution(\"1000000000000 1\") == \"1000000000000\"\n\"\"\"\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"10 7\") == \"6\"\nassert solution(\"1000000000000 1\") == \"1000000000000\"\n\n\n\n-----Test1-----\n\na = 5\nb = 6\n\n-----Test2-----\n\na = 1000\nb = 900\n\n\"\"\"\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1') == '2'\nassert solution('10 7') == '6'\nassert solution('1000000000000 1') == '1000000000000'\n\"\"\""
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == 2\nassert solution(\"10 7\") == 6\n\"\"\"\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1') == 2\nassert solution('10 7') == 6\nassert solution('1000000000000 1') == 1000000000000\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 7') == '6'\n\"\"\"\nimport math\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1') == '2'\nassert solution('10 7') == '6'\nassert solution('1000000000000 1') == '1000000000000'\nassert solution('1 2') == '2'\n\n\n[Image]\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 3\\n1 2 5 4 5\") == '1 2 5 4 3'\nassert solution(\"4\\n1 1 3 4\\n1 4 3 4\") == '1 2 3 4'\nassert solution(\"5\\n4 4 2 3 1\\n5 4 5 3 1\") == '5 4 2 3 1'\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 3 4\\n1 4 3 4\") == '1 2 5 4 3'\nassert solution(\"5\\n4 4 2 3 1\\n5 4 5 3 1\") == '5 4 2 3 1'\n\n\n\"\"\"\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 1 3 4\\n1 4 3 4') == '1 2 5 4 3'\nassert solution('5\\n4 4 2 3 1\\n5 4 5 3 1') == '5 4 2 3 1'\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 3 4 3\") == \"1 2 5 4 3\"\n\"\"\"\nimport itertools\nimport math\nfrom functools import lru_cache\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1 3 4') == '1 2 3 4'\nassert solution('1 4 3 4') == '1 2 3 4'\nassert solution('5 4 2 3 1') == '5 4 2 3 1'\nassert solution('4 4 2 3 1') == '5 4 2 3 1'\n\n'''\n\nimport sys"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 2 3 1') == '5 4 2 3 1'\nassert solution('1 1 3 4') == '1 2 3 4'"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 3\\n1 2 5 4 5\") == \"1 2 5 4 3\"\nassert solution(\"5\\n4 4 2 3 1\\n5 4 5 3 1\") == \"5 4 2 3 1\"\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 4 2 3 1\\n5 4 5 3 1\") == \"5 4 2 3 1\"\nassert solution(\"5\\n4 4 2 3 1\\n5 4 5 1 3\") == \"5 4 2 3 1\"\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 2 3 1') == '5 4 2 3 1'\nassert solution('5 4 5 3 1') == '5 4 2 3 1'\nassert solution('4 4 2 3 1') == '5 4 2 3 1'\nassert solution('5 4 5 3 1') == '5 4 2 3 1'\n\nassert solution('4 4 2 3 1') == '5 4 2 3 1'\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 3\\n1 2 5 4 5\") == \"1 2 5 4 3\"\nassert solution(\"5\\n4 4 2 3 1\\n5 4 5 3 1\") == \"5 4 2 3 1\""
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 15') == '1 2 3'\nassert solution('4 67') == '2 1 3'\nassert solution('4 68') == '4 1 2'\n\"\"\"\n\nn, a = map(int, input().split())"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n\"\"\"\nimport itertools\nimport math"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 15') == '2 1 3'\nassert solution('4 67') == '4 1 2'\nassert solution('4 68') == '4 1 3'\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 67') == '2 1 3'\nassert solution('4 68') == '4 1 2'\nassert solution('4 68') == '4 1 2'\n\n\"\"\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n\"\"\""
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 15') == '1 2 3'\nassert solution('4 67') == '2 1 3'\nassert solution('4 68') == '4 1 2'\n\"\"\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n\"\"\"\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10\\n20\\n30\") == \"YES\"\nassert solution(\"3\\n10\\n10\\n10\") == \"NO\"\nassert solution(\"3\\n120\\n120\\n120\") == \"YES\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10\\n10\\n10\") == \"YES\"\nassert solution(\"3\\n10\\n20\\n30\") == \"NO\"\nassert solution(\"3\\n120\\n120\\n120\") == \"YES\"\nassert solution(\"3\\n10\\n10\\n10\") == \"NO\"\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == \"YES\"\nassert solution(3) == \"YES\"\nassert solution(3) == \"YES\"\n\nassert solution(3) == \"NO\"\nassert solution(3) == \"NO\"\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n10\\n10\\n10\") == \"YES\"\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10\\n10\\n10\") == \"YES\"\nassert solution(\"3\\n10\\n10\\n10\") == \"NO\"\nassert solution(\"3\\n120\\n120\\n120\") == \"YES\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10\\n10\\n10\") == \"YES\"\nassert solution(\"3\\n120\\n120\\n120\") == \"NO\"\nassert solution(\"3\\n60\\n60\\n60\") == \"YES\"\n\nprint(solution(\"3\\n10\\n10\\n10\"))\nprint(solution(\"3\\n120\\n120\\n120\"))\nprint(solution(\"3\\n60\\n60\\n60\"))\n\n\n\nfrom collections import deque"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n20\\n30\") == \"YES\"\nassert solution(\"10\\n10\\n10\") == \"NO\"\nassert solution(\"120\\n120\\n120\") == \"YES\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n10\\n10\\n10\") == \"YES\"\nassert solution(\"3\\n10\\n10\\n10\") == \"NO\"\nassert solution(\"3\\n120\\n120\\n120\") == \"YES\"\n\n\n\n---\n\n\n\nimport math\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n10\\n20\\n30\") == \"YES\"\nassert solution(\"3\\n10\\n10\\n10\") == \"NO\"\nassert solution(\"3\\n120\\n120\\n120\") == \"YES\""
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10\\n20\\n30\") == \"YES\"\nassert solution(\"3\\n10\\n10\\n10\") == \"NO\"\nassert solution(\"3\\n120\\n120\\n120\") == \"YES\""
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 6 3\") == \"2\"\nassert solution(\"3 1 5 6\") == \"8\"\nassert solution(\"8 3 3 2\") == \"2\""
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 6 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 6 3\") == \"2\"\nassert solution(\"3 1 5 6\") == \"8\"\nassert solution(\"8 3 3 2\") == \"2\"\n\"\"\"\n\n\"\"\"\nSolution 1"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 6 3\") == 2\nassert solution(\"3 1 5 6\") == 8\nassert solution(\"8 3 3 2\") == 2\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 6 3') == 2\n\"\"\"\n\nfrom math import floor, ceil, sqrt\n\na, b, c, d = map(int, stdin.split())"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 6 3\") == \"2\"\nassert solution(\"3 1 5 6\") == \"8\"\nassert solution(\"8 3 3 2\") == \"2\"\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 6 3\") == 2\nassert solution(\"3 1 5 6\") == 8\nassert solution(\"8 3 3 2\") == 2\n\n\"\"\""
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 6 3\") == 2\nassert solution(\"3 1 5 6\") == 8\nassert solution(\"8 3 3 2\") == 2\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 6 3\") == 2\nassert solution(\"3 1 5 6\") == 8\nassert solution(\"8 3 3 2\") == 3\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 6 3') == 2\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 5''') == '3'\n\"\"\"\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5') == '3'\nassert solution('6 3') == '1'\n\n\"\"\""
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5') == '3'\nassert solution('6 3') == '1'\n\n\"\"\"\n\nfrom math import gcd\n\nn, m = [int(_) for _ in stdin.readline().split()]\nprint(1 + gcd(n, m) if n > m else gcd(n, m))\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5') == '3', \"First Test\"\nassert solution('6 3') == '1', \"Second Test\"\n\"\"\"\nimport math\n\nx, y = map(int, input().split())"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '3'\nassert solution('1 3') == '2'\nassert solution('10 5') == '3'\nassert solution('1000 2') == '1'\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\") == \"1\"\nassert solution(\"20 32\") == \"6\"\nassert solution(\"200 200\") == \"1\"\nassert solution(\"10 10\") == \"1\"\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"6 3\") == \"1\"\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"6 3\") == \"1\"\nassert solution(\"8 2\") == \"2\"\nassert solution(\"8 10\") == \"0\"\nassert solution(\"7 20\") == \"0\"\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == 3\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"6 3\") == \"1\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n-1 4\\n-1 6') == 'Yes'\nassert solution('3\\n1 -1\\n-1 4\\n-1 6') == 'Yes'\nassert solution('5\\n1 -1\\n-1 4\\n-1 6') == 'No'\n\"\"\""
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 -1\\n-1 4\\n-1 6') == 'Yes'\nassert solution('3\\n1 -1\\n-1 4\\n-1 6') == 'Yes'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n\nMOD = 1000000009\n\nN = int(sys.stdin.readline())\nA, B = [], []\nfor _ in range(N):\n    a, b = map(int, sys.stdin.readline().split())\n    A.append(a)\n    B.append(b)\n\ndp = [[[0 for _ in range(N + 1)] for _ in range(2)] for _ in range(2)]\ndp[0][0][0] = 1\n\nfor i in range(N):\n    for k in range(2):\n        for j in range(2):\n            dp[k][i + 1 % 2][(j + A[i]) % 2] += dp[k][i][j]\n            dp[k][i + 1 % 2][(j + B[i]) % 2] %= MOD"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 -1\\n-1 4\\n-1 6') == 'Yes'\n\n---"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == \"Yes\"\n\"\"\""
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 -1\\n-1 4\\n-1 6\") == \"Yes\"\n\"\"\"\n\n\"\"\"\n\u0421\u0435\u043c\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 N*N, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u043d\u0443\u043b\u0435\u0439 \u0438 \u0435\u0434\u0438\u043d\u0438\u0446. \u0418\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c i, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c.\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0440\u0430\u0437\u043c\u0435\u0440 \u0442\u0430\u0431\u043b\u0438\u0446\u044b N (1 \\leq N \\leq 1000), \u0437\u0430\u0442\u0435\u043c \u0441\u0430\u043c\u0443 \u0442\u0430\u0431\u043b\u0438\u0446\u0443. \u0414\u0430\u043b\u0435\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 N \u0441\u0442\u0440\u043e\u043a, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0438\u0437 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0438. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0442\u0430\u0431\u043b\u0438\u0446\u044b.\n\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u043b-\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0440\u044f\u0434. \u0414\u043b\u044f \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044f \u043a\u043e\u043b-\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0440\u044f\u0434 \u0441\u043c. \u043f\u0440\u0438\u043c\u0435\u0440 1. \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 2*2:\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1:\n\n\u0422\u0430\u0431\u043b\u0438\u0446\u0430:\n0 1\n0 1\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435: 1 1\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435: 1 1\n\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430: 1 1\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2:\n\n\u0422\u0430\u0431\u043b\u0438\u0446\u0430:\n1 1\n1 1\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435: 2 2\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435: 2 2\n\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430: 2 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440 3:\n\n\u0422\u0430\u0431\u043b\u0438\u0446\u0430:\n0 1\n0 1\n0 1\n0 1\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435: 1 1\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435: 1 1\n\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430: 1 1\n\n\u041f\u0440\u0438\u043c\u0435\u0440 4:\n\n\u0422\u0430\u0431\u043b\u0438\u0446\u0430:\n0 1 0 1 0\n0 1 0 1 0\n0 1 0 1 0\n0 1 0 1 0\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435: 1 1\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435: 1 1\n\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430: 1 1\n\n\u041f\u0440\u0438\u043c\u0435\u0440 5:\n\n\u0422\u0430\u0431\u043b\u0438\u0446\u0430:\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435: 1 1\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435: 1 1\n\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430: 1 1\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0435\u0441\u0442\u044c \u0440\u043e\u0432\u043d\u043e N \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n - \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0435\u0441\u0442\u044c \u0440\u043e\u0432\u043d\u043e N \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n - \u0417\u0430\u043f\u0438\u0441\u044c 0 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0435 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 -1\\n-1 4\\n-1 6\\n\") == \"Yes\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 -1\\n-1 4\\n-1 6') == 'Yes'\nassert solution('2\\n1 1\\n1 2') == 'Yes'\nassert solution('2\\n1 1\\n1 2') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 -1\\n-1 4\\n-1 6\") == \"Yes\"\n\"\"\"\n\nN = int(input())\nA = []\nB = []\nfor _ in range(N):\n    line = input().split()\n    A.append(int(line[0]))\n    B.append(int(line[1]))\n\nfor i in range(N):\n    if A[i] == -1 and B[i] == -1:\n        continue\n    \n    if A[i] == 1:\n        if B[i] - A[i]!= 1:\n            print(\"No\")\n            break\n        else:\n            continue\n\n    if B[i] == 1:\n        if A[i] - B[i]!= 1:\n            print(\"No\")\n            break\n        else:\n            continue\n    \n    else:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 -1\\n-1 4\\n-1 6\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 -1\\n-1 4\\n-1 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == b\n\na\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2\n\nb\n'ugly'\nassert solution(a) == b\n\n-----Input-----\n\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2\n\nOutput\n'ugly'\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 1 0\\n0 0 2 0\\n0 1 0 0\\n1 0 0 0\\n0 2 0 0\\n2 0 0 0\\n2 2 0 0\\n0 3 0 0\") == \"respectable\"\nassert solution(\"0 0 1 0\\n0 0 2 0\\n0 1 0 0\\n1 0 0 0\\n0 2 0 0\\n2 0 0 0\\n2 2 0 0\\n0 3 0 0\") == \"ugly\"\nassert solution(\"0 0 1 0\\n0 0 2 0\\n0 1 0 0\\n1 0 0 0\\n0 2 0 0\\n2 0 0 0\\n2 2 0 0\\n0 3 0 0\") == \"ugly\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'ugly'\n\nassert solution('0 0\\n0 1\\n0 2') == 'ugly'\n\nassert solution('1 1\\n1 2\\n1 3') == 'ugly'\n\nassert solution('0 0\\n0 1\\n0 2\\n2 0\\n2 1\\n2 2') =='respectable'\n\nassert solution('0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\\n7 0') == 'ugly'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n\"\n) == \"respectable\"\nassert solution(\n\"0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\\n7 0\\n\"\n) == \"ugly\"\nassert solution(\n\"0 0\\n0 1\\n0 2\\n1 0\\n2 0\\n\"\n) == \"ugly\"\nassert solution(\n\"0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n\"\n) == \"ugly\"\n\"\"\""
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") =='respectable'\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == 'ugly'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2') =='respectable'\nassert solution('1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3') == 'ugly'\n\"\"\"\nfrom typing import List\nfrom typing import Tuple\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"respectable\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"ugly\""
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"ugly\"\nassert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"respectable\"\n\"\"\""
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\") == \"respectable\"\nassert solution(\"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"ugly\"\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2') =='respectable'\nassert solution('1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3') == 'ugly'\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n4 5\\n5 11\") == \"YES\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\n\n---\n\nhttps://www.codewars.com/kata/5a3ff86b6c0500adf60000e1/train/python\n\n5.1 Maximal sum\n\nThe maximum sum of a non-empty sequence of positive integers is the sum of the last (maximal) element of the sequence.\n\nFor example, the maximum sum of the sequence [2, 1, 5, 1, 3, 2] is 6, since it is the sum of 5 and 3.\n\nYour goal is to find the maximal sum of any non-empty sequence of positive integers, in linear time.\n\nWrite a function:\n\n    def solution(A)\n\nthat, given a non-empty zero-indexed array A of N integers, returns the maximal sum of any non-empty subarray of A. The subarray can be of length 1, ie. a single element.\n\nFor example, given array A such that:\n  A[0] = 3  A[1] = 2  A[2] = -6\n  A[3] = 4  A[4] = 0\n\nthe function should return 5, because:\n\nmaximal sum of any non-empty subarray of A is 3 + 2 - 6 + 4 = 5\nAssume that:\n\n        N is an integer within the range [1..100,000];\n        each element of array A is an integer within the range [\u22121,000,000..1,000,000].\n\nComplexity:\n\n        expected worst-case time complexity is O(N);\n        expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).\n\nElements of input arrays can be modified.\n\"\"\""
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(4, 5) == \"YES\"\nassert solution(1, 1) == \"NO\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('5 11') == 'NO'\n\nprint(solution('4 5'))\nprint(solution('1 1'))\nprint(solution('5 11'))\n\n'''\n\nimport math"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n5 11\") == \"NO\"\nassert solution(\"1 1\\n4 5\") == \"YES\"\nassert solution(\"1 1\\n5 11\") == \"NO\"\nassert solution(\"2 1\\n5 11\") == \"YES\"\nassert solution(\"2 1\\n5 11\") == \"YES\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"5 11\") == \"NO\"\nassert solution(\"6 15\") == \"YES\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n4 5\\n5 11\") == \"YES\\nYES\\nNO\"\n\"\"\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n4 5\n5 11\n''') == 'YES\\nYES\\nNO'\n\nassert solution('''\n5 4\n2 7\n3 9\n3 8\n''') == 'NO'\n\nassert solution('''\n3 3\n1 7\n2 6\n4 7\n''') == 'YES\\nYES\\nYES'\n\nassert solution('''\n1 4\n5 2\n''') == 'NO'\n\nassert solution('''\n1 3\n5 1\n''') == 'YES'"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'YES'\nassert solution('1 1\\n4 5\\n5 11') == 'YES'\nassert solution('1 1\\n4 5\\n5 10') == 'NO'\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"8\"\nassert solution(\"6\") == \"8080\"\nassert solution(\"1\") == \"-1\"\n\"\"\""
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\") == \"462\"\nassert solution(\"6\\n2\") == \"8080\"\nassert solution(\"1\\n2\") == \"10\"\nassert solution(\"0\\n2\") == \"10\"\nassert solution(\"1\\n3\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '462'\nassert solution('6\\n') == '8080'\nassert solution('5\\n') == '-1'\nassert solution('4\\n') == '7979'"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == '46'\nassert solution(\"4\") == '82'\nassert solution(\"6\") == '8080'\nassert solution(\"8\") == '-1'\n\"\"\"\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == '4662'\nassert solution('4\\n') == '4662'\nassert solution('6\\n') == '8080'\n\"\"\"\n\nimport string"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == '462'\nassert solution(6) == '8080'\n\nassert solution('2') == '462'\nassert solution('6') == '8080'\n\nassert solution(3) == '-1'\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '462'\nassert solution('6') == '8080'\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '462'\nassert solution('3') == '121212'\nassert solution('4') == '373737'\nassert solution('5') == '873216'\nassert solution('6') == '1212121212121212'\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"6\"\nassert solution(\"13\") == \"113\"\nassert solution(\"1000000\") == \"109075991114311\"\nassert solution(\"5\") == \"25\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2') == '462'\nassert solution('6\\n4') == '8080'\nassert solution('1\\n1') == '-1'"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab?b\") == \"aabrbb\"\nassert solution(\"ab?b\") == \"aabrbb\"\nassert solution(\"ab?b\") == \"aabrbb\"\n\"\"\"\nimport math"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcd', 'ebceabazcd') == '2'\n\nassert solution('abc', 'xaybz') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == \"1 2\"\nassert solution(\"ebceabazcd\") == \"1 2\"\nassert solution(\"ab\") == \"1 2\"\nassert solution(\"a\") == \"1 2\"\nassert solution(\"\") == \"0 0\"\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab?b\") == \"abrbb\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"aab?b\") == \"aabrbb\"\nassert solution(\"a?bc?d?e?f?g\") == \"abcde\"\n\"\"\""
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcebazcd\") == \"abcd\"\nassert solution(\"ebcebazcd\") == \"cd\"\nassert solution(\"ebcebazcd\") == \"cd\"\nassert solution(\"ebcebazcd\") == \"cd\"\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcdefg\", \"abcefzg\") == \"abcdefg\", \"Wrong answer\"\nassert solution(\"abcd\", \"abcdefg\") == \"a\", \"Wrong answer\"\nassert solution(\"abcd\", \"abcde\") == \"1 2 3\", \"Wrong answer\"\nassert solution(\"abcd\", \"eabcdefg\") == \"2 3\", \"Wrong answer\"\nassert solution(\"abcd\", \"dabcdefg\") == \"1 2 3\", \"Wrong answer\"\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == \"2 1 3\"\nassert solution(\"ebceabazcd\") == \"1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\", \"ebceabazcd\") == \"1 2\"\nassert solution(\"abd\", \"abceabd\") == \"0\"\nassert solution(\"abc\", \"abceabd\") == \"2 3\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab?b\") == \"aabrbb\"\n\nprint(solution(\"ab?b\"))\n\n\n\"\"\"\n\nimport sys\n\nfrom collections import Counter\nfrom itertools import combinations\n\nsys.stdin = open(\"in.txt\")\nsys.stdout = open(\"out.txt\", \"w\")"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2\") == \"1 2\\n1 3\\n3 4\\n3 5\\n\"\nassert solution(\"8 5 2\") == \"4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n\"\nassert solution(\"8 4 2\") == \"4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n\"\n\n\"\"\"\n\nimport sys\nimport functools\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '-1'\nassert solution('5 3 2\\n') == '1 2\\n1 3\\n3 4\\n3 5\\n'\nassert solution('8 5 2\\n') == '-1'\nassert solution('8 4 2\\n') == '4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5'\nassert solution('4 3 1\\n') == '1 2\\n1 3\\n3 4\\n'\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 5 2\\n1 2\\n1 3\\n3 4\\n3 5\\n4 5\\n4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n\") == \"4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n\"\nassert solution(\"5 3 2\\n1 2\\n1 3\\n3 4\\n3 5\\n4 5\\n4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n\") == \"3 4\\n3 5\\n1 2\\n1 3\\n5 6\\n1 5\\n\"\nassert solution(\"8 5 2\\n1 2\\n1 3\\n3 4\\n3 5\\n4 5\\n4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n\") == \"1 2\\n1 3\\n3 4\\n3 5\\n1 2\\n1 3\\n5 6\\n1 5\\n\"\nassert solution(\"8 4 2\\n1 2\\n1 3\\n3 4\\n3 5\\n4 5\\n4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n\") == \"1 2\\n1 3\\n3 4\\n3 5\\n1 2\\n1 3\\n5 6\\n1 5\\n\"\nassert solution(\"8 4 2\\n1 2\\n1 3\\n3 4\\n3 5\\n4 5\\n4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5\\n\") == \"1 2\\n1 3\\n3 4\\n3 5\\n1 2\\n1 3\\n5 6\\n1 5\\n\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4 2\") == \"4 6\"\nassert solution(\"8 5 2\") == \"-1\"\nassert solution(\"8 4 2\") == \"4 8\"\nassert solution(\"4 3 2\") == \"-1\"\nassert solution(\"5 4 2\") == \"4 5\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 4 2\\n8 5 2\\n4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\\n1 5') == '1 2\\n1 3\\n3 4\\n3 5\\n4 8\\n4 8\\n4 8\\n5 7\\n2 3'\nassert solution('6 7 2\\n6 9 2\\n3 8\\n3 8\\n4 7\\n4 7\\n5 6\\n5 6\\n6 9\\n3 8') == '1 2\\n1 3\\n3 4\\n3 4\\n3 4\\n3 5\\n4 7\\n4 7\\n4 7\\n4 7\\n4 7\\n5 6\\n5 6\\n5 6\\n5 6\\n5 6\\n5 6'\nassert solution('4 5 1\\n4 5 1\\n3 4\\n4 3\\n4 3\\n5 6\\n4 5\\n5 6\\n5 4\\n5 4\\n5 4') == '1 2\\n3 4\\n4 5\\n5 6'\nassert solution('8 4 1\\n8 5 1\\n6 8\\n6 9\\n8 6\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\n5 7\\n6 9\\"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == \"1 2\\n1 3\\n3 4\"\nassert solution(\"8 5 2\") == \"-1\"\nassert solution(\"8 4 2\") == \"4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n4 5 6\") == \"2 3\\n5 6\"\nassert solution(\"1 2 3\\n4 5 6\\n8 7 9\") == \"2 3\\n5 6\\n8 7 9\"\n\n\"\"\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 2') == '1 2\\n1 3\\n3 4\\n3 5'\nassert solution('8 5 2') == '-1'\nassert solution('8 4 2') == '4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6'\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2 1\n''') == '''1 2\n1 3\n'''\nassert solution('''4 2 3\n''') == '''-1\n'''\nassert solution('''5 2 3\n''') == '''4 8\n5 7\n2 3\n8 1\n2 1\n5 6\n1 5\n'''\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\\n\") == \"1 2\\n1 3\\n3 4\\n3 5\"\nassert solution(\"8 5 2\\n\") == \"-1\"\nassert solution(\"8 4 2\\n\") == \"4 8\\n5 7\\n2 3\\n8 1\\n2 1\\n5 6\"\n\n\"\"\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\") == '6.4641016'\nassert solution(\"6 100\") == '1.0000000'\nassert solution(\"100 100\") == '3.2429391'"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\nassert solution(\"6 1\") == \"1.0000000\"\nassert solution(\"100 100\") == \"3.2429391\"\n\"\"\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\nassert solution(\"6 1\") == \"1.0000000\"\nassert solution(\"100 100\") == \"3.2429391\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\nassert solution(\"6 1\") == \"1.0000000\"\nassert solution(\"100 100\") == \"3.2429391\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 1''') == '6.4641016'\nassert solution('''6 1''') == '1.0000000'\nassert solution('''100 100''') == '3.2429391'\nassert solution('''100 100''') == '3.2429391'\nassert solution('''100 100''') == '3.2429391'\n'''"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == '6.4641016'\n\"\"\"\n\nimport math\n\ninp = list(map(float, input().split()))\nn = int(inp[0])\nr = int(inp[1])\n\nouter_r = r / math.sqrt(2)\nouter_r = math.floor(outer_r * 100) / 100\n\nprint(outer_r)\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '6.4641016'\nassert solution('6 1') == '1.0000000'\nassert solution('100 100') == '3.2429391'\nassert solution('100 99') == '3.2429391'\nassert solution('100 100.1') == '3.2429391'\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\nassert solution(\"6 1\") == \"1.0000000\"\nassert solution(\"100 100\") == \"3.2429391\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n\") == \"6.4641016\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''100''') == '50'\nassert solution('''199''') == '119.4'\nassert solution('''50''') == '50'\nassert solution('''199''') == '119.4'\n\n'''\n\n'''\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100\\n50\\n50\\n') == '50'\n\"\"\"\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100\\n50\\n50\\n\") == \"50\"\nassert solution(\"199\\n60\\n40\\n\") == \"119.4\"\n\n\"\"\"\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100\\n50\\n50') == '50'\n\"\"\""
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\n\n'''\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100\\n50\\n50') == '50'\n\"\"\"\n\nfrom typing import Callable, List, Tuple\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 50') == '50'\nassert solution('199 60 40') == '119.4'\nassert solution('123456') == '123456'"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100\\n50\\n50') == '50'\n\"\"\"\n\nl = int(input())\np, q = map(int, input().split())\nprint(l / 2 * (p + q) / (p - q))\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100\\n50\\n50\") == \"50\"\n\"\"\""
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 50 50\") == \"50\"\nassert solution(\"199 60 40\") == \"119.4\"\n\n\n\nhttps://app.codility.com/demo/results/trainingQ1A8YU-5BW/\n\nhttps://app.codility.com/demo/results/trainingQ1A8YU-5BW/"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2014 2016 2015\") == \"2015\"\nassert solution(\"1\\n2050\") == \"2050\"\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2014 2016 2015\") == \"2015\"\nassert solution(\"1\\n2050\") == \"2050\"\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2014 2016 2015\") == \"2015\"\nassert solution(\"1\\n2050\") == \"2050\"\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2014 2016 2015\") == \"2015\"\nassert solution(\"1\\n2050\") == \"2050\"\n\"\"\"\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2014 2016 2015') == '2015'\nassert solution('1\\n2050') == '2050'\n\n\n\n---\n\nThe faculty of Computer Science in Berland. In the social net \"TheContact!\" for each course of this faculty there is the special group whose name equals the year of university entrance of corresponding course of students at the university. \n\nEach of students joins the group of his course and joins all groups for which the year of student's university entrance differs by no more than x from the year of university entrance of this student, where x \u2014 some non-negative integer. A value x is not given, but it can be uniquely determined from the available data. Note that students don't join other groups. \n\nYou are given the list of groups which the student Igor joined. According to this information you need to determine the year of Igor's university entrance.\n\n\n-----Input-----\n\nThe first line contains the positive odd integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined. \n\nThe next line contains n distinct integers a_1, a_2,..., a_{n} (2010 \u2264 a_{i} \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\n\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n\n\n-----Output-----\n\nPrint the year of Igor's university entrance. \n\n\n-----Examples-----\nInput\n3\n2014 2016 2015\n\nOutput\n2015\n\nInput\n1\n2050\n\nOutput\n2050\n\n\n\n-----Note-----\n\nIn the first test the value x = 1. Igor entered the university in 2015. So he joined groups members of which are students who entered the university in 2014, 2015 and 2016.\n\nIn the second test the value x = 0. Igor entered only the group which corresponds to the year of his university entrance."
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2014 2016 2015') == '2015'\nassert solution('1\\n2050') == '2050'\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> None:\n        n = int(stdin[0])\n        x = 0\n        for year in stdin[1:]:\n            x += int(year)\n        print(x // n)\n        \n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2014 2016 2015\") == \"2015\"\nassert solution(\"1\\n2050\") == \"2050\"\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 2015\n\n\"\"\"\nimport sys"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2014 2016 2015\") == \"2015\"\nassert solution(\"1\\n2050\") == \"2050\"\n\"\"\"\nimport collections"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2014 2016 2015\\n\") == \"2015\"\nassert solution(\"1\\n2050\\n\") == \"2050\"\n\"\"\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5CY??Y\") == \"Yes\"\nassert solution(\"5?CYC?Y\") == \"Yes\"\nassert solution(\"5C?C?Y\") == \"Yes\"\nassert solution(\"5?C?C?Y\") == \"Yes\"\nassert solution(\"5C?C?Y\") == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'Yes'\nassert solution('C') == 'Yes'\nassert solution('CY') == 'No'\nassert solution('CYC') == 'Yes'\nassert solution('CYCM') == 'No'\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5CY??Y\") == \"Yes\"\nassert solution(\"5C?C?Y\") == \"Yes\"\nassert solution(\"5?CYC?C\") == \"Yes\"\nassert solution(\"5?C??MM\") == \"No\"\nassert solution(\"5?C?C?Y\") == \"No\"\n\n'''\n\nimport string"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nC??Y\") == \"Yes\"\nassert solution(\"5\\nC?C?Y\") == \"Yes\"\nassert solution(\"5\\n?CYC? \") == \"Yes\"\nassert solution(\"5\\nC??MM\") == \"No\"\nassert solution(\"5\\n?CYC? \") == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('CY??Y') == 'Yes'\nassert solution('C?C?Y') == 'Yes'\nassert solution('C??MM') == 'Yes'\nassert solution('C??M?C') == 'No'\nassert solution('C??MY') == 'Yes'\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"C?C?Y\") == \"Yes\"\nassert solution(\"C??MM\") == \"No\"\nassert solution(\"C??M\") == \"Yes\"\nassert solution(\"C?Y?Y?\") == \"Yes\"\nassert solution(\"C??M?Y\") == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5C?Y?\") == \"Yes\"\nassert solution(\"5C?YY\") == \"Yes\"\nassert solution(\"5C?YM\") == \"No\"\nassert solution(\"5C?C?Y\") == \"Yes\"\nassert solution(\"5?C?Y\") == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nCY??Y') == 'Yes'\nassert solution('5\\nC?C?Y') == 'Yes'\nassert solution('5\\n?CYC?') == 'Yes'\nassert solution('5\\nC??MM') == 'No'\nassert solution('5\\nC?C?Y') == 'No'\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5CY??Y') == 'Yes'\nassert solution('5?CYC?Y') == 'Yes'\nassert solution('5C??MM') == 'No'\nassert solution('5?CYC?Y') == 'Yes'\nassert solution('5C??MM') == 'No'\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CY??Y\") == \"Yes\"\nassert solution(\"C?C?Y\") == \"Yes\"\nassert solution(\"C??MM\") == \"No\"\nassert solution(\"C??YY\") == \"No\"\nassert solution(\"C?M?M\") == \"Yes\"\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 2 5 3') == '72900'\nassert solution('17 97 41 37 11') == '317451037'\n\"\"\""
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 5 3\") == \"72900\"\nassert solution(\"17 97 41 37 11\") == \"317451037\"\n\n'''"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1 2 5 3') == '72900'\nassert solution('17 97 41 37 11') == '317451037'\nassert solution('7 7 7 7 7') == '7'\nassert solution('13 39 55 14 33') == '2305363162'\nassert solution('1 1 1 1 1') == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"17 97 41 37 11\") == \"317451037\"\nassert solution(\"5 1 2 5 3\") == \"72900\"\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 5 3\") == \"72900\"\nassert solution(\"17 97 41 37 11\") == \"317451037\"\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 5 3\") == \"72900\"\nassert solution(\"17 97 41 37 11\") == \"317451037\""
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 2 5 3') == '72900'\nassert solution('17 97 41 37 11') == '317451037'\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 2 5 3') == '72900'\n\"\"\""
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 2 5 3') == '72900'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 2 5 3') == '72900'\nassert solution('17 97 41 37 11') == '317451037'\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"tabbat\"\nassert solution(\"4 2\") == \"oxxxxo\"\nassert solution(\"3 5\") == \"\"\nassert solution(\"9 4\") == \"ababwxyzijjizyxwbaba\"\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\nabc\\nab\\nxyz\") == 6\nassert solution(\"4 2\\no\\no\\nx\\ny\") == 6\nassert solution(\"3 5\\nhello\\ncodef\\norces\") == 0\nassert solution(\"9 4\\nabab\\nbaba\\nabcd\\bcde\\cdef\\defg\\wxyz\\zyxw\\ijji\") == 20"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"foo\") == \"foo\"\nassert solution(\"bar\") == \"bar\"\nassert solution(\"hello\") == \"lloh\"\nassert solution(\"banana\") == \"anana\"\nassert solution(\"baab\") == \"baab\"\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == ''\nassert solution(\"abc\") == 'abc'\nassert solution('aa') == 'aa'\nassert solution('abca') == 'aabcba'\nassert solution('abcc') == 'aabcba'\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5\") == 'abcd'\nassert solution(\"6 7 8 9 10\") == 'abcd'\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == 'abcd'\n\n\"\"\""
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\ntab\\none\\nbat') == '6\\ntabbat'\nassert solution('4 2\\noo\\nox\\nxo\\nxx') == '6\\noxxxxo'\nassert solution('3 5\\nhello\\ncodef\\norces') == '0'\nassert solution('9 4\\nabab\\nbaba\\nabcd\\nbcde\\ncdef\\ndefg\\nwxyz\\zyxw\\ijji') == '20\\nababwxyzijjizyxwbaba'\nassert solution('9 3\\nabab\\nbaba\\nabcd\\nbcde\\ncdef\\ndefg\\nwxyz\\zyxw\\ijji') == '20\\nababwxyzijjizyxwbaba'\n\n\"\"\""
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abab') == 'abab'\nassert solution('baba') == 'baba'\nassert solution('abcd') == 'abcd'\nassert solution('bcde') == 'bcde'\nassert solution('cdef') == 'cdef'\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\nhello\\ncodef\\norces\") == \"6\\noxxxxo\"\nassert solution(\"4 2\\noo\\nox\\nxo\\nxx\") == \"6\\noxxxxo\"\nassert solution(\"9 4\\nabab\\nbaba\\nabcd\\bcde\\ncdef\\defg\\nwxyz\\zyxw\\ijji\") == \"20\\nababwxyzijjizyxwbaba\"\nassert solution(\"3 5\\nhello\\ncodef\\norces\") == \"6\\noxxxxo\"\nassert solution(\"1 1\\nh\") == \"\"\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"0\"\n\nassert solution(\"3 3\") == \"tabbat\"\n\nassert solution(\"4 2\") == \"oxxxxo\"\n\nassert solution(\"9 4\") == \"20\"\n\nassert solution(\"hello\") == \"0\""
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\nhello\\ncodef\\norces\") == 20\nassert solution(\"4 2\\noo\\nox\\nxo\\nxx\") == 6\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\") == 1\n\"\"\"\n\n\"\"\"\nfrom typing import List\nimport sys\n\nn = int(sys.stdin.readline())\na = [int(x) for x in sys.stdin.readline().split()]\n\n\n\"\"\""
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 2\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"3\\n2 3 1\") == \"1\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4\"\nassert solution(\"4\\n1 1 2 3\") == \"5\"\nassert solution(\"4\\n1 10 20 30\") == \"9\"\n\"\"\"\n\nimport math\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\na = list(map(int, sys.stdin.readline().rstrip().split()))\n\ndp = [[0] * (n + 1) for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i + 1] = (a[i] - 1) * (a[i] + 1) // 2\n\nfor i in range(n):\n    for j in range(i, n):\n        dp[i][j + 1] = math.inf\n        for k in range(i, j):\n            dp[i][j + 1] = min(dp[i][j + 1], dp[i][k] + dp[k + 1][j + 1] + (a[i] - 1) * (a[j] + 1))\n\nprint(dp[0][n])\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 2\") == \"1\"\nassert solution(\"3\\n1000000000 1000000000 1000000000\") == \"1999982505\"\n\n\n\n\n'''\nfrom math import gcd\nfrom functools import reduce\nfrom operator import mul\nfrom collections import Counter"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\") == \"1\"\nassert solution(\"3\\n1000000000 1000000000 1000000000\") == \"1999982505\"\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3 2\") == \"1\"\nassert solution(\"3\\n1000000000 1000000000 1000000000\") == \"1999982505\"\n\"\"\"\n\n\nimport sys\nimport math\nimport bisect\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 2') == '1'"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 2\") == '1'\nassert solution(\"4\\n1 1000000000 1000000000 1000000000\") == '1999982505'\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 2') == '1'\nassert solution('3\\n1 2 3') == '2'\nassert solution('3\\n1 2 3') == '3'\n\n'''\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 3 2') == '1'\nassert solution('3\\n1000000000 1000000000 1000000000') == '1999982505'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\n\na = list(map(int, sys.stdin.readline().split()))\n\ndp = [0]*(n+1)\n\nfor i in range(n):\n    if i == 0:\n        dp[1] = abs(a[0] - 1)\n        for j in range(2, n):\n            dp[j] = min(dp[j-1] + abs(a[j] - a[j-1]), dp[j] + 1)\n    else:\n        for j in range(i, n):\n            if j == i:\n                dp[j+1] = min(dp[j] + abs(a[j] - a[j-1]), dp[j] + 1)\n            else:\n                dp[j+1] = min(dp[j] + abs(a[j] - a[j-1]), dp[j+1] + 1)\n\nprint(dp[-1])\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"2 1 3 1\") == \"2\"\nassert solution(\"420 420\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 3 1\") == \"1\"\nassert solution(\"2 420\") == \"2\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"1 2 3 5\") == \"1\"\nassert solution(\"2 420\") == \"2\"\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 3 1\") == \"1\"\nassert solution(\"420 420\") == \"2\"\n\"\"\"\nimport time\n\nimport sys"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 1 3 1') == '1'\nassert solution('4\\n420 420') == '2'\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 1 3 1\\n2\\n420 420\") == \"1\"\nassert solution(\"5\\n2 2 1 2 1\\n2\\n420 420\") == \"2\"\nassert solution(\"6\\n2 3 1 2 1\\n2\\n420 420\") == \"2\"\nassert solution(\"7\\n2 4 1 2 1\\n2\\n420 420\") == \"3\"\nassert solution(\"8\\n2 5 1 2 1\\n2\\n420 420\") == \"2\"\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1 3 1') == '1'\nassert solution('420 420') == '2'\nassert solution('1 1 1 1') == '1'\n\n\"\"\"\nfrom typing import List, Dict, Tuple\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n4\\n2 1 3 1\") == \"1\"\nassert solution(\"2\\n420 420\") == \"2\""
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 3 1') == 1\n\nassert solution('2 420') == 2\n\nassert solution('2 420 420') == 2\n\nassert solution('2 4 2') == 2\n\n\"\"\"\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 3 1\") == \"1\"\nassert solution(\"420 420\") == \"2\"\n\"\"\"\nimport collections"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 1 3 1') == '1'\nassert solution('2\\n420 420') == '2'\nassert solution('2\\n420 420') == '2'\n\n\n\"\"\"\nimport numpy as np\nfrom typing import List\n\n\nclass Passwd(object):\n    def __init__(self, length: int, password: List[int]):\n        self.length = length\n        self.password = np.array(password, dtype=np.int32)\n        self.temp = self.password.copy()\n        self.pick_i = 0\n\n    def pick(self):\n        if self.pick_i == self.length:\n            return False\n        else:\n            self.pick_i += 1\n            return True\n\n    def get_first_match_index(self):\n        for i in range(self.length - 1):\n            if self.password[i]!= self.password[i + 1]:\n                return i\n        return self.length - 1\n\n    def remove_match(self):\n        i = self.get_first_match_index()\n        self.password[i] = self.password[i] + self.password[i + 1]\n        self.password = np.delete(self.password, i + 1)\n        self.length -= 1\n\n    def operate(self):\n        if self.pick():\n            i = self.get_first_match_index()\n            self.password[i] = self.password[i] + self.password[i + 1]\n            self.password = np.delete(self.password, i + 1)\n            self.length -= 1\n        else:\n            self.remove_match()\n\n    def return_password(self):\n        return self.length\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n0 0\\n0 0\\n0 0\") == \"NIE\"\nassert solution(\"2 3\\n7 7 7\\n7 7 10\") == \"TAK\\n1 3\"\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n0 0\\n0 0\\n0 0') == 'NIE'\nassert solution('2 3\\n7 7 7\\n7 7 10') == 'TAK\\n1 3'\nassert solution('2 3\\n7 7 7\\n7 7 10') == 'NIE'\n\n\n\"\"\"\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NIE'\nassert solution('5 4') == 'TAK'\n\n'''"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 2\n0 0\n0 0\n0 0''') == 'NIE'\n\nassert solution('''2 3\n7 7 7\n7 7 10''') == 'TAK'\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n0 0\\n0 0\\n0 0\") == 'NIE'\nassert solution(\"2 3\\n7 7 7\\n7 7 10\") == 'TAK\\n1 3'"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n0 0\\n0 0\\n0 0\") == \"NIE\"\nassert solution(\"2 3\\n7 7 7\\n7 7 10\") == \"TAK\\n1 3\""
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n0 0\\n0 0\\n0 0\") == 'NIE'\nassert solution(\"2 3\\n7 7 7\\n7 7 10\") == 'TAK\\n1 3'\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\") == \"TAK\"\nassert solution(\"2 3\\n7 7 7\\n7 7 10\") == \"TAK\"\nassert solution(\"2 3\\n7 7 7\\n7 7 10\\n0 0 0\") == \"TAK\"\n\"\"\"\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n7 7 7\\n7 7 10\") == 'TAK'\nassert solution(\"3 2\\n7 7 7\\n7 7 10\") == 'NIE'\n\n\n---\n\n\u0414\u0438\u043c\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u043c\u0438\u0431\u0443\u0434\u0438\u043d\u043e\u043a \u043d\u0430 \u0440\u0430\u0439\u043e\u043d\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u0443 \u0437\u0435\u043c\u043b\u044f\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0441\u0435\u043c\u0438\u0431\u0443\u0434\u0438\u043d\u043e\u043a \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u0432 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0441 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0434\u043e \u0434\u043e\u0431\u044b\u0447\u0438. \u0414\u0438\u043c\u0430 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043b\u0435\u0437\u0442\u0438 \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0440\u0430\u0442\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0443 \u0432\u0441\u0435\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438. \u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0432 \u043f\u0443\u0441\u0442\u043e\u0439 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0442\u043e\u044f\u0442 \u0432\u0441\u0435 \u0441\u0435\u043c\u0438\u0431\u0443\u0434\u0438\u043d\u043e\u043a.\n\n\u0412\u0441\u0435\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0445\u043e\u0434\u0430 \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u0435\u043c\u0438\u0431\u0443\u0434\u0438\u043d\u043a\u0430\u043c.\n\n\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0430\u0439\u043e\u043d\u0435? \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0438\u0445 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0445\u043e\u0434\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n \u0438 m (1 \u2264 n, m \u2264 500) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0443\u0434\u0438\u043d\u043a\u043e\u0432 \u0438 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u044b \u043f\u0430\u0440\u044b \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b: \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043e \u0434\u043e\u0431\u044b\u0447\u0438 \u0438 \u043c\u0430\u0441\u0441\u0430 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 \u0431\u0443\u0434\u0438\u043d\u043e\u043a\u0435. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 1000.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043c\u0430\u0441\u0441\u0430\u043c\u0438 \u0438 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f\u043c\u0438 \u0434\u043e \u0434\u043e\u0431\u044b\u0447\u0438 \u0432 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445.\n\n\n---\n\n\u0414\u0438\u043c\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u043c\u0438\u0431\u0443\u0434\u0438\u043d\u043e\u043a \u043d\u0430 \u0440\u0430\u0439\u043e\u043d\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u0443 \u0437\u0435\u043c\u043b\u044f\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0441\u0435\u043c\u0438\u0431\u0443\u0434\u0438\u043d\u043e\u043a \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u0432 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0441 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0434\u043e \u0434\u043e\u0431\u044b\u0447\u0438. \u0414\u0438\u043c\u0430 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043b\u0435\u0437\u0442\u0438 \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0440\u0430\u0442\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0443 \u0432\u0441\u0435\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438. \u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0432 \u043f\u0443\u0441\u0442\u043e\u0439 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0442\u043e\u044f\u0442 \u0432\u0441"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n0 0\\n0 0\\n0 0') == 'NIE'\nassert solution('2 3\\n7 7 7\\n7 7 10') == 'TAK\\n1 3'\nassert solution('2 3\\n8 8 10\\n8 8 10') == 'TAK\\n1 3'\nassert solution('1 1\\n1 1') == 'TAK\\n1 1'\nassert solution('3 2\\n0 0\\n0 0\\n0 0') == 'NIE'\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(contest) == 10\nprint(solution(son))\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"contest\") == \"10\"\n\"\"\""
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"contest\", \"son\") == \"10\"\n\"\"\""
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('contest') == 10\nassert solution('son') == -1\n\"\"\"\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"contest\") == 10\nassert solution(\"son\") == -1\n\"\"\"\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('contest') == '10'\nassert solution('son') == '-1'\nassert solution('contest') == '10'\nassert solution('co') == '-1'\nassert solution('cont') == '10'\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"contest\") == \"10\"\nassert solution(\"son\") == \"10\"\nassert solution(\"\") == \"10\"\nassert solution(\"abc\") == \"10\"\nassert solution(\"bb\") == \"1\"\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('contest') == 10\nassert solution('son') == 10\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('contest') == 10\nassert solution('son') == -1\n\n---------------------\n5.7: Integer Queries\n---------------------\nGiven an array of integers A, you are initially positioned at the first index of the array.\n\nIn one step you can jump from index i to index:\n\ni + 1 where: 0 <= i < A.length - 1.\ni - 1 where: 0 <= i < A.length - 1.\nj where A[i] == A[j] and i!= j where: 0 <= j < A.length - 1.\nIn that way, you can always arrive at an index with value equal to the length of the array.\n\nWrite a function that returns the minimum number of steps to reach the array A with length equal to the value of A.length.\n\nYou start from index 0.\n\nNote: Given an array of integers, the task is to find the minimum number of steps to reach the given array from index 0.\n\nInput Format\nThe first line contains the number of test cases T.\nThe next T lines each contain an integer N, A[0], A[1], \u2026, A[N-1].\n\nConstraints\n1 <= T <= 10^5\n1 <= A[i] <= 10^7\n\nOutput Format\nFor each test case, print the minimum number of steps needed to reach the given array A.\n\nSample Input 0\n4\n4\n4\n4\n4\n\nSample Output 0\n4\n3\n2\n1\n\nExplanation 0\nIn the first test case, one has to take 0, 1, 2 or 3 steps. Note that the starting index is always 0.\n\nSample Input 1\n3\n4\n4\n3\n\nSample Output 1\n4\n3\n1\n\nExplanation 1\nIn the second test case, one has to take 3 or 4 steps.\n\nSample Input 2\n3\n4\n5\n4\n\nSample Output 2\n3\n2\n2\n\nExplanation 2\nIn the third test case, one has to take 1 or 2 steps.\n\nSample Input 3\n5\n4\n4\n3\n4\n4\n\nSample Output 3\n4\n3\n3\n3\n4\n\n-----------------------\n5.8: Integer Queries II\n-----------------------\nGiven an array A of non-negative integers, you are initially positioned at the first index of the array.\n\nIn one step, you can jump from index i to index:\n\ni + 1 where: 0 <= i < A.length - 1.\ni - 1 where: 0 <= i < A.length - 1.\nj where A[i] == A[j] and i!= j where: 0 <= j < A.length - 1.\nIn that way, you can always arrive at an index with value equal to the length of the array.\n\nNow, you can only jump in one direction, either forward or backward.\nWrite a function to find the minimum number of steps to reach the last index of the array.\n\nInput Format\nThe first line contains an integer T, the number of test cases.\nThe next T lines each contain an integer N, A[0], A[1], \u2026, A[N-1].\n\nConstraints\n1 <= T <= 1000\n1 <= A[i] <= 1000\n\nOutput Format\nFor each test case, print the minimum number of steps needed to reach the last index.\n\nSample Input 0\n2\n6\n1 3 5 3 1\n4\n3 5 3\n\nSample Output 0\n4\n2\n\nExplanation 0\nIn the first test case, you need to take 4 steps to reach the last index.\nIn the second test case, you need to take 2 steps to reach the last index.\n\nSample Input 1\n1\n1\n\nSample Output 1\n0\n\nExplanation 1\nIn the first test case, you need to take 0 steps to reach the last index.\n\n-----------------------\n5.9: Min Cost Path\n-----------------------\nYou are given a square matrix of size N. You have to find the sum of its elements and find the minimum cost to travel from (0, 0) to (N - 1, N - 1) by moving right or down in the matrix.\n\nA right move can be done only if the position is inside the matrix, otherwise the move is forbidden. Similarly, a down move can be done only if the position is inside the matrix, otherwise the move is forbidden.\n\nWrite a function, which accepts the matrix as input, and outputs the sum of its elements and minimum cost to travel from (0, 0) to (N - 1, N - 1) by moving right or down in the matrix.\n\nNote:\n\n1. Assume that the matrix contains only integers.\n2. Assume that the matrix contains only one path from (0, 0) to (N - 1, N - 1).\n\nInput Format:\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N.\nThe next N lines contain N space-separated integers denoting the elements of the matrix.\n\nOutput Format:\nFor each test case, print a single line containing three space-separated integers:\n\n- The sum of the elements of the matrix.\n- The cost to travel from (0, 0) to (N - 1, N - 1).\n- The minimum cost to travel from (0, 0) to (N - 1, N - 1).\n\nConstraints:\n1 <= T <= 10\n1 <= N <= 100\n1 <= matrix[i][j] <= 100\n\nSample Input 0\n1\n4\n1 2 3 4\n\nSample Output 0\n10\n3\n\nExplanation 0\nIn the first test case, the sum of the elements of the matrix is 1 + 2 + 3 + 4 = 10, and the cost to travel from (0, 0) to (N - 1, N - 1) is 3.\n\nSample Input 1\n2\n3\n4 2 5\n3\n1 1 2 2\n1\n2 3\n\nSample Output 1\n12\n4\n\nExplanation 1\nIn the first test case, the sum of the elements of the matrix is 4 + 5 = 9, and the cost to travel from (0, 0) to (N - 1, N - 1) is 3.\n\nSample Input 2\n2\n3\n4 2 5\n3\n1 1 2 2\n1\n2 3\n\nSample Output 2\n10\n3\n\nExplanation 2\nIn the second test case, the sum of the elements of the matrix is 4 + 5 + 5 = 14, and the cost to travel from (0, 0) to (N - 1, N - 1) is 3.\n\n-----------------------\n5.10: Trie Construction\n-----------------------\nWrite a function that, given an array of unique strings, constructs a Trie and returns it.\n\nEach node of the Trie (except the root node) has a character and an array of children.\n\nThe character is the first character of the string stored at the corresponding node, and each child of the node has a character and an array of children.\n\nIt is guaranteed that the input array will be non-empty.\n\nThe Trie has the following properties:\n\n- It is empty except for the root node.\n- There is exactly one node for each string in the input array.\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 3\\n3 4\\n1 4\") == \"YES\"\nassert solution(\"4 4\\n3 1\\n2 3\\n3 4\\n1 2\") == \"NO\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 3\\n3 4\\n1 4') == 'NO'\nassert solution('10 4\\n4 3\\n5 10\\n8 9\\n1 2') == 'YES'\nassert solution('3 2\\n1 2\\n2 3') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 3\\n3 4\\n1 4\\n\") == \"YES\"\nassert solution(\"10 4\\n4 3\\n5 10\\n8 9\\n1 2\\n\") == \"YES\"\nassert solution(\"3 2\\n1 2\\n2 3\\n\") == \"NO\"\n\"\"\"\n\nimport sys\nimport functools\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3\\n3 4\\n1 4\") == \"YES\"\nassert solution(\"10 4\\n4 3\\n5 10\\n8 9\\n1 2\\n2 3\") == \"YES\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"NO\"\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3\\n3 4\\n1 4\") == \"YES\"\nassert solution(\"4 4\\n3 1\\n2 3\\n3 4\\n1 2\") == \"NO\"\nassert solution(\"10 4\\n4 3\\n5 10\\n8 9\\n1 2\") == \"YES\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 3\\n3 4\\n1 4') == 'YES'\nassert solution('4 4\\n3 1\\n2 3\\n3 4\\n1 2') == 'NO'\n\"\"\""
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 3\\n3 4\\n1 4\") == \"YES\"\nassert solution(\"4 4\\n3 1\\n2 3\\n3 4\\n1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3\n1 3\n3 4\n1 4''') == 'YES'\n\nassert solution('''4 4\n3 1\n2 3\n3 4\n1 2''') == 'NO'\n\nassert solution('''10 4\n4 3\n5 10\n8 9\n1 2''') == 'YES'\n\nassert solution('''3 2\n1 2\n2 3''') == 'NO'"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\\n4 3\\n5 10\\n8 9\\n1 2\\n\") == \"YES\"\nassert solution(\"3 2\\n1 2\\n2 3\\n\") == \"NO\"\n\n\n\n--------------------------------------\n\n\u041c\u043e\u0439 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u043a\u043e\u0434:\n\nimport sys"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3\\n3 4\\n1 4\") == \"YES\"\nassert solution(\"10 4\\n4 3\\n5 10\\n8 9\\n1 2\") == \"YES\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AprilFool') == 'AprilFool'\nassert solution('Colin' 'O' 'Shaughnessy') == 'Colin' \nassert solution('Al' 'B' 'i' 'e' 'S') == 'AlBbeS'\nassert solution('April' 'Fool' '2020' '2021') == 'AprILFooL'\n\nprint(solution('AprilFool'))\nprint(solution('Colin' 'O' 'Shaughnessy'))\nprint(solution('Al' 'B' 'i' 'e' 'S'))\nprint(solution('April' 'Fool' '2020' '2021'))\n\n\"\"\"\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('AbCdEfGh') == 'ABCDEFGH'\nassert solution('SpEnT') == 'SpenT'\nassert solution('A') == 'A'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AprilFool\") == \"AprILFooL\"\nprint(solution(\"AprilFool\"))\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AprilFool') == 'AprILFooL'\nassert solution('A') == 'A'\n\"\"\"\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AprilFool\") == \"AprILFooL\"\n\"\"\"\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AprilFool') == 'AprilFool'\nassert solution('HELLo') == 'Hello'\nassert solution('foobar') == 'Foobar'\n\"\"\"\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"April Fool\") == \"April Fool\"\n\"\"\"\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AprilFool\") == \"AprILFooL\"\n'''\n\n\nimport sys\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AprilFool\") == \"AprILFooL\"\n\nInput\n\nrandom.py\n7\n\nOutput\n\nrandom\n\n-----Notes-----\nrandom.py\n\n--\n\nThis is a sample test file\nwith some clude notes for you\nto get started.\n\n\"\"\"\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"April Fool\") == \"AprilFooL\"\n------------------\nInput\nBEDS\n1\n\nOutput\nBED\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111000\") == \"Draw\"\nassert solution(\"110110\") == \"First\"\nassert solution(\"10010011\") == \"Second\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111000\") == \"First\"\nassert solution(\"00101101\") == \"Second\"\nassert solution(\"01100010\") == \"Draw\"\nassert solution(\"01100011\") == \"First\"\n\nprint(\"All test cases passed.\")\n\n-----Solution-----\n\nx = stdin.split()[0]\ny = stdin.split()[1]"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"110110\") == \"First\"\nassert solution(\"111000\") == \"Second\"\nassert solution(\"10010011\") == \"Draw\"\n\"\"\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"110110\") == \"First\"\nassert solution(\"111000\") == \"Second\"\nassert solution(\"01100010\") == \"Draw\"\n\n\"\"\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0111\") == \"First\"\nassert solution(\"1110\") == \"Second\"\nassert solution(\"1111\") == \"Draw\"\nassert solution(\"110110\") == \"Draw\"\n\"\"\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'Draw'\nassert solution('11110') == 'First'\nassert solution('1110111010') == 'Second'"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0') == 'Draw'\nassert solution('11100010') == 'Second'\nassert solution('1110010010') == 'First'\nassert solution('111001111010') == 'First'\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11101\") == \"First\"\nassert solution(\"11110\") == \"Second\"\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"01100010\") == \"First\"\nassert solution(\"01100101\") == \"Second\"\nassert solution(\"01101110\") == \"Draw\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11101\") == \"Second\"\nassert solution(\"01110110\") == \"Draw\"\nassert solution(\"11110\") == \"First\"\n\"\"\""
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n-1 1 1 0 0 -1\") == '2\\n0 0 0 0 0 0'\nassert solution(\"3\\n100 100 101\") == '3\\n101 100 100'\nassert solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\") == '5\\n-10 -10 -9 -9 -9 -9 -9'\n\n\"\"\""
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 1 1 0 0 -1\") == \"2\\n0 0 0 0 0 0\"\nassert solution(\"3\\n100 101\") == \"101 100 100\"\nassert solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\") == \"5\\n-10 -10 -9 -9 -9 -9 -9\""
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n-1 1 1 0 0 -1\") == \"2\\n0 0 0 0 0 0 \"\nassert solution(\"3\\n100 100 101\") == \"3\\n101 100 100\"\nassert solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\") == \"5\\n-10 -10 -9 -9 -9 -9 -9\"\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"-1 1 1 0 0 -1\") == \"2 0 0 0 0 0\"\nassert solution(\"100 100 101\") == \"101 100 100\"\nassert solution(\"-10 -9 -10 -8 -10 -9 -9\") == \"5 -10 -9 -9 -9 -9 -9\"\nassert solution(\"7 -10 -10 -10 -10 -10 -10 -9\") == \"5 -10 -10 -9 -9 -9 -9 -9\"\n\n\"\"\"\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n-1 1 1 0 0 -1\\n\") == '2\\n0 0 0 0 0 0'\nassert solution(\"3\\n100 101\\n\") == '3\\n101 100 100'\nassert solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\\n\") == '5\\n-10 -10 -9 -9 -9 -9 -9'\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 1 0 0 1') == '5\\n0 0 0 0 0 0'\nassert solution('3\\n101 100 101') == '3\\n101 100 100'\nassert solution('7\\n-10 -9 -10 -8 -10 -9 -9') == '5\\n-10 -10 -9 -9 -9 -9 -9'\nassert solution('6\\n-1 1 1 0 0 -1') == '2\\n0 0 0 0 0 0'\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == result\n\nprint(solution(stdin))\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n-10 -9 -10 -8 -10 -9 -9\\n') == '5\\n-10 -10 -9 -9 -9 -9 -9'\nassert solution('6\\n100 100 101 0 0 -1\\n') == '2\\n100 0 0 0 0 0'\nassert solution('7\\n-10 -10 -9 -9 -9 -9 -9\\n') == '5\\n-10 -10 -9 -9 -9 -9 -9'\n\"\"\""
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0 0\\n\") == \"0 0 0 0 0\\n\"\nassert solution(\"6\\n-1 1 1 0 0 -1\\n\") == \"2 0 0 0 0 0\\n\"\nassert solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\\n\") == \"5 -10 -9 -9 -9 -9 -9 -9\\n\"\n\nstdin = stdin.splitlines()\nn = int(stdin[0])\nx = [int(x) for x in stdin[1].split()]\ncount = 0\nindex = 0\na = 0\nb = 0\nc = 0\nfor i in range(n):\n    count += x.count(x[i])\n    if x[i] > b:\n        b = x[i]\n        index = i\n    if x[i] < a:\n        a = x[i]\n        index = i\nc = (b + a) / 2\nfor i in range(n):\n    if x[i]!= c and x[i]!= b and x[i]!= a:\n        print(a, b, c)\nprint(count)\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n-1 1 1 0 0 -1\") == \"2\\n0 0 0 0 0 0\"\nassert solution(\"3\\n100 100 101\") == \"3\\n101 100 100\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"zeus\") == \"18\"\nassert solution(\"map\") == \"35\"\nassert solution(\"ares\") == \"34\"\nprint('Passed all tests...')\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"zeus\") == 18\nassert solution(\"map\") == 34\nassert solution(\"ares\") == 34\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('zeus') == '18'\nassert solution('map') == '35'\nassert solution('ares') == '34'\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"zeus\") == 18\nassert solution(\"map\") == 35\nassert solution(\"ares\") == 34\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('zeus') == '18'\nassert solution('map') == '35'\nassert solution('ares') == '34'\n\"\"\""
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"zeus\") == 18\nassert solution(\"map\") == 35\nassert solution(\"ares\") == 34\n\"\"\""
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"zeus\") == \"18\"\nassert solution(\"map\") == \"35\"\nassert solution(\"ares\") == \"34\"\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('zeus') == '18'\nassert solution('map') == '35'\nassert solution('ares') == '34'\nassert solution('one') == '9'\n\"\"\""
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('zeus') == 18\nassert solution('ares') == 34\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"zeus\") == 18\nassert solution(\"map\") == 35\nassert solution(\"ares\") == 34\nassert solution(\"tatus\") == 13\nassert solution(\"z\") == 2\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3\\n5\\n1\\n8\\n\") == \"0 4\"\n\nassert solution(\"3\\n1\\n6\\n7\\n25\\n\") == \"4 9\"\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n6\\n7\\n25\") == \"0 4\"\nassert solution(\"6\\n4\\n9\\n10\\n89\") == \"5 9\"\nassert solution(\"6\\n4\\n9\\n10\\n89\") == \"5 9\"\n\"\"\"\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a_1, a_2, k_1, k_2, n) == (0, 4)\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 6 7\") == \"0 4\"\nassert solution(\"3 1 6 7\") == \"0 4\"\nassert solution(\"6 7\") == \"5 9\"\nassert solution(\"6 0\") == \"0 0\"\nassert solution(\"1 0\") == \"0 0\"\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3\\n5\\n1\\n8\\n') == '0 4'\nassert solution('3\\n1\\n6\\n7\\n25\\n') == '4 9'\nassert solution('6\\n4\\n9\\n10\\n89\\n') == '5 9'"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''\n2\n3\n5\n1\n8\n'''\n) == '0 4'\n\nassert solution(\n'''\n3\n1\n6\n7\n25\n'''\n) == '4 9'\n\nassert solution(\n'''\n6\n4\n9\n10\n89\n'''\n) == '5 9'\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ('0 4', '')\nassert solution('4 3') == ('0 4', '')\nassert solution('3 1') == ('1 0', '2')\nassert solution('3 0') == ('0 0', '1')\nassert solution('1 0') == ('0 0', '1')\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3\\n5\\n1\\n8\") == \"0 4\"\nassert solution(\"3\\n1\\n6\\n7\\n25\") == \"4 9\"\nassert solution(\"6\\n4\\n9\\n10\\n89\") == \"5 9\""
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n3\n5\n1\n8\n''') == '0 4'\nassert solution('''\n3\n1\n6\n7\n25\n''') == '4 9'\nassert solution('''\n6\n4\n9\n10\n89\n''') == '5 9'"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3\n5\n1\n8\n''') == '0 4'\nassert solution('''\n3\n1\n6\n7\n25\n''') == '4 9'\nassert solution('''\n6\n4\n9\n10\n89\n''') == '5 9'\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BGGBG\") == \"GBGGB\"\nassert solution(\"GGGB\") == \"GGBGB\"\nassert solution(\"BBGBG\") == \"BBGGB\"\nassert solution(\"BBBGB\") == \"BBBBG\"\nassert solution(\"GGBBG\") == \"GGGGB\"\n\"\"\"\n\nn, t = map(int, input().split())\ns = input()"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BGGBG\") == \"GBGGB\"\nassert solution(\"GGGB\") == \"GGBGB\""
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BBGGBB\") == \"BGBGB\"\nassert solution(\"GGGB\") == \"GGGB\"\nassert solution(\"GBGGB\") == \"BGBGB\"\n\"\"\"\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1\\nBGGBG\\n\") == \"GBGGB\"\nassert solution(\"5 2\\nBGGBG\\n\") == \"GGBGB\"\nassert solution(\"4 1\\nGGGB\\n\") == \"GGGB\"\n\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BGGBG\") == \"GBGGB\"\nassert solution(\"GGGB\") == \"GGGB\"\n\"\"\""
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BGGBG\") == \"GBGGB\"\nassert solution(\"GGGB\") == \"GGBGB\"\nprint('PASSED')\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BGGGGBBBBB\") == \"GBGGB\"\nassert solution(\"GBGGGBBGBB\") == \"GGGBGBB\"\n\"\"\"\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('BGGBG') == 'GBGGB'\nassert solution('GGGB') == 'GGGB'\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BGGBG') == 'GBGGB'"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BGGBG\") == \"GGBGB\"\nassert solution(\"GGGB\") == \"GGGB\""
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n\") == 3\nassert solution(\"6 2\\n\") == 875000008\nassert solution(\"60 5\\n\") == 237178099\nassert solution(\"100 6\\n\") == 9\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\") == \"3\"\nassert solution(\"4 2\") == \"875000008\"\nassert solution(\"4 3\") == \"237178099\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 5\") == \"1\"\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 1') == '3'\nassert solution('6 2') == '875000008'\nassert solution('60 5') == '237178099'\n\n\"\"\"\nfrom typing import List\nfrom fractions import Fraction"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3 10\") == \"5\"\nassert solution(\"15 5\") == \"237178099\"\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 1\") == \"3\"\nassert solution(\"6 2\") == \"875000008\"\nassert solution(\"60 5\") == \"237178099\"\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1') == 2\nassert solution('6 3') == 9\nassert solution('9 7') == 5\nassert solution('10 6') == 3\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1\") == 3\nassert solution(\"6 2\") == 875000008\nassert solution(\"60 5\") == 237178099\n\"\"\"\n\nfrom functools import reduce\nfrom operator import mul\n\nfrom typing import Union\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 1') == 3\nassert solution('6 2') == 875000008\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\") == \"3\"\nassert solution(\"6 2\") == \"875000008\"\nassert solution(\"60 5\") == \"237178099\"\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1\") == 3\nassert solution(\"6 2\") == 875000008\nassert solution(\"60 5\") == 237178099\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"1 2\"\n) == \"101\"\n\nassert solution(\n    \"1 2\"\n) == \"101\"\n\nassert solution(\n    \"4 8\"\n) == \"110110110101\"\n\nassert solution(\n    \"4 10\"\n) == \"11011011011011\"\n\nassert solution(\n    \"1 5\"\n) == \"11011011011011\""
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n4 8\\n') == '101\\n11101101101\\n'\nassert solution('1 5\\n4 8\\n') == '-1\\n'\nassert solution('1 5\\n3 8\\n') == '101101101\\n'\nassert solution('1 5\\n3 5\\n
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n') == '101'\nassert solution('1 5\\n') == '11011011011011'\nassert solution('4 10\\n') == '11011011011011011'\nassert solution('4 8\\n') == '1101101101101'\n\"\"\"\n\nfrom math import log, ceil\n\nn, m = map(int, input().split())"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\") == \"11011011011011\"\nassert solution(\"1 5\") == \"101\"\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == '101'\nassert solution('4 8') == '110110110101'\nassert solution('1 5') == '-1'\nassert solution('2 4') == '10111'\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n4 8') == '101\\n'\nassert solution('1 2\\n4 10') == '11011011011011\\n'\nassert solution('1 5\\n4 8') == '-1\\n'\nassert solution('4 10\\n1 8') == '11011011011011\\n'\n\"\"\"\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n') == '101'\nassert solution('4 8\\n') == '110110110101'\nassert solution('4 10\\n') == '11011011011011'\nassert solution('1 5\\n') == '-1'\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\") == \"110110110101\""
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n4 8\") == \"101\\n\"\n\nassert solution(\"1 5\\n4 8\") == \"-1\\n\"\nassert solution(\"1 2\\n4 10\") == \"11011011011011\\n\"\nassert solution(\"1 2\\n4 12\") == \"110110110110111101\\n\"\nassert solution(\"1 2\\n5 11\") == \"11011011011011111101\\n\"\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5, 8) == '110110110101'\nassert solution(1, 2) == '101'\nassert solution(4, 10) == '11011011011011'\nassert solution(1, 5) == '-1'\n\nprint(\"Everything ok\")\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '18 2'\n) == '3 6 9'"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n4 8\\n16 32\\n64 128\\n512 1024\\n2048') == '1 2\\n4 8\\n16 32\\n64 128\\n128 256\\n512 1024\\n2048'\nassert solution('4 8\\n16 32\\n64 128\\n512 1024\\n2048') == '0 0\\n16 32\\n64 128\\n128 256\\n512 1024\\n2048'\nassert solution('1 2\\n4 8\\n16 32\\n64 128\\n512 1024\\n2048') == '1 2\\n4 8\\n16 32\\n64 128\\n128 256\\n512 1024\\n2048'\nassert solution('4 8\\n16 32\\n64 128\\n512 1024\\n2048') == '0 0\\n16 32\\n64 128\\n128 256\\n512 1024\\n2048'\nassert solution('1 2\\n4 8\\n16 32\\n64 128\\n512 1024\\n2048') == '1 2\\n4 8\\n16 32\\n64 128\\n128 256\\n512 1024\\n2048'\n\n-----Explanation-----\n\nIn the first case, there are only 3 students who took part in the olympiad: (18, 16, 8). By the rules there are three winners and no loser.\n\nIn the second case, there are 4 students who took part in the olympiad: (18, 16, 8, 4). By the rules there are three winners and no loser.\n\nIn the third case, there are 5 students who took part in the olympiad: (9, 16, 8, 4, 1). By the rules there are four winners and no loser.\n\nIn the fourth case, there are 6 students who took part in the olympiad: (1, 2, 8, 4, 16, 32). By the rules there are five winners and no loser.\n\nIn the fifth case, there are 7 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64). By the rules there are six winners and no loser.\n\nIn the sixth case, there are 8 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128). By the rules there are seven winners and no loser.\n\nIn the seventh case, there are 9 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512). By the rules there are eight winners and no loser.\n\nIn the eighth case, there are 10 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024). By the rules there are nine winners and no loser.\n\nIn the ninth case, there are 11 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048). By the rules there are 10 winners and no loser.\n\nIn the tenth case, there are 12 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048, 4096). By the rules there are 11 winners and no loser.\n\nIn the eleventh case, there are 13 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048, 4096, 8192). By the rules there are 12 winners and no loser.\n\nIn the twelfth case, there are 14 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048, 4096, 8192, 16384). By the rules there are 13 winners and no loser.\n\nIn the thirteenth case, there are 15 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048, 4096, 8192, 16384, 32768). By the rules there are 14 winners and no loser.\n\nIn the fourteenth case, there are 16 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536). By the rules there are 15 winners and no loser.\n\nIn the fifteenth case, there are 17 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072). By the rules there are 16 winners and no loser.\n\nIn the sixteenth case, there are 18 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144). By the rules there are 17 winners and no loser.\n\nIn the seventeenth case, there are 19 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288). By the rules there are 18 winners and no loser.\n\nIn the eighteenth case, there are 20 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576). By the rules there are 19 winners and no loser.\n\nIn the nineteenth case, there are 21 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152). By the rules there are 20 winners and no loser.\n\nIn the twentieth case, there are 22 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304). By the rules there are 21 winners and no loser.\n\nIn the twenty-first case, there are 23 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608). By the rules there are 22 winners and no loser.\n\nIn the twenty-second case, there are 24 students who took part in the olympiad: (1, 2, 8, 4, 16, 32, 64, 128, 512, 1024,"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"0 0 3\"\nassert solution(\"4 3\") == \"0 0 1\"\nassert solution(\"6 3\") == \"0 0 0\"\nassert solution(\"7 2\") == \"0 0 0\"\nassert solution(\"100000004 3\") == \"0 0 4\"\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"18 2\\n\") == \"3 6 9\"\n\"\"\"\n\nn, k = input().split(' ')\nn, k = int(n), int(k)\n\ndiploma = n // k\n\ncertificate = (n // k) * k\n\nnot_winners = n - (diploma + certificate)\n\nprint(diploma, certificate, not_winners)\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"18 2\") == \"3 6 9\"\nassert solution(\"9 10\") == \"0 0 9\"\nassert solution(\"1000000000000 5\") == \"83333333333 416666666665 500000000002\"\nassert solution(\"1000000000000 499999999999\") == \"1 499999999999 500000000000\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"18 2\") == \"3 6 9\"\nassert solution(\"9 10\") == \"0 0 9\"\nassert solution(\"1000000000000 5\") == \"83333333333 416666666665 500000000002\"\nassert solution(\"1000000000000 499999999999\") == \"1 499999999999 500000000000\"\n\nprint(\"Success\")\n\"\"\""
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3') == '0 0 3'\nassert solution('5 2') == '0 1 1'\nassert solution('1 2') == '0 0 0'\nassert solution('1 5') == '0 1 1'\nassert solution('10 4') == '0 1 0'\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('18 2\\n') == '3 6 9'\nassert solution('9 10\\n') == '0 0 9'\nassert solution('1000000000000 5\\n') == '83333333333 416666666665 500000000002'\nassert solution('1000000000000 499999999999\\n') == '1 499999999999 500000000000'\n\nprint('Success')\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 10\") == \"0 0 9\"\nassert solution(\"1000000000000 5\") == \"83333333333 416666666665 500000000002\"\nassert solution(\"1000000000000 499999999999\") == \"1 499999999999 500000000000\"\nprint('The solution is correct!')\n\n----\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"18 2\") == \"3 6 9\"\nassert solution(\"9 10\") == \"0 0 9\"\nassert solution(\"1000000000000 5\") == \"83333333333 416666666665 500000000002\"\nassert solution(\"1000000000000 499999999999\") == \"1 499999999999 500000000000\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"131\") == \"YES\"\nassert solution(\"320\") == \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('131') == 'YES'\nassert solution('320') == 'NO'\nassert solution('2010200') == 'YES'\n\nprint(solution(stdin.readline()))"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"131\") == 'YES'\nassert solution(\"320\") == 'NO'\nassert solution(\"2010200\") == 'YES'\n\nprint('Hooray!')"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"131\") == \"YES\"\nassert solution(\"320\") == \"NO\"\nassert solution(\"2002\") == \"YES\"\n\"\"\"\n\nfrom math import log"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"131\") == \"YES\"\nassert solution(\"320\") == \"NO\"\nassert solution(\"2011\") == \"NO\"\nassert solution(\"321\") == \"YES\"\nassert solution(\"10200\") == \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"131\") == \"YES\"\nassert solution(\"320\") == \"NO\"\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"131\") == \"YES\"\nassert solution(\"320\") == \"NO\"\nassert solution(\"2010200\") == \"YES\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('131') == 'YES'\nassert solution('320') == 'NO'\nassert solution('2010200') == 'YES'\nprint('All tests passed.')\n\n\"\"\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('131') == 'YES'\nassert solution('320') == 'NO'\nassert solution('2010200') == 'YES'\n\"\"\""
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"131\") == \"YES\"\nassert solution(\"320\") == \"NO\"\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"10\") == \"2\"\n\n-----\n'''\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(6)) == \"1\"\nassert solution(str(10)) == \"2\"\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 1\nassert solution('3') == 2"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == 1\nassert solution(\"10\") == 2\nprint(solution(\"10\"))"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '1'\nassert solution('10') == '2'\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 2\nassert solution('1') == 1\n\n\n'''"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == 2\nprint('Test success.')\n\n\"\"\"\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n\") == \"1\"\nassert solution(\"10\\n\") == \"2\"\n\n\n\n3\n\n\"\"\""
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(7)) == \"3\"\nassert solution(str(6)) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == 1\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n...XX\\n.X..X.\\n......\\n1 6\\n2 2\") == \"YES\"\nassert solution(\"5 4\\n..X.XX.\\n.XX..X.\\nX...X..\\nX......\\n2 2\\n1 6\") == \"NO\"\nassert solution(\"4 7\\n..X.XX.\\n.XX..X.\\nX...X..\\nX......\\n2 2\\n1 6\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_result\n\n\"\"\""
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\\n\"\n                \".X..\\n\"\n                \"...X\\n\"\n                \".X..\\n\"\n                \"......\\n\"\n                \"1 6\\n\"\n                \"2 2\") == \"YES\"\n\nassert solution(\"4 6\\n\"\n                \".X..\\n\"\n                \"...X\\n\"\n                \".X..\\n\"\n                \"......\\n\"\n                \"1 6\\n\"\n                \"2 2\") == \"YES\"\n\nassert solution(\"5 4\\n\"\n                \"..X.\\n\"\n                \"X.X.\\n\"\n                \"....\\n\"\n                \"X..X\\n\"\n                \"1 1\") == \"NO\"\n\nassert solution(\"4 7\\n\"\n                \"..X.XX.\\n\"\n                \"X...X..\\n\"\n                \"X.X.X..\\n\"\n                \"....X..\\n\"\n                \"X..X..X\\n\"\n                \"1 1\") == \"NO\"\n                \nassert solution(\"4 5\\n\"\n                \"X.X.\\n\"\n                \"X.X.\\n\"\n                \"X.X.\\n\"\n                \"X.X.\\n\"\n                \"1 1\") == \"NO\"\n                \n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6\\n...X..\\nX.X.X.\\n....X.\\n.X..X.\\n1 6\\n2 2') == 'YES'\nassert solution('5 4\\n.X..\\n...X\\nX.X.\\n....\\n.XX.\\n5 3\\n1 1') == 'NO'\n\"\"\""
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\\nX...XX\\n...XX.\\n.X..X.\\n......\\n1 6\\n2 2\") == \"YES\"\nassert solution(\"4 7\\n.X..\\n...X\\nX.X.\\n....\\n.XX.\\n5 3\\n1 1\") == \"NO\"\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import List\nfrom typing import Tuple\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = [int(x) for x in stdin.split(\" \")]\n        grid = [[x for x in line] for line in stdin.split(\"\\n\")[1:n + 1]]\n        start = tuple([int(x) for x in stdin.split(\"\\n\")[n + 2].split(\" \")])\n        dest = tuple([int(x) for x in stdin.split(\"\\n\")[n + 3].split(\" \")])\n        if start == dest:\n            return \"YES\"\n        visited = set()\n        visited.add(start)\n        dq = deque([start])\n        while dq:\n            i, j = dq.popleft()\n            for di, dj in [(1, 0), (0, 1)]:\n                if (i + di, j + dj) not in visited and 0 <= i + di <= n - 1 and 0 <= j + dj <= m - 1:\n                    if grid[i + di][j + dj] == \"X\":\n                        dq.append((i + di, j + dj))\n                        visited.add((i + di, j + dj))\n                    elif grid[i + di][j + dj] == \".\":\n                        if dest == (i + di, j + dj):\n                            return \"YES\"\n                        dq.append((i + di, j + dj))\n                        visited.add((i + di, j + dj))\n        return \"NO\"\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('.X..') == 'YES'\nassert solution('....') == 'YES'\nassert solution('.....') == 'NO'\nassert solution('X....') == 'YES'\nassert solution('X....X') == 'NO'\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6\\n'\n'X...XX\\n'\n'...XX.'\n) == 'YES'\nassert solution('5 4\\n'\n'..X.XX.\\n'\n'.XX..X.\\n'\n'X...X..\\n'\n'X......\\n'\n'2 2\\n'\n'1 6') == 'NO'\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\\n\"\n                \".X..\\n\"\n                \"...X\\n\"\n                \"X.X.\\n\"\n                \"....\\n\"\n                \"1 6\\n\"\n                \"2 2\\n\") == \"YES\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\n...XX\\n...XX\\n.X..X\\n......\\n1 6\\n2 2\") == \"YES\"\nassert solution(\"5 4\\n.X..\\n...X\\nX.X.\\n....\\n.XX.\\n5 3\\n1 1\") == \"NO\"\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(in_string) == out_string\n\n\"\"\"\n\n\nimport numpy as np\nimport ast\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1 3') == '0'\nassert solution('3 2\\n1 2\\n1 3') == '0'\nassert solution('1 3\\n2 3') == '0'\n\n'''\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n1 4\\n2 5') == '1'\n'''\n\nn, m = map(int, input().split())\n\nislands = []\nfor i in range(n):\n    islands.append(list(map(int, input().split())))\n\nbridges = []\nfor i in range(m):\n    bridges.append(list(map(int, input().split())))\n\nbridges.sort()\n\ni = 0\nremoved = 0\n\nwhile i < len(bridges) and removed < n - 1:\n    bridge = bridges[i]\n    if bridge[0] < bridges[i + 1][0] and bridge[1] < bridges[i + 1][1]:\n        bridges.pop(i)\n        removed += 1\n    else:\n        i += 1\n\nprint(len(bridges))\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 4\\n2 5\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 4\\n2 5') == '1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sample_input_str) == expected_output_str\n\n-----Explanation-----\nIn this example, there are N islands, and there are M requests.\nThe islands are numbered from 1 to N, and the requests are numbered from 1 to M.\nFor each request (a_i, b_i), it is said that a request is made to make the travel between these islands impossible.\nIn this example, there are 2 requests and 5 islands.\nThe requests can be met by removing the bridge connecting the second and third islands from the west.\n\n\"\"\"\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '0'\nassert solution('1 2 3 4') == '1'\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 4\\n2 5') == '1'\nassert solution('1 1\\n2 2') == '0'\n\"\"\"\n\nN, M = input().split(' ')\na = []\nb = []\n\nfor i in range(M):\n    a_, b_ = input().split(' ')\n    a.append(int(a_))\n    b.append(int(b_))\n\nfor i in range(M):\n    if a[i] == b[i] - 1:\n        print(1)\n    else:\n        print(0)"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n2 3\") == \"1\"\n\nassert solution(\"1 2\\n3 4\") == \"0\"\n\nassert solution(\"1 2\\n1 3\") == \"0\"\n\nassert solution(\"1 2\\n2 3\\n2 4\") == \"0\"\n\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        >>> solution('1 2\\n2 3')\n        '1'\n        >>> solution('1 2\\n3 4')\n        '0'\n        >>> solution('1 2\\n1 3')\n        '0'\n        >>> solution('1 2\\n2 3\\n2 4')\n        '0'\n        >>> solution('5 5\\n1 4\\n1 5\\n2 3\\n2 4\\n2 5\\n3 4\\n3 5\\n4 5')\n        '1'\n        >>> solution('5 5\\n4 5\\n4 5\\n4 5\\n4 5')\n        '0'\n        \"\"\"\n        islands = []\n        n, m = map(int, stdin.split(\" \"))\n        for _ in range(n):\n            islands.append(tuple(map(int, stdin.split(\" \"))))\n        islands.sort(key=lambda x: x[0])\n\n        i = 0\n        while m > 0:\n            if i + 1 < len(islands):\n                if islands[i][0] == islands[i + 1][0]:\n                    if islands[i][1] == islands[i + 1][1]:\n                        islands.pop(i)\n                        islands.pop(i)\n                        i = 0\n                        m -= 1\n                    else:\n                        islands[i], islands[i + 1] = islands[i + 1], islands[i]\n                        i += 1\n                else:\n                    i += 1\n            else:\n                break\n\n        return str(len(islands))\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_solution(self):\n        self.assertEqual(self.solution.solution(\"1 2\\n2 3\"), \"1\")\n        self."
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 4\\n2 5\\n\") == \"1\"\nassert solution(\"5 2\\n1 4\\n2 5\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-4\\n\") == \"first\"\nassert solution(\"5\\n-4\\n-1\\n1\\n3\\n\") == \"second\"\nassert solution(\"1\\n0\\n0\\n\") == \"first\"\nassert solution(\"2\\n-1\\n4\\n\") == \"second\"\nassert solution(\"5\\n-4\\n-1\\n1\\n3\\n\") == \"second\"\n\"\"\""
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'first'\nassert solution('1\\n-1') == 'first'\nassert solution('-1\\n1') == 'first'\nassert solution('1\\n-1\\n-2') == 'first'\nassert solution('1\\n1\\n1\\n1\\n1\\n-1') == 'first'\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1\\n2\\n-3\\n-4\\n3\") =='second'\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 -4\\n2 3 1 2\\n') == 'first'\nassert solution('4 -4\\n2 3 1 2\\n') =='second'\n\"\"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n2\\n-3\\n-4\\n3\") =='second'\n\"\"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1\\n2\\n-3\\n-4\\n3\") == \"second\"\nassert solution(\"3\\n-1\\n-2\\n3\") == \"first\"\nassert solution(\"2\\n4\\n-4\") == \"second\"\n\n\"\"\""
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1\\n2\\n-3\\n-4\\n3\\n') =='second'\nassert solution('3\\n-1\\n-2\\n3\\n') == 'first'\nassert solution('2\\n4\\n-4\\n') =='second'\nassert solution('3\\n-1\\n-2\\n3\\n') == 'first'\n\nprint(\"Passed all test cases!\")\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1\\n2\\n-3\\n-4\\n3\") == \"second\"\nassert solution(\"3\\n-1\\n-2\\n3\") == \"first\"\nassert solution(\"2\\n4\\n-4\") == \"second\"\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1\\n2\\n-3\\n-4\\n3\") == \"first\"\nassert solution(\"3\\n-1\\n-2\\n3\") == \"first\"\n\"\"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1\\n2\\n-3\\n-4\\n3\\n') =='second'\nassert solution('3\\n-1\\n-2\\n3\\n') == 'first'\nassert solution('2\\n4\\n-4\\n') =='second'\n\"\"\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"YES\"\nassert solution(\"3\\n1 0 1\") == \"NO\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 1 2') == 'YES'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 1 2\\n') == 'YES'\nassert solution('3\\n1 0 1\\n') == 'NO'\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 1 2') == 'YES'\n\"\"\""
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 1 2\") == \"YES\"\nassert solution(\"3 1 0 1\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 0 1 2') == 'YES'\nassert solution('3\\n1 0 1') == 'NO'\nassert solution('3\\n2 1 1') == 'NO'\n\n'''\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"YES\"\nassert solution(\"3\\n1 0 1\") == \"NO\"\nassert solution(\"1\\n0\") == \"NO\"\n\n\"\"\"\n\nn = int(input())\npizza = [int(i) for i in input().split()]\n\ndp = [0] * n\nfor i in range(1, n):\n    dp[i] = dp[i - 1] + pizza[i]"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 0 1 2\\n\") == \"YES\"\nassert solution(\"3\\n1 0 1\\n\") == \"NO\"\n\n\n\n-----import-----\n\nimport sys\nimport os\nfrom io import StringIO\n\n\n\n-----namespace-----"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 0 1 2\\n\") == \"NO\"\nassert solution(\"4\\n1 2 1 2\\n\") == \"YES\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 1 2\") == 'YES'\nassert solution(\"3\\n1 0 1\") == 'NO'\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abccba\") == \"YES\"\nassert solution(\"cf\") == \"NO\"\nassert solution(\"adfa\") == \"YES\"\nassert solution(\"abaazaba\") == \"NO\"\nassert solution(\"ml\") == \"NO\"\n\n\nfrom collections import deque\nfrom typing import Deque"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"YES\"\nassert solution(\"abccba\") == \"YES\"\nassert solution(\"bcbbcb\") == \"YES\"\nassert solution(\"be\") == \"NO\"\nassert solution(\"bg\") == \"NO\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"NO\"\nassert solution(\"abbccba\") == \"YES\"\nassert solution(\"abccba\") == \"YES\"\nassert solution(\"abccbb\") == \"NO\"\nassert solution(\"abccbb\") == \"NO\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"YES\"\nassert solution(\"aabccba\") == \"YES\"\nassert solution(\"abccba\") == \"NO\"\nassert solution(\"abbbbbb\") == \"NO\"\nassert solution(\"aabbaa\") == \"NO\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abba\") == \"YES\"\nassert solution(\"abca\") == \"NO\"\nassert solution(\"abcbcb\") == \"YES\"\nassert solution(\"abcbab\") == \"YES\"\nassert solution(\"abccba\") == \"NO\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abccba\") == \"YES\"\nassert solution(\"cf\") == \"NO\"\nassert solution(\"abaazaba\") == \"YES\"\nassert solution(\"ml\") == \"NO\"\nassert solution(\"ml\") == \"NO\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abccba\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\nassert solution(\"abcbcd\") == \"NO\"\nassert solution(\"abcddd\") == \"NO\"\nassert solution(\"abcbce\") == \"YES\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbccba\") == \"YES\"\nassert solution(\"cf\") == \"NO\"\nassert solution(\"abccba\") == \"YES\"\nassert solution(\"ml\") == \"NO\"\nassert solution(\"abaazaba\") == \"YES\"\n\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"YES\"\nassert solution(\"abba\") == \"YES\"\nassert solution(\"abca\") == \"NO\"\nassert solution(\"zz\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abccba\") == \"YES\"\nassert solution(\"cf\") == \"NO\"\nassert solution(\"adfa\") == \"YES\"\nassert solution(\"abaazaba\") == \"NO\"\n\nassert solution(\"bcbbcb\") == \"YES\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\", \"xyc\") == \"ayd\"\n\nassert solution(\"b\", \"c\") == -1\n\n\"\"\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abc', 'xyc') == 'ayd'\nassert solution('abc', 'ayd') == 'ayd'\nassert solution('abc', 'zxc') == 'ayd'\nassert solution('abc', 'zzz') == -1\n\n\"\"\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abc', 'xyc') == 'ayd'\nassert solution('abcd', 'xycd') == 'ayd'\nassert solution('abcd', 'xyzd') == 'ayd'\nassert solution('abcdefg', 'xycdefg') == 'ayd'\nassert solution('abc', 'xyz') == '-1'\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\", \"xyc\", 2) == \"ayd\"\nassert solution(\"abc\", \"xyc\", 2)!= \"ayd\"\nassert solution(\"abc\", \"xyc\", 2)!= \"ayd\"\nassert solution(\"abc\", \"xyc\", 3)!= \"ayd\"\nassert solution(\"abc\", \"xyc\", 3)!= \"ayd\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\", \"xyc\", 3) == \"ayd\"\nassert solution(\"xyaabbbccccdefww\", \"xxxxyyyyabklmopq\", 2) == \"pq\"\nassert solution(\"abc\", \"xyc\", 1) == \"z\"\nassert solution(\"abc\", \"xyc\", 0) == \"abc\"\nassert solution(\"abc\", \"xyc\", 4) == \"-\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == -1\nassert solution('a', 'b') == ''\nassert solution('', 'b') == -1\nassert solution('abc', 'xyc') == 'ayd'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\", \"bc\", 1) == \"c\"\nassert solution(\"ab\", \"bc\", 2) == \"a\"\nassert solution(\"ab\", \"bc\", 3) == \"d\"\nassert solution(\"ab\", \"bc\", 3) == \"d\"\nassert solution(\"ab\", \"bc\", 4) == \"e\"\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\", \"xyc\") == \"ayd\"\nassert solution(\"abc\", \"ayd\") == \"ayd\"\nassert solution(\"abc\", \"abd\") == \"ayd\"\nassert solution(\"abc\", \"xyz\") == \"ayd\"\nassert solution(\"abc\", \"ayz\") == \"ayd\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\", \"xyc\") == \"ayd\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\nassert solution('a') == 'a'\nassert solution('b') == 'b'\nassert solution('c') == 'b'\nassert solution('aa') == 'b'\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"a?a?\") == \"YES\"\nassert solution(\"a*a\") == \"YES\"\nassert solution(\"a*a?\") == \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"NO\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"a??a\") == \"NO\"\nassert solution(\"a?a?a\") == \"YES\"\nassert solution(\"a?a?a\") == \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"a?\") == \"YES\"\nassert solution(\"a?\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\nassert solution(\"a?b\") == \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"ab*\") == \"YES\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"aaaaaaaaaaaaa*\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"aa?\") == \"YES\"\nassert solution(\"aa?*\") == \"YES\"\nassert solution(\"aa??*\") == \"YES\"\nassert solution(\"aa??b*\") == \"NO\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a?a?a*\") == \"NO\"\nassert solution(\"a?a*\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\nassert solution(\"aa?a*\") == \"YES\"\n\"\"\""
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ab') == 'YES'\nassert solution('a?a') == 'YES'\nassert solution('aaa') == 'NO'\nassert solution('aaaa') == 'NO'\nassert solution('aab') == 'NO'\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ab') == 'YES'\nassert solution('a?') == 'YES'\nassert solution('a?a') == 'NO'\nassert solution('a?a?a') == 'YES'\nassert solution('abc') == 'NO'\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"a?b\") == \"NO\"\nassert solution(\"a*b\") == \"YES\"\nassert solution(\"a*b?\") == \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"ab*\") == \"YES\"\nassert solution(\"ab?a\") == \"YES\"\nassert solution(\"ab?*\") == \"YES\"\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\ncba\\nabc\\nbb1\\nabC\\nABC\\nabc\") == \"1 15\"\n\n\"\"\""
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == \"1 15\"\n\nassert solution(test_input_2) == \"3 4\"\nassert solution(test_input_3) == \"5 4\"\nassert solution(test_input_4) == \"5 5\"\n\"\"\"\n\n\nimport sys\nimport os\nimport ast\n\n\nclass CodeHorses:\n\n    def __init__(self):\n        self.valid_passwords = {}\n        self.n = 0\n        self.k = 0\n\n    def read_input(self, stdin):\n        line = stdin.readline().strip()\n        values = line.split(' ')\n        self.n = int(values[0])\n        self.k = int(values[1])\n        self.valid_passwords = {}\n        for _ in range(self.n):\n            line = stdin.readline().strip()\n            if len(line) not in self.valid_passwords:\n                self.valid_passwords[len(line)] = [line]\n            else:\n                self.valid_passwords[len(line)].append(line)\n\n    def best_case(self):\n        for len_, list_ in self.valid_passwords.items():\n            self.valid_passwords[len_] = sorted(list_)\n\n        counter = 0\n        for len_, list_ in self.valid_passwords.items():\n            if list_[0] == self.k:\n                counter += 1\n        return counter + self.k\n\n    def worst_case(self):\n        sorted_passwords = {}\n        for len_, list_ in self.valid_passwords.items():\n            sorted_passwords[len_] = sorted(list_)\n\n        counter = 0\n        for len_, list_ in sorted_passwords.items():\n            for pwd in list_:\n                if pwd == self.k:\n                    counter += 1\n                    break\n        return len_ + counter\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\ncba\\nabc\\nbb1\\nabC\\nABC\\nabc\") == \"1 15\"\nassert solution(\"4 100\\n11\\n22\\n1\\n2\\n22\") == \"3 4\"\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\ncba\\abc\\bb1\\abC\\ABC') == '2 4'\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"1 15\"\n\"\"\"\nimport sys"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\ncba\\nabc\\nbb1\\nabC\\nABC\\nabc\") == \"1 15\"\nassert solution(\"4 100\\n11\\n22\\n1\\n2\\n22\") == \"3 4\"\nassert solution(\"5 100\\n11\\n22\\n1\\n2\\n22\") == \"3 4\"\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 100\\n11\\n22\\n1\\n2\\n22\\n\") == \"3 4\"\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\n\npw = []\n\nfor i in range(n):\n    pw.append(input())\n\npw.append(input())\n\nd = dict()\n\nfor i in range(len(pw)):\n    length = len(pw[i])\n    if length in d:\n        d[length].append(i)\n    else:\n        d[length] = [i]\n\nprint(d)\n\nshortest = float('inf')\nlongest = -float('inf')\n\nfor i in d:\n    if i < shortest:\n        shortest = i\n    if i > longest:\n        longest = i\n\nshortest_ind = d[shortest]\nlongest_ind = d[longest]"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\") == \"1 4\"\nassert solution(\"4 100\") == \"3 4\"\nassert solution(\"3 2\") == \"1 9\"\nassert solution(\"4 100\") == \"3 4\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1\\n2\\n2\\n2\") == \"1 5\"\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\ncba\\nabc\\nbb1\\nabC\\nABC\\nabc\") == \"1 15\"\nassert solution(\"4 100\\n11\\n22\\n1\\n2\\n22\") == \"3 4\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 2 3\") == 'First'\nassert solution(\"2\\n2 2\") == 'Second'\nassert solution(\"4\\n1 3 2 3\") == 'First'\nassert solution(\"5\\n1 1 1 1 1\") == 'First'\nassert solution(\"4\\n1 2 2 2\") == 'Second'\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3 2 3\") == \"First\"\nassert solution(\"2 2\") == \"Second\"\n\n\"\"\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 2 3') == 'First'\nassert solution('2\\n2 2') == 'Second'\n\"\"\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 2 3\") == \"First\"\nassert solution(\"2\\n2 2\") == \"Second\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 3\") == \"First\"\nassert solution(\"2\\n2 2\") == \"Second\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 3\") == \"First\"\nassert solution(\"2 1\") == \"Second\"\n\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())\nnums = [int(i) for i in stdin.readline().split()]\n\ns = sum(nums)"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 2 3\") == \"First\"\nassert solution(\"2\\n2 2\") == \"Second\"\nassert solution(\"5\\n1 1 1 1 1\") == \"First\"\nassert solution(\"6\\n2 2 2 2 2 2\") == \"First\"\nassert solution(\"7\\n1 1 1 1 1 1 1\") == \"Second\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 2 3\") == \"First\"\nassert solution(\"2\\n2 2\") == \"Second\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 2 3\") == \"First\"\nassert solution(\"2\\n2 2\") == \"Second\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 2 3') == 'First'\nassert solution('2\\n2 2') == 'Second'\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == '2 4'\nassert solution(\"6\") == '2 4'\nassert solution(\"7\") == '2 6'\nassert solution(\"8\") == '2 8'\nassert solution(\"999999\") == '999 1001'\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"999999\") == \"999 1001\"\nassert solution(\"5\") == \"1 5\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"5\") == \"1 5\"\nassert solution(\"999999\") == \"999 1001\"\n\"\"\"\nimport math\n\nn = int(stdin.readline())\nr = math.floor(math.sqrt(n))\na = r\nb = n - r ** 2\n\nprint(a, b)"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == '2 4'\n\nassert solution(\"64\") == '8 8'\n\nassert solution(\"999999\") == '999 1001'\n\nassert solution(\"5\") == '1 5'\n\n\"\"\"\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8') == '2 4'\nassert solution('64') == '8 8'\nassert solution('5') == '1 5'\nassert solution('999999') == '999 1001'\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == '2 4'\nassert solution(\"64\") == '8 8'\nassert solution(\"999999\") == '999 1001'\n\n\"\"\"\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '2 4'\nassert solution('64') == '8 8'\nassert solution('999999') == '999 1001'\n\"\"\"\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"999999\") == \"999 1001\"\n\"\"\""
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\") == '2 4'\nassert solution(\"64\") == '8 8'\nassert solution(\"999999\") == '999 1001'\nassert solution(\"5\") == '1 5'\nassert solution(\"7\") == '1 7'\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"2 4\"\nassert solution(\"64\") == \"8 8\"\nassert solution(\"999999\") == \"999 1001\"\nassert solution(\"5\") == \"1 5\"\n\"\"\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1_wat') == 'Yes'\nassert solution('2_wat') == 'No'\nassert solution('wat_1') == 'Yes'\nassert solution('22_wat') == 'No'\nassert solution('33_wat') == 'No'\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aa_\") == \"Yes\"\nassert solution(\"aa_bb\") == \"No\"\nassert solution(\"aa_bbb\") == \"No\"\nassert solution(\"a0_\") == \"Yes\"\nassert solution(\"a0_bb\") == \"Yes\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '1_wat'\n) == 'Yes'\nassert solution(\n    '2_wat'\n) == 'Yes'\nassert solution(\n    'wat_1'\n) == 'Yes'\nassert solution(\n    '0Lil'\n) == 'No'\nassert solution(\n    '2a0'\n) == 'No'\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0lol') == 'Yes'\nassert solution('0_lol') == 'Yes'\nassert solution('_0_') == 'Yes'\nassert solution('0_0_0') == 'No'\nassert solution('0_0_1') == 'No'\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"wat\") == \"Yes\"\nassert solution(\"0_wat\") == \"Yes\"\nassert solution(\"0_0_wat\") == \"No\"\nassert solution(\"La0\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'No'\nassert solution('_') == 'No'\nassert solution('01') == 'Yes'\nassert solution('11') == 'No'\nassert solution('1111') == 'No'\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2_wat\") == \"Yes\"\nassert solution(\"__i_\") == \"No\"\nassert solution(\"La0\") == \"No\"\nassert solution(\"000\") == \"No\"\nassert solution(\"1a0\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Lol\") == \"No\"\nassert solution(\"Codeforces\") == \"No\"\nassert solution(\"Codef0rces\") == \"No\"\nassert solution(\"00\") == \"Yes\"\nassert solution(\"0o0\") == \"Yes\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'No'\nassert solution('1_wat') == 'Yes'\nassert solution('2_wat') == 'No'\nassert solution('wat_1') == 'Yes'\nassert solution('0Lil') == 'No'\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('_i_') == 'No'\nassert solution('La0') == 'Yes'\nassert solution('0Lil') == 'No'\nassert solution('abc') == 'No'\nassert solution('0Ril') == 'Yes'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n\"\"\"\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n7 5 8 6 9\") == \"Yes\"\nassert solution(\"5\\n-1 -2 0 0 -5\") == \"No\"\nassert solution(\"5\\n1000000000 0 0 0 0\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n7 5 8 6 9') == 'Yes'\nassert solution('5\\n-1 -2 0 0 -5') == 'No'\nassert solution('5\\n5 4 3 2 1') == 'No'\nassert solution('5\\n1000000000 0 0 0 0') == 'Yes'\n\"\"\""
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 8 6 9\") == \"Yes\"\nassert solution(\"5 -1 -2 0 0 -5\") == \"No\"\nassert solution(\"5 1000000000 0 0 0 0\") == \"Yes\"\n\nimport math"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n7 5 8 6 9\") == \"Yes\"\nassert solution(\"5\\n-1 -2 0 0 -5\") == \"No\"\nassert solution(\"5\\n1000000000 0 0 0 0\") == \"Yes\"\nassert solution(\"5\\n5 4 3 2 1\") == \"No\"\nassert solution(\"5\\n5 4 3 2 1\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n7 5 8 6 9\") == \"Yes\"\nassert solution(\"5\\n-1 -2 0 0 -5\") == \"No\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5\n7 5 8 6 9\n\"\"\") == 'Yes'\n\nassert solution(\n\"\"\"\n5\n-1 -2 0 0 -5\n\"\"\") == 'No'\n\nassert solution(\n\"\"\"\n5\n1000000000 0 0 0 0\n\"\"\") == 'Yes'\n\nassert solution(\n\"\"\"\n5\n0 0 0 0 0\n\"\"\") == 'Yes'\n\nassert solution(\n\"\"\"\n5\n0 0 0 0 0\n\"\"\") == 'No'\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(5)) == 'Yes'\nassert solution(str(5)) == 'No'\n\"\"\""
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n7 5 8 6 9') == 'Yes'\nassert solution('5\\n-1 -2 0 0 -5') == 'No'\n\n'''\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n7 5 8 6 9\") == \"Yes\"\nassert solution(\"5\\n-1 -2 0 0 -5\") == \"No\"\n\"\"\""
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n7 5 8 6 9\") == \"Yes\"\nassert solution(\"5\\n-1 -2 0 0 -5\") == \"No\"\nassert solution(\"5\\n1000000000 0 0 0 0\") == \"Yes\"\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabbaa\") == \"4\"\nassert solution(\"baaaab\") == \"4\"\nassert solution(\"aaaaa\") == \"7\"\n\n\n\"\"\"\nfrom typing import Tuple, List\nfrom collections import Counter\nfrom functools import lru_cache\n\n\nclass Solution:\n    def __init__(self, n: int, m: int, a: str, b: str, s: str) -> None:\n        self.n, self.m = n, m\n        self.a = a\n        self.b = b\n        self.s = s\n        self.a_counter = Counter(a)\n        self.b_counter = Counter(b)\n        self.s_counter = Counter(s)\n\n    def solution(self) -> int:\n        result = 0\n        for i, ai in self.a_counter.items():\n            for j, bj in self.b_counter.items():\n                if ai + bj == self.s_counter[i + j]:\n                    result += 1\n        return result\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(aabbaa) == 4\nassert solution(baaaab) == 4\nassert solution(aaaaa) == 4\n\nassert solution(azaza) == 11\nassert solution(zazaz) == 11\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabbaa\\nbaaaab\\naaaaa\") == 4\n\nassert solution(\"azaza\\nzazaz\\nazaz\") == 11\n\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabbaa\\nbaaaab\\naaaaa\") == 4\n\nassert solution(\"azaza\\nzazaz\\nazaz\") == 11\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabbaa') == 4\nassert solution('baaaab') == 2\nassert solution('aaaaa') == 11\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    aabbaa\n) == 4\nassert solution(\n    baaaab\n) == 4\nassert solution(\n    aaaaa\n) == 1\n\"\"\""
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabbaa\\nbaaaab\\naaaaa\") == \"4\"\nassert solution(\"azaza\\nzazaz\\nazaz\") == \"11\"\nassert solution(\"abcabcabc\\nxyzxyzxyz\\nabcabcayzxyz\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabbaa\\nbaaaab\\naaaaa\") == 4\n\"\"\"\n\nn, m = [int(el) for el in input().split()]\n\na = input()\nb = input()\ns = input()\n\nresult = 0\nfor i in range(n):\n    for j in range(m):\n        if a[i:i + j + 1] in b:\n            result += 1\nprint(result)\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"azaza\") == 2\n\"\"\"\n\n\"\"\"\nlist(set())\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\na = input()\nb = input()\ns = input()\n\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        if a[i] == s[j] and b[j] == s[j]:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(aabbaa) == 4\nassert solution(baaaab) == 4\nassert solution(aaaaa) == 4\nassert solution(azaza) == 11\nassert solution(zazaz) == 11\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"121111\") == \"0\"\nassert solution(\"211111\") == \"1\"\nassert solution(\"111111\") == \"2\"\nassert solution(\"222222\") == \"0\"\nassert solution(\"122222\") == \"1\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"211111\") == '0'\nassert solution(\"212111\") == '0'\nassert solution(\"221111\") == '0'\nassert solution(\"111111\") == '0'\nassert solution(\"112111\") == '0'\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"211111\\n212111\\n222111\\n111111\\n112111\\n121111\") == \"0\"\nassert solution(\"064214\\n312555\\n253657\\n564444\\n880241\") == \"2\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('211111\\n212111\\n222111\\n111111\\n112111\\n121111') == '0'\nassert solution('211111\\n212111\\n221111') == '1'\nassert solution('211111\\n121111\\n121111') == '2'\nassert solution('211111\\n121111\\n211111') == '3'\nassert solution('211111\\n121111\\n211111\\n212111') == '4'\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123456\") == \"0\"\nassert solution(\"111111\") == \"0\"\nassert solution(\"211111\") == \"1\"\nassert solution(\"212111\") == \"2\"\nassert solution(\"222111\") == \"0\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('211111\\n212111\\n222111\\n111111\\n112111\\n121111') == '3'\nassert solution('012345\\n101234\\n101234\\n101234\\n101234') == '0'\n\n\"\"\"\n\n\nfrom typing import Callable\nfrom unittest import TestCase"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('927654') == '0'\nassert solution('211111') == '0'\nassert solution('111111') == '0'\nassert solution('111121') == '3'\nassert solution('121111') == '5'\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n123456\") == \"0\"\nassert solution(\"2\\n111111\\n121111\") == \"0\"\nassert solution(\"3\\n121111\\n121111\") == \"2\"\nassert solution(\"3\\n111111\\n111211\") == \"2\"\nassert solution(\"4\\n111111\\n111112\\n111211\") == \"2\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"121111\") == 0\nassert solution(\"111111\") == 0\nassert solution(\"112111\") == 0\nassert solution(\"121111\") == 0\nassert solution(\"211111\") == 0\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"111111\") == \"0\"\nassert solution(\"112111\") == \"0\"\nassert solution(\"121111\") == \"1\"\nassert solution(\"211111\") == \"2\"\nassert solution(\"222211\") == \"2\"\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n-1 -2\\n1 1\\n1 2\") == 0\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 4\\n1 1\") == 16\nassert solution(\"1 2\\n1 3\\n1 4\\n1 5\") == 0\n\"\"\""
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4\\n\") == \"7\"\nassert solution(\"2 2\\n-1 -2\\n1 1\\n1 2\\n\") == \"0\"\nassert solution(\"4 2\\n1 1\\n1 1\\n2 1\\n2 1\\n\") == \"8\"\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4\") == 7\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4') == '7'\nassert solution('4 3\\n1 2 3 4\\n1 3\\n2 4\\n1 1') == '16'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2\\n4 5\\n3 4\\n1 1\\n2 4') == '16'\nassert solution('2 2\\n-1 -2\\n1 1\\n1 2') == '0'\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4') == '7'\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 2\\n3 4\\n1 4\\n') == 16\n\nassert solution('2 2\\n-1 -2\\n1 1\\n1 2\\n') == 0\n\nassert solution('4 3\\n1 2 3 4\\n1 3\\n2 4\\n1 1\\n') == 7\n\"\"\"\n\n\nimport unittest\n\n\nclass Solution:\n    def solution(self, stdin: str) -> int:\n        n, m = map(int, stdin.split())\n        arr = list(map(int, stdin.split()))\n        counter = 0\n        for i in range(m):\n            l, r = map(int, stdin.split())\n            counter += sum(arr[l:r+1]) * (r - l + 1)\n        return counter\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def tearDown(self) -> None:\n        pass\n\n    def test_solution(self) -> None:\n        self.assertEqual(\n            solution('4 5\\n1 2\\n3 4\\n1 4\\n'), 16\n        )\n\n        self.assertEqual(\n            solution('4 3\\n1 2 3 4\\n1 3\\n2 4\\n1 1\\n'), 7\n        )\n\n        self."
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n1 2\\n1 3\\n2 4\") == \"0\"\nassert solution(\"3 3\\n1 3\\n2 4\\n1 1\\n1 2\\n2 3\") == \"16\"\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 -2 1 3 -4\\n1 2\\n4 5\\n3 4\\n1 4\\n\") == \"7\"\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 4\\n1 1\\n\") == \"16\"\nassert solution(\"2 2\\n-1 -2\\n1 1\\n1 2\\n\") == \"0\"\n\nprint(\"Successfully passed all tests!\")"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n-1 -2\\n1 1\\n1 2\\n2 4\\n1 1') == '16'\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"27\") == \"22\"\nassert solution(\"4545\") == \"4444\""
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4545') == '4444'\nassert solution('27') == '22'\nassert solution('9090') == '9999'\nassert solution('0') == '0'\nassert solution('123456789') == '987654321'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"27\") == \"22\"\nassert solution(\"4545\") == \"4444\"\nprint(\"Passed\")"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"27\") == \"22\"\nassert solution(\"4545\") == \"4444\"\n\"\"\"\n\n\"\"\"\nGiven a string S of digits, such as S = \"123456579\", we can split it into a Fibonacci-like sequence [123, 456, 579].\n\nFormally, a Fibonacci-like sequence is a list F of non-negative integers such that:\n\n0 <= F[i] <= 2^31 - 1, (that is, each integer fits a 32-bit signed integer type);\nF.length >= 3;\nand F[i] + F[i+1] = F[i+2] for all 0 <= i < F.length - 2.\nAlso, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\n\nReturn any Fibonacci-like sequence split from S, or return [] if it cannot be done.\n\nExample 1:\n\nInput: \"123456579\"\nOutput: [123,456,579]\nExample 2:\n\nInput: \"11235813\"\nOutput: [1,1,2,3,5,8,13]\nExample 3:\n\nInput: \"112358130\"\nOutput: []\nExplanation: The task is impossible.\nExample 4:\n\nInput: \"0123\"\nOutput: []\nExplanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.\nExample 5:\n\nInput: \"1101111\"\nOutput: [110, 1, 111]\nExplanation: The output [11, 0, 11, 11] would also be accepted.\n\"\"\"\n\nclass Solution:\n    def splitIntoFibonacci(self, S: str) -> List[int]:\n        if len(S) < 3:\n            return []\n        \n        for i in range(1, len(S)//2+1):\n            if S[:i] == '0' * i:\n                continue\n            if int(S[:i]) > 2 ** 31 - 1:\n                continue\n            res = []\n            n = int(S[:i])\n            for j in range(i, len(S) - i, i):\n                n2 = n\n                n = int(S[j:j+i])\n                if n > 2 ** 31 - 1:\n                    break\n                if n == n2 + res[-1]:\n                    res.append(n)\n                    res.append(n2)\n                    break\n            if len(res) >= 3:\n                return res\n        return []"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''27''') == '22'\n\"\"\"\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('27') == '22'\nassert solution('4545') == '4444'\nassert solution('12') == '12'\nassert solution('8') == '10'\nassert solution('0') == '0'\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('27') == '22'\nassert solution('4545') == '4444'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"27\") == \"22\"\nassert solution(\"4545\") == \"4444\"\n\nprint(solution(\"4545\"))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"27\") == \"22\"\n\"\"\""
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"27\") == \"22\"\nassert solution(\"4545\") == \"4444\"\nassert solution(\"99999\") == \"999999\""
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 10 2') == '1 2 4 8'\nassert solution('2 4 5') == '-1'\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10 2\") == \"1 2 4 8\"\nassert solution(\"2 4 5\") == \"1 1 1 1\"\nassert solution(\"1 10 20\") == \"-1\"\nassert solution(\"2 4 1\") == \"1 1 1 1\"\nassert solution(\"2 4 10\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 10 2') == '1 2 4 8'\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10 2\") == \"1 2 4 8\", \"First\"\nassert solution(\"2 4 5\") == \"1 2 4 8\", \"Second\"\nprint('The local tests are done.')\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 10 2\") == \"1 2 4 8\"\nassert solution(\"2 4 5\") == \"2 4 8 16\"\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 10 2\") == '1 2 4 8'\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(solution(input()))\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 10 2\") == \"1 2 4 8\"\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 10 2') == '1 2 4 8'\nassert solution('1 10 2') == '-1'\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 10 2') == '1 2 4 8'\nassert solution('2 4 5') == '-1'\nassert solution('1 10 2') == '1 2 4 8'\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 7\\n0 4\\n2 5\\n6 7') == 'NO'\nassert solution('3 5\\n0 2\\n2 4') == 'YES'\nassert solution('3 7\\n0 4\\n2 5\\n6 7') == 'NO'\nassert solution('3 7\\n0 4\\n2 5\\n6 7') == 'NO'\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"YES\"\nassert solution(\"4 7\") == \"NO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 7\\n0 4\\n2 5\\n6 7') == 'NO'\nassert solution('3 5\\n0 2\\n2 4\\n3 5') == 'YES'\nassert solution('1 5\\n0 2') == 'YES'\nassert solution('1 5\\n0 1') == 'YES'\nassert solution('2 2\\n1 1') == 'YES'\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n0 2\\n2 4\\n3 5\") == \"YES\"\nassert solution(\"3 7\\n0 4\\n2 5\\n6 7\") == \"NO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\\n0 4\\n2 5\\n6 7\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n0 2\\n2 4\\n3 5\\n\") == \"YES\"\nassert solution(\"3 7\\n0 4\\n2 5\\n6 7\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\\n0 4\\n2 5\\n6 7\") == \"NO\"\nassert solution(\"3 5\\n0 2\\n2 4\\n3 5\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7\") == \"NO\"\nassert solution(\"3 5\") == \"YES\"\nassert solution(\"0 2\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"2 1\") == \"NO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n0 2\\n2 4\\n3 5\") == \"YES\"\nassert solution(\"3 7\\n0 4\\n2 5\\n6 7\") == \"NO\"\n\"\"\""
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 2\\n2 4\\n3 5\\n\") == \"YES\"\nassert solution(\"0 4\\n2 5\\n6 7\\n\") == \"NO\""
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 1') == '6'\n\"\"\"\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1\") == \"6\"\n\"\"\""
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 1\\n') == '6'\n\n\"\"\""
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == '6'\n\"\"\""
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1\\n\") == '6'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == \"6\"\n\"\"\""
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2 1''') == '6'\n\n---"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3, 2, 1) == 6\n\"\"\"\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n0 1 0\\n') == '1 1 1'\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int p = in.nextInt();\n        int[] a = new int[p];\n        for (int i = 0; i < p; i++) {\n            a[i] = in.nextInt();\n        }\n        Scanner out = new Scanner(System.out);\n        out.println(solution(p, a));\n    }\n\n    public static int solution(int p, int[] a) {\n        int max = p - 1;\n        int min = 0;\n        int[] b = new int[max + 1];\n        int[] f = new int[p];\n        b[0] = 1;\n        b[1] = 0;\n        for (int i = 2; i <= max; i++) {\n            b[i] = (b[i - 1] + b[i - 2]) % p;\n        }\n        for (int i = 0; i < p; i++) {\n            f[i] = a[i] - ((a[i] - 1) % p);\n        }\n        int j = 0;\n        int k = 0;\n        while (j <= max) {\n            while (j <= max && f[j] == 0) {\n                j++;\n            }\n            if (j <= max) {\n                k = (f[j] + k) % p;\n                if (j < max) {\n                    f[j + 1] = (f[j] + f[j + 1]) % p;\n                }\n            }\n            j++;\n        }\n        return b[k];\n    }\n}\n\"\"\"\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 0\") == \"1 1\"\n\n-----\n2\n1 1\n\n-----\n5\n1 1 0 0 1\n\n-----\n6\n0 1 1 0 1 1\n\n-----\n10\n1 1 1 1 1 1 1\n\n-----\n9\n1 1 1 1 1 1 1 0\n\n-----\n27\n1 1 1 1 1 1 1 1 1\n\n-----\n80\n1 1 1 1 1 1 1 1 1 1\n\n-----\n87\n1 1 1 1 1 1 1 1 1 1 1\n\n-----\n101\n0 1 1 1 1 1 1 1 1 1 1 1\n\n-----\n4\n0 0 0 1\n\n-----\n8\n0 0 0 1 1 1\n\n-----\n19\n0 0 0 1 1 1 1 1 1\n\n-----\n39\n0 0 0 0 0 1 0 0 0 1\n\n-----\n45\n1 0 0 0 0 0 1 1 1 1 1 1\n\n-----\n68\n1 1 1 1 1 1 1 1 1 1 1 1\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin_lines) == output_lines\n\"\"\""
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 0') == '1 1'\nassert solution('2\\n1 1') == '1 1'\n\"\"\"\n\np = int(input())\na = list(map(int, input().split()))\nres = 0\n\nfor i in range(p - 1):\n    a[i] = a[i] - res\n\nprint(*a)\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 0\\n\") == \"1 1\"\n\"\"\""
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 0\") == \"1 1\"\n\"\"\""
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0 1') == '1 1'\n\n---\n\n---\nIn this section we'll learn how to use functions in the \u201cscipy\u201d library. The \"scipy\" library includes functions for implementing common mathematical operations.\n\nLet's create a function that multiplies two numbers.\n\nimport scipy as sc\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 0') == '1 1'\n\"\"\"\n\nfrom math import gcd, log, ceil"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 0\") == \"1 1\"\n\"\"\"\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 0\") == \"1 1\"\nprint(\"Problem 1 - Test Passed\")\nassert solution(\"2\\n1 1\") == \"1 0\"\nprint(\"Problem 1 - Test Passed\")\nassert solution(\"2\\n0 0\") == \"0 0\"\nprint(\"Problem 1 - Test Passed\")\nassert solution(\"3\\n0 1\") == \"1 1\"\nprint(\"Problem 1 - Test Passed\")\nassert solution(\"3\\n0 1\") == \"1 1\"\nprint(\"Problem 1 - Test Passed\")\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"S....\\n....\\n...S.\") == 8\n\"\"\""
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == e\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\nS...\\n....\\n..S.') == 8\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\nS...\\n....\\n..S.\") == 8\n\"\"\"\n\n\nfrom collections import deque\nfrom sys import stdin\n\nclass MaxEating(object):\n    def __init__(self, rows, cols):\n        self.cake = []\n        self.rows = rows\n        self.cols = cols\n        self.max_eating = 0\n        for _ in range(rows):\n            self.cake.append(list(stdin.readline().strip()))\n\n    def _bfs(self, rows, cols):\n        # Enqueue all the rotten strawberry in the cake\n        q = deque()\n        for i in range(rows):\n            for j in range(cols):\n                if self.cake[i][j] == 'S':\n                    q.append((i, j))\n\n        # BFS the cake\n        while q:\n            # Dequeue all the rotten strawberry\n            row, col = q.popleft()\n\n            # Search for adjacent cell that has not been visited\n            for dr, dc in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n                r, c = row + dr, col + dc\n                if 0 <= r < rows and 0 <= c < cols:\n                    # Check if the cell is a cake cell\n                    if self.cake[r][c] == '.':\n                        # Mark the cell as visited\n                        self.cake[r][c] = 'V'\n                        # Enqueue the cell\n                        q.append((r, c))\n\n        # Print the number of eating\n        return sum(row.count('V') for row in self.cake)\n\n    def eat(self):\n        # Eat the maximum number of cake cells\n        self.max_eating = max(self.max_eating, self._bfs(self.rows, self.cols))\n\n    def print_result(self):\n        print(self.max_eating)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\nS..\\n....\\n..S.\") == 8\n\"\"\""
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\nS..\\n....\\n..S.\") == 8\nassert solution(\"3 4\\nS.\\n....\\n..S.\") == 8\nassert solution(\"3 4\\n....\\n..S.\\nS..\") == 8\n\nprint(\"All tests passed.\")\n\n\n\"\"\"\n\n\n\"\"\"\n\n\"\"\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\nS...\\n....\\n..S.\") == \"8\"\n\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Cake:\n    def __init__(self, rows: int, columns: int):\n        self.rows: int = rows\n        self.columns: int = columns\n        self.grid: List[List[str]] = []\n        self.max_num_cake_cells: int = 0\n\n    def initialize_grid(self, raw_data: str) -> None:\n        self.grid = [list(i) for i in raw_data.split(\"\\n\") if i]\n\n    def get_max_num_cake_cells(self) -> int:\n        for i in range(self.rows):\n            for j in range(self.columns):\n                if self.grid[i][j] == \"S\":\n                    self.max_num_cake_cells += 1\n\n        return self.max_num_cake_cells\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\nS...\\n....\\n..S.\") == \"8\"\nassert solution(\"3 4\\nS...\\n....\\n..S.\") == \"8\"\n\"\"\""
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\nS...\\n....\\n..S.') == 8\n\"\"\"\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 4\nS..\n....\n..S.''') == 8\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 1 7\") == \"2\\n-2 10\"\nassert solution(\"1\\n10\") == \"-1\"\nassert solution(\"4\\n4 3 4 5\") == \"0\"\nassert solution(\"2\\n2 4\") == \"3\\n0 3 6\"\nprint(\"Passed\")\n\n-------------"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 7\\n\") == \"-1\"\nassert solution(\"4 1 7\") == \"0\"\nassert solution(\"1 3 5 9\\n\") == \"1\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"2 4\") == \"0 3 6\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 7\\n') == '2\\n-2 10'\nassert solution('1 3 5 9\\n') == '1\\n7'\nassert solution('4 3 4 5\\n') == '0'\nassert solution('2 4\\n') == '3\\n0 3 6'\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 7\") == \"2\"\n\nassert solution(\"1 3 5 9\") == \"1\"\n\nassert solution(\"4 3 4 5\") == \"0\"\n\nassert solution(\"2 4\") == \"3\"\n\nassert solution(\"2 4 10\") == \"3\""
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 7\") == \"2\"\nassert solution(\"1 3 5 9\") == \"1\"\nassert solution(\"4 3 4 5\") == \"0\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4 1 7\") == '2\\n-2 10'\nassert solution(\"1\\n10\") == '-1'\nassert solution(\"4\\n4 3 4 5\") == '0'\nassert solution(\"2\\n2 4\") == '3\\n0 3 6'"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 7\\n') == '2\\n-2 10'\nassert solution('1 3 5 9\\n') == '-1\\n'\nassert solution('4 3 4 5\\n') == '0\\n'\nassert solution('2 4\\n') == '3\\n0 3 6'"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 1 7\") == \"2\\n-2 10\"\nassert solution(\"1\\n10\") == \"-1\\n\"\nassert solution(\"4\\n4 3 4 5\") == \"0\\n0 3 6\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 7\") == \"2 -2 10\"\nassert solution(\"1 3 5 9\") == \"-1\"\nassert solution(\"4 3 4 5\") == \"0\"\nassert solution(\"2 4\") == \"3 0 3 6\"\n\"\"\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == '-1'\nassert solution(\"3\\n1 2 3\\n\") == '-1'\nassert solution(\"3\\n5 4 3\\n\") == '1'\nassert solution(\"4\\n1 2 3 4\\n\") == '1'\nassert solution(\"4\\n5 4 3\\n\") == '0'\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4 5\") == \"YES\"\nassert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\") == \"NO\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"YES\"\nassert solution(\"4\\n1 2\\n3 3\\n3 4\\n4 5\") == \"NO\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4 5\\n\") == \"YES\"\nassert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\\n\") == \"NO\"\n\"\"\"\n\n\"\"\"\n3\n1 2\n2 3\n4 5\n\n4\n1 2\n2 3\n2 3\n1 2\n\n\"\"\""
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"4 5\") == \"NO\"\nassert solution(\"4 5 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 2\") == \"YES\"\nassert solution(\"4 5\\n2 3\\n1 2\") == \"NO\"\nassert solution(\"1 2\\n2 3\") == \"YES\"\nassert solution(\"2 3\\n2 3\") == \"NO\"\nassert solution(\"2 3\\n1 2\") == \"YES\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\\n\") == \"NO\"\nassert solution(\"3\\n1 2\\n2 3\\n4 5\\n\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4 5\") == \"YES\"\nassert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\") == \"NO\"\n\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 3\") == \"YES\"\nassert solution(\"1 2\\n2 3\\n4 5\") == \"NO\"\nassert solution(\"1 2\\n2 3\\n4 5\\n6 7\") == \"YES\"\n\nprint(solution(\"3\\n1 2\\n2 3\\n4 5\"))\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected_stdout"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\\n\") == \"YES\"\nassert solution(\"3\\n1 2\\n2 3\\n4 5\\n\") == \"NO\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n4 5\") == \"YES\"\nassert solution(\"4\\n1 2\\n2 3\\n2 3\\n1 2\") == \"NO\"\nassert solution(\"7\\n1 4\\n2 3\\n3 5\\n3 6\\n4 7\") == \"YES\"\nassert solution(\"8\\n1 2\\n2 3\\n2 3\\n1 2\\n3 4\\n3 5\\n3 6\\n4 7\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4') == '2 3 4'\n\"\"\""
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 7\") == \"9 7 9\"\n\n\"\"\"\n\n\nfrom itertools import combinations\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\nassert solution(\"10 11\") == \"-\"\nassert solution(\"900000000000000009 900000000000000029\") == \"900000000000000009 900000000000000010 900000000000000021\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import gcd\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 4''') == '2 3 4'\nassert solution('''10 11''') == '-1'\nassert solution('''900000000000000009 900000000000000029''') == '900000000000000009 900000000000000010 900000000000000021'\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\nassert solution(\"10 11\") == \"-1\"\nassert solution(\"900000000000000009 900000000000000029\") == \"900000000000000009 900000000000000010 900000000000000021\""
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == '2 3 4'\nassert solution(\"10 11\") == '-1'\nassert solution(\"900000000000000009 900000000000000029\") == '900000000000000009 900000000000000010 900000000000000021'\n\n\"\"\"\n\nl, r = map(int, stdin.split())\n\nfor i in range(l, r):\n    for j in range(l, r):\n        if j > i:\n            if i % j == 0:\n                for k in range(l, r):\n                    if k > j:\n                        if j % k == 0:\n                            if k % i == 0:\n                                print(i, j, k)\n                                break\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\nassert solution(\"10 11\") == \"9 9 9\"\nassert solution(\"900000000000000009 900000000000000029\") == \"900000000000000009 900000000000000010 900000000000000021\"\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\nassert solution(\"10 11\") == \"-1\"\nassert solution(\"900000000000000009 900000000000000029\") == \"900000000000000009 900000000000000010 900000000000000021\"\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\n\nassert solution(\"10 11\") == \"9 10 11\"\n\nassert solution(\"900000000000000009 900000000000000029\") == \"900000000000000009 900000000000000010 900000000000000021\""
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"2 3 4\"\nassert solution(\"10 11\") == \"-\"\nassert solution(\"900000000000000009 900000000000000029\") == \"900000000000000009 900000000000000010 900000000000000021\""
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 1 1\") == \"YES\"\nassert solution(\"3 4 3\") == \"NO\"\nassert solution(\"4 4 4\") == \"NO\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"YES\"\n\nassert solution(\"3 4\") == \"YES\"\n\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\""
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n1 1 1\") == \"YES\"\nassert solution(\"3 4\\n3 1 3\") == \"YES\"\nassert solution(\"3 4\\n4 4 4\") == \"NO\"\nassert solution(\"7 7\\n1 1 3 3 3 3 3\") == \"YES\"\nassert solution(\"7 7\\n1 1 1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1 1 1\") == \"YES\"\nassert solution(\"3 4\\n3 1 3\") == \"YES\"\nassert solution(\"3 4\\n4 4 4\") == \"NO\"\n\"\"\"\n\nn, s = map(int, input().split())\nmugs = list(map(int, input().split()))\nmugs.sort(reverse=True)"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 3\") == \"YES\"\nassert solution(\"3 4 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 1 1') == 'YES'\nassert solution('3 4 3') == 'NO'\nassert solution('1 3 2 1') == 'YES'\nassert solution('3 1 3') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 4') == 'NO'\n\n\"\"\""
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n4 4 4') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n1 1 1') == 'YES'\nassert solution('3 4\\n3 1 3') == 'YES'\nassert solution('3 4\\n4 4 4') == 'NO'\nassert solution('3 4\\n3 3 1') == 'NO'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 13 9') == '24'\nassert solution('13 3 6') == '9'\nassert solution('1 2 3') == '6'\nassert solution('1 1 1') == '3'\nassert solution('4 4 4') == '12'\n\n\"\"\"\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 13 9') == '24'\nassert solution('13 3 6') == '9'\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\n\"\"\""
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 13 9') == '24'\nassert solution('13 3 6') == '9'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 13 9') == '24'\nassert solution('13 3 6') == '9'\n\"\"\""
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\nassert solution(\"11 11 11\") == \"11\"\nassert solution(\"11 11 11\") == \"11\"\nassert solution(\"11 11 11\") == \"11\"\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 13 9\") == \"24\"\nassert solution(\"13 3 6\") == \"9\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"100 100 100\") == \"100\"\nassert solution(\"1 2 1\") == \"3\"\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 3\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 3 3\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4 3\") == 4\nassert solution(\"1 1 1\") == 1\nassert solution(\"2 3 3\") == 2\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 3') == 4\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\">5 3 2\") == '4'\nassert solution(\">1 1 1\") == '1'\nassert solution(\">2 3 3\") == '2'\nassert solution(\">4 2 4\") == '2'\nassert solution(\">2 2 2\") == '1'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4 3') == 4\nassert solution('1 1 1') == 1\nassert solution('2 3 3') == 2\nassert solution('2 2 1') == 0\nassert solution('1 1 1') == 1\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 3\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 3 3\") == \"2\"\n\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4 3') == '4'\nassert solution('1 1 1') == '1'\nassert solution('2 3 3') == '2'\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 3\") == 4\nassert solution(\"1 1 1\") == 1\nassert solution(\"2 3 3\") == 2\nassert solution(\"4 4 4\") == 1\nassert solution(\"5 4 3\") == 2\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 3 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 3\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 3 3\") == \"2\"\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3 9\") == 8\n\n---"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3 9\") == '8'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 3 9') == '8'\nassert solution('2\\n2 999995') == '5'\nassert solution('1\\n2 999995') == '5'\nassert solution('3\\n2 999995') == '6'\nassert solution('2\\n2 999995') == '5'\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3 9\") == \"8\"\nassert solution(\"2\\n2 999995\") == \"5\"\nassert solution(\"2\\n2 999996\") == \"6\"\n\"\"\"\n\nfrom typing import Tuple\n\nfrom utils import timing\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 3 9') == '8'\nassert solution('2\\n2 999995') == '5'\n\"\"\"\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 9') == '8'\nassert solution('2 999995') == '5'\n\n---"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3 9\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 9\") == \"8\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(\" \")))\n\nmin_ = 10 ** 6\nfor i in range(0, n - 1):\n    if a[i]!= a[i + 1]:\n        if a[i] > a[i + 1]:\n            min_ = min(min_, a[i] - a[i + 1])\n        else:\n            min_ = min(min_, a[i + 1] - a[i])\n\nprint(min_)\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3 9\") == \"8\"\nassert solution(\"2\\n2 999995\") == \"5\""
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3 9\") == \"8\"\nassert solution(\"2\\n2 999995\") == \"5\"\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 20\nassert solution('2') == 680\n\"\"\"\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '20'\n\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"20\"\nassert solution(\"2\") == \"680\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 20\n\"\"\""
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == 20\n\"\"\""
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == 20\nassert solution(\"2\") == 680\n\"\"\"\n\nfrom time import perf_counter"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"20\"\nassert solution(\"2\") == \"680\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nfrom itertools import combinations\n\nsolutions = list(combinations([(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 1), (0, 0, 0, 0, 0, 0, 0, 0, 0, 2), (0, 0, 0, 0, 0, 0, 0, 0, 0, 3), (0, 0, 0, 0, 0, 0, 0, 0, 0, 4), (0, 0, 0, 0, 0, 0, 0, 0, 0, 5), (0, 0, 0, 0, 0, 0, 0, 0, 0, 6)], n))\n\nsolutions = [sum(x) % 10 ** 9 for x in solutions]\n\nprint(sum(solutions) % 10 ** 9)"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"20\"\n\"\"\""
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '8'\nassert solution('1') == '3'\n\n-----\n'''\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"1\"\nassert solution(\"abca\") == \"1\"\nassert solution(\"akca\") == \"1\"\nassert solution(\"akc\") == \"0\"\nassert solution(\"ak\") == \"0\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"0\"\nassert solution(\"koko\") == \"2\"\nassert solution(\"murat\") == \"0\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"murat\") == 0\n\nassert solution(\"ab\") == 1\n\nassert solution(\"koko\") == 2\n\nassert solution(\"aaaa\") == -1\n\nassert solution(\"aa\") == 1"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aa\") == \"1\"\nassert solution(\"koko\") == \"2\"\nassert solution(\"murat\") == \"0\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s=\"aba\") == 1\nassert solution(s=\"aba\") == 1\nassert solution(s=\"abca\") == 2\nassert solution(s=\"a\") == 0\nassert solution(s=\"aab\") == 2\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aa\") == \"1\"\nassert solution(\"koko\") == \"2\"\nassert solution(\"murat\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbbba\") == \"2\"\nassert solution(\"abababab\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aa\") == \"1\"\nassert solution(\"koko\") == \"2\"\n\"\"\""
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"koko\") == 1\nassert solution(\"murat\") == 0\nassert solution(\"abc\") == 2\nassert solution(\"abba\") == -1\nassert solution(\"aaaaa\") == 0\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == -1\nassert solution(\"baa\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Valera\"\nassert solution(\"7 6\") == \"Vladik\"\n\"\"\""
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'Valera'\nassert solution('7 6') == 'Vladik'\n\"\"\"\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == 'Vladik'\nassert solution('7 6') == 'Valera'\n\n\"\"\"\n\na, b = [int(s) for s in input().split()]\n\nwhile a > 0 and b > 0:\n    if a - 1 > 0 and b - 1 > 0:\n        a -= 1\n        b -= 1\n    elif a - 1 > 0:\n        a -= 1\n    elif b - 1 > 0:\n        b -= 1\n    else:\n        break"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"Valera\"\nassert solution(\"7 6\") == \"Vladik\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == 'Vladik'\nassert solution('7 6') == 'Valera'\n\n\"\"\""
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"Vladik\"\nassert solution(\"7 6\") == \"Valera\"\n\"\"\"\n\na, b = map(int, input().split())\n\nwhile a and b:\n    if a - b > 0:\n        a = a - b\n        b = b + 1\n    else:\n        a = a + 1\n        b = b - 1"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Valera\"\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"Valera\"\nassert solution(\"7 6\") == \"Vladik\"\n\"\"\""
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a = \"1 1\") == \"Vladik\"\n\n\"\"\"\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"Vladik\"\nassert solution(\"7 6\") == \"Valera\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(???????)\") == \":(\", 'incorrect solution for \"(???????)\"'\nassert solution(\"(??(??))\") == \":(\", 'incorrect solution for \"(??(??))\"'\nassert solution(\"(??)\") == \"(1+?)1\", 'incorrect solution for \"(??)\"\"'\n\"\"\""
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(?????\") == \"(():)\"\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"(???)\") == \"(())\"\nassert solution(\"(???(???(??))?)\") == \":(\")\nassert solution(\"(???)\") == \"(())\"\nassert solution(\"(????(???)?)\") == \":(\")\nassert solution(\"(????(??))??(??))???(??)(??)\") == \"(())\"\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(?????(?(??(??(??(??(??(?(?(?(?)?)?)?)?)?)?)?)?)?)?)?\") == \"(()())\"\nassert solution(\"(???)\") == \":(\"\nassert solution(\"(??(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))(((((((((((((((()))()))((((((((((((((("
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('(?????') == '(()())'\nassert solution('(???)?') == ':(':\nassert solution('(???)??') == ':(':\nassert solution('(??)??') == '(())()':\nassert solution('(??)??') == '(()())':\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(??????)\") == \":(\"\nassert solution(\"(?????()??)\") == \":(())\"\nassert solution(\"(?????(((()))??)??)\") == \":(((())))\"\nassert solution(\"(?????(((()(())))??)??)\") == \":(((()())))\"\nassert solution(\"(?????(((()(())))??)??)\") == \":(((()())))\"\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(???(???(?))\") == \":(\", \"Wrong answer\"\nassert solution(\"(?????)((()())((())((())(())(())))(()())((())))(()())\") == \"(1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+((1+"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(???(???(?))?)?\") == \":(\", \"Tests failed\"\n\"\"\"\n\nimport time\nimport sys\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(??????\") == \":(\", \"Check your solution\"\n\n\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 12\") == \"2\"\nassert solution(\"3 1000000000\") == \"3\"\nassert solution(\"2 20\") == \"0\"\nassert solution(\"1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1000000000\\n10 -9 -3 5\") == \"3\"\nassert solution(\"2 20\\n14 -7 19\") == \"0\"\nassert solution(\"3 12\\n10 -9 -3 5\") == \"2\"\nassert solution(\"2 20\\n14 -7 19\") == \"0\"\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1000000000\\n10 -9 -3 5\") == \"3\"\nassert solution(\"3 12\\n10 -9 -3 5\") == \"2\""
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 12') == 2\nassert solution('3 1000000000') == 3"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1000000000') == '3'\nassert solution('3 12') == '2'\nassert solution('2 20') == '0'\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1000000000\\n10 -9 -3 5\") == 3\nassert solution(\"3 12\\n10 -9 -3 5\") == 2\nassert solution(\"2 20\\n14 -7 19\") == 0\n\nassert solution(\"1 10\\n-2 3 -4\") == 4\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1000000000') == '3'\nassert solution('3 12') == '2'\nassert solution('2 20') == '0'\n\"\"\""
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 12\") == \"0\"\nassert solution(\"3 20\") == \"2\"\nassert solution(\"2 20\") == \"0\""
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 1000000000\n10 -9 -3 5\n''') == '3'\nassert solution('''2 20\n14 -7 19\n''') == '0'\n\nassert solution('''3 12\n10 -9 -3 5\n''') == '2'\n\nassert solution('''2 20\n14 -7 19\n''') == '0'\n\n\"\"\"\n\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u043e\u043b\u0430\u0442\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0432\u043e\u0434 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0441 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c txt \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439:\n\n['\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430', '\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430', \u0438 \u0442.\u0434.] \u0438 \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0441\u0442\u0440\u043e\u043a. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 join().\n\n-----input-----\n\nSample Input:\n\n/home/username/competitions/algorithms/dynamic-programming/datasets/input_1.txt\n\nSample Output:\n\n['\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430', '\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430', \u0438 \u0442.\u0434.]\n\n['\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430', '\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430', \u0438 \u0442.\u0434.]\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\u0422\u0440\u0435\u0442\u044c\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\u0422\u0440\u0435\u0442\u044c\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\u0422\u0440\u0435\u0442\u044c\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\n...\n\n\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\u0422\u0440\u0435\u0442\u044c\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\u0427\u0435\u0442\u0432\u0435\u0440\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\n\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\u0422\u0440\u0435\u0442\u044c\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\u0427\u0435\u0442\u0432\u0435\u0440\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\n\u0422\u0440\u0435\u0442\u044c\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430\n\n...\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0432 \u0444"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 -9 -3 5') == 3"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 2 1\\n') == '1'\nassert solution('2\\n2 2\\n') == '0'\nassert solution('7\\n2 2 2 1 1 1 1\\n') == '3'\nassert solution('3\\n1 1 1\\n') == '1'\nprint('Test finished')"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 2 1\\n') == '1'\nassert solution('2\\n2 2\\n') == '0'\nassert solution('7\\n2 2 2 1 1 1 1\\n') == '3'\n\"\"\""
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 2 1\\n') == '1'\nassert solution('2\\n2 2\\n') == '0'\nassert solution('7\\n2 2 2 1 1 1 1\\n') == '3'\nprint('The local tests are done. Try Solution().solution(print(input()))')\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 2 1\\n\") == \"1\"\nassert solution(\"2\\n2 2\\n\") == \"0\"\nassert solution(\"7\\n2 2 2 1 1 1 1\\n\") == \"3\"\nassert solution(\"3\\n1 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 1 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"7 2 2 1 1 1 1\") == \"3\""
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 2 1 1 1 1') == '1'\nassert solution('2\\n2 2') == '0'\nassert solution('7\\n2 2 2 1 1 1 1') == '3'\n\"\"\"\n\nn = int(input())\narr = [int(i) for i in input().split()]\n\narr.sort()\n\nprint(arr[-1] * arr[-2] * arr[-3] // 2)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 2 1\") == \"1\"\nassert solution(\"2\\n2 2\") == \"0\"\nassert solution(\"7\\n2 2 2 1 1 1 1\") == \"3\"\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 1 2 1') == '1'\nassert solution('2\\n2 2') == '0'\nassert solution('7\\n2 2 2 1 1 1 1') == '3'\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 2 1\") == \"1\"\nassert solution(\"2\\n2 2\") == \"0\"\nassert solution(\"7\\n2 2 2 1 1 1 1\") == \"3\"\nprint(\"Success\")"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 5 5') == 13"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 5 5\") == 13\nprint(solution(\"1 1 5 5\"))\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 1 5 5''') == '13'"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 6 6') == 13\nassert solution('1 1 5 5') == 13\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 5 5\") == 13\nassert solution(\"1 1 1 1\") == 0\nassert solution(\"1 1 3 3\") == 0\nassert solution(\"1 1 1 1 1\") == 1\nassert solution(\"1 1 2 2\") == 2\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 5 5\") == 13\nassert solution(\"1 1 10 10\") == 8\n\"\"\"\n\nfrom math import gcd, ceil"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 5 5') == 13\n\"\"\"\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 5 5') == 13"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 5 5') == 13\nassert solution('5 2 10 10') == 11\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 5 5\") == \"13\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n4 4\\n1 3\\n3 1\\n') == 'YES'\nassert solution('8\\n4 4\\n2 3\\n1 6\\n') == 'NO'\nassert solution('8\\n3 5\\n1 2\\n6 1\\n') == 'NO'\nassert solution('8\\n4 4\\n2 3\\n1 1\\n') == 'YES'\n\n\n\n-----Solution-----\n\nx = int(input())\ny = int(input())\na_x, a_y = map(int, input().split())\nb_x, b_y = map(int, input().split())\nc_x, c_y = map(int, input().split())\n\ndist = abs(a_x - b_x) + abs(a_y - b_y)"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n4 4\\n1 3\\n3 1\") == \"YES\"\nassert solution(\"8\\n4 4\\n2 3\\n1 6\") == \"NO\""
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n2 1\\n1 3\\n2 1\") == \"YES\"\nassert solution(\"8 4\\n4 4\\n2 3\\n1 6\") == \"NO\"\nassert solution(\"8 8\\n1 2\\n6 1\\n6 1\") == \"NO\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n6 1\") == \"NO\"\nassert solution(\"8 8\\n4 4\\n2 3\\n1 6\") == \"YES\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n4 4\\n1 3\\n3 1\") == \"YES\"\nassert solution(\"8\\n4 4\\n2 3\\n1 6\") == \"NO\"\nassert solution(\"8\\n3 5\\n1 2\\n6 1\") == \"NO\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n4 4\\n1 3\\n3 1\\n') == 'YES'\nassert solution('8\\n4 4\\n2 3\\n1 6\\n') == 'NO'\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3 5 1 2 6 1\") == \"NO\"\nassert solution(\"8 4 4 1 3 1\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n4 4\\n1 3\\n3 1') == 'YES'\nassert solution('8\\n4 4\\n2 3\\n1 6') == 'NO'\n\n\"\"\""
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2\\n1 3') == 'NO'\nassert solution('4 3\\n4 1\\n1 3') == 'NO'\nassert solution('3 3\\n2 1\\n1 2') == 'NO'\n\n\"\"\""
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n4 4\\n1 3\\n3 1\") == \"YES\"\nassert solution(\"8\\n4 4\\n2 3\\n1 6\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"24\"\n\nimport re\n\nassert re.search(r'^(\\d+)\\n?.*(\\d+)\\n?.*(\\d+)\\n?.*(\\d+)\\n?.*(\\d+)\\n?.*(\\d+)$', \"\"\"5\n13 35 77\n17 95 63\n24 55 22\n12 97 81\n20 107 25\"\"\")\n\nimport re\n\nassert re.search(r'^(\\d+)\\n?.*(\\d+)\\n?.*(\\d+)\\n?.*(\\d+)\\n?.*(\\d+)\\n?.*(\\d+)$', \"\"\"6\n1 2 4 8 16 32\n17 95 63\n24 55 22\n12 97 81\n20 107 25\n37 96 100\"\"\")\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n13 35 77\") == \"1001\"\nassert solution(\"6\\n1 2 4 8 16 32\") == \"32\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 7 10') == '10'\nassert solution('3 7 9') == '7'\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 4 8 16\") == \"16\"\nprint(solution(\"2 3\"))\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 2 4 8 16 32\") == \"32\"\n\"\"\"\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13 35 77\\n') == '1001'\nassert solution('1 2 4 8 16 32\\n') == '32'\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 35 77\\n') == '1001'\nassert solution('6\\n1 2 4 8 16 32\\n') == '32'\n\"\"\"\n\nn = int(stdin.readline())\narr = [int(i) for i in stdin.readline().split(' ')]\nlcm = arr[0]\nfor i in range(1, n):\n    lcm = lcm * arr[i] // math.gcd(lcm, arr[i])\nprint(lcm)\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2 4') == '4'\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 35 77\") == \"1001\"\n\"\"\""
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 4 8 16 32\") == \"32\"\n\na = [13, 35, 77]\n\na.sort()\na = a[::-1]\n\nfor i in range(len(a) - 1):\n    a[i + 1] = (a[i] * a[i + 1]) // gcd(a[i], a[i + 1])\n\nprint(a[-1])\n\nassert solution(\"13 35 77\") == \"1001\"\n\na = [1, 2, 4, 8, 16, 32]\n\na.sort()\na = a[::-1]\n\nfor i in range(len(a) - 1):\n    a[i + 1] = (a[i] * a[i + 1]) // gcd(a[i], a[i + 1])\n\nprint(a[-1])\n\nassert solution(\"1 2 4 8 16 32\") == \"32\""
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n2 1\\n1 3\") == \"2\"\nassert solution(\"1 5\\n2 3\\n1 3\") == \"0\"\nassert solution(\"2 5\\n2 1\\n1 3\") == \"500000000\"\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2 4\n5 2\n2 1\n\n2 1\n1 3\n\n1 5\n2 3\n\n1 1000000000\n1 1\n\n''') == 2\n\nassert solution('''\n2 4\n5 2\n2 1\n\n2 1\n1 3\n\n1 5\n2 3\n\n1 1000000000\n1 1\n\n''') == 1\n\nassert solution('''\n1 1\n1 1\n\n1 1\n1 1\n\n''') == 0\n\nassert solution('''\n2 5\n2 1\n1 3\n\n2 1\n1 3\n\n1 5\n2 3\n\n1 1000000000\n1 1\n\n''') == 500000000\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4\\n5 2\\n2 1') == '2'\nassert solution('1 5\\n2 3') == '1'\nassert solution('1 2\\n1 3') == '0'\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 1\\n1 3\") == \"2\"\nassert solution(\"1 5\\n2 3\\n\") == \"0\"\nassert solution(\"2 5\\n2 1\\n1 3\") == \"5\"\n\n\"\"\"\n\n\"\"\"\nThe maximum number of baskets that a man can fill completely is the maximum number of baskets that can be filled completely using all the red berries and all the blue berries in the shrubs.\n\nOur goal is to find the maximum number of baskets that can be filled completely, so we calculate the maximum number of baskets that can be filled completely using all the red berries and all the blue berries in the shrubs. We also calculate the maximum number of baskets that can be filled completely using only the red berries and only the blue berries in the shrubs.\n\nIf we know the maximum number of baskets that can be filled completely using all the red berries and all the blue berries in the shrubs, then we can find the maximum number of baskets that can be filled completely using only the red berries and only the blue berries in the shrubs.\n\nTo calculate the maximum number of baskets that can be filled completely using all the red berries and all the blue berries in the shrubs, we can keep track of the number of red berries and the number of blue berries that are already in the basket.\n\nThe maximum number of baskets that can be filled completely using only the red berries and only the blue berries in the shrubs is the maximum number of baskets that can be filled completely using only the red berries and only the blue berries in the shrubs.\n\nOnce we have the maximum number of baskets that can be filled completely using only the red berries and only the blue berries in the shrubs, then we can find the maximum number of baskets that can be filled completely using all the red berries and all the blue berries in the shrubs.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5\\n2 3\\n\") == \"0\"\nassert solution(\"2 5\\n2 1\\n1 3\\n\") == \"1\"\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n5 2\\n2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 4\"\n) == 2\nassert solution(\n    \"1 5\"\n) == 1\nassert solution(\n    \"2 5\"\n) == 0\nassert solution(\n    \"2 1\"\n) == 2\nassert solution(\n    \"1 2\"\n) == 1\n\n\"\"\"\n\nfrom collections import Counter\nfrom functools import lru_cache\nfrom math import ceil\nfrom sys import stdin\n\ncache = Counter()\n\n\n@lru_cache()\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2\n2 1\n1 3\n3 2''') == '2'\nassert solution('''5 2\n2 1\n1 3\n3 2''') == '2'\nassert solution('''3 2\n2 1\n1 3\n3 2''') == '0'\nassert solution('''1 2\n1 1''') == '0'\nassert solution('''1 2\n1 2''') == '1'\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4\\n5 2\\n2 1') == 2\n\nassert solution('1 5\\n2 3\\n1 3') == 1\n\nassert solution('2 5\\n2 1\\n1 3') == 0\n\n\"\"\""
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8.549e2\") == \"854.9\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8.549e2\") == \"854.9\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8.549e2\") == \"854.9\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\"\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8.549e2') == '854.9'\nassert solution('8.549e3') == '8549'\nassert solution('0.33e0') == '0.33'\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8.549e2\") == \"854.9\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\""
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8.549e2\") == \"854.9\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\"\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(8.549e2) == '854.9'\nassert solution(8.549e3) == '8549'\nassert solution(0.33e0) == '0.33'\nassert solution(8.549e4) == '8549'\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8.549e2') == '854.9'\n\"\"\"\n\nimport math"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8.549e2\") == \"854.9\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\"\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(8.549e2) == '854.9'\nassert solution(8.549e3) == '8549'\nassert solution(0.33e0) == '0.33'"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"5 2\n2 4 5 1 3\n3 4 -10 -8 8\"\"\"\n) == '8'\n\nassert solution(\n    \"\"\"2 2\n2 4 5 1 3\n3 4 -10 -8 8\"\"\"\n) == '0'\n\nassert solution(\n    \"\"\"1 10\n2 9 3 4 5 6 7 8 9 10 1\"\"\"\n) == '40'\n\nassert solution(\n    \"\"\"1 10\n2 8 3 4 5 6 7 9 10 1\"\"\"\n) == '50'\n\nassert solution(\n    \"\"\"6 3\n1 3 2 4 5 6\"\"\"\n) == '15'"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\") == \"8\"\nassert solution(\"5 1\\n1 4 2 3 5\\n3 4 -10 -8 8\") == \"8\"\nassert solution(\"5 3\\n1 4 2 3 5\\n3 4 -10 -8 8\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\") == \"8\"\nassert solution(\"5 2\\n2 4 5 1 3\\n3 4 8 -10 8\") == \"7\"\nassert solution(\"5 2\\n2 4 5 1 3\\n3 4 8 10 -8\") == \"0\"\nassert solution(\"3 2\\n1 3\\n2 1\") == \"1\"\nassert solution(\"5 2\\n2 4 5 1 3\\n3 4 8 10 -8\") == \"7\"\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\") == \"8\"\n\"\"\"\n\n\"\"\"\n--------Truth Table--------\n\nsquare      move     next_square\n1           1         2\n1           2         4\n2           1         4\n2           2         1\n3           1         5\n3           2         3\n4           1         3\n4           2         5\n5           1         3\n5           2         5\n\n1. if square==next_square\n    max_score += C[next_square]\n2. if square!=next_square\n    max_score = max(max_score, C[next_square])\n\"\"\"\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8') == '8'\n\"\"\""
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 -1 1\") == \"0\"\nassert solution(\"5 2 1 3 4 5\") == \"4\"\nassert solution(\"7 2 1 3 4 -10 0 8\") == \"8\"\nassert solution(\"5 2 1 3 4 5\") == \"4\"\n\"\"\"\n\nN, K = map(int, input().split())\nP = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nres = 0\nfor i in range(N):\n    if i + K > N:\n        res += C[P[i]]\n    else:\n        res += max(C[P[i]], C[P[i + K]])\nprint(res)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\") == 8\n\"\"\""
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\n----Problem-----\nhttps://www.hackerrank.com/challenges/maximum-points-in-a-straight-line/problem\n\"\"\"\n\n\"\"\"\n-----Explanation-----\nhttps://www.youtube.com/watch?v=ZLxrTZjD6eE\n\"\"\"\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 2\n2 4 5 1 3\n3 4 -10 -8 8''') == '8'\n\n-------------------------------\n\nimport sys"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n\") == 8\n\n\"\"\"\n\nfrom collections import defaultdict\n\ninput_data = input()\nn_m = input_data.split()\nn = int(n_m[0])\nm = int(n_m[1])\n\npaths = []\nfor i in range(n):\n    path = input()\n    paths.append(path)"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == 'YES'\nassert solution(test_input_2) == 'NO'\n\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n6 7 1 6\n1 2 2\n1 3 10\n2 3 7\n2 4 8\n3 5 3\n4 5 2\n5 6 1\n''') == '''\nYES\nCAN 2\nCAN 1\nCAN 1\nCAN 1\nYES\n'''\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6 7 1 6\n1 2 2\n1 3 10\n2 3 7\n2 4 8\n3 5 3\n4 5 2\n5 6 1\n''') == 'YES\\nCAN 2\\nCAN 1\\nCAN 1\\nCAN 1\\nYES'\n\"\"\"\n\n\nfrom math import inf\nfrom collections import defaultdict\n\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n\n    def addEdge(self, u, v, w):\n        self.graph[u].append([v, w])\n\n    def print_graph(self):\n        for i in self.graph:\n            for j in self.graph[i]:\n                print(i, j[0], j[1])\n\n    def min_dist(self, dist, spt_set):\n        min_dist = inf\n        min_vertex = None\n        for vertex in range(self.V):\n            if dist[vertex] < min_dist and spt_set[vertex] == False:\n                min_dist = dist[vertex]\n                min_vertex = vertex\n        return min_vertex\n\n    def dijkstra(self, src):\n        dist = [inf] * self.V\n        dist[src] = 0\n        spt_set = [False] * self.V\n        for _ in range(self.V):\n            u = self.min_dist(dist, spt_set)\n            spt_set[u] = True\n            for v, w in self.graph[u]:\n                if spt_set[v] == False and dist[v] > dist[u] + w:\n                    dist[v] = dist[u] + w\n\n        print(dist)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\n\n\"\"\"\n\n\nimport os\nimport sys\nfrom datetime import datetime\nfrom itertools import permutations\nfrom typing import Tuple, List\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 1 2\\n1 2 1\\n1 2 2\\n\") == \"YES\\nYES\\nYES\"\nassert solution(\"3 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100\\n\") == \"YES\\nYES\\nYES\\nYES\"\nassert solution(\"6 7 1 6\\n1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1\\n\") == \"YES\\nCAN 2\\nCAN 1\\nCAN 1\\nCAN 1\\nYES\\nYES\"\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 1 2\\n1 2 1\\n1 2 2\\n\") == \"YES\\nYES\\nCAN 1\\n\"\nassert solution(\"6 7 1 6\\n1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1\\n\") == \"YES\\nYES\\nYES\\nYES\\nCAN 1\\nCAN 1\\nYES\\n\"\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 7 1 6\\n1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1\\n\") == \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\\n\"\nassert solution(\"3 3 1 3\\n1 2 10\\n2 3 10\\n1 3 100\\n\") == \"YES\\nYES\\nYES\\n\"\nassert solution(\"2 2 1 2\\n1 2 1\\n1 2 2\\n\") == \"YES\\nNO\"\nassert solution(\"1 2 2\\n1 2 1\\n1 2 2\\n\") == \"NO\"\nassert solution(\"4 2 1 2\\n1 2 1\\n1 2 2\\n1 2 3\\n1 2 4\\n1 2 5\\n1 2 6\\n1 2 7\\n1 2 8\\n1 2 9\\n1 2 10\\n\") == \"NO\"\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1\") == 'YES\\nYES\\nYES\\nYES\\nYES\\nYES'\nassert solution(\"1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1\") == 'NO\\nYES\\nYES\\nYES\\nYES\\nYES'\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\n\ntest_input_1 = \"\"\"\n6 7 1 6\n1 2 2\n1 3 10\n2 3 7\n2 4 8\n3 5 3\n4 5 2\n5 6 1\n\"\"\"\ntest_output_1 = \"\"\"\nYES\nYES\nYES\nYES\nYES\nYES\n\"\"\"\n\ntest_input_2 = \"\"\"\n3 3 1 3\n1 2 10\n2 3 10\n1 3 100\n\"\"\"\ntest_output_2 = \"\"\"\nYES\nNO\n\"\"\""
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1 2\\n1 2 1\\n1 2 2\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\n\"\nassert solution(\"6 7 1 6\\n1 2 2\\n1 3 10\\n2 3 7\\n2 4 8\\n3 5 3\\n4 5 2\\n5 6 1\\n\") == \"YES\\nCAN 2\\nCAN 1\\nCAN 1\\nCAN 1\\nYES\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2\n1 3\n2 4\n2 5''') == '9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2'\n\nassert solution('''3\n1 2\n1 3\n''') == '2\\n1 1\\n1 2'\n\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n''') == '9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2'\n\nassert solution('''1\n1\n''') == '0'\n\nassert solution('''3\n1 2\n1 3\n2 3\n''') == '1\\n1 1\\n1 2'"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n\") == \"3\\n2 3 3\\n2 1 1\\n\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\\n\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\\n\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"3\\n2 3 3\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n1 3\\n\") == \"3\\n2 3 3\"\nassert solution(\"1 2\\n1 3\\n2 4\\n2 5\\n\") == \"9\\n3 5 5\"\nassert solution(\"1 2\\n1 3\\n2 4\\n2 5\\n1 1\\n1 2\\n\") == \"9\\n3 5 5\"\nassert solution(\"1 2\\n1 3\\n2 4\\n2 5\\n1 1\\n1 2\\n1 1\\n\") == \"9\\n3 5 5\"\nassert solution(\"1 2\\n1 3\\n2 4\\n2 5\\n1 1\\n1 2\\n1 1\\n\") == \"9\\n3 5 5\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\") == \"9\"\nassert solution(\"4\\n1 2\\n2 3\") == \"4\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"7\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\nread = sys.stdin.readline\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n2 4\\n2 5\\n\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\"\n\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\\n\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"3\\n2 3 3\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n1 3\") == \"3\\n2 3 3\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n2 5\") == \"9\\n3 5 5\\n4 3 3\\n4 1 1\"\n\n\"\"\""
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 1 1 1 1\") == '6'"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 7 9 7 8\\n5 2 5 7 5\") == \"6\"\nassert solution(\"5\\n1 2 3 4 5\\n1 1 1 1 1\") == \"0\"\nassert solution(\"7\\n5 5 2 1 1 1 1 1\\n1 1 1 1 1 1 1 1\") == \"2\"\n\n\"\"\"\n\n\nimport collections\nimport itertools\nimport re\nimport sys\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('5 1 2 3 4 5\\n1 1 1 1 1') == 0\nassert solution('5 1 2 3 4 5\\n1 2 3 4 5 1') == 6\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3 7 9 7 8\\n5 2 5 7 5') == '6'\nassert solution('5\\n1 2 3 4 5\\n1 1 1 1 1') == '0'"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n1 1 1 1 1\") == \"6\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5\\n1 1 1 1 1') == '0'\n\"\"\"\n\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n1 2 3 4 5\n1 1 1 1 1\n\"\"\") == \"6\"\n\nassert solution(\"\"\"5\n3 7 9 7 8\n5 2 5 7 5\n\"\"\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_stdin) == test_solution\nprint(solution(input()))\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7 8 6 9') == '12'\nassert solution('3 7 9 7 8') == '6'\nassert solution('3 7 9 7 8') == '6'\nassert solution('4 7 8 6 9') == '12'\nassert solution('4 7 8 6 9') == '12'\n\"\"\"\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 7 9 7 8\\n5 2 5 7 5\") == \"6\"\n\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nt = list(map(int, stdin.readline().split()))\n\ndiff = [a[i] - t[i] for i in range(n)]\nans = 0\n\nfor x in diff:\n    if x >= 0:\n        ans += x\n\nprint(ans)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"(())())\") == \"4\"\nassert solution(\"())()\") == \"0\"\nassert solution(\"(()(()))\") == \"4\"\nassert solution(\"()(()\") == \"0\"\nassert solution(\"((((\") == \"0\"\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(()())()\") == '5'\nassert solution(\"))(()(()))\") == '0'\nassert solution(\"))(()(()))\") == '1 1'\n\n\"\"\"\nimport unittest\nfrom typing import List, Optional\n\n\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        assert solution(\"(()())()\") == '5'\n        assert solution(\"))(()(()))\") == '0'\n        "
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()()())(()\") == \"4 8\"\nassert solution(\"))(()(()())()\") == \"0 10\"\nassert solution(\")))(()(()())()\") == \"0 1\"\n\n\"\"\""
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\")(()(()))\") == 4\nassert solution(\"()(())))(\") == 0\nassert solution(\"())(())\") == 1\nassert solution(\"(()())(\") == 0\nassert solution(\"(())(())(\") == 1\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\")(())\") == 0\nassert solution(\"()(())\") == 2\nassert solution(\"((()())(())())\") == 8\nassert solution(\"((()())(())())\") == 8\nassert solution(\"())\") == 0\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('()()())(()') == '5 8 7'\nassert solution('))(()(()())()') == '4 5 10 11'\nassert solution(')))(()') == '0 1 1'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\")(()(()))\") == \"0 2 4 6 8\"\nassert solution(\"()()\") == \"0 2\"\nassert solution(\"()))()\") == \"0 1 1\"\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\")(())(\") == \"0 1\"\nassert solution(\")(()())()\") == \"1 2\"\nassert solution(\"(()())()\") == \"0 1\"\nassert solution(\"(()())()\") == \"0 1\"\nassert solution(\"()()()()\") == \"0 2\"\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('(())') == 0\nassert solution('()())') == 0\nassert solution('()()())') == 0\nassert solution('()()()()') == 0\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()()())(()\") == \"4\\n8 7\"\n\"\"\""
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\nassert solution(\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == \"2 6\"\nassert solution(\"(___)\") == \"0 0\"\nassert solution(\"(__)\") == \"0 0\"\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\nassert solution(\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == \"2 6\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\n\"\"\""
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\nassert solution(\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == \"2 6\"\nassert solution(\"(LoooonG)__shOrt__(LoooonG)\") == \"5 2\"\nassert solution(\"5\") == \"0 0\"\n\nSolution:\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s1) == [4, 2]\n\"\"\"\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == '5 4'\n\"\"\"\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('__Hello__Vasya(and_Petya)__bye_(and_OK)') == 5\nassert solution('_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__') == 2\nassert solution('(LoooonG)__shOrt__(LoooonG)') == 5\nassert solution('(___)') == 0\nassert solution('123') == 3\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('_Hello_Vasya(and_Petya)__bye_(and_OK)') == \"5 4\"\nassert solution('_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__') == \"2 6\"\nassert solution('(LoooonG)__shOrt__(LoooonG)') == \"5 2\"\nassert solution('(___)') == \"0 0\"\n\n\n\n\n-----Test 5-----\n\n\nn=int(input())\na=input()\ns=a[1:-1]\nm=len(s)\nl=[]\nn=len(a)\nfor i in range(0,n):\n    if (a[i]=='('):\n        l.append(a[i])\n    elif(a[i]==')'):\n        x=''.join(l)\n        l.pop()\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == \"5 4\"\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"__abc_123_def_456_\") == \"4 6\"\n\"\"\"\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n1 2 3 4') == '8'\nassert solution('2 4\\n1 2 3 4') == '0'\nassert solution('3 4\\n1 2 2 4') == '7'\nassert solution('2 3\\n1 2 3') == '0'\nassert solution('2 4\\n1 2 2 4') == '0'\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '9'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30') == '36752584293577'\n\n'''\nfrom collections import deque\nfrom math import factorial\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2\\n3 4\") == \"0\\n\"\nassert solution(\"5 2\\n1 2 3 4 5\\n3 4\") == \"0\\n\"\nassert solution(\"5 3\\n1 2 3 4 5\\n3 4 5 6\") == \"5\\n\"\nassert solution(\"3 2\\n1 2 3\\n2 3\") == \"0\\n\"\nassert solution(\"1 1\\n1\") == \"0\\n\"\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 3 3 7') == '0'\nassert solution('6 3\\n12 10 20 20 25 30') == '2'\n\"\"\"\n\nfrom math import factorial\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nans = 0\nfor i in range(M):\n    ans += A[i] * factorial(N - 1) // factorial(i) // factorial(N - i - 1)\n\nfor i in range(M):\n    if A[i] == B[i]:\n        ans += 1\n        break\n\nprint(ans % 1000000007)\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3\\n12 10 20 20 25 30\\n10 20 30') == '2'\nassert solution('4 2\\n1 3 3 7\\n3 7') == '0'\nassert solution('8 2\\n1 2 2 2 2 2 2 2') == '7'\nassert solution('1 0\\n0') == '0'\n\"\"\""
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n4 7\") == \"3\"\nassert solution(\"5 2\\n1 2 3 4 5\\n3 6\") == \"1\"\nassert solution(\"6 2\\n1 2 3 4 5 6\\n3 6\") == \"0\"\nassert solution(\"6 3\\n1 2 3 4 5 6\\n3 6\") == \"0\"\n\"\"\"\nimport collections"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\\n12 10 20 20 25 30\\n10 20 30\") == \"2\"\nassert solution(\"4 2\\n1 3 3 7\\n3 7\") == \"0\"\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 2\n1 3 3 7\n3 7''') == '7'\nassert solution('''4 3\n1 2 2 2 2\n1 2\n''') == '0'\nassert solution('''4 2\n1 2 1 1\n2 1''') == '0'\nassert solution('''8 2\n1 2 2 2 2 2 2 2\n1 2''') == '7'\nassert solution('''5 2\n1 3 3 4 4\n3 4''') == '0'\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n3 7\") == \"2\"\nassert solution(\"8 2\\n1 2 2 2 2 2 2 2\\n1 2\") == \"7\"\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n3 7\") == '0'\nassert solution(\"6 3\\n12 10 20 20 25 30\\n10 20 30\") == '2'\nassert solution(\"8 2\\n1 3 3 7\\n3 7\") == '0'\nassert solution(\"5 1\\n1 2 2 2 2\\n2\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == 6\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == 6\nassert solution('1 1') == 2\nassert solution('49 1808') == 359087121\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == 0\nassert solution(\"2 3\") == 6\nassert solution(\"49 1808\") == 359087121\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"49 1808\") == \"359087121\"\n\n\"\"\""
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"49 1808\") == \"359087121\"\n\nsolution(\"1 1\")\nsolution(\"2 3\")\nsolution(\"49 1808\")\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '0'\nassert solution('2 3\\n') == '6'\nassert solution('49 1808\\n') == '359087121'\n\"\"\"\n\nn, k = map(int, input().split())\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == 6\nassert solution('2 1') == 0\nassert solution('1 1') == 1\nassert solution('3 3') == 15\nassert solution('3 2') == 4\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == '0'\nassert solution('2 3\\n') == '6'\nassert solution('49 1808\\n') == '359087121'\nassert solution('4 4\\n') == '7'\nassert solution('5 5\\n') == '6'\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"2 2\") == \"6\"\nassert solution(\"4 1\") == \"46\"\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"49 1808\") == \"359087121\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"5 6\") == \"0\"\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\") == \"26\"\n\"\"\"\n\nfrom typing import List, Dict\nfrom collections import Counter"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n1 9\n1 7\n2 6\n2 5\n3 1\n''') == '26'\n\nassert solution('''\n5 3\n1 9\n1 7\n2 6\n2 5\n3 1\n''') == '26'\n\nassert solution('''\n5 3\n1 9\n1 7\n2 6\n2 5\n3 1\n''') == '26'\n\nassert solution('''\n5 3\n1 9\n1 7\n2 6\n2 5\n3 1\n''') == '26'\n\nassert solution('''\n5 3\n1 9\n1 7\n2 6\n2 5\n3 1\n''') == '26'"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\\n\") == \"26\"\n\n\"\"\"\n\nimport sys\n\ntest_input = sys.stdin.read()\ntest_input = test_input.split('\\n')\n\ninput = test_input[1:]\n\nN = int(test_input[0].split()[0])\nK = int(test_input[0].split()[1])\n\nlist_of_sushi = []\nfor idx, line in enumerate(input):\n    new_line = line.split()\n    list_of_sushi.append([idx+1, int(new_line[0]), int(new_line[1])])\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n3 4\") == '8'\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 9\\n1 7\\n2 6\\n2 5\\n3 1\\n\") == '26'\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\\n\") == \"26\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2\\n3 2\\n4 1\") == \"5\"\nprint(\"Test 1 passed\")\n\nassert solution(\"4 1\\n1 2\\n3 2\\n4 1\") == \"7\"\nprint(\"Test 2 passed\")\n\nassert solution(\"5 2\\n1 2\\n3 2\\n4 1\\n5 1\") == \"8\"\nprint(\"Test 3 passed\")\n\nassert solution(\"5 2\\n1 2\\n3 2\\n4 1\\n5 1\") == \"8\"\nprint(\"Test 4 passed\")\n\nassert solution(\"5 2\\n1 2\\n3 2\\n4 1\\n5 1\") == \"8\"\nprint(\"Test 5 passed\")\n\n\"\"\""
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\") == \"26\"\n\"\"\"\n\nfrom collections import defaultdict\n\nN, K = map(int, input().split())\n\nt_d = defaultdict(list)\nfor _ in range(N):\n    t, d = map(int, input().split())\n    t_d[t].append(d)"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\\n\") == \"26\"\n\n\"\"\"\n\nimport math\n\nfrom collections import namedtuple\n\nsushi = namedtuple('Sushi', 'kind, deliciousness')"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\\n\") == \"26\"\n\"\"\""
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(\"2\\n0 100\\n50 -50\") == \"100.000000000000000000000000000000000000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\\n\") == \"10.000000000000000000000000000000000000000000000000\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0 10\n5 -5\n-5 -5\n''') == '10.000000000000000000000000000000000000000000000000'\n\nassert solution('''\n1\n1 0\n''') == '1.000000000000000000000000000000000000000000000000'\n\nassert solution('''\n1\n0 1\n''') == '0.5000000000000000000000000000000000000000000000000'\n\nassert solution('''\n2\n0 10\n5 -5\n''') == '10.5000000000000000000000000000000000000000000000000'\n\nassert solution('''\n3\n0 10\n5 -5\n-5 -5\n''') == '10.000000000000000000000000000000000000000000000000'"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 10\\n5 -5\\n-5 -5') == '10.0'\n\"\"\"\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.000000000000000000000000000000000000000000000000\"\n\"\"\""
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.000000000000000000000000000000000000000000000000\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.000000000000000000000000000000000000000000000000\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.0\"\n\"\"\"\n\nfrom typing import List, Tuple, Union\n\nInput = Tuple[int, Union[int, float], Union[int, float],...]\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n0 10\n5 -5\n-5 -5''') == '10.0'\nassert solution('''5\n1 -1\n2 3\n3 -3\n4 0\n-1 -1''') == '9.0'\n\n\"\"\"\nYou are given a positive integer N which represents the number of steps that can be made with a certain fuel and a certain distance between stations. You are standing at the first station and your goal is to reach the last station. During the N steps, you must move to the next station by the following command:\n\nTake 1 step with the current fuel.\nTake 1 step with the distance between stations.\nFuel can be any positive integer, but the same fuel cannot be used more than once in a single step.\n\nDuring each step, you may decide to increase the distance between stations if it is possible.\n\nThe fuel you can use for the next step is the same fuel that was used for the last step. If you decide to increase the distance between stations, fuel used for this step is 0.\n\nYour task is to find the minimum number of steps to reach the last station.\n\nInput\nThe first line contains a single integer T, the number of test cases. Then, T test cases follow.\n\nThe only line of each test case contains two integers: N and L.\n\nOutput\nFor each test case, print a single line containing the minimum number of steps that must be made.\n\nExample\nInput:\n3\n2 2\n6 1\n4 9\n\nOutput:\n3\n5\n2\n\nExplanation:\nTest Case 1\n\nWe can reach the last station in two steps, as follows:\n\nStep 1:\nTake 1 step of distance 1 with fuel 2.\nFuel used: 2\n\nStep 2:\nTake 1 step of distance 2 with fuel 1.\nFuel used: 0\n\nTest Case 2\n\nWe can reach the last station in five steps, as follows:\n\nStep 1:\nTake 1 step of distance 1 with fuel 2.\nFuel used: 2\n\nStep 2:\nTake 1 step of distance 2 with fuel 1.\nFuel used: 1\n\nStep 3:\nIncrease distance by 1.\nFuel used: 0\n\nStep 4:\nTake 1 step of distance 2 with fuel 1.\nFuel used: 1\n\nStep 5:\nTake 1 step of distance 2 with fuel 1.\nFuel used: 0\n\"\"\"\n\"\"\"\nT = int(stdin.readline().strip())\nfor t in range(T):\n    n, l = map(int, stdin.readline().strip().split())\n    print(n * (l + 1) // 2)\n\"\"\""
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 10\\n5 -5\\n-5 -5\") == \"10.000000000000000000000000000000000000000000000000\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1?A0\") == 100\n\"\"\""
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1?AA\") == 100\nassert solution(\"?AJ\") == 81\nassert solution(\"0?0\") == 1\nassert solution(\"1??\") == 9\nassert solution(\"123??\") == 36\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1?AA\") == 100\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == result\nprint(solution(input()))\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('?JGJ9') == 81\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\n---"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1?AA') == 100\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1?AA\") == 100\nassert solution(\"2?AB\") == 200\nassert solution(\"3?ABC\") == 400\nassert solution(\"4?ABD\") == 800\nassert solution(\"5?ABCD\") == 1600\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1?AA') == 100\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1?AA\") == 100\n\"\"\"\n\n\"\"\"\nThe second argument is a list of integers. \n\nThe solution is a list of integers. \n\nThere is an integer in the solution that is not in the arguments. \n\nThe list of arguments contains one more element than the solution. \n\nEach element of the solution is not greater than or equal to the corresponding argument. \n\nThe list of arguments contains no duplicates. \n\nThe list of arguments contains at least one element.\n\nThe list of arguments contains no more than 10 elements.\n\nThe list of arguments contains no elements greater than 100.\n\nThe list of arguments contains no more than 100 elements.\n\nThe list of arguments contains no elements greater than 1000.\n\nThe list of arguments contains no elements greater than 10000.\n\nThe list of arguments contains no more than 10000 elements.\n\n\"\"\""
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 2 2 3') == '2'\nassert solution('4\\n3 2 2 3') == '0'\nassert solution('6\\n4 5 6 3 2 1') == '3'\nassert solution('10\\n6 8 4 6 7 1 6 3 4 5') == '3'\nassert solution('10\\n6 8 4 6 7 1 6 3 4 5') == '3'\n\n'''\n\nn = int(stdin.readline())\nl = list(map(int, stdin.readline().split()))\n\ncnt = 0\n\nfor i in range(n):\n    if l[i] == i + 1:\n        continue\n    else:\n        if l[i] < i + 1:\n            l[l[i] - 1] = l[i]\n            cnt += 1\n        else:\n            l[i] = l[l[i] - 1]\n            cnt += 1\n\nprint(cnt)\n\nprint(' '.join(map(str, l)))"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 2 3\") == \"2\"\nassert solution(\"4 5 6 3 2 1\") == \"0\"\nassert solution(\"6 8 4 6 7 1 6 3 4 5\") == \"3\"\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 6 3 2 1\") == \"0\"\nassert solution(\"6 8 4 6 7 1 6 3 4 5\") == \"3\"\nassert solution(\"10 6 8 4 6 7 1 6 3 4 5\") == \"3\"\nassert solution(\"4 5 6 3 2 1\") == \"0\"\nassert solution(\"6 8 4 6 7 1 6 3 4 5\") == \"3\"\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 2 3') == '2'\nassert solution('6 8 4 6 7 1 6 3 4 5') == '3'\nassert solution('10 6 8 4 6 7 1 6 3 4 5') == '3'\nassert solution('6 8 4 6 7 1 6 3 4 5') == '0'\nassert solution('4 5 6 3 2 1') == '0'\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3 2') == '1 2 4 3'\nassert solution('6 8 4 6 7 1 6 3 4 5') == '2 8 4 6 7 1 9 3 10 5'\nassert solution('10 6 8 4 6 7 1 6 3 4 5') == '3 8 4 6 7 1 9 3 10 5'"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 6 3 2 1') == '2 8 4 6 7 1 9 3 10 5'\nassert solution('6 8 4 6 7 1 6 3 4 5') == '2 8 4 6 7 1 9 3 10 5'\nassert solution('10 6 8 4 6 7 1 6 3 4 5') == '3 2 8 4 6 7 1 9 3 10 5'\n\"\"\"\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 2 3\") == \"2\"\nassert solution(\"4\\n1 2 3 4\") == \"1 2 4 3\"\nassert solution(\"6\\n4 5 6 3 2 1\") == \"3 2\"\nassert solution(\"10\\n6 8 4 6 7 1 6 3 4 5\") == \"3\"\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 6 3 2 1') == '2 8 4 6 7 1 9 3 10 5'\nassert solution('6 8 4 6 7 1 6 3 4 5') == '0 4 5 6 7 1 9 3 10 5'\nassert solution('10 6 8 4 6 7 1 6 3 4 5') == '3 2 8 4 6 7 1 9 3 10 5'\n\n\n\nimport sys\n\nn = int(input())\narr = list(map(int, input().split(' ')))\n\ncount = 0\narr_set = set(arr)\n\nfor i in range(n):\n    if i+1 not in arr_set:\n        count += 1\n        arr[arr.index(i+1)] = i+1\n\nprint(count)\nprint(' '.join(list(map(str, arr))))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 8 4 6 7 1 6 3 4 5\") == \"3 2 8 4 6 7 1 9 3 10 5\"\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == expected_result\nprint(solution(input))\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n20 10 30 40 10\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n20 10 30 40 10\") == \"20\\n1 3 4\"\nassert solution(\"6 5\\n90 20 35 40 60 100\") == \"35\\n1 3 4 5 6\"\n\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\nlight_hours = [int(x) for x in input().split()]\n\nlight_hours = sorted(light_hours, reverse=True)\nlight_hours = light_hours[:k]\n\nlight_hours = sorted(light_hours)\nfor i in range(k):\n    print(light_hours[i])\n\n\"\"\"\n\u0412\u0430\u0441\u044f \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0441\u044f \u0441 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0441\u0432\u043e\u0435\u0433\u043e \u0433\u0440\u0443\u043f\u043f\u044b \u0438 \u0445\u043e\u0447\u0435\u0442 \u0443\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0441 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c\u0438 \u043d\u0430 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u043d\u043e\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435.\n\n\u0412\u0430\u0441\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0441 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0438 \u0438\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0437\u0430\u0434\u0430\u043d\u0430 \u0432 \u0432\u0438\u0434\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u0441\u0442\u0440\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0438\u043c\u0435\u043d\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430, \u0435\u0433\u043e \u0431\u0430\u043b\u043b\u043e\u0432 \u0437\u0430 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b (\u044d\u0442\u043e \u0447\u0438\u0441\u043b\u0430 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439), \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n\n\u0412\u0430\u0441\u044f \u0445\u043e\u0447\u0435\u0442 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0438\u043c\u0435\u043d\u0430 \u0434\u0432\u0443\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0431\u0430\u043b\u043b\u0430\u043c \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u0438\u0437 \u043d\u0438\u0445. \u0415\u0441\u043b\u0438 \u0443 \u0434\u0432\u0443\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0431\u0430\u043b\u043b\u043e\u0432 \u0437\u0430 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b, \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u043c\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043e\u0446\u0435\u043d\u043e\u043a \u0437\u0430 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b.\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0440\u0438 \u043d\u0430\u0431\u043e\u0440\u0430 \u0438\u043c\u0451\u043d, \u0437\u0430\u0442\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u0438\u043c\u0435\u043d\u0430 \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043c\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0442\u0430\u043b \u043f\u0435\u0440\u0432\u044b\u043c. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0438\u043c\u044f \u0442\u043e\u0433\u043e, \u043a\u0442\u043e \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043d\u0430\u0431\u0440\u0430\u043b \u0431\u043e\u043b\u044c\u0448\u0435 \u0431\u0430\u043b\u043b\u043e\u0432 \u0437\u0430 \u0432\u0441\u0435 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b.\n\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0422\u0440\u0438 \u043d\u0430\u0431\u043e\u0440\u0430 \u0438\u043c\u0451\u043d, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043d\u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u043d\u0430\u0431\u043e\u0440 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043e\u0442 1 \u0434\u043e 100, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u043c\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0440\u0443\u0441\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432 \u0432 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435.\n\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u043c\u044f \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0438\u0437 \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043a\u0438\u0445 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u044e\u0431\u043e\u0439.\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\n1 2 3\n1 2\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\n\u0414\u0436\u043e\u043d\n\n\u0422\u0435\u0441\u0442 2\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\n5 10 15\n1 5"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('2 2') == '1'\nassert solution('1 2 3 4 5 6') == '5'\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n20 10 30 40 10') == '20'\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n20 10 30 40 10') == '20'\nassert solution('6 5\\n90 20 35 40 60 100') == '35'\n\n\"\"\""
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n20 10 30 40 10\") == \"20\"\nassert solution(\"6 5\\n90 20 35 40 60 100\") == \"35\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n20 10 30 40 10\") == \"20\"\nassert solution(\"6 5\\n90 20 35 40 60 100\") == \"35\"\nassert solution(\"6 5\\n90 20 35 40 60 100\") == \"35\"\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n20 10 30 40 10\") == \"20\\n1 3 4\"\nassert solution(\"6 5\\n90 20 35 40 60 100\") == \"35\\n1 3 4 5 6\"\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n20 10 30 40 10') == 20\nassert solution('6 5\\n90 20 35 40 60 100') == 35\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n20 10 30 40 10\") == \"20\"\nassert solution(\"6 5\\n90 20 35 40 60 100\") == \"35\"\nassert solution(\"1\\n50\") == \"50\"\nassert solution(\"2\\n10 10\") == \"10\"\nassert solution(\"3\\n10 10 10\") == \"10\"\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"6\") == \"28\"\nassert solution(\"2\") == \"0\"\n\"\"\"\n\nn = int(input())\nscore = 0\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        for k in range(1, n + 1):\n            if i * j == k or k * j == i:\n                score += k\n                break\nprint(score)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"6\") == \"28\"\nassert solution(\"2\") == \"0\"\n\n-----Constraints-----\n\n2 <= n <= 10^5\n\"\"\""
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"6\") == \"28\"\nassert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"8\"\nassert solution(\"100\") == \"998\"\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"28\"\nassert solution(\"4\") == \"8\"\n\"\"\"\nfrom collections import deque\nfrom itertools import product\n\n\"\"\"\n'pythonic' solution:\n\nThe problem is equivalent to a graph coloring problem, where each node is one of the possible digits and each edge is a possible transformation of a digit to another digit.\n\nSince we are given that $2 \\le n \\le 100\\,000$, the graph is guaranteed to be connected, and that $2$ is a vertex of the graph.\n\nThen, the coloring algorithm works as follows:\n\n1. For each node $2$ in the graph, find out how many edges it has (in other words, how many possible transformations it can undergo). The possible edges are $2 \\rightarrow 4$ (for a digit-to-digit transformation) and $4 \\rightarrow 2$ (for a digit-to-digit transformation, since $2$ is not allowed to become $4$).\n\n2. Take the one with the most edges, and color it red.\n\n3. Find out how many edges each of the remaining nodes has, and color them in a sequence (e.g. $4 \\rightarrow 2$).\n\n4. Keep on repeating step 2 and 3 until we have colored all nodes.\n\"\"\"\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '8'\nassert solution('6') == '28'\nassert solution('2') == '0'\n\"\"\"\n\nn = int(input())\n\nmax_num = 1\n\nfor a in range(1, n):\n    max_num += a * 2"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"6\") == \"28\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"6\") == \"28\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"6\") == \"28\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '8'\nassert solution('6') == '28'\nassert solution('2') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"6\") == \"28\"\nassert solution(\"2\") == \"0\"\n\"\"\""
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 3\n1 2 3\n2 3 1\n1 2 1\"\"\") == \"2\"\n\nassert solution(\"\"\"3 4\n10 10 3\n5 1 6\n2 2 2\n1 5 7\"\"\") == \"1\"\n\n\"\"\"\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nAt the second stage city 1 chosen candidate 3, city 2 chosen candidate 5, city 3 chosen candidate 1. The winner is candidate 5, he gained 3 votes.\n\nIn the third case, there are two candidates who got the maximum number of votes: 2 and 5. Candidate 5 has a smaller index, so the city chose him.\n\nAt the first stage city 1 chosen candidate"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 3\\n2 3 1\\n1 2 1\") == \"2\"\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\") == \"1\"\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2 3\\n2 3 1\\n1 2 1') == '2'\nassert solution('4 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7') == '1'\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 3\\n2 3 1\\n1 2 1\\n') == '2'\n\"\"\""
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2 3\\n2 3 1\\n1 2 1') == '2'\nassert solution('3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7') == '1'\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2 3\\n2 3 1\") == '2'\nassert solution(\"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\") == '1'\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\") == \"1\"\n\n-----\n\"\"\""
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 2 3\\n2 3 1\\n1 2 1') == '2'\nassert solution('5 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7') == '1'\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 3\\n2 3 1\\n1 2 1\") == \"2\"\n\nassert solution(\"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\") == \"1\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6\\n4 5 2\\n8 9 6 10 7 11') == '5'\n\"\"\"\n\nn, m = list(map(int, input().split()))\nlst = list(map(int, input().split()))\n\nmax_sec = min(lst)\nmax_sec_index = lst.index(max_sec)\n\nlst_wrong = list(map(int, input().split()))\nmin_sec = max(lst_wrong)\nmin_sec_index = lst_wrong.index(min_sec)\n\nsec = max(max_sec, min_sec)"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6\\n4 5 2\\n8 9 6 10 7 11') == '5'\nassert solution('3 1\\n3 4 5\\n6') == '-1'\nassert solution('1 1\\n1') == '1'\nassert solution('2 1\\n2') == '1'\nassert solution('3 1\\n3') == '-1'\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 2\\n8 9 6 10 7 11\") == '5'\n\"\"\""
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n4 5 2\\n8 9 6 10 7 11\") == \"5\"\n\"\"\""
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n4 5 2\\n8 9 6 10 7 11\") == \"5\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"3 1\\n1\") == \"-1\"\nassert solution(\"1\\n5\") == \"-1\"\n\"\"\"\nimport sys\nfrom math import inf"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n4 5 2\\n8 9 6 10 7 11\") == \"5\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n4 5 2\\n8 9 6 10 7 11') == '5'"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 2\\n8 9 6 10 7 11\\n\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 2\\n8 9 6 10 7 11') == '5'\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 2\") == \"5\"\nassert solution(\"8 9 6 10 7 11\") == \"9\"\nassert solution(\"3 4 5\") == \"5\"\nassert solution(\"3 1 2\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2016') == '2044'\nassert solution('2000') == '2028'\nassert solution('50501') == '50507'\nassert solution('505') == '50505'\n\"\"\""
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2016') == '2044'\n\"\"\""
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2016\") == \"2044\"\nassert solution(\"50501\") == \"50507\"\nassert solution(\"2000\") == \"2028\"\n\n'''"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2016\") == \"2044\"\nassert solution(\"2000\") == \"2028\"\nassert solution(\"50501\") == \"50507\"\n\n\n-----\n\n\n\"\"\""
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2016) == 2044\nassert solution(2000) == 2028\nassert solution(50501) == 50507\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2016') == '2044'\nassert solution('2000') == '2028'\nassert solution('50501') == '50507'\n\"\"\"\n\nimport math\n\ny = int(input())\n\nnext_year = y + 1\n\nwhile True:\n    if math.floor(next_year / 100) == math.floor(y / 100) and math.floor(next_year / 400) == math.floor(y / 400):\n        print(next_year)\n        break\n    next_year += 1\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2016') == '2044'\nassert solution('2000') == '2028'\nassert solution('50501') == '50507'"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2016') == '2044'\nassert solution('2000') == '2028'\nassert solution('50501') == '50507'\n\"\"\"\n\ny = int(input())"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2020) == 2044\n\"\"\"\n\n\"\"\"\n\u0414\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u043b\u043e\u0432. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u043d\u0435\u0439 \u0441\u043b\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u043b\u043e\u0432. \u042d\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0439 \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u041e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a, \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n\nSample Input 1:\n\n4\n10.8\nSample Output 1:\n\n1\nSample Input 2:\n\n1\n5\nSample Output 2:\n\n0\nSample Input 3:\n\n\u0410\u0411\u0411\u0410\u0411\u0410\u0411\u0411\u0410\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\u0411\u0411\u0410\ufffd"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2016') == '2044'\nassert solution('2000') == '2028'\nassert solution('50501') == '50507'\n\"\"\"\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1900:01:01 2038:12:31') == '50768'\nassert solution('1996:03:09 1991:11:12') == '1579'\n\"\"\"\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1900:01:01\") == 50768\nassert solution(\"2038:12:31\") == 843191\n\"\"\"\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1900:01:01\") == 50768\nassert solution(\"2038:12:31\") == 1579\n\"\"\"\n\nimport datetime\n\nclass Calendar:\n    def __init__(self, date):\n        self.date = date\n\n    def __str__(self):\n        return str(self.date)\n\n    @staticmethod\n    def date_in_correct_format(date):\n        try:\n            date_list = date.split(':')\n            year = int(date_list[0])\n            month = int(date_list[1])\n            day = int(date_list[2])\n        except:\n            print('Incorrect date format')\n            return False\n        if year not in range(1900, 2030) or month not in range(1, 13) or day not in range(1, 32):\n            print('Incorrect date')\n            return False\n        return True\n\n    def change_date_format(self):\n        try:\n            date_list = self.date.split('-')\n            date_list = date_list[::-1]\n            self.date = f'{date_list[0]}:00:00'\n            return True\n        except:\n            print('Incorrect date format')\n            return False\n\n    def is_leap_year(self):\n        year = self.date.split(':')[0]\n        try:\n            year = int(year)\n        except:\n            print('Incorrect year format')\n            return False\n\n        if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n            return True\n        return False\n\n    def days_in_month(self):\n        month = self.date.split(':')[1]\n        try:\n            month = int(month)\n        except:\n            print('Incorrect month format')\n            return False\n\n        if month == 1:\n            return 31\n        elif month == 2:\n            if self.is_leap_year():\n                return 29\n            return 28\n        elif month == 3:\n            return 31\n        elif month == 4:\n            return 30\n        elif month == 5:\n            return 31\n        elif month == 6:\n            return 30\n        elif month == 7:\n            return 31\n        elif month == 8:\n            return 31\n        elif month == 9:\n            return 30\n        elif month == 10:\n            return 31\n        elif month == 11:\n            return 30\n        elif month == 12:\n            return 31\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1900:01:01\") == 50768\nassert solution(\"2038:12:31\") == 1579\n\"\"\"\n\nimport datetime\n\ndate1 = input()\ndate2 = input()\n\ndate1 = datetime.datetime.strptime(date1, '%Y:%m:%d')\ndate2 = datetime.datetime.strptime(date2, '%Y:%m:%d')\nprint((date2 - date1).days)"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1900:01:01\") == \"50768\"\n\nassert solution(\"2038:12:31\") == \"3079\"\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1900:01:01\") == 50768\nassert solution(\"1996:03:09\") == 1579\n\"\"\"\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1900:01:01\") == \"50768\"\nassert solution(\"2038:12:31\") == \"1579\"\nassert solution(\"1998:03:01\") == \"146714\"\nassert solution(\"1995:11:01\") == \"146954\"\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1900:01:01\") == 50768\nassert solution(\"2038:12:31\") == -50768\n\"\"\"\nimport datetime"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"1900:01:01\"\n) == \"50768\"\nassert solution(\n\"1996:03:09\"\n) == \"1579\"\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1900:01:01 2038:12:31\") == 50768\nassert solution(\"1996:03:09 1991:11:12\") == 1579\n\"\"\"\n\nimport sys"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 4\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n2 4 5 6\") == \"2\\n4\"\n\n\"\"\"\n\nfrom collections import defaultdict, Counter\nimport sys"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == result\n\n-----Explanation-----\n\nWe have a graph in which all the roads are bi-directional and the cities are numbered 1...n.\n\nSo, in this graph there are n-1 roads, and 2*(n-1) cities: 1, 2, 3,..., n and 1, 2, 3,..., n, 1, 2,..., n, 1, 2,..., n, 1, 2,..., n, 1, 2,..., n.\n\nThe city with number 1 is an arbitrary starting city. In our solution we will start in the city 1.\n\nThe path from 1 to 1 is obviously empty, and the shortest path from 1 to any other city is obviously 1 kron. So in the first case the answer is 1 kron.\n\nThe second case is more complicated: we have to check all the possible combinations to find the shortest path. The shortest path from 1 to any other city is the minimum of the paths from 1 to any other city in the first case and the paths from 1 to the other cities in the second case. For this, we consider the paths from 1 to each city in the first case and the paths from 1 to each other city in the second case. These paths are the minimum in both cases.\n\nSo the answer is the minimum of the minimums of these paths.\n'''"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3 7\\n2 7\") == '2\\n3\\n2\\n3'\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3 7\\n2 7\") == \"2\"\nassert solution(\"6 4\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n2 4 5 6\") == \"2\"\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\\n4 3\\n3 2\\n2 1\\n1 3\\n2 1\") == \"3\\n3\"\nassert solution(\"4 2\\n1 2\\n3 4\\n4 3\\n3 2\\n2 1\\n1 3\\n2 1\") == \"2\\n3\"\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3 7\\n2 7\") == \"2\\n3\"\nassert solution(\"6 4\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n2 4 5 6\") == \"2\\n4\""
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3 7\\n2 7\") == \"2\\n3\"\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str([7, 2])) == str([2, 3])\n\"\"\"\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6\n''') == \"2\"\n\nassert solution('''\n7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7\n''') == \"2\"\n\nassert solution('''\n7 3\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6\n''') == \"2\"\n\nassert solution('''\n7 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6\n''') == \"2\"\n\nassert solution('''\n7 4\n1 2\n3 4\n4 5\n4 6\n2 4 5 6\n''') == \"2\""
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_expected\n\"\"\""
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\") == \"5\"\nassert solution(\"3 2\\n4 6 3\\n2 4 1\\n3 5 4\") == \"-\"\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\") == \"5\"\nassert solution(\"3 2\\n4 6 3\\n2 4 1\\n3 5 4\") == \"-\"\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 4 5\\n1 2 5\") == \"5\"\nassert solution(\"4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\") == \"5\"\nassert solution(\"3 2\\n4 6 3\\n2 4 1\\n3 5 4\") == \"-1\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('\\n1\\n') == '\\n1\\n'\nassert solution('\\n2\\n') == '\\n-1\\n'\nassert solution('\\n3\\n') == '\\n1\\n'\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3 2\n4 6 3\n2 4 1\n3 5 4\n\"\"\") == '-1'\nassert solution(\"\"\"4 5\n1 3 4\n1 2 5\n5 6 1\n1 2 4\n\"\"\") == '5'\nassert solution(\"\"\"4 6\n1 3 4\n1 2 5\n5 6 1\n1 2 4\n\"\"\") == '-1'\nassert solution(\"\"\"4 5\n1 3 4\n1 2 5\n5 6 1\n1 2 4\n\"\"\") == '5'\nassert solution(\"\"\"4 6\n1 3 4\n1 2 5\n5 6 1\n1 2 4\n\"\"\") == '5'\n\n\"\"\""
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4') == 5\nassert solution('3 2\\n4 6 3\\n2 4 1\\n3 5 4') == -1\n\"\"\""
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\nassert solution('5 6 1') == 5\n\nassert solution('1 2 5') == -1\n\nassert solution('1 2 4') == 4\n\nassert solution('3 5 4') == -1"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\") == \"5\\n\"\nassert solution(\"3 2\\n4 6 3\\n2 4 1\\n3 5 4\") == \"-\"\n\"\"\"\nimport itertools\nimport collections\nimport bisect\nimport heapq\n\n\"\"\"\nhttps://www.coursera.org/learn/python-osnovy-programmirovaniya/programming/7H4ZK/ne-ten-a-tetie-kak-obrabotat-videocards\n\n\u041d\u0435\u0442 \u0442\u0435\u0442\u0438 \u043a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0432\u0438\u0434\u0435\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043c\u043e\u0442\u0440\u0438\u0442 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440.\n\n\u0412 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0438\u0434\u0435\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0446\u0435\u043b\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447. \u041e\u043d\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b \u0438 \u0440\u0430\u0437\u043d\u044b\u043c\u0438, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u043f\u043e \u0441\u0443\u0442\u0438 \u0442\u043e \u0436\u0435 \u0434\u0435\u043b\u0430\u0435\u0442. \u041d\u043e \u0445\u043e\u0442\u044c \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0438 \u0432\u0438\u0434\u0435\u043e \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u041e\u0434\u043d\u0430 \u043f\u0430\u0440\u0430 \u0442\u043e\u0436\u0435 \u0432\u0438\u0434\u0435\u043e \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.\n\n\u041e\u0434\u043d\u0430\u043a\u043e \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u0442\u0432\u0435\u0442\u043e\u0432. \u0412\u0438\u0434\u0435\u043e \u0432\u044b\u0432\u043e\u0434\u044f\u0442 \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0440\u043e\u0432\u043d\u043e \u043e\u0434\u043d\u0438\u043c \u043e\u0442\u0432\u0435\u0442\u043e\u043c. \u0412\u0438\u0434\u0435\u043e \u0440\u0435\u0448\u0430\u044e\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u043e\u0434\u043d\u043e\u0439, \u0432 \u0438\u0442\u043e\u0433\u0435 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0438\u0434\u0435\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0442 \u043d\u0430 \u043e\u0434\u043d\u0443 \u0438 \u0442\u0443 \u0436\u0435 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u0412\u0438\u0434\u0435\u043e \u0432\u044b\u0432\u043e\u0434\u044f\u0442 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u0432\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0432 \u0434\u0432\u0430 \u0440\u0430\u0437\u0430. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0430\u0437\u0435 \u043d\u043e\u043c\u0435\u0440 \u0432\u0438\u0434\u0435\u043e \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c.\n\n\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u044d\u043a\u0440\u0430\u043d\u0435 \u043e\u0434\u043d\u0443 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0443, \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u0432\u0430 \u0432\u0438\u0434\u0435\u043e. \u041a\u0430\u0436\u0434\u044b\u0439 \u0432\u0438\u0434\u0435\u043e \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c\u0441\u044f \u0441 \u043d\u043e\u043c\u0435\u0440\u0430 \u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u044c\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c &, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0432\u043e\u043f\u0440\u043e\u0441. \u041e\u0442\u0432\u0435\u0442 \u043a \u043d\u0435\u043c\u0443 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u0443 \u043e\u0442\u0432\u0435\u0442\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e n (1 \u2264 n \u2264 1000) \u2013 \u0447\u0438\u0441\u043b\u043e \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a, \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\u0435 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043d\u0438\u0445 \u0435\u0441\u0442\u044c \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435 \u043e\u0434\u0438\u043d \u0432\u043e\u043f"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\\n\") == \"5\\n\"\nassert solution(\"3 2\\n4 6 3\\n2 4 1\\n3 5 4\\n\") == \"-1\"\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4') == 5\nassert solution('3 2\\n4 6 3\\n2 4 1\\n3 5 4') == -1\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"kitayuta\") == \"NA\"\nassert solution(\"ee\") == \"eye\"\n\"\"\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"revive\") == \"reviver\"\n\"\"\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\n\"\"\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('revive') =='reviver'\nassert solution('ee') == 'eye'\nassert solution('kitayuta') == 'NA'\n\"\"\""
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('revive') =='reviver'\nassert solution('ee') == 'eye'\nassert solution('kitayuta') == 'NA'\n\"\"\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"kitayuta\") == \"NA\"\n\"\"\""
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\nassert solution(\"a\") == \"a\"\nassert solution(\"l\") == \"ll\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\nassert solution(\"a\") == \"A\"\nassert solution(\"aaa\") == \"AAAA\""
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == '1'\nassert solution(\"101 99\") == '2'\nassert solution(\"5 10\") == '9'\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\") == \"7\"\nassert solution(\"101 99\") == \"2\"\nassert solution(\"5 10\") == \"9\"\n\"\"\""
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4') == '1'\nassert solution('101 99') == '2'\nassert solution('5 10') == '9'\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    3\n    4\n    ) == 1\nassert solution(\n    101\n    99\n    ) == 2\nassert solution(\n    5\n    10\n    ) == 9\nassert solution(\n    101\n    99\n    ) == 2\n\n\"\"\"\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4\") == 1\nassert solution(\"101\\n99\") == 2\nassert solution(\"5\\n10\") == 9\n\"\"\"\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"101 99\") == \"2\"\nassert solution(\"5 10\") == \"9\"\n\nprint('Success')\n\n\n\n\n\n----------"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"9\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"101 99\") == \"2\"\nassert solution(\"4 4\") == \"4\"\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"101 99\") == \"2\"\nassert solution(\"5 10\") == \"9\"\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == '1'\nassert solution('3 2') == '2'\nassert solution('3 5') == '5'\nassert solution('101 99') == '2'\nassert solution('5 10') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4') == '1'\nassert solution('101 99') == '2'\nassert solution('5 10') == '9'\n\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"33 27\\n6 10\\n5 6\") == \"11\"\nassert solution(\"100 200\\n10 10\\n5 5\") == \"3\"\nassert solution(\"1 19\\n1 3\") == \"3\"\nassert solution(\"19 5\\n1 3\") == \"3\"\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n33 27\n6 10\n5 6\n100 200\n10 10\n5 5\n1 19\n1 3\n19 5''') == '11'\nassert solution('''3\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 10\\n5 6\\n1 19\\n1 3\\n19 5\") == \"11\"\nassert solution(\"3\\n5 10\\n5 6\\n1 19\\n1 3\\n19 5\") == \"11\"\nassert solution(\"3\\n5 10\\n5 6\\n1 19\\n1 3\\n19 5\") == \"11\"\n\n-----\n3\n25 5\n5 5\n2 3\n3 2\n9 8\n9 5\n8 9\n6 3\n4 5\n4 6\n1 1\n9 9\n9 6\n5 6\n9 8\n9 6\n5 8\n3 5\n5 7\n6 7\n7 8\n9 9\n9 5\n9 8\n5 7\n5 7\n9 8\n5 7\n6 8\n8 9\n5 7\n6 7\n9 9\n7 8\n3 2\n3 2\n4 5\n4 6\n4 7\n4 9\n2 3\n4 9\n2 4\n1 1\n9 9\n9 8\n5 7\n6 8\n8 9\n6 8\n5 8\n4 9\n5 8\n5 7\n9 9\n9 9\n5 6\n9 9\n5 6\n9 9\n4 6\n9 9\n9 5\n9 9\n9 8\n5 7\n6 8\n9 9\n6 8\n5 7\n6 7\n9 9\n9 5\n9 8\n9 9\n5 7\n9 9\n9 9\n5 8\n8 9\n8 9\n7 9\n3 2\n4 5\n4 6\n4 7\n4 9\n2 3\n4 9\n2 4\n1 1\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 8\n5 7\n6 8\n9 9\n6 8\n5 7\n9 9\n9 9\n5 6\n9 9\n5 6\n9 9\n4 6\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n5 6\n9 9\n5 8\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n9 9\n5 6\n9 9\n5 7\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n5 6\n9 9\n5 7\n9 9\n9 9\n5 6\n9 9\n5 8\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n5 6\n9 9\n5 8\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n9 9\n5 6\n9 9\n5 7\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n9 9\n5 6\n9 9\n5 7\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n9 9\n5 6\n9 9\n5 7\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n5 6\n9 9\n5 7\n9 9\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n9 9\n5 8\n9 9\n5 7\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9 9\n5 7\n9 9\n9 9\n9 9\n9"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 10\") == \"11\"\nassert solution(\"100 200\") == \"20\"\nassert solution(\"1 19\") == \"3\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"19 5\") == \"3\"\n\n\nimport unittest\nfrom io import StringIO\nimport sys\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self."
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 27\\n6 10\\n5 6\\n100 200\\n10 10\\n5 5\\n1 19\\n1 3\\n19 5\") == \"11\\n20\\n3\"\n\"\"\""
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 10\") == \"10\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"1 10\") == \"10\"\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"33 27\\n6 10\\n5 6\") == \"11\"\nassert solution(\"100 200\\n10 10\\n5 5\") == \"3\"\nassert solution(\"19 5\\n1 3\\n19 5\") == \"3\"\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n6 10\\n5 5\\n1 19\\n1 3\\n19 5\") == \"3\"\nassert solution(\"33 27\\n6 10\\n5 6\\n100 200\\n10 10\\n5 5\\n1 19\\n1 3\\n19 5\") == \"11\"\nassert solution(\"33 27\\n6 10\\n5 6\\n100 200\\n10 10\\n5 5\\n1 19\\n1 3\\n19 5\") == \"3\"\nassert solution(\"5 6\\n6 10\\n5 6\\n1 19\\n1 3\\n19 5\") == \"3\"\nassert solution(\"5 6\\n6 10\\n5 6\\n1 19\\n1 3\\n19 5\") == \"3\"\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n2') == ''\nassert solution('1\\n2\\n3') == ''\nassert solution('1\\n2\\n3\\n4') == ''\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 27\n6 10\n5 6\n100 200\n10 10\n5 5\n1 19\n1 3\n19 5''') == '11'\nassert solution('''33 27\n6 10\n5 6\n100 200\n10 10\n5 5\n1 19\n1 3\n19 5''') == '20'\nassert solution('''33 27\n6 10\n5 6\n100 200\n10 10\n5 5\n1 19\n1 3\n19 5''') == '3'\n\n\nassert solution('''33 27\n6 10\n5 6\n100 200\n10 10\n5 5\n1 19\n1 3\n19 5''') == '11'\n\nassert solution('''3 27\n6 10\n5 6\n100 200\n10 10\n5 5\n1 19\n1 3\n19 5''') == '20'"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Adams\"\nassert solution(\"8\") == \"Van Buren\"\nassert solution(\"29\") == \"Harding\"\n\"\"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 'Adams'\nassert solution('8') == 'Van Buren'\nassert solution('29') == 'Harding'\nprint('Success')\n\"\"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == \"Adams\"\nassert solution('8') == \"Van Buren\"\nassert solution('29') == \"Harding\"\nassert solution('15') == \"Burke\"\nassert solution('2') == \"Adams\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"Van Buren\"\n\nassert solution(\"29\") == \"Harding\"\n\nprint(\"Well done!\")\n-----\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 'Adams'\nassert solution('8') == 'Van Buren'\nassert solution('29') == 'Harding'\nprint('All cases passed')\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"Adams\"\nassert solution(\"8\") == \"Van Buren\"\nassert solution(\"29\") == \"Harding\"\n\n'''\n\n'''\nhttps://www.codewars.com/kata/527e010853f5ec8a9ec000cb/train/python\n\nA program that prints the numbers from 1 to 100.\n\nHowever, for multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\".\nFor numbers which are multiples of both three and five print \"FizzBuzz\".\n\nYou need to change the print statement to make it print the right information.\n\nhttps://www.codewars.com/kata/527e010853f5ec8a9ec000cb/train/python\n\nSample Output\n\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz\n86\nFizz\n88\n89\nFizzBuzz\n91\n92\nFizz\n94\nBuzz\nFizz\n97\n98\nFizz\nBuzz\n'''"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Adams\"\nassert solution(\"8\") == \"Van Buren\"\nassert solution(\"29\") == \"Harding\"\nprint('All tests passed.')\n\"\"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 'Adams'\nassert solution('8') == 'Van Buren'\nassert solution('29') == 'Harding'\n\"\"\"\n\nimport unittest\n\nclass Tests(unittest.TestCase):\n\n    def test_1(self):\n        self.assertEqual(solution('2'), 'Adams')\n\n    def test_2(self):\n        self.assertEqual(solution('8'), 'Van Buren')\n\n    def test_3(self):\n        self."
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'Adams'\nassert solution('8') == 'Harding'\nassert solution('29') == 'Harding'\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6 9\") == \"6\"\nassert solution(\"4 4 4\") == \"4\"\nassert solution(\"0 0 0\") == \"0\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 9\") == 6\n\"\"\"\n\nr, g, b = map(int, stdin.split())\n\nprint(min(r//3, g//3, b//3))\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6 9') == '6'\nassert solution('4 4 4') == '4'\nassert solution('0 0 0') == '0'\n\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == 1\nassert solution(\"1 1 0\") == 2\nassert solution(\"1 0 1\") == 1\nassert solution(\"0 1 1\") == 1\nassert solution(\"0 1 0\") == 1\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 6 9\n4 4 4\n0 0 0''') == '6'\nassert solution('''4 4 4\n0 0 0\n0 0 0\n0 0 0\n0 0 0''') == '4'\nassert solution('''0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0''') == '0'"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6 9\") == \"6\"\nassert solution(\"4 4 4\") == \"4\"\nassert solution(\"0 0 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(read_input()) == expected_result\n\n\"\"\"\n\nr, g, b = map(int, input().split())\nr = min(r, g, b)\ng = min(r, g, b)\nb = min(r, g, b)\nprint(r + g + b - 3)\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5 5') == '4'\nassert solution('0 0 0') == '0'\n\"\"\""
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6 9') == 6\nassert solution('4 4 4') == 4\nassert solution('0 0 0') == 0\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 9\") == \"6\"\nassert solution(\"4 4 4\") == \"4\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"2\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n2 0 -1\") == \"2\"\nassert solution(\"4\\n5 -6 -5 1\") == \"4\"\n\"\"\"\n\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n2 0 -1\") == \"2\"\nassert solution(\"4\\n5 -6 -5 1\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 1 1 1\") == \"1\"\nassert solution(\"3 0 -1\") == \"2\"\nassert solution(\"4 5 -6 -5 1\") == \"4\"\n\n\"\"\"\n\nfrom typing import List, Union"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n2 0 -1\") == \"2\"\nassert solution(\"4\\n5 -6 -5 1\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 1 1 1 1') == '1'\nassert solution('3\\n2 0 -1') == '2'\nassert solution('4\\n5 -6 -5 1') == '4'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 1 1 1\\n') == '1'\nassert solution('3 0 -1\\n') == '2'\nassert solution('4 5 -6 -5 1\\n') == '4'\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n2 0 -1\") == \"2\"\nassert solution(\"4\\n5 -6 -5 1\") == \"4\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n5 -6 -5 1\n''') == '2'\nassert solution('''4\n5 -6 -5 1\n''') == '4'\nassert solution('''5\n5 -6 -5 1\n''') == '1'\nassert solution('''5\n0 0 0 0\n''') == '0'\nassert solution('''5\n-1 -1 -1 -1\n''') == '1'\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 0 -1\") == \"2\"\nassert solution(\"4\\n5 -6 -5 1\") == \"4\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3\\n2 0 -1\") == \"2\"\nassert solution(\"4\\n5 -6 -5 1\") == \"4\"\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('500 1000 20 30') == 'Misha'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Vasya'\n\"\"\"\n\na,b,c,d = map(int,input().split())\nl = sorted([a,b,c,d])\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str([500, 1000, 20, 30])) == 'Vasya'\nassert solution(str([1000, 1000, 1, 1])) == 'Tie'"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('500 1000 20 30') == 'Vasya'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Misha'\n\"\"\""
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('500 1000 20 30') == 'Vasya'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Misha'\n\"\"\"\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('500 1000 20 30') == 'Vasya'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Misha'\nprint(solution(stdin))\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"500 1000 20 30\") == \"Vasya\"\nassert solution(\"1000 1000 1 1\") == \"Tie\"\nassert solution(\"1500 1000 176 177\") == \"Misha\"\n\"\"\"\n\nimport sys\na, b, c, d = map(int, sys.stdin.readline().strip().split(' '))"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('500 1000 20 30') == 'Vasya'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Misha'\nassert solution
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('500 1000 20 30') == 'Misha'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Vasya'\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a, b, c, d) in ['Misha', 'Vasya', 'Tie']\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('500 1000 20 30') == 'Vasya'\nassert solution('1000 1000 1 1') == 'Tie'\nassert solution('1500 1000 176 177') == 'Misha'\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 3 1 1') == '3.7677669529663684 3.7677669529663684 3.914213562373095'\nassert solution('10 5 5 5 15') == '5.0 5.0 10.0'\n\nimport math"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '5 3 3 1 1'\n) == '3.7677669529663684 3.7677669529663684 3.914213562373095'\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 3 1 3\") == \"3.0 3.0 3.0\"\nassert solution(\"10 5 5 5 15\") == \"5.0 5.0 10.0\"\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 3 1 1') == '3.7677669529663684 3.7677669529663684 3.914213562373095'\n\n'''"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 3 1 1') == '3.7677669529663684 3.7677669529663684 3.914213562373095'\n\nassert solution('10 5 5 5 15') == '5.0 5.0 10.0'\n\n\"\"\""
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''5 3 3 1 1'''\n) == '3.7677669529663684 3.7677669529663684 3.914213562373095'\nprint(solution(input()))"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3 1 1\") == '3.7677669529663684 3.7677669529663684 3.914213562373095'\nassert solution(\"10 5 5 5 15\") == '5.0 5.0 10.0'\nassert solution(\"3 5 3 1 1\") == '5.0 5.0 10.0'\n\"\"\""
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3 1 1\") == '3.7677669529663684 3.7677669529663684 3.914213562373095'\nassert solution(\"10 5 5 5 15\") == '5.0 5.0 10.0'\n\"\"\"\nfrom math import pi\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3 1 1\") == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 993244853\") == \"1\"\nassert solution(\"2 993244853\") == \"6\"\nassert solution(\"3 993244853\") == \"32\"\nassert solution(\"2019 993244853\") == \"923958830\"\nassert solution(\"2020 437122297\") == \"265955509\""
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2332432\") == '6'\nassert solution(\"2343243\") == '15'\nassert solution(\"113\") == '0'\nassert solution(\"2432\") == '4'\nassert solution(\"12\") == '2'\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 993244853\") == \"32\"\nassert solution(\"2 993244853\") == \"6\"\nassert solution(\"2019 993244853\") == \"923958830\"\nassert solution(\"2020 437122297\") == \"265955509\"\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123 123') == '1'\nassert solution('1 3') == '0'\nassert solution('12 2') == '6'\nassert solution('12345 12345') == '1'\nassert solution('12345 12345') == '1'\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"393244853\") == '265955509'\n\"\"\"\n\nfrom collections import Counter\n\nn, m = map(int, stdin.readline().strip().split())\n\ncount = Counter(range(1, n + 1))\nhappiness = 0\n\nfor i in count:\n    for j in count:\n        if (j - i) < n:\n            happiness += m - ((count[i] * count[j]) % m)\nprint(happiness)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 993244853\") == \"32\"\nassert solution(\"2 993244853\") == \"6\"\nassert solution(\"2019 993244853\") == \"923958830\"\nassert solution(\"2020 437122297\") == \"265955509\"\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 993244853\") == \"1\"\nassert solution(\"2 993244853\") == \"6\"\nassert solution(\"3 993244853\") == \"32\"\nassert solution(\"2020 437122297\") == \"265955509\"\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 993244853\") == \"32\"\nassert solution(\"2019 993244853\") == \"923958830\"\nassert solution(\"2020 437122297\") == \"265955509\"\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 993244853\") == \"32\"\nassert solution(\"2 993244853\") == \"6\"\nassert solution(\"2019 993244853\") == \"923958830\"\nassert solution(\"2020 437122297\") == \"265955509\"\nprint(\"Passed\")\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(123) == 321\nassert solution(12) == 12\nassert solution(3) == 6\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n4 5 4 5 4 4') == '2'\nassert solution('5\\n4 5 4 5 4 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '0'\nassert solution('1\\n2\\n3\\n4\\n5') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '2'\n'''\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n4 5 4 5 4 4') == '2'\nassert solution('14\\n1 5 4 5 2 4 4 5 5 4 3 4 5 5') == '3'\n\"\"\"\n\nn = int(input())\nlst = list(map(int, input().split()))\nprint(sum(lst[0::4]) + sum(lst[1::4]) + sum(lst[2::4]) + sum(lst[3::4]))\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n4 5 4 5 4 4') == 2\nassert solution('14\\n1 5 4 5 2 4 4 5 5 4 3 4 5 5') == 3\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u042d\u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c, \u0432 \u0442\u0430\u043a\u0438\u0445 \u043c\u043e\u0434\u0443\u043b\u044f\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sys. \u0422\u0430\u043a \u0432\u043e\u0442 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0448\u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u043c.\n\n\n-----\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f-----\n\n\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n4\n1 5 4 5\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n2\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n10\n5 5 5 5 5 5 5 5 5 5 5 5 5\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5\n\"\"\""
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('14') == 3\nassert solution('6') == 2\nassert solution('7') == 1\n\"\"\"\n\nstdin = '14'\n\nn = int(stdin)\n\na = [int(x) for x in input().split()]"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 4 5 4 4') == 2\nassert solution('1 5 4 5 2 4 4 5 5 4 3 4 5 5') == 3"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n4 5 4 5 4 4') == '2'\nassert solution('14\\n1 5 4 5 2 4 4 5 5 4 3 4 5 5') == '3'\nassert solution('1\\n5') == '1'\nassert solution('6\\n5 5 5 5 5 5') == '0'\nassert solution('10\\n3 3 3 3 3 3 3 3 3') == '1'\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12\\n5 5 5 5 5 5') == 2\nassert solution('6\\n4 5 4 5 4 4') == 3\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n4 5 4 5 4 4\") == \"2\"\nassert solution(\"14\\n1 5 4 5 2 4 4 5 5 4 3 4 5 5\") == \"3\"\n\n'''\n\n\n\nn = int(input())\nprint(len([x for x in input().split() if int(x) > 3]))"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xooox\") == \"NO\"\nassert solution(\"oxoxo\") == \"YES\"\nassert solution(\"soxoo\") == \"NO\"\nassert solution(\"oxoxo\") == \"YES\"\nassert solution(\"xooox\") == \"NO\"\nprint('All tests are passed')\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xooox\") == \"NO\"\nassert solution(\"oxoxo\") == \"YES\"\nassert solution(\"soxoo\") == \"NO\"\nassert solution(\"oxoxo\") == \"YES\"\nassert solution(\"xooox\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xooox\") == \"NO\"\nassert solution(\"oxoxo\") == \"YES\"\nassert solution(\"xooox\") == \"NO\"\n\nprint(solution(\"xooox\"))\nprint(solution(\"oxoxo\"))\nprint(solution(\"xooox\"))\n\nassert solution(\"wsw\") == \"NO\"\nassert solution(\"sws\") == \"YES\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xoox\") == \"NO\"\nassert solution(\"oxox\") == \"YES\"\nassert solution(\"soxo\") == \"NO\"\nassert solution(\"oxox\") == \"YES\"\nassert solution(\"xoxo\") == \"NO\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([\"xooox\",\n                 \"oxoxo\",\n                 \"soxoo\",\n                 \"oxoxo\",\n                 \"xooox\"]) == 'NO'\nassert solution([\"wsw\",\n                 \"sws\",\n                 \"wsw\",\n                 \"xpe\",\n                 \"xpx\",\n                 \"pxp\"]) == 'YES'\nassert solution([\"xoxo\",\n                 \"oxox\",\n                 \"xoxo\",\n                 \"xoxo\",\n                 \"xoxo\"]) == 'YES'\nassert solution([\"xoox\",\n                 \"oxo\",\n                 \"xoox\",\n                 \"xoox\"]) == 'YES'\nassert solution([\"ooxx\",\n                 \"oxxo\",\n                 \"ooxx\",\n                 \"ooxx\",\n                 \"xooox\"]) == 'NO'\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox\") == \"NO\"\n\nassert solution(\"3\\nwsw\\nsws\\nwsw\") == \"YES\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xooox\") == \"NO\"\nassert solution(\"oxoxo\") == \"NO\"\nassert solution(\"soxoo\") == \"YES\"\nassert solution(\"oxoxo\") == \"NO\"\nassert solution(\"xooox\") == \"YES\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox\") == \"NO\"\nassert solution(\"3\\nwsw\\nsws\\nwsw\") == \"YES\"\nassert solution(\"3\\nxpx\\npxp\\nxpe\") == \"NO\"\n\nprint(\"Success\")\n\"\"\"\n\nn = int(input())\n\nd = dict()\n\nfor i in range(1, n, 2):\n    for j in range(n - i + 1):\n        if j == 0 or i == n - 1:\n            d[(j, i)] = stdin[j][:i]\n        else:\n            d[(j, i)] = stdin[j][i - 1]\n\nfor i in range(1, n - 1):\n    for j in range(n):\n        if j == 0:\n            d[(j, i)] = stdin[j][i - 1]\n            d[(j, n - i)] = stdin[j][i + 1]\n        elif j == n - 1:\n            d[(j, i)] = stdin[j][i - 1]\n            d[(j, n - i)] = stdin[j][i + 1]\n        else:\n            d[(j, i)] = stdin[j][i - 1]\n            d[(j, n - i)] = stdin[j][i + 1]"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xooox\") == \"NO\"\nassert solution(\"oxoxo\") == \"NO\"\nassert solution(\"soxoo\") == \"YES\"\nassert solution(\"oxoxo\") == \"NO\"\nassert solution(\"xooox\") == \"NO\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nxooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox\") == \"NO\"\nassert solution(\"3\\nwsw\\nsws\\nwsw\\n\") == \"YES\"\n\"\"\""
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"2 1\"\nassert solution(\"3 4\") == \"3 2\""
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == '2 1'\nassert solution('2 4') == '3 2'\n\n\"\"\""
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\") == \"2 1\"\nassert solution(\"1 1\") == \"0 0\"\nassert solution(\"2 4\") == \"3 2\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"3 2\"\n\"\"\""
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\") == \"3 2\"\nassert solution(\"3 1\") == \"2 1\"\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == \"2 1\"\nassert solution(\"2 4\") == \"3 2\"\nassert solution(\"1 10\") == \"0 10\"\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == '3 1'\nassert solution('3 1') == '2 1'\nassert solution('4 5') == '2 5'\nassert solution('7 6') == '3 5'\nassert solution('1 1') == '1 1'\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '2 1'\nassert solution('2 4') == '3 2'\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"2 1\"\nassert solution(\"3 1\") == \"1 2\"\nassert solution(\"4 2\") == \"2 2\"\nassert solution(\"7 3\") == \"2 2\"\nassert solution(\"1 1\") == \"0 0\"\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"2 1\"\nassert solution(\"2 4\") == \"3 2\"\nassert solution(\"1 1\") == \"0 0\""
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n0 2\\n5 0\") == \"7.0\"\nassert solution(\"3 2\\n0 2\\n5 0\") == \"7.0\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\n\nprint(solution(input()))"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n-1 3\\n0 0\\n-1 -4\") == -2.5\n\"\"\""
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 2\n-1 3\n0 0\n-1 -4''') == '-2.5'\n\nassert solution('''2 3\n-1 3\n0 0\n-1 -4''') == '-2.5'\n\nassert solution('''3 3\n-1 3\n0 0\n-1 -4''') == '-3.5'\n\nassert solution('''3 3\n-1 3\n0 0\n-1 -4''') == '-3.5'\n\nassert solution('''4 3\n-1 3\n0 0\n-1 -4\n0 -5\n''') == '-3.5'"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n0 2\\n4 0\\n\") == \"7.0\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n-1 3\n0 0\n-1 -4\n''') == '-2.5'\n\nassert solution('''\n4 2\n-1 3\n0 0\n-1 -4\n''') == '-2.5'\n\nassert solution('''\n6 3\n-1 3\n0 0\n-1 -4\n0 0\n0 0\n0 0\n''') == '-1'\n\nassert solution('''\n4 2\n-1 3\n0 0\n-1 -4\n0 0\n''') == '-1'\n\nassert solution('''\n5 2\n-1 3\n0 0\n-1 -4\n0 0\n''') == '-2.5'"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n0 2\\n5 0\\n') == '7.000000000000000'\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\narr = [0] * n\nfor _ in range(m):\n    x, d = map(int, stdin.readline().split())\n    arr[x - 1] += d\n\ntotal = 0\nfor x in arr:\n    total += x ** 2\n\nprint(total / n)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n-1 3\\n0 0\\n-1 -4\") == '-2.500000000000000'\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n-1 3\\n0 0\\n-1 -4') == '-2.500000000000000'\nassert solution('3 2\\n0 2\\n5 0') == '7.000000000000000'\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\n\"\"\"\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 3\\n2 6 10 5 9\") == \"YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2\"\n\nassert solution(\"5 3 1\\n1 2 3 7 5\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\"\n\n\"\"\""
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 3\\n2 6 10 5 9\") == \"YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2\"\nassert solution(\"5 3 1\\n1 2 3 7 5\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\"\nassert solution(\"5 3 1\\n7 14 2 9 5\") == \"NO\"\n\nassert solution(\"3 2 1\\n5 6 4 3\") == \"YES\\n1 4\\n1 6\\n5 3\\n2 3\"\nassert solution(\"3 2 1\\n5 6 4 3\") == \"NO\""
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5 3\\n2 6 10 5 9') == 'YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 1\\n1 2 3 7 5\\n') == 'YES\\n3 5 1 3\\n1 7\\n1 2'\nassert solution('5 5 3\\n7 14 2 9 5\\n') == 'NO\\n'\nassert solution('5 5 3\\n7 2 2 9 5\\n') == 'NO\\n'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 3\\n2 6 10 5 9\") == \"YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2\"\nassert solution(\"5 3 1\\n7 14 2 9 5\") == \"NO\"\nassert solution(\"4 5 1\\n8 16 32 4 8\") == \"YES\\n4 16\\n4 8\\n8 32\\n8 16\"\n\n\"\"\"\n\nn, k, p = input().split()\nn, k, p = int(n), int(k), int(p)\na = list(map(int, input().split()))"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 1\\n7 14 2 9 5\\n\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\\n\"\nassert solution(\"7 5 3\\n7 14 2 9 5\\n\") == \"NO\\n\"\nassert solution(\"5 3 2\\n7 14 2 9 5\\n\") == \"NO\\n\"\nassert solution(\"6 5 1\\n6 5 1\\n\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\\n\"\nassert solution(\"5 5 3\\n2 6 10 5 9\\n\") == \"YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2\\n\"\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 3\\n2 6 10 5 9\") == \"YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2\"\nassert solution(\"5 3 1\\n1 2 3 7 5\") == \"YES\\n3 5 1 3\\n1 7\\n1 2\"\n\nprint(solution(input()))"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6 10 5 9\\n7 14 2 9 5\") == \"YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2\"\n\nassert solution(\"1 2 3 7 5\\n7 14 2 9 5\") == \"NO\"\n\nassert solution(\"1 2 3 7 5\\n7 14 2 9\\n5 9 7 3\") == \"YES\\n1 9\\n1 7\\n1 5\\n1 2\\n1 3\"\n\nassert solution(\"1 2 3 7 5\\n7 14 2 9\\n5 9 7\\n3 9 7\\n1 2 3\\n5 9 7 3\") == \"YES\\n3 9\\n1 7\\n1 2\\n1 3\\n1 5\\n1 7\\n1 9\\n1 2\"\n\nassert solution(\"1 2 3 7 5\\n7 14 2 9 5\\n1 2 3 7 5\") == \"NO\"\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 3\\n2 6 10 5 9\") == 'YES\\n1 9\\n1 5\\n1 10\\n1 6\\n1 2'\nassert solution(\"5 5 3\\n7 14 2 9 5\") == 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 1\\n1 2\\n1 2\\n\") == \"YES\\n1 1\\n1 2\\n\"\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(input())\n\nprint(solution(input()))\n\n\n----Input:----\n2 2 2\n\n----Output:----\n2\n\n----Input:----\n3 2 3\n\n----Output:----\n1\n\n----Input:----\n1 1 1\n\n----Output:----\ninf\n\n----Input:----\n1 1 0\n\n----Output:----\n0\n\n----Input:----\n4 3 3\n\n----Output:----\n1\n\n----Input:----\n4 3 0\n\n----Output:----\ninf\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3\") == \"1\"\nassert solution(\"2 3 4\") == \"inf\"\n\nassert solution(\"1 2 2\") == \"inf\"\nassert solution(\"1 2 3\") == \"inf\"\n\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 3\") == \"1\"\nassert solution(\"3 3 5\") == \"inf\"\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 3\") == \"1\"\n\n\"\"\"\n\nimport math\n\nt, a, b = [int(x) for x in input().split()]"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"2\"\n\nassert solution(\"2 3 3\") == \"1\"\n\n\n\n'''\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 3\") == \"1\""
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 3\") == \"1\""
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == '2'\nassert solution('2 3 3') == '1'\nassert solution('1 1 1000000000') == 'inf'\nassert solution('1 2 2') == '0'\n\nprint(solution('2 3 3'))\nprint(solution('2 3 3'))\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 2 2''') == '2'\n\nassert solution('''2 3 3''') == '1'\n\nassert solution('''1 10 1000000000''') == 'inf'\n\nassert solution('''1 10 10001''') == '0'\n\nassert solution('''1 10 10000''') == '0'"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n2 1\n''') == \"0\"\n\nassert solution('''\n1 1\n2 1\n''') == \"0\"\n\nassert solution('''\n2 2\n1 3\n2 2\n''') == \"3\"\n\nassert solution('''\n4 3\n3 10\n2 7\n2 8\n1 1\n''') == \"10\"\n\nassert solution('''\n2 2\n1 3\n2 2\n''') == \"3\""
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 3\\n2 2\\n1 1') == '3'\nprint('Test pass.')"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 1\n2 1''') == '0'\nassert solution('''2 2\n1 3\n2 2\n''') == '3'\nassert solution('''4 3\n3 10\n2 7\n2 8\n1 1''') == '10'\n\nprint(solution(input()))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n2 1\") == \"0\"\nassert solution(\"2 2\\n1 3\\n2 2\") == \"3\"\nassert solution(\"4 3\\n3 10\\n2 7\\n2 8\\n1 1\") == \"10\"\n\"\"\"\n\nimport sys\nimport ast\n\nn, m = [int(x) for x in input().split()]\n\nsouvenirs = []\n\nfor i in range(n):\n    w, c = [int(x) for x in input().split()]\n    souvenirs.append([w, c])\n\nsouvenirs.sort(key=lambda x: x[0])\n\nprint(souvenirs)\n\ntotal_cost = 0\nfor i in range(n):\n    if m - souvenirs[i][0] >= 0:\n        total_cost += souvenirs[i][1]\n        m -= souvenirs[i][0]\n    else:\n        break\n\nprint(total_cost)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n2 1') == '0'\nassert solution('4 3\\n3 10\\n2 7\\n2 8\\n1 1') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n2 1\") == \"0\"\nassert solution(\"1 1\\n2 1\\n3 1\") == \"0\"\nassert solution(\"1 1\\n2 1\\n3 1\\n4 1\") == \"0\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"6\"\nassert solution(\"4 3\\n1 3\\n2 3\\n3 3\") == \"10\"\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n2 1\n''') == '0'\n\nassert solution('''\n4 3\n3 10\n2 7\n2 8\n1 1\n''') == '10'\n\nassert solution('''\n2 2\n1 3\n2 2\n''') == '3'\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n2 1\") == \"0\"\n\"\"\"\n\nn, m = list(map(int, stdin.readline().split()))\n\nsouvenirs = []\nfor _ in range(n):\n    weight, cost = list(map(int, stdin.readline().split()))\n    souvenirs.append((weight, cost))\n\nsouvenirs.sort(key=lambda x: -x[1])\n\ntotal = 0\nfor souvenir in souvenirs:\n    if souvenir[0] <= m:\n        m -= souvenir[0]\n        total += souvenir[1]\n    else:\n        total += souvenir[1] * (m // souvenir[0])\n        break\n\nprint(total)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n2 1\") == \"0\"\nassert solution(\"2 2\\n1 3\\n2 2\") == \"3\"\nassert solution(\"4 3\\n3 10\\n2 7\\n2 8\\n1 1\") == \"10\"\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n2 1\") == 0\n\"\"\""
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 4') == '2'\nassert solution('5\\n3 2 4 1 2') == '2'"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 2 4 1 2') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '5\\n3 2 4 1 2'\n) == '2'\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3 2 4 1 2') == '2'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('2 1 2 3 4') == '2'\n\nassert solution('1') == ''\nassert solution('2 1') == '1'"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 2 4 1 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 2 4 1 2\") == \"2\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 2 4 1 2') == '2'\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 2 4 1 2\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 2 4 1 2\") == \"2\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nseq = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\\n\") == '25'\n\n----"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 1\\n1\\n15 1\\n2\\n30 2\\n1 2') == '25'\n\"\"\"\nfrom collections import defaultdict, deque"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\\n\") == \"25\"\n\n\"\"\"\n\nfrom collections import namedtuple\n\nResult = namedtuple(\"Result\", \"cost boxes\")\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\\n\") == \"25\"\nprint(\"Passed\")\n\n-------End-------\n\"\"\"\n\nN, M = map(int, stdin.readline().strip().split())\ncost = [0]\ncost.extend(list(map(int, stdin.readline().strip().split())))\n\nkeys = [0] * (M + 1)\nfor i in range(1, N + 1):\n    for j in range(1, M + 1):\n        keys[j] = max(keys[j], keys[j - 1]) + cost[i]"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\") == \"25\"\n\n\"\"\"\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"10 1\\n\"\n    \"1\\n\"\n    \"15 1\\n\"\n    \"2\\n\"\n    \"30 2\\n\"\n    \"1 2\\n\"\n) == \"25\"\n\n\"\"\"\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\\n\") == \"25\"\n\n\"\"\"\n\nimport sys\n\nn, m = [int(i) for i in sys.stdin.readline().rstrip().split(' ')]\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\") == \"25\"\n\"\"\"\n\nfrom typing import List\n\nN, M = list(map(int, input().split(\" \")))\n\ncost_map = [0 for _ in range(N)]\n\nfor _ in range(M):\n    key, cost = map(int, input().split(\" \"))\n    cost_map[key-1] += cost\n\ncost = 0\n\nfor key, cost_ in enumerate(cost_map):\n    if key == 0:\n        cost += cost_\n    else:\n        cost = min(cost_, cost)"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1\\n1\\n15 1\\n2\\n30 2\\n1 2\") == 25\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3+5*7+8*4') == '303'\nassert solution('2+3*5') == '25'\nassert solution('3*4*5') == '60'\n\n\"\"\""
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3+5*7+8*4') == '303'\nassert solution('2+3*5') == '25'\nassert solution('3*4*5') == '60'\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\nassert solution(\"3*4*5+6+5\") == \"60\"\nassert solution(\"3*4*5+6+5*2\") == \"60\"\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3*4*5) == 60\nassert solution(\"2+3*5\") == 25\nassert solution(3+5*7+8*4) == 303\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3+5*7+8*4') == '303'\nassert solution('2+3*5') == '25'\nassert solution('3*4*5') == '60'\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\nassert solution(\"2*3+5*7\") == \"22\"\n\"\"\"\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"ABC|\") == \"ABC|\"\nassert solution(\"ABC|D\") == \"Impossible\"\nassert solution(\"W|F\") == \"Impossible\"\nassert solution(\"ABC\") == \"ABC|\"\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC|T\") == \"AC|T\"\nassert solution(\"L\") == \"L\"\nassert solution(\"ABC|\") == \"ABC|\"\nassert solution(\"W|T\") == \"Impossible\"\nassert solution(\"F\") == \"F\"\n\"\"\""
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"|ABC\") == \"|ABC\"\nassert solution(\"W|T\") == \"Impossible\"\nassert solution(\"ABC|\") == \"Impossible\"\n\nprint(\"Passed!\")\n\n------\n\n\nimport re\nfrom collections import defaultdict\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AC|T') == 'AC|TL'\n\n\"\"\"\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AC|T') == 'AC|TL'\nassert solution('F|G') == 'F|G'\nassert solution('|ABC') == 'ABC|'\nassert solution('W|T') == 'Impossible'\nassert solution('AC|') == 'Impossible'\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"ABC|\") == \"ABC|\"\n\"\"\""
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"|ABC\") == \"ABC|\"\nassert solution(\"W|T\") == \"Impossible\"\nassert solution(\"F\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AC|T\") == \"AC|T\"\nassert solution(\"L\") == \"L\"\nassert solution(\"ABC|\") == \"ABC|\"\nassert solution(\"D\") == \"D\"\nassert solution(\"|ABC\") == \"|ABC\"\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"ABC|\") == \"ABC|\"\nassert solution(\"ABC|D\") == \"ABC|D\"\nassert solution(\"ABC|D|EF\") == \"ABC|D|EF\"\nassert solution(\"ABC|D|E|F\") == \"ABC|D|EF|\"\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Impossible'\nassert solution('T') == 'T|'\nassert solution('ABC') == 'ABC|'\nassert solution('AC|T') == 'AC|TL'\nassert solution('ABC|D') == 'ABC|D'\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 3\") == \"3 1\"\nassert solution(\"6 8 2\") == \"7 0\"\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4 3') == '3 1'\nassert solution('6 8 2') == '7 0'\n\n\"\"\"\n\n\nfrom typing import List, Tuple\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4 3') == '3 1'\nassert solution('6 8 2') == '7 0'\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3\") == \"3 1\"\nassert solution(\"6 8 2\") == \"7 0\"\n\n\"\"\"\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 3\") == '3 1'\nassert solution(\"6 8 2\") == '7 0'\n\nprint(solution(input()))\n\n\n-----Explanation-----\n\nThe solution is simple, the girls can exchange their chizhiks in such a way that they will buy the maximum possible number of coconuts. It is obvious that the solution works if the girls have more money than the price of a single coconut. Therefore, we start by checking whether the girls have more money than the price of a single coconut.\n\nOur initial chizhiks have $5+4=9$ each, and the price of a single coconut is $3$. If the sum is greater than the price, the girls can buy an integer number of coconuts. Otherwise the girls will have to pay for the amount of chizhiks and some amount of coconuts.\n\nThen we start thinking of exchanging with chizhiks. The girls have $5$ chizhiks and they can exchange with only one chizhik. Therefore, we can try to exchange with $4$ chizhik. We will be able to get an integer number of coconuts. In the first example we have $1 + 4 = 5$ coconuts, in the second example we have $6 + 0 = 6$ coconuts. \n\nIf we want to be able to buy the maximum number of coconuts we can exchange with $4$ chizhik. The girls have $5-4 = 1$ chizhik, and the number of coconuts they will buy is $3 + 1 = 4$.\n\nThe minimum number of chizhiks we need to exchange with Masha is 0, because we can buy all coconuts.\n\nHere is the solution in JavaScript:\n\nfunction solution(stdin) {\n    let x = stdin.split(' ');\n    let chizhik = [...x.map(chizhiks => chizhik * Math.pow(10, chizhiks.length))]\n    let coconuts = Math.floor((chizhik.reduce((a, b) => a + b)) - chizhik.reduce((a, b) => a + b))\n    let Masha = chizhik[0] - coconuts;\n    let Sasha = chizhik[1] - Masha;\n    \n    console.log(sasha, masha, coconuts);\n    \n    return [Math.max(Sasha, Masha), Math.min(Sasha, Masha)];\n}\n\nNote: the Haskell version is not very readable but it works. Here is the Java version:\n\npublic class Solution {\n    public static void main(String[] args) {\n        /*\n        \"5 4 3\"\n        \"6 8 2\"\n        */\n        /*\n        \"5 4 3\"\n        \"6 8 2\"\n        */\n        /*\n        5 4 3\n        6 8 2\n        */\n        String[] stdin = new Scanner(System.in).nextLine().split(\" \");\n        System.out.println(solution(stdin));\n    }\n    \n    public static int solution(String[] stdin) {\n        int[] chizhiks = new int[3];\n        chizhiks[0] = Integer.parseInt(stdin[0]);\n        chizhiks[1] = Integer.parseInt(stdin[1]);\n        chizhiks[2] = Integer.parseInt(stdin[2]);\n        int sasha = chizhiks[0] - chizhiks[2];\n        int masha = chizhiks[1] - chizhiks[2];\n        \n        int coconuts = Math.floor((chizhiks.reduce((a, b) -> a + b)) - chizhiks.reduce((a, b) -> a + b));\n        System.out.println(sasha, masha, coconuts);\n        \n        return Math.max(sasha, masha);\n    }\n}\n\n\n-----Code-----\n\nclass Solution {\n    public static void main(String[] args) {\n        /*\n        \"5 4 3\"\n        \"6 8 2\"\n        */\n        /*\n        5 4 3\n        6 8 2\n        */\n        String[] stdin = new Scanner(System.in).nextLine().split(\" \");\n        System.out.println(solution(stdin));\n    }\n\n    public static int solution(String[] stdin) {\n        int[] chizhiks = new int[3];\n        chizhiks[0] = Integer.parseInt(stdin[0]);\n        chizhiks[1] = Integer.parseInt(stdin[1]);\n        chizhiks[2] = Integer.parseInt(stdin[2]);\n        int sasha = chizhiks[0] - chizhiks[2];\n        int masha = chizhiks[1] - chizhiks[2];\n        \n        int coconuts = Math.floor((chizhiks.reduce((a, b) -> a + b)) - chizhiks.reduce((a, b) -> a + b));\n        System.out.println(sasha, masha, coconuts);\n        \n        return Math.max(sasha, masha);\n    }\n}\n\n----\n\n\nHow many chizhik?\nOne way is to add all chizhik with 1 to (x+y), and subtract all chizhik with 1 from (x+y).\n\nWhich one is better?\nThe first one has a better arithmetic average (overall) and also it is possible to have the same average if the sum of the chizhik is even.\n\nWhy the second one is better?\nIt's better in terms of the arithmetic average.\n\nWhich one is better?\nWe want to have as many chizhiks as possible.\n\nNote:\nIt is assumed that there will always"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 3\") == '7 0'\nassert solution(\"6 8 2\") == '7 0'\n\n\n\n'''\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5, 4, 3) == 3, 1\nassert solution(6, 8, 2) == 7, 0"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 3\") == \"3 1\"\nassert solution(\"6 8 2\") == \"7 0\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 8 2') == '7 0'\n\"\"\"\n\n\nx, y, z = [int(x) for x in input().split()]\n\nprint(max(x // z, y // z, x + y - z), min(x % z, y % z))\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0\\n1 0\\n0 1\") == \"3\\n1 -1\\n-1 1\"\nassert solution(\"1 0\\n0 1\") == \"3\\n1 -1\\n-1 1\"\nassert solution(\"0 0\\n0 1\\n1 1\") == \"3\\n1 1\"\nassert solution(\"0 1\\n0 1\") == \"3\\n1 1\"\n\"\"\"\n\n\"\"\"\nn = int(input())\n\nimport itertools\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nfor a, b, c in itertools.permutations([a, b, c]):\n    if a + b > c and a + c > b and b + c > a:\n        print(4)\n        print(*[-1, 1], *a, *b, *c)\n        exit(0)\nprint(0)\n\"\"\""
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0\\n1 0\\n0 1') == '3'\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0\\n1 0\\n0 1\") == \"3\\n1 -1\\n-1 1\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0\\n1 0\\n0 1') == '3'\nassert solution('0 0\\n1 0\\n0 1\\n1 1') == '0'\nassert solution('0 0\\n0 0\\n1 0\\n1 0') == '2'\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0\\n0 1\\n0 0\") == 3\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0\\n1 0\\n0 1\") == \"3\\n-1 1\\n1 1\"\n\n\nimport unittest\nimport unittest.mock\n\nimport math\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution_1(self):\n        with unittest.mock.patch('builtins.input', side_effect=[\n            '0 0',\n            '1 0',\n            '0 1',\n        ]):\n            assert solution() == \"3\\n-1 1\\n1 1\"\n\n    def test_solution_2(self):\n        with unittest.mock.patch('builtins.input', side_effect=[\n            '1 1',\n            '1 1',\n            '1 1',\n        ]):\n            assert solution() == \"0\"\n\n    def test_solution_3(self):\n        with unittest.mock.patch('builtins.input', side_effect=[\n            '1 1',\n            '1 1',\n            '0 0',\n        ]):\n            assert solution() == \"0\"\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\\n1 0\\n0 1\") == \"3\"\nassert solution(\"0 0\\n0 0\\n1 0\") == \"1\"\n\n\"\"\"\n\nfrom itertools import permutations\nimport sys\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0\\n1 0\\n0 1\") == \"3\"\nassert solution(\"1 0\\n0 0\") == \"1\"\nassert solution(\"0 0\\n1 0\\n0 1\\n0 0\") == \"3\"\n\"\"\"\n\nimport math\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nd = list(map(int, input().split()))"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0\\n1 0\\n0 1\") == '3\\n1 -1\\n-1 1'\nprint(solution(\"0 0\\n1 0\\n0 1\"))\n\n\"\"\"\n\nfrom itertools import permutations\n\ninput()\nx = [int(i) for i in input().split()]\ninput()\ny = [int(i) for i in input().split()]\ninput()\nz = [int(i) for i in input().split()]\n\nres = []\n\nfor per in permutations(x + y + z):\n    if per[0]!= per[1] and per[1]!= per[2] and per[2]!= per[3] and \\\n            per[0] + per[1] > per[2] and \\\n            per[0] + per[2] > per[1] and \\\n            per[1] + per[2] > per[0] and \\\n            per[0] + per[3] > per[2] and \\\n            per[2] + per[3] > per[0] and \\\n            per[1] + per[3] > per[2]:\n        res.append(per)\nprint(len(res))\nfor r in res:\n    print(' '.join([str(i) for i in r]))\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0\\n1 0\\n0 1\") == \"3\\n1 -1\\n-1 1\"\nassert solution(\"0 0\\n0 1\\n1 0\") == \"3\\n1 -1\\n-1 1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\\n5 3 3\"\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\"\nassert solution(\"5\\n0 -1 100 -1 0\") == \"1\"\n\n\n\nimport string\nimport sys"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\\n5 3 3\"\n\"\"\"\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\"\nassert solution(\"5\\n0 -1 100 -1 0\") == \"1\""
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6') == '3'\nassert solution('5\\n0 -1 100 -1 0') == '1'\nassert solution('6\\n-4 -1 -2 -3 -1 2 3 4') == '2'\n\"\"\""
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == 3\nassert solution(\"5\\n0 -1 100 -1 0\") == 1\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\\n5 3 3\"\nassert solution(\"5\\n0 -1 100 -1 0\") == \"1\\n5\"\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6') == '3'\nassert solution('5\\n0 -1 100 -1 0') == '1'"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\\n5 3 3\"\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == \"3\\n5 3 3\"\nassert solution(\"5\\n0 -1 100 -1 0\") == \"1\\n5\"\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2') == '2'\nassert solution('4 8') == '4'"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8\\n3 2') == '4'\nassert solution('4 8\\n4 2') == '4'\nassert solution('4 8\\n5 2') == '3'\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8') == '4'\n\"\"\"\n\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\na = [1]\nfor i in range(1, n):\n    a.append(1)\n    a.insert(i, min(a[i], a[i + 1] + 1))\n\nprint(a[k - 1])\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3 2\n''') == '2'\n\nassert solution('''\n4 8\n''') == '4'\n\nassert solution('''\n4 5\n''') == '5'\n\nassert solution('''\n4 13\n''') == '13'\nassert solution('''\n10 10\n''') == '10'"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8\") == \"4\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 3\") == \"3\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nn, k = sys.stdin.readline().strip().split()\nn, k = int(n), int(k)\n\na = 1\nb = 2\n\nfor i in range(n - 1):\n    a, b = b, min(Counter(str(a + b)).values()) * (b + 1)\n\nprint(a)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8\") == \"4\"\nassert solution(\"3 2\") == \"2\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8\\n') == '4'\n\nassert solution('3 2\\n') == '2'\nassert solution('1 1\\n') == '1'\nassert solution('4 10\\n') == '4'\nassert solution('2 2\\n') == '3'\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '3 2'\n) == '2'\nassert solution(\n    '4 8'\n) == '4'"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8\") == \"4\"\nassert solution(\"4 8\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"4 8\") == \"4\"\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == 6\nassert solution(\"4 4\") == 5\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5') == '6'\nassert solution('4 4') == '5'\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"6\"\nassert solution(\"4 4\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"6\"\n\"\"\"\n\na_1, a_2 = [int(x) for x in input().split()]\nm_1, m_2 = 0, 0\nn_1, n_2 = a_1, a_2\nwhile True:\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_1 += 1\n    if n_1 > 100 or n_2 > 100:\n        break\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_2 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_1 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_2 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_1 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_2 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_1 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_2 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_1 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_2 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_1 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_2 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_1 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_2 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_1 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_2 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_1 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_2 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_1 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_2 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_1 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_2 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1\n    m_1 += 1\n    if n_1 < 0 or n_2 < 0:\n        break\n    elif n_1 > n_2:\n        n_1 -= n_2\n    else:\n        n_2 -= n_1"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"6\"\nassert solution(\"4 4\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"5 5\") == \"6\"\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5') == '6'\nassert solution('4 4') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5') == 6\n\"\"\"\n\na1, a2 = [int(x) for x in stdin.readline().split()]\n\nd = {0: 0, 1: a1, 2: a2}"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"6\"\nassert solution(\"4 4\") == \"5\"\nassert solution(\"1 100\") == \"101\"\nassert solution(\"10 100\") == \"110\"\nassert solution(\"10 200\") == \"310\"\n\n\"\"\"\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == 6\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 3\\n1 3 2 3\") == \"6\"\nassert solution(\"2 4 6\\n4 7\") == \"11.0\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 6') == '11'\nassert solution('4 2 6') == '5'\nassert solution('4 7') == '10'\nassert solution('4 1') == '4'\nassert solution('4 1 1') == '4'\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 6\\n1 3 2 3\") == \"11.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 6\\n4 7') == '11.0'\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 6\\n1 3 2 3\") == \"11.00000000000000000000\"\nassert solution(\"4 2 6\\n4 7\") == \"5.00000000000000000000\"\n\nimport sys\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 6\\n4 7\") == \"11.0\"\nassert solution(\"4 2 6\\n1 3 2 3\") == \"5.0\"\nassert solution(\"1 2 3\\n1 1\") == \"3.0\"\nassert solution(\"3 3 3\\n1 1 1 1\") == \"3.0\"\nassert solution(\"3 3 3\\n1 1 1 1\") == \"4.0\"\n\n---\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 6\") == \"11.0\"\n\"\"\"\n\nn, k, m = [int(i) for i in input().split()]\npower = [int(i) for i in input().split()]\n\naverage_power = 0\nfor i in range(k):\n    average_power += max(power)\n    power.remove(max(power))\nfor i in range(m):\n    average_power += max(power)\n    power.remove(max(power))\n\nprint(average_power / k)\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 6\\n4 7\") == \"11.00000000000000000000\"\nassert solution(\"4 2 6\\n1 3 2 3\") == \"5.00000000000000000000\"\n\n\"\"\"\n\nn, k, m = input().split()\nn = int(n)\nk = int(k)\nm = int(m)\n\npower = [int(num) for num in input().split()]\navg = 0\nfor i in range(k):\n    if len(power) >= 2:\n        power.remove(max(power))\n        power.append(max(power) + 1)\n        avg += max(power)\n    elif len(power) == 1:\n        power.append(power[0] + 1)\n        avg += power[0] + 1\n    else:\n        break\nprint(avg // k)"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6\") == \"11.00000000000000000000\"\nassert solution(\"4 2 6\") == \"5.00000000000000000000\"\nassert solution(\"4 1 6\") == \"5.00000000000000000000\""
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 6\\n4 7') == '11.0'\nassert solution('4 2 6\\n1 3 2 3') == '5.0'\nassert solution('4 2 6\\n4 7') == '11.0'\n\"\"\"\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(4) == 2\nassert solution(5) == -3\n\"\"\"\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"-3\""
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"-3\"\nprint(\"All tests passed.\")"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"-3\"\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n\") == \"2\"\nassert solution(\"5\\n\") == \"-3\"\n\"\"\""
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n') == '2'\nassert solution('5\\n') == '-3'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"3\") == \"-3\"\nassert solution(\"7\") == \"2\"\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == 2\nassert solution('5') == -3\n\"\"\"\n\nn = int(input())\n\nres = 0\nfor i in range(1, n + 1):\n    res += -1 + 2 * i\n\nprint(res)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"2\"\n\"\"\""
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 2 0\") == '1'\nassert solution(\"5\\n4 2 3 0 1\") == '3'\nassert solution(\"7\\n0 3 1 0 5 2 6\") == '2'\n\n\n\n\n'''\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3 0 1') == '3'\nassert solution('7 0 3 1 0 5 2 6') == '2'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 2 0\") == \"1\"\nassert solution(\"5\\n4 2 3 0 1\") == \"3\"\nassert solution(\"7\\n0 3 1 0 5 2 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 3 1 0 5 2 6\") == \"2\"\nassert solution(\"7\\n0 3 1 0 5 2 6\") == \"3\""
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str([1, 2, 3])) == \"1\"\nassert solution(str([1, 2, 0])) == \"1\"\nassert solution(str([1, 0, 3])) == \"2\"\nassert solution(str([1, 0, 0])) == \"1\"\nassert solution(str([0, 2, 3])) == \"3\"\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 2 0 1') == '2'\nassert solution('7 0 3 1 0 5 2 6') == '2'\n\n\"\"\""
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"7\") == \"2\"\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 2 0\\n') == '1'\n\nassert solution('5\\n4 2 3 0 1\\n') == '3'\n\nassert solution('7\\n0 3 1 0 5 2 6\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n\n\n\"\"\"\n\nn = int(input())\np = list(map(int, input().split()))\n\ndp = [0] * n\n\ndp[0] = 1\ndp[1] = 1"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 2 0') == '1'\nassert solution('5\\n4 2 3 0 1') == '3'\nassert solution('7\\n0 3 1 0 5 2 6') == '2'\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abcda\") == \"abca\"\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcda\") == \"abca\"\nassert solution(\"aaa\") == \"aa\"\n\nprint(\"Ok!\")\n\n\n'''\n\n\n\n\n\nimport sys\nimport time\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abb\") == \"ab\"\nassert solution(\"abcde\") == \"abcd\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcda\") == \"abca\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abcda\") == \"abca\"\n\n\"\"\"\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abb\") == \"ab\"\nassert solution(\"abc\") == \"ab\"\nassert solution(\"z\") == \"z\"\nassert solution(\"aab\") == \"ab\"\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aaaa') == 'aa'\nassert solution('abc') == 'ab'\nassert solution('abb') == 'ab'\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abcda\") == \"abca\"\n\n\"\"\"\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaaa\") == \"aaaaa\"\nassert solution(\"aaa\") == \"aa\"\nassert solution(\"a\") == \"a\"\nassert solution(\"bbb\") == \"bbb\"\nassert solution(\"abc\") == \"abc\"\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abcda\") == \"abca\"\n\"\"\""
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaa') == 'aa'\nassert solution('abb') == 'ab'\nassert solution('abc') == 'abc'\nassert solution('pqr') == 'pqr'\nassert solution('aaa') < solution('aaaa')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\\n\") == '24'\nassert solution(\"7 3\\n3 14 15 92 65 35 89\\n\") == '64'"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4\\n9 14 28 1 7 13 15 29 2 31') == '24'\nassert solution('7 3\\n3 14 15 92 65 35 89') == '64'\n\"\"\"\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 4\n9 14 28 1 7 13 15 29 2 31''') == '24'\nassert solution('''7 3\n3 14 15 92 65 35 89''') == '64'\nassert solution('''2 5\n5 9 0 2 5''') == '0'\nassert solution('''6 6\n0 0 0 0 0 0''') == '0'\nassert solution('''7 6\n0 0 0 0 0 0''') == '0'\n\nimport numpy as np\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 14 28 1 7 13 15 29 2 31\") == \"24\"\nassert solution(\"3 14 15 92 65 35 89\") == \"64\"\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\") == \"24\"\nassert solution(\"7 3\\n3 14 15 92 65 35 89\") == \"64\"\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\") == \"24\"\nassert solution(\"7 3\\n3 14 15 92 65 35 89\") == \"64\"\n\"\"\""
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\") == \"24\"\n\nassert solution(\"7 3\\n3 14 15 92 65 35 89\") == \"64\"\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\") == \"24\"\nassert solution(\"7 3\\n3 14 15 92 65 35 89\") == \"64\"\n\nprint(solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\"))\nprint(solution(\"7 3\\n3 14 15 92 65 35 89\"))\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\\n9 14 28 1 7 13 15 29 2 31\") == '24'\nassert solution(\"7 3\\n3 14 15 92 65 35 89\") == '64'\n\"\"\""
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 4\\n9 14 28 1 7 13 15 29 2 31') == '24'\nassert solution('7 3\\n3 14 15 92 65 35 89') == '64'\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == \"12\"\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == '12'\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == '11'\nassert solution(\"2\\n1\\n1\\n1 1\") == '4'\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == \"12\"\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == \"11\"\nassert solution(\"2\\n1\\n1 1\\n1 1\") == \"4\"\nassert solution(\"2\\n1\\n1\\n1 1\") == \"4\"\nassert solution(\"2\\n1\\n1\\n1 1\") == \"4\"\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 3\") == '12'\nassert solution(\"3 1 2\") == '11'\nassert solution(\"2 1\") == '4'\nassert solution(\"1 1\") == '0'\nassert solution(\"3 2 3\") == '11'\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == \"12\"\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == \"11\"\nassert solution(\"2\\n1\\n1 1\\n1 1\") == \"4\"\nassert solution(\"1\\n1\") == \"4\"\nassert solution(\"1\\n1\\n1\") == \"4\"\n\"\"\""
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == 12\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == 11\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == \"12\"\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == \"11\"\nassert solution(\"2\\n1\\n1\\n1 1\") == \"4\"\nassert solution(\"1\\n1\") == \"4\""
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == \"12\"\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == \"11\"\nassert solution(\"2\\n1\\n1\\n1 1\") == \"4\"\n\n---------------------------------------------------------------"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == \"12\"\n\n\"\"\"\nimport sys\nimport math\n\nn = int(sys.stdin.readline().strip())\na = [0] + [int(x) for x in sys.stdin.readline().strip().split(\" \")]\nb = [0] + [int(x) for x in sys.stdin.readline().strip().split(\" \")]"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\") == \"12\"\nassert solution(\"3\\n1 2\\n3 3\\n2 1 3\") == \"11\"\nassert solution(\"2\\n1\\n1 1\\n1 1\") == \"4\"\nassert solution(\"1\\n1\\n1 1\") == \"4\""
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n0') == '1'\nassert solution('4 2\\n2 1 4 3') == '2 3'\nassert solution('3 1\\n0 2 0') == '0 1'\nassert solution('7 2\\n2 1 4 6 7 0 1') == '4 5'\nassert solution('8 1\\n0') == '0 1'\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 2\\n0 1 2 3 4 5 6') == '2 3 3 4 4 5 5 6 6 6 6 6 6 6 6 6'\nassert solution('5 0\\n0 1 2 3 4') == '1 2 2 3 3 3 3 3 3 3'\nassert solution('5 1\\n0 1 2 3 4') == '1 2 2 3 3 3 3 3 3 3'\nassert solution('10 1\\n0 1 2 3 4 5 6 7 8 9 10') == '2 3 3 4 5 6 6 6 6 6 6 6 6 6 6 6'\nassert solution('2 2\\n0 1') == '2 2'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1\\n0 1 0 3 4 5 2 3 7 0\") == \"2 3 3 4 5 6 6 6 8 2\"\n\"\"\""
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 0\\n0 1 1 2 3 2\") == '1 2 2 3 3 3'\n\nhttps://app.codility.com/demo/results/training7QKGJ7-41M/\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 0\\n0 1 1 2 3 2\\n\") == \"1 2 2 3 3 3\"\nassert solution(\"10 1\\n0 1 0 3 4 5 2 3 7 0\\n\") == \"2 3 3 4 5 6 6 6 8 2\"\nassert solution(\"2 2\\n0 1\\n\") == \"2 2\""
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''10 1\n0 1 0 3 4 5 2 3 7 0\n''') == '2 3 3 4 5 6 6 6 8 2'\n\nassert solution(\n'''2 2\n0 1\n''') == '2 2'\n\nassert solution(\n'''10 5\n0 1 1 2 3 2\n''') == '1 2 2 3 3 3'\n\nassert solution(\n'''6 0\n0 1 1 2 3 2\n''') == '1 2 2 3 3 3'\n\n\n\n\n\n'''\nfrom collections import deque"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n0 1\\n\") == \"2 2\"\nassert solution(\"6 0\\n0 1 1 2 3 2\\n\") == \"1 2 2 3 3 3\"\nassert solution(\"10 1\\n0 1 0 3 4 5 2 3 7 0\\n\") == \"2 3 3 4 5 6 6 6 8 2\"\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 0\\n0 1 1 2 3 2\") == \"1 2 2 3 3 3\"\nassert solution(\"10 1\\n0 1 0 3 4 5 2 3 7 0\") == \"2 3 3 4 5 6 6 6 8 2\"\nassert solution(\"2 2\\n0 1\") == \"2 2\"\n\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n0 1\\n\") == \"2 2\"\nassert solution(\"4 2\\n0 1 2 3\\n\") == \"2 2 2 3\"\nassert solution(\"6 0\\n0 1 1 2 3 2\\n\") == \"1 2 2 3 3 3\"\nassert solution(\"6 1\\n0 1 1 2 3 2\\n\") == \"2 3 3 3 3 3\"\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nlinks = list(map(int, sys.stdin.readline().split()))\nprev = [-1] + [i for i in range(n) if links[i]!= -1] + [n]\nnext = [i+1 for i in range(n)] + [-1]\nfor i in range(n):\n    next[prev[i]] = next[i]\n    prev[next[i]] = prev[i]\n\ndp = [0] * (n+1)\ndp[n] = 1\nfor i in range(n, 1, -1):\n    dp[prev[i]] += dp[i]\n    dp[next[i]] += dp[i]\nprint(*dp[1:])"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 0\\n0 1 1 2 3 2\") == \"1 2 2 3 3 3\"\nassert solution(\"10 1\\n0 1 0 3 4 5 2 3 7 0\") == \"2 3 3 4 5 6 6 6 8 2\"\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(['5 4', '1 2 3 4 5']) == 'YES'\nassert solution(['5 1', '1 2 3 4 5']) == 'NO'\nassert solution(['4 1', '1 2 3 4 5']) == 'YES'\nassert solution(['4 5', '1 2 3 4 5']) == 'YES'\n\nassert solution(['3 2', '1 3 2']) == 'YES'\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 8') == 'YES'\nassert solution('4 4') == 'NO'\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8\") == \"YES\"\nassert solution(\"2 5 1\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\nassert solution(\"0 1 2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 1\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\n\"\"\"\n\nfrom math import *\n\nwhile True:\n    try:\n        a = [int(x) for x in input().split()]\n        n = a[0]\n        m = a[1]\n        a = a[2:]\n        res = 0\n        for i in range(n):\n            res += a[i] / (i + 1)\n        if res == m:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    except:\n        break\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\") == \"YES\"\nassert solution(\"3 8\") == \"NO\"\n\"\"\""
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8\\n2 5 1\") == \"YES\"\nassert solution(\"4 4\\n0 1 2 3\") == \"NO\"\nassert solution(\"2 8\\n1 5 1\") == \"YES\"\nassert solution(\"4 8\\n1 3 5 2\") == \"NO\"\nassert solution(\"2 4\\n0 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"NO\"\nassert solution(\"3 8\") == \"YES\"\n\"\"\""
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\") == \"NO\"\nassert solution(\"3 8\") == \"YES\"\nassert solution(\"3 5\") == \"NO\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8\") == \"YES\"\nassert solution(\"2 5 1\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n5 1') == '10\\n12\\n12'\nassert solution('2\\n5 1') == '10\\n12\\n12'\nassert solution('1\\n6 1000000000') == '1\\n79999999999\\n79999999999'\n\"\"\"\n\nfrom operator import mul\nfrom functools import reduce\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5 1\\n8 2\\n3 4\") == \"10\\n12\\n12\"\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 2') == '4'\nassert solution('3 4') == '12'\n'''\n\n\nfrom collections import Counter\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    cnt = Counter()\n    while n not in cnt:\n        if n % k == 0:\n            n += 1\n        else:\n            cnt[n] = n\n            n += n // k\n    print(n)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\\n5 1\\n8 2\\n3 4\"\n) == \"10\\n12\\n12\"\nassert solution(\n    \"3\\n5 1\\n8 2\\n3 4\"\n) == \"10\\n12\\n12\"\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n5 1\\n8 2\\n3 4') == '10\\n12\\n12'\nassert solution('2\\n5 1\\n8 2\\n3 4') == '10\\n12\\n12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n8\\n3\\n4\") == \"10\"\nassert solution(\"6\\n2\\n3\\n4\") == \"12\"\nassert solution(\"6\\n9\\n3\\n4\") == \"12\"\nassert solution(\"6\\n9\\n3\\n4\") == \"12\"\n\nassert solution(\"6\\n9\\n3\\n4\\n5\") == \"12\""
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5 1\\n8 2\\n3 4\") == \"10\\n12\\n12\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nt = int(stdin.readline().strip())\n\nfor _ in range(t):\n    n, k = list(map(int, stdin.readline().strip().split()))\n    tmp = n\n    while k > 0:\n        tmp = (n*10) + (n%10)\n        n = tmp\n        k -= 1\n    print(tmp)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"4\"\n\"\"\""
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\") == \"10\"\nassert solution(\"8\\n2\") == \"12\"\nassert solution(\"3\\n4\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 12\") == \"Impossible\"\nassert solution(\"5 6\") == \"Impossible\"\nassert solution(\"5 4\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(output())\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n3 2\\n5 1\\n3 4\\n4 1\\n5 4\") == \"Possible\"\nassert solution(\"6 12\\n1 2\\n1 3\\n2 4\\n3 5\\n3 6\\n4 5\\n4 6\\n5 4\\n5 6\\n6 3\\n6 4\\n6 5\") == \"Impossible\"\nassert solution(\"4 3\\n1 3\\n2 3\") == \"Impossible\"\n\n\n-----Hints-----\n\nCan you define a graph that satisfies the given constraints?\n\nCan you find the number of edges?\n\nCan you check the validity of the graph by checking for the following:\n\nFor each edge $(v, u)$ the number of edges between vertices $v$ and $u$ should be exactly $GCD(v, u)$.\n\nCan you check the validity of the graph by checking for the following:\n\nFor each edge $(v, u)$ there should be no edge between vertices $v$ and $u$.\n\nCan you check the validity of the graph by checking for the following:\n\nThere should be no self-loops.\n\nCan you check the validity of the graph by checking for the following:\n\nThere should be no multiple edges.\n\nCan you check the validity of the graph by checking for the following:\n\nThe graph should be connected.\n\nDo the vertices have distinct labels?\n\"\"\"\n\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.edges = []\n        self.adj = [[] for _ in range(n)]\n\n    def add_edge(self, v, u):\n        self.edges.append((v, u))\n        self.adj[v].append(u)\n        self.adj[u].append(v)\n\n    def gcd(self, v, u):\n        return self.edges[v][u]\n\n    def print_edges(self):\n        print(\"\\n\".join(map(lambda x: \" \".join(map(str, x)), self.edges)))\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5, 6) == \"Possible\"\nassert solution(6, 12) == \"Impossible\"\n\"\"\""
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\") == \"Impossible\"\nassert solution(\"6 12\") == \"Impossible\"\nassert solution(\"6 10\") == \"Possible\"\nassert solution(\"6 9\") == \"Possible\"\nassert solution(\"6 9\") == \"Possible\"\n\n\"\"\"\n\n\nfrom functools import reduce\nfrom math import gcd\n\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.vertices = [set() for _ in range(n)]\n        self.edges = set()\n\n    def add_edge(self, u, v):\n        self.edges.add((u, v))\n        self.edges.add((v, u))\n        self.vertices[u].add(v)\n        self.vertices[v].add(u)\n\n    def check(self):\n        self.edges = sorted(self.edges)\n        for u, v in self.edges:\n            if gcd(u, self.n)!= gcd(v, self.n):\n                return False\n        return True\n\n    def __repr__(self):\n        return repr(self.edges)\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6\") == \"Impossible\"\nassert solution(\"6 12\") == \"Impossible\"\nassert solution(\"6 4\") == \"Impossible\"\nassert solution(\"4 4\") == \"Impossible\"\nassert solution(\"4 5\") == \"Possible\"\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6') == 'Impossible'\nassert solution('6 12') == 'Impossible'\nassert solution('6 5') == 'Possible'\nassert solution('1 2') == 'Impossible'\nassert solution('4 1') == 'Impossible'\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"Impossible\"\nassert solution(\"4 6\") == \"Impossible\"\nassert solution(\"5 6\") == \"Impossible\"\nassert solution(\"6 12\") == \"Impossible\"\n\n\"\"\""
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6') == 'Impossible'\n\nassert solution('6 12') == 'Impossible'\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n1 1\\n') == 'WIN'\nassert solution('12 2\\n4 1\\n8 1\\n') == 'WIN'\nassert solution('1 1\\n1 2\\n') == 'LOSE'"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 1\\n\") == \"WIN\"\nassert solution(\"12 2\\n4 1\\n8 1\\n\") == \"WIN\"\nassert solution(\"1 1\\n1 2\\n\") == \"LOSE\""
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected_result"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 1\") == \"WIN\"\nassert solution(\"3 1\\n3 1\") == \"LOSE\"\nassert solution(\"4 1\\n1 1\\n2 2\\n2 1\\n2 1\") == \"LOSE\"\n\n\"\"\""
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == 'LOSE'\nassert solution('1 2\\n2 1') == 'WIN'\nassert solution('1 2\\n2 3') == 'LOSE'\nassert solution('1 2\\n3 2') == 'WIN'\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 2\") == \"WIN\"\nassert solution(\"1 1\\n1 2\") == \"LOSE\"\n\n\"\"\"\nimport itertools"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"WIN\"\nassert solution(\"12 2\") == \"LOSE\""
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n1 1\") == \"WIN\"\nassert solution(\"12 2\\n4 1\\n8 1\") == \"LOSE\"\nassert solution(\"1 1\\n1 2\") == \"LOSE\"\n\n\"\"\""
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 1\\n\") == \"WIN\"\nassert solution(\"3 1\\n4 1\\n8 1\\n\") == \"WIN\"\nassert solution(\"3 1\\n4 1\\n8 1\\n\") == \"LOSE\"\nassert solution(\"1 1\\n1 2\\n\") == \"LOSE\"\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin_a) == stdin_b\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 1 1 1\\n1 0 1 1\") == \"YES\"\nassert solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"5 2\\n1 0 1 1 1\\n1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n\") == 'YES'\nassert solution(\"5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n\") == 'YES'\nassert solution(\"5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n\") == 'NO'\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"5 3\n1 1 1 1 1\n1 1 1 1 1\n\nYES\n\"\"\") == \"YES\"\n\nassert solution(\n\"\"\"5 4\n1 0 0 0 1\n0 1 1 1 1\n\nYES\n\"\"\") == \"YES\"\n\nassert solution(\n\"\"\"5 2\n0 1 1 1 1\n1 1 1 1 1\n\nNO\n\"\"\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n\") == \"NO\"\n\nprint('Success')"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 1 1 1 1\\n1 1 1 1 1') == 'YES'\nassert solution('5 4\\n1 0 0 0 1\\n0 1 1 1 1') == 'YES'\nassert solution('5 2\\n0 1 1 1 1\\n1 1 1 1 1') == 'NO'\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n\") == \"YES\"\nassert solution(\"5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"3 1 1 1 1\") == \"NO\"\nassert solution(\"2 1 1 1 1\") == \"YES\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10\\n4 3 1 2\") == \"4\"\nassert solution(\"5 6\\n4 3 1 1 2\") == \"3\"\nassert solution(\"1 3\\n4\") == \"0\"\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nleft = 0\nright = k\ndays = 0\nresult = []\nfor i in range(n):\n    if i == 0:\n        days = a[0]\n    else:\n        days += a[i] - a[i - 1]\n    while days > k:\n        days -= k\n        right += 1\n        days += right - left\n    result.append(right)\n    right += 1\n    left = right\nprint(result)\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('4 10') == '4'\nassert solution('4 3 1 2') == '1 2 3 4'\nassert solution('4 1 2 3') == '1 2 3'\nassert solution('5 6') == '3 4 5'\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10\\n4 3 1 2') == '4', 'Test 1 expected 4 got {}'.format(solution('4 10\\n4 3 1 2'))\nassert solution('5 6\\n4 3 1 1 2') == '3', 'Test 2 expected 3 got {}'.format(solution('5 6\\n4 3 1 1 2'))\nassert solution('1 3\\n4') == '0', 'Test 3 expected 0 got {}'.format(solution('1 3\\n4'))\nassert solution('3 1\\n4') == '0', 'Test 4 expected 0 got {}'.format(solution('3 1\\n4'))\n\"\"\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10\\n4 3 1 2\") == \"4\"\nassert solution(\"5 6\\n4 3 1 1 2\") == \"3 1 2\"\nassert solution(\"1 3\\n4\") == \"0\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\\n4 3 1 2\") == \"4\\n1 2 3 4\"\nassert solution(\"5 6\\n4 3 1 1 2\") == \"3\\n1 3 4\"\nassert solution(\"1 3\\n4\") == \"0\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\\n4 3 1 2\") == \"4\\n1 2 3 4\"\nassert solution(\"5 6\\n4 3 1 1 2\") == \"3\\n1 3 4\"\nassert solution(\"1 3\\n4\") == \"0\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\\n4 3 1 2\") == \"4\\n1 2 3 4\"\n\nassert solution(\"5 6\\n4 3 1 1 2\") == \"3\\n1 3 4\"\n\nassert solution(\"1 3\\n4\") == \"0\"\n\nassert solution(\"5 10\\n3 3 1 1 2\") == \"3\\n1 3 4\"\n\nassert solution(\"4 10\\n3 3 1 1 2\") == \"3\\n1 3 4\""
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 10\\n4 3 1 2') == '4\\n1 2 3 4'\nassert solution('5 6\\n4 3 1 1 2') == '3\\n1 3 4'\nassert solution('1 3\\n4') == '0'\n\"\"\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10\\n4 3 1 2\") == \"4\\n1 2 3 4\"\nassert solution(\"5 6\\n4 3 1 1 2\") == \"3\\n1 3 4\"\nassert solution(\"1 3\\n4\") == \"0\"\nassert solution(\"3 4\\n4 3 1 1 2\") == \"2\\n1 3 4\""
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n0 0 0 1 1 1 0 0 0\") == \"YES\"\nassert solution(\"7\\n0 0 0 1 1 1 1\") == \"NO\"\nassert solution(\"5\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"8\\n1 1 1 0 0 0 1 1\") == \"NO\"\nassert solution(\"9\\n1 1 0 1 1 0 1 1 0\") == \"NO\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n0 0 0 1 1 1 0 0 0\") == \"YES\"\nassert solution(\"7\\n0 0 0 1 1 1 1\") == \"NO\"\nassert solution(\"5\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"8\\n1 1 1 0 0 0 1 1\") == \"NO\"\nassert solution(\"9\\n1 1 0 1 1 0 1 1 0\") == \"NO\"\n\"\"\""
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9\\n1 1 0 1 1 0 1 1 0') == 'YES'\nassert solution('7\\n1 1 1 1 1') == 'NO'\nassert solution('5\\n1 1 1 1 1') == 'YES'\nassert solution('8\\n1 1 1 0 0 0 1 1') == 'NO'\nassert solution('9\\n1 1 0 1 1 0 1 1 0') == 'NO'\n\nprint('The local tests are done. Click on \"Check\" for more details.')\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n0 0 0 1 1 1 0 0 0\") == \"YES\"\nassert solution(\"7\\n0 0 0 1 1 1 1\") == \"NO\"\nassert solution(\"5\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"8\\n1 1 1 0 0 0 1 1\") == \"NO\"\nassert solution(\"9\\n1 1 0 1 1 0 1 1 0\") == \"NO\""
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9\\n1 1 1 1 1\\n') == 'YES'\nassert solution('7\\n0 0 0 1 1 1\\n') == 'NO'\nassert solution('5\\n1 1 1 1 1\\n') == 'YES'\nassert solution('8\\n1 1 1 0 0 0 1 1\\n') == 'NO'\nassert solution('9\\n1 1 0 1 1 0 1 1\\n') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\", \"0 0 0 1 1 1 0 0 0\") == \"YES\"\nassert solution(\"7\", \"0 0 0 1 1 1 1\") == \"NO\"\nassert solution(\"5\", \"1 1 1 1 1\") == \"YES\"\nassert solution(\"8\", \"1 1 1 0 0 0 1 1\") == \"NO\"\nassert solution(\"9\", \"1 1 0 1 1 0 1 1 0\") == \"NO\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 1 1 1 1') == 'YES'\nassert solution('9\\n1 1 1 1 1 1 1 1') == 'NO'\n\n\"\"\""
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n0 0 0 1 1 1 0 0 0\\n\") == 'YES'\nassert solution(\"7\\n0 0 0 1 1 1 1\\n\") == 'NO'\nassert solution(\"5\\n1 1 1 1 1\\n\") == 'YES'\nassert solution(\"8\\n1 1 1 0 0 0 1 1\\n\") == 'NO'\nassert solution(\"9\\n1 1 0 1 1 0 1 1 0\\n\") == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n1 1 1 1 1\\n\") == \"YES\"\nassert solution(\"7\\n1 1 1 1 1\\n\") == \"NO\"\nassert solution(\"5\\n1 1 1 1\\n\") == \"YES\"\nassert solution(\"8\\n1 1 1 0 0 0 1 1\\n\") == \"NO\"\nassert solution(\"9\\n1 1 0 1 1 0 1 1\\n\") == \"NO\"\n\"\"\"\n\nwidth = int(stdin.readline())\nphoto = stdin.readline().strip().split(' ')\nis_photo = True\nblack_pixels = 0\nwhite_pixels = 0\nfor pixel in photo:\n    if pixel == '0':\n        black_pixels += 1\n    else:\n        white_pixels += 1\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\") == \"YES\"\nassert solution(\"7\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"8\") == \"NO\"\nassert solution(\"9\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 15\\n1 2 3 4 5 6 7') == '0 0 0 0 0 2 3'\nassert solution('7 100\\n80 40 40 40 60') == '0 1 1 2 3'\nassert solution('5 100\\n80 40 40 40 60') == '0 1 1 2 3'\nassert solution('6 100\\n80 40 40 40 60') == '0 1 1 2 3'\nassert solution('7 100\\n80 40 40 40 60') == '0 1 1 2 3'\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 15\\n1 2 3 4 5 6 7') == '0 0 0 0 0 2 3'\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 100\\n1 2 3 4 5 6 7\") == \"0 1 1 2 2 3\"\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 15\\n1 2 3 4 5 6 7\") == \"0 0 0 0 0 2 3\"\nassert solution(\"5 100\\n80 40 40 40 60\") == \"0 1 1 2 3\"\n\"\"\"\n\n\"\"\"\nfrom collections import Counter, defaultdict\nimport re"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 15\\n1 2 3 4 5 6 7\") == \"0 0 0 0 0 2 3\"\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 15\\n1 2 3 4 5 6 7\") == '0 0 0 0 0 2 3'\n\n\"\"\"\n\nfrom math import ceil, log, sqrt\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 15\\n1 2 3 4 5 6 7\") == '0 0 0 0 0 2 3'\n\"\"\""
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 15\\n1 2 3 4 5 6 7') == '0 0 0 0 0 2 3'\n\"\"\"\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 15\\n1 2 3 4 5 6 7\") == \"0 0 0 0 0 2 3\"\nassert solution(\"5 100\\n80 40 40 40 60\") == \"0 1 1 2 3\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 15\\n1 2 3 4 5 6 7') == '0 0 0 0 2 3'\nassert solution('6 100\\n80 40 40 40 60') == '0 1 1 2 3'\nassert solution('5 100\\n80 40 40 40 60') == '0 1 1 2 3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n0 4 5 6 7') == '2'\nassert solution('1 0\\n0') == '1'\nassert solution('5 0\\n1 2 3 4 5') == '0'\nassert solution('5 4\\n1 2 3 4 5') == '0'\nassert solution('5 4\\n5 3 4 2 1') == '0'\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n0 4 5 6 7\") == \"2\"\nassert solution(\"5 0\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5 0\\n1 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n0 4 5 6 7\") == \"2\"\nassert solution(\"1 0\\n0\") == \"1\"\nassert solution(\"5 0\\n1 2 3 4 5\") == \"0\"\n\"\"\"\nimport sys\n\nfrom typing import List, Tuple\n\nn, x = map(int, sys.stdin.readline().split())\ns: List[int] = [int(i) for i in sys.stdin.readline().split()]\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n0 4 5 6 7\") == \"2\"\nassert solution(\"1 0\\n0\") == \"1\"\nassert solution(\"5 0\\n1 2 3 4 5\") == \"0\"\nassert solution(\"5 1\\n1 2 3 4 5\") == \"0\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"0\"\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n0 4 5 6 7') == '2'\nassert solution('1 0\\n0') == '1'\nassert solution('5 0\\n1 2 3 4 5') == '0'\n\"\"\"\n\nimport sys\nimport collections\nfrom typing import List, Union, Dict, Tuple, Optional, Set, Iterable, Callable\n\nclass Solution:\n    def __init__(self) -> None:\n        pass\n\n\n    def solution(self, stdin: str) -> str:\n        pass\n\n\nsolution = Solution().solution\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"2\"\n\n\"\"\"\nimport collections"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n0 4 5 6 7') == '2'\nassert solution('1 0\\n0') == '1'\nassert solution('5 0\\n1 2 3 4 5') == '0'\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n0 4 5 6 7') == '2'\nassert solution('5 0\\n1 2 3 4 5') == '1'\nassert solution('1 0\\n0') == '1'\nassert solution('5 0\\n0') == '0'\nassert solution('1 1\\n1') == '0'\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n0 4 5 6 7\") == \"2\"\nassert solution(\"1 0\\n0\") == \"1\"\nassert solution(\"5 0\\n1 2 3 4 5\") == \"0\"\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n0 4 5 6 7\") == \"2\"\nassert solution(\"1 0\\n0\") == \"1\"\n\"\"\"\n\n\"\"\"\nimport numpy as np\n\na = list(map(int, stdin.split(\" \")[0].split(\" \")))\nx = int(stdin.split(\" \")[1])\n\nn = a[0]\n\na = np.array(a[1:])\n\na_mex = np.max(np.argwhere(a>=0))\n\nprint(len(a)-a_mex)"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5') == '3 0 3'\nassert solution('2 4') == '2 1 3'"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2 4') == '2 1 3'\n\"\"\""
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 5''') == '3 0 3'\nassert solution('''2 4''') == '2 1 3'\n\"\"\"\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5') == '3 0 3'\nassert solution('2 4') == '2 1 3'\n\"\"\"\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"3 0 3\"\nassert solution(\"2 4\") == \"2 1 3\""
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5') == '3 0 3'\nassert solution('2 4') == '2 1 3'\nassert solution('1 2') == '1 2 1'\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"3 0 3\"\n\"\"\"\n\nimport itertools\n\nstdin = input()\nlst = stdin.split()\na, b = int(lst[0]), int(lst[1])\n\nlst = itertools.permutations(range(1, 7))\nlst = list(lst)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"3 0 3\"\nassert solution(\"2 4\") == \"2 1 3\"\nassert solution(\"4 4\") == \"1 0 2\"\nassert solution(\"5 6\") == \"1 0 1\"\nassert solution(\"4 4\") == \"1 0 2\"\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"3 0\"\nassert solution(\"2 5\") == \"2 1 3\"\nassert solution(\"2 4\") == \"2 1 3\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"3 0 3\"\nassert solution(\"2 4\") == \"2 1 3\"\n\nsolution(\"2 4\")\nsolution(\"2 5\")"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 of week') == '52'\nassert solution('30 of month') == '11'"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 of week') == '52'\nassert solution('30 of month') == '11'\n\"\"\""
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 of week''') == '52'\nassert solution('''30 of month''') == '11'\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 of week') == '52'\nassert solution('30 of month') == '11'\n\"\"\""
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 of week\") == \"52\"\nassert solution(\"30 of month\") == \"11\"\n\n\"\"\"\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 of week\") == 52\nassert solution(\"30 of month\") == 11\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 of week') == '52'\nassert solution('30 of month') == '11'\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 of week\") == \"52\"\nassert solution(\"30 of month\") == \"11\"\n\"\"\"\n\nimport calendar"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 of week\") == 52\nassert solution(\"30 of month\") == 11\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 of week\") == 52\nassert solution(\"30 of month\") == 11\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 5 2 4 8 3 6\") == \"NO\"\nassert solution(\"10 5 2 4 8 7 9\") == \"YES\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 4 1\") == \"NO\"\nassert solution(\"5 10 2 4 1\") == \"YES\"\n\nassert solution(\"7 4 4 7\") == \"NO\"\nassert solution(\"7 10 4 7\") == \"YES\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5\\n2 4 8 3 6\") == \"NO\"\nassert solution(\"10 5\\n2 4 5 7 9\") == \"YES\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 5\\n2 4 8 3 6') == 'NO'\nassert solution('10 5\\n2 4 5 7 9') == 'YES'\n\"\"\"\n\nn, m = input().split()\nn, m = int(n), int(m)\n\nstairs = [int(i) for i in input().split()]\nstairs.sort()\n\nfor i in range(0, m):\n    if stairs[i] > n:\n        continue\n    if stairs[i+1] == stairs[i] + 1:\n        continue\n    else:\n        if stairs[i+2] == stairs[i] + 2:\n            continue\n        else:\n            print('NO')\n            break\nelse:\n    print('YES')\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 5\\n2 4 8 3 6\\n') == \"NO\"\nassert solution('7 8 9 10 11 12 2\\n') == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5 2 4 8 3 6\") == \"NO\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 5 2 4 8 3 6') == 'NO'\nassert solution('10 5 2 4 8 3 6') == 'NO'\nassert solution('10 5 2 4 8 3 6') == 'NO'\nassert solution('10 5 2 4 8 3 6') == 'NO'\n\"\"\""
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6 9 1 2 3 5 7 8') == 'NO'\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 5\\n2 4 8 3 6\") == \"NO\"\nassert solution(\"10 5\\n2 4 5 7 9\") == \"YES\"\nassert solution(\"10 9\\n2 4 8 3 6\") == \"NO\"\nassert solution(\"10 9\\n2 4 5 7 9\") == \"YES\"\nassert solution(\"10 2\\n2 4 5 7 9\") == \"NO\"\n\nimport sys; sys.stdin.readline(); a=input();print(\"YES\") if \"2 4 5 7 9\" in a else print(\"NO\")\n\n-----\n\nclass Stairs:\n    def __init__(self, steps, dirty):\n        self.steps = steps\n        self.dirty = dirty\n        \n    def can_jump(self):\n        i = 0\n        while i < len(self.steps) - 1:\n            for j in range(1, min(2, self.steps[i] + 1)):\n                if i + j in self.dirty:\n                    return False\n            i += j\n        return True\n        \n    def __str__(self):\n        return str(self.steps) + \" \" + str(self.dirty)\n        \n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 5\\n2 4 8 3 6') == 'NO'\n\nassert solution('10 5\\n2 4 8 3 6') == 'NO'\n\nassert solution('10 5\\n7 9') == 'YES'\n\nassert solution('10 5\\n2 4 5 8 3 6') == 'YES'\n\nassert solution('10 5\\n1 4 7 9') == 'NO'"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10 1 2\") == \"4\"\nassert solution(\"7 14 3 8\") == \"10\"\nassert solution(\"20 70 2 7\") == \"0\"\nassert solution(\"5 6 1 1\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 10 1 2\\n7 14 3 8\\n20 70 2 7\") == \"4\\n10\\n0\\n-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10 1 2') == '4'\nassert solution('7 14 3 8') == '10'\nassert solution('20 70 2 7') == '0'\nassert solution('5 6 1 1') == '-1'\n\"\"\""
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\\n\") == '4\\n10\\n0\\n-1'\nassert solution(\"7 10 1 2\\n14 3 8\\n20 70 2 7\\n5 6 1 1\\n\") == '0\\n-1'\nassert solution(\"20 70 2 7\\n5 6 1 1\\n\") == '-1'\nassert solution(\"7 10 1 2\\n14 3 8\\n5 6 1 1\\n\") == '0\\n-1'\nassert solution(\"7 10 1 2\\n14 3 8\\n5 6 1 1\\n\") == '0\\n-1'\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10 1 2\") == \"4\"\nassert solution(\"7 14 3 8\") == \"10\"\nassert solution(\"20 70 2 7\") == \"0\"\nassert solution(\"5 6 1 1\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1') == '4\\n10\\n0\\n-1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10 1 2') == '4'\nassert solution('7 14 3 8') == '10'\nassert solution('20 70 2 7') == '0'\nassert solution('5 6 1 1') == '-1'\n\n\"\"\""
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\") == \"4\\n10\\n0\\n-1\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\\n\") == \"4\"\nassert solution(\"1 20 3 4\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\\n\") == \"10\"\nassert solution(\"1 20 1 1\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\\n\") == \"0\"\nassert solution(\"1 20 3 4\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\\n\") == \"-1\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\") == \"4\\n10\\n0\\n-1\"\nassert solution(\"1 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\") == \"2\\n10\\n0\\n-1\"\nassert solution(\"2 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\") == \"2\\n10\\n0\\n-1\"\nassert solution(\"1 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\") == \"2\\n10\\n0\\n-1\"\n\n\"\"\"\nfrom collections import namedtuple\n\nResult = namedtuple('Result','res')"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\"\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\\n') == 161\nassert solution('2\\nfor 62\\nend\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend') == 0\nassert solution('11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend') == 'OVERFLOW!!!'\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\\n\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\n\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\\n\") == \"OVERFLOW!!!\""
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\"\n\n\"\"\""
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\nfor 10\\nfor 15\\nadd\\nend\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\""
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\\n\") == \"OVERFLOW!!!\"\nassert solution(\"2\\nfor 62\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\\n\") == \"0\"\nassert solution(\"9\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\\n\") == \"OVERFLOW!!!\"\nassert solution(\"12\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\\n\") == \"0\"\nassert solution(\"13\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nadd\\nend\\nend\\nend\\nend\\nend\\n\") == \"0\"\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\"\n\n\n'''"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\"\n\"\"\"\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nfor 5\\nend\\nadd\\nend\") == \"OVERFLOW!!!\"\nassert solution(\"2\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\") == \"161\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\") == \"OVERFLOW!!!\"\n\"\"\"\n\n\n\"\"\"\nIf you got it right, then the first and second tests would pass.\n\nFirst, the second test would fail because there is no \"add\" command.\n\nSecond, the third test would pass, because there is no \"end\" command and all commands in the function are executed once.\n\n\"\"\"\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\\nend\\nend\\n\") == \"161\"\nassert solution(\"2\\nfor 62\\nend\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\n\") == \"0\"\nassert solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\\n\") == \"OVERFLOW!!!\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a6') == 2\nassert solution('b2') == 2\nassert solution('z0') == 2\nassert solution('ee') == 2\nassert solution('0ay1') == 2\n\"\"\"\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ee') == '2'\nassert solution('z') == '0'\nassert solution('0ay1') == '2'\n\"\"\""
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"z\") == 0\nassert solution(\"ee\") == 2\nassert solution(\"0ay1\") == 2\nassert solution(\"abcd\") == 4\n\"\"\"\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0') == 2\nassert solution('12') == 2\nassert solution('ee') == 2\nassert solution('0ay1') == 2\nassert solution('0ay1') == 2\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0ay1') == 2\nassert solution('ee') == 2\nassert solution('z') == 0\nassert solution('0ay1') == 2\nassert solution('ee') == 2\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0y1\") == \"2\"\nassert solution(\"ee\") == \"2\"\nassert solution(\"z\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a0') == 2\nassert solution('a1') == 2\nassert solution('a2') == 3\nassert solution('a3') == 3\nassert solution('a4') == 3\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0ay1') == '2'\nassert solution('ee') == '2'\nassert solution('z') == '0'"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0ay1') == '2'\nassert solution('ee') == '2'\nassert solution('z') == '0'\nassert solution('0ay1') == '2'\n\"\"\""
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aei0\") == \"2\"\nassert solution(\"y2\") == \"0\"\nassert solution(\"ab\") == \"2\"\nassert solution(\"0ay1\") == \"2\"\n\"\"\"\n\n\nimport string"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"4\n100 0\n0 100\n-100 0\n0 -100\n\"\"\") == \"100\"\nassert solution(\n\"\"\"7\n0 2\n1 0\n-3 0\n0 -2\n-1 -1\n-1 -3\n-2 -3\n\"\"\") == \"2\"\nassert solution(\n\"\"\"5\n0 0\n0 -1\n3 0\n-2 0\n-2 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n100 0\\n0 100\\n-100 0\\n0 -100\") == '100'\nassert solution(\"7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\") == '-1'\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == '2'\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == '2'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n100 0\\n0 100\\n-100 0\\n0 -100\") == \"100\"\nassert solution(\"7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\") == \"-1\"\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == \"2\"\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n100 0\\n0 100\\n-100 0\\n0 -100\") == \"100\"\nassert solution(\"7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\") == \"-1\"\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == \"2\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n100 0\\n0 100\\n-100 0\\n0 -100\") == \"100\"\nassert solution(\"7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\") == \"2\"\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == \"2\"\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == \"2\"\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n100 0\\n0 100\\n-100 0\\n0 -100') == '100'\nassert solution('7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3') == '-1'\nassert solution('5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1') == '2'\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 0\\n0 100\\n-100 0\\n0 -100\\n-1 -1\\n-1 -3\\n-2 -3\") == \"100\"\nassert solution(\"7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\") == \"-1\"\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n100 0\\n0 100\\n-100 0\\n0 -100\") == \"100\"\nassert solution(\"7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\") == \"-1\"\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == \"2\"\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 0\\n0 100\\n-100 0\\n0 -100\") == \"100\\n\"\nassert solution(\"7\\n0 0\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3\") == \"-1\\n\"\nassert solution(\"5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1\") == \"2\\n\"\n\"\"\"\n\nfrom queue import PriorityQueue\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n100 0\\n0 100\\n-100 0\\n0 -100') == '100'\nassert solution('7\\n0 2\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3') == '-1'\nassert solution('5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1') == '2'\nassert solution('5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1') == '2'"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nLLRLLL\") == \"3 1 4 2\"\nassert solution(\"6\\nLLRLLL\") == \"1 4 6 2 5\"\n\nassert solution(\"4\\nRRLL\") == \"3 1 4 2\"\nassert solution(\"6\\nRRLL\") == \"1 4 6 2 5\"\n\nassert solution(\"4\\nRRLLLRRLL\") == \"1 4 2 5 3\"\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\nLLRLLL\") == \"1 4\\n2 5\\n6 3\\n\"\nassert solution(\"4\\nRRLL\") == \"3 1\\n4 2\\n\"\n\"\"\"\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6\nLLRLLL\n''') == '1 4\\n2 5\\n6 3\\n'\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"LLRLLL\") == \"1 4\"\nassert solution(\"RRLL\") == \"3 1\"\nassert solution(\"LLRRLLLRRLLL\") == \"1 3\"\n\"\"\""
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nRRLL\") == \"3 1\\n4 2\"\nassert solution(\"6\\nLLRLLL\") == \"1 4\\n2 5\\n6 3\"\n\"\"\"\n\nimport numpy as np\nn = np.int(input())\n\nd = {'L': 'R', 'R': 'L'}\nst = []\nfor i in range(n):\n    st.append(input()[0])\n\nrst = [[int(i==d[j])+1 for i in st] for j in range(n)]\nrst = np.array(rst)\nprint(np.sum(rst[0::2, 1::2]))\nprint(np.sum(rst[1::2, 0::2]))\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nRRLL\") == '3 1 4 2'\n\nprint(solution(input()))\n\n-----Input-----\n8\nRRLRRLLLLR\n\n-----Output-----\n4 2 5 3 1\n\nassert solution(\"8\\nRRLRRLLLLR\") == '4 2 5 3 1'\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\nLLRLLL\") == \"1 4\\n2 5\\n6 3\\n\"\nassert solution(\"4\\nRRLL\") == \"3 1\\n4 2\\n\"\nassert solution(\"7\\nRRLLRRLLRRRR\") == \"6 2\\n7 1\\n\"\nassert solution(\"8\\nRRLLRRLLRRRRLLRLRRR\") == \"7 1\\n8 2\\n\"\nassert solution(\"9\\nRRLLRRLLRRRRLLRRRRRLLLLLL\") == \"8 1\\n9 2\\n\"\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\nLLRLLL\") == \"1 4\\n2 5\\n6 3\"\nassert solution(\"4\\nRRLL\") == \"3 1\\n4 2\"\nassert solution(\"20\\nLRLRLRLRLLLRLRLRRRRL\") == \"9 10\\n11 16\\n17 1\\n18 3\\n19 14\"\nassert solution(\"4\\nRRLL\") == \"3 1\\n4 2\"\nassert solution(\"4\\nRRRR\") == \"3 1\\n4 2\"\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2\\nLL') == '1 4'\nassert solution('2\\nRL') == '2 5'\nassert solution('2\\nLR') == '1 5'\nassert solution('2\\nRR') == '4 2'\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\nRRLR''') == \"2 1\\n3 4\\n4 2\\n5 3\\n\""
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5\") == \"30\"\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5\") == \"30\"\nassert solution(\"2 3\") == \"25\"\n\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 5''') == '30'\nassert solution('''2 3''') == '25'\nassert solution('''2 2''') == '2'\nassert solution('''1 1''') == '1'\nassert solution('''100000 1''') == '100000'\n\nprint(solution(input()))\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5\") == \"30\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5\\n') == '30'\n\nassert solution('2 3\\n') == '25'"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5\") == \"30\"\n\nassert solution(\"2 3\") == \"25\"\n\nassert solution(\"3 6\") == \"40\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 5''') == '30'\nassert solution('''2 3''') == '25'\nassert solution('''1 4''') == '9'\nassert solution('''2 1''') == '9'\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5\\n') == 30\n\"\"\"\n\nimport math\n\nx, y = [int(num) for num in input().split()]\n\nprint(math.floor(-x/y + math.floor(y/2) * x))\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5\") == \"30\"\nassert solution(\"2 3\") == \"25\"\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5\") == \"30\"\nassert solution(\"2 3\") == \"25\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\n\nassert solution(\"6 1 1 1 1 3\") == \"85\"\n\nassert solution(\"1 1 1 1 1 3\") == \"3\"\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\nassert solution(\"6 1 1 1 1 3\") == \"85\"\nassert solution(\"1 1 1 1 1 3\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\nassert solution(\"6 1 1 1 1 3\") == \"85\"\nassert solution(\"1 1 1 1 1 3\") == \"3\"\n\n\"\"\"\n\n\n\nimport math"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 2 2 3\") == \"39\"\nassert solution(\"6\\n1 1 1 1 1 3\") == \"85\"\nassert solution(\"1\\n3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\nassert solution(\"6 1 1 1 1 3\") == \"85\"\nassert solution(\"1 1 1 1 1 3\") == \"3\"\n\n\"\"\"\n\nfrom math import log2\nfrom functools import reduce\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\nassert solution(\"6 1 1 1 1 3\") == \"85\"\nassert solution(\"1 1 1 1 1 3\") == \"3\"\nassert solution(\"2 1 1 1 1 3\") == \"3\"\nassert solution(\"3 1 1 1 1 3\") == \"3\"\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 2 3') == '39'\nassert solution('6 1 1 1 1 3') == '85'\nassert solution('1 1 1 1 1 3') == '3'\nassert solution('1 2 1 2 1 3') == '10'\nassert solution
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\nassert solution(\"6 1 1 1 1 3\") == \"85\"\nassert solution(\"1 1 1 1 1 3\") == \"3\"\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\nassert solution(\"6 1 1 1 1 3\") == \"85\"\n\"\"\"\n\nimport unittest\nimport collections\n\n\nclass Solution(object):\n    def compute_cnt(self, stdin: str):\n        stdin = stdin.strip()\n        n = int(stdin.split(' ')[0])\n        t = [int(s) for s in stdin.split(' ')[1:]]\n\n        # n = int(stdin[0])\n        # t = [int(s) for s in stdin[1:]]\n\n        dp = collections.defaultdict(int)\n        dp[0] = 1\n        for i in range(n):\n            dp[i + 1] = 2 ** (i + 1) - 1\n            for k in dp:\n                dp[k + t[i]] += dp[k]\n\n        return sum(dp.values())\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def testComputing(self):\n        cases = [\n            (\"4 2 2 3\", \"39\"),\n            (\"6 1 1 1 1 3\", \"85\"),\n            (\"1 1 1 1 1 3\", \"3\")\n        ]\n        for case in cases:\n            inp, exp = case\n            res = self.solution.compute_cnt(inp)\n            self.assertEqual(res, exp)\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 2 3\") == \"39\"\n\nassert solution(\"1 1 1 1 1 3\") == \"85\"\n\"\"\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"YES\") == \"YES\"\nassert solution(\"NO\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"WORD\") == \"YES\"\nassert solution(\"APRILFOOL\") == \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"JUROR\") == \"YES\"\nassert solution(\"AI\") == \"YES\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"NEAT\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"NEAT\"\n) == \"YES\"\n\nassert solution(\n\"WORD\"\n) == \"NO\"\n\nassert solution(\n\"CODER\"\n) == \"NO\"\n\nassert solution(\n\"APRILFOOL\"\n) == \"NO\"\n\nassert solution(\n\"AI\"\n) == \"YES\""
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('CODER') == 'NO'\nassert solution('WORD') == 'NO'\nassert solution('APRILFOOL') == 'NO'\nassert solution('AI') == 'YES'\nassert solution('JUROR') == 'YES'\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"JUROR\") == \"YES\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\n\"\"\""
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WORD\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\nassert solution(\"JUROR\") == \"YES\"\nassert solution(\"NEAT\") == \"YES\"\nassert solution(\"APRILFOOL\") == \"NO\"\n\"\"\""
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012\") == 1\nassert solution(\"6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021\") == 14\n\"\"\"\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012') == '1'\nassert solution('6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021') == '14'\n\"\"\"\n\n\nfrom collections import Counter\nfrom typing import List\n\n\nclass MazeSolver:\n    def __init__(self, n: int, m: int, maze: List[str], instructions: List[str]):\n        self.n = n\n        self.m = m\n        self.maze = maze\n        self.instructions = instructions\n        self.start_position = (0, 0)\n        self.end_position = (self.n - 1, self.m - 1)\n        self.moves = {0: (0, -1), 1: (-1, 0), 2: (0, 1), 3: (1, 0)}\n\n    def solve(self):\n        directions = []\n        for instruction in self.instructions:\n            for digit in instruction:\n                directions.append(int(digit))\n\n        # Convert instructions to moves\n        moves = []\n        current_position = self.start_position\n        for direction in directions:\n            move = self.moves[direction]\n            if current_position[0] + move[0] < 0 or current_position[0] + move[0] >= self.n:\n                continue\n            if current_position[1] + move[1] < 0 or current_position[1] + move[1] >= self.m:\n                continue\n            if self.maze[current_position[0] + move[0]][current_position[1] + move[1]] == '#':\n                continue\n            moves.append(self.moves[direction])\n            current_position = (current_position[0] + move[0], current_position[1] + move[1])\n\n        return moves\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 6\\n.....\\n.#....\\n.#....\\n...E..\\n333300012') == 1\nassert solution('6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021') == 14\nassert solution('5 3\\n.....\\n.S.\\n###\\n.E.') == 0\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n.....\\nS....\\n.#....\\n.#....\\n...E..\\n333300012') == 1\nassert solution('6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021') == 14\nassert solution('5 3\\n...\\n.S.\\n###\\n.E.\\n...\\n3') == 0\n\n\"\"\"\n\nimport sys\nimport collections\nfrom collections import defaultdict\nimport copy\n\nd = {\n    '0': 'U',\n    '1': 'R',\n    '2': 'D',\n    '3': 'L'\n}\n\nd_reversed = {\n    'U': '0',\n    'R': '1',\n    'D': '2',\n    'L': '3'\n}"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012\") == 1\nassert solution(\"6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021\") == 14\n\n\n-----"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012\\n\") == \"1\"\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012') == 1\nassert solution('6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021') == 14\nassert solution('5 3\\n...\\n.S.\\n###\\n.E.') == 0\n\n-----Test 1-----\n\nInput\n5 6\n.....#\nS....#\n.#....\n.#....\n...E..\n333300012\n\nOutput\n1\n\n-----Test 2-----\n\nInput\n6 6\n......\n......\n..SE..\n......\n......\n......\n01232123212302123021\n\nOutput\n14\n\n-----Test 3-----\n\nInput\n5 3\n...\n.S.\n###\n.E.\n...\n3\n\nOutput\n0\n\n-----Test 4-----\n\nInput\n6 3\n......\n......\n..SE..\n......\n......\n......\n01232123212302123021\n\nOutput\n14\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012\\n\") == \"1\"\nassert solution(\"6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021\\n\") == \"14\"\nassert solution(\"5 3\\n...\\n.S\\n###\\n.E\\n...\\n3\\n\") == \"0\"\n\n\n\"\"\"\n\nimport re\nfrom itertools import chain\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012') == '1'\nassert solution('6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021') == '14'\n\n\n\n-----Solution-----\n\n\u627e\u4e0d\u5230\u552f\u4e00\u7684\u89e3\u984c\u76ee\uff1a\n\n```python3\nclass Solution:\n    def uniqueMappings(self, m: int, n: int, s: str) -> int:\n        m, n, target = len(s), m, len(set(s))\n        nums = [i for i in range(n)]\n        mapping = {}\n        for num in s:\n            mapping[num] = nums.pop(0)\n        p = 1\n        for i in range(m):\n            p *= n - mapping[s[i]]\n        return p // math.factorial(target)"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('.S.#E..') == '1'\nassert solution('...#S..') == '0'\n\"\"\"\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 1\\n1 0\\n1 1\\n2 0\\n') == 1\n\"\"\"\n\nn = int(input())\npoints = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    points.append((x, y))\n\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if points[i][0] == points[j][0] == points[k][0] or points[i][1] == points[j][1] == points[k][1]:\n                continue\n            elif points[i][0]*(points[j][1]-points[k][1]) + points[j][0]*(points[k][1]-points[i][1]) + points[k][0]*(points[i][1]-points[j][1]) == 0:\n                ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1\\n1 0\\n1 1\\n2 0\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1\\n1 0\\n1 1\\n2 0\") == '1'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5\\n2 1 3 2 1\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5') == '4'\nassert solution('4\\n2 1 3 2 1\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5') == '0'\nassert solution('3\\n1 1\\n2 2\\n3 3') == '0'\n\n\"\"\""
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1\\n1 0\\n1 1\\n2 0') == '1'\n\"\"\"\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0 1\\n1 0\\n1 1\\n2 0') == '1'\n\"\"\"\n\n\"\"\"\nExplanation:\nFor each of the 4 pairs of points, a pair of edges is formed between the two points. If each pair is\nseparated by the vertical axis, then it is also a parallelogram. There are 4 possible pairs of edges\nbetween each pair of points. So there are 4 possible parallelograms. The number of parallelograms is\n4.\n\"\"\"\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1\\n1 0\\n1 1\\n2 0\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 1\\n1 0\\n1 1\\n2 0') == 1\nassert solution('3\\n0 1\\n1 0\\n1 1') == 0\nassert solution('4\\n0 1\\n1 0\\n2 0') == 2\nprint(\"All cases passed\")\n\n---"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n0 1\n1 0\n1 1\n2 0''') == '1'\nassert solution('''8\n0 1\n1 0\n1 1\n2 0\n2 1\n1 2\n0 1\n1 0\n''') == '0'\nassert solution('''4\n0 1\n1 0\n1 1\n2 0''') == '0'\nassert solution('''8\n0 1\n1 0\n1 1\n2 0\n2 1\n1 2\n0 1\n1 0\n''') == '0'\nassert solution('''1\n0 0\n1 0\n''') == '1'\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1\\n1 0\\n1 1\\n2 0\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('LLRL1RL1') == '1010000011'\nassert solution('L0L0LLRR9') == '1100000010'\n\"\"\"\n\nn = int(input())\n\nroom_list = ['0'] * 10\n\nfor i in range(n):\n    a, b = input().split()\n    if a == 'L':\n        room_list[int(b)] = '1'\n    else:\n        room_list[int(b)] = '0'\n\nprint(''.join(room_list))\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('LL') == '0'\nassert solution('LLR') == '0'\nassert solution('LLRL') == '0'\nassert solution('L0L0LLR') == '0'\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('LLRL1RL1') == '1010000011'\nassert solution('L0L0LLRR9') == '1100000010'\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"LLRL1RL1\") == \"1010000011\"\nassert solution(\"L0L0LLRR9\") == \"1100000010\"\n\"\"\"\n\nn = int(stdin.readline().strip())\n\ns = \"\"\n\nfor _ in range(n):\n    s += stdin.readline().strip()\n\nrooms = [0]*10\nfor e in s:\n    if e == \"L\":\n        rooms[0] += 1\n    elif e == \"R\":\n        rooms[9] += 1\n    else:\n        rooms[int(e)] += 1\n\nfor i in range(1, 10):\n    print(\"{:0{w}d}\".format(rooms[i], w=len(s)), end=\"\")\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"LLRL1RL1\") == \"1010000011\"\nassert solution(\"L0L0LLRR9\") == \"1100000010\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('LLRL1RL1') == '1010000011'\nassert solution('L0L0LLRR9') == '1100000010'\n\nsolution(stdin)\n'''\n\nimport sys\nsys.stdin = open(\"input.txt\")\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"LLRL1RL1\") == \"1010000011\"\nassert solution(\"L0L0LLRR9\") == \"1100000010\"\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected_result\n\"\"\"\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"LLRL1RL1\") == \"1010000011\"\n\"\"\""
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''8\nLLRL1RL1\n''') == '1010000011'\nassert solution('''9\nL0L0LLRR9\n''') == '1100000010'\nassert solution('''4\n0L0\n0L1\n1L0\n0L1\n''') == '1011101010'\nassert solution('''7\n0LLLLLL\n''') == '1011101010'\nassert solution('''9\nL0L0LLRR9\n''') == '1100000010'\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(())\") == \"1\"\nassert solution(\"()()\") == \"3\"\nassert solution(\")(\") == \"0\"\nassert solution(\"((\"):\n    \"1\"\nassert solution(\"())()((\"):\n    \"0\"\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '5'\nassert solution('6') == '12'\nassert solution('8') == '46'\nassert solution('10') == '138'\n\n\"\"\"\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('()') == '0'\nassert solution('((()'\n'''\n\nn = int(input())\na = ['#' * (2 * n + 1)]\nb = ['#' * (2 * n + 1)]"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '1'\nassert solution('()()') == '2'\nassert solution('(()())') == '3'\nassert solution('()()(())') == '3'\nassert solution('(()(()))') == '2'\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"3\"\n\nassert solution(\"3\") == \"9\"\n\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"9\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '1'\nassert solution('()') == '1'\nassert solution('(()') == '2'\nassert solution('(()(()(') == '3'\nassert solution('(((((') == '9'"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(()\") == 2\nassert solution(\"()()\") == 2\nassert solution(\"(()\") == 3\nassert solution(\")(\") == 2\nassert solution(\"((())\") == 3\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"9\"\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3\") == \"White\"\nassert solution(\"5\\n3 5\") == \"Black\"\nassert solution(\"2\\n2 2\") == \"Black\"\n\n-----BETTER SOLUTION-----\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n2 3''') == 'White'\nassert solution('''5\n3 5''') == 'Black'\nassert solution('''2\n2 2''') == 'Black'\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\\n2 3\"\n) == 'White'\nassert solution(\n    \"5\\n3 5\"\n) == 'Black'\nassert solution(\n    \"2\\n2 2\"\n) == 'Black'\nassert solution(\n    \"2\\n1 1\"\n) == 'White'\n\"\"\""
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"White\"\nassert solution(\"5 3\") == \"Black\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nx, y = map(int, sys.stdin.readline().strip().split())"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\\n2 3\") == 'White'\nassert solution(\"5 5\\n4 4\") == 'Black'\nassert solution(\"2 2\\n2 3\") == 'Black'\nassert solution(\"2 3\\n1 1\") == 'White'\nassert solution(\"2 3\\n5 5\") == 'White'\n\"\"\"\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 3 5\") == \"Black\"\nassert solution(\"3 5 2 4\") == \"Black\"\nassert solution(\"4 4 1 2\") == \"White\"\nassert solution(\"2 2 1 2\") == \"White\"\nassert solution(\"1 1 2 2\") == \"White\"\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3\") == \"White\"\nassert solution(\"5\\n3 5\") == \"Black\"\nassert solution(\"2\\n2 2\") == \"Black\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nx, y = list(map(int, sys.stdin.readline().rstrip().split()))"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3') == 'White'\nassert solution('5\\n3 5') == 'Black'\nassert solution('2\\n2 2') == 'Black'\n\"\"\"\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n2 3\n''') == 'White'\nassert solution('''5\n3 5\n''') == 'Black'\nassert solution('''2\n2 2\n''') == 'Black'"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(4,2,3) == \"White\"\nassert solution(5,3,5) == \"Black\"\nassert solution(2,2,2) == \"Black\"\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == \"2\"\nassert solution(\"4 2\\n-5 20 -3 0\") == \"4\"\nassert solution(\"10 6\\n2 -5 1 3 0 0 -4 -3 1 0\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n-5 20 -3 0\\n') == '2'\nassert solution('4 2\\n-5 20 -3 0\\n') == '4'\nassert solution('10 6\\n2 -5 1 3 0 0 -4 -3 1 0\\n') == '3'\n\n\n'''\n\nfrom collections import deque"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == \"2\"\nassert solution(\"4 2\\n-5 20 -3 0\") == \"4\"\nassert solution(\"10 6\\n2 -5 1 3 0 0 -4 -3 1 0\") == \"3\"\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == \"2\"\nassert solution(\"4 2\\n-5 20 -3 0\") == \"4\"\nassert solution(\"10 6\\n2 -5 1 3 0 0 -4 -3 1 0\") == \"3\"\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == '2'\nassert solution(\"4 2\\n-5 20 -3 0\") == '4'\nassert solution(\"10 6\\n2 -5 1 3 0 0 -4 -3 1 0\") == '3'\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == 2\nassert solution(\"4 2\\n-5 20 -3 0\") == 4"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == 2\nassert solution(\"4 2\\n-5 20 -3 0\") == 4\nassert solution(\"10 6\\n2 -5 1 3 0 0 -4 -3 1 0\") == 3\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n-5 20 -3 0') == '2'\nassert solution('4 2\\n-5 20 -3 0') == '4'\nassert solution('10 6\\n2 -5 1 3 0 0 -4 -3 1 0') == '3'\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == \"2\"\nassert solution(\"4 2\\n-5 20 -3 0\") == \"4\"\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\nt = [int(i) for i in input().split()]\n\nc = [0] * (k + 1)\nfor i in range(n):\n    if t[i] >= 0:\n        c[0] += 1\n    else:\n        c[min(k, abs(t[i]))] += 1\n\nfor i in range(1, k + 1):\n    for j in range(i - 1, 0, -1):\n        if c[j] == 0:\n            c[i] = min(c[i], c[j])\n\nc[0] = -1\nprint(c.index(max(c)))\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n-5 20 -3 0\") == \"2\"\nassert solution(\"4 2\\n-5 20 -3 0\") == \"4\"\nassert solution(\"10 6\\n2 -5 1 3 0 0 -4 -3 1 0\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n2 1 1\") == 2\n\"\"\"\n\nA, B = map(int, input().split())\nx, y, z = map(int, input().split())\n\ni = 0\nwhile A >= 2 * x + y and B >= 3 * z:\n    x, y, z = 2 * x + y, y, 3 * z\n    i += 1\n\nprint(i)"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n2 1 1') == '2'\nassert solution('3 9\\n1 1 3') == '1'\nassert solution('12345678 87654321\\n43043751 1000000000 53798715') == '2147483648'\n\"\"\"\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n2 1 1\") == \"2\"\nassert solution(\"3 9\\n1 1 3\") == \"1\"\nassert solution(\"12345678 87654321\\n43043751 1000000000 53798715\") == \"2147483648\"\n\n\"\"\"\n\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n2 1 1') == 2\n\"\"\"\n\na, b = map(int, input().split())\n\nx, y, z = map(int, input().split())\n\n\"\"\"\na = 3\nb = 4\nx = 2\ny = 1\nz = 1\n\"\"\"\n\nimport math"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"3 9\") == \"1\"\nassert solution(\"12345678 87654321 43043751 1000000000 53798715\") == \"2147483648\"\n\"\"\"\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"2\"\n\n\"\"\"\n\nfrom typing import List, NamedTuple, Set, Dict, Optional, Tuple, Callable\nfrom collections import defaultdict\nfrom itertools import product, chain\nimport time\n\nclass Case(NamedTuple):\n    a: int\n    b: int\n    c: int\n    d: int\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        a, b, c, d = map(int, stdin.split())\n\n        a_c = d\n        b_c = c - d\n        c_c = c - b\n        d_c = a - d\n        \n        while True:\n            if a_c == 0 and b_c == 0 and c_c == 0 and d_c == 0:\n                break\n            if a_c < 0 or b_c < 0 or c_c < 0 or d_c < 0:\n                return \"impossible\"\n            \n            if b_c > a_c:\n                b_c -= a_c\n                a_c = 0\n            elif a_c > b_c:\n                a_c -= b_c\n                b_c = 0\n            elif c_c > b_c:\n                c_c -= b_c\n                b_c = 0\n            elif d_c > a_c:\n                d_c -= a_c\n                a_c = 0\n            else:\n                a_c = 0\n                b_c = 0\n                c_c = 0\n                d_c = 0\n        \n        return str(a_c + b_c + c_c + d_c)"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n2 1 1') == '2'\nassert solution('3 9\\n1 1 3') == '1'\nassert solution('12345678 87654321\\n43043751 1000000000 53798715') == '2147483648'\n\"\"\"\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n2 1 1') == '2'\nassert solution('3 9\\n1 1 3') == '1'\nassert solution('12345678 87654321\\n43043751 1000000000 53798715') == '2147483648'\n\"\"\"\n\na, b = [int(i) for i in input().split()]\nx, y, z = [int(i) for i in input().split()]\nn = 0\nwhile a >= x and b >= y and x + y + z >= n * (n + 1) / 2:\n    n += 1\nprint(n - 1)\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"3 9\") == \"1\"\nassert solution(\"12345678 87654321\") == \"2147483648\"\nassert solution(\"100000 3 9 100\") == \"1\"\nassert solution(\"2 3 1\") == \"2\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n2 1 1') == '2'"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 1 2\\n1 1') == 1.5\n\"\"\"\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\\n\") == \"5.0000000000\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 5 1 2\n1 2\n3 1\n4 3\n3 4\n1 4''') == '5.0000000000'\nassert solution('''5 5 1 2\n1 2\n3 1\n4 3\n3 4\n1 4''') == '5.0'\nassert solution('''4 3 1 2\n2 2\n2 3\n3 2\n2 4\n2 4\n''') == '2.0'\n\nassert solution('''6 1 2 3\n1 3\n1 4\n3 3\n4 2\n4 4\n''') == '3.5'\nassert solution('''9 2 4 4\n6 2\n5 4\n6 4\n8 2\n8 4\n''') == '8.5'"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\\n\") == \"5.0\"\n\"\"\""
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n-----End-Piece-----\n'''\n\nimport math"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4\\n\") == \"5.0000000000\"\n\n\n-----Hint-----\n\nNo two consecutive vertices of the polygon are equal. Thus, after one move we can always define one point which lies on the straight line from the start point to the end point.\n\nPlease consider examples of how the bus moves and the polygon of pedestrians, where it is possible to have more than one answer for a given input.\n\n\"\"\"\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 5 1 2\n1 2\n3 1\n4 3\n3 4\n1 4''') == '5.0000000000'\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(float(input()))\n\n\"\"\"\n\nn, w, v, u = map(int, input().split())\npoints = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    points.append((x, y))"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5 1 2\\n1 2\\n3 1\\n4 3\\n3 4\\n1 4') == '5.0000000000'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str([1, 2, 3, 4, 3, 4, 1])) == 5\nassert solution(str([1, 2, 3, 4, 3, 4, 1, 1, 2])) == 4.5\n\"\"\"\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1\\n\") == \"-1\"\n\nassert solution(\"3\\n1 1 1\\n\") == \"-1\"\n\nassert solution(\"1\\n1\\n\") == \"1 2\"\n\nassert solution(\"2\\n1 2\\n\") == \"1 2\"\n\n\n\"\"\""
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1 1\\n') == '-1'\nassert solution('4\\n1 2 3 4\\n') == '1 2'\nassert solution('4\\n1 2 3 4\\n') == '1 2'\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n1') == '-1'\nassert solution('2\\n1 2') == '-1'\nassert solution('4\\n1 2 3 4') == '1 2'\nassert solution('3\\n1 1 1') == '-1'\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\") == \"-1\"\nassert solution(\"2\\n1 2\") == \"-1\"\nassert solution(\"4\\n1 2 3 4\") == \"1 2\"\nassert solution(\"1\\n3 4 2 1\") == \"2 1\"\n\"\"\""
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 1\") == \"1 2\"\nassert solution(\"3\\n1 1 1\") == \"-1\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1 2\"\nassert solution(\"2\\n1 2\") == \"-1\"\nassert solution(\"3\\n1 1 1\") == \"-1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1 2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"-1\"\nassert solution(\"6\\n1 1 1 2 3 4 5\") == \"1 2\"\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 1') == '-1'\nassert solution('1 2 3 4') == '1 2'\nassert solution('1 2 3 4') == '1 2'\nassert solution('1 2 3 4') == '1 2'\n\"\"\""
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '1 2'\nassert solution('3 2 1 4') == '1 2'\nassert solution('4 3 2 1') == '1 2'\nassert solution('4 3 2 2') == '1 2'\nassert solution('4 3 2 2 1') == '1 2'\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"1 2\"\nassert solution(\"1 1 1\") == \"1 1\"\nassert solution(\"1 1 1 1 1\") == \"-1\"\nassert solution(\"1 2 3 4\") == \"1 2\"\nassert solution(\"1 1 2 3 4\") == \"1 1\"\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\") == \"20 15\"\nassert solution(\"8 2 4\") == \"35 32\"\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 2 3''') == '20 15'\nassert solution('''8 2 4''') == '35 32'\n\nprint('Hooray!')\n\n\"\"\"\n\n\nimport unittest"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3') == '20 15'\nassert solution('8 2 4') == '35 32'\nassert solution('1 2 3') == '1 0'\n\"\"\"\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 3') == '20 15'\nassert solution('8 2 4') == '35 32'\n\n\"\"\""
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\") == '20 15'\n\"\"\"\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 3') == '20 15'\nassert solution('8 2 4') == '35 32'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 3') == '20 15'\nassert solution('8 2 4') == '35 32'"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\") == \"20 15\"\nassert solution(\"8 2 4\") == \"35 32\"\nassert solution(\"6 2 4\") == \"15 16\"\nassert solution(\"4 2 4\") == \"5 5\"\nassert solution(\"8 2 4\") == \"35 32\"\n\"\"\"\n\nimport math\n\nn, b, p = [int(s) for s in input().split()]\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3\") == \"20 15\"\nassert solution(\"8 2 4\") == \"35 32\"\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\") == \"20 15\"\nassert solution(\"8 2 4\") == \"35 32\"\nassert solution(\"1 1 1\") == \"0 0\"\nassert solution(\"2 1 1\") == \"0 1\"\nassert solution(\"2 2 1\") == \"0 1\"\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"0 0 1 1\"\n\"\"\"\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\") == \"0 1 1 2 3\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0\") == \"0 0 1 1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0\") == '0 0 1 1'\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0\") == \"0 0 1 1\"\n\"\"\""
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 0\") == \"0 0 1 1\"\n\"\"\"\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0\") == \"0 0 1 1\"\nassert solution(\"1 1\") == \"0 0 1 1\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom collections import Counter"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n0 1\\n0 2\") == \"0 0 1 1\"\nassert solution(\"4 10\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\\n0 8\\n0 9\") == \"0 0 1 1\"\nassert solution(\"5 3\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\\n0 8\\n0 9\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\") == \"0 0 1 1\"\nassert solution(\"17 5\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\\n0 8\\n0 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\") == \"0 0 1 1\"\nassert solution(\"18 5\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n0 6\\n0 7\\n0 8\\n0 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\") == \"0 0 1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 0') == '0 0 1 1'\nassert solution('2 1') == '0 0 0 1 1'\nassert solution('3 1') == '0 0 0 0 1 1'\nassert solution('3 2') == '0 0 0 0 0 1 1'\nassert solution('3 3') == '0 0 0 0 0 0 1 1'\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 0') == '0 0 1 1'\n\"\"\"\n\n\"\"\"\nThe solution is simple. We can iterate through each bit in the number.\nFor each bit, if it's even, we will do an xor on every number.\n\"\"\"\nimport sys\n\nM = int(sys.stdin.readline())\nK = int(sys.stdin.readline())\n\na = 0\nfor i in range(2**M):\n    for j in range(M):\n        if (i >> j) & 1:\n            a = a ^ (i ^ (i >> 1)) ^ (i ^ (i >> 2)) ^ (i ^ (i >> 3)) ^ (i ^ (i >> 4)) ^ (i ^ (i >> 5)) ^ (i ^ (i >> 6))\n            if a == K:\n                print(a, end=\" \")\n                break\n    if a == K:\n        break"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\\n2\\n\") == \"YES\"\nassert solution(\"1\\n2\\n1\\n\") == \"NO\""
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n1\\n2') == 'YES'\nassert solution('2\\n1\\n2') == 'NO'\n\"\"\"\nimport sys\nimport itertools"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n2\\n3') == 'YES'\nassert solution('2\\n1\\n2') == 'NO'\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1\\n1\\n2\\n') == 'YES'\nassert solution('2\\n1\\n2\\n') == 'NO'\n\nassert solution('4\\n1\\n2\\n3\\n1\\n') == 'NO'\nassert solution('4\\n1\\n3\\n1\\n1\\n') == 'NO'\nassert solution('4\\n1\\n2\\n2\\n1\\n') == 'NO'\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1\\n1\\n2\\n2') == 'YES'\nassert solution('3\\n1\\n2\\n3') == 'NO'\nassert solution('2\\n1\\n2') == 'NO'\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n1\\n2\\n\") == 'YES'\nassert solution(\"2\\n1\\n2\\n\") == 'NO'\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n1\\n2\\n\") == \"YES\"\nassert solution(\"2\\n1\\n2\\n\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n1\\n2\\n\") == \"YES\"\nassert solution(\"2\\n1\\n2\\n\") == \"NO\"\n\n\"\"\"\n\n\"\"\"\nExplanation:\n\nWe have three players: Alex, Bob and Carl. Each of them play against each other. We have the following game tree"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n1\\n2\\n') == 'YES'\nassert solution('2\\n1\\n2\\n') == 'NO'\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1\\n2\\n\") == \"YES\"\nassert solution(\"1\\n2\\n3\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 0 0 0 4\"\n) == \"1\"\nassert solution(\n    \"1 1 1 4 4\"\n) == \"3\"\nassert solution(\n    \"4 5 6 5 6\"\n) == \"0\"\n\n[End of Description]:\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0 0 0 4\") == \"1\"\nassert solution(\"1 1 1 4 4\") == \"3\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(answer)\n\n\"\"\"\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 0 0 0 4') == '1'\nassert solution('1 1 1 4 4') == '3'\nassert solution('4 5 6 5 6') == '0'\n\"\"\"\nfrom typing import List\nimport math"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 1 4 4\\n') == '3'\nassert solution('4 5 6 5 6\\n') == '0'\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0 0 0 4\") == 1\nassert solution(\"1 1 1 4 4\") == 3\nassert solution(\"4 5 6 5 6\") == 0\n\"\"\"\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 0 0 0 4\") == \"1\"\nassert solution(\"1 1 1 4 4\") == \"3\"\nassert solution(\"4 5 6 5 6\") == \"0\"\nassert solution(\"2 0 0 0 1\") == \"0\"\nassert solution(\"1 1 1 4 4\") == \"0\"\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 0 0 0 4') == '1'\n\nassert solution('1 1 1 4 4') == '3'\n\nassert solution('4 5 6 5 6') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 0 0 0 4\") == \"1\"\nassert solution(\"1 1 1 4 4\") == \"3\"\nassert solution(\"4 5 6 5 6\") == \"0\"\nassert solution(\"1 1 2 1 2\") == \"0\"\nassert solution(\"5 1 1 2 2\") == \"4\"\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0 0 0 4\") == \"1\"\nassert solution(\"1 1 1 4 4\") == \"3\"\nassert solution(\"4 5 6 5 6\") == \"0\"\n\"\"\""
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"1\"\nassert solution(\"2 1 3\") == \"1\"\n\nassert solution(\"3 2 1\") == \"2\"\nassert solution(\"2 1 3\") == \"2\"\n\nassert solution(\"3 2 1\") == \"2\"\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 1\"\n) == \"1\"\n\nassert solution(\n    \"3 1 2\"\n) == \"-1\"\n\nassert solution(\n    \"2 1\"\n) == \"1\"\n\nassert solution(\n    \"2 2\"\n) == \"0\"\n\nassert solution(\n    \"4 1 2 3\"\n) == \"1\""
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution(\"2 1 3\") == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1 2\") == \"1\"\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1 2\") == \"1\"\nassert solution(\"2 3 1\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2, 1, 2) == 1\nassert solution(3, 1, 3, 2) == -1\n\"\"\"\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == '1'\nassert solution(\"3 1 2\") == '-1'\nassert solution(\"3 2 1\") == '0'\n\"\"\""
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 1 2\") == \"1\"\nassert solution(\"2 1\") == \"0\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2\n1 2''') == '1'\n\n\"\"\""
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\n\nassert solution(\"3 1 2\") == \"0\"\n\nassert solution(\"3 2 1\") == \"-1\"\n\nassert solution(\"5 1 2 3 4\") == \"2\"\n\nprint('All tests passed.')\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 11\\n2 9 1 3 18 1 4\\n4 35\\n11 9 10 7\\n1 8\\n5\") == \"2\\n1\\n0\"\n\"\"\"\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 11\\n2 9 1 3 18 1 4\\n4 35\") == \"2\\n1\\n0\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 9 1 3 18 1 4\") == \"2\"\nassert solution(\"4 35\") == \"0\"\nassert solution(\"11 9 10 7\") == \"1\"\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n4 35\n11 9 10 7\n1 8\n5''') == '2'\nassert solution('''2\n11 9\n10 7''') == '1'\nassert solution('''1\n11 9''') == '0'\n\n'''\nassert solution('''3\n7 11\n2 9 1 3 18 1 4\n4 35\n11 9 10 7\n1 8\n5''') == '2'\n'''\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 11\\n2 9 1 3 18 1 4\\n4 35') == '2'\nassert solution('7 11\\n2 9 1 3 18 1 4\\n4 35') == '1'\nassert solution('7 11\\n2 9 1 3 18 1 4\\n4 35') == '0'\n\"\"\""
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == result\nprint(solution(stdin))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\\n1 2 3 4\") == 0\nassert solution(\"1 10\\n1\") == 0\nassert solution(\"1 1\\n1\") == 0\nassert solution(\"1 10\\n11\") == 1\nassert solution(\"5 10\\n10 1 1 1 1\") == 0\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 11\\n2 9 1 3 18 1 4\") == \"2\"\nassert solution(\"4 35\\n11 9 10 7\") == \"1\"\nassert solution(\"1 8\\n5\") == \"0\"\n\"\"\"\n\nimport collections\n\nt = int(input())\n\nfor _ in range(t):\n    n, s = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    q = collections.deque()\n    for i in a:\n        if i < s:\n            q.append(i)\n        else:\n            ans += 1\n    while len(q) > 0:\n        if q[0] < s:\n            ans += 1\n            q.popleft()\n        else:\n            q.popleft()\n    print(ans)\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 11\\n2 9 1 3 18 1 4\\n4 35\\n11 9 10 7\\n1 8\\n5\\n\") == \"2\\n1\\n0\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"4\"\nassert solution(\"55\") == \"10\"\nassert solution(\"56\") == \"1\""
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"4\"\nassert solution(\"56\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"4\"\nassert solution(\"55\") == \"10\"\nassert solution(\"56\") == \"1\"\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"5\") == 2\nassert solution(\"10\") == 4\nassert solution(\"56\") == 1\nassert solution(\"100\") == 4\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"5\") == 2\nassert solution(\"10\") == 4\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(1500)"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '2'\nassert solution('10') == '4'\nassert solution('55') == '10'\nassert solution('56') == '1'\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '2'\nassert solution('10') == '4'\nassert solution('55') == '10'\nassert solution('56') == '1'"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"4\"\nassert solution(\"55\") == \"10\"\nassert solution(\"56\") == \"1\"\n\nprint(\"Passed\")\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"5\") == 2\nassert solution(\"10\") == 4\nassert solution(\"55\") == 10\n\"\"\"\n\nfrom math import log2, ceil"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n2\\n4\\n2\\n3\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3\\n2 3 0\\n3 1 0\\n') == '2'\nassert solution('4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0\\n') == '5'\n\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == '0'\nassert solution('0\\n1') == '1'\nassert solution('1\\n2\\n2\\n2\\n1') == '1'\nassert solution('1\\n2\\n3\\n4') == '1'\nassert solution('0\\n1\\n1\\n1\\n0') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 4\\n1 4 0\") == \"2\"\nassert solution(\"4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0\") == \"5\"\n"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0 1 1\\n1 0 4\\n1 4 0') == '2'\nassert solution('4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0') == '5'\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nimport heapq\nimport functools"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 1 2 3 4\\n1 0 4 5 6\\n2 4 0 6 7\\n3 5 6 0 7\\n4 3 7 6 0\") == \"2\"\nassert solution(\"3\\n0 1 2\\n1 0 2\\n2 0\") == \"0\"\nassert solution(\"3\\n0 1 2\\n1 0 2\\n2 0\") == \"1\"\nassert solution(\"3\\n0 1 2\\n1 0 2\\n2 0\") == \"2\"\nassert solution(\"3\\n0 1 2\\n1 0 2\\n2 0\") == \"2\"\n"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 4\\n1 4 0\") == \"2\"\nassert solution(\"4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0\") == \"5\"\nassert solution(\"4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0\") == \"5\"\n\n\n-----Hint-----\nThe Floyd\u2013Warshall algorithm can help you solve this problem.\nhttps://en.wikipedia.org/wiki/Floyd\u2013Warshall_algorithm\n\"\"\"\n\nN = int(input())\n\ngraph = {i: {j: int(length) for j, length in enumerate(input().split()) if length!= \"0\"} for i in range(N)}"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\n\n-------\n\na = int(input())\nfor i in range(a):\n    n, m = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = list(set(l))\n    ans = 1\n    for j in l:\n        for k in l:\n            if j + k > m:\n                break\n            elif j + k == m:\n                ans = max(ans, j+k)\n                break\n    print(ans)\n\n\na = int(input())\nfor i in range(a):\n    n, m = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = list(set(l))\n    ans = 1\n    for j in l:\n        for k in l:\n            if j + k > m:\n                break\n            elif j + k == m:\n                ans = max(ans, j+k)\n                break\n    print(ans)\n\na = int(input())\nfor i in range(a):\n    n, m = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = list(set(l))\n    ans = 1\n    for j in l:\n        for k in l:\n            if j + k > m:\n                break\n            elif j + k == m:\n                ans = max(ans, j+k)\n                break\n    print(ans)"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 4\\n1 4 0\\n\") == \"2\"\nassert solution(\"4\\n0 1 2 3\\n1 0 4 5\\n2 4 0 6\\n3 5 6 0\\n\") == \"5\"\n"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(\"foo.in\").read()) == \"bar\"\nassert solution(open(\"bar.in\").read()) == \"foo\"\n\"\"\"\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 1 0') == '3'\nassert solution('6\\n2 0 1 3 2 0') == '6'\nassert solution('3\\n0 2 2') == '-1'"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 1 0\\n\") == \"3\\n1 2\\n2 4\\n2 3\\n\"\nassert solution(\"6\\n2 0 1 3 2 0\\n\") == \"6\\n1 3\\n3 4\\n1 2\\n4 5\\n5 6\\n4 6\\n\"\nassert solution(\"3\\n0 2 2\\n\") == \"-1\\n\"\nassert solution(\"6\\n2 0 1 3 2 0\\n\") == \"6\\n1 3\\n3 4\\n1 2\\n4 5\\n5 6\\n4 6\\n\"\nassert solution(\"3\\n0 2 2\\n\") == \"-1\\n\"\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 1 0\\n\") == \"3\\n1 2\\n2 4\\n2 3\\n\"\nassert solution(\"6\\n2 0 1 3 2 0\\n\") == \"6\\n1 3\\n3 4\\n1 2\\n4 5\\n5 6\\n4 6\\n\"\nassert solution(\"3\\n0 2 2\\n\") == \"-1\\n\"\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 1 0') == '3\\n1 2\\n2 4\\n2 3\\n3 4'\nassert solution('6\\n2 0 1 3 2 0') == '6\\n1 3\\n3 4\\n1 2\\n4 5\\n5 6\\n4 6'\n\"\"\"\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 1 0\") == \"3\\n1 2\\n2 4\\n2 3\\n\"\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 1 0') == '3'\nassert solution('6\\n2 0 1 3 2 0') == '6'\nassert solution('3\\n0 2 2') == '-1'\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 1 0\") == \"3\"\nassert solution(\"6\\n2 0 1 3 2 0\") == \"6\"\nassert solution(\"3\\n0 2 2\") == \"-1\"\nassert solution(\"7\\n0 1 2 3 4 5 6\") == \"6\"\nassert solution(\"10\\n0 1 2 3 4 5 6 7 8 9 10\") == \"10\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\nans = []\nd = {}\n\nfor i in range(n):\n    if a[i] > 0:\n        d[i] = [a[i], i]\n        cnt += 1\n    else:\n        ans.append([i, a[i]])"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 1 0\") == \"3\"\nassert solution(\"6\\n2 0 1 3 2 0\") == \"6\"\nassert solution(\"3\\n0 2 2\") == \"-1\"\n\nassert solution(\"4\\n2 0 1 1\") == \"5\"\nassert solution(\"6\\n2 0 1 3 2 0\") == \"6\"\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 1 0\\n\") == \"3\\n1 2\\n2 4\\n2 3\"\nassert solution(\"6\\n2 0 1 3 2 0\\n\") == \"6\\n1 3\\n3 4\\n1 2\\n4 5\\n5 6\\n4 6\"\nassert solution(\"3\\n0 2 2\\n\") == \"-1\"\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 1 0') == '3\\n1 2\\n2 4\\n2 3'\nassert solution('6\\n2 0 1 3 2 0') == '6\\n1 3\\n3 4\\n1 2\\n4 5\\n5 6\\n4 6'\nassert solution('3\\n0 2 2') == '-1'\n\"\"\"\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n5 2 4 1') == '3'\nassert solution('3 20\\n199 41 299') == '19'\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n5 2 4 1') == '3'\nassert solution('3 20\\n199 41 299') == '19'\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430. \u041d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0439\u0442\u0435 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043d\u043e \u0441\u0440\u0430\u0437\u0443 \u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0432 \u043d\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b, \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430, \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 10000 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b, \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c, \u043d\u0435 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0441\u0443\u043c\u043c\u0443 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439.\n\nSample Input 1:\n\naaabbbbccccccc\nSample Output 1:\n\naabcccccc\nSample Input 2:\n\nababac\nSample Output 2:\n\nabacabac\nSample Input 3:\n\nab\nSample Output 3:\n\nab\n\"\"\""
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n5 2 4 1') == '3'\nassert solution('3 20\\n199 41 299') == '19'\n\"\"\""
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n5 2 4 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"4 11\") == \"4\"\nassert solution(\"3 20\") == \"3\"\n\"\"\""
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n5 2 4 1\") == \"3\"\nassert solution(\"3 20\\n199 41 299\") == \"19\"\nassert solution(\"3 30\\n199 41 299\") == \"8\"\nassert solution(\"3 10\\n5 4 7 2\") == \"4\"\nassert solution(\"3 100\\n1 2 3\") == \"3\"\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n5 2 4 1\\n\") == \"3\"\nassert solution(\"3 20\\n199 41 299\\n\") == \"19\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4 4\n5 2 4 1\"\"\") == '3'\nassert solution(\"\"\"3 20\n199 41 299\"\"\") == '19'\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n5 2 4 1\") == \"3\"\nassert solution(\"3 20\\n199 41 299\") == \"19\"\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 4\n5 2 4 1\n''') == '3'\nassert solution('''3 20\n199 41 299\n''') == '19'\nassert solution('''4 7\n5 2 4 1\n''') == '5'\nassert solution('''5 3\n5 2 4 1\n''') == '5'\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 -3\\n0 3 3 0\") == \"4.2426406871\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 -9 0 3 3 -1\") == \"6.1622776602\"\nassert solution(\"1 1 -3\") == \"4.2426406871\"\n\"\"\"\n\nimport sys\nimport math\n\nassert len(sys.argv) == 2\n\ndata = sys.argv[1].split()\n\na = int(data[0])\nb = int(data[1])\nc = int(data[2])\nx1 = int(data[3])\ny1 = int(data[4])\nx2 = int(data[5])\ny2 = int(data[6])"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 1 -3\n0 3 3 0''') == '4.2426406871'\nassert solution('''3 1 -9\n0 3 3 -1''') == '6.1622776602'\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 -3\\n0 3 3 0\") == '4.2426406871'\n\"\"\"\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 -3\\n0 3 3 0\\n') == '4.2426406871'\n\n-----Test Input-----\n\n1 1 -3\n0 3 3 0\n\n1 2 -9\n0 3 3 -1\n\n-----Test Output-----\n\n4.2426406871\n6.1622776602\n\n-----Summary-----\n\nMaintain two sets of points:\n\n1. The first set of points is the Diagonal Avenue.\n\n2. The second set of points is the set of points P1, P2.\n\nFor every point in the Diagonal Avenue, there is two points in P1, P2 (if they are not the same). There is only one point in P1, P2 (if they are not the same).\n\nAll point in P1 are in the Diagonal Avenue.\n\nAll point in P2 are not in the Diagonal Avenue.\n\nAll points in P1, P2 are not the same.\n\nFor every point in P1, there is exactly one point in P2 with the same point (if they are not the same).\n\nAll point in P2, but at most one point in P1 have the same point (if they are not the same).\n\n1. We can only travel along the diagonal.\n\n2. Every point in P1 is in the Diagonal Avenue, but at least one of them is not in the Diagonal Avenue.\n\n3. Every point in P2 is not in the Diagonal Avenue, but at most one of them is in the Diagonal Avenue.\n\n4. P1 and P2 are different.\n\n5. We can travel from point P1 to point P2 iff all points in P1 have the same point in P2.\n\n6. We can travel from point P1 to point P2 iff all points in P2 have the same point in P1.\n\n7. We can travel from point P1 to point P2 iff point P1 is in the Diagonal Avenue and point P2 is not in the Diagonal Avenue.\n\n8. We can travel from point P1 to point P2 iff point P2 is not in the Diagonal Avenue and point P1 is in the Diagonal Avenue.\n\n9. We can travel from point P1 to point P2 iff point P1 is not in the Diagonal Avenue and point P2 is in the Diagonal Avenue.\n\n10. We can travel from point P1 to point P2 iff point P1 is in the Diagonal Avenue and point P2 is in the Diagonal Avenue.\n\n11. We can travel from point P1 to point P2 iff point P1 is in the Diagonal Avenue and point P2 is not in the Diagonal Avenue.\n\n12. We can travel from point P1 to point P2 iff point P2 is in the Diagonal Avenue and point P1 is not in the Diagonal Avenue.\n\n13. We can travel from point P1 to point P2 iff point P1 is not in the Diagonal Avenue and point P2 is in the Diagonal Avenue.\n\n14. We can travel from point P1 to point P2 iff point P1 is not in the Diagonal Avenue and point P2 is not in the Diagonal Avenue.\n\n15. We can travel from point P1 to point P2 iff point P1 is in the Diagonal Avenue and point P2 is in the Diagonal Avenue.\n\n\"\"\""
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 -9 0 3 3 -1') == '6.1622776602'\n\"\"\"\n\nimport math\n\na, b, c = map(int, input().split())\nx1, y1, x2, y2 = map(int, input().split())\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-9 3 3 -1\") == '6.1622776602'\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 -3\\n0 3 3 0\") == \"4.2426406871\"\nassert solution(\"3 1 -9\\n0 3 3 -1\") == \"6.1622776602\"\n\"\"\"\n\nimport math\n\n\nclass Avenue:\n    def __init__(self, a, b, c):\n        self.a = int(a)\n        self.b = int(b)\n        self.c = int(c)\n\n    def __str__(self):\n        return \"Avenue(a={}, b={}, c={})\".format(self.a, self.b, self.c)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __eq__(self, other):\n        return self.a == other.a and self.b == other.b and self.c == other.c\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __lt__(self, other):\n        return self.a < other.a and self.b < other.b and self.c < other.c\n\n    def __gt__(self, other):\n        return self.a > other.a and self.b > other.b and self.c > other.c\n\n    def __ge__(self, other):\n        return self.__gt__(other) or self.__eq__(other)\n\n    def __le__(self, other):\n        return self.__lt__(other) or self.__eq__(other)\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 -3\\n0 3 3 0\\n\") == \"4.2426406871\"\n\"\"\"\n\n\nimport collections\nimport itertools\nimport math\nimport sys\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456789101112131415\") == \"3\"\nassert solution(\"1234567891011121314151\") == \"0\"\nassert solution(\"1234567891011121314151617181920\") == \"5\"\nassert solution(\"1234567891011121314151\") == \"0\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123456789101112131415\") == \"2\"\nassert solution(\"123456789101112131415\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\") == '3'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\n511\\n512\\n513\\n514\\n515\\n516\\n517\\n518\\n519\\n520\\n521\\n522\\n523\\n524\\n525\\n526\\n527\\n528\\n529\\n530\\n531\\n532\\n533\\n534\\n535\\n536\\n537\\n538\\n539\\n540\\n541\\n542\\n543\\n544\\n545\\n546\\n547\\n548\\n549\\n550\\n551\\n552\\n553\\n554\\n555\\n556\\n557\\n558\\n559\\n560\\n561\\n562\\n563\\n564\\n565\\n566\\n567\\n568\\n569\\n570\\n571\\n572\\n573\\n574\\n575\\n576\\n577\\n578\\n579\\"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123456789101112131415\") == \"2\"\nassert solution(\"123456789101112131416\") == \"5\"\nassert solution(\"123456789101112131417\") == \"1\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123456789101112131415\") == \"3\"\nassert solution(\"1357911\") == \"7\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123456789101112131415\") == '3'\nassert solution(\"11\") == '0'\nprint('Test passed')\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '3'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '1'\nassert solution('123456789101112131415\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20') == '0'\nassert solution('123456789101112131415\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30') == '7'\nassert solution('123456789101112131415\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50') == '1'\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n837\n838\n839\n840\n841\n842\n843\n844\n845\n846\n847\n848\n849\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100') == '0'\nassert solution('1011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798999100') == '1'\nassert solution
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123456789101112131415\") == \"5\"\nassert solution(\"123456789101112131415101112131415\") == \"0\"\nassert solution(\"1234567891011121314151011121314151011121314151011112131415101112131415101112131415101112131415101111213141510111213141510111213141510111121314151011121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111121314151011121314151011112131415101111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111121314151011121314151011112131415101111213141510111213141510111121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415101112131415101111213141510111213141510111121314151011121314151011112131415"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"21 5\") == \"2\"\nassert solution(\"9435152 272\") == \"282\"\nassert solution(\"10 10\") == \"infinity\"\n\"\"\""
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"21 5\") == \"2\"\nassert solution(\"9435152 272\") == \"282\"\nassert solution(\"10 10\") == \"infinity\"\n"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('21 5') == '2'\nassert solution('9435152 272') == '282'\nassert solution('10 10') == 'infinity'\n"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 3\") == \"infinity\"\nassert solution(\"10 10\") == \"infinity\"\nassert solution(\"10 1\") == \"1\"\nassert solution(\"10 2\") == \"2\"\nassert solution(\"10 3\") == \"2\""
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('21 5') == '2'\nassert solution('9435152 272') == '282'\nassert solution('10 10') == 'infinity'\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('21 5') == 2\nassert solution('9435152 272') == 282\n\nimport sys\nimport math\nfrom collections import defaultdict\n\n_, b = map(int, sys.stdin.readline().split())\n\nq = defaultdict(int)\ni = 1\nwhile q[i] < b:\n    q[i * i % b] += 1\n    i += 1"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"21 5\") == 2\nassert solution(\"9435152 272\") == 282\nassert solution(\"10 10\") == \"infinity\"\n\n\"\"\"\n"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"21 5\") == \"2\"\n"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"21 5\") == 2\nassert solution(\"9435152 272\") == 282\n\nprint(\"Passed all tests.\")"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"21 5\") == \"2\"\nassert solution(\"9435152 272\") == \"282\"\n\"\"\"\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n') == '6'\n\nassert solution('5 3\\n') == '6'\n\nassert solution('25 13\\n') == '26'\n\nassert solution('25 13\\n') == '26'\n\nassert solution('26 13\\n') == '39'"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"6\"\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\nres = n+1\n\nwhile res % k!= 0:\n    res += 1\n\nprint(res)\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3') == '6'\n\"\"\"\n\nn, k = map(int, input().split())\nprint(n+k-1)\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == '6'\nassert solution(\"25 13\") == '26'\nassert solution(\"26 13\") == '39'\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5 3') == '6'\nassert solution('5 3\\n') == '6'\nassert solution('5 3\\n') == '6'\nassert solution('5 3\\n1') == '6'\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3') == '6'\nassert solution('25 13') == '26'\nassert solution('26 13') == '39'\n\"\"\"\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3') == '6'\nprint(solution('5 3'))\nassert solution('25 13') == '26'\nprint(solution('25 13'))\nassert solution('26 13') == '39'\nprint(solution('26 13'))\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3') == '6'\nassert solution('25 13') == '26'\nassert solution('26 13') == '39'"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(input())\nprint(solution(str(input())))\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('preceq') == 'NO'\nassert solution('mail') == 'cfmailru'\n\"\"\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"aabc\") == \"abc\"\nassert solution(\"aab\") == \"b\"\nassert solution(\"aaaaa\") == \"a\"\nassert solution(\"abab\") == \"ab\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacabad\") == \"abacaba\", \"First\"\nassert solution(\"aaaaa\") == \"aaaaa\", \"Second\"\nassert solution(\"abacabaabacaba\") == \"abacab\", \"Third\"\nassert solution(\"aabbbabac\") == \"aabbabac\", \"Fourth\"\nassert solution(\"aabbccddeee\") == \"eeeeee\", \"Fifth\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"preceq\") == \"NO\"\nassert solution(\"cheburek\") == \"NO\"\nassert solution(\"mail\") == \"cfmailru\"\n\"\"\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"mail\") == \"cfmailru\"\nassert solution(\"ai\") == \"cfmailru\"\nassert solution(\"lru\") == \"cfmailru\"\nassert solution(\"cf\") == \"cfmailru\"\n\nassert solution(\"kek\") == \"NO\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\nmail\nai\nlru\ncf\") == \"cfmailru\"\n\nassert solution(\"3\nkek\npreceq\ncheburek\") == \"NO\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nmail\\nai\\nlru\\ncf') == 'cfmailru'\nassert solution('3\\nkek\\npreceq\\ncheburek') == 'NO'\n\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacab\") == \"abacab\"\nassert solution(\"aaaaa\") == \"aaaaa\"\nassert solution(\"a\") == \"a\"\nassert solution(\"abcdefg\") == \"gfedcba\"\nassert solution(\"qwertyuiopasdfghjklzxcvbnm\") == \"qwertyuiopasdfghjklzxcvbnm\"\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nmail\\nai\\nlru\\ncf') == 'cfmailru'\nassert solution('3\\nkek\\npreceq\\ncheburek') == 'NO'\nassert solution('4\\nmail\\nai\\nlru\\ncf') == 'cfmailru'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"mail\") == \"cfmailru\"\n\nassert solution(\"ai\") == \"cfmailru\"\n\nassert solution(\"lru\") == \"cfmailru\"\n\nassert solution(\"cf\") == \"cfmailru\"\n\nassert solution(\"\") == \"NO\""
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 8 3\") == '3'\nassert solution(\"1 1 3\") == '-1'\nassert solution(\"1 8 1\") == '3'\n\n\"\"\"\nimport sys\nfrom math import ceil"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 3\\n10 8 9 10\") == \"3\"\nassert solution(\"1 1 3\\n10\") == \"-1\"\nassert solution(\"2 10 1\\n5 8\") == \"1\"\n\"\"\"\n\nm, t, r = [int(i) for i in input().split()]\nw = [int(i) for i in input().split()]\n\nw.sort()\n\nstart, end = 1, m * t + 1\n\nwhile start < end:\n    mid = (start + end) // 2\n\n    if can_reach(w, mid, r):\n        end = mid\n    else:\n        start = mid + 1\n\nprint(start - 1)\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 3\\n10\") == \"3\"\nassert solution(\"2 10 1\\n5 8\") == \"1\"\nassert solution(\"1 1 3\\n10\") == \"3\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nm, t, r = [int(i) for i in sys.argv[1].split()]\nassert (m >= 1) and (m <= 300)\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input_1) == output_1\n\nassert solution(input_2) == output_2\n\nassert solution(input_3) == output_3\n\nassert solution(input_4) == output_4\n\nassert solution(input_5) == output_5"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 8 3\\n10\") == \"3\"\n\nassert solution(\"1 1 3\\n10\") == \"1\"\n\nassert solution(\"1 1 3\\n5 8\") == \"1\"\n\"\"\"\n\nm, t, r = map(int, input().split())\nw = list(map(int, input().split()))\n\nw.sort()\n\nlight = 0\ncount = 0\n\nfor i in range(m):\n    while w[i] > light + 1 and w[i] > t + light:\n        light += 1\n        count += 1\n\n    if w[i] > light and w[i] > t + light:\n        light = w[i]\n        count += 1"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 8 3\\n5 8\") == \"3\"\nassert solution(\"1 1 3\\n10\") == \"-1\"\nassert solution(\"2 10 1\\n5 8\") == \"1\"\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10 3\") == '2'\n\nassert solution(\"2 10 1\") == '-1'\nassert solution(\"1 1 3\") == '3'"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 3\") == \"3\"\nassert solution(\"1 1 3\") == \"1\"\nassert solution(\"2 10 1\") == \"1\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 8 3\\n10\") == \"3\"\nassert solution(\"2 10 1\\n5 8\") == \"1\"\nassert solution(\"1 1 3\\n10\") == \"-1\"\nassert solution(\"1 2 3\\n5 8\") == \"1\"\nassert solution(\"1 2 3\\n5 8\") == \"1\"\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 8 3\\n10\") == \"3\"\nassert solution(\"2 10 1\\n5 8\") == \"1\"\nassert solution(\"1 1 3\\n10\") == \"-1\"\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\\n1\\n1\\n1\") == 'YES'\nassert solution(\"3\\n1\\n1\\n1\") == 'NO'\nassert solution(\"4\\n1\\n2\\n2\\n2\") == 'YES'\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1\\n1\\n\") == \"YES\"\nassert solution(\"2\\n1\\n2\\n\") == \"NO\"\nassert solution(\"2\\n1\\n1\\n\") == \"YES\"\nassert solution(\"1\\n1\\n\") == \"YES\"\nassert solution(\"1\\n1\\n1\\n\") == \"YES\"\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1\\n1\\n1\\n') == 'YES'\nassert solution('4\\n1\\n2\\n3\\n') == 'NO'\nassert solution('4\\n1\\n2\\n3\\n') == 'YES'\nassert solution('3\\n1\\n1\\n') == 'YES'\nassert solution('3\\n1\\n1\\n') == 'YES'\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n1\\n1\") == \"YES\"\nassert solution(\"4\\n1\\n2\\n2\\n3\") == \"NO\"\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\") == 'YES'\nassert solution(\"1\\n2\\n3\\n3\") == 'NO'\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n1\\n1\\n\") == 'YES'\nassert solution(\"4\\n1\\n1\\n3\\n\") == 'NO'\nassert solution(\"4\\n1\\n2\\n2\\n\") == 'YES'\nassert solution(\"4\\n1\\n3\\n3\\n\") == 'NO'\nassert solution(\"4\\n1\\n1\\n1\\n\") == 'YES'\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"0\") == \"NO\"\nassert solution(\"2\") == \"YES\"\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1\\n1\") == \"YES\"\nassert solution(\"3\\n1\\n1\\n1\") == \"NO\"\nassert solution(\"4\\n1\\n2\\n2\\n3\") == \"YES\"\n\n\"\"\"\n\nimport statistics"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n1\n1\n1\n1''') == 'YES'\nassert solution('''4\n1\n2\n2\n3''') == 'NO'\nassert solution('''4\n1\n2\n3\n4''') == 'YES'\nassert solution('''3\n1\n1\n1\n3''') == 'YES'\nassert solution('''4\n1\n2\n3\n4''') == 'YES'\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n\") == \"YES\"\nassert solution(\"1\\n1\\n1\\n2\\n\") == \"NO\"\n\nassert solution(\"4\\n1\\n1\\n1\\n\") == \"YES\"\nassert solution(\"1\\n1\\n1\\n2\\n\") == \"NO\"\nassert solution(\"3\\n1\\n1\\n1\\n\") == \"YES\"\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\") == \"6\\n4\\n1\\n3\\n10\"\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\") == '6\\n4\\n1\\n3\\n10\\n'\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n') == '1'\nassert solution('1 2 4\\n') == '2'\nassert solution('1 2 3\\n') == '1'\nassert solution('1 2 4\\n') == '2'\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5') == '6\\n4\\n1\\n3\\n10\\n'\nprint('Test passes\\n')\n\n\"\"\""
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5') == '6\\n4\\n1\\n3\\n10'\n\"\"\"\n\nfrom __future__ import annotations"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\") == '6\\n4\\n1\\n3\\n10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\") == \"6\\n4\\n1\\n3\\n10\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"6 5 4\") == \"\"\nassert solution(\"10 10 10\") == \"10\"\nassert solution(\"3 10 2\") == \"6\"\nassert solution(\"2 4 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 2\\n5 10 4\\n3 10 1\\n1 2 3\\n4 6 5\") == \"6\\n4\\n1\\n3\\n10\\n\"\n\"\"\"\n\nimport sys\n\nn = int(input())\n\nfor i in range(n):\n    a, b, c = map(int, input().split())\n    if (b - a) % c == 0:\n        print(b - a - 1)\n    else:\n        print(b - a)\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0\\n1\") == \"0.5\"\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0\\n1\\n1\\n\") == 0.666667\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0\\n1\\n1') == '0.666667'\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0\\n1\\n1') == '0.666667'\n\"\"\""
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0\\n1\\n1') == 0.5\n\"\"\"\n\nimport sys\n\nA, B, C = [int(x) for x in sys.stdin.readline().split()]\n\nprint(A * (B + C) / 2 + (A + B) * C / 2)\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == 0.5\nassert solution('9') == 0.111111\nassert solution('10') == 0.1\nassert solution('1\\n9') == 0.111111\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0\\n1\\n1\") == \"0.666667\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0\\n1\\n1') == '0.666667'\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('0') == 0\nassert solution('1') == 1\nassert solution('1\\n0') == 1/2\nassert solution('1\\n1') == 1\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n3\\n\") == '0.6666666666666666'\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"..B.B.B.\") == \"No\"\nassert solution(\".C.....\") == \"Yes\"\nassert solution(\"...A.B.B...\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('.BAC.') == 'Yes'\nassert solution('AA..CB') == 'No'"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"..B.C...\") == 'Yes'\nassert solution(\"....A....\") == 'No'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".BAC.\") == \"Yes\"\nassert solution(\"AA..CB\") == \"No\""
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"B.C..\") == \"Yes\"\nassert solution(\"AA.B.C.\") == \"No\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AA..CB\") == \"No\"\nassert solution(\"A.B.C.A\") == \"Yes\"\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"...BAC.\") == \"Yes\"\nassert solution(\"...BAB..\") == \"No\"\nassert solution(\"C..B..A..\") == \"No\"\nassert solution(\"A..B...C.\") == \"No\"\nassert solution(\".....\") == \"Yes\"\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"..B..\") == \"Yes\"\nassert solution(\"ABACABAC\") == \"Yes\"\nassert solution(\"AC.CB..BAC\") == \"No\"\nassert solution(\"..B.C.C..\") == \"No\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"..BBB.A.C...\") == \"No\"\nassert solution(\"...A.....\") == \"Yes\"\nassert solution(\"BB.A.C.A..\") == \"No\"\nassert solution(\"A.B.A.B.C\") == \"No\"\nassert solution(\"....B.B.A.A.....\") == \"No\"\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AA..CB\") == \"No\"\nassert solution(\"A.B.C.\") == \"Yes\"\nassert solution(\"..BB..C.\") == \"No\"\nassert solution(\"..B.BC..\") == \"Yes\"\nassert solution(\"..BBB.C.\") == \"No\"\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0\\n1 1\\n2 2\") == \"5\"\nassert solution(\"0 0\\n2 0\\n1 1\") == \"4\"\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\\n2 0\\n1 1\\n\") == \"4\"\nassert solution(\"0 0\\n1 1\\n2 2\\n\") == \"5\"\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0\\n2 0\\n1 1\") == \"5\"\nassert solution(\"0 0\\n1 1\\n2 2\") == \"4\"\nassert solution(\"0 0\\n2 0\\n2 0\") == \"2\"\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0\\n1 1\\n2 2') == '5'\nassert solution('0 0\\n2 0\\n1 1') == '4'\n\"\"\"\nimport math\nfrom collections import defaultdict\nfrom itertools import product\nfrom typing import List, Tuple, Union\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0\\n1 1\\n2 2\") == \"5\"\nassert solution(\"0 0\\n2 0\\n1 1\") == \"4\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0\\n2 0\\n1 1\") == \"4\"\nassert solution(\"0 0\\n2 0\\n1 1\") == \"4\"\nassert solution(\"0 0\\n1 0\\n2 0\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\\n1 1\\n2 2\") == '5\\n0 0\\n1 0\\n1 1\\n1 2\\n2 2'\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '0 0\\n2 0\\n1 1'\n) == '4'\nassert solution(\n    '0 0\\n1 1'\n) == '5'\n\n\"\"\"\n\nfrom itertools import product\nfrom math import prod\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0\\n1 1\\n2 2') == '5'\nassert solution('0 0\\n2 0\\n1 1') == '4'\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0\\n1 1\\n2 2\") == \"5\"\nassert solution(\"0 0\\n2 0\\n1 1\") == \"4\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"5\"\n\"\"\"\nimport math"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == '5'\nassert solution('3 2') == '3'\nassert solution('10 2') == '44'\n\n\"\"\"\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"5\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import permutations, combinations\nfrom typing import List"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == 5\n\"\"\""
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"5\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"12 5\") == \"5\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == 5\n\"\"\"\n\nfrom __future__ import annotations\n\n__author__ = \"Prafull\"\n\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def count(self, m: int, n: int, k: int) -> int:\n        \"\"\"\n        Time Complexity: O(m * n)\n        Space Complexity: O(1)\n        \"\"\"\n\n        @cache\n        def f(m: int, n: int, k: int) -> int:\n            if m == 0:\n                return 0\n            if m == 1:\n                return 1\n            if n == 0:\n                return 0\n            if n == 1:\n                return 1\n            if k == 0:\n                return 1\n            return (\n                f(m - 1, n, k - 1)\n                + f(m, n - 1, k - 1)\n                + f(m - 1, n - 1, k - 1)\n            ) % (10 ** 9 + 7)\n\n        return f(m, n, k)\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2') == '5'\nassert solution('3 2') == '3'\nassert solution('2 2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2') == '5'\n\"\"\"\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == 5\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\nassert solution(\"5 5 5 6\") == \"1 0 1\""
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\nassert solution(\"5 5 5 6\") == \"1 0 1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\">x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>w.>x.>y.>z.>a.>b.>c.>d.>e.>f.>g.>h.>i.>j.>k.>l.>m.>n.>o.>p.>q.>r.>s.>t.>u.>v.>"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\nassert solution(\"5 5 5 6\") == \"1 0 1\"\n\n'''\n\nimport sys"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\nassert solution(\"5 5 5 6\") == \"1 0 1\"\nassert solution(\"5 4 5 6\") == \"1 0 1\"\nassert solution(\"4 5 5 6\") == \"1 0 1\"\nassert solution(\"4 5 1 6\") == \"2 1 3\"\n\n\"\"\""
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\nassert solution(\"5 5 5 6\") == \"1 0 1\"\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 1 6\") == '2 1 3'\nassert solution(\"5 5 5 6\") == '1 0 1'\n\nprint(\"Success!\")\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 1 6\") == \"2 1 3\"\nassert solution(\"5 5 5 6\") == \"1 0 1\"\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 8\n\"\"\"\nimport math"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 8\nprint(solution('10'))\n\n\"\"\""
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 8\nassert solution('10') == 1024\n\"\"\""
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 6\nassert solution('4') == 24\nassert solution('5') == 120\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 8\n\n\"\"\"\nimport sys"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"10\") == \"1024\"\n\"\"\""
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '8'\nassert solution('10') == '1024'\nassert solution('25') == '33554431'\n\nprint('Hooray!')\n\nsolution()\n\"\"\"\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 8\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"8\"\nprint(\"Test 1: Ok\")\n\nassert solution(\"10\") == \"1024\"\nprint(\"Test 2: Ok\")\n\n\"\"\"\n\nimport sys\n\na = int(sys.stdin.readline())\n\nb = a + 1\nc = a + 2\nd = a + 3\ne = a + 4\nf = a + 5\ng = a + 6\nh = a + 7\ni = a + 8\nj = a + 9\nk = a + 10\nl = a + 11\nm = a + 12\nn = a + 13\no = a + 14\np = a + 15\nq = a + 16\nr = a + 17\ns = a + 18\nt = a + 19\nu = a + 20\nv = a + 21\nw = a + 22\nx = a + 23\ny = a + 24\nz = a + 25\n\nprint(b)\nprint(c)\nprint(d)\nprint(e)\nprint(f)\nprint(g)\nprint(h)\nprint(i)\nprint(j)\nprint(k)\nprint(l)\nprint(m)\nprint(n)\nprint(o)\nprint(p)\nprint(q)\nprint(r)\nprint(s)\nprint(t)\nprint(u)\nprint(v)\nprint(w)\nprint(x)\nprint(y)\nprint(z)\n\nprint(1 * a + 2 * b + 3 * c + 4 * d + 5 * e + 6 * f + 7 * g + 8 * h + 9 * i + 10 * j + 11 * k + 12 * l + 13 * m + 14 * n + 15 * o + 16 * p + 17 * q + 18 * r + 19 * s + 20 * t + 21 * u + 22 * v + 23 * w + 24 * x + 25 * y + 26 * z)\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == 8\nprint(solution('10'))\n\n\n\n\n--------------------------------------"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 5 7\") == \"3 4 5\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 5 7\") == \"3 4 5\"\nassert solution(\"1 5 5 7\") == \"5 5 5\"\nassert solution(\"100000 200000 300000 400000\") == \"182690 214748 300999\"\nassert solution(\"1 1 977539810 977539810\") == \"1 977539810 977539810\"\nassert solution(\"917546028 917546028 917546028\") == \"917546028 917546028 917546028\"\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 5 7\") == \"3 4 5\"\nassert solution(\"1 5 5 7\") == \"5 5 5\"\nassert solution(\"100000 200000 300000 400000\") == \"182690 214748 300999\"\nassert solution(\"1 1 977539810 977539810\") == \"1 977539810 977539810\"\n\n\"\"\"\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 5 7\\n1 5 5 7') == '3 4 5\\n5 5 5'\nassert solution('100000 200000 300000 400000\\n1 1 977539810 977539810') == '182690 214748 300999\\n1 977539810 977539810'\n\n\n'''"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 5 7\") == \"3 4 5\"\nassert solution(\"1 5 5 7\") == \"5 5 5\"\nassert solution(\"100000 200000 300000 400000\") == \"182690 214748 300999\"\nassert solution(\"1 1 977539810 977539810\") == \"977539810 977539810\"\n\n\n\"\"\"\n\nimport math\nimport time\nimport datetime"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 5 7\") == \"3 4 5\"\nassert solution(\"1 5 5 7\") == \"5 5 5\"\nassert solution(\"100000 200000 300000 400000\") == \"182690 214748 300999\"\nassert solution(\"1 1 977539810 977539810\") == \"977539810 977539810\"\n\n\"\"\"\n\n\nfrom itertools import combinations\nfrom math import sqrt\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n1 3 5 7\n1 5 5 7\n100000 200000 300000 400000\n1 1 977539810 977539810''') == '3 4 5'\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 5 7\") == \"3 4 5\"\nassert solution(\"1 5 5 7\") == \"5 5 5\"\nassert solution(\"100000 200000 300000 400000\") == \"182690 214748 300999\"\nassert solution(\"1 1 977539810 977539810\") == \"977539810 977539810\"\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 5 7\") == '3 4 5'\nassert solution(\"1 5 5 7\") == '5 5 5'\nassert solution(\"100000 200000 300000 400000\") == '182690 214748 300999'\nassert solution(\"1 1 977539810 977539810\") == '977539810 977539810'\n\n\n-----Hints-----\n\nHint #1\n\nFor the first test case, the answer is \"3 4 5\" (and it's possible to choose them in any order).\n\nHint #2\n\nTo find the second answer, you may choose $x=1$, $y=2$, and $z=1$, and then you can choose any one from $x=2$, $y=3$, and $z=2$.\n\"\"\"\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 5 7\") == \"3 4 5\"\nassert solution(\"1 5 5 7\") == \"5 5 5\"\nassert solution(\"100000 200000 300000 400000\") == \"182690 214748 300999\"\nassert solution(\"1 1 977539810 977539810\") == \"977539810 977539810\"\n\n\"\"\""
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n2 5\\n7 9\\n10 11\") == 10\nassert solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\") == 18\nassert solution(\"1 1000000000\\n1 1000000000\") == 1999999999\n\nprint(\"The numbers are: \", solution(\"3 4\\n2 5\\n7 9\\n10 11\"))\nprint(\"The numbers are: \", solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\"))\nprint(\"The numbers are: \", solution(\"1 1000000000\\n1 1000000000\"))"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n2 5\\n7 9\\n10 11\\n\") == \"10\"\n\nassert solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\\n\") == \"18\"\n\nassert solution(\"1 1000000000\\n1 1000000000\\n\") == \"1999999999\"\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 4\"\n) == \"10\"\n\"\"\"\n\nn, h = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n\nair_flows = []\nfor i in range(n):\n    air_flows.append([int(x) for x in stdin.split(\"\\n\")[i].split(\" \")])\n\nair_flows.sort()\n\ndp = [0 for i in range(h + 1)]\ndp[0] = 1\nfor air_flow in air_flows:\n    if air_flow[0] <= h:\n        dp[air_flow[0]] += 1\n    if air_flow[1] <= h:\n        dp[air_flow[1]] += 1\n\nfor i in range(1, h + 1):\n    dp[i] = max(dp[i], dp[i - 1])\n\nprint(h - dp[h])"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n2 5\\n7 9\") == \"10\"\nassert solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\") == \"18\"\nassert solution(\"1 1000000000\\n1 1000000000\") == \"1999999999\"\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n2 5\\n7 9\\n10 11\\n\") == 10\nassert solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\\n\") == 18\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom itertools import product\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n2 5\\n7 9\\n10 11\") == 10\nassert solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\") == 18\nassert solution(\"1 1000000000\\n1 1000000000\") == 1999999999\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 4\n2 5\n7 9\n10 11''') == '10'\nassert solution('''5 10\n5 7\n11 12\n16 20\n25 26\n30 33''') == '18'\nassert solution('''1 1000000000\n1 1000000000''') == '1999999999'\n\nassert solution('''1 1000000000\n1 1000000000''') == '1999999999'\n\nprint(solution(stdin))"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n2 5\\n7 9\") == \"10\"\nassert solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\") == \"18\"\nassert solution(\"1 1000000000\\n1 1000000000\") == \"1999999999\"\n\nimport os, sys, re, math\nfrom typing import List, Dict, Tuple, Generator, Iterable, Set, Callable, Iterator, Optional, Pattern\nfrom collections import defaultdict, deque, namedtuple, Counter, OrderedDict\nfrom functools import lru_cache\nfrom itertools import permutations, combinations, product, accumulate, combinations_with_replacement\nfrom itertools import groupby, accumulate, chain, compress\nfrom numpy import array, vectorize, argmax, asarray, equal, matmul, zeros, arange, multiply, subtract, clip, sum, exp, delete, concatenate, append\nfrom operator import itemgetter as ig\nfrom bisect import bisect, bisect_left, bisect_right\nfrom math import ceil, floor, sqrt, gcd, log, factorial, pi, sin, cos, tan, degrees, radians, acos, asin, atan, atan2, hypot\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, printable, whitespace, punctuation, digits\nfrom fractions import Fraction\nfrom decimal import Decimal\nfrom functools import reduce\nimport math\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n2 5\\n7 9\\n10 11\") == \"10\"\nassert solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\") == \"18\"\nassert solution(\"1 1000000000\\n1 1000000000\") == \"1999999999\"\n"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n2 5\\n7 9\") == \"10\"\n\nassert solution(\"5 10\\n5 7\\n11 12\\n16 20\\n25 26\\n30 33\") == \"18\"\n\nassert solution(\"1 1000000000\\n1 1000000000\") == \"1999999999\"\n\n\"\"\""
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n100 98') == 'YES'\nassert solution('2\\n42 32') == 'YES'\nassert solution('4\\n1000000000000000000 1') == 'YES'\nassert solution('4\\n41 40') == 'YES'\nassert solution('2\\n1000000000000000000 1') == 'NO'\n\n\"\"\""
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n100 98') == 'YES'\nassert solution('4\\n42 32') == 'YES'\nassert solution('4\\n1000000000000000000 1') == 'YES'\nassert solution('4\\n41 40') == 'YES'\nassert solution('4\\n') == 'NO'\n"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n100 98\n42 32\n1000000000000000000 1\n41 40''') == 'YES'\nassert solution('''4\n100 98\n42 32\n1000000000000000000 1\n41 40''') == 'YES'\nassert solution('''4\n100 98\n42 32\n1000000000000000000 1\n41 40''') == 'YES'\nassert solution('''4\n100 98\n42 32\n1000000000000000000 1\n41 40''') == 'YES'\nassert solution('''4\n100 98\n42 32\n1000000000000000000 1\n41 40''') == 'YES'\n"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 98\") == \"YES\"\nassert solution(\"42 32\") == \"YES\"\nassert solution(\"1000000000000000000 1\") == \"YES\"\nassert solution(\"41 40\") == \"NO\"\nassert solution(\"2 2\") == \"NO\"\n"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40\") == 'YES\\nYES\\nYES\\nNO'\n\"\"\""
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 98\\n42 32\\n1000000000000000000 1\\n41 40\") == \"YES\\nYES\\nYES\\nNO\"\nprint('Test pass.')\n\n-----Time complexity-----\n\nThe time complexity is O(t * log(x)), where t is the number of test cases and x is the biggest number of the test cases.\n\n-----Space complexity-----\n\nThe space complexity is O(1).\n\"\"\"\n\nimport math\nimport random"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n100 98\\n42 32\\n1000000000000000000 1\") == 'YES\\nYES\\nYES\\nNO'\n\n----\n\nfrom math import gcd"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40\\n\") == \"YES\\nYES\\nYES\\nNO\"\n\n\"\"\""
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40') == 'YES'\nassert solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40') == 'YES'\nassert solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40') == 'YES'\nassert solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40') == 'YES'\nassert solution('4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40') == 'YES'\n"
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 98\\n42 32\\n1000000000000000000 1\\n41 40') == 'YES\\nYES\\nYES\\nNO'\n\n\"\"\""
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"199 200\"\nassert solution(\"4 4\") == \"412 413\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"6 2\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"199 200\"\n\"\"\"\nimport collections\nimport math\n\na, b = (int(x) for x in stdin.split())\nd = collections.deque([(a // math.pow(10, i), i) for i in range(1, 10)])\nans = []\n\nwhile d:\n    x, i = d.popleft()\n    if x + 1 < b:\n        ans.append((x + 1, i))\n    else:\n        break"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"199 200\"\nassert solution(\"4 4\") == \"412 413\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"6 2\") == \"-1\"\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"199 200\"\nassert solution(\"4 4\") == \"412 413\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"6 2\") == \"-1\"\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"199 200\"\nassert solution(\"4 4\") == \"412 413\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"6 2\") == \"-1\"\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2') == '199 200'\nassert solution('4 4') == '412 413'\nassert solution('5 7') == '-1'\nassert solution('6 2') == '-1'\n\nprint(solution(stdin))\n\n\n\n\n\n\"\"\""
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"199 200\"\nassert solution(\"4 4\") == \"412 413\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"6 2\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(1, 2) == \"199 200\"\nassert solution(4, 4) == \"412 413\"\nassert solution(5, 7) == \"-1\"\nassert solution(6, 2) == \"-1\"\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"199 200\"\nassert solution(\"4 4\") == \"412 413\"\nassert solution(\"5 7\") == \"-1\"\nassert solution(\"6 2\") == \"-1\"\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"42\") == \"2\"\nassert solution(\"169\") == \"1\"\n\"\"\"\n\n\"\"\"\nUnderstand: \n\n1. create a string of digits from the input string\n2. check if the string is within the length range 1 <= t <= 10000\n3. check if the string only contains 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n4. if so, count the amount of instances of t (return them)\n\nPlan:\n1. create a string of digits\n2. check the length of string is between 1 and 10000\n3. check if the string only contains 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n4. if so, count the amount of instances of t (return them)\n5. if not, print out how many instances of t there are and return an empty list\n\nExecute: \n\n1. create a string of digits\n2. check the length of string is between 1 and 10000\n3. check if the string only contains 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n4. if so, count the amount of instances of t (return them)\n5. if not, print out how many instances of t there are and return an empty list\n\nReflect: \n\n1.\n\n\"\"\""
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"6\"\nassert solution(\"8\") == \"8\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"42\") == 2\n\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\nsequence = sys.stdin.readline().rstrip()\n\nn = len(sequence)\n\ndic = {}\n\nfor i in range(10):\n    dic[str(i)] = sequence.count(str(i))\n\nmaxCount = max(dic.values())\n\nresult = 0\n\nfor i in range(10):\n    if dic[str(i)] == maxCount:\n        result += 1\n\nprint(result)\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"42\") == 2\nassert solution(\"169\") == 1\nassert solution(\"12118999\") == 1\n\n\n\nSolution:\nimport collections"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12118999') == '1'\nassert solution('42') == '2'\n\"\"\"\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12118999') == '1'\n\"\"\"\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"42\") == \"2\"\nassert solution(\"169\") == \"1\"\nassert solution(\"149834566\") == \"1\"\nassert solution(\"17\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('42') == 2\n\"\"\"\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"42\") == 2\nassert solution(\"169\") == 1\n\"\"\"\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"42\") == \"2\"\nassert solution(\"169\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3\\ncaa\\ncbb\") == \"YES\"\nassert solution(\"2\\n3\\ncba\\ncba\") == \"NO\"\nassert solution(\"3\\n3\\nccab\\ncbac\") == \"YES\"\nassert solution(\"4\\n4\\nccab\\cbac\\bca\\acbcc\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"caa\") == \"YES\"\nassert solution(\"cbb\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"ccab\") == \"YES\"\n"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('caa') == 'YES'\nassert solution('cbb') == 'YES'\nassert solution('cba') == 'NO'\nassert solution('c') == 'NO'\nassert solution('cab') == 'YES'\n"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_cases[0]) == test_cases[1]\n\n'''\n\ntest_cases = int(input())\nfor i in range(test_cases):\n    l = int(input())\n    s = [input() for j in range(l)]\n    for i in s:\n        if i in s[1:] and i!= s[0]:\n            print('NO')\n            break\n    else:\n        print('YES')"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('aaa') == 'a'\nassert solution('aab') == 'a'\n"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n2\ncaa\ncbb\n3\ncba\ncba\ncbb\n4\nccab\ncbac\nbca\nacbcc\n4\nacb\ncaf\nc\ncbafc''') == 'YES'\n\n\"\"\""
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"caa\") == \"YES\"\nassert solution(\"cbb\") == \"YES\"\nassert solution(\"cba\") == \"NO\"\nassert solution(\"acbcc\") == \"NO\"\n\nassert solution(\"acb\") == \"YES\"\n"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\n\nassert solution(\"1 2 3 4 5\", \"2 1 3 4 5\") == \"2 1 3 4 5\"\n\nassert solution(\"1 2 3 4 5\", \"2 1 4 5 3\") == \"2 1 4 5 3\"\n\nassert solution(\"1 2 3 4 5\", \"2 3 1 4 5\") == \"2 3 1 4 5\"\n\nassert solution(\"1 2 3 4 5\", \"2 4 3 1 5\") == \"2 4 3 1 5\""
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\ncbb\\ncbb\\n\") == \"NO\"\nassert solution(\"2\\ncbb\\ncba\\n\") == \"YES\"\nassert solution(\"4\\nccab\\ncbac\\nbca\\nacbcc\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ccab\") == \"NO\"\nassert solution(\"cba\") == \"YES\"\nassert solution(\"caa\") == \"YES\"\nassert solution(\"cbafc\") == \"YES\"\n\"\"\"\n\nimport sys\nimport string\nimport itertools"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('720') == \"O-|-OOOO\\nO-|OO-OO\\n-O|OO-OO\"\n\nassert solution('13') == \"O-|OOO-O\\nO-|O-OOO\"\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"O-|OO\"\nassert solution(\"13\") == \"O-|OOO\"\nassert solution(\"720\") == \"O-|-OOOO\"\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"O-|OO-OO\"\n\nassert solution(\"13\") == \"O-|OOO-O\\nO-|O-OOO\"\n\nassert solution(\"720\") == \"O-|-OOOO\\nO-|OO-OO\\n-O|OO-OO\"\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"720\") == \"O-|-OOOO\\nO-|OO-OO\\n-O|OO-OO\"\n\"\"\""
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('720') == '-O|-OOOO'\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"720\") == \"O-|-OOOO\"\nassert solution(\"13\") == \"O-|OOO-O\"\nassert solution(\"2\") == \"O-|OO-OO\"\n\"\"\"\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"O-|OO\"\nassert solution(\"13\") == \"O-|OOO-O\"\nassert solution(\"720\") == \"O-|-OOOO\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nfor i in range(n, 0, -1):\n    n -= i\n    x = chr(ord('O') + n % 5)\n    n //= 5\n    print(x + '|' + x * n if n else x + '|' + x * n[:-1])\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('720') == 'O-|-OOOO'\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2) == 'O-|OO-O'\nassert solution(13) == 'O-|OOO-O'\nassert solution(720) == 'O-|-OOOO'\nassert solution(0) == ''\nassert solution(1) == 'O-'\n\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"O-|OO-OO\"\nassert solution(\"13\") == \"O-|OOO-O\\nO-|O-OOO\"\nassert solution(\"720\") == \"O-|-OOOO\\nO-|OO-OO\\n-O|OO-OO\"\n\"\"\""
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n1 2 4 5 7\") == \"YES\\n1 2 4 5 7\"\n\nassert solution(\"3 6\\n1 2 5\") == \"YES\\n1 2 5\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == \"YES\\n1 2 4 5 7\"\nassert solution(\"3 6\") == \"YES\\n1 2 5\"\nassert solution(\"2 7\") == \"NO\"\nassert solution(\"1 0\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5') == 'YES\\n1 2 4 5 7'\nassert solution('3 6') == 'YES\\n1 2 5'\n\n'''\n\nimport sys"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"YES\\n1 2 4 5 7\"\nassert solution(\"3 6\") == \"YES\\n1 2 5\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6') == 'YES\\n1 2 5'"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n\") == \"YES\\n1 2 4 5 7\"\nassert solution(\"3 6\\n\") == \"YES\\n1 2 5\"\n"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"YES\\n1 2 4 5 7\"\nassert solution(\"3 6\") == \"YES\\n1 2 5\"\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n') == 'YES\\n1 2 4 5 7'\nassert solution('3 6\\n') == 'YES\\n1 2 5'\n\n\"\"\""
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 5\n''') == 'YES\\n1 2 4 5 7'\nassert solution('''3 6\n''') == 'YES\\n1 2 5'\n\"\"\""
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"YES\\n1 2 4 5 7\"\nassert solution(\"3 6\") == \"YES\\n1 2 5\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2') == '0.5'\nassert solution('2\\n3') == '0.6667'\nassert solution('3\\n5') == '0.8333'\nassert solution('3\\n5 2 3') == '0.8333'\nassert solution('5\\n6 2 3 4 5') == '0.8333'\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2 3\\n1 0') == '0.666667'\n\"\"\"\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2 2\") == \"0.666667\"\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2 1\\n0 1\") == \"0.500000\"\n\"\"\""
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 2 3\") == '0.0'\nassert solution(\"3\\n0 0 0\") == '1.0'\nassert solution(\"3\\n0 1 2\") == '0.333333'\nassert solution(\"3\\n1 0 2\") == '0.5'\nassert solution(\"4\\n0 1 2 3\") == '0.5'\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n0') == '0.5'\nassert solution('2\\n2\\n1 0') == '0.666667'\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '1\\n2\\n0'\n) == '0.5'\n\"\"\"\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n1\n2\n0\n''') == '0.500000'\n\nassert solution('''\n2\n2 3\n1 0\n''') == '0.666667'\n\nassert solution('''\n3\n0 0 0\n1 1 1\n1 2 3\n''') == '0.666667'\n\nassert solution('''\n3\n1 1 1\n0 0 0\n0 0 0\n''') == '0.666667'\n\nassert solution('''\n3\n0 0 0\n0 1 1\n0 0 0\n''') == '0.500000'"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n0') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1\") == \"0.333333\"\nassert solution(\"5\\n1 1 1 1\") == \"0.250000\"\nassert solution(\"10\\n0 0 0 0\") == \"0.50000\"\nassert solution(\"10\\n2 2 4 2\") == \"0.16667\"\nassert solution(\"10\\n2 2 1 3\") == \"0.08333\"\n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\n3 1 1\") == \"1\"\n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n2 1 1\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3\\n3 1 1') == '1'\nassert solution('6 6\\n2 1 1 1 1 1 1 1\\n2 1 1 1 1 1 1 1') == '1'\nassert solution('3 5\\n2 1 1 1') == '-1'\nassert solution('3 2\\n2 1 1') == '-1'\n\"\"\"\n\n\n\"\"\"\nThe solution is to use a greedy algorithm.\nThe algorithm is:\n- Find a subset of the light-sabers that satisfies k_i = n/m.\n- Reduce the number of light-sabers in the set, the number of light-sabers that satisfy k_i = n/m is reduced by m/k_i.\n- If there is a solution, then the previous step can be repeated indefinitely, else, return -1.\n\"\"\"\n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3\\n3 1 1') == '1'\nprint(solution(stdin))\n\n-----Solution-----\n\nfrom math import factorial\n\nN, M = map(int, stdin.readline().strip().split())\ncolors = list(map(int, stdin.readline().strip().split()))\n\nmod = 10 ** 9 + 7\n\nans = factorial(N)\nfor i in range(1, M + 1):\n    ans = ans // factorial(i)\n\nfor i in range(1, M + 1):\n    ans = ans * (M - i + 1) % mod\n\nans = ans * (sum(colors) - M + 1) % mod\nprint(ans)\n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n3 1 1\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1 2 2 1 1 3\") == 1\n\"\"\"\nfrom collections import Counter\n\nn, m = [int(n) for n in stdin.readline().split()]\ncolor_count = Counter([int(n) for n in stdin.readline().split()])\n\nmin_num_knights_to_be_removed = 0\nfor i in range(1, m + 1):\n    if color_count[i] == 0:\n        min_num_knights_to_be_removed = -1\n        break\n    min_num_knights_to_be_removed += color_count[i - 1]\n\nprint(min_num_knights_to_be_removed)\n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\n3 1 1') == 1\nassert solution('6 2\\n2 2 2') == -1\nassert solution('8 3\\n2 3 3') == -1\nassert solution('8 3\\n3 3 3') == 0\nassert solution('8 3\\n1 1 1') == 0\n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3\\n3 1 1\\n') == 1\n\"\"\""
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3\\n3 1 1') == 1\n\"\"\"\n"
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 5\") == \"0\"\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\nn = len(counts)\nm = len(colors)\n\n[2, 3, 2, 3, 2, 2, 3, 3]\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())\nm = int(stdin.readline())\n\ncounts = [int(stdin.readline()) for _ in range(n)]\ncolors = [int(stdin.readline()) for _ in range(m)]"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('116401024 97 1024') == 'YES'\nassert solution('284254589153928171911281811000 1009 1000') == 'YES'\nassert solution('120 12 1') == 'NO'"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(116401024) == 'YES\\n1164\\n01024'\n\n\"\"\""
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"116401024\") == \"YES 11640 1024\"\nassert solution(\"284254589153928171911281811000\") == \"YES 2842545891539 28171911281811000\"\n\"\"\"\n"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"116401024\") == \"YES\\n11640\\n1024\"\nassert solution(\"284254589153928171911281811000\") == \"YES\\n2842545891539\\n28171911281811000\"\nassert solution(\"120\") == \"NO\"\n\"\"\"\n\na, b = map(int, input().split())\n\nn = 1\nwhile a * n < 10 ** 6:\n    n += 1"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"116401024\") == \"YES\\n11640\\n1024\"\nassert solution(\"284254589153928171911281811000\") == \"YES\\n2842545891539\\n28171911281811000\"\nassert solution(\"120\") == \"NO\"\n"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''116401024\n97 1024''') == 'YES\\n11640\\n1024'\nassert solution('''284254589153928171911281811000\n1009 1000''') == 'YES\\n2842545891539\\n28171911281811000'\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"116401024\") == \"YES\\n11640\\n1024\"\n\"\"\""
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"116401024\") == 'YES\\n1164010\\n1024'\nassert solution(\"284254589153928171911281811000\") == 'YES\\n284254589153928171911281811000\\n10129272031844108967293815111017'\nassert solution(\"120\") == 'NO'\n"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"116401024\\n97 1024\") == \"YES\\n11640\\n1024\"\nassert solution(\"284254589153928171911281811000\\n1009 1000\") == \"YES\\n2842545891539\\n28171911281811000\"\nassert solution(\"120\\n12 1\") == \"NO\"\nprint('Hooray!')\n"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('116401024 97 1024') == 'YES\\n11640\\n1024'\nassert solution('284254589153928171911281811000 1009 1000') == 'YES\\n2842545891539\\n28171911281811000'\nassert solution('120 12 1') == 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == 0\nassert solution(\"3 7\") == 0\n\"\"\""
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7') == '0'\n\n\"\"\""
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 7') == 0\nassert solution('13 10') == 1\nassert solution('1 1') == 0\nassert solution('100 100') == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == 0\nassert solution('3 7') == 0\nassert solution('13 10') == 1\n\nprint(solution(stdin))\n\n-----"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == 0\n\n'''\n"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 7') == '0'\nassert solution('13 10') == '1'\nprint('Test success.')\n\n-----\nclass Solution:\n    def solve(self, a, b):\n        return str(a + b - 2 * (a & b))"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == 0\nassert solution(\"3 7\") == 0\nassert solution(\"13 10\") == 1\nassert solution(\"1 1\") == 0\n\n\"\"\"\n\n\"\"\"\nExplanation:\n\nline 1: input parameters\nline 2: input parameters\nline 3: input parameters\n\nline 1: first two integers\nline 2: first two integers\nline 3: first two integers\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10\n\nline 1: 1 1\nline 2: 3 7\nline 3: 13 10"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7') == '0'\nassert solution('1 1') == '0'\nassert solution('13 10') == '1'\nassert solution('16 3') == '1'\nassert solution('22 9') == '1'\n"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\") == 0\nassert solution(\"1 1\") == 0\nassert solution(\"13 10\") == 1\n\n'''\n\n'''\nWrite a program that accepts a comma-separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.\n\nSuppose the following input is supplied to the program:\n\nwithout,hello,bag,world\nThen, the output should be:\n\nbag,hello,without,world\n\n'''"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7') == 1\n\"\"\""
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '1'\nassert solution('5\\n') == '2'\n\"\"\""
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == '1'\nassert solution(\"5\") == '2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 1\nassert solution(\"5\") == 2\n\"\"\"\n"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"1\"\nassert solution(\"5\\n\") == \"2\"\n\"\"\"\n\n\nfrom math import gcd"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 1\nassert solution('5') == 2\n\"\"\"\n\nimport math"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\n\"\"\"\n"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"3\"\nassert solution(\"997\") == \"10\"\n\"\"\"\nfrom math import ceil, sqrt\nimport math\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2\") == \"0\"\n\nassert solution(\"2 0\") == \"2\"\n\nassert solution(\"2 2\") == \"5\"\n\nassert solution(\"2000 2000\") == \"674532367\"\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\""
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 0') == '0'\nassert solution('2000 2000') == '674532367'\nassert solution('2 2') == '5'\nassert solution('2000 2000') == '674532367'\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 2') == '0'\nassert solution('2 0') == '2'\nassert solution('2 2') == '5'\nassert solution('2000 2000') == '674532367'\n\"\"\"\nimport math"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\"\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\"\nassert solution(\"2 3\") == \"5\"\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\"\n\n\"\"\"\n\nn, m = map(int, input().split())\n\nprint((n + m) * (n + m + 1) // 2 % (998 * 244 * 853))\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\""
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 2\") == \"0\"\nassert solution(\"2 0\") == \"2\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\"\n\n\"\"\""
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0\") == \"0\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"2000 2000\") == \"674532367\""
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 0\") == '5 9'\n\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 2\\n2 1\\n2 2\\n\") == \"0 0\"\nassert solution(\n    \"9 3\\n1 2 3\\n2 8\\n1 4 5\\n\") == \"2 3\"\n\"\"\""
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2\n2 1\n2 2''') == '0 0'\nassert solution('''9 3\n1 2 3\n2 8\n1 4 5''') == '2 3'\nassert solution('''10 0\n''') == '5 9'\nassert solution('''4 2\n2 1\n2 2\n1 1\n2 2''') == '0 0'\nassert solution('''6 2\n2 1\n2 2\n2 4\n1 1\n2 3\n1 1\n2 4\n1 2\n2 3\n2 4\n''') == '2 3'\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n2 1\\n2 2') == '0 0'\nassert solution('9 3\\n1 2 3\\n2 8\\n1 4 5') == '2 3'\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n2 2\") == \"0 0\"\nassert solution(\"3 2\\n2 1\") == \"0 0\"\nassert solution(\"3 2\\n2 8\") == \"2 3\"\nassert solution(\"3 2\\n1 4 5\") == \"2 3\"\nassert solution(\"3 2\\n8 9 10\") == \"5 9\"\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n2 1\\n2 2\") == \"0 0\"\nassert solution(\"9 3\\n1 2 3\\n2 8\\n1 4 5\") == \"2 3\"\nassert solution(\"10 0\") == \"5 9\"\n\n\"\"\"\n\nfrom collections import Counter\n\ninput()\nk = Counter(map(int, input().split()))\nfor i in range(int(input())):\n    a, b = map(int, input().split())\n    k[a] -= 1\n    k[b+1] -= 1\n\nprint(max(0, k[1]), min(k[a] + k[b+1], len(k)))\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 1\\n2 2\") == \"0 0\"\nassert solution(\"9 3\\n1 2 3\\n2 8\\n1 4 5\") == \"2 3\"\nassert solution(\"10 0\") == \"5 9\"\nprint(\"Test pass.\")"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\\n1 2 3\\n2 8\\n1 4 5\") == \"2 3\"\nassert solution(\"9 3\\n1 2 3\\n2 8\\n1 4 5\") == \"0 0\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 2\n2 1\n2 2''') == '0 0'\nassert solution('''9 3\n1 2 3\n2 8\n1 4 5''') == '2 3'\nassert solution('''10 0\n''') == '5 9'\nprint(\"You are correct!\")\n'''"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 2\\n2 8\") == \"0 0\"\n\"\"\""
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 1 10') == '-1'\nassert solution('10 6 40') == '2 8 14 20 26'\n\n-----Notes-----\n\nIn the first sample all possible values of x are:\n\nx \u2264 0, y \u2264 0, x + y \u2265 n, k \u2265 1, x + y \u2264 k n\n\n-----Hints-----\nYou should not use any loops in your code.\n\"\"\"\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 1 10\n''') == '-1'\n\nassert solution('''10 3 10\n''') == '2 8 14 20 26'\n\nassert solution('''100 3 50\n''') == '2 18 26 34 42 50 58 66 74 82 90 98 100'\n\nassert solution('''100 3 20\n''') == '2 18 26 34 42 50 58 66 74 82 90 98 100'\n\nassert solution('''20 10 100\n''') == '2 18 26 34 42 50 58 66 74 82 90 98 100'\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 1 10') == '-1'\nassert solution('10 6 40') == '2 8 14 20 26'"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(expected_result)\n\nprint(solution(str(input())))\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 1 10') == '-1'\nassert solution('10 6 40') == '2 8 14 20 26'\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 10\") == \"-1\"\n\n\"\"\"\nimport math\nimport time"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == -1\nassert solution('2 3 4') == -1\nassert solution('2 3 3') == -1\nassert solution('2 3 1') == 2\nassert solution('2 3 2') == 2\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n"
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 10\") == \"-1\"\nassert solution(\"10 6 40\") == \"2 8 14 20 26\"\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nOOO\\nXXX\\nOOO\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\") == \"No\"\n\n\n-----Explanation-----\nThe first map can be rotated 180 degrees clockwise to match the second map.\n\n\"\"\"\nimport re\nfrom itertools import permutations"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nXOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\") == \"No\"\nassert solution(\"4\\nXOOO\\nXXOO\\nOOOO\\nXXXX\") == \"Yes\"\nassert solution(\"3\\nXOO\\nOXO\\nXOX\") == \"No\"\nassert solution(\"4\\nXOOO\\nXXOO\\nOXXX\\nOXXX\") == \"No\"\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nXOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\") == \"No\""
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nXOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nXOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\") == \"No\"\n\n\n\n-------------"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nXOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\") == \"No\"\nassert solution(\"4\\nOOO\\nXOX\\nXOX\\nXOX\\nOXX\\nOXX\\nOXX\\nOXX\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nXOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\") == \"No\""
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nXXOO\\nXXOO\\nOOOO\\nXXXX\\nXXOO\\nXOXO\\nXOOX\\nXOOX') == 'Yes'\nassert solution('2\\nXX\\nOO\\nXO\\nOX') == 'No'\n\"\"\""
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nXOOO\\nXXOO\\nOOOO\\nXXXX\\nXOOO\\nXOOO\\nXOXO\\nXOXX\") == \"Yes\"\nassert solution(\"2\\nXX\\nOO\\nXO\\nOX\") == \"No\"\n\"\"\"\n\nN = int(input())\n\nfor i in range(N):\n    first = input()\n    second = input()\n    if first == second:\n        print(\"Yes\")\n    else:\n        flip = first.translate(str.maketrans('O', 'X'))\n        flip = flip.translate(str.maketrans('X', 'O'))\n        if flip == second:\n            print(\"Yes\")\n            break\nelse:\n    print(\"No\")\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution) == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('hot') == 'hot'\n\nassert solution('array') == 'array'\n\nassert solution('both') == 'both'\n\nassert solution('need tree') == 'need tree'\n\nassert solution('tomat') == 'tomat'"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(automaton) == \"automaton\"\nassert solution(array) == \"array\"\nassert solution(both) == \"both\"\nassert solution(need) == \"need tree\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"hot\") == \"hot\"\nassert solution(\"both\") == \"both\"\nassert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"need tree\") == \"need tree\"\n"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need tree\") == \"need tree\"\nassert solution(\"hot\") == \"hot\"\n"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need\") == \"need tree\"\nassert solution(\"tomat\") == \"tomat\"\n"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"automaton\") == \"automaton\"\nassert solution(\"array\") == \"array\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need tree\") == \"need tree\"\n\"\"\"\nfrom collections import defaultdict\n\ns = input()\nt = input()\n\nneed_tree = False\nneed_automaton = False\n\nfor i in range(len(s)):\n    if need_tree and need_automaton:\n        break\n    \n    if i > len(t) - 1:\n        need_tree = True\n    \n    if s[i:] == t[i:]:\n        need_automaton = True"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"both\") == \"both\"\nassert solution(\"array\") == \"array\"\nassert solution(\"automaton\") == \"automaton\"\nassert solution(\"need\") == \"need tree\"\nassert solution(\"tree\") == \"tree\"\n\"\"\"\n\nfrom suffix_array import suffix_array_manber_myers\nfrom typing import List\nimport numpy as np"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"array\") == \"array\"\nassert solution(\"automaton\") == \"automaton\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need tree\") == \"need tree\"\nassert solution(\"hot\") == \"hot\""
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"array\") == \"array\"\nassert solution(\"automaton\") == \"automaton\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need tree\") == \"need tree\"\nassert solution(\"hot\") == \"hot\"\n"
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"tomat\") == \"automaton\"\nassert solution(\"arary\") == \"array\"\nassert solution(\"both\") == \"both\"\nassert solution(\"need\") == \"need tree\"\n\n\n\"\"\"\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'\nassert solution('3\\n#.#\\n...\\n#.#\\n') == 'YES'\nassert solution('3\\n#.#\\n...\\n#.#\\n\\n#.##\\n###.\\n#.##\\n') == 'NO'\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n#.#\\n#...\\n####\\n#.#\\n#..#') == \"YES\"\nassert solution('3\\n#.#\\n#.#\\n#.#') == \"NO\"\nassert solution('5\\n#.###\\n....#\\n#....\\n###.#\\n#####') == \"YES\"\nassert solution('5\\n#.###\\n....#\\n#....\\n....#\\n#....') == \"NO\"\nassert solution('5\\n#.###\\n....#\\n#....\\n...#\\n###.#') == \"YES\"\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    [\n        '.#.#',\n        '...#',\n        '#.###',\n        '....#',\n        '#..##',\n    ],\n) == 'YES'\n\nassert solution(\n    [\n        '..#.',\n        '..#.',\n        '###.',\n        '.#.#',\n        '....',\n    ],\n) == 'YES'\n\nassert solution(\n    [\n        '####',\n        '#..#',\n        '#..#',\n        '##.#',\n        '##.#',\n    ],\n) == 'NO'\n\nassert solution(\n    [\n        '####',\n        '#..#',\n        '#..#',\n        '##.#',\n        '#.#.',\n    ],\n) == 'NO'\n\nassert solution(\n    [\n        '####',\n        '#..#',\n        '#..#',\n        '###.',\n        '#.#.',\n    ],\n) == 'YES'"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n#.#\\n...\\n#.#\\n\") == \"YES\"\nassert solution(\"4\\n#.#\\n#...\\n####\\n##.#\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n#.#\\n...\\n#.#\\n\") == \"YES\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n###.#\\n#####\\n\") == \"YES\"\nassert solution(\"4\\n##.#\\n#...\\n####\\n##.#\\n\") == \"NO\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n....#\\n#..##\\n\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == expected_result\n\"\"\"\n\n\n\n\"\"\"\n@description:\n\u3010\u77e5\u8bc6\u70b9\u3011\uff1a \n\u6ed1\u52a8\u7a97\u53e3\nhttps://blog.csdn.net/qq_30683519/article/details/82946342\nhttps://blog.csdn.net/qq_17550379/article/details/82314778\nhttps://blog.csdn.net/xuchao_kuo/article/details/88751708\nhttps://blog.csdn.net/qq_27825558/article/details/89360302\n\n@result:\n\u3010\u7edf\u8ba1\u5b66\u3011\uff1a \nhttps://blog.csdn.net/qq_30683519/article/details/82946342\nhttps://blog.csdn.net/qq_17550379/article/details/82314778\nhttps://blog.csdn.net/xuchao_kuo/article/details/88751708\nhttps://blog.csdn.net/qq_27825558/article/details/89360302\n\n@time: 2020/10/22\n\"\"\"\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n.#\\n...\") == \"YES\"\nassert solution(\"4\\n#.#\\n#...\\n####\") == \"YES\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n###.#\\n#####\") == \"YES\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n....#\\n#..##\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n#.#\\n...\\n#.#\") == \"YES\"\nassert solution(\"4\\n##.#\\n#...\\n####\\n##.#\") == \"NO\"\nassert solution(\"5\\n#.###\\n....#\\n#....\\n###.#\\n#####\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('.#.#.#') == 'YES'\nassert solution('##.#.#') == 'YES'\nassert solution('###.#.') == 'NO'\nassert solution('#.#...') == 'YES'\nassert solution('#.#.#.') == 'NO'\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10 3 3') == 2\nassert solution('3 10 1 3') == 3\nassert solution('100 100 1 1000') == 1"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10 3 3') == '2'\nassert solution('3 10 1 3') == '3'\nassert solution('100 100 1 1000') == '1'\n\"\"\"\n\nk, a, b, v = [int(x) for x in input().split()]\n\nmax_nuts = k * (a - 1) // (a - b)\nmin_div = v // (a - b)\n\nprint(min(max_nuts, min_div))\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 3 3\") == \"2\"\nassert solution(\"3 10 1 3\") == \"3\"\nassert solution(\"100 100 1 1000\") == \"1\"\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 10 3 3') == 2\nassert solution('3 10 1 3') == 3\nassert solution('100 100 1 1000') == 1\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 1 3\") == \"2\"\nassert solution(\"100 100 1 1000\") == \"1\"\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\nassert solution(\"1 2 3 3\") == \"3\"\n\nassert solution(\"2 3 5 6\") == \"4\"\n\nassert solution(\"2 3 4 5\") == \"4\"\n\nassert solution(\"2 3 4 6\") == \"3\""
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10 3 3\") == \"2\"\nassert solution(\"100 100 1 1000\") == \"1\"\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 1 3\") == \"3\"\nassert solution(\"3 10 3 3\") == \"2\"\nassert solution(\"100 100 1 1000\") == \"1\"\n"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10 1 3\") == \"3\"\nassert solution(\"3 10 3 3\") == \"2\"\nassert solution(\"100 100 1 1000\") == \"1\"\n\"\"\""
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10 1 3') == '3'\nassert solution('3 10 3 3') == '2'\nassert solution('100 100 1 1000') == '1'\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10 6 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 6 4\\n3 4 4 2\\n\") == \"3\"\nassert solution(\"3\\n10 1 10\\n1 10 1 1\\n\") == \"6\"\nassert solution(\"3\\n10 1 10\\n1 10 1 1\\n\") == \"3\"\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 1 6 4\") == \"3\"\nassert solution(\"3\\n4 4 4 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == '3'\n\nassert solution(4) == '6'\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 1 6 4\\n3 4 4 2\") == \"3\"\nassert solution(\"4\\n10 5 6 4\\n1 11 4 2\") == \"6\"\nassert solution(\"3\\n10 1 10\\n1 10 1 1\") == \"3\"\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '4\\n2 1 6 4\\n3 4 4 2\\n'\n) == '3'\nassert solution(\n    '4\\n10 5 6 4\\n1 11 4 2\\n'\n) == '6'\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 6 4\") == \"3\"\nassert solution(\"3 4 4 2\") == \"6\"\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 6 4\\n3 4 4 2\") == \"3\"\nassert solution(\"4\\n10 5 6 4\\n1 11 4 2\") == \"6\"\nassert solution(\"3\\n10 1 10\\n1 10 1 1\") == \"3\"\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 6 4\") == \"3\"\nassert solution(\"3 4 4 2\") == \"6\"\nassert solution(\"10 5 6 4\") == \"6\"\nassert solution(\"1 11 4 2\") == \"3\"\nassert solution(\"10 1 10 1\") == \"3\"\n\"\"\"\n\nn = int(stdin.readline().strip())\nline = stdin.readline().strip().split(' ')\nline = [int(x) for x in line]\nr1, c1, r2, c2 = [int(x) for x in stdin.readline().strip().split(' ')]\n\nprint((max(r2 - r1, 0) + max(c2 - c1, 0)) * (r2 - r1 + 1) * (c2 - c1 + 1))\n"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 1 6 4\\n3 4 4 2\\n') == '3'\nassert solution('4\\n10 5 6 4\\n1 11 4 2\\n') == '6'\nassert solution('3\\n10 1 10\\n1 10 1 1\\n') == '3'"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 6 8 10\\n9 7 5 3 1\") == \"Karen\"\n\"\"\"\n\n\"\"\"\n\"Rock...\" Paper!\n\nAfter Karen have found the deterministic winning (losing?) strategy for rock-paper-scissors, her brother, Koyomi, comes up with a new game as a substitute. The game works as follows.\n\nA positive integer n is decided first. Both Koyomi and Karen independently choose n distinct positive integers, denoted by x_1, x_2,..., x_{n} and y_1, y_2,..., y_{n} respectively. They reveal their sequences, and repeat until all of 2n integers become distinct, which is the only final state to be kept and considered.\n\nThen they count the number of ordered pairs (i, j) (1 \u2264 i, j \u2264 n) such that the value x_{i} xor y_{j} equals to one of the 2n integers. Here xor means the bitwise exclusive or operation on two integers, and is denoted by operators ^ and/or xor in most programming languages.\n\nKaren claims a win if the number of such pairs is even, and Koyomi does otherwise. And you're here to help determine the winner of their latest game.\n\n\n-----Input-----\n\nThe first line of input contains a positive integer n (1 \u2264 n \u2264 2 000) \u2014 the length of both sequences.\n\nThe second line contains n space-separated integers x_1, x_2,..., x_{n} (1 \u2264 x_{i} \u2264 2\u00b710^6) \u2014 the integers finally chosen by Koyomi.\n\nThe third line contains n space-separated integers y_1, y_2,..., y_{n} (1 \u2264 y_{i} \u2264 2\u00b710^6) \u2014 the integers finally chosen by Karen.\n\nInput guarantees that the given 2n integers are pairwise distinct, that is, no pair (i, j) (1 \u2264 i, j \u2264 n) exists such that one of the following holds: x_{i} = y_{j}; i \u2260 j and x_{i} = x_{j}; i \u2260 j and y_{i} = y_{j}.\n\n\n-----Output-----\n\nOutput one line \u2014 the name of the winner, that is, \"Koyomi\" or \"Karen\" (without quotes). Please be aware of the capitalization.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n4 5 6\n\nOutput\nKoyomi\n\nInput\n5\n2 4 6 8 10\n9 7 5 3 1\n\nOutput\nKoyomi\n\nInput\n1\n1\n1\n\nOutput\nKoyomi\n\n\n\n-----Note-----\n\nIn the first example, there are 6 pairs satisfying the constraint: (1, 1), (1, 2), (2, 1), (2, 3), (3, 2) and (3, 3). Thus, Koyomi wins since 6 is an even number.\n\nIn the second example, there are 16 such pairs, and Koyomi wins again.\n"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 3\n4 5 6\n''') == 'Karen'\nassert solution('''\n5\n2 4 6 8 10\n9 7 5 3 1\n''') == 'Karen'\nassert solution('''\n5\n2 4 6 8 10\n9 7 5 3 1\n''') == 'Koyomi'\n"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 4 6 8 10\\n9 7 5 3 1\") == \"Karen\"\n\nassert solution(\"3 5 6 7 9\\n4 3 2 1 6\") == \"Karen\"\n"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3\\n4 5 6') == 'Karen'\nassert solution('5\\n2 4 6 8 10\\n9 7 5 3 1') == 'Karen'\n"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 3 4\") == \"Karen\"\nassert solution(\"3 2 3 4 5\") == \"Koyomi\"\n\"\"\""
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 4 6 8 10\n9 7 5 3 1\n''') == 'Karen'\nassert solution('''3\n1 2 3\n4 5 6\n''') == 'Koyomi'\n"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 4 6 8 10\\n9 7 5 3 1\") == \"Karen\"\n"
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 6 8 10\\n9 7 5 3 1\") == \"Karen\"\nassert solution(\"7\\n2 4 6 8 10\\n9 7 5 3 1\") == \"Koyomi\""
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n2 4 6 8 10\n9 7 5 3 1\"\"\") == \"Karen\"\nassert solution(\"\"\"6\n1 2 3 4 5 6\n1 2 3 4 5 6\"\"\") == \"Koyomi\"\n\n\"\"\"\nKaren has just played the game of n, and she has found the set of integers denoted by x = {x_1,..., x_n} and the set of integers denoted by y = {y_1,..., y_n}.\n\nYou are given the positive integer n, and the sequences x_1,..., x_n, y_1,..., y_n, and your task is to determine which of the two players won.\n\nInput\nThe first line of the input contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of games played by Koyomi.\n\nThe next t lines contain one integer n (1 \u2264 n \u2264 2 000) \u2014 the length of the sequences.\n\nThe next line contains n space-separated integers x_1, x_2,..., x_{n} (1 \u2264 x_{i} \u2264 2\u00b710^6) \u2014 the integers finally chosen by Koyomi.\n\nThe next line contains n space-separated integers y_1, y_2,..., y_{n} (1 \u2264 y_{i} \u2264 2\u00b710^6) \u2014 the integers finally chosen by Karen.\n\nOutput\nFor each game, print the winner, either \"Koyomi\" or \"Karen\" (without quotes), on a new line.\n\nYou may print each character of each string in any order and in any case.\n\n\n-----Example-----\nInput\n5\n1 2 3\n4 5 6\nOutput\nKoyomi\nKoyomi\nKoyomi\nKoyomi\nKoyomi\n\n\n-----Example-----\nInput\n5\n2 4 6 8 10\n9 7 5 3 1\nOutput\nKaren\nKaren\nKaren\nKaren\nKaren\n\n-----Hint-----\n\nYou can solve this problem via making a frequency table, but the winning strategy does not depend on it.\n\n\"\"\""
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n9 7 5 3 1\") == \"Karen\"\nassert solution(\"3\\n1 2 3\\n4 5 6\") == \"Koyomi\"\n"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 1 1') == '7'\nassert solution('3 4 2 1') == '25'\nassert solution('3 4 3 1') == '79'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 1 1') == '7'\nassert solution('3 4 2 1') == '25'\nassert solution('3 4 3 1') == '79'"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 1 1') == '7'\n\"\"\"\n\na, b, n, x = map(int, input().split())"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\nassert solution(\"3 4 2 1\") == \"25\"\nassert solution(\"3 4 3 1\") == \"79\"\n"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\nassert solution(\"3 4 2 1\") == \"25\"\nassert solution(\"3 4 3 1\") == \"79\""
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\nassert solution(\"3 4 2 1\") == \"25\"\nassert solution(\"3 4 3 1\") == \"79\"\n\"\"\"\n\nA, B, n, x = list(map(int, input().split()))"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\n"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 1 1') == '7'\nassert solution('3 4 2 1') == '25'\nassert solution('3 4 3 1') == '79'\n"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 1 1\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n3 12 18\\n2 6 5 3 3\") == \"YES\\n3 4\"\nassert solution(\"4 2\\n1 5 17 19\\n4 5\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n3 12 18\\n2 6 5 3 3\") == \"YES\\n3 4\\n\"\nassert solution(\"4 2\\n1 5 17 19\\n4 5\") == \"NO\\n\"\n\"\"\"\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    3 5\n    3 12 18\n    2 6 5 3 3\n    \"\"\") == \"YES\\n3 4\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n3 12 18\\n2 6 5 3 3\") == \"YES\\n3 4\"\n\"\"\"\n\n\nfrom collections import Counter, deque\nimport sys\nfrom functools import reduce\nfrom operator import add\n\nn, m = [int(i) for i in input().split(' ')]\nnums = [int(i) for i in input().split(' ')]\nnums.sort()\n\nintervals = [int(i) for i in input().split(' ')]\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"3 5\\n\" +\n\"3 12 18\\n\" +\n\"2 6 5 3 3\\n\"\n) == \"YES\\n3 4\"\n\nassert solution(\n\"4 2\\n\" +\n\"1 5 17 19\\n\" +\n\"4 5\\n\"\n) == \"NO\\n1 1\"\n\"\"\"\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\n3 12 18\\n2 6 5 3 3') == 'YES\\n3 4'\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n3 12 18\\n2 6 5 3 3\") == \"YES\\n3 4\"\nassert solution(\"4 2\\n1 5 17 19\\n4 5\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 12 18 3\") == \"NO\"\nassert solution(\"3 5 12 18 3 2\") == \"YES\"\nassert solution(\"3 5 12 18 3 2 6 5 3 3\") == \"YES\"\nassert solution(\"4 5 12 18 3 2\") == \"NO\"\nassert solution(\"4 5 12 18 3 2 1\") == \"YES\"\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n3 12 18\\n2 6 5 3 3\") == 'YES\\n3 4'\n\n\"\"\"\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 5\n3 12 18\n2 6 5 3 3''') == 'YES\\n3 4'\n\nassert solution('''4 2\n1 5 17 19\n2 1''') == 'YES\\n1 1'\n\n\"\"\"\nn, m = map(int, stdin.readline().split())\nx = list(map(int, stdin.readline().split()))\np = list(map(int, stdin.readline().split()))\nx.sort()\np.sort()\ny = 0\nfor i in range(m):\n    if p[i] > x[0]:\n        if p[i] - x[0] >= n:\n            y = p[i]\n            break\nprint('YES' if y else 'NO')\nprint(y, i + 1)\n\"\"\"\n"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 11\\n2 4 7 3\") == \"2 7 1 3 6 5 4\"\nassert solution(\"1000 999\\n10 20 30 40\") == -1\nassert solution(\"1 1\\n1 1\") == \"1\"\nassert solution(\"7 11\\n5 6 7 4\") == \"7 1 5 6 4 2 3\"\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\na, b, c, d = [int(x) for x in input().split()]"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 11\") == \"2 7 1 3 6 5 4\""
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 11\\n2 4 7 3\") == \"2 7 1 3 6 5 4\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5 7 3\\n') == '2 7 1 3 6 5 4'\n\"\"\""
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 3\") == \"1 2 4 3\"\nassert solution(\"10 5 20 30 40\") == \"20 30 40 10 5\"\nassert solution(\"100 4 -5 -7\") == \"100 -7 -5 4\"\n\"\"\""
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 11 2 4 7 3') == '2 7 1 3 6 5 4'\nassert solution('1000 999 10 20 30 40') == '-1'\n\"\"\"\n"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 11\\n2 4 7 3\") == \"2 7 1 3 6 5 4\"\n"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 11\\n2 4 7 3\") == \"2 7 1 3 6 5 4\"\nassert solution(\"1000 999\\n10 20 30 40\") == \"-1\"\nassert solution(\"3 3\\n1 2 3\") == \"-1\"\n\"\"\"\nimport numpy as np\nimport math\nfrom collections import defaultdict\nfrom typing import List, Dict, DefaultDict\n"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 2 4 1') == '1 3 2 4 5'\n\"\"\""
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 999\") == \"11 1 2 3 10 4 9 5 6 7 8\"\nassert solution(\"100 100\") == \"1 2 3 4 5 6\"\nassert solution(\"5 5\") == \"1 2 3 4\"\nassert solution(\"20 20\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\nassert solution(\"200 200\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"\n"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('5') == '2'\nassert solution('8') == '1'\n"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '1'\n\n'''"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '1'\n\"\"\""
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '1'\n\"\"\"\n"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '1'\n"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == '2'\nassert solution(\"8\") == '1'\nassert solution(\"1\") == '1'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '1'\n\"\"\""
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '1'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"1\"\n"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '1'\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"B\"\nassert solution(\"Z\") == \"B\"\nassert solution(\"ZCTH\") == \"B\"\nassert solution(\"ZDATG\") == \"B\"\nassert solution(\"AFBAKC\") == \"B\"\n\"\"\"\n\n\"\"\"\n\u0422\u0435\u0441\u0442\n\"\"\""
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ZCTH\") == \"2\"\nassert solution(\"ZDATG\") == \"5\"\nassert solution(\"AFBAKC\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ZCTH') == '2'\nassert solution('ZDATG') == '5'\nassert solution('AFBAKC') == '16'"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ZCTH\") == \"2\"\nassert solution(\"ZDATG\") == \"5\"\nassert solution(\"AFBAKC\") == \"16\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ACTG\") == \"ACTG\"\nassert solution(\"ACTGC\") == \"CACTG\"\nassert solution(\"ACTGCZ\") == \"CACTG\"\nassert solution(\"ACTGCZT\") == \"CACTG\"\nassert solution(\"ACTGCZTA\") == \"CACTG\"\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ZCTH') == '2'\nassert solution('ZDATG') == '5'\nassert solution('AFBAKC') == '16'\n\"\"\"\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ZCTH\") == \"2\"\nassert solution(\"ZDATG\") == \"5\"\nassert solution(\"AFBAKC\") == \"16\"\n\n\"\"\"\nimport re\nfrom typing import List, NamedTuple, Set, Dict\nfrom collections import defaultdict\n\n\nclass Gene(NamedTuple):\n    start: int\n    length: int\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ZCTH\") == \"2\"\nassert solution(\"ZDATG\") == \"5\"\nassert solution(\"AFBAKC\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ZCTH') == 2\nassert solution('ZDATG') == 5\nassert solution('AFBAKC') == 16\n\"\"\""
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 6\\n\") == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 6\\n1\") == \"4\"\nassert solution(\"2 6\\n2\") == \"0\"\n\"\"\""
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 6\\n') == '4'\n\"\"\"\n\n\"\"\"\n\nTheory:\nSuppose N = 3, M = 6, then there are four sequences that satisfies the condition:\n\na_1, a_2, a_3 = 2, 4, 2\na_1, a_2, a_3 = 6, 4, 2\na_1, a_2, a_3 = 4, 6, 2\na_1, a_2, a_3 = 4, 2, 6\n\nIt turns out that there are four sequences that satisfies the condition:\n\na_1, a_2, a_3 = 2, 4, 2\na_1, a_2, a_3 = 6, 4, 2\na_1, a_2, a_3 = 4, 6, 2\na_1, a_2, a_3 = 4, 2, 6\n\nThe reason for this is that we can see that a_1, a_2, a_3 are fixed, so any other sequence can be created by changing a_1 by 2, 4, or 6.\n\nSuppose N = 4, M = 6, then there are ten sequences that satisfies the condition:\n\na_1, a_2, a_3, a_4 = 3, 1, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 3, 1\na_1, a_2, a_3, a_4 = 3, 3, 1, 1\na_1, a_2, a_3, a_4 = 3, 3, 3, 1\na_1, a_2, a_3, a_4 = 1, 1, 1, 3\na_1, a_2, a_3, a_4 = 1, 1, 3, 1\na_1, a_2, a_3, a_4 = 1, 3, 1, 1\na_1, a_2, a_3, a_4 = 1, 3, 3, 1\na_1, a_2, a_3, a_4 = 1, 3, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 3, 1\na_1, a_2, a_3, a_4 = 3, 3, 1, 1\na_1, a_2, a_3, a_4 = 3, 3, 3, 1\na_1, a_2, a_3, a_4 = 3, 1, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 3, 1\na_1, a_2, a_3, a_4 = 3, 3, 1, 1\na_1, a_2, a_3, a_4 = 3, 3, 3, 1\na_1, a_2, a_3, a_4 = 1, 1, 1, 3\na_1, a_2, a_3, a_4 = 1, 1, 3, 1\na_1, a_2, a_3, a_4 = 1, 3, 1, 1\na_1, a_2, a_3, a_4 = 1, 3, 3, 1\na_1, a_2, a_3, a_4 = 1, 3, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 3, 1\na_1, a_2, a_3, a_4 = 3, 3, 1, 1\na_1, a_2, a_3, a_4 = 3, 3, 3, 1\na_1, a_2, a_3, a_4 = 3, 1, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 3, 1\na_1, a_2, a_3, a_4 = 3, 3, 1, 1\na_1, a_2, a_3, a_4 = 3, 3, 3, 1\na_1, a_2, a_3, a_4 = 3, 1, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 3, 1\na_1, a_2, a_3, a_4 = 3, 3, 1, 1\na_1, a_2, a_3, a_4 = 3, 3, 3, 1\na_1, a_2, a_3, a_4 = 3, 1, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 3, 1\na_1, a_2, a_3, a_4 = 3, 3, 1, 1\na_1, a_2, a_3, a_4 = 3, 3, 3, 1\na_1, a_2, a_3, a_4 = 3, 1, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 3, 1\na_1, a_2, a_3, a_4 = 3, 3, 1, 1\na_1, a_2, a_3, a_4 = 3, 3, 3, 1\na_1, a_2, a_3, a_4 = 1, 1, 1, 3\na_1, a_2, a_3, a_4 = 1, 1, 3, 1\na_1, a_2, a_3, a_4 = 1, 3, 1, 1\na_1, a_2, a_3, a_4 = 1, 3, 3, 1\na_1, a_2, a_3, a_4 = 1, 3, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 3, 1\na_1, a_2, a_3, a_4 = 3, 3, 1, 1\na_1, a_2, a_3, a_4 = 3, 3, 3, 1\na_1, a_2, a_3, a_4 = 3, 1, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 3, 1\na_1, a_2, a_3, a_4 = 3, 3, 1, 1\na_1, a_2, a_3, a_4 = 3, 3, 3, 1\na_1, a_2, a_3, a_4 = 3, 1, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 3, 1\na_1, a_2, a_3, a_4 = 3, 3, 1, 1\na_1, a_2, a_3, a_4 = 3, 3, 3, 1\na_1, a_2, a_3, a_4 = 3, 1, 1, 3\na_1, a_2, a_3, a_4 = 3, 1, 3, 1\na_1, a_2, a_3, a_4 = 3, 3, 1, 1\na_1, a_2, a_3, a_4 ="
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 6') == '4'\n"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 6\") == \"4\"\n\"\"\""
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('1\\n2') == '2'\nassert solution('2 2') == '1'\nassert solution('2 1\\n1 1') == '0'\n"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 9\\n2 6\\n1 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6\\n\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 6\") == \"4\"\nprint(\"PASSED\")"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 6''') == 4\n'''\n"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1 0.50 1''') == '0.5'\nassert solution('''1 0.50 4''') == '0.9375'\nassert solution('''4 0.20 2''') == '0.4'\n"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0.20 2\") == 0.4\nassert solution(\"1 0.50 1\") == 0.5\n"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 0.50 1') == '0.5'\nassert solution('1 0.50 4') == '0.9375'\nassert solution('4 0.20 2') == '0.4'\n\"\"\"\n\nfrom decimal import Decimal, getcontext"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 0.50 1') == '0.5'\n\nassert solution('1 0.50 4') == '0.9375'\n\nassert solution('4 0.20 2') == '0.4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 0.50 1''') == '0.5'\nassert solution('''1 0.50 4''') == '0.9375'\nassert solution('''4 0.20 2''') == '0.4'\n'''\n-----Bite-----\n\nHelp Ilya with his escalator.\n\nhttps://stepik.org/lesson/24458/step/5?discussion=1856227&thread=solutions&unit=408728\n\"\"\""
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0.50 1\\n\") == \"0.5\"\nassert solution(\"1 0.50 4\\n\") == \"0.9375\"\nassert solution(\"4 0.20 2\\n\") == \"0.4\"\n\"\"\""
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 0.50 1\\n') == '0.5'\n\"\"\"\nimport math\nimport sys\nimport math"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 0.50 1') == '0.5'\nassert solution('4 0.20 2') == '0.4'\nassert solution('1 0.50 4') == '0.9375'\nassert solution('4 0.20 10') == '0.8125'\nassert solution('4 0.20 1000') == '0.8125'\n"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 0.5 1\\n') == '0.5'\n\"\"\"\n\nimport sys\nfrom math import e, factorial"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 0.50 1''') == '0.5'\nassert solution('''1 0.50 4''') == '0.9375'\nassert solution('''4 0.20 2''') == '0.4'"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"3\"\n\nassert solution(\"4 3\") == \"4\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 2\") == \"2\""
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == 3\nassert solution(\"4 3\") == 4\n\"\"\"\n"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == '3'\nassert solution('4 3') == '4'\nassert solution('1 1') == '1'\nassert solution('3 3') == '0 3'\nassert solution('5 4') == '4'\n\"\"\""
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == '4'\nassert solution('2 2') == '3'\nassert solution('1 1') == '0'\nassert solution('1 2') == '1 2'\nassert solution('1 1') == '0 1'\n\n\"\"\"\n"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == '3'\nassert solution('4 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"3\"\n"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '3'\nassert solution('4 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"4\\n0 3\\n2 1\\n3 0\\n4 2\"\n"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '3'\nassert solution('4 3') == '4'\n\"\"\""
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 1\\n2') == '1 2'\nassert solution('4\\n1 1 1 1') == '1 2'\nassert solution('6\\n1 5 7 4 4 3') == '1 3'\nassert solution('8\\n1 5 7 4 4 3') == '1 3'\nassert solution('10\\n1 5 7 4 4 3') == '1 3'\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10 10 10 10\") == \"1 2\"\nassert solution(\"7\\n5 4 3 2 1\") == \"2 4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"1 3\"\nassert solution(\"6\\n1 5 7 4 4 3\") == \"1 3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2\"\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 5 7 4 4 3\") == \"1 3\\n6 2\\n4 5\"\nassert solution(\"10\\n10 10 10 10\") == \"1 2\\n3 4\"\n\nimport sys"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 5 7 4 4 3') == '1 3\\n6 2\\n4 5'\nassert solution('4\\n10 10 10 10') == '1 2\\n3 4'\nassert solution('4\\n10 10 10 10') == '1 2\\n3 4'\n\n\"\"\"\n\nn = int(input())\ncards = list(map(int, input().split()))\nassert len(cards) == n\nfor i in range(n // 2):\n    print(i, n - i - 1)"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 5 7 4 4 3\") == \"1 3\\n6 2\\n4 5\"\nassert solution(\"4\\n10 10 10 10\") == \"1 2\\n3 4\"\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10 10 10\") == \"1 2\"\nassert solution(\"1 5 7 4 4 3\") == \"1 3\"\n\"\"\"\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    8\n    10 10 10 10 10 10 10\n    \"\"\"\n) == \"\"\"\n1 2\n4 5\n\"\"\"\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n8\n1 2 3 4 4 5 5 6 6\n''') == '2 1 4 3 5 6','solution 1'\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1\n''') == '1 2 3','solution 2'\nassert solution('''\n10\n8 8 8 8 8 8 8 8 8\n''') == '1 2 3 4 5 6 7 8 9','solution 3'\nassert solution('''\n5\n1 1 1 1 1\n''') == '1 2 3 4','solution 4'\nassert solution('''\n7\n5 5 5 5 5 5 5\n''') == '1 2 3 4 5','solution 5'\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 5 7 4 4 3') == '1 3'\nassert solution('4\\n10 10 10 10') == '1 2'\nassert solution('6\\n4 4 4 4 2') == '1 2'\nassert solution('4\\n1 1 1 1') == '1 2'\nassert solution('4\\n2 2 2 2') == '1 2'\n"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 5 7 4 4 3\") == \"1 3\"\nassert solution(\"4\\n10 10 10 10\") == \"1 2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\\nB.Picks_is_the_author_of_this_problem\\nC.Picking_is_the_author_of_this_problem\\nD.Ftiasch_is_cute\") == \"D\"\nassert solution(\"A.ab\\nB.abcde\\nC.ab\\nD.abc\") == \"B\"\nassert solution(\"A.c\\nB.cc\\nC.c\\nD.c\") == \"C\""
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A.a_very_long_description\\nB.ab\\nC.a\\nD.abc') == 'D'\nassert solution('A.c\\nB.cc\\nC.c\\nD.c') == 'B'\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\\nB.Picks_is_the_author_of_this_problem\\nC.Picking_is_the_author_of_this_problem\\nD.Ftiasch_is_cute\") == \"D\"\nassert solution(\"A.ab\\nB.abcde\\nC.ab\\nD.abc\") == \"B\"\nassert solution(\"A.c\\nB.cc\\nC.c\\nD.c\") == \"C\"\n\n\"\"\"\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\\nB.Picks_is_the_author_of_this_problem\\nC.Picking_is_the_author_of_this_problem\\nD.Ftiasch_is_cute\") == \"D\"\n\nassert solution(\"A.ab\\nB.abcde\\nC.ab\\nD.abc\") == \"B\"\nassert solution(\"A.c\\nB.cc\\nC.c\\nD.c\") == \"B\"\n\n\n\"\"\""
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\\n\"\n                \"B.Picks_is_the_author_of_this_problem\\n\"\n                \"C.Picking_is_the_author_of_this_problem\\n\"\n                \"D.Ftiasch_is_cute\") == \"D\"\nassert solution(\"A.ab\\n\"\n                \"B.abcde\\n\"\n                \"C.ab\\n\"\n                \"D.abc\") == \"C\"\nassert solution(\"A.c\\n\"\n                \"B.cc\\n\"\n                \"C.c\\n\"\n                \"D.c\") == \"B\"\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\\nB.Picks_is_the_author_of_this_problem\\nC.Picking_is_the_author_of_this_problem\\nD.Ftiasch_is_cute\\n\") == \"D\"\nassert solution(\"A.ab\\nB.abcde\\nC.ab\\nD.abc\\n\") == \"B\"\nassert solution(\"A.c\\nB.cc\\nC.c\\nD.c\\n\") == \"C\""
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A.ab\") == \"B\"\nassert solution(\"B.abcde\") == \"C\"\nassert solution(\"C.c\") == \"B\"\nassert solution(\"D.abc\") == \"C\"\nassert solution(\"A.c\") == \"B\""
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\\nB.Picks_is_the_author_of_this_problem\\nC.Picking_is_the_author_of_this_problem\\nD.Ftiasch_is_cute\") == \"D\"\nassert solution(\"A.c\\nB.cc\\nC.c\\nD.c\") == \"B\"\n\"\"\""
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A.VFleaKing_is_the_author_of_this_problem\\nB.Picks_is_the_author_of_this_problem\\nC.Picking_is_the_author_of_this_problem\\nD.Ftiasch_is_cute\") == 'D'\nassert solution(\"A.ab\\nB.abcde\\nC.ab\\nD.abc\") == 'B'\nassert solution(\"A.c\\nB.cc\\nC.c\\nD.c\") == 'B'\nassert solution(\"A.a\\nB.a\\nC.a\\nD.a\") == 'A'\nassert solution(\"A.a\\nB.b\\nC.a\\nD.a\") == 'A'\n"
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(A.ab) == \"B\"\nassert solution(B.abcde) == \"C\"\nassert solution(C.ab) == \"D\"\nassert solution(D.abc) == \"B\"\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == result\n\nprint(solution(stdin))\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1010\") == 1\nassert solution(\"10110\") == 0\n\"\"\"\nimport sys\nsys.path.append(\"../\")\n\nfrom utils.utils import timer\n\nfrom collections import defaultdict"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 4 1010\") == \"1\"\nassert solution(\"5 5 2 10110\") == \"0\"\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10110') == 0\nassert solution('10110') == 0\n\"\"\"\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101010\") == 1\nassert solution(\"101101\") == 0\nassert solution(\"110110\") == 0\nassert solution(\"111101\") == 0\nassert solution(\"111011\") == 1\n\n-----Test Input-----\n2 1 2\n11\n\n-----Test Output-----\n1\n2\n\"\"\"\n\nn, a, b = list(map(int, input().split()))\ncompany = [0 for _ in range(n + 1)]\nfor _ in range(n):\n    company.append(int(input()))\nmin_cost = float(\"inf\")\nfor i in range(n + 1):\n    if a <= i <= b:\n        continue\n    if i == a:\n        cost = abs(b - a)\n    elif i == b:\n        cost = abs(a - b)\n    else:\n        cost = abs(i - a) + abs(b - i)\n    min_cost = min(min_cost, cost)\nfor i in range(n + 1):\n    if a <= i <= b:\n        continue\n    if company[i]!= company[a]:\n        continue\n    if company[i]!= company[b]:\n        continue\n    if i == a or i == b:\n        continue\n    cost = abs(i - a) + abs(b - i)\n    min_cost = min(min_cost, cost)\nprint(min_cost)\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1010\") == 1\n\"\"\""
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2\") == 0\nassert solution(\"4 1 4\") == 1\nassert solution(\"5 5 2\") == 0\n\"\"\"\n\nimport sys\n\nA, B, C = [int(x) for x in sys.stdin.readline().strip().split()]\n\ncost = 0\ni = 1\nwhile i!= C:\n    if i <= B:\n        cost += A\n    else:\n        cost += B\n    i = (i + 1) % C\n\nprint(cost)\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101010') == '0'\nassert solution('101101') == '0'\nassert solution('1110110') == '0'\nassert solution('0101010') == '0'\nassert solution('1110111') == '1'\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1010\") == 1\nassert solution(\"10110\") == 0\n\"\"\"\n\nimport sys\nimport os\nfrom io import StringIO"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\\n2 2\") == 4\nassert solution(\"3 3\\n10 1\\n6 5\\n3 3\") == 11\n\n\n\n-----\n\nGiven\n\nn\n\nintegers where\n\nn\n\nis the number of doctors (1 \u2264 n \u2264 1000).\n\nNext\n\nn\n\nlines contain two integers s_i, d_i (1 \u2264 s_i, d_i \u2264 1000).\n\nIt is guaranteed that\n\n1\n\n\u2264\n\ns_i\n\n<\n\ns_i + d_i\n\n\u2264\n\nn\n\nfor each valid i (1 \u2264 i \u2264 n).\n\nIt is also guaranteed that\n\ns_1\n\n\u2264\n\ns_2\n\n<\n\ns_3\n\n<\n\n.\n\n.\n\n.\n\ns_n\n\n\u2264\n\ns_n + d_n\n\n\u2264\n\nn\n\n(for each valid i (1 \u2264 i \u2264 n)).\n\nThe doctor's appointments take a long time, so Borya can not see more than one doctor per day. What is the minimum time he needs to visit all doctors?\n\nInput\n5\n\n2 2\n\n1 2\n\n2 2\n\n3 3\n\n10 1\n\n6 5\n\n3 3\n\nOutput\n\n5\n\nExplanation\n\nIn the first sample case, Borya needs to visit all doctors on the days 2, 3 and 4.\n\nIn the second sample case, Borya needs to visit all doctors on the days 10 and 11.\n\nIn the third sample case, Borya needs to visit all doctors on the days 10, 11, 12 and 13.\n\nIn the fourth sample case, Borya needs to visit all doctors on the days 10, 11, 12, 13, 14 and 15.\n\nIn the fifth sample case, Borya needs to visit all doctors on the days 10, 11, 12, 13, 14, 15, 16 and 17.\n\n\n-----\n\nGiven\n\nn\n\nintegers where\n\nn\n\nis the number of doctors (1 \u2264 n \u2264 1000).\n\nNext\n\nn\n\nlines contain two integers s_i and d_i (1 \u2264 s_i, d_i \u2264 1000).\n\nIt is guaranteed that\n\n1\n\n\u2264\n\ns_i\n\n<\n\ns_i + d_i\n\n\u2264\n\nn\n\nfor each valid i (1 \u2264 i \u2264 n).\n\nIt is also guaranteed that\n\ns_1\n\n\u2264\n\ns_2\n\n<\n\ns_3\n\n<\n\n.\n\n.\n\n.\n\ns_n\n\n\u2264\n\ns_n + d_n\n\n\u2264\n\nn\n\n(for each valid i (1 \u2264 i \u2264 n)).\n\nThe doctor's appointments take a long time, so Borya can not see more than one doctor per day. What is the minimum time he needs to visit all doctors?\n\nInput\n3\n\n1 2\n\n3 1\n\n5 3\n\nOutput\n\n2\n\nExplanation\n\nIn the first sample case, Borya needs to visit all doctors on the days 1 and 2.\n\nIn the second sample case, Borya needs to visit all doctors on the days 3 and 4.\n\nIn the third sample case, Borya needs to visit all doctors on the days 5, 6 and 7.\n\"\"\""
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 2\\n1 2') == '4'\n"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 2\\n1 2\\n2 2') == '4'\nassert solution('2\\n10 1\\n6 5') == '11'\n"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n1 2\\n2 2') == 4\nassert solution('10 1\\n6 5') == 11\n\n\"\"\"\n\nimport sys\nimport os\n\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom utils.decorators import time_track\nfrom collections import deque\n"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 2\\n1 2\") == '4'\nassert solution(\"2\\n10 1\\n6 5\") == '11'\n\"\"\"\n\n\"\"\"\nIf we want to visit all doctors at least once, we should visit them in this order:\n\n1) the doctor 1\n2) the doctor 2\n3) the doctor 3\n4) the doctor 1\n5) the doctor 2\n6) the doctor 3\n7) the doctor 1\n8) the doctor 2\n9) the doctor 3\n10) the doctor 1\n11) the doctor 2\n12) the doctor 3\n\n=> 13 days\n\"\"\"\n\nn = int(input())\ns = []\nd = []\nfor _ in range(n):\n    s.append(int(input().split(' ')[0]))\n    d.append(int(input().split(' ')[1]))\n\nvisits = 1\ncurr = 0\nfor i in range(len(s)):\n    if curr + d[i] > s[i]:\n        visits += 1\n        curr = 0\n    curr += d[i]\n\nprint(visits)"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('\\n1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 2') == 4\nassert solution('2\\n10 1') == 11\n\n-----Problem-----\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nfor i in range(n):\n    line = sys.stdin.readline().split()\n    print(int(line[0]) + int(line[1]))"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 2\\n2 2\") == 4\nassert solution(\"3 2\\n1 2\\n2 2\") == 5\n\"\"\""
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2\\n2 2\") == 4\nassert solution(\"10 1\\n6 5\") == 11\nassert solution(\"4 1\\n2 1\\n4 1\") == 4\nassert solution(\"4 1\\n5 1\\n1 1\\n4 1\") == 4\nassert solution(\"5 1\\n1 1\\n4 1\\n5 1\\n1 1\") == 4\n"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2\") == 4\n\nassert solution(\"10 1\\n6 5\") == 11"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('179') == '1'\nassert solution('-1') == '9'\nassert solution('18') == '10'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n-----\n1. Write a program that outputs the number of times a character appears in a string. For example, if the string is \"abcaabcc\" and the character is \"b\", the program should output  4.\n\n2. Given an integer N, output its decimal representation. For example, if N = 1234, the program should output  4.\n\n3. The sequence of English lowercase letters is known as the English alphabet. Given a string of length  that represents a word, print the position of the word in the alphabet. For example, \"cat\" is the letter  at position, \"ant\" is the letter  at position, and \"apple\" is the letter  at position.\n\n4. Given a string, print the character that has the most occurrences in the string. If there is a tie, print the character that has the second most occurrences. If there is a tie, print the character that has the least occurrences.\n\n5. Given a string, print the last character that is repeated in the string. If there is no character that is repeated in the string, print  (without quotes).\n\n6. Given a string, print the longest substring without repeating characters. For example, if the string is \"abcaaddddccbddd\", the program should output  ddd\n\n7. You are given a string. The program should check if the string consists of the same letters but in different order. For example, \"cba\" and \"abca\" are such strings.\n\n8. Given a string, print how many times a character appears in the string.\n\n9. You are given a string. Check if the string consists of only lowercase English letters.\n\n10. You are given a string with the following rules:\n\nThe string length is at least 2.\nIf the string length is even, the string is divided into two parts of lengths  and. The string is called balanced if:\n\nThe following two sides have the same number of characters:.\nThe following two sides have the same number of occurrences of each character:.\nPrint YES if the string is balanced or NO if it is not.\n\n11. You are given a string. Check if the string is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n\n12. There is a single-threaded CPU in your device. A non-negative integer x is given. On each CPU cycle, you are allowed to increase x by one. Write a program that computes the minimum number of CPU cycles needed to make x equal or greater than a given integer y.\n\n13. You are given three integers:,, and. Write a program to determine whether a triangle can be built with those lengths and angles.\n\n14. The sum of the squares of the first two sides is equal to the square of the hypotenuse. Given integers a, b, and c, determine whether the triangle with sides of lengths a, b, and c is a right triangle.\n\n15. The ratio of the first and second largest side is called the sine of the angle. The ratio of the second and largest side is called the cosine of the angle. Given integers a, b and c, you have to write a program to check whether the triangle with sides of lengths a, b, and c is an acute triangle, right triangle, obtuse triangle, or impossible triangle.\n\n16. You are given an array of N integers, A1, A2,..., AN. Return the length of the longest increasing subsequence (not necessarily contiguous) in the array.\n\n17. You are given an array of N integers, A1, A2,..., AN. Return the length of the longest decreasing subsequence (not necessarily contiguous) in the array.\n\n18. You are given an array of N integers, A1, A2,..., AN. Return the length of the longest subsequence of even integers in the array.\n\n19. You are given an array of N integers, A1, A2,..., AN. Return the length of the longest subsequence of odd integers in the array.\n\n20. Given an array of integers, return the length of the longest sequence of consecutive zeroes. A sequence of zero starts at the first integer in the array and ends at the first integer that is nonzero.\n\n21. Given an array of integers, return the length of the longest sequence of consecutive ones. A sequence of ones starts at the first integer in the array and ends at the first integer that is not one.\n\n22. Given an array of integers, return the length of the longest sequence of consecutive twos. A sequence of twos starts at the first integer in the array and ends at the first integer that is not two.\n\n23. Given an array of integers, return the length of the longest sequence of consecutive threes. A sequence of threes starts at the first integer in the array and ends at the first integer that is not three.\n\n24. Given an array of integers, return the length of the longest sequence of consecutive fours. A sequence of fours starts at the first integer in the array and ends at the first integer that is not four.\n\n25. Given an array of integers, return the length of the longest sequence of consecutive fives. A sequence of fives starts at the first integer in the array and ends at the first integer that is not five.\n\n26. Given an array of integers, return the length of the longest sequence of consecutive sixes. A sequence of sixes starts at the first integer in the array and ends at the first integer that is not six.\n\n27. Given an array of integers, return the length of the longest sequence of consecutive evens. A sequence of evens starts at the first integer in the array and ends at the first integer that is not even.\n\n28. Given an array of integers, return the length of the longest sequence of consecutive odds. A sequence of odds starts at the first integer in the array and ends at the first integer that is not odd.\n\n29. Given an array of integers, return the length of the longest sequence of consecutive primes. A sequence of primes starts at the first integer in the array and ends at the first integer that is not prime.\n\n30. Given an array A of N positive integers, the task is to print the maximum sum of the subarray such that the absolute difference between the maximum and minimum of the subarray is equal to 1.\n\n31. Given an array A of N positive integers. The task is to find the sum of the maximum sum subsequence of the given array. The maximum sum subsequence is defined as the subsequence which has the maximum sum. If there are multiple subsequences having the same sum, then print the one which occurs first in the array.\n\n32. Given an array of integers, A, print the index of values that satisfy the following conditions:\n\nindex1 < index2 <... < indexk\n0 < A[index1] + A[index2] +... + A[indexk] < 10\nThe indices must be printed in increasing order of their values. If no such triplet is found, print the text \"NO\" (without quotes).\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('179') == '1'\nassert solution('-1') == '9'\nassert solution('18') == '10'\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('179') == '1'\nassert solution('-1') == '9'\nassert solution('18') == '10'\n\"\"\"\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('179') == '1'\nassert solution('-1') == '9'\nassert solution('18') == '10'\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"179\") == \"1\"\nassert solution(\"-1\") == \"9\"\nassert solution(\"18\") == \"10\"\n\"\"\"\nimport math"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"19\"\nassert solution(\"2\") == \"28\"\n"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"19\"\nassert solution(\"2\") == \"28\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 19\nassert solution('2') == 28\nprint(solution('1'))\n\n\"\"\""
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"19\"\nassert solution(\"2\") == \"28\"\n"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"13\"\nassert solution(\"4\") == \"11\"\nassert solution(\"8\") == \"14\"\n\"\"\"\nfrom tools import timing"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"19\"\nassert solution(\"2\") == \"28\"\n\"\"\"\n"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"28\"\n\nassert solution(\"3\") == \"19\"\n"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '19'\nassert solution('2') == '28'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"19\"\nassert solution(\"2\") == \"28\"\n\n\n\"\"\""
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == '28'\nassert solution('1') == '19'\n\"\"\"\nfrom math import sqrt\n\nn = int(input())\n\nk = 0\nans = 0\nwhile k < n:\n    k += 1\n    ans += int(sqrt(k))\n\nprint(ans)"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\") == \"2\"\n\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\") == \"2\"\nassert solution(\"3\\n0 0\\n0 0\\n0 0\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\\n\") == \"2\"\nassert solution(\"1\\n5 4\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == 2\nassert solution(\"3 1\") == 3\nassert solution(\"3 4\") == 5"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\") == \"2\"\nassert solution(\"3\\n0 0\\n0 0\\n0 0\") == \"1\"\nassert solution(\"1\\n5 4\") == \"5\"\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\") == \"2\"\nassert solution(\"3\\n0 0\\n0 0\\n0 0\") == \"1\"\nassert solution(\"1\\n5 4\") == \"5\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\\n\") == 2\n\"\"\"\n\n\"\"\"\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432. \u041f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u0431\u044a\u0435\u043c \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c\n\u043a\u0430\u043a \"\u0433\u043e\u0440\u043e\u0434 A \u0438\u043c\u0435\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f, \u0433\u043e\u0440\u043e\u0434 B \u0438\u043c\u0435\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f, \u0433\u043e\u0440\u043e\u0434 C \u0438\u043c\u0435\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f, \u0438 \u0442. \u0434.\" \u0438\u043b\u0438 \"\u0433\u043e\u0440\u043e\u0434 A \u0438\u043c\u0435\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f, \u0433\u043e\u0440\u043e\u0434 B \u0438\u043c\u0435\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f, \u0433\u043e\u0440\u043e\u0434 C \u0438\u043c\u0435\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f, \u0438 \u0442. \u0434.\" \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0431\u044a\u0435\u043c\u0430\u043c \u0442\u043e\u043f\u043b\u0438\u0432\u0430. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0431\u044a\u0435\u043c\u0430 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u0442\u043e\u043f\u043b\u0438\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0432 \u0438\u0445 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0445.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e N (0 < N \u2264 1000) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0440\u043e\u0434\u043e\u0432, \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0442 1 \u0434\u043e 10 \u043c\u043b\u043d \u0438 \u043e\u0431\u044a\u0435\u043c \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u043e\u0432 \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043d\u0438\u0445, \u0430 \u0432\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 N \u043f\u0430\u0440 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430. \u0421\u0432\u0435\u0440\u0445\u0443 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0431\u044a\u0435\u043c\u0430 \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u043f\u043e\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u0430 \u0441\u043d\u0438\u0437\u0443 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0431\u044a\u0435\u043c\u0430 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u043e\u0432 \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u043f\u043e\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0431\u044a\u0435\u043c\u0430 \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u0442\u043e\u043f\u043b\u0438\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 \u0438\u0445 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0445.\n\n\u0412\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0432\u0441\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432 \u0442\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0438\u0434\u0443\u0442 \u0433\u043e\u0440\u043e\u0434\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0438 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u044b \u0442\u043e\u043f\u043b\u0438\u0432\u0430. \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0433\u043e \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u0441\u0442\u044c.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n3\n2 0\n3 1\n3 4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1 1 1\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n4\n0 0\n0 0\n0 0\n0 0\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1 1 1\n\"\"\""
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0\\n0 0\\n0 0\") == \"1\"\nassert solution(\"3\\n0 0\\n3 1\\n3 4\") == \"2\"\nassert solution(\"1\\n5 4\") == \"5\"\nassert solution(\"3\\n0 0\\n3 1\\n3 4\") == \"2\"\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n3 4\") == \"2\"\nassert solution(\"1\\n5 4\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n2 1\\n10') == '-5'\nprint('Test 1 OK')\nassert solution('1 1\\n1\\n1') == '0'\nprint('Test 2 OK')\nassert solution('1 1\\n1\\n2') == '2'\nprint('Test 3 OK')"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n2 1\\n10') == '-5'\nassert solution('2 1\\n2 1\\n1') == '3'"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n2 1\\n10\") == \"3\"\nassert solution(\"2 1\\n2 1\\n100\") == \"-5\"\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n2 1\\n10\\n\") == 3\n\n\"\"\""
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open(\"input.txt\").read()) == '7\\n'\nprint('Test PASSED')\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n2 1\\n2\\n\") == 3\n\nassert solution(\"2 1\\n2 1\\n10\\n\") == -5\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n2 1\\n10\") == -5\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 1\n2 1\n2''') == '3'\nassert solution('''2 1\n2 1\n10''') == '-5'\nassert solution('''3 1\n2 1\n10''') == '-8'\nassert solution('''2 1\n10 1\n10''') == '-9'\nassert solution('''1 1\n2''') == '1'\n\n\"\"\""
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n2 1\\n10') == '-5'\nassert solution('1 1\\n2 1\\n2') == '0'\nassert solution('2 1\\n5\\n2') == '-1'\nassert solution('10 9\\n10\\n5\\n8\\n7\\n5\\n5\\n5\\n5\\n4\\n4\\n3\\n3\\n3') == '7'\nassert solution('10 9\\n10\\n5\\n8\\n7\\n5\\n5\\n5\\n5\\n4\\n4\\n3\\n3\\n3') == '7'\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n2 1\\n2\\n\") == \"3\"\nassert solution(\"2 1\\n2 1\\n10\\n\") == \"-5\"\n\"\"\"\nimport sys\n\nstdin = sys.stdin\n\nn, d = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\nm = int(stdin.readline())\n\nmoney = 0\n\nfor i in range(m):\n    hooks = n\n    for j in range(n):\n        if a[j] < hooks:\n            money += d\n            hooks -= 1\n            break\n    else:\n        money -= d\n\nprint(money)\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"IAO'9\\n\"\n    \"IAO'99\\n\"\n    \"IAO'999\\n\"\n    \"IAO'9999\"\n    ) == \"1989\\n1999\\n2999\\n9999\""
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"IAO'9\\nIAO'99\\nIAO'999\\nIAO'9999\") == \"1989\\n1999\\n2999\\n9999\"\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"IAO'15\") == \"2015\"\nassert solution(\"IAO'9\") == \"1989\"\nassert solution(\"IAO'0\") == \"1990\"\nassert solution(\"IAO'1\") == \"1991\"\nassert solution(\"IAO'99\") == \"1999\"\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"IAO'9\\nIAO'99\\nIAO'999\\nIAO'9999\") == '1989\\n1999\\n2999\\n9999'\nassert solution('IAO\"99\\nIAO\"999\\nIAO\"9999') == '1989\\n1999\\n2999\\n9999'\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('IAO' '9') == '1989'\nassert solution('IAO' '0') == '1990'\nassert solution('IAO' '1') == '1991'\nassert solution('IAO' '15') == '2015'\nassert solution('IAO' '5') == '1995'"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"IAO'9\\nIAO'99\\nIAO'999\\nIAO'9999\") == \"1989\"\nassert solution(\"IAO'9\\nIAO'0\\nIAO'15\") == \"1991\"\nassert solution(\"IAO'9\\nIAO'01\\nIAO'3\") == \"1990\"\nassert solution(\"IAO'9\\nIAO'010\\nIAO'03\") == \"1992\"\nassert solution(\"IAO'9\\nIAO'00\\nIAO'03\") == \"1989\"\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"1\\nIAO'9\\nIAO'0\\nIAO'1\\nIAO'5\\nIAO'15\\nIAO'3\\nIAO'8\\nIAO'1\\nIAO'5\\nIAO'8\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'5\\nIAO'2\\nIAO'9\\nIAO'9\\nIAO'9\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'9\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'9\\nIAO'9\\nIAO'9\\nIAO'8\\nIAO'0\\nIAO'1\\nIAO'2\\nIAO'1\\nIAO'2\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'9\\nIAO'1\\nIAO'9\\nIAO'9\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'9\\nIAO'0\\nIAO'1\\nIAO'2\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'9\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'9\\nIAO'1\\nIAO'9\\nIAO'8\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'9\\nIAO'1\\nIAO'1\\nIAO'9\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'9\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'1\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'1\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO'0\\nIAO"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('IAO' * 5) == '151515'\nassert solution('IAO' * 4) == '199119911991'\n\"\"\""
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\nIAO'15\nIAO'2015\nIAO'1\nIAO'9\nIAO'0''') == '2015\\n12015\\n1991\\n1989\\n1990'\nassert solution('''4\nIAO'9\nIAO'99\nIAO'999\nIAO'9999''') == '1989\\n1999\\n2999\\n9999'"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"IAO'9\\nIAO'99\\nIAO'999\\nIAO'9999\") == \"1989\"\nassert solution(\"IAO'15\\nIAO'2015\\nIAO'1\\nIAO'9\\nIAO'0\") == \"2015\"\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == 180\nassert solution(\"3\\n3 1\\n2 2\\n4 3\") == 21\n\"\"\"\n\nl = int(input())\nres = 0\n\nfor _ in range(l):\n    w, h = map(int, input().split())\n    res += w * h\n\nprint(res)\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n10 1\n20 2\n30 3\"\"\") == \"180\"\nassert solution(\"\"\"3\n3 1\n2 2\n4 3\"\"\") == \"21\"\nassert solution(\"\"\"1\n5 10\"\"\") == \"50\"\n\n\"\"\"\n\nn = int(input())\n\ns = 0\n\nfor _ in range(n):\n    w, h = map(int, input().split())\n    s += w * h\n\nprint(s)\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == \"180\"\nassert solution(\"3\\n3 1\\n2 2\\n4 3\") == \"21\"\nassert solution(\"1\\n5 10\") == \"50\"\n\"\"\"\n\nn = int(input())\n\nlst = []\nfor _ in range(n):\n    lst.append(list(map(int, input().split())))\n\nmin_w, max_w = -1, -1\nmin_h, max_h = -1, -1\n\nfor i in range(n):\n    w = lst[i][0]\n    h = lst[i][1]\n    min_w = max(min_w, w)\n    max_w = max(max_w, w)\n    min_h = max(min_h, h)\n    max_h = max(max_h, h)\n\nlst.sort(key=lambda x: x[0]*x[1])\n\nres = 0\ncnt = 0\nfor i in range(n):\n    w = lst[i][0]\n    h = lst[i][1]\n    if max_w*max_h - res < w*h:\n        break\n    res += w*h\n    cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n10 1\n20 2\n30 3\"\"\") == \"180\"\nassert solution(\"\"\"3\n3 1\n2 2\n4 3\"\"\") == \"21\"\n\nimport os\nimport io\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == \"180\"\nassert solution(\"3\\n3 1\\n2 2\\n4 3\") == \"21\"\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\") == \"180\"\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n3 4\\n5 6\\n7 8\\n10 11\\n12 13\\n14 15\\n16 17\") == \"21\"\n\"\"\"\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 180\n\n\"\"\"\n\nn = int(input().strip())\nw, h = [], []\n\nfor _ in range(n):\n    wi, hi = map(int, input().strip().split())\n    w.append(wi)\n    h.append(hi)\n\nw = sorted(w, reverse=True)\nh = sorted(h, reverse=True)\n\nans = 0\nfor i in range(n):\n    ans += w[i] * h[i]\n\nprint(ans)"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n10 1\n20 2\n30 3''') == '180'\n\nassert solution('''3\n3 1\n2 2\n4 3''') == '21'\n\nassert solution('''1\n5 10''') == '50'\nassert solution('''2\n1\n1''') == '1'\n\nassert solution('''3\n10 5\n1 10\n5 1\n1 5''') == '15'\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\\n\") == \"180\"\nassert solution(\"3\\n3 1\\n2 2\\n4 3\\n\") == \"21\"\n\"\"\"\n\n\"\"\"\n\u0412 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u0439 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u0445\u043e\u0442\u0435\u043b\u043a\u0438. \u0421\u0435\u0439\u0447\u0430\u0441 \u0432\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0433\u043e \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0438 \u0441\u0442\u0440\u043e\u0433\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u0438. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u043d\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0446\u0438\u0444\u0440. \u0412 \u0441\u0442\u0440\u043e\u043a\u0443 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b \u00ab#\u00bb, \u043f\u043e\u043c\u0435\u0447\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0447\u0430\u043b\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0433\u043e \u043a\u0443\u0441\u043a\u0430. \u0422\u0430\u043a\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0438 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0442 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0432\u0441\u0435 \u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0435 \u043a\u0443\u0441\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3\\n7 7 7') == '0'\nassert solution('6 3\\n1 3 4 6 9 10') == '3'\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\\n1 3 4 6 9 10\") == \"3\"\nassert solution(\"7 0\\n7 7 7\") == \"0\"\nassert solution(\"2 1\\n2 1 4\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 1\n2 1 4''') == '1'\nassert solution('''3 0\n7 7 7''') == '0'\nassert solution('''6 3\n1 3 4 6 9 10''') == '3'\nassert solution('''4 0\n2 0 4 0''') == '0'\nassert solution('''5 3\n0 0 0 0 1''') == '1'\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n2 1 4\\n\") == '1'\nassert solution(\"3 0\\n7 7 7\\n\") == '0'\nassert solution(\"6 3\\n1 3 4 6 9 10\\n\") == '3'\n\n---\n\"\"\"\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 4\") == \"1\"\nassert solution(\"3 0\") == \"0\"\nassert solution(\"6 3\") == \"3\""
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\\n1 3 4 6 9 10\") == 3\nassert solution(\"7 7 7\\n7 7 7\") == 0\nassert solution(\"3 1\\n2 1 4\") == 1"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n2 1 4\") == '1'\nassert solution(\"3 0\\n7 7 7\") == '0'\nassert solution(\"6 3\\n1 3 4 6 9 10\") == '3'\n\n\"\"\"\n\nn, d = [int(x) for x in stdin.readline().split()]\npoints = [int(x) for x in stdin.readline().split()]\npoints.sort()\nprev = 0\ncurr_d = 0\ncount = 0\n\nfor x in points:\n    if x - prev <= d:\n        curr_d = x - prev\n        count += 1\n    else:\n        break\n    prev = x\n\nprint(count)\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n3\\n2\\n1\") == 1\nassert solution(\"0\\n7\\n7\\n7\") == 0\nassert solution(\"3 1\\n7 7 7\") == 3\n\"\"\"\n\nn, d = map(int, input().split())\npoints = list(map(int, input().split()))\n\npoints.sort()"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n2 1 4') == '1'\nassert solution('3 0\\n7 7 7') == '0'\nassert solution('6 3\\n1 3 4 6 9 10') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 4\\n7') == 1\nassert solution('3 0\\n7 7 7') == 0\nassert solution('6 3\\n1 3 4 6 9 10') == 3"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\nW W\\nW W\\nB B\") == '#Black&White\\n'\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '#Black&White'\nassert solution('W W W W\\nW W W W') == '#Black&White'\nassert solution('W W\\nW W\\nW W\\nW W') == '#Black&White'\nassert solution('W W W W\\nW W W W') == '#Color'\nassert solution('W W W W\\nW W W B') == '#Color'\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\nC M\\nY Y\\n\") == \"#Color\"\nassert solution(\"1 1\\nW\\n\") == \"#Black&White\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\nC M\\nY Y\\n\") == \"#Color\"\nassert solution(\"1 1\\nW\\n\") == \"#Black&White\"\nassert solution(\"3 2\\nW W\\nW W\\nB B\\n\") == \"#Black&White\"\nprint(solution(\"2 2\\nC M\\nY Y\\n\"))\nprint(solution(\"3 2\\nW W\\nW W\\nB B\\n\"))"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\nC M\\nY Y\\n') == '#Color'\nassert solution('3 2\\nW W\\nW W\\nB B\\n') == '#Black&White'\nassert solution('1 1\\nW\\n') == '#Black&White'\n\"\"\""
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\nC M\\nY Y\\n') == '#Color'\nassert solution('3 2\\nW W\\nW W\\nB B\\n') == '#Black&White'\n\"\"\"\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\nC M\\nY Y\\n\") == \"#Color\"\nassert solution(\"3 2\\nW W\\nW W\\nB B\\n\") == \"#Black&White\"\nassert solution(\"1 1\\nW\\n\") == \"#Black&White\"\nassert solution(\"1 1\\nY\\n\") == \"#Color\"\n\nimport re"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\nC M\\nY Y\\n\") == \"#Color\"\nassert solution(\"3 2\\nW W\\nW W\\nB B\") == \"#Black&White\"\nassert solution(\"1 1\\nW\\n\") == \"#Black&White\"\n\"\"\""
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\nC M\\nY Y') == '#Color\\n'\nassert solution('3 2\\nW W\\nW W\\nB B') == '#Black&White\\n'\nassert solution('1 1\\nW') == '#Black&White\\n'\nassert solution('1 1\\nC') == '#Color\\n'\n\nprint('Success')"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\nC M\\nY Y\\n') == '#Color'\nassert solution('3 2\\nW W\\nW W\\nB B\\n') == '#Black&White'\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"4 3\", \"-3 2 9 16\"]) == \"6\"\nassert solution([\"5 2\", \"4 8 11 18 19\"]) == \"5\""
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n-3 2 9 16\") == '6'\nassert solution(\"5 2\\n4 8 11 18 19\") == '5'\n\"\"\""
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n-3 2 9 16\") == 6\nassert solution(\"5 2\\n4 8 11 18 19\") == 5\nassert solution(\"2 5 10 20\\n1 5 9\\n3 4\\n1 5 9\") == 5\nassert solution(\"1 5\\n3 4\") == 1\nassert solution(\"1 5\\n2 5\") == 1\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n-3 2 9 16\") == \"6\"\nassert solution(\"5 2\\n4 8 11 18 19\") == \"5\"\nassert solution(\"6 3\\n1 2 3 4 5 6\") == \"3\""
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n-3 2 9 16') == '6'\nassert solution('5 2\\n4 8 11 18 19') == '5'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"5 2\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"5 2\") == \"5\"\nassert solution(\"4 8 11 18 19\") == \"5\"\nassert solution(\"4 8 11 18 19\") == \"5\"\nassert solution(\"4 8 11 18 19\") == \"5\"\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n-3 2 9 16\") == \"6\"\nassert solution(\"5 2\\n4 8 11 18 19\") == \"5\"\nassert solution(\"6 4\\n1 3 3 6 8 10\") == \"1\"\nassert solution(\"7 3\\n1 2 3 4 6 8 11\") == \"0\"\n\"\"\"\n\nn, d = map(int, input().split())\nx = list(map(int, input().split()))\n\nx.sort()\n\ncount = 1\nfor i in range(n - 1):\n    if x[i + 1] - x[i] > d:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n-3 2 9 16') == '6'\nassert solution('5 2\\n4 8 11 18 19') == '5'\n\"\"\"\n\nn, d = map(int, input().split())\nx = list(map(int, input().split()))\n\nres = 0\n\nfor i in range(len(x) - 1):\n    if x[i + 1] - x[i] >= d:\n        res += 1\n\nprint(res + 1)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n-3 2 9 16\") == \"6\"\n\"\"\""
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 5 2\") == \"2\"\nassert solution(\"5 6 3 4 1 5\") == \"5\"\nassert solution(\"8 4 4 2 2 100 100 100\") == \"3\"\nassert solution(\"6 10 50 10 50 50\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 5 2\") == 2\nassert solution(\"5 6 3 4 1 5\") == 5\nassert solution(\"8 4 4 2 2 100 100 100\") == 3\nassert solution(\"6 10 50 10 50 50\") == 4\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 5 2') == '2'\nassert solution('5 6 3 4 1 5') == '5'\nassert solution('8 4 4 2 2 100 100 100') == '3'\nassert solution('6 10 50 10 50 50') == '4'\n\"\"\"\n\nimport sys\nimport os\nfrom typing import List"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5 5 2') == '2'\nassert solution('5 6 3 4 1 5') == '5'\nassert solution('8 4 4 2 2 100 100 100') == '3'\nassert solution('6 10 50 10 50 50') == '4'\nassert solution('10 10 50 10 50 50') == '4'\n"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 5 2\") == \"2\"\nassert solution(\"6 3 4 1 5\") == \"5\"\nassert solution(\"8 4 4 2 2 100 100 100\") == \"3\"\nassert solution(\"6 10 50 10 50 50\") == \"4\"\nassert solution(\"10 10 50 10 50 50\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 5 2\") == \"2\"\nassert solution(\"5 6 3 4 1 5\") == \"5\"\nassert solution(\"8 4 4 2 2 100 100 100\") == \"3\"\nassert solution(\"6 10 50 10 50 50\") == \"4\"\n\nassert solution(\"6 4 4 2 2 100 100 100\") == \"4\"\n"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 5 2\") == \"2\"\nassert solution(\"5 6 3 4 1 5\") == \"5\"\nassert solution(\"8 4 4 2 2 100 100 100\") == \"3\"\nassert solution(\"6 10 50 10 50 50\") == \"4\"\nassert solution(\"10 10 50 10 50 50\") == \"0\""
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 5 5 2') == '2'\nassert solution('5\\n6 3 4 1 5') == '5'\nassert solution('8\\n4 4 4 2 2 100 100 100') == '3'\nassert solution('6\\n10 10 50 10 50 50') == '4'\nassert solution('7\\n1 1 1 1 1 1 1 1') == '0'\n"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 5 2') == '2'\nassert solution('5 6 3 4 1 5') == '5'\nassert solution('8 4 4 2 2 100 100 100') == '3'\nassert solution('6 10 50 10 50 50') == '4'"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 5 2\") == 2\nassert solution(\"5 6 3 4 1 5\") == 5\nassert solution(\"6 3 4 1 5\") == 4\n\n\"\"\""
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 11 2 8\") == \"4\"\nassert solution(\"1 8 8 8\") == \"6\"\nassert solution(\"7 6\") == \"0\"\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 11 2 8\") == 4\nassert solution(\"4 1 8 8 8\") == 6\nassert solution(\"2 7 6\") == 0\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 11 2 8\") == 4\nassert solution(\"7 6\") == 0\nassert solution(\"4 1 8 8 8\") == 6\n\"\"\"\n\nn = int(stdin.readline().strip())\nnums = [int(x) for x in stdin.readline().strip().split(\" \")]\n\nmy_min = 0\n\nfor i in range(n):\n    if nums[i] > my_min:\n        my_min = nums[i]\n\nprint(my_min)\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 6\") == \"0\"\nassert solution(\"11 7 18 8 16\") == \"4\"\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 11 2 8') == '4'\nassert solution('4 1 8 8 8') == '6'\nassert solution('7 6') == '0'\n\n\"\"\""
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 11 2 8\") == \"4\"\nassert solution(\"4 1 8 8 8\") == \"6\"\nassert solution(\"7 6\") == \"0\"\nassert solution(\"2 7 6\") == \"0\"\nassert solution(\"\") == \"0\""
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 1 1 1\\n\") == \"4\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"6\"\nassert solution(\"2\\n7 6\\n\") == \"0\"\n\nprint(\"Test Completed\")\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 11 2 8\") == \"4\"\nassert solution(\"4 8 8 8\") == \"6\"\nassert solution(\"7 6\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 11 2 8\") == \"4\"\nassert solution(\"4 8 8 8\") == \"6\"\nassert solution(\"7 6\") == \"0\"\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n5 1 11 2 8') == '4'\nassert solution('4\\n1 8 8 8') == '6'\nassert solution('2\\n7 6') == '0'\nassert solution('3\\n5 4 8 10') == '5'\nassert solution('1\\n6 8 8') == '0'\n\nimport math"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"YES\\ncode\"\nassert solution(\"aaaaa\") == \"NO\"\n\"\"\"\n\nn = int(stdin.readline())\ns = stdin.readline()\n\ncharacters = {}\n\nfor character in s:\n    if character in characters:\n        characters[character] += 1\n    else:\n        characters[character] = 1\n\nresult = \"YES\"\n\nfor character in characters.keys():\n    if characters[character] > len(s)//2:\n        result = \"NO\"\n\nprint(result)\n\nfor character in characters.keys():\n    if characters[character] > len(s)//2:\n        print(character, end='')\nprint()\n"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\nassert solution('a') == 'NO'\nassert solution('ab') == 'NO'\nassert solution('abb') == 'NO'\nassert solution('abbbbbbb') == 'NO'\n"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"YES\\ncodeforces\"\nassert solution(\"aaaaa\") == \"NO\"\n\"\"\""
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') == 'YES\\ncode'\nassert solution('aabb') == 'NO'\nassert solution('abb') == 'NO'\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n10\ncodeforces\n''') == 'YES\\ncode'\n\nassert solution('''\n5\naaaaa\n''') == 'NO'\n\nassert solution('''\n100\nzxyzabcdefghijk\n''') == 'NO'\n\nassert solution('''\n10\nzxyzabcdefghijk\n''') == 'YES\\nzxyz'\n\nassert solution('''\n1000\nxwwwwwwwwwwwww\n''') == 'NO'"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"YES\"\nassert solution(\"aaaaa\") == \"NO\"\n"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\n-----Explanation-----\n\nstring = \"codeforces\"\n\ndiversity_in_the_string = [\n    \"codeforces\",\n    \"code\",\n    \"c\",\n    \"f\",\n    \"e\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c\",\n    \"e\",\n    \"c\",\n    \"f\",\n    \"o\",\n    \"r\",\n    \"c"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"codeforces\"\n) == \"code\"\n\nassert solution(\n\"aaaaa\"\n) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"YES\\ncode\"\nassert solution(\"aaaaa\") == \"NO\"\n\nprint(solution(\"aaaaa\"))\nprint(solution(\"codeforces\"))"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"YES\\ncode\"\n\"\"\"\n\n\nimport collections\nimport sys"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\") == [\n    'O.O.O.#.#.#.#.#.#.#.',\n    'O.O.O.#.#.#.#.#.#.#.',\n    'O....................',\n    'O.O.#.#.#.#.#.#.#.#.',\n    'O.O.O.#.#.#.#.#.#.#.',\n    'O.O.O.O.O.O.O.#.#.',\n    'O.O.O.O.O.O.O.#.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O.#.',\n    'O.O.O.O.O.O.O.O."
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\") == \"\"\"+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n20\n\nOutput\n+------------------------+\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n29\n\nOutput\n+------------------------+\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n35\n\nOutput\n+------------------------+\n|O.O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n0\n\nOutput\n+------------------------+\n|O.O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.#.#.#.#.#.|.|\n|O.......................|\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n3\n\nOutput\n+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n2\n\nOutput\n+------------------------+\n|O.O.#.#.#.#.#.#.#.#.#.|D|)\n|O.O.#.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.#.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n1\n\nOutput\n+------------------------+\n|O.#.#.#.#.#.#.#.#.#.#.|D|)\n|O.#.#.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.#.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n0\n\nOutput\n+------------------------+\n|O.#.#.#.#.#.#.#.#.#.#.|D|)\n|O.#.#.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.#.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n1\n\nOutput\n+------------------------+\n|O.O.#.#.#.#.#.#.#.#.#.|D|)\n|O.O.#.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.#.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n1\n\nOutput\n+------------------------+\n|O.O.#.#.#.#.#.#.#.#.#.|D|)\n|O.O.#.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.#.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n20\n\nOutput\n+------------------------+\n|O.O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n4\n\nOutput\n+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n4\n\nOutput\n+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n4\n\nOutput\n+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n4\n\nOutput\n+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n4\n\nOutput\n+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\"\n\nInput\n4\n\nOutput\n+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.#.#.#.#.#.#.|.|)\n+------------------------+\n\"\"\"\n\"\"\""
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9') == (\n    \"+------------------------+\\n\"\n    \"|O.O.O.#.#.#.#.#.#.#.#.|D|)\\n\"\n    \"|O.O.O.#.#.#.#.#.#.#.#.|.|\\n\"\n    \"|O.......................|\\n\"\n    \"|O.O.#.#.#.#.#.#.#.#.#.|.|)\\n\"\n    \"+------------------------+\")\n\nassert solution('20') == (\n    \"+------------------------+\\n\"\n    \"|O.O.O.O.O.O.O.#.#.#.#.|D|)\\n\"\n    \"|O.O.O.O.O.O.#.#.#.#.#.|.|\\n\"\n    \"|O.......................|\\n\"\n    \"|O.O.O.O.O.O.#.#.#.#.#.|.|)\\n\"\n    \"+------------------------+\")\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9') == \\\n    '+------------------------+\\n' \\\n    '|O.O.O.#.#.#.#.#.#.#.#.|D|)\\n' \\\n    '|O.O.O.#.#.#.#.#.#.#.#.|.|\\n' \\\n    '|O.......................|\\n' \\\n    '|O.O.#.#.#.#.#.#.#.#.#.|.|)\\n' \\\n    '+------------------------+'\n\nassert solution('20') == \\\n    '+------------------------+\\n' \\\n    '|O.O.O.O.O.O.O.#.#.#.#.|D|)\\n' \\\n    '|O.O.O.O.O.O.#.#.#.#.#.|.|\\n' \\\n    '|O.......................|\\n' \\\n    '|O.O.O.O.O.#.#.#.#.#.#.|.|)\\n' \\\n    '+------------------------+'\n\nassert solution('1') == \\\n    '+------------------------+\\n' \\\n    '|O.#.#.#.#.#.#.#.#.#.#.#.|D|)\\n' \\\n    '+------------------------+'\n\nassert solution('0') == \\\n    '+------------------------+\\n' \\\n    '|.......................|\\n' \\\n    '+------------------------+'\n\nassert solution('35') == \\\n    '+------------------------+\\n' \\\n    '|.......................|\\n' \\\n    '+------------------------+'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\") == \"+------------------------+\\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\\n|O.O.O.#.#.#.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\\n+------------------------+\"\nassert solution(\"20\") == \"+------------------------+\\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\\n|O.O.O.O.O.O.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.O.O.O.#.#.#.#.#.#.|.|)\\n+------------------------+\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == \"\"\nassert solution('1') == '#'\nassert solution('10') == '#O'\nassert solution('34') == '#.O'\nassert solution('35') == '#.O.O'\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9') == '\\n+------------------------+\\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\\n|O.O.O.#.#.#.#.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.#.#.#.#.#.#.#.#.#.#.|.|)\\n+------------------------+'\nassert solution('20') == '\\n+------------------------+\\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\\n|O.O.O.O.O.O.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.O.O.O.O.#.#.#.#.#.|.|)\\n+------------------------+'\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9') == \"\"\"+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\"\"\"\nassert solution('20') == \"\"\"+------------------------+\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.#.#.#.#.#.|.|)\n+------------------------+\"\"\"\nprint('Passed all tests...')\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\") == \"+------------------------+\\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\\n|O.O.O.#.#.#.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\\n+------------------------+\"\nassert solution(\"20\") == \"+------------------------+\\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\\n|O.O.O.O.O.O.#.#.#.#.#.|.|\\n|O.......................|\\n|O.O.O.O.O.O.#.#.#.#.#.|.|)\\n+------------------------+\"\nprint(\"OK\")\n\n\"\"\""
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\") == \"\"\"+------------------------+\n|O.O.O.#.#.#.#.#.#.#.#.|D|)\n|O.O.O.#.#.#.#.#.#.#.#.|.|\n|O.......................|\n|O.O.#.#.#.#.#.#.#.#.#.|.|)\n+------------------------+\"\"\"\nassert solution(\"20\") == \"\"\"+------------------------+\n|O.O.O.O.O.O.O.#.#.#.#.|D|)\n|O.O.O.O.O.O.#.#.#.#.#.|.|\n|O.......................|\n|O.O.O.O.O.O.#.#.#.#.#.|.|)\n+------------------------+\"\"\"\n\"\"\"\n\n\n\"\"\"\n======\ncode review\n======\n\n\"\"\""
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 1 1\") == \"9\"\nassert solution(\"77 7 7\") == \"7\"\nassert solution(\"114 5 14\") == \"6\"\nassert solution(\"1 1 2\") == \"0\"\nassert solution(\"1114 1114 1114 1114\") == \"0\"\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(\"tests/1.txt\", \"r\").read()) == \"7\"\nassert solution(open(\"tests/2.txt\", \"r\").read()) == \"9\"\nassert solution(open(\"tests/3.txt\", \"r\").read()) == \"6\"\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 1 1\") == \"9\"\nassert solution(\"77 7 7\") == \"7\"\nassert solution(\"114 5 14\") == \"6\"\nassert solution(\"1 1 2\") == \"0\"\n\"\"\"\n\nw, m, k = [int(i) for i in input().split()]\ncount = 0\n\nwhile w * k >= m:\n    count += 1\n    w -= 1\n\nprint(count)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(114514) == 6\nassert solution(889) == 3\nassert solution(1) == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 1 1\") == 9\nassert solution(\"77 7 7\") == 7\nassert solution(\"114 5 14\") == 6\nassert solution(\"1 1 2\") == 0\nprint(\"All tests passed.\")\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 1 1\") == \"9\"\nassert solution(\"77 7 7\") == \"7\"\nassert solution(\"114 5 14\") == \"6\"\nassert solution(\"1 1 2\") == \"0\"\n\nprint(\"The solution is read and executed correctly.\")\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9') == [7, 8, 9]\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 1 1\") == \"9\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 1 1\") == \"9\"\nassert solution(\"77 7 7\") == \"7\"\nassert solution(\"114 5 14\") == \"6\"\nassert solution(\"1 1 2\") == \"0\"\n\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 9 1\\n') == '1'\nassert solution('8 9 10\\n') == '0'\nassert solution('7 8 9\\n') == '1'\nassert solution('7 8 9 10\\n') == '2'\nassert solution('7 8 9 10 11\\n') == '2'\n\n\"\"\"\nfrom math import log10, ceil\nfrom sys import stdin\n\ninp = stdin.read().splitlines()\nw, m, k = map(int, inp[0].split())\n\nm = ceil(log10(m)) + 1\nk = ceil(log10(k)) + 1\n\ns = 0\n\nfor i in range(m, m + k):\n    s += ceil(log10(i))\n\nprint(s * k)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100\") == \"10\"\nassert solution(\"123\") == \"13\"\n\n\"\"\""
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == 10\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"123\") == \"113\"\n\n---"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"123\") == \"113\"\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"123\") == \"113\"\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == 10\nassert solution(\"123\") == 10\nassert solution(\"744\") == 10\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('123') == 3\nassert solution('10') == 10\nassert solution('20') == 10\nassert solution('30') == 10\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1111111111) == \"0\"\nassert solution(1212121212121212121212) == \"2\"\nassert solution(1313131313131313131313131313) == \"1\"\nassert solution(123456789) == \"8\"\n\n\"\"\""
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '10'\nassert solution('123') == '113'\nassert solution('1324') == '1112'\nassert solution('12345') == '11113'\nassert solution('10001') == '10011'\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '10'\nassert solution('123') == '113'\n\"\"\""
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 6 18\") == \"3\"\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 6 18\") == 3\n\"\"\""
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 3 6 18''') == 3\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\nassert solution('1 2 3') == ''\n\nassert solution('1 2 3 6 18') == '3'\n\nassert solution('1 2 3 6 17') == '2'\n\nassert solution('1 2 3 6 16') == '2'"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 6 18\") == \"3\"\nassert solution(\"4 7 14 24\") == \"4\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 6 18') == '3'\nassert solution('2 4 5 20') == '0'\nassert solution('10 2 9 4') == '1'\n\n\"\"\""
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 6 18\") == 3\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 6 18\") == 3\n\"\"\"\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 6 18\") == \"3\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 6 18\") == 3\n\n\"\"\""
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(input())\nprint(solution(str(input())))\n\n\"\"\"\n\nn,m = map(int, input().split())\na = list(map(int, input().split()))\n\na = [m-x for x in a]\nprint(sum(a))\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3 3 3\") == \"10\"\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5 6\n3 3 3 3 3\n\"\"\") == \"10\"\n\nassert solution(\n\"\"\"\n3 5\n1 2 4\n\"\"\") == \"3\"\n\nassert solution(\n\"\"\"\n1 1000\n548\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n3 3\n3 1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 1 4 4\") == \"9\"\nprint(solution(\"3 5 1 4 4\"))\nassert solution(\"1 1000\") == \"0\"\nprint(solution(\"1 1000\"))\nassert solution(\"5 5 2 3 1 4 4\") == \"9\"\nprint(solution(\"5 5 2 3 1 4 4\"))\nassert solution(\"3 3 3 3 3\") == \"10\"\nprint(solution(\"3 3 3 3 3\"))\n\n\"\"\"\nimport math\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nres = 0\nfor i in range(n):\n    curr_res = math.floor(m / a[i])\n    if curr_res > res:\n        res = curr_res\nprint(res)\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n3 4') == '5'\nassert solution('1 2 3\\n5 1 1\\n2 3') == '6'\nassert solution('1 2 3\\n5 1 1\\n3 1') == '4'\nassert solution('1 2 3\\n5 3 3\\n1 2') == '4'\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n3 3 3 3 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 6\n3 3 3 3 3\n''') == '10'\nassert solution('''1 1000\n548''') == '0'\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 3 3 3') == '10'\n\"\"\"\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n3 3 3 3 3') == '10'\n\"\"\"\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 6\\n3 3 3 3 3\"\n) == \"10\"\n\"\"\"\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2 1\") == \"yes\\n1 2\"\nassert solution(\"4 1 2 3\") == \"no\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 3 4') == 'yes\\n1 1'\nassert solution('3 1 2 4') == 'no'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2 1\") == \"no\"\nassert solution(\"5 2 4 1 3\") == \"yes\"\nassert solution(\"4 3 2 1\") == \"yes 1 3\"\nassert solution(\"1 2 3 4 5\") == \"yes 1 1\"\n\n\"\"\"\n\nfrom typing import List, NamedTuple\n\n\nclass Solution(NamedTuple):\n    def canReverseSegment(self, a: List[int]) -> str:\n        pass\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\") == \"yes\\n1 3\"\nassert solution(\"4 2 1 3\") == \"yes\\n1 2\"\nassert solution(\"4 3 2 1\") == \"no\"\nassert solution(\"2 1 3 4\") == \"yes\\n1 1\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\\n\") == \"yes\\n1 3\\n\"\nassert solution(\"4 1 3 4\\n\") == \"yes\\n1 1\\n\"\nassert solution(\"4 3 2 1\\n\") == \"no\\n\"\nassert solution(\"2 1 3 4\\n\") == \"yes\\n1 1\\n\"\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 1') == 'yes'\nassert solution('4 1 3 2') == 'yes'\nassert solution('4 3 2 1') == 'no'\n\"\"\""
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 1') == 'yes\\n1 3'\nassert solution('4 1 2 3') == 'no'\nassert solution('2 1 3 4') == 'yes\\n1 1'\n\n---"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == \"yes\\n1 3\"\nassert solution(\"4 1 3 2\") == \"yes\\n1 1\"\nassert solution(\"2 1 3 4\") == \"yes\\n1 1\"\nassert solution(\"3 1 2 4\") == \"no\"\nassert solution(\"4 3 2 1\") == \"no\"\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1 3\") == \"yes 1 3\"\nassert solution(\"4 3 2 1\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 1\\n') == 'yes\\n1 3'\nassert solution('4 1 2 3\\n') == 'no\\n'\nassert solution('2 1 3 4\\n') == 'yes\\n1 1'\n\"\"\"\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(12, 4) == 6\nassert solution(25, 10) == -1\n\"\"\""
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 2') == 6\n\n\"\"\"\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 2') == '6'\nassert solution('3 5') == '-1'\nassert solution('25 3') == '15'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport unittest\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2') == 6\nassert solution('3 5') == -1\n\"\"\"\n\n\nimport numpy as np\n\nn, m = map(int, stdin.split(' '))\nx, y = np.array([n, m]) % np.array([n + 1, m + 1]) - 1\n\nprint(1 if x.sum() == 0 and y.sum() == 0 else -1)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\nassert solution('7 4') == '5'\nassert solution('100 99') == '-1'\nassert solution('7 10') == '6'\nassert solution('10 100') == '-1'\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == '-1'\nassert solution('1 1') == '-1'\nassert solution('3 5') == '6'\nassert solution('4 2') == '4'\n\"\"\""
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 2') == 6\nassert solution('3 5') == -1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\") == \"6\"\nassert solution(\"3 5\") == \"-1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2') == '6'\nassert solution('3 5') == '-1'\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2\") == \"6\"\nassert solution(\"3 5\") == \"-1\"\n\"\"\""
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == 8\nassert solution('11') == 14\nassert solution('22') == 20\nassert solution('0') == 0\n\n\n\n[Image]\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"11\") == \"14\"\nassert solution(\"22\") == \"20\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == 8\nassert solution('11') == 14\nassert solution('22') == 20\nassert solution('5') == 16\n\"\"\"\n\nimport math"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"11\") == \"14\"\nassert solution(\"22\") == \"20\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == 14\nassert solution(\"22\") == 20\n\"\"\""
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5) == 7\nassert solution(10) == 16\nassert solution(15) == 23\n\"\"\"\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"11\") == \"14\"\nassert solution(\"22\") == \"20\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"11\") == \"14\"\nassert solution(\"22\") == \"20\"\n\"\"\""
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == 8\nassert solution(\"11\") == 14\nassert solution(\"22\") == 20\n\n\n'''\nimport math\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '8'\nassert solution('11') == '14'\nassert solution('22') == '20'\n\n\"\"\"\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 2 5') == '3'\nassert solution('500000 500000 500000 500000') == '1'\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 2 5\") == \"3\"\nassert solution(\"500000 500000 500000 500000\") == \"1\"\n\n\n---\n\n\u0412\u0456\u0434\u043e\u043c\u0438\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0456\u0441\u0442 \u0412\u0456\u043a\u0442\u043e\u0440 \u0412\u0456\u0439\u0434\u0436\u043e \u0445\u043e\u0447\u0435 \u0437\u043d\u0430\u0439\u0442\u0438 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0439 \u043d\u0435\u043f\u0435\u0440\u0435\u0431\u2019\u0454\u0434\u043d\u0430\u043d\u0438\u0445 \u0442\u0440\u0456\u0433\u0435\u043d\u043e\u043c\u0456\u0432, \u0434\u043b\u044f \u044f\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0456\u0449\u0435\u043d\u043d\u044f \u043d\u0435 \u0437\u0430\u0432\u0435\u043b\u0438 \u0437\u043c\u0435\u043d\u0448\u0435\u043d\u043d\u044f \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u043f\u043e\u0432\u043d\u0438\u0445 \u0440\u0456\u0437\u043d\u0438\u0445 \u043e\u0441\u0456\u0431. \u0412\u0456\u0434\u043e\u043c\u0438\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0456\u0441\u0442 \u043f\u043e\u0432\u0438\u043d\u0435\u043d \u043f\u043e\u043c\u0456\u0442\u0438\u0442\u0438, \u044f\u043a\u0456 \u0432\u0456\u0434\u043e\u043c\u0456 \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u043d\u0435\u043f\u0435\u0440\u0435\u0431\u2019\u0454\u0434\u043d\u0430\u043d\u0438\u0445 \u0442\u0440\u0456\u0433\u0435\u043d\u043e\u043c\u0456\u0432 \u0432\u0438\u0437\u043d\u0430\u0447\u0438\u0442\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u043e\u0431\u0456\u043a\u043d\u043e\u0447\u043d\u0438\u0445 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457\u0432. \u0413\u0430\u0440\u043c\u0456\u0434\u0435\u0440 \u0412\u0456\u043a\u0442\u043e\u0440 \u041e\u043b\u044c\u0433\u0435\u0440\u0456\u0432\u0438\u0447 \u0445\u043e\u0447\u0435 \u0437\u043d\u0430\u0439\u0442\u0438 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0439 \u0442\u0440\u0456\u0433\u0435\u043d\u043e\u043c\u0456\u0432, \u0434\u043b\u044f \u044f\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0456\u0449\u0435\u043d\u043d\u044f \u043d\u0435 \u0437\u0430\u0432\u0435\u043b\u0438 \u0437\u043c\u0435\u043d\u0448\u0435\u043d\u043d\u044f \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u043f\u043e\u0432\u043d\u0438\u0445 \u0440\u0456\u0437\u043d\u0438\u0445 \u043e\u0441\u0456\u0431.\n\n\u0412\u0456\u0434\u043e\u043c\u0438\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0456\u0441\u0442 \u043f\u043e\u0432\u0438\u043d\u0435\u043d \u043f\u043e\u043c\u0456\u0442\u0438\u0442\u0438, \u044f\u043a\u0456 \u0432\u0456\u0434\u043e\u043c\u0456 \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u043d\u0435\u043f\u0435\u0440\u0435\u0431\u2019\u0454\u0434\u043d\u0430\u043d\u0438\u0445 \u0442\u0440\u0456\u0433\u0435\u043d\u043e\u043c\u0456\u0432 \u0432\u0438\u0437\u043d\u0430\u0447\u0438\u0442\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u043e\u0431\u0456\u043a\u043d\u043e\u0447\u043d\u0438\u0445 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457\u0432. \u0413\u0430\u0440\u043c\u0456\u0434\u0435\u0440 \u0412\u0456\u043a\u0442\u043e\u0440 \u041e\u043b\u044c\u0433\u0435\u0440\u0456\u0432\u0438\u0447 \u0445\u043e\u0447\u0435 \u0437\u043d\u0430\u0439\u0442\u0438 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0439 \u0442\u0440\u0456\u0433\u0435\u043d\u043e\u043c\u0456\u0432, \u0434\u043b\u044f \u044f\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0456\u0449\u0435\u043d\u043d\u044f \u043d\u0435 \u0437\u0430\u0432\u0435\u043b\u0438 \u0437\u043c\u0435\u043d\u0448\u0435\u043d\u043d\u044f \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u043f\u043e\u0432\u043d\u0438\u0445 \u0440\u0456\u0437\u043d\u0438\u0445 \u043e\u0441\u0456\u0431.\n\n\u0412\u0456\u0434\u043e\u043c\u0438\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0456\u0441\u0442 \u043f\u043e\u0432\u0438\u043d\u0435\u043d \u043f\u043e\u043c\u0456\u0442\u0438\u0442\u0438, \u044f\u043a\u0456 \u0432\u0456\u0434\u043e\u043c\u0456 \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u043d\u0435\u043f\u0435\u0440\u0435\u0431\u2019\u0454\u0434\u043d\u0430\u043d\u0438\u0445 \u0442\u0440\u0456\u0433\u0435\u043d\u043e\u043c\u0456\u0432 \u0432\u0438\u0437\u043d\u0430\u0447\u0438\u0442\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u043e\u0431\u0456\u043a\u043d\u043e\u0447\u043d\u0438\u0445 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457\u0432. \u0413\u0430\u0440\u043c\u0456\u0434\u0435\u0440 \u0412\u0456\u043a\u0442\u043e\u0440 \u041e\u043b\u044c\u0433\u0435\u0440\u0456\u0432\u0438\u0447 \u0445\u043e\u0447\u0435 \u0437\u043d\u0430\u0439\u0442\u0438 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0439 \u0442\u0440\u0456\u0433\u0435\u043d\u043e\u043c\u0456\u0432, \u0434\u043b\u044f \u044f\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0456\u0449\u0435\u043d\u043d\u044f \u043d\u0435 \u0437\u0430\u0432\u0435\u043b\u0438 \u0437\u043c\u0435\u043d\u0448\u0435\u043d\u043d\u044f \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u043f\u043e\u0432\u043d\u0438\u0445 \u0440\u0456\u0437\u043d\u0438\u0445 \u043e\u0441\u0456\u0431.\n\n\u0412\u0456\u0434\u043e\u043c\u0438\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0456\u0441\u0442 \u043f\u043e\u0432\u0438\u043d\u0435\u043d \u043f\u043e\u043c\u0456\u0442\u0438\u0442\u0438, \u044f\u043a\u0456 \u0432\u0456\u0434\u043e\u043c\u0456 \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0457 \u043d\u0435\u043f\u0435\u0440\u0435\u0431\u2019\u0454\u0434\u043d\u0430\u043d\u0438\u0445 \u0442\u0440\u0456\u0433\u0435\u043d\u043e\u043c\u0456\u0432 \u0432\u0438\u0437\u043d\u0430\u0447\u0438\u0442\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u043e\u0431\u0456\u043a\u043d\u043e\u0447\u043d\u0438\u0445 \u043f\u0440\u0438\u0441\u0442\u0440\u043e\u0457\u0432. \u0413\u0430\u0440\u043c\u0456\u0434\u0435\u0440 \u0412\u0456\u043a\u0442\u043e\u0440 \u041e\u043b\u044c\u0433\u0435\u0440\u0456\u0432\u0438\u0447 \u0445\u043e\u0447\u0435 \u0437\u043d\u0430\u0439\u0442\u0438 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043a\u043e\u043c\u0431\u0456\u043d\u0430\u0446\u0456\u0439 \u0442\u0440\u0456\u0433\u0435\u043d\u043e\u043c\u0456\u0432, \u0434\u043b\u044f \u044f\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0456\u0449\u0435\u043d\u043d\u044f \u043d\u0435 \u0437\u0430\u0432\u0435\u043b\u0438 \u0437\u043c"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 2 5\") == \"3\"\nassert solution(\"500000 500000 500000 500000\") == \"1\"\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 2 5\") == \"3\"\nassert solution(\"500000 500000 500000 500000\") == \"1\"\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 2 5\") == \"3\"\nassert solution(\"500000 500000 500000 500000\") == \"1\"\nprint(solution(input()))"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 2 5') == '3'\nassert solution('500000 500000 500000 500000') == '1'\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 2 5\") == \"3\"\nassert solution(\"500000 500000 500000 500000\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '4'\n\nassert solution('1 2 2 5') == '3'\n\nassert solution('500000 500000 500000 500000') == '1'\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 2 5\") == \"3\"\nassert solution(\"500000 500000 500000 500000\") == \"1\"\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 2 5\") == \"3\"\nassert solution(\"500000 500000 500000 500000\") == \"1\"\nprint(\"It is all good. Let's check it now\")\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 4 10007\") == \"5563\"\nprint(solution(\"5 3 4 10007\"))\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 4 10007\") == \"5563\"\n\"\"\""
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '2'\nassert solution('2 5 3') == '0'\nassert solution('3 2 5') == '5'\nassert solution('2 3 9') == '1'\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 4 10007') == '5563'\n\"\"\"\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 10007\") == \"5563\"\nprint('The code ran Correctly')"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 4 10007\") == \"5563\"\n\"\"\""
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 4 10007\") == \"5563\"\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 4 10007') == '5563'\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 4 10007\") == \"5563\"\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 5 7\") == \"17\"\nassert solution(\"4 3 6 7\") == \"55\"\n\"\"\""
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 4 3 2 10 5 2') == '32'\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2 1 10 5 2\") == \"32\"\nassert solution(\"8 4 3 2 10 5 2\") == \"32\"\nassert solution(\"1 1 1 1 5 5 5\") == \"15\"\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 4 3 2 10 5 2\") == \"32\"\n\"\"\"\n\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 4 3 2 10 5 2\") == \"32\"\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 4 3 2 10 5 2\") == \"32\""
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2 1 1 1 5 5 5') == '15'\nassert solution('8 4 3 2 10 5 2') == '32'\n\n'''\nfrom typing import List, Tuple\n\nINPUT_MINUTE_ONE: int = 1\nINPUT_MINUTE_TWO: int = 2\nINPUT_MINUTE_THREE: int = 3\n\nINPUT_OUTPUT_ALL_ONE: int = 1\nINPUT_OUTPUT_ALL_TWO: int = 2\nINPUT_OUTPUT_ALL_THREE: int = 3\nINPUT_OUTPUT_ALL_FOUR: int = 4\nINPUT_OUTPUT_ALL_FIVE: int = 5\nINPUT_OUTPUT_ALL_SIX: int = 6\nINPUT_OUTPUT_ALL_SEVEN: int = 7\nINPUT_OUTPUT_ALL_EIGHT: int = 8\n\nINPUT_MINUTES_ONE: int = 5\nINPUT_MINUTES_TWO: int = 2\nINPUT_MINUTES_THREE: int = 10\nINPUT_MINUTES_FOUR: int = 10\nINPUT_MINUTES_FIVE: int = 5\nINPUT_MINUTES_SIX: int = 2\nINPUT_MINUTES_SEVEN: int = 7\nINPUT_MINUTES_EIGHT: int = 8\n\nINPUT_RESULT_ONE: int = 15\nINPUT_RESULT_TWO: int = 32\nINPUT_RESULT_THREE: int = 42\nINPUT_RESULT_FOUR: int = 60\nINPUT_RESULT_FIVE: int = 70\nINPUT_RESULT_SIX: int = 77\nINPUT_RESULT_SEVEN: int = 88\nINPUT_RESULT_EIGHT: int = 95\n\nINPUT_TEST_CASES: List[Tuple[int, int, int, int, int, int, int, int]] = [\n    (INPUT_OUTPUT_ALL_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_OUTPUT_ALL_TWO, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_OUTPUT_ALL_THREE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_OUTPUT_ALL_FOUR, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_OUTPUT_ALL_FIVE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_OUTPUT_ALL_SIX, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_OUTPUT_ALL_SEVEN, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_OUTPUT_ALL_EIGHT, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_RESULT_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_RESULT_TWO, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_RESULT_THREE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_RESULT_FOUR, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_RESULT_FIVE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_RESULT_SIX, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_RESULT_SEVEN, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE, INPUT_MINUTE_ONE),\n    (INPUT_"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1 5 5 5\") == \"15\"\nassert solution(\"8 4 3 2 10 5 2\") == \"32\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1 5 5 5\") == \"15\"\nassert solution(\"8 4 3 2 10 5 2\") == \"32\"\n\"\"\"\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 1 5 5 5\") == \"15\"\nassert solution(\"8 4 3 2 10 5 2\") == \"32\"\n\"\"\"\n\nk, n_1, n_2, n_3, t_1, t_2, t_3 = [int(n) for n in stdin.split()]"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 4 3 2 10 5 2') == '32'\nassert solution('1 1 1 1 5 5 5') == '15'\nassert solution('7 7 7 7 1 1 1') == '6'\n\"\"\"\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 10\\n4 6 7\"\n) == \"8\"\n\nassert solution(\n    \"2 12\\n1 10\"\n) == \"9\"\n\nassert solution(\n    \"2 7\\n3 4\"\n) == \"6\"\n\n\"\"\"\n\nimport sys\n\ninp = sys.stdin.readlines()\nn, m = [int(i) for i in inp[0].split()]\na = [int(i) for i in inp[1].split()]\n\na.sort()\n\nl = 0\nr = m\ns = 0\nfor i in range(n):\n    if a[i] > l:\n        s += a[i] - l\n        l = a[i]\n    else:\n        l = a[i]\n\ns += m - l\n\nprint(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 12\\n1 10\") == \"9\"\nassert solution(\"3 12\\n2 6 7\") == \"8\"\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10\\n4 6 7') == '8'\nassert solution('2 12\\n1 10') == '9'\nassert solution('2 7\\n3 4') == '6'\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\") == \"8\"\nassert solution(\"2 12\") == \"9\"\nassert solution(\"1 10\") == \"9\"\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10\\n1 5 5 6 8\") == \"9\"\nassert solution(\"2 12\\n1 10\") == \"9\"\nassert solution(\"2 7\\n3 4\") == \"6\"\n\n\"\"\"\n\na, m = map(int, input().split())\narr = list(map(int, input().split()))\ncnt = arr[0]\nans = 0\nfor i in range(1, len(arr)):\n    if arr[i] < arr[i - 1]:\n        ans += (arr[i - 1] - arr[i] + 1) * cnt\n        cnt += (arr[i - 1] - arr[i] + 1)\n    elif arr[i] > arr[i - 1]:\n        ans += arr[i] * cnt\n        cnt = arr[i]\n        if i == len(arr) - 1:\n            ans += (m - arr[i]) * cnt\n    else:\n            ans += cnt\nprint(ans)\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\") == \"8\"\nassert solution(\"2 12\") == \"9\"\nassert solution(\"2 7\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 12\\n1 10') == '9'\nassert solution('2 7\\n3 4') == '6'\nassert solution('3 10\\n4 6 7') == '8'\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == \"8\"\nassert solution(\"2 12\") == \"9\"\nassert solution(\"2 7\") == \"6\"\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\\n1 2 3 4\") == \"8\"\nassert solution(\"4 10\\n1 2 3\") == \"6\"\nassert solution(\"2 12\\n1 10\") == \"9\"\nassert solution(\"2 7\\n3 4\") == \"6\""
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 10\\n3 4\\n\") == \"8\"\nassert solution(\"2 7\\n3 4\\n\") == \"6\"\nassert solution(\"2 12\\n1 10\\n\") == \"9\"\n\nassert solution(\"3 10\\n3 4\\n\") == \"8\"\nassert solution(\"3 10\\n3 4\\n\") == \"8\"\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5\n1\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8\n\"\"\") == \"\"\"\n1 2 \n-1\n4 5 1 2 3 6 \n-1\n1 3 5 6 7 9 2 4 8 10\n\"\"\"\n\n\"\"\"\n-----Test 1-----\n\n5\n1\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8\n\nTest 1 passed!\n\n-----Test 2-----\n\n5\n1\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8\n\nTest 2 failed:\n\n100\n1\n2\n4 1\n3\n4 1 3\n4\n2 3 4 5\n5\n1 5 7 2 8\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 3') == '1 2 3'\nassert solution('2 3 4 5') == '-1'\n\"\"\"\nimport sys\n\ntest_cases = int(sys.stdin.readline().rstrip())\n\nwhile test_cases:\n    n = int(sys.stdin.readline().rstrip())\n    b = list(map(int, sys.stdin.readline().rstrip().split()))\n    p = [-1] * (2 * n)\n\n    if n == 1:\n        p[0] = 1\n        print(' '.join(map(str, p)))\n    else:\n        p[0] = b[0]\n        p[1] = min(b[0], b[1])\n        for i in range(2, n):\n            p[i * 2] = min(b[i - 1], p[i - 2])\n        p[n * 2 - 1] = min(b[n - 1], p[n - 2])\n\n        for i in range(n, 2 * n - 1):\n            p[i] = p[i - n]\n\n        print(' '.join(map(str, p)))\n\n    test_cases -= 1\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1\\n2\\n4 1\\n3\") == \"1 2\"\nassert solution(\"3\\n4 1\\n3\") == \"1 2\"\nassert solution(\"3\\n4 1\\n3\\n4 1 3\") == \"1 2\"\nassert solution(\"4\\n3\\n4 1 3\") == \"1 2\"\nassert solution(\"3\\n4 1\\n3\") == \"1 2\"\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n1\\n2\\n4 1 3\\n2\\n3 4 1 3\") == \"1 2\"\nassert solution(\"5\\n4\\n1\\n1\\n2\\n4 1 3\\n2\\n3 4 1 3\") == \"-1\"\nassert solution(\"5\\n5\\n1\\n1\\n2\\n4 1 3\\n2\\n3 4 1 3\") == \"-1\"\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2\\n4\\n1\\n3\") == '1 2'\nassert solution(\"5\\n2\\n3\\n4\\n5\") == '-1'\nassert solution(\"1\\n1\") == '1 1'\nassert solution(\"2\\n2\") == '1 1'\nassert solution(\"3\\n2\\n1\") == '1 1'\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n1\\n2\\n4 1\\n3\\n4 1 3\") == \"1 2\"\nassert solution(\"1 2\\n2\\n4 1\\n3\\n4 1 3\") == \"1 2\"\nassert solution(\"1 2\\n2\\n4 1\\n3\\n4 1 3\") == \"1 2\"\nassert solution(\"1 2\\n2\\n4 1\\n3\\n4 1 3\") == \"1 2\"\nassert solution(\"1 2\\n2\\n4 1\\n3\\n4 1 3\") == \"1 2\"\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n4 1 3\\n4\\n2 3 4 5') == '1 2\\n4 5 1 2 3 6'\n\"\"\"\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_1) == test_2\nassert solution(test_3) == test_4\nassert solution(test_5) == test_6\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\\n2\\n4\\n1\\n3\\n\") == \"1 2\"\nassert solution(\"5\\n1\\n5\\n2\\n4\\n3\\n\") == \"1 2 3\"\nassert solution(\"5\\n1\\n5\\n2\\n4\\n3\\n\") == \"1 2 3\"\nassert solution(\"5\\n1\\n5\\n2\\n4\\n3\\n\") == \"1 2 3\"\n\n'''\n\nimport math\nimport sys"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '2\\n'\nassert solution('5\\n1\\n1\\n2\\n4 1\\n3\\n4 1 3\\n4\\n2 3 4 5\\n') == '1 2\\n-1\\n4 5 1 2 3 6\\n-1\\n1 3 5 6 7 9 2 4 8 10\\n'\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"3 4 6\") == \"6\"\nassert solution(\"5 12 27 30 18\") == \"15\""
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == 2\n\"\"\"\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('3\\n2 4 6') == '6'\nassert solution('5\\n45 12 27 30 18') == '15'\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('3\\n2 4 6') == '6'\nassert solution('5\\n45 12 27 30 18') == '15'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 2') == 2\n\n\"\"\"\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\") == 2\nassert solution(\"3\\n2 4 6\") == 6\nassert solution(\"5\\n45 12 27 30 18\") == 15\n\"\"\""
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 8 10') == '7'\nassert solution('1 2 3 4 5') == '1'\nassert solution('12 18') == '12'\nassert solution('45 12 27 30 18') == '15'\n\"\"\"\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 12 27 30 18\") == \"15\"\nassert solution(\"2 4 6\") == \"12\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 4 6\") == \"12\"\nassert solution(\"5 45 12 27 30 18\") == \"15\"\n\"\"\""
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 12 27 30 18\") == 15\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\nsum_ = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if arr[i] > arr[j]:\n            sum_ += arr[i] - arr[j]\n\nprint(sum_)\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n12 27 30 18''') == 15\nassert solution('''2\n12 18''') == 12\nassert solution('''3\n45 12 27 30 18''') == 15\nassert solution('''2\n12 18''') == 12\nassert solution('''2\n12 27''') == 6\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"10\") == \"YES\"\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('SSFFSFFSFF') == 'YES'\nassert solution('FFF') == 'NO'\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4FSSF') == 'NO'\nassert solution('2SF') == 'YES'\nassert solution('10FFFFFFF') == 'NO'\nassert solution('10SSFFSFF') == 'YES'\nassert solution('10SSFFF') == 'YES'\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"FFF\") == \"NO\"\nassert solution(\"SSS\") == \"YES\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 'NO'\nassert solution('2') == 'YES'\nassert solution('10') == 'NO'\nassert solution('10') == 'YES'\nassert solution('10') == 'YES'\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2SFF') == 'NO'\nassert solution('FFS') == 'YES'\nassert solution('FFFFFFFFFF') == 'NO'\nassert solution('SSFFSFFSFF') == 'YES'\nassert solution('10F') == 'YES'\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SFFFSS\") == \"NO\"\nassert solution(\"SFSSF\") == \"YES\"\nassert solution(\"SSSSSS\") == \"NO\"\nassert solution(\"SSSSFFSFF\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == 'NO'\nassert solution('2') == 'YES'\nassert solution('10') == 'NO'\nassert solution('10') == 'YES'\nassert solution('10') == 'YES'\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"10\") == \"NO\"\n\"\"\""
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"FSSF\") == \"NO\"\nassert solution(\"SF\") == \"YES\"\nassert solution(\"FSSFF\") == \"NO\""
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 0\") == \"24\"\nassert solution(\"1337 42\") == \"807905441\"\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2') == '6'\nassert solution('3 3') == '0'\nassert solution('4 0') == '24'\nassert solution('1337 42') == '807905441'\n\"\"\""
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == 6\nassert solution(\"3 3\") == 0\nassert solution(\"4 0\") == 24\nassert solution(\"1337 42\") == 807905441\nassert solution(\"9 8\") == 87905441\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"6\"\n\n\"\"\"\n\nn, k = [int(num) for num in stdin.split(\" \")]"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"6\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"6\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 0\") == \"24\"\nassert solution(\"1337 42\") == \"807905441\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"3 2\"\n) == 6\nassert solution(\n\"3 3\"\n) == 0\nassert solution(\n\"4 0\"\n) == 24\nassert solution(\n\"1337 42\"\n) == 807905441\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2') == '6'\nassert solution('3 3') == '0'\nassert solution('4 0') == '24'\nassert solution('1337 42') == '807905441'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == 6\nassert solution(\"3 3\") == 0\nassert solution(\"4 0\") == 24\nassert solution(\"1337 42\") == 807905441\nassert solution(\"38109 1458397315\") == 9599217983\n\"\"\""
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0\\n2\\n2 0 1\\n0 2 2') == '1'\nassert solution('1 3\\n3\\n3 3 2\\n-2 3 6\\n-2 7 10') == '0.5'\n\n\n\"\"\""
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\\n2\\n2 0 1\\n0 2 2\") == \"1\"\nassert solution(\"1 3\\n3\\n3 3 2\\n-2 3 6\\n-2 7 10\") == \"0.5\"\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0\\n2\\n2 0 1\\n0 2 2\") == '1.0'\nassert solution(\"1 3\\n3\\n3 3 2\\n-2 3 6\\n-2 7 10\") == '0.5'\n\n\"\"\"\nfrom typing import List\nimport math\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''0 0\n2\n2 0 1\n0 2 2''') == '1'\nassert solution('''1 3\n3\n3 3 2\n-2 3 6\n-2 7 10''') == '0.5'\n\n\"\"\"\n\nimport math\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return 'Point({}, {})'.format(self.x, self.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\\n3\\n3 2\\n-2 3 6\\n-2 7 10\") == \"0.5\"\n\"\"\""
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\\n2 0 1\\n0 2 2\") == \"0.5\"\nassert solution(\"0 0\\n2\\n2 0 1\") == \"1.0\"\nassert solution(\"0 0\\n3\\n3 0 1\") == \"0.5\"\nassert solution(\"0 0\\n3\\n3 0 1\\n2 2 2\") == \"1.0\""
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0\\n2\\n2 0 1\\n0 2 2\\n\") == \"1\"\nassert solution(\"1 3\\n3\\n3 3 2\\n-2 3 6\\n-2 7 10\") == \"0.5\"\n\n\"\"\"\n\n\n\n\"\"\"\n1. \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u044f.\n2. \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438 \u0434\u043b\u044f \u044d\u0442\u0438\u0445 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0439.\n3. \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u044e\u0442 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430.\n4. \u041f\u043e\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u044f, \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u044e\u0442 \u044d\u0442\u043e\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430, \u0438 \u0434\u0435\u043b\u0430\u0435\u043c \u0438\u0437 \u043d\u0438\u0445 \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0438\u0436\u0438\u043c\u044b\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b.\n5. \u0415\u0441\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441 \u044d\u0442\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e, \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u0438\u043d\u0434\u0435\u043a\u0441.\n6. \u0415\u0441\u043b\u0438 \u043d\u0430\u0448\u043b\u0438 \u043f\u0443\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u044f - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0432\u0435\u043d \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u0443, \u0442.\u0435. \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043f\u0443\u0442\u044c.\n7. \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - \u0432\u0435\u0434\u044c \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435 \u043d\u0430\u0448\u0435\u043b, \u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0442\u044c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u0438\u0437 \u0434\u0432\u0443\u0445 \u043f\u0443\u0442\u0435\u0439, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043f\u0443\u0442\u044c \u043d\u0435 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0439, \u0430 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u044e\u0442 \u044d\u0442\u043e\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430.\n8. \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u043f\u0443\u0442\u0438 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439.\n9. \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0443\u043c.\n\"\"\""
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0\\n2\\n2 0 1') == '1'\nassert solution('1 3\\n3\\n3 3 2') == '0.5'\nassert solution('1 3\\n3\\n3 3 2') == '0.5'\nassert solution('1 3\\n3\\n3 3 2') == '0.5'\nassert solution('1 3\\n3\\n3 3 2') == '0.5'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0\\n2\\n2 0 1\") == '1'\n\"\"\"\nimport re\nimport math\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0\\n2\\n2 0 1\") == \"1.0\"\nassert solution(\"1 3\\n3\\n3 2 -2 3 6 -2 7 10\") == \"0.5\"\n\"\"\"\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\\n\") == \"4\"\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == \"4\"\n\n\"\"\"\n\nimport sys\n\nnumber_of_candy, number_of_jump = map(int, sys.stdin.readline().strip().split())\n\nheight_of_jump = [0] * number_of_candy\n\nfor i in range(number_of_candy):\n    candy_type, height, mass = map(int, sys.stdin.readline().strip().split())\n    if candy_type == 0:\n        height_of_jump[i] = height + mass\n    else:\n        height_of_jump[i] = height\n\nmax_height_of_jump = max(height_of_jump)\n\ncount = 0\nfor i in range(number_of_candy):\n    if height_of_jump[i] == max_height_of_jump:\n        count += 1\n\nprint(count)"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5') == 4\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\\n\") == \"4\"\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\\n') == '4'\n\"\"\""
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == 4\n\"\"\""
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5') == '4'"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5') == '4'\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5') == 4\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1 1'\nassert solution('1 1 1') == '1 1 1'\nassert solution('1 1 2') == '1 1 2'\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 1 1 4 6\") == \"1 2 4\\n1 2 6\"\n\"\"\"\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2 1 1 4 6\") == \"1 2 4\\n1 2 6\"\nassert solution(\"8 3 2 1 4 6\") == \"-1\"\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n6\n1 1 1 2 2 2\n''') == '-1'\nassert solution('''\n6\n2 2 1 1 4 6\n''') == '1 2 4'\nassert solution('''\n6\n3 3 3 3 3 3\n''') == '1 2 3'\nassert solution('''\n9\n1 2 1 3 2 1 4 6 2 5\n''') == '1 2 3 4 5 6'\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 1 1 2 2 2\") == '-1'\nassert solution(\"6\\n2 2 1 1 4 6\") == '1 2 4'\nassert solution(\"6\\n1 1 1 2 2 2\") == '-1'\nassert solution(\"6\\n2 2 1 1 4 6\") == '1 2 4'\n\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n1 1 1\") == \"-1\"\nassert solution(\"6 6 6 6 6 6\\n1 1 1 2 2 2\") == \"1 2 4\\n1 2 6\"\n\"\"\""
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1 1 1 2 2 2') == '-1'\nassert solution('6\\n2 2 1 1 4 6') == '1 2 4'\n\n\"\"\"\nimport math"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3 1 1 1\") == \"1 2 4\"\nassert solution(\"4 4 3 2 2 2\") == \"1 2 3 4\"\nassert solution(\"7 7 7 7 7 7 7\") == \"-1\"\n\nassert solution(\"6 6 6 1 1 1\") == \"1 2 4\"\nassert solution(\"6 6 6 2 2 2\") == \"1 2 4\"\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1 1 4 1 2 6\") == \"1 2 4\"\nassert solution(\"6 1 1 2 2 2\") == \"1 2 6\"\nassert solution(\"6 1 1 2 2 2\") == \"1 2 6\"\nassert solution(\"2 2 1 1 4 6\") == \"1 2 4\"\nassert solution(\"3 3 1 1 1 4 6\") == \"1 3 6\"\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 5 7\") == \"-1\\n\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"3\\n1 4 7\\n1 5 8\\n2 6\"\nassert solution(\"10\\n2 1 3 4 6 8 2 9 10\") == \"3\\n1 2 8\\n1 4 10\\n1 6 9\\n2 3 7\"\nassert solution(\"6\\n2 2 1 1 4 6\") == \"1 2 4\\n1 2 6\\n1 4 6\"\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 2\nassert solution(\"zzzzz\") == 1\nassert solution(\"abcde\") == 3\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == 2\nassert solution(\"zzzzz\") == 1\nassert solution(\"abcde\") == 3\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacaba') == 2\nassert solution('zzzzz') == 1\nassert solution('abcde') == 3\n\"\"\"\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('zzzzz') == 1\nassert solution('abcde') == 3"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == 2\n\"\"\"\nimport collections"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 2\nassert solution(\"zzzzz\") == 1\nassert solution(\"abcde\") == 3"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('zzzzz') == 1\nassert solution('abcde') == 3\nassert solution('abacaba') == 2\n\"\"\"\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(abacaba) == 2\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == 2\nassert solution(\"zzzzz\") == 1\nassert solution(\"abcde\") == 3\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == 2\nassert solution(\"zzzzz\") == 1\nassert solution(\"abcde\") == 3\n\n\"\"\"\n\ns = stdin\ns = list(s)\ni = 0\nwhile i < len(s) - 1:\n    j = i + 1\n    while j < len(s):\n        if s[j] in s[i]:\n            j += 1\n        else:\n            break\n    i = j\n    if j == len(s):\n        break\n\nprint(j)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('12 4') == '15'\n\"\"\"\n\nn, k = map(int, input().split())"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"1 6\") == \"38\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5') == '10'\nassert solution('15 6') == '38'\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"10\"\nassert solution(\"15 6\") == \"38\"\nprint('The local tests are done. Click on \"Check\" for more details about in-browser testing.')\n\"\"\"\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"10\"\n\"\"\"\n\n\nfrom math import gcd"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"10\"\n\nassert solution(\"15 6\") == \"38\"\n\n\"\"\"\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5') == '10'\nassert solution('15 6') == '38'\n\"\"\"\nfrom itertools import product\nimport math"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"10\"\nassert solution(\"15 6\") == \"38\"\n\"\"\"\n\nimport numpy as np\n\nclass Solution:\n    def min_number(self, n, k):\n        return int(np.ceil(n / k)) * k"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5\\n') == '10', 'Test 1'\nassert solution('15 6\\n') == '38', 'Test 2'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5') == '10'\nassert solution('15 6') == '38'\nprint(solution(input()))\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 1\\n') == '1'\nassert solution('3 4\\n1 2 1\\n') == '2'\nassert solution('2 2\\n2\\n') == '0'\nassert solution('1 1\\n1\\n') == '1'\nassert solution('1 2\\n2\\n') == '0'\n\n'''"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n2 3 2 1\") == 3\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n2 3 2 1\n''') == '3'\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 2 1') == 3\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n2 3 2 1\") == \"3\"\nassert solution(\"3 4\\n1 2 1\") == \"1\"\n\nInput\n4 3\n2 3 2 1\n\nOutput\n3\n\nInput\n4 3\n3 3 3 3\n\nOutput\n1\n\nInput\n4 3\n3 3 3 3\n\nOutput\n2\n\nInput\n6 4\n1 2 3 4 5 6\n\nOutput\n3\n\nInput\n6 4\n3 4 2 3 1 1\n\nOutput\n2\n\nInput\n2 2\n1 1\n\nOutput\n2\n\nInput\n1 1\n1 1\n\nOutput\n2\n\nInput\n1 1\n1 1\n\nOutput\n2\n\nInput\n2 4\n1 2 3\n\nOutput\n2\n\nInput\n4 2\n1 2 3 4\n\nOutput\n2\n\nInput\n4 2\n3 4 1 2\n\nOutput\n2\n\nInput\n5 4\n3 4 2 3 1\n\nOutput\n3\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nnum_groups = int(stdin.readline())\nm = int(stdin.readline())\n\ngroups = [int(i) for i in stdin.readline().split()]\ngroups.sort()\n\ngroups_diff = [groups[0]]\ngroups_diff_count = 0\n\nfor i in range(1, num_groups):\n    groups_diff.append(groups[i] - groups[i - 1])\n    groups_diff_count += 1\n    if groups_diff[-1] < m:\n        break\ngroups_diff.sort()\n\ngroups_diff_count_m = 0\ngroups_diff_count_0 = 0\ngroups_diff_count_1 = 0\nfor i in range(len(groups_diff)):\n    if groups_diff[i] == m:\n        groups_diff_count_m += 1\n    elif groups_diff[i] == 0:\n        groups_diff_count_0 += 1\n    elif groups_diff[i] == 1:\n        groups_diff_count_1 += 1\n    else:\n        raise ValueError(f'Unexpected value {groups_diff[i]}')\ngroups_diff_count_m += groups_diff_count_0\ngroups_diff_count_m += groups_diff_count_1\n\nprint(groups_diff_count_m)"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n2 3 2 1\") == 3\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\narr = list(map(int, stdin.readline().split()))\narr.sort()\nans = 0\n\nwhile arr:\n    cur = arr[0]\n    count = 0\n    for i in range(n):\n        if arr[i] <= m:\n            count += 1\n            ans += 1\n            arr.pop(0)\n    if count == 0:\n        ans -= 1\n        break\n\nprint(ans)"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n2 3 2 1') == 3\nassert solution('3 4\\n1 2 1') == 1\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n2 3 2 1\") == \"3\"\nassert solution(\"3 4\\n1 2 1\") == \"1\"\nassert solution(\"1 3\\n1\") == \"1\"\n\n\nimport sys\n\nassert len(sys.argv) == 2\nn, m = map(int, sys.argv[1].split())\na = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n2 3 2 1\") == \"3\"\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\ncount = 0\n\nfor i in a:\n    count += i//m\n    if i % m!= 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n2 3 2 1') == '3'\nassert solution('3 4\\n1 2 1') == '1'\nassert solution('10 4\\n2 3 5 8 10 13 16 19 22 25') == '7'\n\"\"\""
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('XXXL') == '0'\nassert solution('XS') == '2'\nassert solution('XL') == '1'\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"XS\") == 2\nassert solution(\"XS\") == 2\nassert solution(\"M\") == 0\nassert solution(\"XXXL\") == 1\nassert solution(\"XXS\") == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"XS\") == \"2\"\nassert solution(\"XS\") == \"2\"\nassert solution(\"XS\") == \"2\"\nassert solution(\"XS\") == \"2\"\nassert solution(\"XS\") == \"2\"\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nXS\\nXS\\nM\\nXL\\nS\\nXS\\n\") == \"2\"\nassert solution(\"2\\nXXXL\\nXXL\\nXXL\\nXXXS\\n\") == \"1\"\nassert solution(\"2\\nM\\nXS\\nXS\\nM\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == 0\nassert solution(\"M\") == 0\nassert solution(\"XS\") == 1\nassert solution(\"XL\") == 1\nassert solution(\"XXL\") == 1\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"XS\") == \"2\"\nassert solution(\"XS\") == \"2\"\n\"\"\""
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\nXXXL\\nXXL\\nXXL\\nXXXS\") == 1\nassert solution(\"2\\nM\\nM\\nM\\nM\") == 0\nassert solution(\"2\\nXS\\nXS\\nXS\\nM\") == 2\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"XS\") == \"2\"\nassert solution(\"XS\") == \"2\"\nassert solution(\"M\") == \"0\"\nassert solution(\"XS\") == \"2\"\nassert solution(\"XS\") == \"2\"\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == 0\nassert solution(\"XS\") == 1\nassert solution(\"XS XS XS\") == 3\nassert solution
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"XS\") == \"2\"\nassert solution(\"XS\") == \"2\"\nassert solution(\"M\") == \"0\"\nassert solution(\"XL\") == \"1\"\nassert solution(\"XXXL\") == \"1\"\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\n\n\"\"\"\n\nfrom fractions import Fraction\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\n\"\"\"\nimport fractions"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\nassert solution(\"4 3 2 2\") == \"1/4\"\n\"\"\""
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\n\"\"\"\n\nfrom fractions import gcd"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\nassert solution(\"4 3 2 2\") == \"1/4\"\n\n\"\"\"\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\nassert solution(\"4 3 2 2\") == \"1/4\"\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\nassert solution(\"4 3 2 2\") == \"1/4\"\n\"\"\"\n\nimport fractions"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\nassert solution(\"4 3 2 2\") == \"1/4\""
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\nassert solution(\"4 3 2 2\") == \"1/4\"\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 3 2\") == \"1/3\"\nassert solution(\"4 3 2 2\") == \"1/4\"\n\"\"\"\n\nimport fractions\nfrom fractions import Fraction"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('G') == 'G'\nassert solution('RRR') == '3'\nassert solution('RRRR') == '4'\nassert solution('B') == 'B'\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RRRRR') == '4'\nassert solution('RRG') == '0'\nassert solution('RRR') == '0'\nassert solution('GRR') == '0'"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RRG\") == 1\nassert solution(\"RRRRR\") == 4\nassert solution(\"BBRBB\") == 4\nassert solution(\"RRRRRBBBB\") == 8"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RRR\") == 1\nassert solution(\"RRRRR\") == 4\nassert solution(\"RRGGR\") == 0\nassert solution(\"RBRB\") == 3\nassert solution(\"RBRBBR\") == 3\n\"\"\"\n\n\"\"\"\n3\nRRG\n\n2\nRRR\n\n3\nRRR\n\n1\nRRG\n\n6\nRRRRRR\n\n\"\"\""
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RRRRR\") == 4\nassert solution(\"BBBGB\") == 4\nassert solution(\"RRRGGGGRG\") == 0\nassert solution(\"RRRRRRRRG\") == 5\nassert solution(\"BBRBGBBGRRR\") == 0\n\"\"\"\nimport sys"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRRRR\") == 4\n\"\"\""
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RRRRR') == 4\n\"\"\""
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRRRR\") == 4\nassert solution(\"RRRBR\") == 3\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRG\") == \"1\"\nassert solution(\"RRRRR\") == \"4\"\n\"\"\""
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRRRR\") == 4\nassert solution(\"BRBG\") == 0\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '3'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"3\"\nassert solution(\"5\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == '3'\n\"\"\""
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"12\") == \"3\"\nassert solution(\"13\") == \"3\""
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '3'\nassert solution('7') == '3'\nassert solution('10') == '3'\nassert solution('1') == '0'\n\"\"\"\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '3'\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5') == '1'\nassert solution('12') == '3'\nassert solution('12345') == '5'\nassert solution('123456') == '6'\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '3'\nassert solution('1000000') == '5000001'\nassert solution('12345') == '3'\nassert solution('1230') == '5'\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('12') == '3'\n\n\"\"\""
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n7 20 88\") == \"35\"\nassert solution(\"9\\n15 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n16 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"4\\n1 2 3 4\") == \"4\"\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\n\nnum_list = deque(map(int, input().split()))\ntotal = 0\nwhile len(num_list) > 0:\n    if total == 15:\n        total = 0\n        break\n    if num_list[0] < 15:\n        total += 1\n        num_list.popleft()\n    else:\n        num_list.popleft()\n        num_list.append(num_list.popleft())\nprint(total)\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n7 20 88\") == \"35\"\n\"\"\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n15 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n16 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n15\\n20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n15 15\\n20 20 20\") == \"60\"\nassert solution(\"9\\n15 15 15\") == \"45\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n7 20 88\") == \"35\"\nassert solution(\"9\\n15 20 30 40 50 60 70 80 90\") == \"90\"\n\"\"\"\n\nimport sys\n\nassert sys.version_info >= (3, 7)\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 20 88') == '35'\nassert solution('9 20 30 40 50 60 70 80 90') == '90'\nassert solution('9 15 20 30 40 50 60 70 80 90') == '15'"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n7 20 88\") == \"35\"\nassert solution(\"9\\n15 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n16 20 30 40 50 60 70 80 90\") == \"90\"\n\n\"\"\""
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n7 20 88\") == \"35\"\nassert solution(\"9\\n15 20 30 40 50 60 70 80 90\") == \"90\"\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Optional"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n7 20 88\") == \"35\"\nassert solution(\"9\\n15 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9\\n16 20 30 40 50 60 70 80 90\") == \"90\"\n\nprint('Success')"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n7 20 88') == '35'\nassert solution('9\\n15 20 30 40 50 60 70 80 90') == '90'\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 20 88\") == \"35\"\nassert solution(\"9 16 20 30 40 50 60 70 80 90\") == \"90\"\nassert solution(\"9 15 20 30 40 50 60 70 80 90\") == \"90\"\n\"\"\"\n\nimport math\n\nstdin = \"\"\"3\n7 20 88\n9 16 20 30 40 50 60 70 80 90\n9 15 20 30 40 50 60 70 80 90\n\"\"\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 2\\n3 3 2 4\") == \"2\"\nassert solution(\"5 5 1\\n1 3 1 2 1\") == \"-\"\nassert solution(\"5 5 3\\n3 3 2 4\") == \"1\""
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\\n3 1 2\") == \"1\"\nassert solution(\"4 7 2\\n3 3 2 4\") == \"2\"\nassert solution(\"5 5 1\\n1 3 1 2 1\") == \"-1\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 5 3\n3 1 2\n''') == '1'\nassert solution('''4 7 2\n3 3 2 4\n''') == '2'\nassert solution('''5 5 1\n1 3 1 2 1\n''') == '-1'\nassert solution('''5 5 1\n3 3 2 4\n''') == '2'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 3\\n3 1 2') == '1'\nassert solution('4 7 2\\n3 3 2 4') == '2'\nassert solution('5 5 1\\n1 3 1 2 1') == '-1'\n\n\"\"\"\n\nn, m, k = map(int, input().split())\narr = list(map(int, input().split()))\n\narr.sort()"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 3\\n3 1 2\") == 1\nassert solution(\"4 7 2\\n3 3 2 4\") == 2\nassert solution(\"5 5 1\\n1 3 1 2 1\") == -1\n\"\"\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 2\\n3 3 2 4\") == \"2\"\nassert solution(\"5 5 1\\n1 3 1 2 1\") == \"0\"\nassert solution(\"5 5 1\\n3 3 2 4\") == \"2\"\nassert solution(\"3 1 1\\n1\") == \"0\"\nassert solution(\"2 1 1\\n1\") == \"1\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 3\\n3 1 2\") == \"1\"\n\nassert solution(\"4 7 2\\n3 3 2 4\") == \"2\"\n\nassert solution(\"5 5 1\\n1 3 1 2 1\") == \"-\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 2\\n3 3 2 4') == '2'\nassert solution('5 5 1\\n1 3 1 2 1') == '-1'\nassert solution('3 5 3\\n3 1 2') == '1'\nassert solution('5 5 1\\n1 2 3 4') == '-1'"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3\\n3 1 2\") == \"1\"\nassert solution(\"4 7 2\\n3 3 2 4\") == \"2\"\nassert solution(\"5 5 1\\n1 3 1 2 1\") == \"1\"\nassert solution(\"5 5 1\\n1 1 2 1\") == \"0\"\nassert solution(\"5 5 1\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 3 2\\n1 1 2') == '3'\nassert solution('3 5 3\\n3 1 2') == '1'\nassert solution('4 7 2\\n3 3 2 4') == '-1'\nassert solution('5 5 1\\n1 3 1 2 1') == '-1'\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RBR\") == 2\nassert solution(\"RBBR\") == 6\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RBR') == 2\nassert solution('RBBR') == 6\nassert solution('RRBR') == 0\n\nassert solution('BBBBBBBBB') == 0\nassert solution('RBBBBBBBB') == 1"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RBR\") == 2\nassert solution(\"RBBR\") == 6"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RBR\") == 2\nassert solution(\"RBBR\") == 6\nassert solution(\"RRRRR\") == 2\nassert solution(\"BBBBB\") == 1\nassert solution(\"BBBBBBBB\") == 0\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, \"RBR\") == 2\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RBR\") == 2\n\"\"\""
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RBR\") == 2\nassert solution(\"RBBR\") == 6\nassert solution(\"RRRRB\") == 6\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RBR\") == 2\nassert solution(\"RBBR\") == 6\n\"\"\""
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RBR') == '2'\nassert solution('RRR') == '1'\nassert solution('BBR') == '3'\nassert solution('RBBR') == '6'\nassert solution('RBBB') == '8'\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RBR\") == 2\n\nassert solution(\"RBBR\") == 6\n\nassert solution(\"RBBRR\") == 6\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"19 00\\n255 1 100 1\") == \"25200.0\"\n\"\"\"\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''19 00\n255 1 100 1''') == '25200.0'\nassert solution('''17 41\n1000 6 15 11''') == '1365.0'\n\n\n\n-----Test Input-----\n19 00\n255 1 100 1\n\n19 00\n1000 6 15 11\n\n19 00\n100 1 1000 1\n\n19 00\n100 1 100 1\n\n19 00\n1000 6 1 100\n\n19 00\n100 1 1000 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n1000 6 1 100\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19 00\n100 1 100 1\n\n19"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"19 00\\n255 1 100 1\") == \"25200.0000\"\nassert solution(\"17 41\\n1000 6 15 11\") == \"1365.0000\""
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"19 00\\n255 1 100 1\") == \"25200.0000\"\n\nassert solution(\"17 41\\n1000 6 15 11\") == \"1365.0000\"\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"19 00\\n255 1 100 1\") == \"25200.0000\"\nassert solution(\"17 41\\n1000 6 15 11\") == \"1365.0000\"\n\n\n\nTheory:\n\nFor each hh:mm we can calculate the maximum number of minutes from waking up that we can still buy the buns and the minimum number of minutes that we must feed the cat.\n\nThe maximum number of minutes is calculated by taking the time until 09:00, subtracting 5 minutes of the remaining hours, and then adding the number of minutes in each hour until 19:00 (in case we wake up earlier than 19:00 we won't be able to buy the buns in that time).\n\nThe minimum number of minutes is calculated by adding 5 minutes to the number of minutes in each hour until 19:00.\n\nNow we can use the maximum number of minutes and the minimum number of minutes to calculate the minimum cost of buns for the cat.\n\nThe minimum cost of buns for the cat is calculated by taking the number of buns we can buy (in the last two hours) and subtracting the number of minutes in each hour until 19:00 (in case we wake up earlier than 19:00 we won't be able to buy the buns in that time) multiplied by the cost of one bun and then adding to it the amount of money we have already.\n\nThe total amount of money spent on the cat is the minimum cost of buns for the cat plus the money we already spent.\n\n\nSample Input:\n19 00\n255 1 100 1\n\nSample Output:\n25200.0000\n\nExplanation:\n\nAt 19:00 we'll wake up and the cat's hunger level will be 514. The maximum number of minutes we can still buy the buns is 255. Since we can only buy 255 buns in the last two hours, we need to spend 25200 - 255 * 100 = 25200 - 25200 = 0 roubles.\n\nAt 10:00 we'll wake up and the cat's hunger level will be 665. The minimum number of minutes we must feed the cat is 10. Since the current time is 10:00 we have to feed the cat 10 minutes after waking up. We need to spend 25200 - 10 * 15 = 1365 roubles.\n\nAt 14:00 we'll wake up and the cat's hunger level will be 665. The minimum number of minutes we must feed the cat is 10. Since the current time is 14:00 we have to feed the cat 10 minutes after waking up. We need to spend 1365 - 10 * 15 = 1260 roubles.\n\nAt 16:00 we'll wake up and the cat's hunger level will be 665. The minimum number of minutes we must feed the cat is 10. Since the current time is 16:00 we have to feed the cat 10 minutes after waking up. We need to spend 1260 - 10 * 15 = 1135 roubles.\n\nAt 18:00 we'll wake up and the cat's hunger level will be 665. The minimum number of minutes we must feed the cat is 10. Since the current time is 18:00 we have to feed the cat 10 minutes after waking up. We need to spend 1135 - 10 * 15 = 1015 roubles.\n\nAt 20:00 we'll wake up and the cat's hunger level will be 665. The minimum number of minutes we must feed the cat is 10. Since the current time is 20:00 we have to feed the cat 10 minutes after waking up. We need to spend 1015 - 10 * 15 = 975 roubles.\n\nAt 21:00 we'll wake up and the cat's hunger level will be 665. The minimum number of minutes we must feed the cat is 10. Since the current time is 21:00 we have to feed the cat 10 minutes after waking up. We need to spend 975 - 10 * 15 = 870 roubles.\n\nAt 22:00 we'll wake up and the cat's hunger level will be 665. The minimum number of minutes we must feed the cat is 10. Since the current time is 22:00 we have to feed the cat 10 minutes after waking up. We need to spend 870 - 10 * 15 = 810 roubles.\n\nAt 23:00 we'll wake up and the cat's hunger level will be 665. The minimum number of minutes we must feed the cat is 10. Since the current time is 23:00 we have to feed the cat 10 minutes after waking up. We need to spend 810 - 10 * 15 = 775 roubles.\n\nAt 0:00 we'll wake up and the cat's hunger level will be 514. The minimum number of minutes we must feed the cat is 10. Since the current time is 0:00 we have to feed the cat 10 minutes after waking up. We need to spend 775 - 10 * 15 = 725 roubles.\n\nAt 1:00 we'll wake up and the cat's hunger level will be 514. The minimum number of minutes we must feed the cat is 10. Since the current time is 1:00 we have to feed the cat 10 minutes after waking up. We need to spend 725 - 10 * 15 = 725 roubles.\n\nAt 2:00 we'll wake up and the cat's hunger level will be 514. The minimum number of minutes we must feed the cat is 10. Since the current time is 2:00 we have to feed the cat 10 minutes after waking up. We need to spend 725 - 10 * 15 = 725 roubles.\n\nAt 3:00 we'll wake up and the cat's hunger level will be 514. The minimum number of minutes we must feed the cat is 10. Since the current time is 3:00 we have to feed the cat 10 minutes after waking up. We need to spend 725 - 10 * 15 = 725 roubles.\n\nAt 4:00 we'll wake up and the cat's hunger level will be 514. The minimum number of minutes we must feed the cat is 10. Since the current time is 4:00 we have to feed the cat 10 minutes after waking up. We need to spend 725 - 10 * 15 = 725 roubles.\n\nAt 5:00 we'll wake up and the cat's hunger level will be 514. The minimum number of minutes we must feed the cat is 10. Since the current time is 5:00 we have to feed the cat 10 minutes after waking up. We need to spend 725 - 10 * 15 = 725 roubles.\n\nAt 6:00 we'll wake up and the cat's hunger level will be 514. The minimum number of minutes we must feed the cat is 10. Since the current time is 6:00 we have to feed the cat 10 minutes after waking up. We need to spend 725 - 10 * 15 = 725 roubles.\n\nAt 7:00 we'll wake up and the cat's hunger level will be 514. The minimum number of minutes we must feed the cat is 10. Since the current time is 7:00 we have to feed"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"19 00\"\n) == \"25200.0000\"\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"19 00\\n255 1 100 1\") == \"25200.0\"\nassert solution(\"17 41\\n1000 6 15 11\") == \"1365.0\"\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"19 00\\n255 1 100 1\") == \"25200.0\"\nassert solution(\"17 41\\n1000 6 15 11\") == \"1365.0\""
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"19 00\\n255 1 100 1\") == \"25200.0\"\nassert solution(\"17 41\\n1000 6 15 11\") == \"1365.0\"\n\n\"\"\"\n\nimport os\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"19 00\n255 1 100 1\"\"\"\n        output = \"\"\"25200.0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"17 41\n1000 6 15 11\"\"\"\n        output = \"\"\"1365.0\"\"\"\n        self.assertIO(input, output)\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"19 00\"\n) == \"25200.0\"\n\nassert solution(\n    \"17 41\"\n) == \"1365.0\"\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaabbbb') == 6\n\"\"\"\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaba\") == 6\nassert solution(\"abracadabra\") == 20\n\"\"\""
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaba') == 6\nassert solution('aaabbbb') == 6\nassert solution('abracadabra') == 20\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaba\") == 6\n\nassert solution(\"aaabbbb\") == 6\n\nassert solution(\"abracadabra\") == 20\n\n\"\"\"\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(aaba) == 6\nassert solution(aaabbbb) == 6\nassert solution(abracadabra) == 20\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaabbbb\") == 6\n\"\"\"\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaba') == 6\nassert solution('aaabbbb') == 6\nassert solution('abracadabra') == 20\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abracadabra\") == 20\n\"\"\"\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaba\") == 6\nassert solution(\"aaabbbb\") == 6\nassert solution(\"abracadabra\") == 20\n\"\"\"\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaba') == 6\nassert solution('aaabbbb') == 6\nassert solution('abracadabra') == 20\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 1 2 1\") == \"4\"\nassert solution(\"5\\n0 -1 -1 -1 -1\") == \"4\"\n"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 2 1\") == \"4\"\nassert solution(\"5\\n0 -1 -1 -1 -1\") == \"4\"\n\n---\n\nSolution:\n\nfrom collections import deque\n\nsize = int(stdin.readline())\nslimes = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_solution\n\nprint(solution(stdin))\n"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 1 2 1\") == \"4\"\nassert solution(\"5\\n0 -1 -1 -1 -1\") == \"4\"\nassert solution(\"6\\n0 -1 -1 -1 -1 0\") == \"4\"\n"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 1 2 1') == 4\nassert solution('5\\n0 -1 -1 -1 -1') == 4\n"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 1 2 1\") == '4'\nassert solution(\"5\\n0 -1 -1 -1 -1\") == '4'"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n2 1 2 1''') == '4'\nassert solution('''5\n0 -1 -1 -1 -1''') == '4'\n"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 2 1\") == \"4\"\nassert solution(\"5\\n0 -1 -1 -1 -1\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 1 2 1') == '4'\nassert solution('5\\n0 -1 -1 -1 -1') == '4'\n\n\"\"\""
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 2 1') == '4'\nassert solution('5 0 -1 -1 -1 -1') == '4'\n\"\"\""
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10\") == \"0\"\nassert solution(\"6 100\") == \"2\"\nassert solution(\"1 2 5 10 15 20\") == \"1\"\n\"\"\"\n\nn, B = list(map(int, stdin.split()))\narr = list(map(int, stdin.split()))\n\ndp = [[0 for i in range(n)] for j in range(n)]\nfor i in range(1, n):\n    dp[i][i] = arr[i]\n\nfor length in range(2, n + 1):\n    for l in range(1, n - length + 2):\n        r = l + length - 1\n        dp[l][r] = float(\"-inf\")\n        for k in range(l, r):\n            dp[l][r] = max(dp[l][r], dp[l][k] + dp[k + 1][r] + arr[l] * arr[k + 1] * arr[r + 1])\n\nprint(dp[1][n - 1])\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 4\\n1 2 5 10 15 20') == '1'\nassert solution('4 10\\n1 3 2 4') == '0'\nassert solution('6 100\\n1 2 3 4 5 6') == '2'\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10\\n1 3 2 4') == '0'\nassert solution('6 100\\n1 2 3 4 5 6') == '2'\nassert solution('6 100\\n1 2 3 4 5 6') == '2'\n\"\"\""
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4\\n1 2 5 10 15 20\") == \"1\"\nassert solution(\"4 10\\n1 3 2 4\") == \"0\"\nassert solution(\"6 100\\n1 2 3 4 5 6\") == \"2\"\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 4\\n1 2 5 10 15 20\") == \"1\"\nassert solution(\"4 10\\n1 3 2 4\") == \"0\"\nassert solution(\"6 100\\n1 2 3 4 5 6\") == \"2\"\n\n\"\"\"\n\nn, b = map(int, input().split())\nseq = list(map(int, input().split()))\nseq.sort()\ncnt_odd = 0\ncnt_even = 0\nres = 0\n\nfor i in range(n - 1):\n    if seq[i] % 2 == 0:\n        cnt_even += 1\n    else:\n        cnt_odd += 1\n    if cnt_even == cnt_odd:\n        res += 1\n    if b < seq[i]:\n        break\nprint(res)\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\\n1 3 2 4\\n\") == '2'\nassert solution(\"6 100\\n1 2 3 4 5 6\\n\") == '0'\nassert solution(\"6 100\\n1 2 3 4 5 6\\n\") == '2'\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''6 4\n1 2 5 10 15 20''') == '1'\nassert solution('''6 100\n1 2 3 4 5 6''') == '0'\nassert solution('''4 10\n1 3 2 4''') == '0'\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4\\n1 2 5 10 15 20\") == \"1\"\nassert solution(\"4 10\\n1 3 2 4\") == \"0\"\nassert solution(\"6 100\\n1 2 3 4 5 6\") == \"2\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4\\n1 2 5 10 15 20\") == \"1\"\nassert solution(\"4 10\\n1 3 2 4\") == \"0\"\nassert solution(\"6 100\\n1 2 3 4 5 6\") == \"2\""
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 4\\n1 2 5 10 15 20') == '1\\n'\nassert solution('4 10\\n1 3 2 4') == '0\\n'\nassert solution('6 100\\n1 2 3 4 5 6') == '2\\n'"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1\\n2 3\") == \"16\"\nassert solution(\"3\\n0 2 1\") == \"16\"\n\nassert solution(\"2\\n1 1\") == \"4\"\nassert solution(\"2\\n2 2\") == \"0\"\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 1') == '16'\nassert solution('3 2 1') == '20'\nassert solution('3 3 3') == '24'\nassert solution('3 1 2') == '12'\n\n\"\"\"\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(example_input) == example_output\n\n\"\"\"\n\nfrom typing import List, Dict\nfrom collections import Counter\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 2 1') == '16'\n\"\"\"\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 2 1\") == \"16\"\n\"\"\"\nfrom itertools import permutations\nfrom typing import Tuple\n\nfrom util import *\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 2 1\") == \"16\"\nassert solution(\"2\\n1 1\") == \"4\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 1\") == \"16\"\nassert solution(\"2\\n1 1\") == \"4\"\nassert solution(\"1\\n1\") == \"4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 2 1') == '16'\nassert solution('2\\n1 1') == '4'\n\n\n\"\"\""
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 2 1\") == \"16\"\nassert solution(\"2\\n1 1\") == \"4\"\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1010') == 3\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1010') == 3\nassert solution('11110') == 2\nassert solution('111111110') == 2\nassert solution('1111111111') == 2\nassert solution('1101011011') == 1\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\\n1010\"\n) == \"3\""
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1010\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1010\") == 3\n\"\"\"\nimport math\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1010\") == 3\nassert solution(\"1100\") == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1010\") == 3"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1010') == 3\nassert solution('11111111111111111111111111111111111111') == 2147483647\nassert solution('1') == 0\nassert solution('0') == 1\nassert solution('01') == 2\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1010\") == 3\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1010') == 3\nassert solution('1100') == 3\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 2\") == 2\nassert solution(\"5 4 7\") == 1\nassert solution(\"6 2 3\") == 1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 2') == 2\nassert solution('5 4 7') == 1\nassert solution('6 2 3') == 1\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 2\") == \"2\"\nassert solution(\"5 4 7\") == \"1\"\nassert solution(\"6 2 3\") == \"1\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 2\") == 2\nassert solution(\"5 4 7\") == 1\nassert solution(\"6 2 3\") == 1\n\"\"\"\n\nT, S, q = map(int, input().split())\nS = int(S)\nq = int(q)\n\ncount = 0\n\nfor i in range(1, q + 1):\n    if i > T:\n        break\n    if i <= S:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 2\") == 2\nassert solution(\"5 4 7\") == 1\nassert solution(\"6 2 3\") == 1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 2\") == \"2\"\nassert solution(\"5 4 7\") == \"1\"\nassert solution(\"6 2 3\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 2') == '2'\nassert solution('5 4 7') == '1'\n\"\"\""
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 2\") == \"2\"\nassert solution(\"5 4 7\") == \"1\"\nassert solution(\"6 2 3\") == \"1\"\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(r\"\"\"5 2 2\n\"\"\") == \"\"\"2\"\"\", 'Test 1'\n\nassert solution(r\"\"\"5 4 7\n\"\"\") == \"\"\"1\"\"\", 'Test 2'\n\nassert solution(r\"\"\"6 2 3\n\"\"\") == \"\"\"1\"\"\", 'Test 3'\n\nprint(\"OK\")\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 2') == 2\nassert solution('5 4 7') == 1\n\"\"\""
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\nassert solution(\"yeee\") == \"No\"\n\n\n\n\nimport sys\nimport collections"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\nassert solution(\"yeee\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ababa') == 'Yes'\nassert solution('zzcxx') == 'Yes'\nassert solution('yeee') == 'No'\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ababa\") == 'Yes'\nassert solution(\"zzcxx\") == 'Yes'\nassert solution(\"yeee\") == 'No'\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\nassert solution(\"yeee\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbc\") == \"Yes\"\nassert solution(\"abab\") == \"No\"\nassert solution(\"bbbbb\") == \"Yes\"\nassert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\nassert solution(\"yeee\") == \"No\"\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'No'\nassert solution('ababa') == 'Yes'\nassert solution('zzcxx') == 'Yes'\nassert solution('yeee') == 'No'\n\n\n\n### \u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043a \u0442\u0440\u0435\u0442\u044c\u0435\u043c\u0443 \u0443\u0440\u043e\u043a\u0443\n\n### \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0443\u043c\u043c\u044b \u0434\u0432\u0443\u0445 \u0441\u0432\u043e\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n\n### \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1 (\u0441\u043e \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u043e\u043c)"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\nassert solution(\"yeee\") == \"No\"\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ababa\") == \"Yes\"\nassert solution(\"zzcxx\") == \"Yes\"\nassert solution(\"yeee\") == \"No\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 3 3 7\") == \"2\"\nassert solution(\"5 5\\n10 9 5 8 7\") == \"1\"\nassert solution(\"5 10\\n1 1 2 3 4 5 6 7 8 9 10\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3 3 7\") == 2\n\"\"\"\n\nimport sys\n\nn, z = map(int, sys.stdin.readline().split())\nX = list(map(int, sys.stdin.readline().split()))\ncnt = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if abs(X[i] - X[j]) >= z:\n            cnt += 1\nprint(cnt // 2)\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3 3 7\") == 2\nassert solution(\"5 5\\n10 9 5 8 7\") == 1\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 3 3 7') == 2\nassert solution('5 5\\n10 9 5 8 7') == 1\nassert solution('2 5\\n10 9 5 8 7') == 0\nassert solution('5 5\\n9 8 7 6 5') == 0\nassert solution('5 5\\n6 5 8 7 9') == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n\") == 2\nassert solution(\"5 5\\n10 9 5 8 7\\n\") == 1\n\"\"\""
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 3 3 7') == '2'\nassert solution('5 5\\n10 9 5 8 7') == '1'\n\"\"\"\n\nn, z = map(int, input().split())\nl = list(map(int, input().split()))\n\nl.sort()\n\ncnt = 0\n\nfor i in range(n):\n    if i < n-1:\n        if l[i] + z < l[i+1]:\n            cnt += 1\n            # print(l[i], l[i+1])\n    else:\n        if l[i] + z < l[0]:\n            cnt += 1\n            # print(l[i], l[0])\n\nprint(cnt)\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == expected_result\n\"\"\"\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3 3 7\") == 2\nassert solution(\"5 5\\n10 9 5 8 7\") == 1\nassert solution(\"5 2\\n10 9 5 8 7\") == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 3 3 7\\n') == 2\nassert solution('5 5\\n10 9 5 8 7\\n') == 1\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'4 2\\n1 3 3 7'\n) == 2\n\nassert solution(\n'5 5\\n10 9 5 8 7'\n) == 1\n\n\"\"\"\n\nfrom math import inf\nfrom functools import reduce\nfrom typing import Callable, List, Tuple"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 2\\nYYY\\nNNN\\nYNY\\n') == '2'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\\nYYY\\nNNN\\nYNY\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2\\nYYY\\nNNN\\nYNY\") == 2\n\"\"\"\n"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 2\\nYYY\\nNNN\\nYNY\") == \"2\"\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\\nYYY\\nNNN\\nYNY\") == \"2\"\n"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 2\\nYYY\\nNNN\\nYNY') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 3 2\nYYY\nNNN\nYNY\n''') == 2\n\nassert solution('''4 4 1\nNNNY\nNNYN\nNYNN\nYNNN\n''') == 4\n"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\\nYYY\\nNNN\\nYNY\") == \"2\"\n"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2\\nYYY\\nNNN\\nYNY\\n\") == 2\n"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 1\\nNNNY\\nNNYN\\nNYNN\\nYNNN\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 0') == '2'\nassert solution('2 3 7') == '-1'\n\"\"\"\n\n\"\"\"\nn1, n2, n3 = map(int, stdin.split())\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 0\") == \"2\"\nassert solution(\"2 3 7\") == \"-\"\nassert solution(\"1 9 1\") == \"1\""
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 0\") == \"2\"\nassert solution(\"2 3 7\") == \"2\"\nassert solution(\"4 4 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 5\") == \"-1\"\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 0\") == \"2\"\nassert solution(\"2 3 7\") == \"-1\"\n\n\"\"\"\n\n\n\"\"\"\nimport collections"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 0\") == \"2\"\nassert solution(\"2 3 7\") == \"2\"\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1 2 0''') == '2'\nassert solution('''2 3 7''') == '-1'\nassert solution('''2 3 0''') == '1'\n\n'''\n---Task 2: Strings---\n\nDuring your flight to the major airline hub, you realize your skylock is broken. After trying unsuccessfully to repair it, you find a note inside your pack listing how to get in by brute force.\n\nThe note it's written in the following form:\n\nn\nTo put it in other words: the string consists of  routes separated by \"#\". A route is a part of a string which starts with a 5 and ends with a 5. Multiple routes may be c\nonsecutive and a route may be nested inside another route. A valid route is a sequence of 1's and 0's without a single 1 in the beginning and ending. The string does not contain any other characters.\n\nThe task is to count the longest possible string of routes. If the maximum is more than 1, print the index of the first occurrence.\n\nFor example, a longest route string for the given example is \"1110111101111101111101111110111011101110111011110111001110111101110011101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101110111011101111011100111011110111001110111101111011110111110111110111110111110111111011101"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 0') == '2'\nassert solution('2 3 7') == '-1'\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 0\") == '2'\nassert solution(\"2 3 7\") == '-1'\n\"\"\"\nimport re"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 7\") == \"2\"\nassert solution(\"2 1 7\") == \"1\"\nassert solution(\"2 1 0\") == \"1\"\n\n\"\"\"\n\n\n\nfrom sys import stdin"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1 0') == '2'\nassert solution('2 3 7') == '-1'\nassert solution('2 3 6') == '-1'\nassert solution('2 3 7') == '2'\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n0 1 0 1 0\\n') == '3'\nassert solution('5\\n1 1 0 0 1\\n') == '4'\nassert solution('2\\n0 0\\n') == '0'\nassert solution('2\\n0 1\\n') == '1'\nassert solution('2\\n0 1\\n') == '1'\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 0 1 0\") == \"3\"\nassert solution(\"5\\n1 1 0 0 1\") == \"4\"\nassert solution(\"2\\n0 0\") == \"0\"\nassert solution(\"5\\n1 1 0 0 1\") == \"4\"\n\n\n\"\"\"\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n0 1 0 1 0') == '3'\nassert solution('2\\n0 0') == '0'\nassert solution('5\\n1 1 0 0 1') == '4'\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 1 0 1 0\") == 3\n\nassert solution(\"2\\n0 0\") == 0\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 0 0 1\") == \"3\"\nassert solution(\"5\\n0 0\") == \"0\"\nassert solution(\"2\\n0 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 1 0 1 0\") == \"3\"\nassert solution(\"5\\n1 1 0 0 1\") == \"4\"\nassert solution(\"2\\n0 0\") == \"0\"\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 1 0 1 0\\n\") == \"3\"\nassert solution(\"5\\n1 1 0 0 1\\n\") == \"4\"\nassert solution(\"2\\n0 0\\n\") == \"0\"\nassert solution(\"5\\n1 1 0 0 1\\n\") == \"4\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 1 0 1 0\") == \"3\"\nassert solution(\"2\\n0 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 0 0 1\") == \"3\"\nassert solution(\"2\\n0 0\") == \"0\"\nassert solution(\"5\\n0 0 0 0 1\") == \"0\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 1 0 1 0\") == '3'\n\nassert solution(\"5\\n1 1 0 0 1\") == '4'\n\nassert solution(\"2\\n0 0\") == '0'\n\n\nfrom itertools import takewhile, cycle\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 5\\n2 7 7 7') == 'Yes\\n2 7 7'\n\"\"\"\n\nimport sys\n\nn, k, m = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'No'\nassert solution('2 3 4') == 'No'\nassert solution('1 3 2 3 2') == 'No'\nassert solution('1 2 2 1 3 3 3 2 2 1') == 'No'\nassert solution('1 1 1 1 2 2 2 2 2 2 1') == 'No'\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 3\\n1 8 4') == 'Yes\\n1 4'\n\nassert solution('4 3 5\\n2 7 7 7') == 'Yes\\n2 7 7'\n\nassert solution('3 3 3\\n1 8 4') == 'No'\n\nassert solution('4 3 5\\n2 7 7 7') == 'No'\n\nassert solution('1 8 4\\n1 1 1') == 'No'"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 5\") == \"Yes\"\nassert solution(\"2 7 7 7\") == \"Yes\"\nassert solution(\"1 8 4\") == \"No\"\nassert solution(\"1 8 4 2\") == \"Yes\"\nassert solution(\"1 8 4 3\") == \"No\"\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 5\\n2 7 7 7') == 'Yes\\n2 7 7'\nassert solution('3 2 3\\n1 8 4') == 'No'\nassert solution('3 2 3\\n1 8 1') == 'Yes\\n1 1'\nassert solution('3 2 3\\n1 8 3') == 'Yes\\n1 8'\nassert solution('3 2 3\\n1 8 5') == 'No'\n\"\"\""
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 5\\n2 7 7 7\") == \"Yes\\n2 7 7\"\nassert solution(\"4 3 5\\n2 7 7 7\") == \"No\"\n\n\"\"\"\n\nfrom collections import Counter\n\nn, k, m = [int(x) for x in input().split()]\na = list(map(int, input().split()))\n\na = Counter(a)"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 5\\n1 8 4') == 'Yes\\n1 4'\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 5\\n2 7 7 7') == 'Yes\\n2 7 7'\nassert solution('4 3 5\\n7 7 7 7') == 'No'\nassert solution('5 3 5\\n2 1 2 4 5') == 'No'\nassert solution('5 3 5\\n2 7 7 7') == 'Yes\\n2 7 7'\nassert solution('5 3 5\\n2 7 7 7 7') == 'Yes\\n2 7 7'\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 3\\n1 8 4') == 'Yes\\n1 4'\nassert solution('4 3 5\\n2 7 7 7') == 'Yes\\n2 7 7'\n\"\"\"\nfrom collections import Counter\nfrom typing import List, Tuple, Dict\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 3\\n1 8 4') == 'Yes\\n1 4'\nassert solution('4 3 5\\n2 7 7 7') == 'Yes\\n2 7 7'\nassert solution('2 2 1\\n1 2') == 'No'\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 0 0\n0 0 0\n0 0 1''') == '010'\n\nassert solution('''1 0 1\n8 8 8\n2 0 3''') == '010'\n\nassert solution('''0 0 0\n0 0 0\n0 0 1''') == '101'\n\nassert solution('''0 0 0\n0 0 0\n0 0 1''') == '010'\n\nassert solution('''0 1 1\n0 1 1\n0 1 1''') == '110'\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 0 0\\n0 0 0\\n0 0 1') == '010\\n010\\n100'\n\"\"\"\n\nnums = stdin.split(\"\\n\")\nnums = [list(map(int, num.split(\" \"))) for num in nums]\n\nprint('010\\n010\\n100')\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\") == \"010\\n010\\n100\"\nassert solution(\"1 0 1\\n8 8 8\\n2 0 3\") == \"010\\n011\\n100\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\\n0 0 0\\n0 0 1\") == \"010\\n010\\n100\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 1\\n8 8 8\\n2 0 3\") == \"010\\n011\\n100\"\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\\n\") == \"010\"\nassert solution(\"1 0 1\\n8 8 8\\n2 0 3\\n\") == \"010\"\n\n\"\"\"\n\nfrom typing import List\n\nfrom icontract import require, DBC\n\n\nclass Light(DBC):\n    \"\"\"Representation of the state of a light.\"\"\"\n\n    def __init__(self) -> None:\n        self.value = 1\n\n    def toggle(self) -> None:\n        \"\"\"Toggle the state.\"\"\"\n        self.value = -self.value\n\n\nclass Grid(DBC):\n    \"\"\"Representation of the grid of lights.\"\"\"\n\n    def __init__(self, lights: List[Light]) -> None:\n        self.lights = lights\n\n    def switch_all(self) -> None:\n        \"\"\"Switch all lights on and off.\"\"\"\n        for light in self.lights:\n            light.toggle()\n\n    def turn_all_on(self) -> None:\n        \"\"\"Switch all lights on.\"\"\"\n        for light in self.lights:\n            light.value = 1\n\n    def turn_all_off(self) -> None:\n        \"\"\"Switch all lights off.\"\"\"\n        for light in self.lights:\n            light.value = -1\n\n    def toggle(self, x: int, y: int) -> None:\n        \"\"\"Toggle the state of the light at position (x, y).\"\"\"\n        light = self.lights[y][x]\n        light.toggle()\n\n\nclass Solution:\n    \"\"\"The solution to the leetcode problem 923.\"\"\"\n\n    @require(lambda lines: len(lines) == 3)\n    @require(lambda lines: all(len(line) == 3 for line in lines))\n    @require(lambda lines: all(all(0 <= int(number) <= 100 for number in line) for line in lines))\n    def solve(self, lines: List[str]) -> None:\n        \"\"\"Solve leetcode problem 923.\"\"\"\n        grid = self.parse_grid(lines)\n        self.solve_grid(grid)\n\n    def parse_grid(self, lines: List[str]) -> Grid:\n        \"\"\"Parse the input lines into a grid.\"\"\"\n        return Grid(\n            [\n                [\n                    Light()\n                    if int(number) == 0 else\n                    Light() if int(number) == 1 else\n                    Light()\n                ] * 3\n                for line in lines\n                for number in line\n            ]\n        )\n\n    def solve_grid(self, grid: Grid) -> None:\n        \"\"\"Solve the grid.\"\"\"\n        grid.turn_all_off()\n        for line in grid.lights:\n            for light in line:\n                light.value = 0\n        grid.switch_all()\n        grid.turn_all_on()\n\n        grid.toggle(0, 0)\n        grid.switch_all()\n        grid.turn_all_off()\n\n        grid.toggle(0, 0)\n        grid.switch_all()\n        grid.turn_all_off()\n\n        grid.toggle(0, 0)\n        grid.switch_all()\n        grid.turn_all_off()\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 0 0\\n0 0 0\\n0 0 1\\n') == '010'\nassert solution('1 0 1\\n8 8 8\\n2 0 3\\n') == '010'\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\\n\") == \"001\\n010\\n100\"\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0 0\\n0 0 0\\n0 0 1\") == \"001\\n010\\n100\"\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0\\n1 1 3 2\\n2 1 3 2\") == \"3\"\nassert solution(\"3 1\\n1 1 3 2\\n2 1 3 1\") == \"9\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 0\\n1 1 3 2\\n2 1 3 2\") == \"3\"\nassert solution(\"3 1\\n1 1 3 2\\n2 1 3 1\") == \"5\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"-1\"\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == -1\nassert solution('10 2 1 2') == 5\nassert solution('10 3 1 2') == -1\nassert solution('10 3 2 1 2') == 9\nassert solution('10 3 1 1 2') == 5\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0\\n\") == '3'\nassert solution(\"3 1\\n1 1 3 2\\n\") == '5'\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\\n\") == '-1'\nassert solution(\"3 3\\n1 1 3 2\\n2 1 3 1\\n2 1 1 3\\n\") == '9'\nassert solution(\"3 3\\n1 1 3 2\\n2 1 3 1\\n2 1 1 3\\n\") == '-1'\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 1 3 2\\n2 1 3 2\") == \"9\"\nassert solution(\"3 0\\n\") == \"3\"\nassert solution(\"3 1\\n1 1 3 2\\n2 1 3 2\") == \"5\"\n\"\"\""
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n1 1 3 2') == '5'\nassert solution('3 2\\n1 1 3 2\\n2 1 3 1') == '9'\nassert solution('3 2\\n1 1 3 2\\n2 1 3 1\\n3 1 3 2') == '-1'\nassert solution('3 2\\n1 1 3 2\\n2 1 3 1\\n3 1 3 2\\n4 1 3 1') == '7'\n\"\"\"\n\nn, q = [int(x) for x in input().split()]\n\narr = [list(map(int, input().split())) for i in range(q)]\n\ndp = [0] * n\n\nfor i in range(q):\n    t, l, r, v = arr[i]\n    if t == 1:\n        for j in range(l - 1, r):\n            dp[j] += v\n    else:\n        for j in range(l - 1, r):\n            dp[j] += v"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 0\\n1 1 3 2\\n2 1 3 2\") == \"3\\n\"\nassert solution(\"3 1\\n1 1 3 2\\n2 1 3 2\") == \"5\\n\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"9\\n\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"-1\\n\"\n\n\"\"\""
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0\\n1 1 3 2\\n2 1 3 2\") == \"3\"\nassert solution(\"3 1\\n1 1 3 2\\n2 1 3 1\") == \"5\"\nassert solution(\"3 2\\n1 1 3 2\\n2 1 3 1\") == \"-1\"\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 0') == '3'\nassert solution('3 1') == '5'\nassert solution('3 2') == '-1'\n\n'''\n\nimport sys\n\nn, q = map(int, sys.stdin.readline().split())\n\ntable = {}\n\nfor _ in range(q):\n    t, l, r, v = map(int, sys.stdin.readline().split())\n    l -= 1\n    r -= 1\n    if (l, r, v) in table:\n        table[(l, r, v)] += 1\n    else:\n        table[(l, r, v)] = 1\n\nsum = 0\n\nfor (l, r, v), n in table.items():\n    sum += n * (n - 1)\n\nprint(sum)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 0\\n1 1 3 2') == '3'\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7 6\") == \"2/5\"\nassert solution(\"7 2 4\") == \"7/2\"\n\"\"\"\n\nx, y, n = map(int, input().split())\n\nd = min(x, n)\nwhile d > 1:\n    d -= 1\n    if x % d == 0 and y % d == 0:\n        n = min(x // d, n)\n        break"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 4\") == \"7/2\"\nassert solution(\"3 7 6\") == \"2/5\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 7 6') == '2/5'\nassert solution('7 2 4') == '7/2'\nassert solution('7 3 5') == '7/3'\nassert solution('1 1 3') == '1/1'\nassert solution('2 3 2') == '3/2'\n"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(5, 8, 9) == \"1/3\"\nassert solution(5, 8, 8) == \"2/7\"\n\"\"\"\n\nfrom fractions import Fraction\n"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7 6\") == \"2/5\"\nassert solution(\"7 2 4\") == \"7/2\"\nassert solution(\"7 2 7\") == \"1/3\""
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7 6\") == \"2/5\"\nassert solution(\"7 2 4\") == \"7/2\"\n\n\"\"\""
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7 6\") == \"2/5\"\n"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7 6\") == \"2/5\"\n"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2 4') == '7/2'\nprint(solution('7 2 4'))\n"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7 6\") == \"2/5\"\n\"\"\""
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1') == '1'\nassert solution('5 1 2\\n2\\n1 2\\n2 4') == '2'\nassert solution('5 2 2\\n2\\n1 2\\n2 4') == '2'\nassert solution('6 4 1\\n2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1') == '1'\nassert solution('5 1 2\\n2\\n1 2\\n2 4') == '2'\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\") == \"1\"\nassert solution(\"7 1 2\\n2 4\") == \"2\"\nassert solution(\"5 1 2\\n2 4\") == \"2\"\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n7 3 4\n3 4 6\n1 2\n2 5\n5 7\n7 1\n\"\"\") == '1'\n\nassert solution(\"\"\"\n5 1 2\n2\n1 2\n2 4\n\n\"\"\") == '2'\n\"\"\"\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\") == \"1\"\nassert solution(\"5 1 2\\n2\\n1 2\\n2 4\") == \"2\"\nassert solution(\"7 5 7\\n4 6\\n1 2\\n3 5\\n4 7\\n5 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\") == \"1\"\nassert solution(\"5 1 2\\n2\\n1 2\\n2 4\") == \"2\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\") == \"1\"\nassert solution(\"5 1 2\\n2\\n1 2\\n2 4\") == \"2\"\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2\\n2 4 6\\n1 2\\n2 5\\n5 7\\n7 1\") == \"1\"\nassert solution(\"7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\") == \"1\"\n\nprint(\"Teste\")"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1\") == \"1\"\nassert solution(\"5 1 2\\n2\\n1 2\\n2 4\") == \"2\"\nassert solution(\"5 2 1\\n1\\n2\\n2 4\") == \"2\"\n\"\"\"\n\na, b, c = map(int, stdin.readline().split())\nh = list(map(int, stdin.readline().split()))\np = [0] * a\nfor i in range(c):\n    p[int(stdin.readline()) - 1] += 1\nres = 0\nfor i in range(a):\n    res += (p[i] + 1) * h[i]\n    res %= a\nprint(res + 1)\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3 4\\n3 4 6\\n1 2\\n2 5\\n5 7\\n7 1') == '1'\nassert solution('5 1 2\\n2\\n1 2\\n2 4') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 1\\n4\\n5 USB\\n6 PS/2\\n7 PS/2') == '3 14'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0 0'\nassert solution('1 2 3 4') == '0 0'\nassert solution('1 1 1 2 2 2 3 3') == '2 15'\nassert solution('1 2 3 4 5') == '2 12'\nassert solution('1 1 1 1 2 2 2 3 3') == '2 10'\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == \"3 14\"\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\\n\") == \"3 14\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == \"3 14\"\n\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1\") == \"2 14\"\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == \"3 14\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\\n\") == \"3 14\""
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == \"3 14\"\n\nassert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 USB\") == \"2 9\"\n\nassert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 USB\\n8 USB\") == \"3 15\"\n\nprint(\"The solution is correct!\")\n\n\"\"\"\nimport sys"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\\n4\\n5 USB\\n6 PS/2\\n3 PS/2\\n7 PS/2\") == \"3 14\"\n\"\"\""
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == 2\nassert solution(\"hi\") == 7\n\"\"\""
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 26\nassert solution('ab') == 51\n\"\"\"\n\n\nimport unittest\nimport collections\nimport string\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"26\"\nassert solution(\"ab\") == \"52\"\nassert solution(\"abcd\") == \"76\"\nassert solution(\"abcde\") == \"76\"\nassert solution(\"abcdef\") == \"76\"\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == '51'\nassert solution('hi') == '76'\n\"\"\"\nfrom typing import List\n\nfrom icontract import require, ensure"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('hi') == 76\n\"\"\"\n\n\nfrom typing import List\n\nimport unittest\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aa\") == 1\nassert solution(\"ab\") == 2\nassert solution(\"abc\") == 3\nassert solution(\"abcd\") == 5\nassert solution(\"abcde\") == 7\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"hi\") == \"76\"\n\n\n\n\"\"\"\n\n\n\nimport math\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == 2\nassert solution(\"abc\") == 3\nassert solution(\"abcd\") == 4\nassert solution(\"abcde\") == 5\nassert solution(\"abcdef\") == 6\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == '2'\nassert solution('ab') == '3'\nassert solution('abc') == '4'\nassert solution('abcd') == '5'\nassert solution('aab') == '3'\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 51\nassert solution('b') == 63\nassert solution('c') == 87\nassert solution('d') == 95\nassert solution('e') == 119\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == 6\nassert solution(\"1 1\") == 1\nassert solution(\"2 1 2 1\") == 2\nassert solution(\"2 1 2 2 1 1\") == 3\nassert solution(\"1 1 1 1 1 1\") == 0\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 0\\n2 > 3') == '1'\n\"\"\""
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0\\n2 > 3\\n\") == \"9\"\nassert solution(\"4 1\\n3 = 6\\n\") == \"1\"\nassert solution(\"3 2\\n1 < 2\\n2 > 3\\n\") == \"3\"\nassert solution(\"4 2\\n1 < 2\\n2 > 3\\n\") == \"2\"\n\n\"\"\"\n\nimport itertools\n\nn, k = map(int, input().split())\n\ndict = {}\n\nfor _ in range(k):\n    x, s, y = map(int, input().split())\n    if x not in dict:\n        dict[x] = []\n    if y not in dict:\n        dict[y] = []\n    if s == '=':\n        dict[x].append(y)\n        dict[y].append(x)\n    elif s == '<':\n        dict[y].append(x)\n    elif s == '>':\n        dict[x].append(y)\n    elif s == '<=':\n        dict[x].append(y)\n        dict[y].append(x)\n    elif s == '>=':\n        dict[y].append(x)\n        dict[x].append(y)"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0\") == \"9\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"4 1\") == \"3\""
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0\") == '9'\nassert solution(\"3 1\") == '1'\nassert solution(\"4 1\") == '3'\n\n\"\"\"\n\nfrom typing import Callable, List, Union\nfrom collections import Counter\n\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.n, self.k = map(int, stdin.split())\n        self.requirements = []\n        for _ in range(self.k):\n            self.requirements.append(self.parse_input(stdin))\n\n    @staticmethod\n    def parse_input(stdin: str) -> List[Union[int, int, str]]:\n        x, sign, y = stdin.split()\n        return [int(x), int(y), sign]\n\n    def parse_requirements(self) -> List[List[int]]:\n        return list(map(lambda req: [req[0], req[2] - 1, req[1]], self.requirements))\n\n    def parse_solution(self, solution: List[int]) -> bool:\n        x_first, x_last, y_first, y_last = solution[0], solution[-1], solution[1], solution[-2]\n        requirements = self.parse_requirements()\n        first_requirement = requirements[0]\n        requirements_satisfied = True\n        for requirement in requirements[1:]:\n            requirement_satisfied = True\n            requirement_x = requirement[0]\n            if requirement[2] == '<':\n                requirement_satisfied = x_first <= requirement_x\n            elif requirement[2] == '>':\n                requirement_satisfied = x_first > requirement_x\n            elif requirement[2] == '<=':\n                requirement_satisfied = x_first <= requirement_x <= x_last\n            elif requirement[2] == '>=':\n                requirement_satisfied = x_first >= requirement_x >= x_last\n            if not requirement_satisfied:\n                requirements_satisfied = False\n                break\n        if requirements_satisfied:\n            if y_first < y_last:\n                return True\n        return False\n\n    def solve(self) -> str:\n        \"\"\"\n        Returns the number of ways to arrange the blocks\n        such that requirements about the shape of the mausoleum\n        and k additional requirements are met.\n        \"\"\"\n        counter = Counter(map(str, range(2 * self.n)))\n        solution_count = 0\n        for key in counter:\n            solution = [int(x) for x in key.split()]\n            if self.parse_solution(solution):\n                solution_count += int(counter[key])\n        return str(solution_count)\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 0\\n2 > 3\\n\") == \"1\"\n\"\"\"\n\nimport copy\n\nfrom collections import Counter\n\nstdin = \"\"\"2 4\n1 < 2\n1 > 4\n1 > 1\n1 < 2\n3 > 5\n3 > 3\n3 > 2\n3 < 2\n3 < 2\n2 > 3\n2 > 1\n2 > 1\n1 > 3\n1 < 2\n\"\"\""
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 0\") == \"9\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"4 1\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 0\\n2 > 3\\n') == '1'\nassert solution('4 1\\n3 = 6\\n') == '3'\n\"\"\"\n\nimport sys\n\nsys.stdin = open(\"in.txt\")\n\nn, k = map(int, input().split())\nm = []\nsign = []\nfor i in range(k):\n    m.append(list(map(int, input().split())))\n    sign.append(list(map(str, input().split())))\n\nimport itertools\nfrom functools import reduce"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 = 2\\n2 = 3\\n2 > 3') == '2'\nassert solution('4 1\\n3 = 6\\n') == '1'\n\n\"\"\"\nimport string\nimport typing"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3, 0) == \"9\"\nassert solution(3, 1) == \"1\"\nassert solution(4, 1) == \"3\"\nassert solution(4, 2) == \"1\""
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"3\"\n\"\"\"\n\nimport sys\n\nfrom collections import Counter, defaultdict\nfrom math import ceil\n\nsys.stdin = open(\"in\", \"r\")\nsys.stdout = open(\"out\", \"w\")\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == 1\n\nassert solution(\"10\") == 3\n\"\"\"\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '3'\nassert solution('1') == '1'\nassert solution('9') == '3'\n\"\"\"\n\nfrom math import comb"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"3\"\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"3\"\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '1'\nassert solution('10\\n') == '3'\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"10\") == 3"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"10\") == 3\n\nprint('Hooray!')\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '3'\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\n\nassert solution('10') == '3'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0840\") == \"0840\"\n\"\"\"\n\nfrom typing import List\n\nfrom collections import Counter"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0840\") == '-1 17 7 7 7 -1 2 17 2 7'\n\n\"\"\"\nfrom typing import List, Dict\nfrom collections import deque"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0840\") == \"2 2 1 2 1 2 2 0 1\"\nassert solution(\"084048400\") == \"2 2 1 2 1 2 2 0 1\"\nassert solution(\"0484807\") == \"2 2 1 2 1 2 2 0 1\"\nassert solution(\"0484807487\") == \"2 2 1 2 1 2 2 0 1\"\nassert solution(\"0494807487\") == \"2 2 1 2 1 2 2 0 1\"\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0840') == '0840'\nassert solution('1423') == '-1 5 7 3 7'\nassert solution('4203') == '2 2 1 2 1 2 2 0 1'\nassert solution('0835') == '-1 5 7 3 7'\nassert solution('45345') == '2 2 1 2 1 2 2 0 1'\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0840\") == \"\"\"\\\n-1 17 7 7 7 -1 2 17 2 7 \n17 17 7 5 5 5 2 7 2 7 \n7 7 7 4 3 7 1 7 2 5 \n7 5 4 7 3 3 2 5 2 3 \n7 5 3 3 7 7 1 7 2 7 \n-1 5 7 3 7 -1 2 9 2 7 \n2 2 1 2 1 2 2 2 0 1 \n17 7 7 5 7 9 2 17 2 3 \n2 2 2 2 2 2 0 2 2 2 \n7 7 5 3 7 7 1 3 2 7 \n\"\"\"\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0840') == '17 7 7 7 -1 2 17 2 7'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0840') == '-1 17 7 7 7 -1 2 17 2 7'\nassert solution('080') == '-1 17 7 7 7 -1 2 17 2 7'\nassert solution('0') == '0 0 0 0 0 0 0 0 0 0'\nassert solution('8') == '0 0 0 0 0 0 0 0 0 0'\nassert solution('1') == '1 0 0 0 0 0 0 0 0 0'\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0840\") == \"2 2 1 2 1 2 2 0 1\"\nassert solution(\"0\") == \"1 1 1 1 1 1 1 1 1\"\nassert solution(\"0243\") == \"6 7 2 2 1 2 2 0 1\"\nassert solution(\"0238\") == \"6 7 2 2 1 2 2 0 1\"\nassert solution(\"02143\") == \"6 7 2 2 1 2 2 0 1\"\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0840\") == \"17 7 7 7 -1 2 17 2 7\"\nprint(solution(\"0840\"))\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0840\") == \"2 2 1 2 1 2 2 0 1\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBWBWBWB\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"WBWBWBWB\\n\"\n                 \"WBWBWBWB\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"WBWBWBWB\\n\") == \"YES\"\n                 \nassert solution(\"BBBBBBWW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\") == \"NO\"\n                 \nassert solution(\"BBBBBBBW\\n\"\n                 \"BBBBBBBW\\n\"\n                 \"BBBBBBBW\\n\"\n                 \"BBBBBBBW\\n\"\n                 \"BBBBBBBW\\n\"\n                 \"BBBBBBBW\\n\"\n                 \"BBBBBBBW\\n\"\n                 \"BBBBBBBW\\n\") == \"NO\"\n                 \nassert solution(\"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"WBWBWBWB\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"WBWBWBWB\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"WBWBWBWB\\n\") == \"YES\"\n                 \nassert solution(\"WBBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"WBWBWBWB\\n\"\n                 \"WBWBWBWB\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"WBWBWBWB\\n\") == \"YES\"\n                 \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WWWBBWB\\nBWBWBWB\\nWBWBWBW\\nBWBWBWB\\nWWWBBWB\\nWBWBWBW\\nBWBWBWB\\nWBWBWBW\") == \"YES\"\nassert solution(\"WWWBBWB\\nBWBWBWB\\nBWBWBWB\\nBWBWBWB\\nWWWBBWB\\nWBWBWBW\\nBWBWBWB\\nWBWBWBW\") == \"NO\"\nassert solution(\"BWBWBWB\\nBWBWBWB\\nBWBWBWB\\nBWBWBWB\\nBWBWBWB\\nBWBWBWB\\nBWBWBWB\\nBWBWBWB\") == \"YES\"\nassert solution(\"WWWBWBW\\nWWWBWBW\\nWWWBWBW\\nWWWBWBW\\nWWWBWBW\\nWWWBWBW\\nWWWBWBW\\nWWWBWBW\") == \"NO\"\nassert solution(\"BWBWBWB\\nBWBWBWB\\nBWBWBWB\\nBWBWBWB\\nBWBWBWB\\nBWBWBWB\\nBWBWBWB\\nBWBWBWB\") == \"YES\"\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WBWBWBWB\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"WBWBWBWB\\n\"\n                 \"WBWBWBWB\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"WBWBWBWB\") == \"YES\"\n\nassert solution(\"WBWBWBWB\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"WBWBWBWB\\n\"\n                 \"WBWBWBWB\\n\"\n                 \"BWBWBWBW\\n\"\n                 \"WBWBWBWB\") == \"NO\"\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\") == \"NO\"\nassert solution(\"WBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\") == \"NO\"\nassert solution(\"BBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\") == \"NO\"\nassert solution(\"WBWBWBWB\\nWBWBWBWB\\nBBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\") == \"YES\"\nassert solution(\"BBBWBWBW\\nWBBBWBWB\\nWBBBWBWB\\nWBBBWBWB\\nBWBWBWBW\\nWBBBWBWB\\nWBBBWBWB\\nWBBBWBWB\") == \"YES\"\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BBBBBBWW\\n\"\n\"BWBWBWBW\\n\"\n\"BWBWBWBW\\n\"\n\"BWBWBWBW\\n\"\n\"WBWBWBWB\\n\"\n\"WBWBWBWB\\n\"\n\"BWBWBWBW\\n\"\n\"WBWBWBWB\\n\") == \"YES\"\nassert solution(\"BBBBBBWW\\n\"\n\"BWBWBWBW\\n\"\n\"BWBWBWBW\\n\"\n\"BWBWBWBW\\n\"\n\"WBWBWBWB\\n\"\n\"WBWBWBWB\\n\"\n\"BWBWBWBW\\n\"\n\"WBWBWBWB\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WBWBWBWB\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\") == \"YES\"\nassert solution(\"BBBBBBWW\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\") == \"NO\"\nassert solution(\"BBBBBBWW\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBBWBWBW\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBBBBBWW\\nBWBWBWBW\\nBWBWBWBW\\nBWBWBWBW\\nWBWBWBWB\\nWBWBWBWB\\nBWBWBWBW\\nWBWBWBWB\\n\") == \"YES\"\nassert solution(\"WWWWWWB\\nWWWWBBW\\nWBWBWWW\\nWBWBWWW\\nWWWWWWB\\nWWWWBBW\\nWBWBWWW\\nWWWWWWB\\n\") == \"NO\"\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WWWBWBWBBWBWBWB\") == \"YES\"\nassert solution(\"BBWBWBWBWWBWBWBW\") == \"NO\"\nassert solution(\"BBBWBWBWBWBBBWBW\") == \"NO\"\nassert solution(\"WWBWBWBWBWWBWBWB\") == \"YES\"\nassert solution(\"WWBWBWBWBWWBBWBW\") == \"NO\"\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WWWBWBWWBWBWBW\\nWBWBWBWWBWBWBW\\nBWBWBWWBWBWBW\\nWBWBWWBWBWBWBW\\nWWWBWBWWBWBWBW\\nBWBWBWWBWBWBW\\nWBWBWWBWBWBWBW\\nWWWBWBWWBWBWBW\") == \"YES\"\nassert solution(\"WWWBBBWWBWBWBW\\nWBWBWWBWBWBWBW\\nBWBWBWWBWBWBW\\nWBWBWWBWBWBWBW\\nWWWBBBWWBWBWBW\\nBWBWBWWBWBWBW\\nWBWBWWBWBWBWBW\\nWWWBBBWWBWBWBW\") == \"NO\"\nassert solution(\"WWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\\nWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\\nWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\\nWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\") == \"YES\"\nassert solution(\"BWBWBWBWBWBWBW\\nWWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\\nWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\\nWWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\") == \"NO\"\nassert solution(\"BWBWBWBWBWBWBW\\nWWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\\nBWBWBWBWBWBWBW\\nWWBWBWBWBWBWBW\") == \"NO\"\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"WBWBWBWB\\n\"\n\"BWBWBWBW\\n\"\n\"BWBWBWBW\\n\"\n\"BWBWBWBW\\n\"\n\"WBWBWBWB\\n\"\n\"WBWBWBWB\\n\"\n\"BWBWBWBW\\n\"\n\"WBWBWBWB\"\n) == \"YES\"\nassert solution(\n\"WBWBWBWB\\n\"\n\"BWBWBWBW\\n\"\n\"BWBWBWBW\\n\"\n\"BWBWBWBW\\n\"\n\"WBWBWBWB\\n\"\n\"WBWBWBWB\\n\"\n\"BWBWBWBW\\n\"\n\"WBWBWBWB\"\n) == \"NO\"\nassert solution(\n\"WBWBWBWB\\n\"\n\"WBBWBWBW\\n\"\n\"WBBWBWBW\\n\"\n\"WBBWBWBW\\n\"\n\"WBWBWBWB\\n\"\n\"WBWBWBWB\\n\"\n\"WBBWBWBW\\n\"\n\"WBBWBWBW\"\n) == \"YES\"\nassert solution(\n\"WBWBWBWB\\n\"\n\"WBBBWBWB\\n\"\n\"WBBBWBWB\\n\"\n\"WBBBWBWB\\n\"\n\"WBBBWBWB\\n\"\n\"WBBBWBWB\\n\"\n\"WBBBWBWB\\n\"\n\"WBBBWBWB\"\n) == \"YES\"\nassert solution(\n\"WBWBWBWB\\n\"\n\"WBBBWBWB\\n\"\n\"BWBWBWBW\\n\"\n\"BWBWBWBW\\n\"\n\"WBBBWBWB\\n\"\n\"WBBBWBWB\\n\"\n\"BWBWBWBW\\n\"\n\"WBWBWBWB\"\n) == \"YES\"\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6 12\") == \"3\"\nassert solution(\"2 3\") == \"-1\"\nassert solution(\"2 4 6 13\") == \"3\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6 12\") == \"3\"\n\"\"\"\n\nm = int(input())\nnums = list(map(int, input().split()))\nnums.sort()\n\nres = -1\ni = 1\nwhile i < m:\n    if nums[i-1] > nums[i] and nums[i] == nums[i-1] + 1:\n        res = nums[i]\n    i += 1\n\nprint(res)\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 4 6 12\") == \"3\\n4 6 12\"\nassert solution(\"2\\n2 3\") == \"-1\"\nassert solution(\"2\\n2 3\") == \"-1\"\nassert solution(\"2\\n2 3\") == \"-1\"\nassert solution(\"2\\n2 3\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2 1\") == \"2 3\"\nassert solution(\"5 4 6 7 8 9\") == \"-1\"\nassert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"1 2 3 4 5\"\nassert solution(\"4 3 2 1\") == \"2 3\"\n\n\n\n-----"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6 12') == '3'\nassert solution('2 3') == '-1'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 4 6 12') == '3\\n4 6 12'\n\"\"\"\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 12') == '3 4 6 12'\nassert solution('2 3') == '-1'\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 4 6 12\") == \"3 4 6 12\"\nassert solution(\"2 3\") == \"-1\"\nassert solution(\"2 3 4\") == \"-1\"\nassert solution(\"2 4 6 12\") == \"3 4 6 12\"\n\n\"\"\""
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 4 6 12\") == \"3\\n4 6 12\"\nassert solution(\"2\\n2 3\") == \"-1\"\n\n\n-----"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 4 6 12\") == \"3 4 6 12\"\nassert solution(\"2 3\") == \"-1\"\nassert solution(\"2 3 4 5\") == \"3 4 5\"\nassert solution(\"4 6\") == \"6\"\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 1 2\\n\") == \"3 2 0 2 0\"\n\"\"\""
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 1 2') == '3 2 0 2 0'\nassert solution('4\\n3 2 1 4') == '2 3 4 0'"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 1 2\") == \"3 2 0 2 0\"\nassert solution(\"4\\n3 2 1 4\") == \"2 3 4 0\"\n\nprint(solution(input()))"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 1 2\\n\") == '3 2 0 2 0'\nassert solution(\"4\\n3 2 1 4\\n\") == '2 3 4 0'\n\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))\n\nprint(*[0 if nums[i] <= nums[i+1] else nums[i+1]-nums[i] for i in range(n-1)])"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 1 2\\n') == '3 2 0 2 0'\n\n------\n\n\n\n-----\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 1 2\\n\") == \"3 2 0 2 0\"\nassert solution(\"4\\n3 2 1 4\\n\") == \"2 3 4 0\"\n\"\"\"\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 1 2\") == \"3 2 0 2 0\"\nassert solution(\"4\\n3 2 1 4\") == \"2 3 4 0\"\nassert solution(\"5\\n4 2 3 1 2\") == \"3 2 0 2 0\"\nassert solution(\"3\\n4 5 2\") == \"2 5 0\"\n\nprint(\"It is all good. Let's check it now\")\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 1 2\") == '3 2 0 2 0'\nassert solution(\"4\\n3 2 1 4\") == '2 3 4 0'\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 1 2\\n\") == \"3 2 0 2 0\"\n\nassert solution(\"4\\n3 2 1 4\\n\") == \"2 3 4 0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"3 2 0 2 0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 8 81 162') == 'YES\\n5\\n2 4 8 81 162'\nassert solution('100 40021') == 'YES\\n5\\n100 200 2001 4002 40021'\nassert solution('8 2 4 1') == 'NO'\nassert solution('1 1') == 'NO'\nassert solution('1 1') == 'NO'\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2, 162) == 'YES'\nassert solution(4, 42) == 'NO'\nassert solution(100, 40021) == 'YES'\n\"\"\""
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('2 1') == 'NO'\nassert solution('2 162') == 'YES'\nassert solution('2 4 8 81 162') == 'YES'\nassert solution('4 42') == 'NO'\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 162\") == \"YES\\n5\\n2 4 8 81 162\"\n\nassert solution(\"100 40021\") == \"YES\\n5\\n100 200 2001 4002 40021\"\n\nprint(solution(\"2 162\"))\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 162') == 'YES\\n5\\n2 4 8 81 162'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\na, b = map(int, input().split())"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 162\") == \"YES\\n5\\n2 4 8 81 162\"\nassert solution(\"4 42\") == \"NO\"\nassert solution(\"100 40021\") == \"YES\\n5\\n100 200 2001 4002 40021\"\n\nassert solution(\"2 162\") == \"YES\\n5\\n2 4 8 81 162\"\nassert solution(\"4 42\") == \"NO\"\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 162') == 'YES\\n5\\n2 4 8 81 162'\nprint(solution('2 162'))\n\nassert solution('4 42') == 'NO'\nprint(solution('4 42'))\n\nassert solution('100 40021') == 'YES\\n5\\n100 200 2001 4002 40021'\nprint(solution('100 40021'))\n\nassert solution('1 16093416391827364518518483436342932156738493459184063279725341878983277639125982289428874632769084697641599128529656770951025913832935953473805574338200113412659775786697792565528689571375141248370724467515644467808617164765803317846970589682597103367228844') == 'YES\\n19\\n1 9 31 49 214 63 51 210 36 5 16 19 50 72 0 1 1 63 72 7 2'\nprint(solution('1 16093416391827364518518483436342932156738493459184063279725341878983277639125982289428874632769084697641599128529656770951025913832935953473805574338200113412659775786697792565528689571375141248370724467515644467808617164765803317846970589682597103367228844'))\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 162\") == \"YES\\n5\\n2 4 8 81 162\"\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 162\") == \"YES\\n5\\n2 4 8 81 162\"\n\"\"\""
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 162\") == \"YES\\n5\\n2 4 8 81 162\"\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 5\") == \"18, 3 6\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 5\") == \"18\"\nassert solution(\"2 4 4\") == \"16\"\n\"\"\""
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 4') == '16'\nassert solution('3 3 5') == '18'"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 5\") == \"18\"\nassert solution(\"2 4 4\") == \"16\"\n\nsolution(\"3 3 5\") == \"18\"\nsolution(\"2 4 4\") == \"16\"\n\n\"\"\"\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 5\") == '18\\n3 6\\n'\nassert solution(\"2 4 4\") == '16\\n4 4\\n'\n\nprint(solution(\"3 3 5\"))\nprint(solution(\"2 4 4\"))"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 5\\n') == '18\\n3 6\\n'\nassert solution('2 4 4\\n') == '16\\n4 4\\n'\n\nprint(\"Success!\")\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 5\\n\") == \"1 4 1\"\n\"\"\"\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 5\") == \"18 3 6\"\nassert solution(\"2 4 4\") == \"16 4 4\"\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4\") == \"16\"\nassert solution(\"3 3 5\") == \"18\"\nassert solution(\"3 3 5\") == \"18\"\n\"\"\"\n\nn, a, b = map(int, input().split())\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 5') == '18'\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected_result\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-7 1\\n5 2\\n8 2\") == 1907\n\"\"\""
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n-7 1\n5 2\n8 2\n\"\"\") == '1907'\nassert solution(\"\"\"\n1\n-5 1\n\"\"\") == 'Infinity'\nassert solution(\"\"\"\n4\n27 2\n13 1\n-50 1\n8 2\n\"\"\") == '1897'\nassert solution(\"\"\"\n1\n57 1\n\"\"\") == 'Impossible'\nassert solution(\"\"\"\n3\n-7 1\n5 2\n8 2\n\"\"\") == '1907'\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-7 1\\n5 2\\n8 2\") == \"1907\"\nassert solution(\"2\\n57 1\\n22 2\") == \"Impossible\"\nassert solution(\"1\\n-5 1\") == \"Infinity\"\nassert solution(\"4\\n27 2\\n13 1\\n-50 1\\n8 2\") == \"1897\"\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n-7 1\n5 2\n8 2\"\"\") == \"1907\"\nassert solution(\"\"\"2\n57 1\n22 2\"\"\") == \"Impossible\"\nassert solution(\"\"\"1\n-5 1\"\"\") == \"Infinity\"\nassert solution(\"\"\"4\n27 2\n13 1\n-50 1\n8 2\"\"\") == \"1897\"\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-7 1\\n5 2\\n8 2\") == \"1907\"\nassert solution(\"2\\n57 1\\n22 2\") == \"Impossible\"\n\"\"\"\n\nn = int(input())\n\nr = 1900\n\nfor i in range(n):\n    c, d = map(int, input().split())\n    r += c if r >= 1900 else -c\n    if r >= 1900 and d == 1:\n        r += c if r >= 1900 else -c\n\nprint(\"Impossible\" if r < 1900 else \"Infinity\")\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n-7 1\\n5 2\\n8 2\\n\") == \"1907\"\nassert solution(\"2\\n57 1\\n22 2\\n13 1\\n-50 1\\n8 2\\n\") == \"Impossible\"\nassert solution(\"1\\n-5 1\\n\") == \"Infinity\"\nassert solution(\"4\\n27 2\\n13 1\\n-50 1\\n8 2\\n\") == \"1897\""
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n-7 1\\n5 2\\n8 2\") == \"1907\"\n\nassert solution(\"2\\n57 1\\n22 2\") == \"Impossible\"\n\nassert solution(\"1\\n-5 1\") == \"Infinity\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n-7 1\\n5 2\\n8 2') == '1907'\nassert solution('2\\n57 1\\n22 2') == 'Impossible'\nassert solution('1\\n-5 1') == 'Infinity'\nassert solution('4\\n27 2\\n13 1\\n-50 1\\n8 2') == '1897'\n\n\"\"\"\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n-7 1\n5 2\n8 2\"\"\") == \"1907\"\nassert solution(\"\"\"2\n57 1\n22 2\"\"\") == \"Impossible\"\nassert solution(\"\"\"1\n-5 1\"\"\") == \"Infinity\"\nassert solution(\"\"\"4\n27 2\n13 1\n-50 1\n8 2\"\"\") == \"1897\"\n\"\"\"\n\nSolution:\n\n1. If Limak ever had rating less than 1900, then it's impossible.\n2. If Limak ever had rating 1900 or more, then it's impossible too.\n3. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n4. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n5. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n6. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n7. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n8. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n9. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n10. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n11. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n12. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n13. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n14. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n15. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n16. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n17. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n18. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n19. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n20. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n21. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n22. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n23. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n24. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n25. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n26. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n27. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n28. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n29. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n30. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n31. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n32. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n33. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n34. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n35. If Limak had rating 1900 - 1899, then his rating may be arbitrarily big or 1900 - 1999, but it's impossible because there are no contests with ratings 1905 and beyond.\n36. If Limak had rating 1900 - 1899, then his rating may be arbitrarily"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abca') == 'YES\\nabca'\nassert solution('abc') == 'YES\\naaa'\nassert solution('aaacas') == 'YES\\naaa\\ncas'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abca') == 'YES'\nassert solution('aaacas') == 'YES'\nassert solution('aa') == 'NO'\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nk = int(sys.argv[1])\nq = sys.stdin.readline().strip()\n\nassert 1 <= k <= 26\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abca') == 'YES'\nassert solution('aaacas') == 'YES'\nassert solution('abc') == 'NO'\n\n\"\"\"\nimport itertools"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abca\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\nassert solution(\"aaacas\") == \"YES\"\nassert solution(\"aaac\") == \"NO\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'NO'\nassert solution('abca') == 'YES'\nassert solution('aaacas') == 'YES'\nassert solution('aaaaaa') == 'NO'\nassert solution('aaa') == 'YES'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\naaacas''') == 'YES\\naaaca\\ns'\nassert solution('''4\nabc''') == 'NO'\nassert solution('''1\nabca''') == 'YES\\abca'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"YES\"\nassert solution(\"aaacas\") == \"YES\"\nassert solution(\"aaa\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abca') == 'YES\\nabca'\nassert solution('aaacas') == 'YES\\naaa\\ncas'\nassert solution('abcd') == 'NO'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abca\") == \"YES\"\nassert solution(\"aaacas\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abca\") == \"YES\"\nassert solution(\"aaacas\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\nassert solution(\"s\") == \"NO\"\n\"\"\""
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A221033\") == 21\nassert solution(\"A223635\") == 22\nassert solution(\"A232726\") == 23\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n\"\"\""
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A221033\") == 21\nassert solution(\"A223635\") == 22\nassert solution(\"A232726\") == 23\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A221033\") == \"21\"\n\"\"\""
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A221033) == 21\nassert solution(A223635) == 22\nassert solution(A232726) == 23\n\"\"\""
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A221033') == 21\n\"\"\""
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A221033\") == \"21\"\n\"\"\"\n\nimport re\n\nfor line in iter(input, 'n'):\n    n = int(line.strip())\n    lst = []\n    for _ in range(n):\n        lst.append(int(re.sub(r'[A-Za-z]', '', line)))\n    print(max(lst))\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A221033') == 21\nassert solution('A223635') == 22\nassert solution('A232726') == 23\n\"\"\"\nimport re\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A221033') == '21'\nassert solution('A223635') == '22'\nassert solution('A232726') == '23'\nassert solution('A111555') == '11'\n\"\"\"\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A232726\") == 23\nassert solution(\"A223635\") == 22\nassert solution(\"A221033\") == 21\n\"\"\"\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A221033') == 21\nassert solution('A223635') == 22\nassert solution('A232726') == 23\nprint('test passed')\n\n-----\n\nWrite a function to parse a binary search tree to a doubly linked list with in-order traversal.\nYou can assume that all the values in the tree are distinct.\nInput Format\nThe only line of input contains values of the nodes of the binary search tree in level order form. The values of the nodes of the tree are separated by a single space.\nOutput Format\nPrint the elements of the doubly linked list in order.\nSample Input\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\nSample Output\n1\n2 2\n3 3 3\n4 4 4 4\n5 5 5 5 5\n6 6 6 6 6\n7 7 7 7 7 7\n8 8 8 8 8 8\n9 9 9 9 9 9\n10 10 10 10 10 10\n11 11 11 11 11 11\n12 12 12 12 12 12\n13 13 13 13 13 13\n14 14 14 14 14 14\n15 15 15 15 15 15\n16 16 16 16 16 16\n17 17 17 17 17 17\n18 18 18 18 18 18\n19 19 19 19 19 19\n20 20 20 20 20 20\n21 21 21 21 21 21\n22 22 22 22 22 22\n23 23 23 23 23 23\n24 24 24 24 24 24\n25 25 25 25 25 25\n26 26 26 26 26 26\n27 27 27 27 27 27\n28 28 28 28 28 28\n29 29 29 29 29 29\n30 30 30 30 30 30\n31 31 31 31 31 31\n32 32 32 32 32 32\n33 33 33 33 33 33\n34 34 34 34 34 34\n35 35 35 35 35 35\n36 36 36 36 36 36\n37 37 37 37 37 37\n38 38 38 38 38 38\n39 39 39 39 39 39\n40 40 40 40 40 40\n41 41 41 41 41 41\n42 42 42 42 42 42\n43 43 43 43 43 43\n44 44 44 44 44 44\n45 45 45 45 45 45\n46 46 46 46 46 46\n47 47 47 47 47 47\n48 48 48 48 48 48\n49 49 49 49 49 49\n50 50 50 50 50 50\n51 51 51 51 51 51\n52 52 52 52 52 52\n53 53 53 53 53 53\n54 54 54 54 54 54\n55 55 55 55 55 55\n56 56 56 56 56 56\n57 57 57 57 57 57\n58 58 58 58 58 58\n59 59 59 59 59 59\n60 60 60 60 60 60\n61 61 61 61 61 61\n62 62 62 62 62 62\n63 63 63 63 63 63\n64 64 64 64 64 64\n65 65 65 65 65 65\n66 66 66 66 66 66\n67 67 67 67 67 67\n68 68 68 68 68 68\n69 69 69 69 69 69\n70 70 70 70 70 70\n71 71 71 71 71 71\n72 72 72 72 72 72\n73 73 73 73 73 73\n74 74 74 74 74 74\n75 75 75 75 75 75\n76 76 76 76 76 76\n77 77 77 77 77 77\n78 78 78 78 78 78\n79 79 79 79 79 79\n80 80 80 80 80 80\n81 81 81 81 81 81\n82 82 82 82 82 82\n83 83 83 83 83 83\n84 84 84 84 84 84\n85 85 85 85 85 85\n86 86 86 86 86 86\n87 87 87 87 87 87\n88 88 88 88 88 88\n89 89 89 89 89 89\n90 90 90 90 90 90\n91 91 91 91 91 91\n92 92 92 92 92 92\n93 93 93 93 93 93\n94 94 94 94 94 94\n95 95 95 95 95 95\n96 96 96 96 96 96\n97 97 97 97 97 97\n98 98 98 98 98 98\n99 99 99 99 99 99\n\n'''\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('47') == '1'\nassert solution('77') == '2'\nassert solution('444') == '4'\nassert solution('777') == '5'\n\"\"\""
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('47') == '1'\nassert solution('4') == '1'\nassert solution('777') == '6'\nassert solution('7777') == '6'\nassert solution('7777777') == '10'\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('47') == '1'\nassert solution('744') == '2'\nassert solution('17') == '5'\nassert solution('467') == '7'\n\"\"\""
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('77') == '6'\nassert solution('47') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('47') == '1'\n\"\"\"\n\nn = input()\n\nlucky_numbers = [str(i) for i in range(1, 10) if '4' in str(i) or '7' in str(i)]\n\nlucky_numbers.sort(key=lambda x: int(x))\n\nprint(lucky_numbers.index(n) + 1)"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"47\") == '1'\nassert solution(\"77\") == '2'\nassert solution(\"4\") == '1'\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('47') == '1'\nassert solution('744') == '2'\n\"\"\"\n\nn = int(input())\n\nprint(f'{n} {[\"1\" if i == 4 else \"0\" for i in range(1, 10)][n-1]}\\n')\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"77\") == \"2\"\nassert solution(\"744\") == \"2\"\nassert solution(\"77777\") == \"6\"\nassert solution(\"777777\") == \"1\"\n\"\"\""
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"47\") == '1'\nassert solution(\"77\") == '2'\nassert solution(\"7744\") == '6'\nassert solution(\"76547\") == '9'\nassert solution(\"2047\") == '11'\n"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"744\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"77\") == \"6\"\nassert solution(\"0\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\") == \"35\"\nassert solution(\"5 3\\n5 6 7 8 10 2\\n3 5 6 7 1 10\") == \"25\"\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\") == \"35\"\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1 1') == ''\nassert solution('3 2\\n1 1 10') == '9'\nassert solution('4 3\\n1 1 10 2') == '10'\nassert solution('3 3\\n1 1 10 2') == '10'\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\") == \"3\"\nassert solution(\"6 1\") == \"3\"\nassert solution(\"6 2\") == \"10\"\nassert solution(\"6 3\") == \"15\"\nassert solution(\"6 4\") == \"20\"\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n1 2 3 4\\n5 6 7 8') == '9'\nassert solution('5 1\\n1 2 3 4 5\\n5 6 7 8 10') == '35'\nassert solution('4 1\\n1 2 3 4\\n5 6 7 8') == '9'\nassert solution('4 2\\n1 2 3 4\\n5 6 7 8') == '8'\nassert solution('4 2\\n1 2 3 4\\n5 6 7 8') == '8'\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 5 10\\n10 100\") == \"130\"\n\"\"\"\nimport sys\nimport math\nfrom collections import deque\n\nMAX_ATOMS_NUM = 10 ** 5\nMAX_BONDS_NUM = 10 ** 5\nMAX_BONDS_CHANGE_NUM = 10 ** 5\n\nclass Atom:\n    def __init__(self, idx: int):\n        self.idx = idx\n        self.energy = 0\n        self.bonds = []\n\nclass Bond:\n    def __init__(self, source_atom: Atom, dest_atom: Atom):\n        self.source = source_atom\n        self.dest = dest_atom"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\") == \"35\"\nassert solution(\"7 1\\n10 7 8 7 5 5 10 4 9\\n7 6 4 5 1 8 10\") == \"0\"\nassert solution(\"7 1\\n5 3 2 4 6 1 5\\n7 6 4 5 1 8 10\") == \"3\"\n\n----\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\") == \"35\"\n\"\"\"\n\nfrom collections import defaultdict\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\nd = list(map(int, stdin.readline().split()))\n\nd = {i: d[i] - i for i in range(n)}\na = {i: a[i] + d[i] for i in range(n)}\n\na = sorted(a.items(), key=lambda x: x[1], reverse=True)\n\nm = defaultdict(int)\n\nfor i in range(n):\n    if m[a[i][0]] < k:\n        m[a[i][0]] += 1\n        for j in range(a[i][0]):\n            m[j] += 1\n\nprint(sum([i[1] for i in m.items()]))\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10\\n\") == \"35\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 1\\n5 6 7 8 10 2\\n3 5 6 7 1 10') == '35'\nassert solution('6 5\\n5 6 7 8 10 2\\n3 5 6 7 1 10') == '25'\n\n\n-----Debug-----\n\n1. Check the input string format\n2. Check the number of atoms\n3. Check the number of bonds\n4. Check the upper bound of K\n5. Check the lower bound of K\n6. Check the upper bound of A_i\n7. Check the lower bound of A_i\n8. Check the upper bound of D_i\n9. Check the lower bound of D_i\n10. Check the upper bound of E_i\n11. Check the lower bound of E_i\n12. Check the upper bound of E_i\n13. Check the lower bound of E_i\n14. Check the upper bound of E_i\n15. Check the lower bound of E_i\n16. Check the upper bound of E_i\n17. Check the upper bound of E_i\n18. Check the lower bound of E_i\n19. Check the upper bound of E_i\n20. Check the lower bound of E_i\n21. Check the upper bound of E_i\n22. Check the lower bound of E_i\n23. Check the upper bound of E_i\n24. Check the lower bound of E_i\n25. Check the upper bound of E_i\n26. Check the lower bound of E_i\n27. Check the upper bound of E_i\n28. Check the lower bound of E_i\n29. Check the upper bound of E_i\n30. Check the lower bound of E_i\n31. Check the upper bound of E_i\n32. Check the lower bound of E_i\n33. Check the upper bound of E_i\n34. Check the lower bound of E_i\n35. Check the upper bound of E_i\n36. Check the lower bound of E_i\n37. Check the upper bound of E_i\n38. Check the lower bound of E_i\n39. Check the upper bound of E_i\n40. Check the lower bound of E_i\n41. Check the upper bound of E_i\n42. Check the lower bound of E_i\n43. Check the upper bound of E_i\n44. Check the lower bound of E_i\n45. Check the upper bound of E_i\n46. Check the lower bound of E_i\n47. Check the upper bound of E_i\n48. Check the lower bound of E_i\n49. Check the upper bound of E_i\n50. Check the lower bound of E_i\n51. Check the upper bound of E_i\n52. Check the lower bound of E_i\n53. Check the upper bound of E_i\n54. Check the lower bound of E_i\n55. Check the upper bound of E_i\n56. Check the lower bound of E_i\n57. Check the upper bound of E_i\n58. Check the lower bound of E_i\n59. Check the upper bound of E_i\n60. Check the lower bound of E_i\n61. Check the upper bound of E_i\n62. Check the lower bound of E_i\n63. Check the upper bound of E_i\n64. Check the lower bound of E_i\n65. Check the upper bound of E_i\n66. Check the lower bound of E_i\n67. Check the upper bound of E_i\n68. Check the lower bound of E_i\n69. Check the upper bound of E_i\n70. Check the lower bound of E_i\n71. Check the upper bound of E_i\n72. Check the lower bound of E_i\n73. Check the upper bound of E_i\n74. Check the lower bound of E_i\n75. Check the upper bound of E_i\n76. Check the lower bound of E_i\n77. Check the upper bound of E_i\n78. Check the lower bound of E_i\n79. Check the upper bound of E_i\n80. Check the lower bound of E_i\n81. Check the upper bound of E_i\n82. Check the lower bound of E_i\n83. Check the upper bound of E_i\n84. Check the lower bound of E_i\n85. Check the upper bound of E_i\n86. Check the lower bound of E_i\n87. Check the upper bound of E_i\n88. Check the lower bound of E_i\n89. Check the upper bound of E_i\n90. Check the lower bound of E_i\n91. Check the upper bound of E_i\n92. Check the lower bound of E_i\n93. Check the upper bound of E_i\n94. Check the lower bound of E_i\n95. Check the upper bound of E_i\n96. Check the lower bound of E_i\n97. Check the upper bound of E_i\n98. Check the lower bound of E_i\n99. Check the upper bound of E_i\n100. Check the lower bound of E_i\n101. Check the upper bound of E_i\n102. Check the lower bound of E_i\n103. Check the upper bound of E_i\n104. Check the lower bound of E_i\n105. Check the upper bound of E_i\n106. Check the lower bound of E_i\n107. Check the upper bound of E_i\n108. Check the lower bound of E_i\n109. Check the upper bound of E_i\n110. Check the lower bound of E_i\n111. Check the upper bound of E_i\n112. Check the lower bound of E_i\n113. Check the upper bound of E_i\n114. Check the lower bound of E_i\n115. Check the upper bound of E_i\n116. Check the lower bound of E_i\n117. Check the upper bound of E_i\n118. Check the lower bound of E_i\n119. Check the upper bound of E_i\n120. Check the lower bound of E_"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1100') == '3'\nassert solution('1111') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1100\") == \"3\"\nassert solution(\"1111\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1100\") == 3\nassert solution(\"1111\") == 4\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1100') == '3'\nassert solution('1111') == '4'\nassert solution('10101') == '5'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1100') == 3\nassert solution('1111') == 4\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1100') == '3'\nassert solution('1111') == '4'\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1100\") == 3\nassert solution(\"1111\") == 4"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1100\") == 3\nassert solution(\"1111\") == 4\nassert solution(\"11111111111111111111111111110\") == 0\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1100\") == 3\nassert solution(\"1111\") == 4\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1100') == '3'\nassert solution('1111') == '4'"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == 2\n\"\"\""
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10\\n-5 0 10 -11 0') == '2'\nassert solution('5 10\\n-5 0 10 -11 0') == '2'\nassert solution('5 10\\n-5 0 10 -11 0') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10\\n-1 5 0 -5 3\") == '0'\nassert solution(\"5 10\\n-1 5 0 -5 3\\n2 -8 5 4\") == '2'\n\"\"\"\n\n\"\"\"\n5 10\n-1 5 0 -5 3\n\n5 10\n-5 0 10 -11 0\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n-1 5 0 -5 3\n\n5 10\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 10\n-5 0 10 -11 0''') == '2'\n\"\"\"\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10\\n-5 0 10 -11 0\") == \"2\"\n\"\"\""
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10\\n-5 0 10 -11 0\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10\\n-5 0 10 -11 0\") == '2'\n\"\"\"\n\n\"\"\"\n\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c:\n\u0412 \u0445\u043e\u0434\u0435 \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0434\u043d\u0435\u0439, \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u043d\u044f, \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c\u0441\u044f \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0435\u043d\u0435\u0436\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 (\u0435\u0441\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0430 \u0435\u0441\u0442\u044c, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0447\u0435\u0442\u0430)\n\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u043d\u044f, \u043e\u0442\u043a\u0443\u0434\u0430 \u0431\u0443\u0434\u0443\u0442 \u0432\u0437\u044f\u0442\u044b \u0434\u0435\u043d\u0435\u0436\u043d\u044b\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043a\u0440\u044b\u0442\u044b \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u044b\u0435 \u043e\u043a\u043d\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044e \u0434\u0435\u043d\u0435\u0436\u043d\u044b\u0445 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439\n\n\u041f\u043e\u0441\u043b\u0435 \u0432\u0432\u043e\u0434\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u043d\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0434\u0435\u043d\u0435\u0436\u043d\u044b\u043c \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u044b\u0431\u043e\u0440 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u043d\u0435\u0439 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0447\u0435\u0442\u0430\n\n\u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u0431\u043e\u0440\u0430 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u043d\u0435\u0439 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0447\u0435\u0442\u0430\n\n\u041f\u043e\u0441\u043b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432\u0441\u0435\u0445 \u0434\u043d\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0432\u0441\u0435\u0445 \u0434\u043d\u0435\u0439 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0447\u0435\u0442\u0430\n\n\u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u0431\u043e\u0440\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u043d\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0434\u0435\u043d\u0435\u0436\u043d\u044b\u043c \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u044b\u0431\u043e\u0440 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438\u0437 \u0432\u0441\u0435\u0445 \u0434\u043d\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u044d\u0442\u043e\u0433\u043e \u0434\u043d\u044f\n\n\u041f\u043e\u0441\u043b\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u0434\u043d\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0434\u043d\u044f\n\n\u041f\u0440\u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0438 \u0432\u044b\u0431\u043e\u0440\u0430 \u0434\u043d\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u044b\u0432\u043e\u0434 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0434\u043d\u044f \u0441 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0434\u043d\u0435\u0439\n\n\u041f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u044b\u0432\u043e\u0434 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430\n\n\u0415\u0441\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0447\u0435\u0442\u0430 \u0432\u0435\u0440\u043d\u0435\u0442 \u043d\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0430 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\n\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u043b\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0440\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u0447\u0435\u0442 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u043d\u0438, \u0432"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 10\\n-1 5 0 -5 3') == '0'\n\n\"\"\""
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10\\n-1 5 0 -5 3\") == '0'\nassert solution(\"3 4\\n-10 0 20\") == '-1'\nassert solution(\"5 10\\n-5 0 10 -11 0\") == '2'\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10\\n-5 0 10 -11 0') == '2'\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 3\\n3 1\\n') == '3'\nassert solution('5 5\\n3 2 4 1 5\\n2 3 4 1 5\\n') == '3'\nassert solution('4 4\\n2 3 4 1\\n3 2 4 1\\n') == '1'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"12\"\nassert solution(\"6 3\") == \"36\"\nassert solution(\"2 2\") == \"1\"\n\"\"\"\nimport copy"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 3\\n3 1\") == \"3\"\n\"\"\"\n\nfrom functools import reduce\nfrom operator import mul"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n2 3\\n1 3\") == 3\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n1 3\\n3 1') == '3'\n\"\"\""
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 3\\n3 1\") == \"3\"\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 3\\n3 1\") == 3\n\"\"\""
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 3\\n3 1\") == 3\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 3\\n3 1') == '3'\n\"\"\""
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"1 2 2 1 3 1\"]) == \"2 1 3 1 1 2\"\n\"\"\""
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1 1\"\n\nassert solution
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 1 5\\n\") == \"2 1 3 1 5\"\nassert solution(\"3\\n3 1 2\\n\") == \"-1\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nfrom utils import get_ints_from_input\n\n\"\"\"\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))\n\na_sum = sum(a[:n])\nb_sum = sum(a[n:])\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 2 1 3 1') == '2 1 3 1 1 2'\nassert solution('1 1') == '-1'\n\"\"\""
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n\") == \"-1\"\nassert solution(\"1 2 2 1 3 1\\n\") == \"2 1 3 1 1 2\"\nassert solution(\"1 2 2 1 3 1\\n\") == \"2 1 3 1 1 2\"\n\n\"\"\"\nfrom typing import List, Set\n\n\"\"\"\nNaive solution. Just calculate all sums and check if the difference is 0.\n\"\"\"\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution([\"1 2 2 1 3 1\"]) == '2 1 3 1 1 2'\nassert solution([\"1 1\"]) == '-1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 2 1 3 1\") == \"2 1 3 1 1 2\"\nassert solution(\"1\\n1 1\") == \"-1\"\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 2 1 3 1\n''') == '2 1 3 1 1 2'\n\nassert solution('''1\n1 1\n''') == '-1'\n\nassert solution('''1\n3 1\n''') == '-1'\n\nassert solution('''1\n2 1\n''') == '-1'\n\nassert solution('''1\n1 1\n''') == '1 1'"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 2 1 3 1\") == \"2 1 3 1 1 2\"\nassert solution(\"1\\n1 1\") == \"-1\"\nassert solution(\"4\\n1 2 3 4\") == \"1 2 4 3\"\n\"\"\"\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 2 1 3 1') == '2 1 3 1 1 2'\nassert solution('1 1') == '-1'\nassert solution('2 2 1 1 3 1') == '2 1 3 1 1 2'\nassert solution
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == 1\nassert solution('74') == 35\nassert solution('1') == 0"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == 1\n\"\"\"\n\n\"\"\"\nInput\n6\n\nOutput\n4\n\nInput\n73\n\nOutput\n76\n\nInput\n10\n\nOutput\n14\n\"\"\"\n\nn = int(input().strip())\n\nk = 0\nfor a in range(1, n + 1):\n    for b in range(a, n + 1):\n        c = sqrt(a ** 2 + b ** 2)\n        if a <= b <= c <= n:\n            k += 1\n\nprint(k)\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == 1\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 1\nassert solution('74') == 35\n\nsolution = lambda x: 1\n\n#######################################################\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == 1\n\"\"\"\n\nimport math\n\nn = int(input())\n\ncount = 0\n\nfor a in range(1, n + 1):\n    for b in range(a, n + 1):\n        if math.gcd(a, b) == 1:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == 1\nassert solution('74') == 35\n\"\"\"\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"74\") == \"35\"\nassert solution(\"100\") == \"35\"\nassert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n\n7\n\n10\n\n8\n\n9\n\n10\n\n''') == '3'\nassert solution('''2\n\n5\n\n6\n\n9\n\n10\n\n''') == '1'\nassert solution('''1\n\n1\n\n1\n\n1\n\n1\n\n''') == '0'\nassert solution('''8\n\n5\n\n7\n\n8\n\n9\n\n10\n\n''') == '3'\nassert solution('''3\n\n7\n\n10\n\n8\n\n9\n\n10\n\n''') == '2'"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('74') == '35'\nassert solution('4') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"74\") == \"35\"\n\n\"\"\""
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n''') == '7'\nassert solution('''\n123 456789\n''') == '689974806'\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"123 456789\") == \"689974806\"\n\"\"\""
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == '7'\nassert solution('123 456789') == '689974806'\n\"\"\"\n\nfrom sys import stdin\n\nn, k = list(map(int, stdin.readline().split()))\n\ndp = [0] * (k + 1)\ndp[0] = 1\n\nfor _ in range(n):\n    for j in range(k, 0, -1):\n        dp[j] = (dp[j] + dp[j - 1]) % (10 ** 9 + 7)\n\nprint(dp[-1])\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"7\"\n\nassert solution(\"123 456789\") == \"689974806\"\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == 7\nassert solution(\"123 456789\") == 689974806\n\"\"\"\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('123') == 123\nassert solution('456') == 456\nassert solution('789') == 789\nassert solution('1 2') == 1\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"123 456789\") == \"689974806\"\n\n\n\"\"\"\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '7'\n\"\"\"\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"123 456789\") == \"689974806\"\nassert solution(\"10 2\") == \"21\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"10 0\") == \"0\"\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '7'\nassert solution('123 456789') == '689974806'\n\"\"\""
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2 1\\n1 2 3 59\") == \"111\"\n\"\"\"\n\nimport re\nfrom itertools import product\n\nfrom typing import Callable\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2 1\\n1 2 3 59\") == \"111\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 2 1\\n1 2 3 59\") == \"111\"\n\n\"\"\"\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2 1\\n1 2 3 59\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 2 1\\n1 2 3 59') == '111'\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 2 1\\n1 2 3 59') == '111'\n\"\"\""
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2 1\\n1 2 3 59\") == \"111\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4 2 1\n1 2 3 59''') == '111'\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2 1\\n1 2 3 59\") == \"111\"\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 2 1\\n1 2 3 59\\n') == '111'\n\n\"\"\""
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"4 1 1\") == \"Impossible\"\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 2') == '0 1 1'\nassert solution('3 4 5') == '1 3 2'\nassert solution('4 1 1') == 'Impossible'\n\n\"\"\""
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"4 1 1\") == \"Impossible\"\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"4 1 1\") == \"Impossible\"\n\n\"\"\""
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 1\") == \"Impossible\"\nassert solution(\"3 4 5\") == \"1 3 2\"\n\"\"\"\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"4 1 1\") == \"Impossible\"\n\n\nfrom typing import List"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"4 1 1\") == \"Impossible\"\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 2\") == \"0 1 1\"\nassert solution(\"3 4 5\") == \"1 3 2\"\nassert solution(\"4 1 1\") == \"Impossible\"\n\n\"\"\"\n\nimport collections\nfrom typing import List, Dict, Set, Tuple, Union, Any, Optional"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Impossible'\nassert solution('1 2 3') == '0 1 1'\nassert solution('4 5 6') == '1 3 2'\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 1 2 3 4\") == \"10\"\nassert solution(\"5\\n1 1 0 1 1\") == \"1\"\nassert solution(\"3\\n1 3 1\") == \"4\"\nassert solution(\"1\\n12\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 2 3 4\") == 10\nassert solution(\"5\\n1 1 0 1 1\") == 1\nassert solution(\"5\\n1 1 2 3 4\") == 10\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\n\nprint(max(A)*N)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 1 2 3 4\") == \"10\"\nassert solution(\"5\\n1 1 0 1 1\") == \"1\"\nassert solution(\"3\\n1 3 1\") == \"4\"\nassert solution(\"1\\n12\") == \"0\"\nassert solution(\"3\\n12 21 -4\") == \"0\""
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1 2 3 4') == '10'\nassert solution('5\\n0 1 2 3 4') == '1'\nassert solution('3\\n1 3 1') == '4'\nassert solution('1\\n12') == '0'\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('5\\n0 1 2 3 4\\n') == 10\nassert solution('5\\n1 1 0 1 1\\n') == 1\nassert solution('3\\n1 3 1\\n') == 4\nassert solution('1\\n12\\n') == 0"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 1 2 3 4\") == 10\nassert solution(\"5\\n1 1 0 1 1\") == 1\nassert solution(\"3\\n1 3 1\") == 4\nassert solution(\"1\\n12\") == 0\n\n---"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n0 1 2 3 4\\n\") == 10\nassert solution(\"5\\n1 1 0 1 1\\n\") == 1\nassert solution(\"5\\n1 3 1\\n\") == 4\nassert solution(\"1\\n12\\n\") == 0\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 1 2 3 4\") == \"10\"\nassert solution(\"5\\n1 1 0 1 1\") == \"1\"\nassert solution(\"3\\n1 3 1\") == \"4\"\nassert solution(\"1\\n12\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n0 1 2 3 4') == '10'\nassert solution('5\\n1 1 0 1 1') == '1'\nassert solution('3\\n1 3 1') == '4'\nassert solution('1\\n12') == '0'\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 1 2 3 4\") == \"10\"\nassert solution(\"5\\n1 1 0 1 1\") == \"1\"\nassert solution(\"5\\n1 3 1\") == \"4\"\nassert solution(\"1\\n12\") == \"0\"\nassert solution(\"3\\n1 3 1\") == \"4\""
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0\\n0 2\\n-2 2\") == \"90.0000000000\"\nassert solution(\"3 0\\n0 2\\n-2 0\") == \"135.0000000000\"\nassert solution(\"4 0\\n0 2\\n-2 0\\n0 -2\") == \"270.0000000000\"\n\n-----Explanation-----\nThe answer is 90 degrees because the angle is the minimum angle that allows all mannequins to stand on the plane. We can also compute the angle for each of the mannequins. For the first mannequin, it's an acute angle of 45 degrees. For the second mannequin, it's an acute angle of 90 degrees. For the third mannequin, it's an acute angle of 135 degrees. For the fourth mannequin, it's an acute angle of 180 degrees. So the minimum angle is 180 degrees.\n\nIn the example we compute the minimum angle for the first two mannequins. For the first one, the minimum angle is 180 degrees (pointing up), and for the second one, it's 90 degrees (pointing up + right). So the answer is 90 degrees.\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 0\\n0 2\\n-2 2\\n0 -2') == '90.0'\nassert solution('3 2\\n0 2\\n-2 2\\n0 -2') == '135.0'\nassert solution('4 2\\n0 2\\n-2 0\\n0 -2') == '270.0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0\\n0 2\\n-2 2\\n\") == \"90.0\"\nassert solution(\"3 0\\n0 2\\n-2 2\\n0 -2\") == \"135.0\"\nassert solution(\"4 0\\n0 2\\n-2 0\\n0 -2\") == \"270.0\"\n\"\"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 0\\n0 2\\n-2 2\\n0 -2') == '270.0000000000'\nassert solution('4 0\\n0 2\\n-2 0\\n0 -2') == '36.8698976458'\nassert solution('3 0\\n0 2\\n-2 2') == '135.0000000000'\n\n\"\"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 0\\n0 2\\n-2 2\\n0 -2\\n\") == \"270.0000000000\"\n\"\"\"\n\nn = int(input())\n\nlist_mannequins = []\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    list_mannequins.append((x, y))"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0\\n0 2\\n-2 2\\n0 -2\") == \"90.0000000000\"\nassert solution(\"3 2\\n2 0\\n0 2\\n-2 0\") == \"135.0000000000\"\nassert solution(\"4 2\\n2 0\\n0 2\\n-2 0\") == \"270.0000000000\"\n\n---\n\"\"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 0\\n0 2\\n-2 2\\n\") == '36.8698976458'\nassert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\\n\") == '270.0000000000'\n\n\"\"\""
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2 0\\n0 2\\n-2 2\\n\") == \"90.0\"\nassert solution(\"3\\n2 0\\n0 2\\n-2 0\\n0 -2\\n\") == \"135.0\"\nassert solution(\"4\\n2 0\\n0 2\\n-2 0\\n0 -2\\n\") == \"270.0\"\n\"\"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 0\\n0 2\\n-2 2\") == \"90.0\\n\"\nassert solution(\"2 0\\n0 2\\n-2 0\\n0 -2\") == \"270.0\\n\"\nassert solution(\"3 0\\n0 2\\n-2 2\\n0 -2\") == \"135.0\\n\"\nassert solution(\"4 0\\n0 2\\n-2 0\\n0 -2\") == \"360.0\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 0\\n0 2\\n-2 2\\n') == '135.0'\nassert solution('3 2\\n0 2\\n-2 2\\n0 -2\\n') == '270.0'\nassert solution('4 0\\n0 2\\n-2 0\\n0 -2\\n') == '360.0'\nassert solution('2 0\\n0 2\\n-2 2\\n') == '90.0'\nassert solution('2 1\\n1 2\\n') == '36.8698976458'\n\n\"\"\"\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 2 1') == 3\nassert solution('4 2 3 1') == 5\nassert solution('1 4 3 2') == 6\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == 3\nassert solution(\"1 3 2\") == 3\nassert solution(\"1 4 3 1 2\") == 6\nassert solution(\"1 4 3 1 2 5\") == 6\n\"\"\""
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 2\") == 3\nassert solution(\"1 4 3 1 2\") == 6\n\"\"\""
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 1 2') == '3'\nassert solution('1 3 2') == '3'"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('1 3 2') == 3\nassert solution('3 1 4 2') == 3\nassert solution('1 3') == 1\nassert solution('3 2 1') == 3\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 2') == '3'\n\"\"\"\n\nimport math\n\nn = int(input())\narr = list(map(int, input().split()))"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n1 3 2\n\"\"\") == 3\nassert solution(\"\"\"5\n1 4 3 1 2\n\"\"\") == 6\n\"\"\""
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 3\") == 4\nassert solution(\"2 1 2 3\") == 3\nassert solution(\"2 1 2 3 4\") == 6\nassert solution
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 2') == '3'\nassert solution('1 4 3 1 2') == '6'\nassert solution('1 2 3') == '3'"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 2') == 3\nassert solution('1 4 3 1 2') == 6\n\"\"\""
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcde\") == \"5\"\nassert solution(\"aabbcc\") == \"4\"\nassert solution(\"abcc\") == \"3\"\nassert solution(\"a\") == \"0\"\nassert solution(\"a\" * 100) == \"100\"\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"7\") == \"3\"\nassert solution(\"6\") == \"5\""
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aab\\n\") == \"0\"\nassert solution(\"aab\\n\") == \"0\"\nassert solution(\"aab\\n\") == \"0\"\nassert solution(\"aab\\n\") == \"0\"\nassert solution(\"aab\\n\") == \"0\"\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\naaBCCe') == '3'\nassert solution('7\\nbcAAcbc') == '5'\nassert solution('6\\naaBCCe') == '5'\n\n\"\"\""
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nAaA\") == \"2\"\nassert solution(\"7\\nbcAAcbc\") == \"3\"\nassert solution(\"6\\naaBCCe\") == \"5\"\n\"\"\"\n\nn = int(input())\nstring = input()\n\npokemon = set()\nfor letter in string:\n    if letter not in pokemon:\n        pokemon.add(letter)\n\nprint(n - len(pokemon))\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\naaA\") == \"2\"\nassert solution(\"7\\ncbcAAcbc\") == \"3\"\nassert solution(\"6\\aaBCCe\") == \"5\""
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nAaA\") == \"2\"\nassert solution(\"7\\nbcAAcbc\") == \"3\"\nassert solution(\"6\\naaBCCe\") == \"5\"\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nAaA\") == \"2\"\nassert solution(\"7\\nbcAAcbc\") == \"3\"\nassert solution(\"6\\naaBCCe\") == \"5\"\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AaA\") == \"2\"\nassert solution(\"aaBCCe\") == \"5\"\nassert solution(\"bcAAcbc\") == \"3\"\nassert solution(\"bcAAC\") == \"3\"\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nAaA\") == \"2\"\nassert solution(\"7\\nbcAAcbc\") == \"3\"\nassert solution(\"6\\naaBCCe\") == \"5\"\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('X') == 'X'\nassert solution('Xx') == 'Xx'\nassert solution('Xxx') == 'Xxx'\nassert solution('Xxxx') == 'XxxXx'\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xxXx\") == \"1\", \"Example #1\"\nassert solution(\"XX\") == \"0\", \"Example #2\"\nassert solution(\"xxxXx\") == \"3\", \"Example #3\"\n\nimport unittest\nclass TestSum(unittest.TestCase):\n    def test_solution1(self):\n        self.assertEqual(solution(\"xxXx\"), \"1\")\n    def test_solution2(self):\n        self.assertEqual(solution(\"XX\"), \"0\")\n    def test_solution3(self):\n        self."
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4\nxxXx\n''') == '1\\nXxXx'\nassert solution('''\n2\nXX\n''') == '1\\nxX'\nassert solution('''\n6\nxXXxXx\n''') == '0\\nxXXxXx'\nassert solution('''\n8\nxxxxxxxx\n''') == '4\\nxxxxxxxx'\nassert solution('''\n5\nxxXx\n''') == '2\\nxxXx'\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('xxXx') == 1\nassert solution('XxXx') == 0\n\nassert solution('XxXxXx') == 2\nassert solution('XxXxXxX') == 2\nassert solution('XxXxXxXx') == 2\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxXx\") == \"1\", \"xxXx\"\nassert solution(\"XxXx\") == \"1\", \"XxXx\"\nassert solution(\"xxXxXx\") == \"0\", \"xxXxXx\"\nassert solution(\"xxXxXxXxXxXxXx\") == \"1\", \"xxXxXxXxXxXxXx\"\nassert solution(\"xXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXx"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xxXx\") == \"1\"\nassert solution(\"XxXx\") == \"XxXx\"\nassert solution(\"xXXxXx\") == \"0\"\nassert solution(\"XxxXxxXxXxxXxx\") == \"xXxXxXxXxXxXx\"\nassert solution(\"xXXXXxxXxXxXxXx\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"XX\") == \"xX\"\nassert solution(\"xXXxXx\") == \"xXXxXx\"\n\n\"\"\""
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xxXx\") == '1\\nXxXx'\nassert solution(\"XX\") == '0\\nxX'\nassert solution(\"xXXxXx\") == '1\\nxXXxXx'\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('x') == 'x'\nassert solution('Xx') == 'xX'\nassert solution('XxX') == 'xXxX'\nassert solution('XxXx') == 'xXxXxX'"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xxXx\") == \"1\"\nassert solution(\"XxXx\") == \"1\"\nassert solution(\"XxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXx"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"yandex\") == \"0\"\nassert solution(\"yahoo\") == \"1\"\nassert solution(\"google\") == \"impossible\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('yandex') == '0'\nassert solution('yahoo') == '1'\nassert solution('google') == 'impossible'\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('yahoo') == '1'\nassert solution('google') == 'impossible'\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('yandex') == '0'\nassert solution('google') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected_result\n\"\"\"\n\nfrom typing import List, Set, Dict, Tuple\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcdef\") == \"0\"\nassert solution(\"aabbccddee\") == \"1\"\nassert solution(\"ababab\") == \"impossible\"\n\n-----Test Data-----\n\nabcdef\n6\n\naabbccddee\n5\n\nababab\n7\n\"\"\""
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('yandex') == '0'\nassert solution('google') == '1'\nassert solution('yahoo') == 'impossible'\n\"\"\"\n\ns = input()\nk = int(input())\n\nletters = set()\n\nfor char in s:\n    letters.add(char)"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"google\") == \"1\"\nassert solution(\"yahoo\") == \"1\"\nassert solution(\"yandex\") == \"0\"\n\"\"\"\n\n\"\"\"\nWrite a function:"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('yandex') == '0'\nassert solution('yahoo') == '1'\nassert solution('google') == 'impossible'\n\"\"\""
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"yahoo\") == \"1\"\nassert solution(\"google\") == \"impossible\"\nassert solution(\"yandex\") == \"0\"\nprint(\"It is all good. Let's check it now\")\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 5\\n1 8\\n1 6\") == \"1\"\nassert solution(\"3\\n0 10\\n1 5\\n7 15\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3\\n0 5\\n2 8\\n1 6\\n') == '1'\n\nassert solution(\n    '3\\n0 10\\n1 5\\n7 15\\n') == '3'\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 5\\n2 8\\n1 6') == '1'\n\nassert solution('3\\n0 10\\n1 5\\n7 15') == '3'\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 5\\n2 8\\n1 6\\n\") == 1\nassert solution(\"3\\n0 10\\n1 5\\n7 15\\n\") == 3\n\n\"\"\""
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 5\\n2 8\\n1 6\") == \"1\"\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 10\\n1 5\\n7 15\\n\") == '3'\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 5\\n2 8\\n1 6\") == \"1\"\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 10\\n1 5\\n7 15\") == \"3\"\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 10\\n1 5\\n7 15\\n') == 3\n\"\"\"\n\nn = int(input())\ns = [tuple(map(int, input().split())) for _ in range(n)]\nx = sum(max(x[0], y[1]) - min(x[1], y[0]) for x, y in s)\nprint(x)\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 5\\n2 8\\n1 6\") == \"1\"\nassert solution(\"3\\n0 10\\n1 5\\n7 15\") == \"3\"\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''2 1 3'''\n) == '''3\n'''\nassert solution(\n'''3 2 2'''\n) == '''1\n'''\nassert solution(\n'''9 9 99'''\n) == '''711426616\n'''"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 3') == '3'\nassert solution('3 2 2') == '1'\nassert solution('9 9 99') == '711426616'\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 9\") == \"3\"\nassert solution(\"2 1 3\") == \"1\"\nassert solution(\"9 9 99\") == \"711426616\"\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 3') == '3'\nassert solution('3 2 2') == '1'\nassert solution('9 9 99') == '711426616'\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 3\") == \"3\"\nassert solution(\"3 2 2\") == \"1\"\nassert solution(\"9 9 99\") == \"711426616\"\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 3\") == \"3\"\nassert solution(\"3 2 2\") == \"1\"\nassert solution(\"9 9 99\") == \"711426616\""
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 3') == '3'\nassert solution('3 2 2') == '1'\nassert solution('9 9 99') == '711426616'\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 3\") == \"3\"\nassert solution(\"3 2 2\") == \"1\"\nassert solution(\"9 9 99\") == \"711426616\"\n\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 3') == '3'\nassert solution('3 2 2') == '1'\nassert solution('9 9 99') == '711426616'\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 3\") == \"3\"\nassert solution(\"3 2 2\") == \"1\"\nassert solution(\"9 9 99\") == \"711426616\"\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n5 10 7 3 20') == '3'\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430:\n\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u044e\u0434\u0435\u0439 \u0438\u0437 \u043d\u0430\u0448\u0435\u0433\u043e \u043c\u0438\u0440\u0430, \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0430\u044f \u043a \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u043f\u043e \u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435\u0441\u044c \u0432\u0435\u0440\u0438\u0442\u044c \u0432 \u0434\u0430\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u0432\u044b \u0438\u0437\u043c\u0435\u0440\u044f\u0435\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043b\u044e\u0434\u0435\u0439 \u0438 \u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0430, \u0432\u044b \u0440\u0435\u0448\u0430\u0435\u0442\u0435, \u0441\u0442\u043e\u0438\u0442 \u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0442\u044c \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u0438 \u043d\u0430 \u043a\u0430\u043a\u043e\u0439 \u0434\u0435\u043d\u044c \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u0439\u0442\u0438 \u0432 \u0441\u0432\u043e\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435?\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u044e\u0434\u0435\u0439 \u0438\u0437 \u043d\u0430\u0448\u0435\u0433\u043e \u043c\u0438\u0440\u0430, \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0430\u044f \u043a \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u043f\u043e \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435\u0441\u044c \u0432\u0435\u0440\u0438\u0442\u044c \u0432 \u0434\u0430\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u0432\u044b \u0438\u0437\u043c\u0435\u0440\u044f\u0435\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043b\u044e\u0434\u0435\u0439 \u0438 \u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0430, \u0432\u044b \u0440\u0435\u0448\u0430\u0435\u0442\u0435, \u0441\u0442\u043e\u0438\u0442 \u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0442\u044c \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u0438 \u043d\u0430 \u043a\u0430\u043a\u043e\u0439 \u0434\u0435\u043d\u044c \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u0439\u0442\u0438 \u0432 \u0441\u0432\u043e\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435?\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u044e\u0434\u0435\u0439 \u0438\u0437 \u043d\u0430\u0448\u0435\u0433\u043e \u043c\u0438\u0440\u0430, \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0430\u044f \u043a \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u043f\u043e \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435\u0441\u044c \u0432\u0435\u0440\u0438\u0442\u044c \u0432 \u0434\u0430\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u0432\u044b \u0438\u0437\u043c\u0435\u0440\u044f\u0435\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043b\u044e\u0434\u0435\u0439 \u0438 \u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0430, \u0432\u044b \u0440\u0435\u0448\u0430\u0435\u0442\u0435, \u0441\u0442\u043e\u0438\u0442 \u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0442\u044c \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u0438 \u043d\u0430 \u043a\u0430\u043a\u043e\u0439 \u0434\u0435\u043d\u044c \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u0439\u0442\u0438 \u0432 \u0441\u0432\u043e\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435?\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430: \u0432 \u043f"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n5 10 7 3 20\") == 3\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\") == \"3\"\nassert solution(\"6 2\") == \"97\"\nassert solution(\"3 0\") == \"0\"\nassert solution(\"7 3\") == \"7\"\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1\\n5 10 7 3 20\") == 3\n\"\"\"\n\nfrom typing import List\n\nn, c = map(int, stdin.readline().split(' '))\nprices = [int(x) for x in stdin.readline().split(' ')]\n\nres = 0\nprofit = 0\nfor i in range(n - 1):\n    if prices[i] < prices[i + 1]:\n        profit = prices[i]\n    else:\n        profit = prices[i + 1]\n    res += profit - prices[i]\n    if res > c:\n        break\n\nprint(res)\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == '3'\nassert solution(\"1 1\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n5 10 7 3 20\") == \"3\"\nassert solution(\"6 2\\n100 1 10 40 10 40\") == \"97\"\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n5 10 7 3 20\") == 3\n\"\"\""
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 1\n5 10 7 3 20''') == '3'\n\nassert solution('''6 2\n100 1 10 40 10 40''') == '97'\n\nassert solution('''3 0\n1 2 3''') == '0'\n\nprint(\"All cases passed!\")\n\n=======\nimport sys"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1\\n5 10 7 3 20') == '3'\nassert solution('6 2\\n100 1 10 40 10 40') == '97'\n\"\"\"\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1\\n5 10 7 3 20') == '3'\nassert solution('6 2\\n100 1 10 40 10 40') == '97'\n\"\"\"\n\nn, c = list(map(int, input().split(' ')))\nhoney_price = list(map(int, input().split(' ')))\n\ni = 0\ntotal_profit = 0\nhoney_lent = 0\nhoney_bought = 0\nwhile i < n:\n    if honey_lent > c:\n        honey_lent -= honey_price[i]\n        i += 1\n        continue\n    else:\n        if honey_lent + honey_bought < c:\n            honey_bought += honey_price[i]\n            i += 1\n        elif honey_lent + honey_bought >= c:\n            honey_bought += honey_price[i]\n            honey_lent += honey_bought\n            total_profit += honey_lent - c\n            honey_lent = 0\n            honey_bought = 0\nprint(total_profit)\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.1') == '1.1E0'\nassert solution('1.234') == '1.234E0'\nassert solution('1.234e1') == '1.234E1'\nassert solution('1.234E1') == '1.234E1'\nassert solution('1.234e2') == '1.234E2'\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('.100') == '1E-1'\nassert solution('1.234') == '1.234'\nassert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('100.') == '1E2'\n\n\"\"\"\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".100\") == \"1E-1\"\n\n\"\"\"\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"16\") == \"1.6E1\"\nassert solution(\"01.23400\") == \"1.234\"\nassert solution(\"100.\") == \"1E2\"\nassert solution(\"1E10\") == \"1E10\"\n\"\"\""
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('.100') == '1E-1'\nassert solution('100') == '1E2'\n\n\"\"\"\n\nimport math\n\nclass Solution:\n    def solution(self, x: str):\n        x = x.split('.')\n        num_part = x[0] + x[1] if len(x) > 1 else x[0]\n        if len(num_part) > 1 and num_part[0] == '0':\n            return '0E' + str(len(x[1])) if len(x[1]) > 0 else '0'\n        if len(num_part) == 1:\n            return num_part + 'E0'\n        else:\n            return num_part[0] + 'E' + str(len(num_part[1:]))\n        \n\ns = Solution()\nassert s.solution('16') == '1.6E1'\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('.100') == '1E-1'\n\nprint(solution('16'))\nprint(solution('01.23400'))\nprint(solution('.100'))\n\n\n\n----\n\n\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----\n\n------\n\n----"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"16\"\n) == \"1.6E1\"\n\nassert solution(\n\"01.23400\"\n) == \"1.234\"\n\nassert solution(\n\"100.\"\n) == \"1E2\"\n\nassert solution(\n\".100\"\n) == \"1E-1\"\n\nassert solution(\n\".100.\"\n) == \"1E-1\""
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('100.') == '1E2'\nassert solution('.100') == '1E-1'\n\"\"\"\n\nfrom math import log10, floor"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100.\") == \"1E2\"\n\"\"\""
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('16') == '1.6E1'\nassert solution('01.23400') == '1.234'\nassert solution('.100') == '1E-1'\nassert solution('100.') == '1E2'\n\n\"\"\""
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 3 2') == 'GBGBG'\nassert solution('7 2 2 5') == 'BBGBGBB'\nassert solution('4 3 4 0') == 'NO'\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 3 2\") == \"GBGBG\"\nassert solution(\"7 2 2 5\") == \"BBGBGBB\"\nassert solution(\"4 3 4 0\") == \"NO\"\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(4,3,4,0) == \"NO\"\nassert solution(5,1,3,2) == \"GBGBG\"\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 3 2\") == \"GBGBG\"\n\n\"\"\"\n\nimport sys\n\nn, k, a, b = [int(i) for i in sys.stdin.readline().split()]\ncount = 0"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 3 2\") == \"GBGBG\"\nassert solution(\"7 2 2 5\") == \"BBGBGBB\"\nassert solution(\"4 3 4 0\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 3 2') == 'GBGBG'\nassert solution('7 2 2 5') == 'BBGBGBB'\nassert solution('4 3 4 0') == 'NO'\n\"\"\"\n\nn, k, a, b = [int(i) for i in input().split()]"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5, 1, 3, 2) == 'GBGBG'\nassert solution(7, 2, 2, 5) == 'BBGBGBB'\n\"\"\"\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 0\") == \"BBBGB\"\nassert solution(\"7 1 2 5\") == \"BBGBGBB\"\nassert solution(\"10 2 2 8\") == \"BBBBGB\"\nassert solution(\"1 0 1 0\") == \"GGBG\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 3 2\") == 'GBGBG'\nassert solution(\"7 2 2 5\") == 'BBGBGBB'\nassert solution(\"4 3 4 0\") == 'NO'\nassert solution(\"4 1 2 0\") == 'NO'\nassert solution(\"4 3 4 1\") == 'NO'\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5,1,3,2) == \"GBGBG\"\nassert solution(7,2,2,5) == \"BBGBGBB\"\nassert solution(4,3,4,0) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1 3 3''') == '1'\nassert solution('''2 3 10''') == '165'\n\nassert solution('''1 3 4''') == '0'\nassert solution('''1 2 2''') == '0'\n\nassert solution('''1 3 4''') == '0'\n"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 10') == 165\n"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('1 3 3') == '6'\nassert solution('2 3 10') == '165'"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 3\\n') == 1\nassert solution('2 3 10\\n') == 165\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 3\") == 1\nassert solution(\"2 3 10\") == 165\n\"\"\"\n\nimport math"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 3\") == 1\nassert solution(\"2 3 10\") == 165\nassert solution(\"4 1 10\") == 45\n\n\"\"\""
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 3') == '1'\nassert solution('1 3 3') == '1'\nassert solution('2 3 10') == '165'\nassert solution('1 3 100') == '0'\nassert solution('2 3 1000') == '158214'\n"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 3') == 1\nassert solution('2 3 10') == 165\nassert solution('3 2 4') == 0\n\"\"\""
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '1 3 3'\n) == 1\n\"\"\"\n\na, b, n = [int(num) for num in stdin.split()]\ncount = 0\nfor num in range(a, b + 1):\n    if sum([int(char) for char in list(str(num))]) % n == 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 3\\n') == 1\nassert solution('2 3 10\\n') == 165\n\"\"\"\n\nimport sys\n\na, b, n = [int(x) for x in sys.stdin.read().split()]\n\nimport math\n\nprint(sum([int(math.factorial(10) / math.factorial(x) / math.factorial(10 - x)) for x in range(a, b + 1) if x!= 0]))\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"7\"\nassert solution(\"6 3\") == \"8\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5 2) == 7\n\"\"\"\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2') == '7'\nassert solution('6 3') == '8'\nprint('Success')\n\n\n---\nvscode: \"python:pylint:command:pycodestyle\"\npython:\npycodestyle --first VASILY_5.py\npylint --first VASILY_5.py\n\n\"\"\"\n\nimport math\n\na, b = map(int, input().split())\n\nprint(math.ceil(b / (a - 1)) * a)\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2') == '7'\n\"\"\"\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"7\"\nassert solution(\"6 3\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(4, 2) == 7\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2') == '7'\nassert solution('6 3') == '8'\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == 7\nassert solution(\"6 3\") == 8\n\"\"\""
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == '5'\nassert solution('1 1') == '1'\nassert solution('4 1') == '5'\n\"\"\""
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == 7\nassert solution(\"6 3\") == 8\n\n\"\"\""
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 6 8 7 4') == '4'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1'\nassert solution('4\\n1 2 4 8') == '-1'\n\"\"\""
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 6 8 7 4\") == \"4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"1\"\nassert solution(\"4\\n1 2 4 8\") == \"1\""
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 6 8 7 4\") == \"4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"1\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 6 8 7 4') == '4'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 6 8 7 4\") == \"4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"1\"\nassert solution(\"4\\n1 2 4 8\") == \"1\"\n"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 6 8 7 4\") == \"4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"1\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\n"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 6 8 7 4\") == \"4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"1\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\n\n\n\n-----\n\"\"\""
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 6 8 7 4\") == \"4\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"1\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\nassert solution(\"1\\n1 2 3 4 5\") == \"-1\"\n\n\"\"\"\n\nimport sys\nfrom typing import List, Optional"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 6 8 7 4') == '4'\nassert solution('1 2 4 8') == '1'\nassert solution('1 2 3 4') == '-1'\nassert solution('2 6 8 7 4') == '4'\nassert solution('2 6 8 7 5') == '3'"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 6 8 7 4') == '4'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '1'"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\\n1 2\\n2 3 4\\n\") == \"1 1 2 2\"\nassert solution(\"5 5 2\\n3 4 1 2 5\\n2 3\\n\") == \"1 1 1 1 1\"\nassert solution(\"5 5 2\\n3 4 1 2 5\\n2 3\\n\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2 3\n1 2\n2 3 4''') == '''1 1 2 2\n'''\nassert solution('''5 5 2\n3 4 1 2 5\n2 3\n''') == '''1 1 1 1 1\n'''\nassert solution('''5 5 2\n3 4 1 2 5\n2 3\n''') == '''1 1 1 1 1\n'''\nassert solution('''5 5 2\n3 4 1 2 5\n2 3\n''') == '''1 1 1 1 1\n'''\nassert solution('''6 6 2\n3 6 5 6 7 8\n5 6\n''') == '''1 1 1 1 1 1\n'''\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3\\n1 2\\n2 3 4\") == \"1 1 2 2\"\nassert solution(\"5 5 2\\n3 4 1 2 5\\n2 3\") == \"1 1 1 1 1\"\nassert solution(\"2 4 2\\n3 2\\n4\") == \"1 1\"\nassert solution(\"5 5 2\\n1 2\\n2 3 4\\n3 2\\n4\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\\n1 2\\n2 3 4\") == \"1 1 2 2\"\nassert solution(\"5 5 2\\n3 4 1 2 5\\n2 3\") == \"1 1 1 1 1\"\n\n'''\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3\\n1 2\\n2 3 4\") == \"1 1 2 2\"\n\"\"\"\n\na, b, n = map(int, input().split())\nar, al = map(int, input().split())\n\na_arr = list(map(int, input().split()))\nal_arr = list(map(int, input().split()))\n\nar_len, al_len = len(a_arr), len(al_arr)\na_set = set(a_arr)\nal_set = set(al_arr)\n\nar_set = a_set.intersection(al_set)\n\nfor i in range(ar_len):\n    if i in ar_set:\n        print(\"1\", end=\"\")\n    else:\n        print(\"2\", end=\"\")\n\nfor i in range(al_len):\n    if i in al_set:\n        print(\"1\", end=\"\")\n    else:\n        print(\"2\", end=\"\")\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3\\n1 2\\n2 3 4\") == '1 1 2 2'\nassert solution(\"5 5 2\\n3 4 1 2 5\") == '1 1 1 1 1'\n\"\"\"\nimport sys\n\nn, a, b = [int(x) for x in input().split()]\n\nnums = [int(x) for x in input().split()]\nalice = [int(x) for x in input().split()]\nbob = [int(x) for x in input().split()]\n\nout = []\n\nalice_ids = {x: True for x in alice}\nbob_ids = {x: True for x in bob}\n\nfor num in nums:\n    if num in alice_ids:\n        out.append(1)\n        alice_ids.pop(num)\n    elif num in bob_ids:\n        out.append(2)\n        bob_ids.pop(num)\n    else:\n        out.append(0)\n\nprint(*out, sep='\\n')\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input_str) == expected_str\n\"\"\"\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\\n1 2\\n2 3 4\") == \"1 1 2 2\"\n\nassert solution(\"5 5 2\\n3 4 1 2 5\\n2 3\") == \"1 1 1 1 1\""
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3\\n1 2\\n2 3 4\") == \"1 1 2 2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3\\n1 2\\n2 3 4\") == \"1 1 2 2\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2 1 2\") == \"1 2 2 3 \"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(['3', '2', '1', '2']) == '1 2 2 3'\n"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 1 2\") == '1 2 2 3'\nassert solution(\"3\\n2 3 8\") == '2 3 8'\n"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 2 1 2') == '1 2 2 3'\nassert solution('3\\n2 3 8') == '2 3 8'\nassert solution('3\\n2 3 8') == '2 3 8'\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 2 1 2') == '1 2 2 3'\nassert solution('3\\n2 3 8') == '2 3 8'\n\n\"\"\"\n"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 2 1 2') == '1 2 2 3'\nassert solution('3\\n2 3 8') == '2 3 8'\n"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 2 1 2') == '1 2 2 3'\n\"\"\""
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n3 2 1 2\n''') == '1 2 2 3 '\nassert solution('''3\n2 3 8\n''') == '2 3 8 '\nassert solution('''2\n3 8\n''') == '2 3 8 '\n"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 1 2\") == \"1 2 2 3\"\nassert solution(\"3\\n2 3 8\") == \"2 3 8\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def __init__(self, num_of_columns: int):\n        self.num_of_columns = num_of_columns\n        self.data = [0] * num_of_columns\n\n    def solution(self) -> str:\n        for line in sys.stdin:\n            self.data = [self.data[i] + int(line.strip()) for i, _ in enumerate(self.data)]\n\n        print(*self.data)\n\n\nSolution(int(sys.stdin.readline().strip())).solution()\n"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1 2\") == \"1 2 2 3\"\nassert solution(\"2 3 8\") == \"2 3 8\""
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('50 30 10 10') == '50 30 10'\nassert solution('100 50 10 21') == '-1'"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 30 10 10\") == \"50 30 10\"\nassert solution(\"100 50 10 21\") == \"-1\"\nassert solution(\"100 100 100 100\") == \"100 100 100\"\nassert solution(\"12 10 15 8\") == \"12 10 12\"\n\"\"\"\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 50 10 21') == '-1'\nassert solution('50 30 10 10') == '50'\nassert solution('50 30 10 11') == '-1'\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('50 30 10 10') == '50 30 10'\nassert solution('100 50 10 21') == '-1'\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"50 30 10 10\") == \"50\"\nassert solution(\"100 50 10 21\") == \"-1\"\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('foo\\nbar') == 'foo\\nbar'\nassert solution('foo\\nbar\\n') == 'foo\\nbar'\n'''\n\nfrom collections import Counter\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"50 30 10 10\") == \"50\"\nassert solution(\"100 50 10 21\") == \"-1\"\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"50 30 10 10\") == \"50 30 10\"\nassert solution(\"100 50 10 21\") == \"10 10\"\nassert solution(\"10 10 10 100\") == \"10 10 10\"\nassert solution(\"10 10 20 10\") == \"10 10 20\"\nassert solution(\"10 10 10 10\") == \"10 10 10\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000)\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"50 30 10 10\") == \"50\"\nassert solution(\"100 50 10 21\") == \"-1\"\nassert solution(\"100 20 30 5\") == \"100\"\nassert solution(\"100 30 20 5\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50 30 10 10\") == \"50 30 10\"\nassert solution(\"100 50 10 21\") == \"-1\"\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 2') == '1'\n\nassert solution('6 1\\n5 1 2 3 4 1') == '2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == 1\nassert solution(\"6 1 2 3 4 1\") == 2\n\"\"\"\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"6 1 5 4 2 1\") == \"2\"\nprint(\"Passed all tests...!\")\n\n----\n\nIt\u2019s not a very difficult problem, but I personally believe that the solution is not so simple.\n\nI still didn\u2019t solve this problem, because I was trying to do it very fast and I was ignoring the main idea.\n\nAll I did was make a copy of the original list and then I removed all the elements that are not suitable for the result.\n\nAfter that I checked every two elements and then I counted them.\n\nFor example, in the second sample I removed elements 3 and 4. Then I checked every two elements and then counted them.\n\nI checked:\n\n$5 \\oplus 1 = 1 = x$\n$5 \\oplus 4 = 9 = x$\n$5 \\oplus 1 = 9 = x$\n$2 \\oplus 3 = 5 = x$\n$4 \\oplus 1 = 5 = x$\n$1 \\oplus 2 = 3 = x$\n\nThen the answer is 2.\n\nAs you can see, there is only one possible solution to the problem.\n\nBut if you try to solve the problem for the first sample, you will find that there are only two possible solutions.\n\nI tried to make a simple solution for the second sample.\n\nI know, I used a bit of memory, but I got the answer only after few minutes.\n\nThe solution was not the most efficient but it worked.\n\nThe beauty of the solution is that it doesn\u2019t use memory and is very simple.\n\nI hope you will have a fun time solving problems with Bitwise Xor and Big O.\n\n'''"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2\\n') == '1'\nassert solution('6 1\\n5 1 2 3 4 1\\n') == '2'"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1'\n\n\"\"\"\n\nn, x = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (a[i] ^ a[j]) == x:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('5 1 2 3 4 1') == '2'\nassert solution('6 1 2 3 4 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2') == 1\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 2\\n') == 1\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"6 1\") == \"2\"\n"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == 1\nassert solution(\"1 2\\n1 1\") == 2\nassert solution(\"1 2\\n0 0\") == 0\nassert solution(\"1 2\\n2 1\") == 1\nassert solution(\"1 2\\n2 2\") == 0\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcdd') == '3 abc'\nassert solution('abbcdddeaaffdfouurtytwoo') == '18 abbcd...tw'\n\n\n    \"\"\"\n\n    pass\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcdd') == ['abc', 'bc', 'c', 'd', 'd', 'd', 'd']\nassert solution('abbcdddeaaffdfouurtytwoo') == ['abbcdddeaadfortytw', 'abbcdddeaadfortytw', 'abbcdddeaadfortytw', 'abbcdddeaadfortytw', 'abbcdddeaadfortytw', 'abbcdddeaadfortytw', 'abbcdddeaadfortytw', 'abbcdddeaadfortytw', 'abbcdddeaadfortytw', 'abbcdddeaadfortytw', 'abbcdddeaadfortytw']\nassert solution('abba') == ['abba']\nassert solution('ab') == ['ab']\nassert solution('a') == ['a']\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdd\") == \"3 abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"18 abbcd...tw\"\nassert solution(\"a\") == \"0 a\"\nassert solution(\"aa\") == \"1 a\"\nassert solution(\"ab\") == \"1 a\"\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcdd\") == \"abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"abbcdddeaadfortytw\"\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdd\") == \"abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"abbcdddeaadfortytw\"\nassert solution(\"aaa\") == \"aaa\"\n\n\nsolution(\"abcdd\") == \"abc\"\nsolution(\"abbcdddeaaffdfouurtytwoo\") == \"abbcdddeaadfortytw\"\nsolution(\"aaa\") == \"aaa\"\n\"\"\"\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcdd') == 'abc\\n'\nassert solution('abbcdddeaaffdfouurtytwoo') == 'abbcdddeaadfortytw\\n'\nassert solution('xbcdddeaaffdfouurtytwoo') == 'xbcdddeaadfortytw\\n'\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcdd\") == \"abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"abbcdddeaadfortytw\"\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcdd\") == \"abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"abbcdddeaadfortytw\"\nassert solution(\"abcddde\") == \"cdde\"\nassert solution(\"abc\") == \"\"\nassert solution(\"abcdee\") == \"abcdee\"\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abbcdddeaaffdfouurtytwoo') == 'abbcdddeaadfortytw'\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/55cfd7dbb6a0ed95d50000c4\n\nThe function returns an array of pair values, where each pair contains a symbol and its value.\n\nThe function accepts two arguments:\n\nstring s: a string of symbols (a string with only uppercase, lowercase and/or spaces)\nstring symbols: a string that contains the symbols that the function will use\n\nThe function returns an array of pairs, where each pair contains a symbol and its value.\n\nThe function returns:\n\nIf the function can't convert the given string to an array of pairs, then it returns:\n\n\"The string contains characters that don't represent symbols in the given string\"\n\nIf the string contains duplicate symbols, then the function returns:\n\n\"The string contains duplicate symbols\"\n\nIf there is no duplicate symbols in the string, then the function returns:\n\n\"Success\"\n\nNotes:\n\nThe function should not return the duplicated symbols that are already contained in the pairs that are returned. For example, if the string is \"aeiou\", then the function should not return the pair \"i\": 1, because \"e\" already contains it.\n\nThe function should not return pairs if it's impossible to create such pairs, e.g. if the string \"aeiou\" is given and the function returns pairs for \"abcd\", then the string \"aeiou\" should not be returned.\n\nThe returned pairs should be sorted in lexicographic order.\n\"\"\"\n"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcdd\") == \"abc\"\nassert solution(\"abbcdddeaaffdfouurtytwoo\") == \"abbcdddeaadfortytw\"\n\n\"\"\"\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == 10080\n\"\"\""
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == -1\nassert solution(\"2\") == 2\nassert solution(\"5\") == 10080\nassert solution(\"7\") == 68560\n\"\"\"\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '1'\nassert solution('8') == '10080'\nassert solution('10') == '-1'\nassert solution('11') == '1230'\nassert solution('12') == '1260'\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"10080\"\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"4\") == \"10080\"\nassert solution(\"5\") == \"10080\"\n\"\"\"\n\nn = int(input())\n\ni = 1\n\nwhile True:\n    divisable = [1, 2, 3, 5, 7]\n    m = i\n    for d in divisable:\n        m = m * 10 % d\n    if m == 0:\n        print(i)\n        break\n    i += 1\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"10080\"\n\"\"\"\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '10080'\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"10080\"\n\"\"\""
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == -1\nassert solution('2') == 10080\nassert solution('3') == 10080\nassert solution('4') == 10080\nassert solution('5') == 10080\n"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == 10080\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"5 1\") == \"-5\"\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\\n\") == \"5\\n\"\nassert solution(\"5 1\\n-4 -5 -3 -2 -1\\n\") == \"-5\\n\""
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\") == \"5\"\nassert solution(\"5 1\\n-4 -5 -3 -2 -1\") == \"-5\""
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\") == \"5\"\nassert solution(\"5 1\\n-4 -5 -3 -2 -1\") == \"-5\"\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\") == \"5\"\nassert solution(\"5 1\\n-4 -5 -3 -2 -1\") == \"-5\"\nassert solution(\"4 3\\n1 2 3 4\") == \"4\"\nassert solution(\"4 3\\n1 2 3 4\") == \"4\"\nassert solution(\"5 2\\n1 2 3 4 5\") == \"5\"\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 2 3 4 5') == '5'\nassert solution('5 1\\n-4 -5 -3 -2 -1') == '-5'\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\") == \"5\"\nassert solution(\"5 1\\n-4 -5 -3 -2 -1\") == \"-5\"\n\n\"\"\"\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\") == \"5\"\nassert solution(\"5 1\\n-4 -5 -3 -2 -1\") == \"-5\"\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\\n\") == \"5\"\nassert solution(\"5 1\\n-4 -5 -3 -2 -1\\n\") == \"-5\""
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\") == \"5\"\nassert solution(\"5 1\\n-4 -5 -3 -2 -1\") == \"-5\"\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n5\\n2\\n1\\n3') == 2\nassert solution('3\\n6\\n2\\n3\\n2') == 3\nassert solution('2\\n5\\n5\\n10') == 1\nassert solution('1\\n2\\n1') == 2\nassert solution('2\\n5\\n10') == 1\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n5\\n2\\n1\\n3') == 2\nassert solution('3\\n6\\n2\\n3\\n2') == 3\nassert solution('2\\n5\\n5\\n10') == 1\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n5\\n2\\n1\\n3\\n') == '2'\nassert solution('2\\n5\\n5\\n10\\n') == '1'\nassert solution('3\\n6\\n2\\n3\\n2\\n') == '3'\nassert solution('3\\n6\\n2\\n3\\n2\\n') == '3'\nassert solution('3\\n6\\n2\\n3\\n2\\n') == '3'\n\"\"\"\n\nn = int(input())\nm = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"2\\n5\\n5\\n10\") == \"1\"\nassert solution(\n\"2\\n5\\n5\\n10\") == \"1\"\nassert solution(\n\"2\\n5\\n5\\n10\") == \"1\"\nassert solution(\n\"2\\n5\\n5\\n10\") == \"1\"\nassert solution(\n\"2\\n5\\n5\\n10\") == \"1\"\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n5\\n5\\n10') == '1\\n'\nassert solution('3\\n6\\n2\\n3\\n2') == '2\\n'\nassert solution('3\\n6\\n2\\n3\\n2\\n') == '2\\n'\nassert solution('3\\n6\\n2\\n3\\n2\\n\\n') == '3\\n'\nassert solution('3\\n6\\n2\\n3\\n2\\n\\n5\\n5\\n5') == '3\\n'\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5\\n2\\n1\\n3\") == \"2\"\nassert solution(\"3\\n6\\n2\\n3\\n2\") == \"3\"\nassert solution(\"2\\n5\\n5\\n10\") == \"1\""
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n5\n2\n1\n3''') == '2'\nassert solution('''3\n6\n2\n3\n2''') == '3'\nassert solution('''2\n5\n5\n10''') == '1'\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5\\n2\\n1\\n3') == '2'\nassert solution('3\\n6\\n2\\n3\\n2') == '3'\nassert solution('2\\n5\\n5\\n10') == '1'\n\nassert solution('3\\n5\\n2\\n1\\n3') == '2'\nassert solution('3\\n6\\n2\\n3\\n2') == '3'\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5\\n2\\n3\\n2\") == \"2\\n3\\n1\"\nassert solution(\"3\\n6\\n2\\n3\\n2\") == \"3\\n2\"\nassert solution(\"2\\n5\\n5\\n10\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n5\n2\n1\n3''') == '2'\nassert solution('''3\n6\n2\n3\n2''') == '3'\nassert solution('''2\n5\n5\n10''') == '1'\nassert solution('''3\n5\n2\n1\n3''') == '2'\n\n'''"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 1 2\") == \"First\"\nassert solution(\"3 3 1 1 1\") == \"Second\"\nassert solution(\"4 5 3 1 5\") == \"Friendship\"\nassert solution(\"5 5 5 5 5\") == \"Friendship\"\nassert solution(\"3 5 4 4 5\") == \"Friendship\"\n"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 1 2\") == \"First\"\nassert solution(\"3 3 1 1 1\") == \"Second\"\nassert solution(\"4 5 3 1 5\") == \"Friendship\"\n"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 1 1 1') == 'Second'\nassert solution('5 5 3 1 5') == 'Friendship'\nassert solution('4 5 3 1 5') == 'First'\n"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 2 1 2') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'\n"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1 1 1\") == \"First\"\nassert solution(\"4 5 3 1 5\") == \"Second\"\nassert solution(\"4 5 3 1 5\") == \"Friendship\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 1 2\") == \"First\"\nassert solution(\"3 3 1 1 1\") == \"Second\"\nassert solution(\"4 5 3 1 5\") == \"Friendship\"\n"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 2 1 2') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'\n\nprint('The local tests are done. Click on \"Check\" now!')"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 1 2\") == \"First\"\nassert solution(\"3 3 1 1 1\") == \"Second\"\nassert solution(\"4 5 3 1 5\") == \"Friendship\"\nassert solution(\"7 5 3 1 5\") == \"First\"\n\n\"\"\""
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 2 1 2') == 'First'\nassert solution('3 3 1 1 1') == 'Second'\nassert solution('4 5 3 1 5') == 'Friendship'"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 1 2\") == \"First\"\nassert solution(\"3 3 1 1 1\") == \"Second\"\nassert solution(\"4 5 3 1 5\") == \"Friendship\"\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 10') == 10\nassert solution('1 2 5') == 2\nassert solution('2 3 9') == 1"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 10\") == 10\nassert solution(\"1 2 5\") == 2\nassert solution(\"2 3 9\") == 1\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 10\") == 10\nassert solution(\"1 2 5\") == 2\nassert solution(\"2 3 9\") == 1\n\nprint(\"Cool!\")"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 10\") == \"10\"\nassert solution(\"1 2 5\") == \"2\"\nassert solution(\"2 3 9\") == \"1\"\n\nprint(solution(\"1 2 10\"))\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == output\n\n\"\"\"\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 10') == 10\nassert solution('1 2 5') == 2\nassert solution('2 3 9') == 1\n\"\"\"\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('1 2 5') == '2'\nassert solution('2 3 9') == '1'\n\n\"\"\"\n\nfrom functools import reduce\nfrom typing import Iterable\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('1 2 5') == '2'\nassert solution('2 3 9') == '1'\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 1 10''') == 10\nassert solution('''1 2 5''') == 2\nassert solution('''2 3 9''') == 1\n\"\"\"\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 10\") == 10\nassert solution(\"1 2 5\") == 2\nassert solution(\"2 3 9\") == 1\n\"\"\"\n\nfrom math import sqrt, ceil\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0\") == '0'\nassert solution(\"1 0\") == '0'\nassert solution(\"0 1\") == '2'\nassert solution(\"-1 -1\") == '3'"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"2\"\nassert solution(\"-1 -1\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 0') == 0\nassert solution('1 0') == 0\nassert solution('0 1') == 2\nassert solution('-1 -1') == 3"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '2'\nassert solution('-1 -1') == '3'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"2\"\nassert solution(\"-1 -1\") == \"3\"\n\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"2\"\nassert solution(\"-1 -1\") == \"3\"\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0') == 0\nassert solution('1 0') == 0\nassert solution('0 1') == 2\nassert solution('-1 -1') == 3\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('0 1') == '2'\nassert solution('-1 -1') == '3'\n\"\"\"\nimport math\n\nx, y = [int(i) for i in input().split()]\n\nans = 0\nans += x // 2 + x % 2\nans += y // 2 + y % 2\n\nprint(ans)\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"0 1\") == \"2\"\nassert solution(\"-1 -1\") == \"3\"\nassert solution(\"0 2\") == \"1\"\n"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0') == 0\nassert solution('1 0') == 0\nassert solution('0 1') == 2\nassert solution('-1 -1') == 3\nassert solution('0 0') == 0\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()()()\") == 6\n\"\"\""
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('(()())') == 6\nassert solution('()()())') == 7\nassert solution('((()()))') == 0\nassert solution('((()))') == 6\nassert solution(')(()())') == 6\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\")(\") == 0\nassert solution(\"())(\") == 0\nassert solution(\"()()())\") == 0\nassert solution(\"((()))\") == 1\nassert solution(\"((())))(\") == 0\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(()()))\") == 0\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"((()))\") == 6\nassert solution(\"()()()\") == 7\nassert solution(\"()()((()))\") == 7\n\"\"\""
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"((()))\") == 6\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(()())\") == 6\nassert solution(\"()()())\") == 7\nassert solution(\"((()))\") == 6\nassert solution(\"()()())\") == 7\nassert solution(\"))(((((\") == 0\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\")(()\") == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"()()\") == 6\nassert solution(\"((()))\") == 6\nassert solution(\"((()()))\") == 6\nassert solution(\"(((()()))\") == 6\nassert solution(\"((((()()))\") == 6\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(()()\") == 6\nassert solution(\")()()\") == 7\n\"\"\"\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"24\") == 3\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"24\") == \"3\"\n\n\"\"\"\n\nfrom math import ceil, log\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"24\") == \"3\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('24') == 3\n\"\"\""
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12') == 3\nassert solution('24') == 3\nassert solution('60') == 5\n\"\"\""
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(24) == 3\n\"\"\"\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"24\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('24') == '3'\nprint(solution('24'))\n\"\"\"\n\n\"\"\"\nLet f(N) be the maximum number of operations that can be performed on N.\nClearly f(N) is maximized by a choice of z in such a way that z divides N.\nSo we can use dynamic programming to find f(N) by remembering the answers for smaller values of N.\n\"\"\"\nimport math"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"24\") == 3\n\"\"\""
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('24') == 3\n"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"3\"\n\"\"\""
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == \"3\"\nassert solution(4) == \"3\"\nassert solution(10) == \"13\"\nassert solution(12) == \"13\"\nassert solution(18) == \"113\"\n"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '3'"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == 3\n\"\"\"\n"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n\") == \"3\"\n\"\"\"\n\nn = int(input())\nprint(n//2)"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '3'\n\n\"\"\"\n\nn = int(stdin.readline())\nmoney = 0\nfor i in range(1, n + 1):\n    money += i\n\nprint(money)\n"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n') == ''\nassert solution('3\\n') == ''\nassert solution('4\\n') == ''\n"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"3\"\n\"\"\"\n\n\"\"\"\nGiven the following list, find the longest sublist whose elements are sorted in increasing order.\n\nlst = [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 23, 24, 25]\n\nThe longest sublist whose elements are sorted in increasing order has length 6, and it is [1, 2, 3, 4, 5, 6].\n\"\"\"\n\nlst = [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 23, 24, 25]\n\nlongest_sorted_in_inc_order = [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1011\") == \"9999999999\"\nassert solution(\"11010\") == \"9999999999\"\nassert solution(\"11101\") == \"9999999999\"\nassert solution(\"11110\") == \"9999999999\"\nassert solution(\"111110\") == \"9999999999\"\n"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1011\") == \"9999999999\"\n"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11110') == '9999999999'\nassert solution('10111') == '9999999999'\nassert solution('1111') == '1111'\nassert solution('11010') == '111111010'\n\"\"\"\n\nimport math\nimport collections\nimport sys\nfrom typing import *"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1011') == '9999999999'\n"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1011\") == \"9999999999\"\n\"\"\""
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1011\") == \"9999999999\"\nassert solution(\"110110110\") == \"2\"\n\"\"\""
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('41011111') == '9999999999'"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1011') == '2'\n\nsolution('1011')\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10111110\") == \"11111111111111111\"\nassert solution(\"11110\") == \"111111111111111111111111111111111\"\nassert solution(\"11110\") == \"111111111111111111111111111111111\"\nassert solution(\"11110\") == \"111111111111111111111111111111111\"\nassert solution(\"11110\") == \"111111111111111111111111111111111\"\n"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1011101\") == \"2\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 0 0 4 1\") == \"2\"\nassert solution(\"5 3\\n0 1 1 4 1\") == \"1\"\nassert solution(\"5 1\\n0 1 1 4 1\") == \"0\"\nassert solution(\"5 2\\n0 1 1 4 1\") == \"1\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 3\n1 0 0 4 1\"\"\") == \"2\"\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 0 0 4 1\") == \"2\"\nassert solution(\"1 2\\n1 0\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 0 0 4 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2\n2 0 2''') == '1'\nassert solution('''5 3\n1 0 0 4 1''') == '2'\n\"\"\""
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2 0 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 0 0 4 1''') == '2'\nassert solution('''3 2\n2 0 2''') == '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n2 0 2\") == 1\nassert solution(\"5 3\\n1 0 0 4 1\") == 2\nassert solution(\"2 3\\n1 1 0\") == 2\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 0 0 4 1\") == \"2\"\nassert solution(\"3 2\\n2 0 2\") == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 2\n2 0 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 3\n1 0 0 4 1\n\"\"\") == \"2\"\n\"\"\"\n)\n"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11101') == 1\nassert solution('101010') == 2\nassert solution('110011101') == 2\nassert solution('11011111111111111') == 5\nassert solution
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('110011') == 1\nassert solution('10111110') == 1\nassert solution('11111') == 1\nassert solution('11101') == 3\nassert solution('11111111111111111111111111111111111111111111111111111111111111111111111111111') == 1\n"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100011') == '2'\nassert solution('110010') == '2'\nassert solution('11100111111100') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100011') == '2'\nassert solution('1100100') == '2'\nassert solution('1100') == '1'\nassert solution('11') == '1'\n\nassert solution('11111101101111011111111011101111111101111111101111111111110111111111111111111111111111') == '19'\n"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10111') == '3 1 0'\n\nassert solution('1100100110') == '4 0 1 1'\n\nassert solution('1100110111110') == '5 1 1 0 1 1 1'\n\nassert solution('110111101110') == '5 1 2 1 0 1 1 1'\n\nassert solution('110111101110') == '5 1 2 1 0 1 1 1'"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10011') == '1 0'\nassert solution('110010') == '2 1'\nassert solution('110011001110001') == '1 1'"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11101100\") == \"3 1 0\"\nassert solution(\"111111111111111111111111111111\") == \"16 1 0\"\nassert solution(\"111011001011110111101111111101\") == \"15 1 0\"\n\nprint(solution(\"110011001100110011001100110011\"))\n\"\"\"\n"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == '1'\nassert solution(\"100\") == '1'\nassert solution(\"0\") == '0'\nassert solution(\"110\") == '1'\nassert solution(\"1110\") == '2'\n"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100011') == '2 1 0'\nassert solution('111011') == '4 0 1'\nassert solution('110110') == '1 0'\nassert solution('110111') == '0'\nassert solution('110111') == '0'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n8 3 2 6 3\") == \"0 2\\n2 1\\n2 3\"\nassert solution(\"3 4\\n2 2 4\") == \"1 1\\n3 2\\n1 2\"\nassert solution(\"5 3\\n8 3 2 6 3\") == \"3 3\\n1 3\\n1 2\"\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n8 3 2 6 3') == '0 2\\n2 1\\n2 3'\nassert solution('3 4\\n2 2 4') == '1 1\\n3 2\\n1 3'\nassert solution('5 3\\n8 3 2 6 3') == '3 3\\n1 3\\n1 2\\n1 3'\n\"\"\"\n\n\"\"\"\nhttps://app.codility.com/demo/results/trainingM3E8S4-3F9/"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n3 3 6 2 1\") == \"2 2\\n3 1\\n3 2\"\n\"\"\""
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"3 3\"\nassert solution(\"5 2\") == \"1 1\"\n\nassert solution(\"5 3\") == \"3 3\"\nassert solution(\"5 2\") == \"1 1\"\n\nassert solution(\"5 3\") == \"3 3\"\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n5 8 5\\n') == '0 2'\nassert solution('3 4\\n2 2 4\\n') == '1 1'\nassert solution('5 3\\n8 3 2 6 3\\n') == '3 3'\n\"\"\""
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 4') == '1 1'\nassert solution('3 2') == '1 2'\nassert solution('5 3') == '3 2'\nassert solution('3 2 4') == '1 2'\nassert solution('3 3') == '1 3'\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n5 8 5\") == \"0 2\\n2 1\\n2 3\\n2 3\"\nassert solution(\"3 4\\n2 2 4\") == \"1 1\\n3 2\\n1 3\\n2 3\"\nassert solution(\"5 3\\n8 3 2 6 3\") == \"3 3\\n1 3\\n1 2\\n1 3\"\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4\") == \"1 1\"\nassert solution(\"3 2\") == \"0 2\"\n\"\"\""
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n5 8 5\") == \"0 2\"\nassert solution(\"3 4\\n2 2 4\") == \"1 1\"\nassert solution(\"5 3\\n8 3 2 6 3\") == \"3 3\"\n"
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n8 3 2 6 3') == '3 3'\n\"\"\"\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bbaze\") == 8\nassert solution(\"abacaba\") == 18\nassert solution(\"xyz\") == -1\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == -1\nassert solution(\"xyz\") == -1\nassert solution(\"bbaze\") == 8\nassert solution(\"axx\") == 18\nassert solution(\"za\") == -1\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bbaze\") == 8\nassert solution(\"abacaba\") == 18\nassert solution(\"xyz\") == -1\nassert solution(\"aeb\") == 3\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == -1\nassert solution(\"xyz\") == -1\nassert solution(\"aba\") == 2\nassert solution(\"aaa\") == 4\nassert solution(\"bbb\") == 5\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bzb 2\") == \"8\"\nassert solution(\"abacaba\") == \"18\"\nassert solution(\"xyz\") == \"-\"\nassert solution(\"aeb 3\") == \"9\"\nassert solution(\"za 1\") == \"6\"\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == 8\nassert solution(\"bzb\") == 1\nassert solution(\"abacaba\") == 18\nassert solution(\"xyz\") == -1\nassert solution(\"bba\") == 1\n\"\"\""
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bbaze\") == 8\nassert solution(\"abacaba\") == 18\nassert solution(\"xyz\") == -1\n\"\"\""
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacaba') == -1\nassert solution('baza') == 8\nassert solution('axz') == -1\nassert solution('axy') == 18\nassert solution('zab') == -1\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bbaze\") == 8\nassert solution(\"xyz\") == -1\nassert solution(\"abacaba\") == 18\nassert solution(\"aaaaaaaaaa\") == 0\nassert solution(\"aaaaaaaa\") == 0\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == -1\nassert solution(\"bbaze\") == 8\nassert solution(\"xyz\") == -1\n\n\"\"\"\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"2\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"1 1\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n3 4\\n5 4\\n100 5\\n42 100\\n') == '5'\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == 1\nassert solution(\"1 2\") == 0\nassert solution(\"2 4\") == 0\nassert solution(\"3 4\") == 5\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n2 4\\n3 4\\n') == '1'\nassert solution('4\\n100 42\\n42 100\\n5 42\\n100 5\\n') == '5'\nassert solution('2\\n1 2\\n1 2\\n') == '0'\nassert solution('2\\n1 2\\n2 1\\n') == '0'\nassert solution('4\\n100 42\\n42 100\\n5 42\\n100 5\\n') == '5'\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n2 4') == '1'\nassert solution('4\\n100 42\\n42 100\\n5 42\\n100 5') == '5'"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n2 4\\n3 4') == '1'\nassert solution('4\\n100 42\\n42 100\\n5 42\\n100 5') == '5'"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 4\\n5 42\\n100 5\") == \"5\"\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n2 4\") == \"1\"\nassert solution(\"1 2\\n2 4\") == \"0\"\nassert solution(\"100 42\\n42 100\") == \"5\"\nassert solution(\"5 42\\n42 5\") == \"5\"\nassert solution(\"1 2\\n1 2\") == \"0\"\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n2 4\\n5 42\\n100 5\") == \"5\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom typing import List, Tuple\n"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n100 42\\n42 100\\n5 42\\n100 5\") == \"5\"\nassert solution(\"3\\n1 2\\n2 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 5\\n2 3\\n') == 8\n\"\"\"\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2 3\n1 5\n2 3\n''') == 8\nassert solution('''\n5 10\n3 20\n2 20\n1 20\n4 20\n5 20\n''') == 60\nassert solution('''\n5 10\n3 1\n2 1\n1 1\n4 1\n5 1\n''') == 10\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 5\\n2 3\") == 8\n\"\"\"\n\nn, v = [int(i) for i in stdin.split(' ')]\n\na = []\nb = []\nfor i in range(n):\n    a.append([int(i) for i in stdin.split('\\n')[i].split(' ')])\n    b.append([int(i) for i in stdin.split('\\n')[i].split(' ')])\n\nmax_v = 0\nfor i in range(n):\n    max_v = max(max_v, max(a[i]) + b[i][0])\n\nprint(max_v)\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 5\\n2 3') == 8\n\"\"\"\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 5\\n2 3\\n\") == 8\nassert solution(\"5 10\\n3 20\\n2 20\\n1 20\\n4 20\\n5 20\\n\") == 60\nassert solution(\"5 10\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\") == 0\nassert solution(\"5 10\\n3 1\\n2 2\\n1 1\\n2 2\\n3 1\\n\") == 7\nassert solution(\"5 10\\n2 1\\n2 2\\n3 1\\n2 2\\n2 2\\n\") == 5\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 3\n1 5\n2 3''') == 8\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n2 4\\n1 2\\n1 3\\n2 3\") == \"7\"\nassert solution(\"6 3\\n5 5\\n3 4\\n2 4\\n1 4\\n1 5\\n3 5\") == \"6\"\nassert solution(\"3 2\\n2 1\\n1 2\\n1 2\\n1 2\\n1 2\") == \"5\"\nassert solution(\"4 3\\n3 5\\n2 4\\n1 5\\n1 2\\n1 2\\n1 2\\n1 2\") == \"6\"\nassert solution(\"4 3\\n4 5\\n2 4\\n2 4\\n1 4\\n1 5\\n1 2\\n1 2\\n1 2\\n1 2\") == \"7\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 5\\n2 3\\n3 5\\n4 3\\n5 5') == '6'\nassert solution('5 10\\n3 20\\n2 20\\n1 20\\n4 20\\n5 20') == '60'\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10\\n3 20\\n2 20\\n1 20\\n4 20\\n5 20\") == \"60\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def __init__(self):\n        self.stdin = sys.stdin\n\n    def solution(self):\n        n, v = list(map(int, self.stdin.readline().strip().split()))\n        days = {}\n        for i in range(n):\n            a, b = list(map(int, self.stdin.readline().strip().split()))\n            days[a] = days.get(a, 0) + b\n        res = 0\n        day = 0\n        for i in sorted(days.keys()):\n            if i <= day:\n                continue\n            day = i\n            res += days[i]\n            if res > v:\n                break\n        return res\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\\n7 5\\n8 6\\n1 6\\n2 4\") == \"13\"\nassert solution(\"3 20\\n7 5\\n8 6\\n1 6\\n2 4\") == \"14\""
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 2 4') == '1'\nassert solution('3\\n2 3 1') == '2'\nassert solution('3\\n2 3 1') == '2'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 2 4') == '1'\nassert solution('3\\n2 3 1') == '2'\nassert solution('3\\n2 3 1') == '2'"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"1\"\nassert solution(\"3\\n2 3 1\") == \"2\"\nassert solution(\"3\\n2 3 1\") == \"3\"\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 2 4\") == '1'\nassert solution(\"3\\n2 3 3\") == '2'\nassert solution(\"3\\n2 3 1\") == '3'\n\n\nimport math\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 2 4') == '1'\nassert solution('3\\n2 3 3') == '2'\nassert solution('3\\n2 3 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"1\"\nassert solution(\"3\\n2 3 1\") == \"2\"\nassert solution(\"3\\n2 3 1\") == \"2\"\n\n\n\"\"\"\n\nimport sys\nimport re\nimport math\nimport collections\nfrom collections import Counter"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 2 4') == '1'\nassert solution('3\\n2 3 1') == '2'\nassert solution('3\\n2 3 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"1\"\nassert solution(\"3\\n2 3 1\") == \"2\"\nassert solution(\"3\\n2 3 1\") == \"2\"\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"7\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 2 4') == '1'\nassert solution('3\\n2 3 3') == '2'\nassert solution('3\\n2 3 1') == '3'\n\nimport numpy as np"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBBSCC\") == \"2\"\nassert solution(\"BBSSCC\") == \"0\"\nassert solution(\"BBBBB\") == \"4\"\nassert solution(\"BBSCC\") == \"1\"\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BBBSC\") == 2\nassert solution(\"BBC\") == 7\n\"\"\"\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BBBSCC\") == \"2\"\nassert solution(\"BSB\") == \"1\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''BBBSSC\n6 4 1\n1 2 3\n4''') == '2'\n\nassert solution('''BBC\n1 10 1\n1 10 1\n21''') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''BBBSSC\n6 4 1\n1 2 3\n4''') == '2'\n\nassert solution('''BBC\n1 10 1\n1 10 1\n21''') == '7'\n\nassert solution('''BSC\n1 1 1\n1 1 3\n1000000000000''') == '200000000001'\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BBBSC\") == \"2\"\nassert solution(\"BBC\") == \"7\"\nassert solution(\"BSC\") == \"200000000001\"\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBBSC\") == \"2\"\nassert solution(\"BBC\") == \"7\"\nassert solution(\"BSC\") == \"200000000001\"\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BBBSCC\") == \"7\"\nassert solution(\"BSBSC\") == \"7\"\nassert solution(\"BSSBC\") == \"0\"\nassert solution(\"SBSBC\") == \"1\"\nassert solution(\"SSBBC\") == \"0\"\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BBBSC\") == 2\nassert solution(\"BBC\") == 7\nassert solution(\"BBSC\") == 0\nassert solution(\"BSC\") == 200000000001\nassert solution(\"BSBS\") == 1\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 6\\nHSHSHS\") == \"1\"\n\"\"\"\n\nfrom collections import deque\n\nimport sys\n\nsys.setrecursionlimit(2500)\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"6 6\\n\"\n    \"HSHSHS\"\n) == \"1\"\nassert solution(\n    \"14 100\\n\"\n    \"HHHSSS...SH\"\n) == \"0\"\nassert solution(\n    \"23 50\\n\"\n    \"HHSS.......SSHHHHHHHHHH\"\n) == \"8\"\nprint(\"Test finished.\")\n\n-----solution-----\n\nn, t = [int(x) for x in input().split()]\nL = [input() for x in range(n)]\n\nprint(L.count(\"H\"))"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 6\\nHSHSHS\\n\") == '1'\nassert solution(\"14 100\\nHHHSSS...SH\\n\") == '0'\nassert solution(\"23 50\\nHHSS....SSHHHHHHHHHH\\n\") == '8'\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 6\\nHSHSHS\") == \"1\"\nassert solution(\"14 100\\nHHSS.....SSHHHHHHHHHH\") == \"0\"\nassert solution(\"23 50\\nHHSS.......SSHHHHHHHHHH\") == \"8\"\nprint(\"The code ran successfully\")\n\n---- END ----\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 6\\nHSHSHS\") == \"1\"\nassert solution(\"14 100\\nHHHSSS...SH\") == \"0\"\nassert solution(\"23 50\\nHHSSSSHHHSSSSS...SSSSSSHHHHHHHHHHHHHHHHHSSS...SH\") == \"8\"\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 6\\nHSHSHS') == '1'\nassert solution('14 100\\nHHHSSS...SH') == '0'\nassert solution('23 50\\nHHSS.......SSHHHHHHHHHH') == '8'\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".HHHSSS...SH\") == \"0\"\nassert solution(\"HHSSSSSSSSHH\") == \"0\"\nassert solution(\".HHHHHHHHHH\") == \"1\"\nassert solution(\"HHHHHHHHHHHH\") == \"-1\"\n\"\"\"\n\nimport re\n\nregex = re.compile(r\"(?P<count>\\d+)\\s(?P<type>[HS])\")\n\nfor _ in range(int(input())):\n    n, t = map(int, input().split())\n    houses = [i for i in input()]\n    shops = [i for i in input()]\n    houses_n, shops_n = 0, 0\n    for house in houses:\n        houses_n += int(regex.match(house).group(\"count\")) if house == \"H\" else 0\n    for shop in shops:\n        shops_n += int(regex.match(shop).group(\"count\")) if shop == \"S\" else 0\n    print(-1 if houses_n < shops_n and t >= shops_n else min(houses_n - shops_n, shops_n))\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 6\") == \"1\"\nassert solution(\"14 100\") == \"0\"\nassert solution(\"23 50\") == \"8\"\nprint(\"Tests passed.\")\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 6\\nHSHSHS\\n\") == \"1\"\nassert solution(\"14 100\\nHHSSSSSSHHHSSSSSSSSSSS\\n\") == \"0\"\nassert solution(\"23 50\\nHHSSSSSSHHHHHHHHHHHHHHSSSSSSSS\\n\") == \"8\"\nassert solution(\"24 100\\nHHHHSSSSHHHSSSSSSSSSSSSS\\n\") == \"5\"\n\n-----Tests-----\n\nOK:\n    Terminal:\n        python3 oracle.py < test0.in > test0.out\n        diff < test0.out test0.out\n    Terminal:\n        python3 oracle.py < test1.in > test1.out\n        diff < test1.out test1.out\n    Terminal:\n        python3 oracle.py < test2.in > test2.out\n        diff < test2.out test2.out\nOK:\n    Terminal:\n        python3 oracle.py < test3.in > test3.out\n        diff < test3.out test3.out\nOK:\n    Terminal:\n        python3 oracle.py < test4.in > test4.out\n        diff < test4.out test4.out\nOK:\n    Terminal:\n        python3 oracle.py < test5.in > test5.out\n        diff < test5.out test5.out\nOK:\n    Terminal:\n        python3 oracle.py < test6.in > test6.out\n        diff < test6.out test6.out\nOK:\n    Terminal:\n        python3 oracle.py < test7.in > test7.out\n        diff < test7.out test7.out\nOK:\n    Terminal:\n        python3 oracle.py < test8.in > test8.out\n        diff < test8.out test8.out\nOK:\n    Terminal:\n        python3 oracle.py < test9.in > test9.out\n        diff < test9.out test9.out\nOK:\n    Terminal:\n        python3 oracle.py < test10.in > test10.out\n        diff < test10.out test10.out\nOK:\n    Terminal:\n        python3 oracle.py < test11.in > test11.out\n        diff < test11.out test11.out\nOK:\n    Terminal:\n        python3 oracle.py < test12.in > test12.out\n        diff < test12.out test12.out\nOK:\n    Terminal:\n        python3 oracle.py < test13.in > test13.out\n        diff < test13.out test13.out\nOK:\n    Terminal:\n        python3 oracle.py < test14.in > test14.out\n        diff < test14.out test14.out\nOK:\n    Terminal:\n        python3 oracle.py < test15.in > test15.out\n        diff < test15.out test15.out\nOK:\n    Terminal:\n        python3 oracle.py < test16.in > test16.out\n        diff < test16.out test16.out\nOK:\n    Terminal:\n        python3 oracle.py < test17.in > test17.out\n        diff < test17.out test17.out\nOK:\n    Terminal:\n        python3 oracle.py < test18.in > test18.out\n        diff < test18.out test18.out\nOK:\n    Terminal:\n        python3 oracle.py < test19.in > test19.out\n        diff < test19.out test19.out\nOK:\n    Terminal:\n        python3 oracle.py < test20.in > test20.out\n        diff < test20.out test20.out\nOK:\n    Terminal:\n        python3 oracle.py < test21.in > test21.out\n        diff < test21.out test21.out\nOK:\n    Terminal:\n        python3 oracle.py < test22.in > test22.out\n        diff < test22.out test22.out\nOK:\n    Terminal:\n        python3 oracle.py < test23.in > test23.out\n        diff < test23.out test23.out\nOK:\n    Terminal:\n        python3 oracle.py < test24.in > test24.out\n        diff < test24.out test24.out\nOK:\n    Termin"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 6\\nHSHSHS') == '1'\nassert solution('14 100\\nHHSS...SH') == '0'\nassert solution('23 50\\nHHSS...SH') == '8'\nassert solution('1 1\\nH') == '-1'\nassert solution('4 5\\n..H..H') == '2'\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 1 1\\n') == '4'\nassert solution('8 10 10\\n') == '8'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 1 10') == '8'\nassert solution('8 1 1') == '4'\nassert solution('8 1 10') == '8'\nassert solution('8 1 10') == '8'\nassert solution('8 1 1') == '4'\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 1 1') == '4'\nassert solution('8 1 10') == '8'\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 1 1') == '4'\nassert solution('8 1 10') == '8'\nassert solution('5 10 1') == '5'\nassert solution('8 1 1000000000 1') == '8'\nassert solution('1 1000000000 1') == '1'\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 1 1') == '4'\nassert solution('8 1 10') == '8'\n\"\"\"\n\nn, x, y = [int(s) for s in stdin.readline().split()]\n\nprint(n * y + x)\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == s"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 1 1\\n\") == \"4\"\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 1 1') == '4'\n\nimport os, io, time, collections, functools, itertools, operator as op, matplotlib.pyplot as plt\nfrom numpy import uint32\n\nos.chdir(r'C:\\Users\\PC\\PycharmProjects\\Oeis')\ndata = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline().decode().strip().split()\nn, x, y = int(data[0]), int(data[1]), int(data[2])"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(r\"8 1 1\") == \"4\"\nassert solution(r\"8 1 10\") == \"8\"\n"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == '1'\nassert solution('ab') == '1'\nassert solution('aba') == '1'\nassert solution('aab') == '1'\n"
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 0 1\\n0 1 0\\n1 1 1\\n1 1 1') == '9'\nassert solution('2 3\\n1 0 1\\n0 1 0') == '8'\n"
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_str) == test_res\n"
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n0\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n0 0 1 1 1\\n0 1 1 0 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 0 0 1 1\") == 8\n\nassert solution(\"6 4\\n0 0 0 0 0\\n1 1 1 1 1\\n0 0 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == 8\n"
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n0\\n\") == \"1\"\nassert solution(\"2 3\\n1 0 1\\n0 1 0\\n\") == \"8\""
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n0\\n') == 1\nassert solution('2 3\\n1 0 1\\n0 1 0\\n') == 8\n"
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n0') == 1\nassert solution('2 3\\n1 0 1\\n0 1 0') == 8\n"
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n0\\n\") == \"8\"\nassert solution(\"2 3\\n1 0 1\\n0 1 0\\n\") == \"8\"\nassert solution(\"3 3\\n1 1 1\\n0 1 1\\n0 1 1\\n\") == \"8\""
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n0 1 0 1 1 0\\n0 1 0 1 1 1 1\\n0 1 1 0 1 1 1\\n0 1 1 1 1 1 1\\n0 1 1 1 1 1 0\\n0 1 1 1 1 0 1\\n0 1 1 1 1 1 1\\n0 1 1 1 1 1 1\") == 8\nassert solution(\"5 5\\n0 1 0 1 1 0\\n0 1 1 1 1 1 1\\n0 1 1 1 1 1 1\\n0 1 1 1 1 1 0\\n0 1 1 1 1 0 1\\n0 1 1 1 1 1 1\") == 6\nassert solution(\"5 5\\n1 0 1 1 1 0\\n1 0 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\") == 10\nassert solution(\"5 5\\n1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\") == 12\nassert solution(\"6 6\\n1 1 0 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\") == 15\n"
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 0 1\\n0 1 0') == '8'\nassert solution('2 3\\n1 0 1\\n0 1 0') == '5'\nassert solution('4 4\\n0 0 0 1\\n0 0 1 1\\n1 1 1 1\\n0 0 1 0') == '18'\nassert solution('3 4\\n0 1 1 0\\n1 0 1 1\\n0 1 0 1') == '15'\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\") == \"620\"\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\") == \"620\"\nassert solution(\"0 0 0 0 9\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n7 0 0 0 0\") == \"32\"\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 0 0 0 9') == 32\n\"\"\"\nfrom collections import defaultdict\n\nstdin = '0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\\n'\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\\n\") == \"620\"\n\n\"\"\"\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    0 0 0 0 9\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n    7 0 0 0 0\n    \"\"\"\n    ) == \"32\"\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\") == \"620\""
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 0 9\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n7 0 0 0 0\\n\") == \"32\"\nassert solution(\"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\\n\") == \"620\""
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\\n\") == \"620\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\") == \"620\"\nprint(solution(\"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\"))\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 43 21 18 2') == '620'\nassert solution('3 0 21 11 65') == '620'\n\n\"\"\"\n\nimport sys\n\n_, g_11, g_22, g_33, g_44, g_55 = map(int, sys.stdin.readline().split())\n\nhappiness = 0\n\nfor i in range(5):\n    g_12 = g_11\n    g_21 = g_22\n    g_23 = g_33\n    g_34 = g_44\n    g_45 = g_55\n\n    happiness += g_11 + g_22 + g_33 + g_44 + g_55\n    g_11, g_22, g_33, g_44, g_55 = g_22, g_33, g_44, g_55, g_11\n\n    happiness += g_12 + g_21 + g_34 + g_45\n    g_12, g_21, g_34, g_45 = g_21, g_34, g_45, g_12\n\nprint(happiness)"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1, 1) == 1\nassert solution(1, 2) == 2\nassert solution(1, 3) == 4\nassert solution(1, 10) == 10\n\nassert solution(100, 1000000000) == 1000000000"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1000000000\\n1\\n1000000000\\n\") == \"2000000000\"\nassert solution(\"10 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1 1 1 1 1 1 1 1 1 1 1\\n\") == \"0\"\nassert solution(\"3 1\\n4 3 5 6\\n11 12 14 20\\n\") == \"4\"\nassert solution(\"4 3\\n4 3 5 6\\n11 12 14 20\\n\") == \"3\"\n"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n4 3 5 6\\n11 12 14 20\") == \"4\"\n"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\") == \"3\"\nassert solution
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 4\\n11 3 16\") == 4\nassert solution(\"3 1\\n4 3 5 6\") == 0\nassert solution(\"4 3\\n4 3 5 6\") == 3\nassert solution(\"4 1\\n4 3 5 6\") == 0\n\"\"\"\n\n\"\"\"\n4 1\n4 3 5 6\n11 12 14 20\n\n4 3\n4 3 5 6\n11 12 14 20\n\n4 2\n4 3 5 6\n11 12 14 20\n\n4 3\n4 3 5 6\n11 12 14 20\n\n4 4\n4 3 5 6\n11 12 14 20\n\n4 5\n4 3 5 6\n11 12 14 20\n\n4 6\n4 3 5 6\n11 12 14 20\n\n4 7\n4 3 5 6\n11 12 14 20\n\n4 8\n4 3 5 6\n11 12 14 20\n\n4 9\n4 3 5 6\n11 12 14 20\n\n4 10\n4 3 5 6\n11 12 14 20\n\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1000000000\\n1\\n1000000000\\n\") == \"2000000000\"\nassert solution(\"10 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1 1 1 1 1 1 1 1 1 1 1\\n\") == \"0\"\nassert solution(\"3 1\\n4 3 5 6\\n11 12 14 20\\n\") == \"4\"\n\"\"\"\n\nn, k = map(int, input().split())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1000000000\\n1\\n1000000000\\n\") == \"2000000000\"\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nmax_cookies = 0\nfor i in range(n):\n    if b[i] // a[i] < k:\n        max_cookies = max(b[i] // a[i], max_cookies)\nprint(max_cookies)\n"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"7 5\") == \"4\"\nassert solution(\"7 1000000000\") == \"7\"\nassert solution(\"7 1000000000 1\") == \"7\"\nassert solution(\"7 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 100"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1000000000\\n1\\n1000000000\\n\") == \"2000000000\"\n\"\"\"\nimport sys\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 5 6\\n11 12 14 20') == '3'\nassert solution('10 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n1 1 1 1 1 1 1 1 1 1 1') == '0'\nassert solution('3 1\\n4 3 5 6\\n11 12 14 20') == '4'\nassert solution('4 3\\n4 3 5 6\\n11 12 14 20') == '3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1''') == '1'\nassert solution('''11''') == '11'\nassert solution('''111''') == '11'\nassert solution('''123''') == '123'\nassert solution('''113337''') == '113337'\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n\n-----Problem-----\nhttps://www.hackerrank.com/challenges/three-series/problem\n'''\n\nfrom itertools import permutations\n\nn = int(input())\n\nperms = set()\n\nfor i in range(1, n + 1):\n    perms.update(set(map(int, map(''.join, permutations('1337', i)))))\n\nfor i in range(1, 10**5 + 1):\n    if i not in perms:\n        print(i)\n        break\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n6') == '1337'\nassert solution('5\\n9') == '1337'\n\"\"\""
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1\") == \"113337\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1') == '113337'\nassert solution('1\\n10') == '1337'\nassert solution('1\\n3') == '1337'\nassert solution('3\\n3') == '1337'\nassert solution('3\\n7') == '1337'\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n6\") == \"1337\"\nassert solution(\"3\\n1\") == \"337133377\"\nassert solution(\"2\\n5\") == \"1337\"\nassert solution(\"2\\n7\") == \"1337\"\n\"\"\"\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '11'\nassert solution('2') == '13'\nassert solution('3') == '1'\nassert solution('4') == '3'\nassert solution('5') == '7'\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n1') == '13'\nassert solution('6\\n1') == '113337'\n\"\"\""
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1') == '133'\nassert solution('5\\n2') == '3337'\nassert solution('6\\n3') == '3337'\nassert solution('7\\n4') == '3337'\nassert solution('8\\n5') == '3337'\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '11'\nassert solution('2') == '22'\nassert solution('3') == '33'\nassert solution('4') == '44'\nassert solution('5') == '55'\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == \"11\"\nassert solution(\"10\") == \"1001\"\nassert solution(\"1\") == \"11\"\nassert solution(\"15\") == \"2222\"\nassert solution(\"17\") == \"222222\"\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '11'\nassert solution('10001') == '1001'\n\"\"\"\nimport math\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"11\"\nassert solution(\"2\") == \"22\"\nassert solution(\"3\") == \"33\"\nassert solution(\"4\") == \"44\"\nassert solution(\"5\") == \"55\"\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '11'\nassert solution('2') == '22'\nassert solution('3') == '33'\nassert solution('4') == '44'\nassert solution('5') == '55'\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(112)) == \"112\"\nassert solution(str(11)) == \"11\"\nassert solution(str(123)) == \"11\"\nassert solution(str(1001)) == \"1001\"\nassert solution(str(1111)) == \"1111\"\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"1001\"\n\"\"\"\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"11\"\nassert solution(\"10\") == \"1001\"\nassert solution(\"5\") == \"100101\"\nassert solution(\"6\") == \"1001101\"\nassert solution(\"7\") == \"1111\"\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '11'\n\nsolution(1) == 11\nsolution(10) == 1001\nsolution('11') == '22'\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"11\"\nassert solution(\"10\") == \"1001\"\nassert solution(\"1021\") == \"122221\"\nassert solution(\"1022\") == \"112\"\nassert solution(\"1023\") == \"1233\"\n"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n><\\n1 2') == 'FINITE'\nassert solution('3\\n>><\\n2 1 1') == 'INFINITE'\n\"\"\""
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n><\\n1 2\") == 'FINITE'\nassert solution(\"3\\n>><\\n2 1 1\") == 'INFINITE'\nassert solution(\"2\\n><\\n1 2\") == 'FINITE'\nassert solution(\"3\\n>><\\n2 1 1\") == 'INFINITE'\nassert solution(\"4\\n<<\\n1 3 3 2 1\") == 'FINITE'\n\"\"\"\n"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n><\\n1 2\") == \"FINITE\"\nassert solution(\"3\\n>><\\n2 1 1\") == \"INFINITE\"\nassert solution(\"1\\n>\\n1\") == \"INFINITE\"\n\n\"\"\"\n"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n>><\\n2 1 1\") == \"INFINITE\"\nassert solution(\"2\\n><\\n1 2\") == \"FINITE\"\n"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\">\") == \"FINITE\"\n\"\"\""
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2\n><\n1 2\n''') == 'FINITE'\nassert solution('''\n3\n>><\n2 1 1\n''') == 'INFINITE'\nassert solution('''\n5\n>>>>\n1 2 3 4 5\n''') == 'INFINITE'\nassert solution('''\n2\n><\n1 2\n''') == 'FINITE'\nassert solution('''\n5\n>>><<<\n1 2 3 4 5\n''') == 'INFINITE'"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n>><\\n1 2\") == \"FINITE\"\nassert solution(\"3\\n>><\\n2 1 1\") == \"INFINITE\"\n\"\"\""
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n>><\\n1 2') == 'FINITE'\nassert solution('3\\n>><\\n2 1 1') == 'INFINITE'\n\"\"\"\n"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n>><\\n1 2 1\\n\") == \"INFINITE\"\nassert solution(\"2\\n><\\n1 2\\n\") == \"FINITE\"\nassert solution(\"1\\n>><\\n1\\n\") == \"FINITE\"\nassert solution(\"2\\n><\\n3 1\\n\") == \"INFINITE\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n><\\n1 2\") == \"FINITE\"\n\"\"\""
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"11010111\"\n) == 4\nassert solution(\n
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('0') == 1\nassert solution('1') == 1\nassert solution('110') == 2\nassert solution('1110') == 3\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11010111\") == \"4\"\nassert solution(\"111\") == \"0\"\nassert solution(\"1111\") == \"0\"\nassert solution
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11010111') == '4'\nassert solution('1111') == '0'\nassert solution('111111') == '0'\nassert solution('1') == '0'\nassert solution('10000000') == '0'\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11010111\") == 4\nassert solution(\"111\") == 0\nassert solution(\"111111\") == 5\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11010111\") == 4\nassert solution(\"111\") == 0\n\nprint(solution(\"11010111\"))\nprint(solution(\"111\"))\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11010111') == 4\nassert solution('111') == 0\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11010111\") == 4\nassert solution(\"1101010\") == 0\nassert solution(\"11101110\") == 4\nassert solution(\"1110111\") == 6\n\"\"\"\n\nimport re\nfrom typing import List, Dict, Tuple\nfrom collections import Counter\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1110111\") == 4\nassert solution(\"101\") == 1\nassert solution
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11010111') == '4'\nassert solution('111') == '0'\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('R') == 'ilyouneedislove'\n\"\"\"\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"R\", \"s;;upimrrfod;pbr\") == \"allyouneedislove\"\n\nassert solution(\"R\", \"s;;upimrrfod;pbr\")!= \"allyouneedislike\"\n\nassert solution(\"L\", \"s;;upimrrfod;pbr\") == \"back\"\n\nassert solution(\"L\", \"s;;upimrrfod;pbr\")!= \"allyouneedislove\"\n\n\"\"\""
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('R\\ns;;upimrrfod;pbr') == 'allyouneedislove'\n\n\"\"\"\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"R\", \"s;;upimrrfod;pbr\") == \"allyouneedislove\"\n\"\"\"\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('R') == 'huhu'\nassert solution('L') == 'llol'\nassert solution('LRRLLRRLLLRRLLRRLLLLLLRRLLLLLLRLRRLLLLRRRRRLLRL') == 'huuuhhuhuhuhuhuhu'\nassert solution('LLL') == 'yty'\n\"\"\"\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"R\", \"s;;upimrrfod;pbr\") == \"allyouneedislove\"\n\"\"\"\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('R') == 'eitn'\n\"\"\"\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('R','s;;upimrrfod;pbr') == 'allyouneedislove'\nassert solution('L','s;;upimrrfod;pbr') == 'youneedislove'\n\"\"\"\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"R\"\n\"s;;upimrrfod;pbr\"\n) == \"allyouneedislove\"\nprint(\"Tests passed.\")\n-----\n\nInput\nL\nh;o\n\nOutput\nhio\n"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('R\\ns;;upimrrfod;pbr') == 'allyouneedislove'\nassert solution('R\\n.;upimrrfod;pbr') == 'allyouneedislove'\nassert solution('L\\ns;;upimrrfod;pbr') == 'allyouneedislove'\nassert solution('R\\n.;upimrrfod;pbr') == 'allyouneedislove'\nassert solution('R\\nL;upimrrfod;pbr') == 'allyouneedislove'\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 3 2 1\") == \"1 1 3 4 4\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nb = list(map(int, stdin.readline().split()))\nb.sort()\n\nanswer = [b[0]]\nfor i in range(m):\n    if i == 0 or b[i] > answer[-1]:\n        answer.append(b[i])\n\nprint(*answer)\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 1 2\") == \"1 1 3 4 4\"\nassert solution(\"5 4 3 2 1\") == \"1 2 3 4 5\"\n\n\n\n-----Debug-----"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n4 3 1 2\") == \"1 1 3 4 4\"\n\n\"\"\"\n\nn, m = [int(x) for x in stdin.readline().strip().split(\" \")]\na = [int(x) for x in stdin.readline().strip().split(\" \")]\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 1 2') == '1 1 3 4 4'\n\"\"\"\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n4 3 1 2') == '1 2 3 4 4'\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n4 3 1 2\") == \"1 1 3 4 4\"\nassert solution(\"5 5\\n5 4 3 2 1\") == \"1 2 3 4 5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 3 2 1\") == \"1 1 3 4 4\"\nassert solution(\"5 5 4 3 2 1\") == \"1 2 3 4 5\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nres = []\nfor i in range(m):\n    if b[i] <= n:\n        res.append(b[i])\n\nprint(\" \".join([str(x) for x in res]))\n"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n4 3 1 2') == '1 1 3 4 4'\n\"\"\""
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n4 3 1 2\") == \"1 1 3 4 4\"\nassert solution(\"5 5\\n5 4 3 2 1\") == \"1 2 3 4 5\""
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n4 3 1 2') == '1 1 3 4 4'\n\"\"\"\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n-1 1 2\") == \"1\"\nassert solution(\"2 3\\n-2 -2\") == \"2\"\nassert solution(\"1 1\\n2\") == \"2\"\nassert solution(\"1 1\\n0\") == \"0\"\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n-1 1 2\") == '1'\nassert solution(\"2 3\\n-2 -2\") == '2'\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n-1 1 2') == '1'\nassert solution('2 3\\n-2 -2') == '2'\n\"\"\"\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n-2 -2\") == \"2\"\nassert solution(\"1 1\\n-1 -1\") == \"0\"\nassert solution(\"1 1\\n1 1\") == \"0\"\nassert solution(\"1 1\\n0 1\") == \"1\"\nassert solution(\"1 1\\n1 1\") == \"0\"\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n-2 -2\") == \"2\"\nassert solution(\"3 2\\n-1 1 2\") == \"1\"\nassert solution(\"2 3\\n1 1 -3\") == \"1\"\nassert solution(\"2 3\\n-1 1 1\") == \"0\"\nassert solution(\"2 3\\n-1 1 -1\") == \"1\"\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 -2\") == \"2\"\nassert solution(\"1 2 -2 3\") == \"2\"\nassert solution(\"1 2 3 -1 -2 3\") == \"3\"\nassert solution(\"1 2 3 -1 -2 3 4 -3 -2\") == \"3\"\n\nprint(\"Passed!\")\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n-2 -2') == '2'\n\"\"\""
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n-2 -2') == '2'\nassert solution('1 1\\n1 1') == '0'\n\"\"\"\n\nfrom itertools import combinations\n\nn, x = map(int, input().split())\nnum = list(map(int, input().split()))"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('3 2') == '1'\nassert solution('2 3') == '2'\nassert solution('1 1') == '0'\nassert solution('2 3\\n-2 -2') == '2'\n"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n-1 1 2') == '1'\nassert solution('2 3\\n-2 -2') == '2'\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2') == '1 2 3'\nassert solution('4 1') == '1 2 3'\nassert solution('3 1') == '1 2 3'\nassert solution('4 3') == '1 3'\nassert solution('5 2') == '1 2 3 4'\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"3\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 1\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '3'\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"3\"\nassert solution(\"3 2\") == \"-1\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"5 2\") == \"2\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n2 3\\n3 1') == '3'\n\nassert solution('2 2\\n1 1\\n3 1') == '-1'\n\n\"\"\"\n\nfrom collections import defaultdict\n\nn, k = list(map(int, input().split()))\n\nteams = defaultdict(set)\n\nfor _ in range(n - 1):\n    a, b = list(map(int, input().split()))\n    teams[a].add(b)\n    teams[b].add(a)\n\nfor _ in range(k):\n    c, d = list(map(int, input().split()))\n    if c in teams and d in teams and len(teams[c].intersection(teams[d])) >= 1:\n        print(1)\n    else:\n        print(-1)\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"3\\n1 2\\n2 3\\n3 1\"\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n1 2\\n2 3\\n3 1') == '3\\n1 2\\n2 3\\n3 1'\n\n\"\"\"\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"1 2\\n2 1\\n2 1\"\nassert solution(\"3 2\") == \"1 2\\n2 1\\n3 1\\n2 2\\n3 1\\n3 1\\n2 2\\n3 1\\n2 2\\n3 1\\n2 2\\n3 1\"\nassert solution(\"2 2\") == \"2 2\\n2 1\\n2 1\"\nassert solution(\"3 3\") == \"1 2\\n2 1\\n3 1\\n2 2\\n3 1\\n3 1\\n2 2\\n3 1\\n2 2\\n3 1\\n3 1\\n2 2\\n3 1\\n3 1\\n2 2\\n3 1\\n3 1\\n2 2\\n3 1\\n2 2\\n3 1\"\nassert solution(\"3 2\") == \"1 2\\n2 1\\n2 1\\n3 1\\n2 2\\n3 1\\n3 1\\n2 2\\n3 1\\n3 1\\n2 2\\n3 1\\n2 2\\n3 1\"\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"3\\n1 2\\n2 3\\n3 1\""
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == '3\\n1 2\\n2 3\\n3 1'\nassert solution('5 2') == '-1'\nassert solution('5 3') == '-1'\nassert solution('2 1') == '-1'\nassert solution('4 4') == '-1'\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 1 2') == '0.666666666667'\n\"\"\"\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2\") == \"0.666666666667\"\n\"\"\"\n\n\"\"\"\nThe solution is equivalent to the solution of problem: https://www.hackerrank.com/challenges/fair-rations/problem\n\"\"\"\nimport math\n\na, b, c, d = list(map(int, input().split()))"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 2\") == \"0.666666666667\"\n\"\"\"\n\nimport sys\n\na, b, c, d = map(int, sys.stdin.readline().strip().split())\np1 = a / b\np2 = c / d\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 2\") == 0.6666666666666\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 2\") == \"0.6666666666666667\"\n\"\"\"\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 1 2') == '0.666666666667'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 2\") == \"0.666666666667\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1 2') == '0.666666666667'\n\"\"\"\n\nimport re\nimport math"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 1 1') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 2\") == \"0.666666666667\"\nassert solution(\"3 2 4 1\") == \"0.25\"\nassert solution(\"100 2 1 1\") == \"0.11111111111111111111111111111112\"\nassert solution(\"1000 1001 1000 1001\") == \"0.5\"\nassert solution(\"0 0 0 0\") == \"0.0\"\n"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10 100\") == \"4\"\nassert solution(\"3 70 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n100 10 1 0\") == \"4\\n0 1 10 100\"\nassert solution(\"3\\n2 70 3\") == \"2\\n2 70\"\n"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n100 10 1 0\") == \"4\\n0 1 10 100\"\nassert solution(\"3\\n2 70 3\") == \"2\\n2 70\"\nassert solution(\"4\\n2 70 3\") == \"4\\n2 70 3\"\nassert solution(\"3\\n2 70 3\") == \"2\\n2 70 3\""
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n100 10 1 0') == '4\\n0 1 10 100'\n\"\"\"\n\nk = int(input())\narr = list(map(int, input().split()))"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n100 10 1 0\") == 4\n\"\"\""
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n100 10 1 0\") == \"4\\n0 1 10 100\"\nassert solution(\"3\\n2 70 3\") == \"2\\n2 70\"\n\"\"\"\n\nimport itertools\nimport math"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n100 10 1 0\") == \"4\\n0 1 10 100\"\nassert solution(\"3\\n2 70 3\") == \"2\\n2 70\"\n"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n100 10 1 0\") == 4\nassert solution(\"3\\n2 70 3\") == 2\n\nprint(solution(\"4\\n100 10 1 0\"))\nprint(solution(\"3\\n2 70 3\"))\n"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n100 10 1 0\n''') == '4\\n0 1 10 100'\n\"\"\""
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n100 10 1 0') == '4'\nassert solution('3\\n2 70 3') == '2'\nprint(\"Tests passed.\")\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"01010\") == \"3\"\nassert solution(\"111111110\") == \"0\"\nassert solution(\"101\") == \"1\"\nassert solution(\"1010\") == \"0\"\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"010\") == 1\nassert solution(\"101010\") == 3\nassert solution(\"10101010\") == 6\nassert solution(\"1010101010\") == 9\nassert solution(\"101010101010\") == 12\n\n\"\"\"\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"0101010\") == \"3\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"010\") == \"1\"\nassert solution(\"010\") == \"1\"\nassert solution(\"010\") == \"1\"\nassert solution(\"010\") == \"1\""
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"0101010\") == \"3\"\nassert solution(\"010\") == \"1\"\nassert solution(\"0101010\") == \"3\"\nassert solution(\"010\") == \"1\"\n"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('010') == '1'\nassert solution('01010') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('010') == '1'\nassert solution('01010') == '3'\nassert solution('101010') == '9'\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/529/A\n\n\u041a\u0430\u043a\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u0434\u0440\u044f\u0434 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0443\u044e\u0441\u044f \u0446\u0438\u0444\u0440\u0443?\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e N  (1\u2264N\u2264100) \u2014 \u0434\u043b\u0438\u043d\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f N \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b: \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0430 \u043b\u0438\u043d\u0438\u0438 1, \u043b\u0438\u043d\u0438\u044f 2, \u043b\u0438\u043d\u0438\u044f 3 \u0438 \u0442.\u0434. \u0438 \u043f\u043e\u0438\u0441\u043a \u0434\u0432\u0443\u0445 \u0438 \u0431\u043e\u043b\u0435\u0435 \u0447\u0438\u0441\u0435\u043b \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u0441 \u0432\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.\n\n\u041f\u0435\u0440\u0432\u044b\u0439 \u0438\u0437 \u0442\u0430\u043a\u0438\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0438\u0444\u0440\u044b \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0435\u043c \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u0438 \u0442\u0440\u0435\u0442\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0438\u0449\u0443\u0442 \u0446\u0438\u0444\u0440\u044b \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0435\u043c \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u041f\u0435\u0440\u0432\u044b\u0439 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0434\u0432\u0430 \u0440\u0430\u0437\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c, \u043a\u043e\u0433\u0434\u0430 \u0437\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u043a \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0447\u0435\u0442\u044b\u0440\u0451\u0445 \u043b\u0438\u043d\u0438\u0439 \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0435\u043c \u0446\u0438\u0444\u0440\u044b.\n\n\u0412\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u0442\u0440\u0438 \u0440\u0430\u0437\u0430 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434.\n\n\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u044d\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u0432\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430.\n\nSample Input 1:\n\n8\n4 1 7 6 5 3 2 9\n\nSample Output 1:\n\n2\n\nSample Input 2:\n\n9\n1 2 3 4 5 6 7 8 9\n\nSample Output 2:\n\n8\n\nSample Input 3:\n\n3 3\n1 1 1\n\nSample Output 3:\n\n0\n\nSample Input 4:\n\n9\n4 1 7 6 5 3 2 9 1\n\nSample Output 4:\n\n2\n\nSample Input 5:\n\n9\n9 9 9 9 9 9 9 9\n\nSample Output 5:\n\n0\n\nSample Input 6:\n\n5\n2 2 2 2 2\n\nSample Output 6:\n\n2\n\n\"\"\"\n\nimport sys\nimport queue"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('010') == '1'\nassert solution('0101010') == '3'\n\"\"\""
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"010\") == 1\nassert solution(\"01010\") == 3\nassert solution(\"101010\") == 5\n\"\"\""
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"010\") == \"1\"\nassert solution(\"01010\") == \"1\"\nassert solution(\"0101010\") == \"1\"\nassert solution(\"01010\") == \"1\"\nassert solution(\"01010\") == \"1\"\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\\n3 0\\n7 2 3\\n3 0 2 1 3 0 1\") == \"No\"\nassert solution(\"2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\\n3 0\\n7 2 3\\n3 0 2 1 3 0 1\") == \"Yes\"\n\"\"\"\n\nimport sys\n\ntest_cases = int(sys.stdin.readline().rstrip())\nfor i in range(test_cases):\n    n, k, l, *depth = list(map(int, sys.stdin.readline().rstrip().split()))\n    if sum(depth) > 100:\n        print(\"No\")\n    else:\n        depths = depth\n        for t in range(k):\n            for i in range(n):\n                depths[i] += (depths[i] + t) % 2\n        if depths[n] <= l:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0\\n2 1 1\") == \"No\"\nassert solution(\"4 3 4\\n1 2 3 2 2\") == \"Yes\"\nassert solution(\"7 2 3\\n3 0 2 1 3 0 1\") == \"Yes\"\nassert solution(\"7 1 4\\n4 4 3 0 2 4 2\") == \"No\"\n\n\n-----Problem-----\n\nVasya is very fond of geography. One day, on a trip to a river bank, he wondered if it is possible to build a bridge over the river. The bridge must be built on level ground and can't be higher than the water in the river.\n\nSo, Vasya decided to explore the river and measure the depth of the water at all places on the river. The measurements are taken as $1, 2, \\ldots, n$ meters from the beginning, at the end of the measurement the river is at $n+1$ meters from the beginning.\n\nThe river is flowing in the opposite direction, so Vasya will see the depth of water at every level $i$ ($0 \\le i \\le n$) in the following way:\n\nAt time $t = 0$ (all $t$) the depth of the river is 0 (zero) at every level.\n\nThe next second Vasya measures the depth of the water at every level. He takes one measurement at every level, starting from $i = 1$ to $i = n$ and takes measurements as long as he's on level ground.\n\nThe second measurement is at $i = n+1$: for $1 \\le i \\le n$ the depth is $d_i$, for $i = n+1$ the depth is less or equal to $d_i + 1$ (the measurement was unsuccessful).\n\nVasya decided to build a bridge and connect the level ground ($i = 1$ to $i = n$) to the water ($i = n+1$). This will cost Vasya $m$ dollars. The bridge will have the length of at most $2m$ meters.\n\nVasya wants to know how much money he"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\") == \"No\"\nassert solution(\"1 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\") == \"Yes\"\nassert solution(\"7 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\") == \"No\"\nassert solution(\"7 1 4\\n4 4 3 0 2 4 2\\n5 2 3\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_stdin_1) == 'Yes'\nassert solution(test_stdin_2) == 'No'\nassert solution(test_stdin_3) == 'Yes'\nassert solution(test_stdin_4) == 'Yes'\nassert solution(test_stdin_5) == 'No'\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == \"No\"\nassert solution(\"1 0\") == \"Yes\"\nassert solution(\"5 2 3\") == \"Yes\"\nassert solution(\"1 2 3 2 2\") == \"No\"\nassert solution(\"4 3 4\") == \"No\"\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\") == \"No\"\nassert solution(\"7\\n2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\") == \"No\"\nassert solution(\"7\\n2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\") == \"No\"\nassert solution(\"7\\n2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\") == \"No\"\nassert solution(\"7\\n2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\") == \"No\"\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    2 1 1\n    1 0\n    5 2 3\n    1 2 3 2 2\n    4 3 4\n    0 2 4 3\n    2 3 5\n    3 0\n    7 2 3\n    3 0 2 1 3 0 1\n    7 1 4\n    4 4 3 0 2 4 2\n    5 2 3\n    1 2 3 2 2\n    \"\"\") == \"Yes\\nNo\\nYes\\nYes\\nYes\\nNo\\nNo\"\n\nassert solution(\n    \"\"\"\n    7 1 4\n    4 4 3 0 2 4 2\n    5 2 3\n    1 2 3 2 2\n    \"\"\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\") == 'Yes'\nassert solution(\"7\\n2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\") == 'No'\nassert solution(\"7\\n2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\") == 'Yes'\nassert solution(\"7\\n2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\") == 'No'"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == expected_result\n\"\"\"\n"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 3\") == \"No\"\nassert solution(\"3 1 3\") == \"Yes\"\nassert solution(\"2 1 3\") == \"No\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5 0 5 0') == '0'\nassert solution('11\\n5 5 5 5 5 5 5 5 0 5 5') == '5555555550'\n\"\"\"\n\nn = int(input())\ncards = list(map(int, input().split()))\n\nmax_number = 0\n\nfor i in range(n):\n    if cards[i] == 0:\n        continue\n    curr = 0\n    for j in range(i, n):\n        if cards[j] == 0:\n            continue\n        curr += cards[j] * (10 ** (j - i))\n        max_number = max(curr, max_number)\n        if max_number % 90 == 0:\n            break\n    if max_number % 90 == 0:\n        break"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 0 5 0\") == \"0\"\nassert solution(\"11\\n5 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5 0 5 0\") == \"0\"\nassert solution(\"11\\n5 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5 0 5 0') == '0'\nassert solution('11\\n5 5 5 5 5 5 5 5 0 5 5') == '5555555550'"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5 0 5 0') == '0'\nassert solution('11\\n5 5 5 5 5 5 5 5 0 5 5') == '5555555550'\n\"\"\"\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"4\n5 0 5 0\"\"\") == '0'\nassert solution(\"\"\"11\n5 5 5 5 5 5 5 5 5 0 5 5\"\"\") == '5555555550'\n\"\"\"\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5 0 5 0\") == \"0\"\nassert solution(\"11\\n5 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\nassert solution(\"4\\n0 0 0 0\") == \"-\"\nassert solution(\"4\\n1 1 1 1\") == \"-1\"\nassert solution(\"4\\n5 5 5 5\") == \"5555555550\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5 0 5 0') == '0'\nassert solution('11\\n5 5 5 5 5 5 5 5 0 5 5') == '5555555550'\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5 0 5 0\") == \"0\"\nassert solution(\"11\\n5 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"3\\n5 5 5 5\") == \"55555\"\nassert solution(\"4\\n0\") == \"0\"\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5 0 5 0\") == \"0\"\nassert solution(\"11\\n5 5 5 5 5 5 5 5 0 5 5\") == \"5555555550\"\nassert solution(\"0\\n0\") == \"0\"\nassert solution(\"3\\n5 5 5 5 5 5 5 5 5 5 5\") == \"999999999\""
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 38\") == 10\nassert solution(\"5 21\") == 6\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 38\\n5 2 5\") == \"10\"\nassert solution(\"5 21\\n2 4 100 2 6\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 38\") == 10\nassert solution(\"5 21\") == 6\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 38\\n5 2 5\") == \"10\"\nassert solution(\"5 21\\n2 4 100 2 6\") == \"6\"\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 38\\n5 2 5') == '10'\nassert solution('5 21\\n2 4 100 2 6') == '6'\nassert solution('1 1\\n1') == '1'\nassert solution('10 10\\n1 2 3 4 5 6 7 8 9 10') == '10'\nassert solution('5 10\\n1 1 1 1 1 1 1') == '0'\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 38\") == \"10\"\nassert solution(\"5 21\") == \"6\"\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 38') == '10'\nassert solution('5 21') == '6'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 38\\n5 2 5\") == 10\n\"\"\"\n\nn, T = (int(i) for i in input().split())\nprices = [int(i) for i in input().split()]\n\ncandy = 0\nT = T\nwhile T > 0 and len(prices) > 0:\n    for i in range(len(prices)):\n        if T >= prices[i]:\n            candy += 1\n            T -= prices[i]\n            prices.pop(i)\n            break\nprint(candy)\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 5\\n2 4 100 2 6\") == \"10\"\nassert solution(\"5 21\\n2 4 100 2 6\") == \"6\"\nassert solution(\"5 1 5\\n1 1 100 2 6\") == \"10\"\nassert solution(\"5 21\\n1 1 100 2 6\") == \"10\""
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5 21\n2 4 100 2 6\n\"\"\") == \"6\"\n\nassert solution(\n\"\"\"\n3 38\n5 2 5\n\"\"\"\n) == \"10\"\nassert solution(\n\"\"\"\n5 21\n2 4 100 2 6\n\"\"\"\n) == \"6\"\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1 1\\n2 2 2\\n3 3 1\\n2 2 2\\n2 2 2\\n1 2 2\\n2 2 2\") == \"0 0\"\nassert solution(\"4 1 1\\n2 2 2\\n3 3 1\\n3 1 3\\n3 1 3\\n1 1 1\") == \"5 2\"\nassert solution(\"5 1 1\\n2 2 2\\n3 3 1\\n3 1 3\\n1 1 1\\n1 1 1\") == \"0 0\"\nassert solution(\"10 1 1\\n2 2 2\\n3 3 1\\n3 1 3\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"5 9\"\nassert solution(\"10 2 1\\n1 2 2\\n2 2 2\\n2 2 2\\n1 2 2\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2\") == \"0 0\"\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 1 1\\n2 2 1\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\\n2 2 2\\n2 2 2') == '0 0'\nassert solution('10 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2') == '1 9'\nassert solution('10 3 1\\n1 1 1\\n1 2 2\\n1 3 3\\n2 2 1\\n2 2 1\\n2 2 1\\n2 2 1\\n2 3 3\\n3 1 1\\n3 2 2\\n3 3 3') == '5 2'\nassert solution('6 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2\\n2 2 2') == '0 0'\nassert solution('5 1 1\\n1 2 2\\n2 2 2\\n2 2 2\\n1 2 2\\n2 2 2\\n2 2 2\\n1 2 2\\n2 2 2\\n2 2 2') == '0 0'\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2\") == '1 9'\nassert solution(\"8 1 1\\n2 2 1\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\") == '5 2'"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == solution_\n\n------Solution------\n\n\"\"\""
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2\\n\") == '1 9'\nassert solution(\"8 1 1\\n2 2 1\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\\n\") == '0 0'\n\"\"\"\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2\") == '1 9'\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10 ** 6)\n\ninput_lines = [line.strip() for line in sys.stdin.readlines()]\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n2 2 2\\n2 2 2\\n2 2 2') == '1 9'\nassert solution('8 1 1\\n2 2 1\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3') == '5 2'\nassert solution('5 1 1\\n1 2 2\\n2 2 2\\n2 2 2\\n1 2 2') == '0 0'\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 1 1\\n2 2 1\\n3 1 3\\n3 1 3\\n1 2 3\\n2 2 3\\n2 2 3\\n2 2 3\") == '1 9'\n"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == '1 9'\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 1 1\\n2 2 1\\n3 3 1\\n3 1 3\\n1 1 1\\n2 1 1\\n1 2 3\\n\") == \"5 2\"\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n1 0\") == \"0 1\"\nassert solution(\"1 2\\n1 0\") == \"0 1\"\nassert solution(\"1 2\\n2 2\") == \"0 0\"\nassert solution(\"2 2\\n0 1 2\") == \"0 2 1\"\nassert solution(\"2 2\\n0 1 1\") == \"0 1 0\"\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n-199 192\\n5 19\\n5 -1 4 2 0\\n1 2\\n69') == '391 0\\n0 6 1 3 5\\n0'\nprint(solution('2 1\\n-199 192\\n5 19\\n5 -1 4 2 0\\n1 2\\n69'))\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1\\n-199 192') == '391 0'\n\nassert solution('3 1\\n5 19') == '0 6 1 3 5'\nassert solution('3 1\\n5 -1 4 2 0') == '0 6 1 3 5'\nassert solution('3 1\\n69') == '0'\nassert solution('2 1\\n-199 192') == '391 0'\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n-199 192\") == \"391 0\"\nassert solution(\"5 19\\n5 -1 4 2 0\") == \"0 6 1 3 5\"\nassert solution(\"5 -1 4 2 0\") == \"0 6 1 3 5\"\n\"\"\"\n\n\"\"\"\nThe idea is to do operations on all the elements of the array.\n\nWe can iterate through each element of the array and for every element we calculate:\n\nd = max(a)\n\nWe can then iterate through the array again and we calculate:\n\na[i] = d-a[i]\n\nThis means we can simply iterate through the array and do operations.\n\nComplexity\n\nTime complexity: O(n*k). Iterating through the array for each element will take O(n) time.\n\nSpace complexity: O(n). The additional space comes from the modified array.\n\"\"\""
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"199 192\") == \"391 0\"\n\"\"\"\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n-199 192\") == \"391 0\"\nassert solution(\"5 19\\n5 -1 4 2 0\") == \"0 6 1 3 5\"\n\"\"\"\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-1 1\\n1 1') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n-199 192\") == \"391 0\"\nassert solution(\"5 19\\n5 -1 4 2 0\") == \"0 6 1 3 5\"\nassert solution(\"5 -1 4 2 0\\n5\") == \"0 6 1 3 5\"\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(['2 1', '-199 192']) == ['391 0']\n\"\"\"\n"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 19\\n5 -1 4 2 0\\n1 2\\n69\") == \"0 6 1 3 5\"\n"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 3\n3 5 7 1 6 2 8\n1 2 7\n''') == '7 1 2'\n\nassert solution('''4 4\n3 4 1 0\n0 1 7 9\n''') == '1 0'\n"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3\\n1 2 7\\n1 2 7') == '7 1 2'\nassert solution('4 4\\n3 4 1 0\\n0 1 7 9') == '1 0'"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n1 2 7\\n1 2 7\") == \"7 1 2\"\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\") == \"1 0\""
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 1 0\\n0 1 7 9') == '1 0'\nassert solution('4 4\\n3 4 1 0\\n0 1 7 9') == '1 0'\nassert solution('7 4\\n3 4 1 0\\n0 1 7 9') == '7 1 2'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '123'\nassert solution('1 2 3 4') == '1234'\nassert solution('1 2 3 4 5') == '1234'\nassert solution('1 2 3 4 5 6') == '12345'\n"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\") == \"1 0\"\n\"\"\"\n\nimport math\n\nimport sys"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3\\n3 5 7 1 6 2 8\\n1 2 7') == '7 1 2'\nassert solution('4 4\\n3 4 1 0\\n0 1 7 9') == '1 0'\n\n\n\n------"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3\\n3 5 7 1 6 2 8\\n1 2 7\\n') == '7 1 2'\nassert solution('4 4\\n3 4 1 0\\n0 1 7 9\\n') == '1 0'"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n3 5 7 1 6 2 8\\n1 2 7\\n\") == \"7 1 2\"\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\\n\") == \"1 0\"\nassert solution(\"4 4\\n3 4 1 0\\n0 1 7 9\\n\") == \"1 0\"\n\"\"\"\n\nfrom collections import Counter\nimport numpy as np\n"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n3 4 1 0\\n0 1 7 9') == '1 0'\nassert solution('4 4\\n3 4 1 0\\n0 1 7 9') == '1 0'\n\nassert solution('7 4\\n3 4 1 0\\n0 1 7 9') == '1 0'\nassert solution('7 7\\n3 4 1 0\\n0 1 7 9') == '1 0'\n\nassert solution('7 8\\n3 4 1 0\\n0 1 7 9') == '1 2'\n"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 0\n\"\"\"\n\nimport math"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 0\nassert solution('3') == 1\nassert solution('9') == 49\n\"\"\"\n\nfrom math import ceil, log\nfrom typing import List, Optional\n\nfrom icontract import require, ensure\n"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\n\"\"\"\n"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\n"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"3\") == 1\n\"\"\""
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('5') == '1'\nassert solution('5') == '1'\nassert solution('5') == '1'\nassert solution('5') == '1'"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 0\nassert solution('3') == 1\nassert solution('99') == 49\n\"\"\"\n\nN = int(input())\nprint(N // 2)\n"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 1\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('99') == '49'\n\n\n-----Big O-----\n\nTime complexity : O(NlogN)\nSpace complexity: O(1)"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('3') == 1\nassert solution('99') == 49\n\"\"\""
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('+-??') == '0.5'\nassert solution('+-???') == '0.0'\nassert solution('?++??') == '0.0'\n"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+-??\") == \"0.5\"\n\n\"\"\""
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+-??\") == '0.5'\nassert solution(\"+-???\") == '0.5'\nassert solution(\"+++\") == '0.0'\nassert solution(\"??-\") == '1.0'\n\n\"\"\"\n\n\n\nimport ast\nimport astunparse\n"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"++-\") == \"0.5\"\nassert solution(\"---\") == \"0.0\"\nassert solution(\"-???\") == \"0.5\"\nassert solution(\"+???+???\") == \"0.333333333333\"\nassert solution(\"?+??\") == \"0.66666666667\"\n\nprint(solution(stdin))"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+-??\") == \"0.5\"\nassert solution(\"+++\") == \"0.000000000000\"\nassert solution(\"??-\") == \"0.0\"\n\n\"\"\"\n\nfrom collections import Counter\nimport re\nfrom decimal import *"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"++++\") == \"0.5\"\nassert solution(\"??-\") == \"0.5\"\nassert solution(\"++++??-\") == \"0.5\"\nassert solution(\"??-??\") == \"0.5\"\nassert solution(\"?-???\") == \"0.5\"\n"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"-+-+\") == \"1.0\"\nassert solution(\"-??\") == \"0.5\"\nassert solution(\"???\") == \"0.0\"\nassert solution(\"+???\") == \"0.0\"\nassert solution(\"???+\") == \"0.5\"\n"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"++-\") == \"0.5\"\nassert solution(\"-???\") == \"0.5\"\nassert solution(\"????\") == \"0.0\"\nassert solution(\"??-\") == \"0.5\"\n\n\"\"\"\n\nfrom math import sqrt\n\ns_1 = stdin.split('\\n')[0]\ns_2 = stdin.split('\\n')[1]"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+-\") == \"0.5\"\nassert solution(\"??\") == \"0.0\"\nassert solution(\"???\") == \"0.0\"\nassert solution(\"+??\") == \"0.25\"\nassert solution(\"??+\") == \"0.75\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"++-\") == \"0.5\"\nassert solution(\"--?\") == \"0.5\"\nassert solution(\"+-?\") == \"0.5\"\nassert solution(\"-?-\") == \"0.25\"\nassert solution(\"?+?\") == \"0.5\"\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 3 0 1\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"4\\n0 2 1 1\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 3 0 1\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"4\\n0 2 1 1\") == \"Impossible\"\n\n'''"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 1 3 0 1\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"5\\n2 1 3 0 1\") == \"Impossible\"\n\n\"\"\"\n\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 3 0 1\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"4\\n0 2 1 1\") == \"Impossible\"\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n2 1 3 0 1''') == \"Possible\\n4 5 1 3 2\"\nassert solution('''9\n0 2 3 4 1 1 0 2 2''') == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution('''4\n0 2 1 1''') == \"Impossible\"\nassert solution('''4\n0 2 1 1''') == \"Impossible\"\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 3 0 1') == 'Possible\\n4 5 1 3 2'\nassert solution('9\\n0 2 3 4 1 1 0 2 2') == 'Possible\\n7 5 2 1 6 8 3 4 9'\nassert solution('4\\n0 2 1 1') == 'Impossible'\n\"\"\""
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 3 0 1') == 'Possible\\n4 5 1 3 2'\nassert solution('9\\n0 2 3 4 1 1 0 2 2') == 'Possible\\n7 5 2 1 6 8 3 4 9'\nassert solution('4\\n0 2 1 1') == 'Impossible'\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 3 0 1\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"4\\n0 2 1 1\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 3 0 1\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"4\\n0 2 1 1\") == \"Impossible\"\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 3 0 1\\n\") == \"Possible\\n4 5 1 3 2\"\nassert solution(\"9\\n0 2 3 4 1 1 0 2 2\\n\") == \"Possible\\n7 5 2 1 6 8 3 4 9\"\nassert solution(\"4\\n0 2 1 1\\n\") == \"Impossible\"\n"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == 5.4142135624\n"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"2.0000000000\"\nassert solution(\"2 2\") == \"5.4142135624\"\n"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '2'\nassert solution('2 2') == '5.4142135624'\nassert solution('3 2') == '7.8101162466'\nassert solution('4 2') == '10.329885113'\n"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == 2.0\nassert solution(\"2 2\") == 5.4142135624\n\"\"\"\n\nm, R = map(int, input().split())\n"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '2.0000000000'\nassert solution('2 2') == '5.4142135624'\n\n\"\"\"\n\nimport sys\nfrom math import sqrt, ceil, log\n\nINPUT_LINES = sys.stdin.read().splitlines()\nm, R = map(int, INPUT_LINES[0].split())\n"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('m m\\n1 2\\n') == '0.0'\nassert solution('m 1\\n5 5\\n') == '1.5'\nassert solution('m 3\\n2 2\\n') == '2.0'\nassert solution('m 2\\n3 3\\n') == '2.666666666'\n\n\"\"\""
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 2''') == '''5.4142135624'''\nassert solution('''1 1''') == '''2.0'''"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == 5.4142135624\n\"\"\"\n\nimport math"
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == 2\n\nassert solution('2 2') == 5.4142135624\n\n[End of Output]\n\n-----\n\nInput\n3 7\n\nOutput\n3.95578607079\n\nInput\n5 6\n\nOutput\n3.95578607079\n\"\"\""
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"5.4142135624\"\n\"\"\"\n\nimport math\n\nR, m = list(map(int, input().split()))\n\nx = 2 * R - R\na = 0\nb = 2 * R\nc = m * (2 * R - R)\nd = (m ** 2) * (2 * R - R)\n\nprint(f\"{((b - a) * (d - c) / (a * b * c * d) - math.floor((b - a) * (d - c) / (a * b * c * d)))}\")\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 2 0\") == \"3\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"6 5 6 5 7 4\") == \"6\"\nassert solution(\"5 2 6 5 7 4\") == \"6\"\nassert solution(\"5 2 6 5 7 4\") == \"6\"\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 3 2 0') == '3'\nassert solution('2\\n10 10') == '1'\nassert solution('6\\n5 2 6 5 7 4') == '6'\n\n\n\n\n\"\"\"\n\n\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        return \"\"\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2 1\") == \"3\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"6 5 2 6 5 7 4\") == \"6\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3 0\") == \"3\"\nassert solution(\"2 10\") == \"1\"\nassert solution(\"6 5 2 6 5 7 4\") == \"6\"\nassert solution(\"5 2 6 5 7 4\") == \"6\"\nassert solution(\"5 2 6 5 7 4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 3 2 0''') == '3'\nassert solution('''10 10''') == '1'\nassert solution('''6 5 2 6 5 7 4''') == '6'\nassert solution('''5 2 6 5 7 4''') == '6'\n\nprint(solution(stdin))"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 2 0\") == \"3\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"6 5 2 6 5 7 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 2 0\") == \"3\"\nassert solution(\"2\\n10 10\") == \"1\"\nassert solution(\"6\\n5 2 6 5 7 4\") == \"6\"\nassert solution(\"3\\n7 2 2 1\") == \"2\"\nassert solution(\"6\\n3 2 4 3 6 5\") == \"2\"\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3 0\") == \"3\"\nassert solution(\"2 10\") == \"1\"\nassert solution(\"6 5 2 6 5 7 4\") == \"6\"\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 2 0\") == \"3\"\nassert solution(\"2\\n10 10\") == \"1\"\nassert solution(\"6\\n5 2 6 5 7 4\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 30\\n10 35\\n05:20\") == '5'\nassert solution(\"60 120\\n24 100\\n13:00\") == '9'\n\"\"\"\n\nimport sys\n\ndata = sys.stdin.readlines()\n\nfreq_from_a = int(data[0].split(' ')[0])\nfreq_from_b = int(data[0].split(' ')[1])\ntime_from_a = int(data[0].split(' ')[2])\ntime_from_b = int(data[1].split(' ')[0])\n\nprint(\n    abs(freq_from_a - freq_from_b) * (60 * 60 // (time_from_a + time_from_b))\n)\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 30\\n10 35\\n05:20') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 30\n10 35\n05:20''') == '5'\nassert solution('''60 120\n24 100\n13:00''') == '9'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 30\\n10 35\\n05:20') == '5'\nassert solution('60 120\\n24 100\\n13:00') == '9'\nassert solution('100 130\\n50 80\\n18:00') == '2'\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 30\\n10 35\\n05:20') == '5'\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import List\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 30\\n10 35\\n05:20\\n\") == \"5\"\nassert solution(\"60 120\\n24 100\\n13:00\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 30\\n10 35\\n05:20\") == \"5\"\nassert solution(\"60 120\\n24 100\\n13:00\") == \"9\"\n\"\"\"\n\na, t_a = (int(i) for i in input().split())\nb, t_b = (int(i) for i in input().split())\ndeparture_time = input()\n\nprint(int(a // (t_a + b) + 1))\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 20\\n10 35\\n5 20\\n05:20\") == \"5\"\nassert solution(\"10 30\\n10 35\\n05:20\") == \"9\"\nassert solution(\"60 120\\n24 100\\n13:00\") == \"9\"\n\nprint(\"It is all good. Let's check it now\")"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 30\\n10 35\\n05:20') == '5'\nassert solution('60 120\\n24 100\\n13:00') == '9'\n\"\"\"\n\nimport math\nimport sys\n\ns_a = int(input().split()[0])\nt_a = int(input().split()[0])\ns_b = int(input().split()[0])\nt_b = int(input().split()[0])\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 30\\n10 35\\n05:20\\n') == '5'\nassert solution('60 120\\n24 100\\n13:00\\n') == '9'"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10\\\\n1 5 2 1 1 1 2 5 7 2\\\\n\") == \"2\"\nassert solution(\"100 1\\\\n42\\\\n\") == \"0\"\nassert solution(\"3 9\\\\n42 42 42 42 42 42 42 42 42\\\\n\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 10\\n1 5 2 1 1 1 2 5 7 2') == '2'\nassert solution('100 1\\n1') == '0'\nassert solution('2 5\\n5 4 3 2 1') == '1'\nassert solution('3 9\\n42 42 42 42 42 42 42 42 42') == '3'\n"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\\n1 5 2 1 1 1 2 5 7 2\") == \"2\"\nassert solution(\"100 1\\n1\") == \"0\"\nassert solution(\"2 5\\n5 4 3 2 1\") == \"1\"\nassert solution(\"3 9\\n42 42 42 42 42 42 42 42 42\") == \"3\"\n\n\n\"\"\""
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\\n1 5 2 1 1 1 2 5 7 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10\\n1 5 2 1 1 1 2 5 7 2\") == 2\nassert solution(\"100 1\\n1\") == 0\nassert solution(\"2 5\\n5 4 3 2 1\") == 1\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\narr.sort()\nanswer = 0\ncur = 0\nwhile cur < N:\n    for i in range(cur + 1, N):\n        if arr[cur] == arr[i]:\n            cur += 1\n        else:\n            break\n    answer += 1\n    cur += 1"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\\n1 5 2 1 1 1 2 5 7 2\") == '2'\nassert solution(\"100 1\\n1\") == '0'\nassert solution(\"2 5\\n5 4 3 2 1\") == '1'\nassert solution(\"3 9\\n42 42 42 42 42 42 42 42 42\") == '3'\nassert solution(\"1 10\\n10\") == '0'"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\\n1 5 2 1 1 1 2 5 7 2\") == 2\nassert solution(\"100 1\\n1\") == 0\nassert solution(\"2 5\\n5 4 3 2 1\") == 1\n"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\\n1 5 2 1 1 1 2 5 7 2\") == \"2\"\nassert solution(\"100 1\\n1\") == \"0\"\nassert solution(\"2 5\\n5 4 3 2 1\") == \"1\"\nassert solution(\"3 9\\n42 42 42 42 42 42 42 42 42\") == \"3\"\n\n\"\"\"\n\nn, m = list(map(int, input().split()))\nfood_types = list(map(int, input().split()))\n\nfood_types.sort()\ndays = 0\nlast = 0\n\nfor i in range(1, m + 1):\n    if last == food_types[i - 1]:\n        continue\n    else:\n        last = food_types[i - 1]\n        days += 1\n\nprint(days)\n"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\\n1 5 2 1 1 1 2 5 7 2\") == \"2\"\nassert solution(\"100 1\\n1\") == \"0\"\nassert solution(\"2 5\\n5 4 3 2 1\") == \"1\"\nassert solution(\"3 9\\n42 42 42 42 42 42 42 42 42\") == \"3\"\n"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10\\n1 5 2 1 1 1 2 5 7 2') == '2'\nassert solution('100 1\\n1') == '0'\nassert solution('2 5\\n5 4 3 2 1') == '1'\nassert solution('3 9\\n42 42 42 42 42 42 42 42 42') == '3'"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 60\\n10 10\\n100 100\\n\") == \"110\"\n\"\"\"\n\n\nfrom typing import Tuple\n\nfrom solution_01 import solution\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3, 2\") == \"5\"\nassert solution(\"4, 4\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 60\\n10 10\\n100 100\") == \"110\"\n\n\"\"\"\n\nN, T = [int(x) for x in stdin.readline().split(' ')]\ntime = 0\narr = []\nfor i in range(N):\n    a, b = [int(x) for x in stdin.readline().split(' ')]\n    if i == 0:\n        time += a\n    if time >= T:\n        arr.append(b)\n    else:\n        if len(arr) == 0:\n            time += a\n        else:\n            arr.append(b + arr[-1])\n\nprint(max(arr))\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 60\\n10 10\\n100 100') == 110\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n2 60\n10 10\n100 100\n\"\"\"\n) == \"110\"\nassert solution(\n\"\"\"\n2 60\n100 10\n10 100\n\"\"\"\n) == \"110\"\nassert solution(\n\"\"\"\n2 60\n10 10\n10 100\n\"\"\"\n) == \"110\"\nassert solution(\n\"\"\"\n2 60\n100 100\n10 10\n\"\"\"\n) == \"110\"\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 60\\n10 10\\n100 100\") == 110\n\"\"\""
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 60\\n10 10\\n100 100') == '110'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 60\\n10 10\\n100 100\") == 110\n\n------\nimport sys\n\nN, T = map(int, sys.stdin.readline().split())\nhappiness = [0]\nfor _ in range(N):\n    a, b = map(int, sys.stdin.readline().split())\n    happiness.append(happiness[-1] + a * b)\n\ndp = [float('-inf')] * (T + 1)\ndp[0] = 0\n\nfor i in range(1, N + 1):\n    for t in range(T, -1, -1):\n        dp[min(t + i, T + 1)] = max(dp[min(t + i, T + 1)], dp[t] + happiness[i] * (t - T))\n\nprint(dp[T])\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 60\\n10 10\\n100 100\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 60\\n10 10') == '110'\n\"\"\"\n\nimport math\nimport sys\n\nn, t = map(int, sys.stdin.readline().split())\n\ndishes = []\nfor _ in range(n):\n    dishes.append(list(map(int, sys.stdin.readline().split())))"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"3 4\") == \"0\"\nassert solution(\"3 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"3 3\") == \"2\"\n"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6') == '2'\n"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 2') == '0'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any\n"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == 2\n\"\"\"\n\nimport sys\n\nfrom itertools import product\n"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == 2\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n') == '2'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\n\ninput = sys.stdin.readlines()\nX, Y = map(int, input[0].split())\n\ndp = [0] * (Y + 1)\ndp[0] = 1\n\nfor i in range(X):\n    temp = [0] * (Y + 1)\n\n    temp[0] = dp[0]\n    for j in range(1, Y + 1):\n        temp[j] += dp[j - 1]\n        if j - 2 >= 0:\n            temp[j] += dp[j - 2]\n        if j + 2 <= Y:\n            temp[j] += dp[j + 2]\n    dp = temp\n\nprint(dp[-1] % (10 ** 9 + 7))\n"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == 2\nassert solution(\"1 2\") == 0\n\"\"\"\n\n\"\"\"\nIn mathematics, the factorial of an integer n, denoted by n!, is the product of all positive integers less than or equal to n. For example:\n\n7! = 7 * 6 * 5 * 4 * 3 * 2 * 1 = 5040\n3! = 3 * 2 * 1 = 6\nThe number of factorials required to find the nth Fibonacci number is log(n) on average.\n\nImplement a function recur_factorial(n) which returns the nth factorial.\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == 2\n\"\"\""
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == 2\n"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == 1\n"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 2\n\"\"\""
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '2'\nassert solution('1') == '1'\nassert solution('8') == '4'\n\"\"\"\n"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '2'\n\"\"\"\n\nfrom math import ceil\n\nn = int(input())\n\nprint(ceil(n / 2))\n"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 2\nassert solution(5) == 2\n"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '2'\n\"\"\"\n"
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"4\"\n\"\"\""
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '8'\nassert solution('2') == '4'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '8'\nassert solution('2') == '4'\n"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(123) == 3\nassert solution(8) == 1\n\"\"\""
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '8'\nassert solution('2') == '4'\n\n------\n\nThe last digit of 1378^0 = 1 is 1.\n\nThe last digit of 1378^1 = 1378 is 8.\n\nThe last digit of 1378^2 = 1378\u00b71378 = 1898884 is 4.\n\nassert solution('0') == '1'\nassert solution('1') == '8'\nassert solution('2') == '4'\n\n\"\"\""
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == '8'\nassert solution(\"2\") == '4'\n"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '8'\nassert solution('2') == '4'\nassert solution('3') == '6'\nassert solution('4') == '3'\n"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '8'\nassert solution('2') == '4'\n\"\"\"\nimport sys"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"1 1\"\nassert solution(\"2 3\") == \"2 0\"\nassert solution(\"7 3\") == \"3 2\"\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"1 1\"\nassert solution(\"2 3\") == \"2 0\"\nassert solution(\"7 3\") == \"3 2\"\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '1 1'\nassert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\n\"\"\""
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '1 1'\nassert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\nassert solution('1 1') == '0 0'\nassert solution('2 2') == '0 0'\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"1 1\"\nassert solution(\"2 3\") == \"2 0\"\nassert solution(\"7 3\") == \"3 2\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3') == '3 2'\n\"\"\"\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == '1 1'\nassert solution('2 3') == '2 0'\nassert solution('7 3') == '3 2'\n\n\"\"\"\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"1 1\"\nassert solution(\"2 3\") == \"2 0\"\nassert solution(\"7 3\") == \"3 2\"\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"1 1\"\nassert solution(\"2 3\") == \"2 0\"\nassert solution(\"7 3\") == \"3 2\"\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"1 1\"\nassert solution(\"2 3\") == \"2 0\"\nassert solution(\"7 3\") == \"3 2\"\n\"\"\"\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 6 2 2') == 1\n\"\"\"\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 6 2 2') == '1'\nassert solution('1 9 1 2') == '2'"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 6 2 2') == '1'\nassert solution('1 9 1 2') == '2'\n\"\"\"\n\nimport math\n\nd, L, v1, v2 = map(int, input().split())\n\ns = math.sqrt(L ** 2 - d ** 2)\nb = (L - s) / (v1 + v2)\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 6 2 2\") == '1'\nassert solution(\"1 9 1 2\") == '2'\n\"\"\"\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 6 2 2\") == \"1.0\"\nassert solution(\"1 9 1 2\") == \"2.6666666666666665\"\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\""
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 9 1 2\") == '2.6666666666666665'\nassert solution(\"2 6 2 2\") == '1.00000000000000000000'\n\n\n\nsolution(\"2 6 2 2\") == '1.00000000000000000000'\nsolution(\"1 9 1 2\") == '2.6666666666666665'\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6 2 2\") == \"1\"\nassert solution(\"1 9 1 2\") == \"2.6666666666666665\"\nprint('The code ran Correctly')"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 6 2 2\") == \"1\"\nassert solution(\"1 9 1 2\") == \"2.66666666666666650000\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 6 2 2\") == '1.00000000000000000000'\nassert solution(\"1 9 1 2\") == '2.66666666666666650000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 20\\n1 20\\n3 20\\n5 20\\n19 20\\n23 20') == '6 1'\nassert solution('6 60\\n0 30\\n1 20\\n3 0\\n4 30\\n6 10\\n7 50\\n9 30\\n11 10\\n12 50\\n14 30\\n16 10\\n17 50\\n19 30\\n21 10\\n22 50\\n23 59') == '24 50'\nassert solution('3 17\\n0 30\\n1 0\\n12 0') == '0 0'\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 60\\n0 0\\n1 20\\n3 21\\n5 0\\n19 30\\n23 40') == '6 1'\nassert solution('16 50\\n0 30\\n1 20\\n3 0\\n4 30\\n6 10\\n7 50\\n9 30\\n11 10\\n12 50\\n14 30\\n16 10\\n17 50\\n19 30\\n21 10\\n22 50\\n23 59') == '24 50'\nassert solution('3 17\\n0 30\\n1 0\\n12 0') == '0 0'\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 60\\n0 0\\n1 20\\n3 21\\n5 0\\n19 30\\n23 40\\n\") == \"6 1\"\nassert solution(\"16 50\\n0 30\\n1 20\\n3 0\\n4 30\\n6 10\\n7 50\\n9 30\\n11 10\\n12 50\\n14 30\\n16 10\\n17 50\\n19 30\\n21 10\\n22 50\\n23 59\\n\") == \"24 50\"\nassert solution(\"3 17\\n0 30\\n1 0\\n12 0\\n\") == \"0 0\"\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6 60\n0 0\n1 20\n3 21\n5 0\n19 30\n23 40''') == '6 1'\nassert solution('''16 50\n0 30\n1 20\n3 0\n4 30\n6 10\n7 50\n9 30\n11 10\n12 50\n14 30\n16 10\n17 50\n19 30\n21 10\n22 50\n23 59''') == '24 50'\nassert solution('''3 17\n0 30\n1 0\n12 0''') == '0 0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 60\\n0 0\\n1 20\\n3 21\\n5 0\\n19 30\\n23 40\") == \"6 1\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 60\\n0 0\\n1 20\\n3 21\\n5 0\\n19 30\\n23 40\\n\") == '6 1'\nassert solution(\"16 50\\n0 30\\n1 20\\n3 0\\n4 30\\n6 10\\n7 50\\n9 30\\n11 10\\n12 50\\n14 30\\n16 10\\n17 50\\n19 30\\n21 10\\n22 50\\n23 59\\n\") == '24 50'\nassert solution(\"3 17\\n0 30\\n1 0\\n12 0\\n\") == '0 0'\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 60\\n0 0\\n1 20\\n3 21\\n5 0\\n19 30\\n23 40\") == \"6 1\"\nassert solution(\"16 50\\n0 30\\n1 20\\n3 0\\n4 30\\n6 10\\n7 50\\n9 30\\n11 10\\n12 50\\n14 30\\n16 10\\n17 50\\n19 30\\n21 10\\n22 50\\n23 59\") == \"24 50\"\nassert solution(\"3 17\\n0 30\\n1 0\\n12 0\") == \"0 0\"\n\n\n\n\n\n\n\n-----"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 60\\n0 0\\n1 20\\n3 21\\n5 0\\n19 30\\n23 40\\n\") == \"6 1\"\nassert solution(\"16 50\\n0 30\\n1 20\\n3 0\\n4 30\\n6 10\\n7 50\\n9 30\\n11 10\\n12 50\\n14 30\\n16 10\\n17 50\\n19 30\\n21 10\\n22 50\\n23 59\\n\") == \"24 50\"\nassert solution(\"3 17\\n0 30\\n1 0\\n12 0\\n\") == \"0 0\"\n\nfrom datetime import datetime\nfrom typing import List, Set"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 60\n0 0\n1 20\n3 21\n5 0\n19 30\n23 40\n''') == '6 1'\n\nassert solution('''\n16 50\n0 30\n1 20\n3 0\n4 30\n6 10\n7 50\n9 30\n11 10\n12 50\n14 30\n16 10\n17 50\n19 30\n21 10\n22 50\n23 59\n''') == '24 50'\n\nassert solution('''\n3 17\n0 30\n1 0\n12 0\n''') == '0 0'\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_data) == '6 1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 7\") == \"1 4 7\"\nassert solution(\"1 1\") == \"1 1\"\nprint(\"Passed all test cases!\")\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1 1'\nassert solution('1 4 7') == '1 4 7'\nassert solution('2 1 7') == '1 2 7'\nassert solution('1 1 2 3 4 5 6 7 8 9 10') == '1 1 3 4 5 6 7 8 9 10'\n\n\"\"\"\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 7\") == \"1 4 7\"\nprint(\"test 1 OK\")\nassert solution(\"1 1\") == \"1 1\"\nprint(\"test 2 OK\")\nassert solution(\"3 1 7\") == \"1 3 7\"\nprint(\"test 3 OK\")\nassert solution(\"3 1 1\") == \"1 1 3\"\nprint(\"test 4 OK\")\nassert solution(\"2 1 1\") == \"1 1 2\"\nprint(\"test 5 OK\")\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 1 7''') == '1 4 7'\nassert solution('''2 1 1''') == '1 1'\nassert solution('''3 1 5''') == '1 3 5'\n\nassert solution('''') == '1 1'\nassert solution('''1 1''') == '1 1'\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 7\") == \"1 4 7\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"4 1 7\") == \"1 4 7\"\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4 1 7\") == \"1 4 7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 7') == '1 4 7'\nassert solution('1 1') == '1 1'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 7\") == \"1 4 7\"\nassert solution(\"1 1\") == \"1 1\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 7') == '1 4 7'\nassert solution('1 1') == '1 1'\nprint(solution('2 1 1'))\n'''\n"
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 1 7\") == \"1 4 7\"\nassert solution(\"2 1 1\") == \"1 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\", \"\", \"\") == \"\"\nassert solution(\"0\", \"1\", \"1\") == \"1\"\nassert solution(\"8\", \"2\", \"3\") == \"1\"\nassert solution(\"6\", \"7\", \"2\") == \"1\"\nassert solution(\"1\", \"2\", \"4\") == \"3\"\n"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('82647') == 5\nassert solution('02221') == 3\nassert solution('92881') == 7\nassert solution('96238') == 7\nassert solution('82647') == 5\n"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"82195\") == 13\nassert solution(\"64723\") == 13\nassert solution(\"56789\") == 13\nassert solution(\"12345\") == 13\nassert solution(\"23456\") == 13\n"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"82195\") == 13\n\"\"\""
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('826195') == 13\nassert solution('64723') == 10\n"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"82195\") == 13\nassert solution(\"64723\") == 13\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234\") == 0\nassert solution(\"1111\") == 0\nassert solution(\"9889\") == 8\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('82195') == 13\n\"\"\"\n"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Image]\n\n[Image]\n\n[Image]\n"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"82195\") == 13\nassert solution(\"64723\") == 13\nassert solution(\"123456\") == 13\nassert solution(\"012345\") == 13\nassert solution(\"478896\") == 13\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2 1 4 3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"2 1 4 3\"\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '1 2'\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n\") == \"-1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == '-1'\nassert solution(\"4\") == '2 1 4 3'\nassert solution(\"5\") == '2 1 3 4 5'\nassert solution(\"6\") == '2 1 4 3 5 6'\nassert solution(\"7\") == '2 1 5 3 7 6 4'\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"4\") == \"2 1 4 3\"\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '2 1 4 3'\nassert solution('1') == '-1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1 3'\nassert solution('4') == '2 1 4 3'\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"2 1 4 3\"\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5\n''') == '2 1 4 3'\nprint('Test pass.')\n\n\"\"\"\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == '2 1 4 3'\nassert solution(\"1\") == '-1'\nassert solution(\"2\") == '2 1'\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 4\\n*aba\\na*ab\\nba*b\\nabb*\") == \"1\\n4 1\"\nassert solution(\"2 3 4\\n*abc\\na*ab\\nba*b\\ncbb*\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 3 4\\n*aba\\na*ab\\nba*b\\nabb*') == '1\\n4 1'\nassert solution('4\\n2 3 4\\n*abc\\na*ab\\nba*b\\ncbb*') == '-1'\nassert solution('4\\n4 2 3\\n*aba\\na*ab\\nba*b\\nabb*') == '-1'\nassert solution('4\\n4 2 3\\n*aba\\na*ab\\nba*b\\nabb*') == '-1'\n"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3\\n*aba\\na*ab\\nba*b\\nabb*\") == '1\\n4 1'\nassert solution(\"4 2 3\\n*abc\\na*ab\\nba*b\\ncbb*\") == '-1'\n"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n*aba\\na*ab\\nba*b\\nabb*\\n') == '1\\n4 1'\nassert solution('4\\n*abc\\na*ab\\nba*b\\ncbb*\\n') == '-1'"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 4\\n*aba\\na*ab\\nba*b\\nabb*\") == \"1\\n4 1\"\nassert solution(\"4\\n2 3 4\\n*abc\\na*ab\\nba*b\\ncbb*\") == \"1\\n-1\"\n"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3\\n*aba\\na*ab\\nba*b\\nabb*\") == \"1\\n4 1\"\nassert solution(\"4 2 3\\n*abc\\na*ab\\nba*b\\ncbb*\") == \"-1\"\n"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n2 3 4\n*aba\na*ab\nba*b\nabb*''') == '1\\n4 1'\nassert solution('''4\n2 3 4\n*abc\na*ab\nba*b\ncbb*''') == '-1'\nassert solution('''4\n1 3 4\n*aba\na*ab\nba*b\nabb*''') == '-1'\nassert solution('''4\n1 2 3\n*aba\na*ab\nba*b\nabb*''') == '-1'\nassert solution('''4\n2 3 4\n*abc\na*ab\nba*b\ncbb*''') == '-1'\n\n'''\n\n'''\n"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 4\\n*aba\\na*ab\\nba*b\\nabb*\\n') == '1\\n4 1'\nassert solution('2 3 4\\n*abc\\na*ab\\nba*b\\ncbb*\\n') == '-1'"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n*aba\\na*ab\\nba*b\\nabb*\\n') == '1\\n4 1'\nassert solution('4\\n*abc\\na*ab\\nba*b\\ncbb*\\n') == '-1'\n"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 4\\n*aba\\na*ab\\nba*b\\nabb*') == '1\\n4 1'\n\nprint(solution('4\\n2 3 4\\n*abc\\na*ab\\nba*b\\ncbb*'))\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n1 1\") == \"2\"\nassert solution(\"2 2\\n1 1\") == \"1\"\nassert solution(\"3 6\\n1 1 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '','solution, string, must be empty'\n\nassert solution('1') == '','solution, string, must be empty'\n\nassert solution('1\\n2') == '','solution, string, must be empty'\n\nassert solution('1 2') == '','solution, string, must be empty'\n\nassert solution('1\\n2 1') == '','solution, string, must be empty'"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\") == \"1\"\nassert solution(\"3 6\\n1 1 1\") == \"2\"\n\"\"\"\n\nn, k = input().split(\" \")\nn, k = int(n), int(k)\n\nA = list(map(int, input().split(\" \")))\n\nresult = 0\ncount = 0\n\nfor i in range(len(A)):\n    if A[i] >= k:\n        break\n    if A[i] > 0:\n        count += 1\n        result = i"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1\\n1 1\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '0'\nassert solution('2 6') == '1'"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 1') == '1'\nassert solution('3 6\\n1 1 1') == '2'\nassert solution('3 1\\n1 0 1') == '0'\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n1\") == \"1\"\nassert solution(\"1 1\\n2\") == \"1\"\nassert solution(\"1 1\\n3\") == \"1\"\nassert solution(\"1 1\\n1 2\") == \"1\"\nassert solution(\"1 1\\n1 3\") == \"1\"\n"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 6\n1 1 1''') == '2'\nprint('Test pass.')"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 1') == '1'\nassert solution('3 6\\n1 1 1') == '2'\nassert solution('3 1\\n1 0 1') == '0'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n1 3\\n3 4\\n5 2\") == \"1\"\nassert solution(\"6 2\\n1 3\\n3 4\\n5 2\\n2 5\") == \"0\"\nassert solution(\"7 3\\n3 4\\n1 2\\n3 1\\n4 2\") == \"2\"\nassert solution(\"4 2\\n2 2\\n1 3\\n1 4\") == \"0\"\nassert solution(\"4 1\\n2 3\\n2 4\") == \"1\"\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 4\\n5 2\") == \"2\"\nassert solution(\"3 3\\n1 2\\n2 3\\n1 3\") == \"0\"\nassert solution(\"3 2\\n3 1\\n3 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 4\\n5 2\") == 2\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('1 2\\n') == 0\nassert solution('1 2\\n1 3\\n') == 0\nassert solution('1 2\\n1 3\\n1 4\\n') == 0\nassert solution('1 2\\n1 3\\n1 4\\n2 3\\n') == 0\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 4\\n5 2\") == \"2\"\nassert solution(\"3 2\\n3 1\\n3 2\") == \"0\"\nassert solution(\"3 3\\n1 2\\n2 3\\n1 3\") == \"1\"\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 2\\n1 3\\n\") == \"1\"\nassert solution(\"2 2\\n1 2\\n1 2\\n\") == \"2\"\nassert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\"3 2\\n1 2\\n1 3\\n\") == \"1\"\nassert solution(\"4 1\\n4 1\\n1 1\\n\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\") == \"2\"\nassert solution(\"5 2\\n1 4\\n5 2\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\n\npair_dict = defaultdict(list)\n\nfor i in range(m):\n    u, v = map(int, stdin.readline().split())\n    pair_dict[u].append(v)\n    pair_dict[v].append(u)"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 4\\n5 2\") == 2\nassert solution(\"3 3\\n1 2\\n2 3\\n1 3\") == 0\n\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\nn, m = map(int, lines[0].split())"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 4\\n5 2') == '2'\nassert solution('3 3\\n1 2\\n2 3\\n1 3') == '0'\nassert solution('3 2\\n3 1\\n3 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 4\\n5 2\") == \"2\"\n\nassert solution(\"3 3\\n1 2\\n2 3\\n1 3\") == \"0\"\n\nassert solution(\"3 2\\n3 1\\n3 2\") == \"1\"\n\n\"\"\"\nimport re"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 1 3\") == \"Finite\"\nassert solution(\"3\\n1 2 3\") == \"Infinite\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(input())\n\n-----Explanation-----\n\nhttps://math.stackexchange.com/questions/177327/how-many-distinct-points-will-a-triangle-with-a-given-length-of-side-and-an-initial-point\n\nCorner cases\n\nTriangle\n\na = 2\nb = 3\n\nResult\n\n[Image]\n\nIn the first example the triangle and the square touch each other for the whole segment, it contains infinite number of points.\n\nSquare\n\na = 1\nb = 2\n\nResult\n\n[Image]\n\na = 2\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 3\n\nResult\n\nFinite\n\na = 2\nb = 1\n\nResult\n\nFinite\n\na = 2\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 3\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 3\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 3\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 3\n\nResult\n\nFinite\n\na = 3\nb = 2\n\nResult\n\nFinite\n\na = 2\nb = 3\n\nResult\n\nFinite\n\na = 2\nb = 2\n\nResult\n\nFinite\n\na = 3\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 2\nb = 1\n\nResult\n\nFinite\n\na = 3\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 3\n\nResult\n\nFinite\n\na = 2\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 3\nb = 2\n\nResult\n\nFinite\n\na = 3\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 2\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 3\n\nResult\n\nFinite\n\na = 1\nb = 3\n\nResult\n\nFinite\n\na = 1\nb = 3\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 3\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 2\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 3\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 3\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 3\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 3\n\nResult\n\nFinite\n\na = 2\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 3\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 3\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 2\nb = 1\n\nResult\n\nFinite\n\na = 2\nb = 1\n\nResult\n\nFinite\n\na = 3\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 3\n\nResult\n\nFinite\n\na = 3\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 3\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 1\nb = 2\n\nResult\n\nFinite\n\na = 1\nb = 1\n\nResult\n\nFinite\n\na = 2\nb = 3\n\nResult\n\nFinite\n\na = 1\nb"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == 'Finite'\nassert solution(\"3\\n1 1 3\") == 'Infinite'\nassert solution(\"2\\n1 2\") == 'Finite'\nassert solution(\"2\\n2 2\") == 'Finite'\nassert solution(\"2\\n1 1\") == 'Infinite'\n\"\"\""
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 1 3\") == \"Finite\"\nassert solution(\"3\\n1 2 3\") == \"Infinite\"\n\n---\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"Finite\"\nassert solution(\"3\\n1 1 3\") == \"Infinite\"\n\"\"\"\nimport math\nimport functools\n"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 3\") == \"Finite\"\nassert solution(\"3 1 3\") == \"Infinite\"\n\n\"\"\""
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"Finite\\n7\"\nassert solution(\"3\\n2 1 3\") == \"Infinite\"\nassert solution(\"3\\n1 2 2\") == \"Infinite\"\nassert solution(\"3\\n1 1 1\") == \"Finite\\n2\"\n\"\"\"\n"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 3\") == \"Finite\"\nassert solution(\"1 2 3\") == \"Infinite\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"Finite\\n7\"\nassert solution(\"3\\n1 1 3\") == \"Infinite\"\n"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"Finite\"\nassert solution(\"3\\n1 2 1\") == \"Finite\"\nassert solution(\"3\\n1 2 3\") == \"Finite\"\nassert solution(\"3\\n1 2 3\") == \"Finite\"\n\n\"\"\""
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1 1 2 2 3 2 5') == '1 2 5 8'\n\"\"\"\n\n\nclass Router:\n    def __init__(self, first, last):\n        self.first = first\n        self.last = last\n\n    def __repr__(self):\n        return f'{self.first} {self.last}'\n"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 2 3') == '1 2 3', 'First'\nassert solution('4\\n1 2 3 4') == '1 2 4 3', 'Second'\n\"\"\"\n\nfrom collections import deque\n\nN = int(input())\n\nconnections = list(map(int, input().split()))\n\nnodes = deque()\n\nnodes.append(1)\n\nfor i in range(N - 1):\n    curr = nodes.popleft()\n\n    if curr == connections[i]:\n        nodes.append(connections[i])\n    else:\n        nodes.append(connections[i])\n        nodes.append(curr)\n\nprint(' '.join(map(str, nodes)))\n"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 1 2 2 3 2 5\") == \"1 2 5 8\"\nassert solution(\"6\\n1 2 3 4 5\") == \"1 2 3 4 5 6\"\nassert solution(\"7\\n1 1 2 3 4 3\") == \"1 3 7\"\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(input())\np = list(map(int, input().split()))\n\npath = defaultdict(list)\n\nfor i in range(n - 1):\n    path[p[i]].append(i + 2)\n\nprint(\" \".join(map(str, [1] + [p[0]] + path[p[-1]] + [n])))\n"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 1 2 2 3 2 5\") == \"1 2 5\"\nassert solution(\"3\\n1 2 3\") == \"1 2 3\"\nassert solution(\"4\\n1 2 3 4\") == \"1 2 3 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1 2 3 4 5 6\"\n"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(expected_output)"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 1 2 2 3 2 5\\n\") == \"1 2 5 8\"\nassert solution(\"7\\n1 1 2 3 4 3\\n\") == \"1 3 7\"\nassert solution(\"6\\n1 2 3 4 5\\n\") == \"1 2 3 4 5 6\"\n"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 1 2 2 3 2 5\") == \"1 2 5 8\"\nassert solution(\"7\\n1 1 2 3 4 3\") == \"1 3 7\"\nassert solution(\"6\\n1 2 3 4 5\") == \"1 2 3 4 5 6\"\n\"\"\""
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1 2 3 4\"\nassert solution(\"10\\n4 6 1 2 9 3 8 5 7 6\") == \"4 6 1 2 9 8 7 5 3\"\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == \"1 2 3 4 5 6 7 8\"\n\"\"\"\nimport collections\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n1 1 2 2 3 2 5') == '1 2 5 8'\nassert solution('7\\n1 1 2 3 4 3') == '1 3 7'\n\n\"\"\""
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 2 2 3 2 5') == '1 2 5 8'\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 2 3 4 3') == '1 3 7'\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 9\nassert solution(\"4\") == 56\nassert solution(\"10\") == 30052700\nassert solution(\"100\") == 998244353\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"56\"\nassert solution(\"10\") == \"30052700\"\n\"\"\""
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '86'\nassert solution('10') == '25094462'\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 9\nassert solution('4') == 56\nassert solution('10') == 30052700\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '56'\nassert solution('10') == '30052700'\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"56\"\nassert solution(\"10\") == \"30052700\"\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"56\"\nassert solution(\"10\") == \"300527\"\n\"\"\""
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"56\"\nassert solution(\"10\") == \"30052700\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"56\"\nassert solution(\"10\") == \"30052700\"\n\nprint(solution(\"10\"))\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '56'\nassert solution('10') == '30052700'\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n4 3 2 2 3') == '2'\nassert solution('7\\n3 3 4 4 4 3 3') == '2'\nassert solution('1\\n1000') == '1'\nassert solution('3\\n1 3 5') == '3'\nassert solution('1\\n1000') == '1'\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2 2 3\") == \"2\"\nassert solution(\"7 3 4 4 4 3 3\") == \"2\"\nassert solution(\"3 3 4 4 4 3 3\") == \"2\"\nassert solution(\"1 1000\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4 3 2 2 3\") == \"2\"\nassert solution(\"7\\n3 3 4 4 4 3 3\") == \"2\"\nassert solution(\"1\\n1000\") == \"1\"\nassert solution(\"2\\n1 3\") == \"2\"\nassert solution(\"3\\n1 3 5\") == \"3\"\n\"\"\""
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4 3 2 2 3\") == \"2\"\nassert solution(\"7\\n3 3 4 4 4 3 3\") == \"2\"\nassert solution(\"1\\n1000\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2 2 3\") == \"2\"\nassert solution(\"3 3 4 4 4 3 3\") == \"2\"\nassert solution(\"1 3 5\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 2 2 3') == '2'\nassert solution('7 3 4 4 4 3 3') == '2'\nassert solution('1 1000') == '1'\nassert solution('3 3 4 4 4 3 3') == '2'\nassert solution('1 3 5') == '3'\n\n\"\"\""
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 3 2 2 3\") == \"2\"\nassert solution(\"7\\n3 3 4 4 4 3 3\") == \"2\"\nassert solution(\"3\\n1 3 5\") == \"3\"\nassert solution(\"1\\n1000\") == \"1\"\nassert solution(\"5\\n4 3 2 2 3\") == \"2\"\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 3 2 2 3\") == '2'\nassert solution(\"7\\n3 3 4 4 4 3 3\") == '2'\nassert solution(\"1\\n1000\") == '1'\nassert solution(\"4\\n1 3 5\") == '2'\nassert solution(\"8\\n2 2 1 2 3 2 2 2\") == '4'\n\n----\n\nWrite an efficient algorithm for the following assumptions:\n\n    n is an integer within the range [1..100,000];\n    each element of array A is an integer within the range [1..1,000].\n\n'''"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n4 3 2 2 3''') == '2'\nassert solution('''7\n3 3 4 4 4 3 3''') == '2'\nassert solution('''1\n1000''') == '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 3 2 2 3\") == \"2\"\nassert solution(\"7\\n3 3 4 4 4 3 3\") == \"2\"\nassert solution(\"1\\n1000\") == \"1\"\nassert solution(\"4\\n3 2 2 3\") == \"2\"\nassert solution(\"2\\n3 3\") == \"2\"\n\n-----Test 2-----\n\nInput\n5\n1 1 1 1 1\n\nOutput\n0\n\nInput\n5\n1 1 2 2 1\n\nOutput\n1\n\nInput\n4\n1 2 3 4\n\nOutput\n0\n\nInput\n2\n1 2\n\nOutput\n1\n\n-----Test 3-----\n\nInput\n5\n1 1 2 3 2\n\nOutput\n2\n\nInput\n6\n1 1 1 1 1 1\n\nOutput\n0\n\n-----Test 4-----\n\nInput\n7\n4 3 2 2 3\n\nOutput\n3\n\nInput\n10\n3 3 3 3 3 3 3 3 3\n\nOutput\n0\n\n\"\"\""
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"winlose???winl???w??\") == \"5\"\nassert solution(\"glo?yto?e??an?\") == \"3\"\nassert solution(\"??c?????\") == \"abcab\"\n\"\"\""
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"winlose???winl???w??\") == \"winlosewinwinlwinwin\"\nassert solution(\"glo?yto?e??an??\") == \"glorytoreorand\"\nassert solution(\"??c??????\") == \"abcabcab\"\n\"\"\""
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('???winlose???winl???w??') == 5\nassert solution('glo?yto?e??an?') == 3\nassert solution('??c?????') == 2\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"winlose???winl???w??\") == \"winlosewinwinlwinwin\"\nassert solution(\"glo?yto?e??an?\") == \"or\"\nassert solution(\"??c?????\") == \"abcab\"\n\n\"\"\"\n\nimport collections\nimport itertools\nimport math"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('winlose???winl???w??') == 5\nassert solution('glo?yto?e??an?') == 3\nassert solution('??c?????') == 2\n"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"winlose???winl???w??\", \"win\") == 5\n\nassert solution(\"glo?yto?e??an?\", \"or\") == 3\n\nassert solution(\"??c?????\", \"abcab\") == 2\n\nassert solution(\"???????\", \"abcab\") == 2\n\nprint(\"test passed\")\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"winlose???winl???w??\") == \"winlosewinwinlwinwin\"\nassert solution(\"glo?yto?e??an?or\") == \"glorytoreorand\"\nassert solution(\"??c?????abcab\") == \"abcabcab\"\n"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"glo?yto?e??an?\", \"or\") == 3\nassert solution(\"??c?????\", \"abcab\") == 2\nassert solution(\"winlose???winl???w??\", \"win\") == 5\n\n\nimport string"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"winlose???winl???w??\") == \"5\"\nassert solution(\"glo?yto?e??an?\") == \"3\"\nassert solution(\"??c?????\") == \"abcab\"\n\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"winlose???winl???w??\"\n) == \"5\"\n\nassert solution(\n    \"glo?yto?e??an? or\"\n) == \"3\"\n\nassert solution(\n    \"??c?????\"\n) == \"2\"\n\"\"\""
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\") == \"3\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"2\\n3 5\") == \"3\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"2\\n1\") == \"1\"\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\nimport math"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n2 2') == '3'\nassert solution('1 1\\n1 1') == '2'\nassert solution('1 1\\n1 1') == '2'\nassert solution('1 1\\n1 1') == '2'\nassert solution('1 1\\n1 1') == '2'\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"2 1\") == \"2\"\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"4 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\") == \"3\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"2\\n3 5\") == \"3\"\nassert solution(\"3\\n3 5\") == \"3\"\nassert solution(\"2\\n4 4\") == \"5\"\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '3'\nassert solution('1') == '3'\nassert solution('2 3') == '2'\nassert solution('2 5') == '3'\nassert solution('3 1') == '3'\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n\") == \"3\"\nassert solution(\"1\\n2\\n4\\n5\\n\") == \"2\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\") == '3'\nassert solution(\"2\\n3 5\") == '3'\nassert solution(\"3\\n3 5\") == '1'\nassert solution(\"3\\n5 1\") == '3'\nassert solution(\"2\\n5 1\") == '2'\n\nprint('Success')\n\n\"\"\"\n\n\nfrom collections import Counter\nfrom itertools import combinations\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n1') == '3'\nassert solution('1\\n2') == '2'\nassert solution('2\\n3 5') == '3'\nassert solution('2\\n4 3') == '3'\nassert solution('1\\n5') == '5'\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == '8'\nassert solution('1 2 2') == '63'\nassert solution('1 3 5') == '3264'\n\n\"\"\"\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == \"8\"\nassert solution(\"1 2 2\") == \"63\"\nassert solution(\"1 3 5\") == \"3264\"\n\"\"\""
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"8\"\nassert solution(\"1 2 2\") == \"63\"\nassert solution(\"1 3 5\") == \"3264\"\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == 8\n\nassert solution(\"1 2 2\") == 63\n\nassert solution(\"1 3 5\") == 3264\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"6\"\nassert solution(\"1 2 2\") == \"8\"\nassert solution(\"1 1 1\") == \"8\"\nassert solution(\"6 2 9\") == \"6323575\"\nassert solution(\"6 2 2\") == \"813023575\"\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == 8\nassert solution(\"1 2 2\") == 63\nassert solution(\"1 3 5\") == 3264\n\"\"\"\n\nimport sys\nimport itertools\nimport functools\nfrom collections import defaultdict\nfrom typing import List, Dict, Set, Tuple, Optional, Callable\n\nclass Solution:\n\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str) -> str:\n        #print(\"[INFO] input: {}\".format(stdin))\n        a, b, c = [int(x) for x in stdin.split(\" \")]\n        islands = [a, b, c]\n        #print(\"[INFO] islands: {}\".format(islands))\n        a = 0\n        b = 0\n        c = 0\n        for i in islands:\n            if i == 1:\n                a += 1\n            elif i == 2:\n                b += 1\n            elif i == 3:\n                c += 1\n\n        #print(\"[INFO] a: {}, b: {}, c: {}\".format(a, b, c))\n        total = a*b*c\n\n        if a!= 1:\n            #b must be 1, b must be 1, a must be 1\n            #a*b*c must be the minimum\n            #a must be 2, a must be 2, a must be 2\n            #a*b*c = min(a*b*c, a*(b+c)*2)\n            #a*b*c = min(a*b*c, 2*a*(b+c))\n            #a*b*c = min(a*b*c, a*b + 2*a*c)\n            #a*b*c = min(a*b*c, 2*a*b + c)\n            #a*b*c = min(a*b*c, a*b + c*2)\n            #a*b*c = min(a*b*c, a*c + b*2)\n            #a*b*c = min(a*b*c, a*c + b)\n            #a*b*c = min(a*b*c, 2*a*c + b + c)\n            #a*b*c = min(a*b*c, a*c + b + c*2)\n            #a*b*c = min(a*b*c, a*c + b*2 + c)\n            #a*b*c = min(a*b*c, a*c + b + c)\n            #a*b*c = min(a*b*c, 2*a*c + b + c)\n            #a*b*c = min(a*b*c, a*c + 2*b + c)\n            #a*b*c = min(a*b*c, a*c + b + 2*c)\n            #a*b*c = min(a*b*c, a*c + b + c)\n            #a*b*c = min(a*b*c, 2*a*c + b + c)\n            #a*b*c = min(a*b*c, a*b + 2*c)\n            #a*b*c = min(a*b*c, a*c + 2*b)\n            #a*b*c = min(a*b*c, 2*a*b + c)\n            #a*b*c = min(a*b*c, a*c + 2*b)\n            #a*b*c = min(a*b*c, a*b + 2*c)\n            #a*b*c = min(a*b*c, 2*a*c + b)\n            #a*b*c = min(a*b*c, a*c + 2*b)\n            #a*b*c = min(a*b*c, a*c + 2*b)\n            #a*b*c = min(a*b*c, 2*a*b)\n            #a*b*c = min(a*b*c, a*b)\n            #a*b*c = min(a*b*c, 2*a*c)\n            #a*b*c = min(a*b*c, a*c)\n            #a*b*c = min(a*b*c, 2*a*b)\n            #a*b*c = min(a*b*c, a*b)\n            #a*b*c = min(a*b*c, 2*a*c)\n            #a*b*c = min(a*b*c, 2*a*b)\n            #a*b*c = min(a*b*c, 2*a*c)\n            #a*b*c = min(a*b*c, 2*a*b)\n            #a*b*c = min(a*b*c, 2*a*b)\n            a = min(a, 2*b)\n            a = min(a, 2*c)\n            a = min(a, b+c)\n            #a*b*c = min(a*b*c, a*b + 2*a*c)\n            #a*b*c = min(a*b*c, 2*a*b + c)\n            #a*b*c = min(a*b*c, a*c + b*2)\n            #a*b*c = min(a*b*c, 2*a*c + b)\n            #a*b*c = min(a*b*c, a*c + 2*b)\n            #a*b*c = min(a*b*c, 2*a*b + c)\n            #a*b*c = min(a*b*c, a*c + 2*b)\n            #a*b*c = min(a*b*c, 2*a*b + c)\n            #a*b*c = min(a*b*c, a*c + 2*b)\n            #a*b*c = min(a*b*c, 2*a*b + c)\n            #a*b*c = min(a*b*c, a*c + 2*b)\n            #a*b*c = min(a*b*c, 2*a*b + c)\n            "
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3\") == \"2\"\nassert solution(\"1 2 1\") == \"8\"\n\"\"\""
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 5\") == \"3264\"\nassert solution(\"6 2 9\") == \"813023575\"\n\n\n\"\"\""
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 1 1''') == '8'\nassert solution('''1 2 2''') == '63'\nassert solution('''1 3 5''') == '3264'\nassert solution('''6 2 9''') == '813023575'\nassert solution('''5 4 2''') == '70'\n"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == 8\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n3 2\") == \"11\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n3 2\") == '3'\nassert solution(\"3 1\\n1 2\\n2 3\") == '11'\n\n\n\n-----\nInput\n3\n1 2\n3 2\n4 3\n\nOutput\n9\n\n\n-----\nInput\n3\n1 2\n3 2\n4 3\n\nOutput\n9\n\n\n-----\nInput\n3\n1 2\n3 2\n4 3\n\nOutput\n8\n\n\n-----\nInput\n4\n1 2\n3 2\n4 3\n1 4\n\nOutput\n9\n\n\n-----\nInput\n5\n1 2\n3 2\n4 3\n1 4\n5 4\n\nOutput\n28\n\n\n-----\nInput\n6\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n\nOutput\n21\n\n\n-----\nInput\n7\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n\nOutput\n63\n\n\n-----\nInput\n8\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n\nOutput\n63\n\n\n-----\nInput\n9\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n\nOutput\n63\n\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n\nOutput\n63\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n85\n\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n84\n\n-----\nInput\n11\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n12 11\n\nOutput\n90\n\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n12 11\n\nOutput\n88\n\n-----\nInput\n12\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n12 11\n13 12\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n12 11\n\nOutput\n58\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n89\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n66\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n51\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n61\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n81\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n88\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1 2\n3 2\n4 3\n1 4\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n\nOutput\n114\n\n-----\nInput\n10\n1"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n3 2\") == \"3\"\nassert solution(\"3 2\\n1 2\") == \"11\"\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2\") == \"3\"\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n3 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == 3\nassert solution(\"3 2\") == 11\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n3 2\") == \"3\"\nassert solution(\"3 1\\n2 3\") == \"6\"\nassert solution(\"3 1\\n2 2\\n3 3\") == \"10\"\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n3 2\") == \"11\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000000)\n\n\nclass Solution:\n    def __init__(self):\n        self.mod = 1002453\n\n    def read_ints(self):\n        return [int(x) for x in sys.stdin.readline().strip().split()]\n\n    def main(self):\n        n = int(sys.stdin.readline().strip())\n        graph = [[] for _ in range(n)]\n        for u, v in zip(self.read_ints(), self.read_ints()):\n            graph[u - 1].append(v - 1)\n            graph[v - 1].append(u - 1)\n        # print(graph)\n        self.recurse(graph, 0, set([0]))\n\n    def recurse(self, graph, v, visited):\n        visited.add(v)\n        for child in graph[v]:\n            if child not in visited:\n                self.recurse(graph, child, visited)\n        # print(visited)\n\n    def solution(self):\n        self.main()\n        return sum(self.mod - i for i in range(1, self.mod)) % self.mod\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n3 2\") == \"11\"\nassert solution(\"3 1\\n2 3\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n3 2') == '11'\nassert solution('3 1\\n3 2') == '23'\n\n\"\"\"\n\nimport collections\nimport math\n\n\nclass Graph:\n\n    def __init__(self):\n        self.adj = collections.defaultdict(set)\n        self.indices = set()\n        self.edges = set()\n\n    def addEdge(self, u, v):\n        self.adj[u].add(v)\n        self.edges.add((u, v))\n        self.edges.add((v, u))\n        self.indices.add(u)\n        self.indices.add(v)\n"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('527') == '572'\nassert solution('4573') == '3574'\nassert solution('1357997531') == '-1'\n\"\"\"\n\nn = int(input())\n\nn = list(str(n))\ni = 0\n\nwhile i < len(n):\n    if int(n[i]) % 2 == 0:\n        n[i] = str(int(n[i])-1)\n        if int(n[i]) == 0:\n            n[i] = str(9)\n        j = i+1\n        while j < len(n):\n            if int(n[i]) + int(n[j]) == 8:\n                n[j] = str(int(n[i])+1)\n                if int(n[j]) == 10:\n                    n[j] = str(0)\n                n[i] = str(int(n[i])+1)\n                if int(n[i]) == 10:\n                    n[i] = str(0)\n                break\n            j += 1\n    i += 1\n\nprint(int(''.join(n)))\n"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1357997531\") == \"1\"\nassert solution(\"4573\") == \"3574\"\nassert solution(\"527\") == \"572\"\n"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"527\") == \"572\"\nassert solution(\"4573\") == \"3574\"\nassert solution(\"1357997531\") == \"-1\"\n"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4573') == '3574'\nassert solution('527') == '572'\nassert solution('1357997531') == '-1'\n"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2547') == '572'\nassert solution('2547') == '572'\nassert solution('12345') == '-1'\nassert solution('10202') == '-1'\nassert solution('1357997531') == '-1'\n\n\"\"\""
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('527') == '572'\nassert solution('4573') == '3574'\nassert solution('1357997531') == '-1'\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"527\") == \"572\"\nassert solution(\"4573\") == \"3574\"\nassert solution(\"1357997531\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1357997531') == '-1'\n"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('527') == '572'\nassert solution('4573') == '3574'\nassert solution('1357997531') == '-1'\n"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"527\") == \"572\"\nassert solution(\n    \"4573\") == \"3574\"\nassert solution(\n    \"1357997531\") == \"-1\"\nassert solution(\n    \"1111\") == \"1\"\nassert solution(\n    \"0\") == \"0\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def __init__(self):\n        pass\n    \n    def solution(self, n: str) -> str:\n        if not n.isdigit():\n            return \"1\"\n        if n == \"0\":\n            return \"0\"\n        if len(n) == 1:\n            return n\n\n        digits = list(map(int, n))\n        n_len = len(digits)\n        for i in range(n_len):\n            for j in range(i + 1, n_len):\n                digits[i], digits[j] = digits[j], digits[i]\n                if digits[0] % 2 == 0:\n                    break\n                else:\n                    digits[0] = digits[0] // 10\n        if digits[0] == 0:\n            digits[0] = 1\n        return \"\".join(map(str, digits))"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 0 0\") == \"YES\"\nassert solution(\"4\\n1 0 1 0\") == \"NO\"\n\"\"\"\n\nn = int(input())\n\nfastened = list(map(int, input().split()))\n\nfastened.sort()\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 0 0\") == \"YES\"\nassert solution(\"3\\n1 0 1\") == \"NO\""
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 0 1\") == \"YES\"\nassert solution(\"3\\n1 1 0\") == \"NO\"\nassert solution(\"3\\n0 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 0 0\\n') == 'YES'\nassert solution('3\\n1 0 1\\n') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 0 0') == 'NO'\nassert solution('3\\n0 0 1') == 'YES'"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 0 0\") == \"NO\"\nassert solution(\"3\\n1 1 1\") == \"NO\"\nassert solution(\"3\\n0 0 0\") == \"YES\"\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 0 0\") == \"YES\"\nassert solution(\"3\\n1 0 1\") == \"NO\"\nassert solution(\"3\\n0 1 1\") == \"NO\"\nassert solution(\"3\\n1 0 1\\n2 0 1\") == \"NO\"\nassert solution(\"3\\n1 1 1\") == \"YES\"\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 0 1\") == \"YES\"\nassert solution(\"3\\n1 1 1\") == \"NO\"\nassert solution(\"7\\n1 1 1 1 0 1 1\") == \"NO\"\nassert solution(\"3\\n0 1 1\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1 0 1''') == 'YES'\nassert solution('''3\n1 0 0''') == 'NO'\n\"\"\"\n\"\"\"\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0435\u0433\u043e \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439.\n\"\"\"\n\nn = int(input())\nsum = 0\nfor i in range(1, n + 1):\n    if n % i == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u043e\u0439.com \u0438\u043b\u0438.ru.\n\"\"\"\n\ns = input()\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 1 1\") == \"YES\"\nassert solution(\"4\\n0 0 0 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 1 3\") == '3'\nassert solution(\"3 2 4 1\") == '2'"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 1 3') == '3'\nassert solution('3 2 4 1') == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 1 3\") == \"3\"\nassert solution(\"3 2 4 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1 3\") == \"3\"\nassert solution(\"3 2 4 1\") == \"2\""
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n2 1 3 4\n3 2 4 1''') == '3'\nassert solution('''4\n3 2 4 1\n2 1 4 3''') == '2'\n'''"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1 3\") == 3\nassert solution(\"3 2 4 1\") == 2\n"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"3\"\nassert solution(\"4\\n2 1 4 3\") == \"2\"\nassert solution(\"4\\n3 2 4 1\") == \"3\"\n"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 1 3\") == \"3\"\nassert solution(\"3 2 4 1\") == \"2\"\n"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 1 3') == 3\nassert solution('3 2 4 1') == 2\nassert solution('4 2 3 1') == 3\n"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 1 3') == 3\nassert solution('3 2 4 1') == 2\nassert solution('4 2 1 3') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('####\\n.#..\\n####\\n....') == 'YES'\nassert solution('####\\n#..#\\n####\\n....') == 'NO'\nassert solution('####\\n.###\\n####\\n....') == 'NO'\nassert solution('#..#\\n#..#\\n#..#\\n#..#') == 'YES'\nassert solution('##..\\n##..\\n##..\\n##..') == 'YES'\n"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('####\\n.#..\\n####\\n....') == 'YES'\nassert solution('####\\n....\\n####\\n....') == 'NO'\nassert solution('###\\n...\\n###\\n...') == 'YES'\nassert solution('###\\n...\\n###\\n...') == 'YES'\nassert solution('...\\n...\\n#.#\\n#.#') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".#..\") == \"YES\"\nassert solution(\".#..\") == \"YES\"\nassert solution(\".#..\") == \"YES\"\nassert solution(\".#..\") == \"YES\"\nassert solution(\".#..\") == \"YES\""
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n####\n.#..\n####\n....\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n####\n....\n####\n....\n\"\"\") == \"NO\"\n\"\"\""
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"####\\n.#..\\n####\\n....\") == \"YES\"\nassert solution(\"####\\n....\\n####\\n....\") == \"NO\""
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_case_1) == \"YES\"\nassert solution(test_case_2) == \"NO\"\n\n---Problem---\nYou are given two sequences, A and B. Both of them contain N characters.\n\nYou have to compare each character of the N characters of the sequences.\n\nIf A[i] == B[j], then:\n\n- You should print \"=\", i.e., the character of A.\n- If A[i]!= B[j], then:\n    - If the character of A[i] is \"!\", then you should print \"Uppercase of A[i]\";\n    - Otherwise, you should print \"Lowercase of A[i]\".\n- If B[j] is not equal to \"!\", then you should print \"Uppercase of B[j]\".\n- If B[j] is not equal to \"!\", then you should print \"Lowercase of B[j]\".\n\nInput\nThe first line contains T, the number of test cases. T test cases follow. The first line of each test case contains two integers, N and Q, the number of characters in the sequences and the number of comparisons respectively. The next two lines contain N and Q characters each, the first sequence A and the second one B.\n\nOutput\nFor each test case print a line containing the characters, where you want to print the corresponding character.\n\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 100\n1 \u2264 Q \u2264 N\nThe sum of N over all test cases does not exceed 100.\n\nSubtasks\nSubtask #1 (100 points): Original constraints\n\nExample Input\n3\n4 5\nbabu\nBabu\nbabu\n!babu\n\nExample Output\nUppercase of B\nUppercase of B\nLowercase of B\n!\n\n---Note---\nIn this problem, you should check for each character whether it is \"!\" or not.\n\n\"\"\""
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"####\\n.#..\\n####\\n....\") == \"YES\"\nassert solution(\"####\\n....\\n####\\n....\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"####\\n.#..\\n####\\n....\") == \"YES\"\nassert solution(\"####\\n....\\n####\\n....\") == \"NO\"\n"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"..##.\\n#####\\n##.#\\n....\") == 'YES'\nassert solution(\"....#\\n#..#\\n#..#\\n....\") == 'YES'\nassert solution(\"#..#\\n##.\\n..#\\n....\") == 'NO'\n"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"....\\n#..#\\n#..#\") == \"YES\"\nassert solution(\"#..#\\n#..#\") == \"YES\"\nassert solution(\"#...\\n###\") == \"YES\"\nassert solution(\"###\\n###\") == \"NO\"\nassert solution(\"..#\\n..#\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 6 1\\n1 2 3\") == \"2\"\nassert solution(\"4 40 50 10\\n10 20 30 25\") == \"2\"\nassert solution(\"5 25 35 10\\n10 10 20 10 20\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 5 6 1\n1 2 3\n''') == '2'\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 25 35 10\\n10 10 20 10 20') == '6'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(input())\nprint(solution(str(input())))\n\n---"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 6 1\\n1 2 3\\n') == '2'\nassert solution('4 40 50 10\\n10 10 20 10 20\\n') == '6'\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 6 1\\n1 2 3\") == 2\nassert solution(\"4 40 50 10\\n10 20 30 25\") == 2\nassert solution(\"5 25 35 10\\n10 10 20 10 20\") == 6\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 40 50 10 10 20 30 25') == '2'\nassert solution('5 25 35 10 10 10 20 10 20') == '6'\nassert solution('4 20 40 20 40') == '1'\nassert solution('4 20 50 20 50') == '0'\nassert solution('4 20 50 10 10') == '2'\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 5 6 1\n1 2 3\n''') == '2'\n\nassert solution('''4 40 50 10\n10 20 30 25\n''') == '2'\n\nassert solution('''5 25 35 10\n10 10 20 10 20\n''') == '6'\n\nassert solution('''5 25 35 10\n10 10 20 10 10\n''') == '6'\n\nassert solution('''4 40 50 10\n10 10 20 30 25\n''') == '0'\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 5 6 1\n1 2 3\n''') == '2'\nassert solution('''4 40 50 10\n10 10 20 10 20\n''') == '2'\nassert solution('''5 25 35 10\n10 10 20 10 20\n''') == '6'\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 6 1\\n1 2 3\") == \"2\"\nassert solution(\"4 40 50 10\\n10 10 20 10 20\") == \"2\"\nassert solution(\"5 25 35 10\\n10 10 20 10 20\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"6 1\\nWBWBW\"\n) == \"BWBW\"\n\nassert solution(\n\"7 3\\nWBWBW\"\n) == \"WWBWBW\"\n\nassert solution(\n\"6 4\\nBWBWBW\"\n) == \"BWBWBW\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BWBWBW\") == \"WBWBWW\"\nassert solution(\"BWBWBW\") == \"BWBWWW\"\nassert solution(\"BWBWBW\") == \"WBWBWW\"\nassert solution(\"BWBWBW\") == \"BWBWWW\"\nassert solution(\"BWBWBW\") == \"BWBWWW\"\n\n\"\"\""
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\nWWWWWW\") == \"WWBWWWW\"\nassert solution(\"6 4\\nBWBWBW\") == \"BBBWBWB\"\n\"\"\"\n\nfrom typing import List, Any\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BWBWBW\") == \"WBWBWB\"\nassert solution(\"WBWBWBW\") == \"WWBWBWW\"\nassert solution(\"BWBWBWW\") == \"BWBWBWW\"\nassert solution(\"WBWBWWB\") == \"WWBWBWW\"\nassert solution(\"WBWBWWWB\") == \"WWBWBWWW\"\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WBWBWBW\") == \"WWBWBWW\"\nassert solution(\"BWBWBW\") == \"BWBWBW\"\n\n\"\"\""
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BWBWBW\") == \"WBWBWB\"\nassert solution(\"BWWBWW\") == \"WWBWBWW\"\n\nassert solution(\"BWBWBW\", 2) == \"WBWBWWW\"\nassert solution(\"BWWBWW\", 2) == \"WWBWBWW\"\n\nassert solution(\"BWBWBW\", 3) == \"WBBBWWW\"\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2') == 'BWBW'\n\nassert solution('6 1') == 'WBBBWW'\n\nassert solution('7 3') == 'WWWWWWW'\n\nassert solution('6 4') == 'BWBWBW'\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('BWBWBW') == 'WBWBWB'\nassert solution('WWWBWW') == 'WWWBWW'\nassert solution('WWWWWWW') == 'WWWWWWW'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BWBWBW\") == \"WBWBWB\"\nassert solution(\"BWBWBW\") == \"WBWBWB\"\nassert solution(\"BWBWBW\") == \"WBWBWB\"\nassert solution(\"BWBWBW\") == \"WBWBWB\"\nassert solution(\"BWBWBW\") == \"WBWBWB\"\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BWBWBW\") == \"WBWBWW\"\nassert solution(\"WBWBWBW\") == \"WWBWBWW\"\nassert solution(\"BWBWBW\") == \"BWBWBW\"\nassert solution(\"BWBWBW\") == \"BWBWBW\"\nassert solution(\"BWBWBW\") == \"BWBWBW\"\n\"\"\"\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 8\\n6 2 9 2 7 2 3') == '6 5\\n1 2 4 6 7'\nassert solution('7 8\\n6 2 9 2 7 2 3') == '6 5\\n1 2 4 6 7'\nassert solution('7 5\\n6 2 9 2 7 2 3') == '6 5\\n1 2 4 6 7'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == '1 2', 'Test #1'\nassert solution('5 6') == '3 5', 'Test #2'\nassert solution('4 8') == '1 2 3', 'Test #3'\nassert solution('1 4') == '1 4', 'Test #4'\nassert solution('6 4') == '3 5', 'Test #5'\nprint('All tests passed!')\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6\") == \"2 3\"\n\"\"\"\n\nn, m = [int(x) for x in input().split(' ')]\na = [int(x) for x in input().split(' ')]\n\nlcma = 1\nbest = []\n\nfor i in range(n - 1, 0, -1):\n    if lcma % a[i - 1] == 0:\n        lcma *= a[i - 1]\n        best.append(i)\n\nkmax = 0\nfor i in range(n):\n    if m % a[i] == 0:\n        kmax = i\n        break"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 8\\n6 2 9 2 7 2 3\\n') == '6 5\\n1 2 4 6 7'\nassert solution('6 4\\n2 2 2 3 3 3\\n') == '2 3\\n1 2 3'\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"2 2\"\nassert solution(\"6 8\") == \"6 5\"\nassert solution(\"6 3\") == \"3 3\"\nassert solution(\"7 8\") == \"7 7\"\nassert solution(\"1 1\") == \"1 1\"\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n2 2 3 4\\n\") == \"2 3\\n1 2 3\"\nassert solution(\"7 8\\n6 2 9 2 7 2 3\\n\") == \"6 5\\n1 2 4 6 7\"\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5') == '2 3'\nassert solution('8 10') == '3 9'\nassert solution('6 8') == '1 2 4 6 7'\n\"\"\"\nimport sys"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2 2 2 3 3 3\") == \"2 3\"\nassert solution(\"4 7\\n2 2 2 3 3 3\") == \"2 4\"\nassert solution(\"5 10\\n2 2 2 3 3 3\") == \"2 5\"\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7\\n2 2 3 3\") == \"2 3\"\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n1 2\\n1 3\") == 8\nassert solution(\"1 4\\n1 2\\n1 3\") == 3\nassert solution(\"1 2\\n1 2\") == 1\nassert solution(\"4 10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == 49\nassert solution(\"4 8\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\") == 41\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\") == \"4\"\nassert solution(\"7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\") == \"41\"\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 8\n7 8 7 5 4 6 4 10\n1 6\n1 2\n5 8\n1 3\n3 5\n6 7\n3 4\n''') == '41'\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4') == '41'\n\"\"\""
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 3\\n1 2 3\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\") == \"41\"\nprint(\"Test 1 successful\")\n\n\"\"\""
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"8 4\") == \"3\"\nassert solution(\"8 6\") == \"6\"\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2\\n3 4\") == 3\nassert solution(\"3 2\\n1 2\\n3 4\\n1 4\\n2 1\\n3 3\\n4 5\\n5 6\") == 8\nassert solution(\"3 2\\n1 2\\n3 4\\n1 4\\n2 1\\n3 3\\n4 5\\n5 6\\n6 7\") == 0\nassert solution(\"3 2\\n1 2\\n3 4\\n1 4\\n2 1\\n3 3\\n4 5\\n5 6\\n6 7\\n1 6\\n2 7\\n3 8\") == 12\nassert solution(\"0 0\\n1 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 3\\n4 5\\n5 6\\n5 7\\n6 1\\n6 2\\n6 3\\n7 8\") == 0\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 4\\n2 1 3 2\\n1 2\\n1 3\\n3 4\") == \"8\"\nassert solution(\"0 3\\n1 2 3\\n1 2\\n2 3\\n3 4\") == \"3\"\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 8 7 5 4 6 4 10\") == \"41\"\n\"\"\"\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 4\\n2 1 3 2\\n1 2\\n1 3\\n3 4\") == \"8\"\nassert solution(\"0 3\\n1 2 3\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\") == \"3\"\nassert solution(\"4 8\\n7 8 7 5 4 6 4 10\\n1 6\\n1 2\\n5 8\\n1 3\\n3 5\\n6 7\\n3 4\") == \"41\"\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\n\n\"\"\"\n\nfrom math import sqrt\n\nfrom collections import Counter\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\n\n\"\"\""
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\n\"\"\"\n\nx, y = [int(i) for i in input().split()]"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 5') == '0 15 15 0'\nassert solution('-10 5') == '-15 0 0 15'\n\"\"\"\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 5') == '0 15 15 0'\n\nassert solution('-10 5') == '-15 0 0 15'\n\n\"\"\""
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 5') == '0 15 15 0'\n\nassert solution('-10 5') == '-15 0 0 15'\n\nassert solution('100 1000') == '100 1000 100 1000'\n\nassert solution('-100 1000') == '-100 1000 -100 1000'\n\nassert solution('10 10') == '0 10 10 0'"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\n\"\"\"\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4 2') == '2 2 1 1'\nassert solution('5 7') == '0 0 7 7'\nassert solution('1 1') == '0 0 1 1'\nassert solution('2 2') == '0 0 2 2'\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 5\") == \"0 15 15 0\"\n\"\"\"\nimport math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Point(self.x * other.x, self.y * other.y)\n\n    def __truediv__(self, other):\n        return Point(self.x / other.x, self.y / other.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __repr__(self):\n        return \"({}, {})\".format(self.x, self.y)\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 5') == '0 15 15 0'\n\nassert solution('-10 5') == '-15 0 0 15'\n\nassert solution('100 1000 0 -7') == '-16 -7 16 16'\n\nassert solution('7 -3 -4 6 -1 6') == '0 0 6 -1 6'\n\nassert solution('-2 3 1') == '-2 3 1 2'"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 7 8 3 8\") == 3"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\n'''\n"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 7 8 3 8\\n1\") == 3\n\"\"\""
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    6\n    4 1 7 8 3 8\n    1\n    \"\"\"\n) == \"3\"\n\nassert solution(\n    \"\"\"\n    3\n    1 1 1\n    1\n    \"\"\"\n) == \"1\"\n\nassert solution(\n    \"\"\"\n    1\n    1\n    2\n    \"\"\"\n) == \"0\"\n\"\"\"\n\"\"\""
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n4 1 7 8 3 8\\n1') == 3\n\"\"\"\n\nimport collections\nimport sys\nimport re\nimport math"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 7 8 3 8\") == 3\n\n\"\"\"\n\nn, lst = [int(s) for s in input().split()]\nt = int(input())\ndic = {i: 0 for i in range(1, n + 1)}\n\nfor k in lst:\n    dic[k] += 1\n\nans = 0\nfor v in dic.values():\n    ans += v // t\n\nprint(ans)\n"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\\\n4 1 7 8 3 8\\\\n1\") == \"3\"\nprint('Test pass.')"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1') == 1\n\n\"\"\"\n"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1\\n7\\n8\\n3\\n8\\n\") == 3\nassert solution(\"6\\n1\\n7\\n8\\n3\\n8\\n\") == 3\nassert solution(\"6\\n1\\n7\\n8\\n3\\n8\\n\") == 3\nassert solution(\"6\\n1\\n7\\n8\\n3\\n8\\n\") == 3\n\"\"\"\n\nn = int(input())\nt = list(map(int, input().split()))\n\nt.sort()\ns, f = 0, 0\n\nfor i in range(len(t)):\n    if i < len(t) - 1:\n        if t[i + 1] - t[i] >= n:\n            s += 1\n        else:\n            break\n    else:\n        s += 1\n\nprint(s)\n"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 7 8 3 8\\n1\") == 3\n\"\"\"\n\nimport collections"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n2 9\\n5 3 13') == 'YES\\n3 4 5'\n\nsolution(stdin)\n"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n2 9\\n5 3 13\") == \"YES\\n3 4 5\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\") == \"NO\"\nprint(solution(\"3 3\\n1 7 6\\n2 15 12\"))"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 7 6\\n2 15 12') == 'NO'\nassert solution('2 3\\n2 9\\n5 3 13') == 'YES'\nassert solution('3 3\\n1 7 6\\n2 15 12') == 'YES'\nassert solution('3 3\\n1 7 6\\n2 15 12\\n3 2 9') == 'YES'\n"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n2 9\\n5 3 13\\n\") == \"YES\\n3 4 5\\n6 7 8\""
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"2 3\n2 9\n5 3 13\"\"\") == \"\"\"YES\n3 4 5\n6 7 8\"\"\"\nassert solution(\"\"\"3 3\n1 7 6\n2 15 12\"\"\") == \"\"\"NO\"\"\"\n\"\"\"\nassert solution(\"\"\"2 3\n2 9\n5 3 13\n0 0\n0 0\n0 0\"\"\") == \"\"\"YES\n3 4 5\n6 7 8\"\"\"\n\"\"\"\nassert solution(\"\"\"3 3\n1 7 6\n2 15 12\n0 0\n0 0\n0 0\"\"\") == \"\"\"NO\"\"\"\n\nassert solution(\"\"\"3 3\n2 9\n5 3 13\n0 0\n0 0\n0 0\"\"\") == \"\"\"NO\"\"\"\n\"\"\"\n"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 3\n2 9\n5 3 13''') == 'YES\\n3 4 5\\n6 7 8'\nassert solution('''3 3\n1 7 6\n2 15 12''') == 'NO'\nassert solution('''1 1\n1 1''') == 'YES\\n1 1'\nassert solution('''3 2\n5 3 13\n5 3 13''') == 'NO'\nassert solution('''4 4\n1 1 1 1\n1 2 3 4\n3 4 5 6\n7 8 9 10''') == 'YES\\n1 2 3\\n4 5 6\\n7 8 9\\n10'"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"YES\\n1 2 3 4\\n2 4 6 8\\n3 6 9 12\\n4 8 12 16\"\nassert solution(\"2 3\") == \"YES\\n1 2 3\"\nassert solution(\"2 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n2 9\\n5 3 13\") == \"YES\\n3 4 5\"\nassert solution(\"3 3\\n1 7 6\\n2 15 12\") == \"NO\"\n"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n1 3 4 5 2\\n2 2 1 1 2\\n2 3 1 2 3') == 'YES\\n3 3 4 5\\n2 3 4 1'\nassert solution('3 4\\n1 2 3\\n2 1 4\\n2 3 1') == 'NO'\nassert solution('5 5\\n1 8 2 0 7\\n2 2 1 5 0\\n2 2 2 1 5\\n3 3 3 3 1\\n4 1 2 1 2') == 'YES\\n1 8 2 7\\n2 2 1 5\\n2 2 2 1 5\\n3 3 3 3 1'"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n2 9\\n6 2 13\\n1 7 6\\n5 3 13\") == \"YES\\n3 4 5\\n6 7 8\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1 2\n1\n0\"\"\") == \"500000004\"\nassert solution(\"\"\"1 2\n1\n0\"\"\") == \"0\"\nassert solution(\"\"\"1 2\n1\n0\"\"\") == \"0\"\nassert solution(\"\"\"7 26\n0 15 12 9 13 0 14\n11 1 0 13 15 12 0\"\"\") == \"230769233\"\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n1\\n0\") == \"500000004\"\nassert solution(\"1 2\\n1\\n0\") == \"0\"\nassert solution(\"7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\") == \"230769233\"\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n0\\n1\") == \"500000004\"\nassert solution(\"1 2\\n1\\n0\") == \"0\"\nassert solution(\"1 2\\n0\\n1\\n1\") == \"230769233\""
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n1\\n0\") == \"500000004\"\nassert solution(\"1 2\\n1\\n0\") == \"0\"\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n0\\n1') == '500000004'\nassert solution('1 2\\n1\\n0') == '0'\nassert solution('7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0') == '230769233'"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n0\") == '500000004'\nassert solution(\"1 2\\n1\") == '0'\nassert solution(\"7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\") == '230769233'\nassert solution(\"7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\") == '230769233'\n\n\"\"\"\nfrom typing import List\nimport math\nfrom collections import Counter, OrderedDict, defaultdict, deque\nimport unittest\nimport itertools\n\n\nclass TestCalculate(unittest.TestCase):\n    def test_example1(self):\n        assert solution(\"1 2\\n0\") == '500000004'\n        "
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\") == \"500000004\"\nassert solution(\"1 2\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1\\n0') == '500000004'\nassert solution('1 2\\n1\\n0') == '0'\nassert solution('7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0') == '230769233'"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"500000004\"\n\"\"\"\n\nimport sys\n\n\"\"\"\nn, m = [int(x) for x in sys.stdin.readline().split()]\n\na = [int(x) for x in sys.stdin.readline().split()]\nb = [int(x) for x in sys.stdin.readline().split()]\n\nfrom collections import Counter\n\nfreq_a = Counter(a)\nfreq_b = Counter(b)\n\nr = 1\nfor k, v in freq_a.items():\n    if k in freq_b:\n        r = r * (freq_b[k] // v) % (10 ** 9 + 7)\n\nprint(r)\n\"\"\"\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 2''') == '500000004'\nassert solution('''1 2''') == '0'\nassert solution('''7 26\n15 12 9 13 0 14\n11 1 0 13 15 12 0''') == '230769233'\n\n\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\nS1 = list(map(int, input().split()))\nS2 = list(map(int, input().split()))\n"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 8') == '2'\n"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 14\") == \"2\"\nprint(\"Passed\")\n"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 14') == '2'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 14\\n') == '2'\nassert solution('5 45\\n') == '5'\nassert solution('10 25\\n') == '5'\n\"\"\"\n\nimport math\n\nn, m = list(map(int, input().split(' ')))"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 14\") == \"2\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n3 5') == 2\n\"\"\"\n"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 14\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 14\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 14\") == 2\n\"\"\""
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 14') == 2\n\"\"\"\n"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 2 1\\n1 3 1\\n2 3 3') == 1\nassert solution('2 2\\n1 2 3\\n1 2 1') == 1\n\"\"\"\n\nimport sys\n\nclass Edge:\n    def __init__(self, source: int, target: int, distance: int):\n        self.source = source\n        self.target = target\n        self.distance = distance"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 1\\n1 3 1\\n2 3 3\") == 1\n\"\"\""
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2 1\\n1 3 1\\n2 3 3\") == \"1\"\nassert solution(\"5 5\\n1 2 1\\n1 3 1\\n2 3 2\\n2 4 1\\n3 4 1\\n3 5 1\\n4 5 1\\n4 5 3\") == \"4\"\n\"\"\"\n\nimport sys\nimport queue\n\nclass Solution:\n    def __init__(self, N: int, M: int, adj: list):\n        self.N = N\n        self.M = M\n        self.adj = adj\n        self.edges = set()\n        self.discovered = [False] * N\n        self.parent = [None] * N\n        self.s = 0\n        self.max_distance = -1\n\n    def get_distance(self, a: int, b: int) -> int:\n        return self.adj[a][b]\n\n    def get_shortest_distance(self, v: int) -> int:\n        shortest = -1\n        for i, distance in enumerate(self.discovered):\n            if i!= v and distance is True:\n                shortest = i\n                break\n        return shortest\n\n    def get_distance_to_shortest(self, v: int) -> int:\n        distance_to_shortest = -1\n        for i in range(self.N):\n            if i!= v and self.discovered[i] is True:\n                if distance_to_shortest == -1 or self.adj[v][i] < distance_to_shortest:\n                    distance_to_shortest = self.adj[v][i]\n        return distance_to_shortest\n\n    def get_shortest_distance_to_shortest(self, v: int) -> int:\n        distance_to_shortest = -1\n        for i in range(self.N):\n            if i!= v and self.discovered[i] is True:\n                if distance_to_shortest == -1 or self.adj[v][i] < distance_to_shortest:\n                    distance_to_shortest = self.adj[v][i]\n        return distance_to_shortest\n\n    def dijkstra(self, v: int):\n        self.discovered[v] = True\n        self.s += 1\n\n        for i, distance in enumerate(self.adj[v]):\n            if distance!= -1 and distance is not False and self.discovered[i] is False:\n                if distance < self.get_shortest_distance(v) or self.get_shortest_distance(v) == -1:\n                    self.parent[i] = v\n                    self.discovered[i] = True\n                    self.adj[i][v] = distance\n                    self.adj[v][i] = distance\n                    self.s += 1\n\n        for i in range(self.N):\n            if self.discovered[i] is False:\n                distance_to_shortest = self.get_distance_to_shortest(i)\n                distance_to_shortest_to_shortest = self.get_shortest_distance_to_shortest(i)\n                if distance_to_shortest == -1 or distance_to_shortest < distance_to_shortest_to_shortest:\n                    self.parent[i] = v\n                    self.discovered[i] = True\n                    self.s += 1\n                    self.max_distance = max(self.max_distance, distance_to_shortest)\n                else:\n                    self.adj[v][i] = distance_to_shortest\n                    self.adj[i][v] = distance_to_shortest\n\n    def main(self):\n        for i in range(self.M):\n            self.edges.add((self.adj[i][0], self.adj[i][1]))\n\n        while self.s!= self.N - 1:\n            self.dijkstra(self.s)\n\n        print(self.max_distance)"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 1\\n1 3 1\\n2 3 3\") == \"1\"\n\n-----\n3 3\n1 2 1\n1 3 1\n2 3 3\n2 3 2\n\n-----\n4 2\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n\n-----\n5 4\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n\n-----\n6 6\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n\n-----\n7 7\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n1 8 1\n2 8 2\n2 3 2\n3 4 3\n1 9 1\n5 9 3\n2 9 2\n3 9 3\n\n-----\n8 8\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n1 8 1\n2 8 2\n2 3 2\n3 4 3\n1 9 1\n5 9 3\n2 9 2\n3 9 3\n\n-----\n9 9\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n1 8 1\n2 8 2\n2 3 2\n3 4 3\n1 9 1\n5 9 3\n2 9 2\n3 9 3\n\n-----\n10 10\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n1 8 1\n2 8 2\n2 3 2\n3 4 3\n1 9 1\n5 9 3\n2 9 2\n3 9 3\n\n-----\n11 11\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n1 8 1\n2 8 2\n2 3 2\n3 4 3\n1 9 1\n5 9 3\n2 9 2\n3 9 3\n\n-----\n12 12\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n1 8 1\n2 8 2\n2 3 2\n3 4 3\n1 9 1\n5 9 3\n2 9 2\n3 9 3\n\n-----\n13 13\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n1 8 1\n2 8 2\n2 3 2\n3 4 3\n1 9 1\n5 9 3\n2 9 2\n3 9 3\n\n-----\n14 14\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n1 8 1\n2 8 2\n2 3 2\n3 4 3\n1 9 1\n5 9 3\n2 9 2\n3 9 3\n\n-----\n15 15\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n1 8 1\n2 8 2\n2 3 2\n3 4 3\n1 9 1\n5 9 3\n2 9 2\n3 9 3\n\n-----\n16 16\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n1 8 1\n2 8 2\n2 3 2\n3 4 3\n1 9 1\n5 9 3\n2 9 2\n3 9 3\n\n-----\n17 17\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n1 8 1\n2 8 2\n2 3 2\n3 4 3\n1 9 1\n5 9 3\n2 9 2\n3 9 3\n\n-----\n18 18\n1 2 1\n1 3 1\n2 3 2\n1 4 1\n3 4 3\n1 5 1\n2 5 2\n2 3 2\n3 4 3\n1 6 1\n5 6 3\n1 7 1\n3 7 3\n3 5 3\n4 6 3\n5 7 3\n1 8 1\n2 8 2\n2 3 2\n3 4 3\n1 9 1\n5 9 3\n2 9 2"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2 1\\n1 3 1\\n2 3 3\") == 1\n\nassert solution(\"5 6\\n1 2 1\\n2 3 1\\n4 5 3\\n3 4 1\\n3 5 1\\n4 3 1\") == 2\n\nassert solution(\"6 4\\n1 2 1\\n1 3 1\\n2 3 1\\n2 4 1\\n2 5 3\\n3 4 1\\n3 5 1\\n4 5 1\\n4 6 1\") == 1\n\nassert solution(\"5 5\\n1 2 1\\n1 3 1\\n2 3 1\\n2 4 1\\n2 5 3\\n3 4 1\\n3 5 1\\n4 5 1\\n4 6 1\") == 0\n\nassert solution(\"6 5\\n1 2 1\\n1 3 1\\n2 3 1\\n2 4 1\\n2 5 3\\n3 4 1\\n3 5 1\\n4 5 1\\n4 6 1\") == 1\n\n\"\"\""
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 4 1\\n2 3 1\") == \"1\"\nassert solution(\"4 4\\n1 2 1\\n3 4 1\\n2 3 3\") == \"0\"\nassert solution(\"8 6\\n1 2 1\\n3 4 1\\n4 5 1\\n5 6 1\\n2 3 3\\n4 6 3\\n3 1 2\\n1 4 2\\n3 5 2\") == \"4\""
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 1\\n1 3 1\\n2 3 3\") == 1\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 1\\n1 3 1\\n2 3 3') == 1\nassert solution('3 3\\n1 2 1\\n1 3 1\\n2 3 3') == 0\nassert solution('3 3\\n1 2 1\\n1 3 1\\n2 3 3') == 0\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2 1\\n1 3 1\\n2 3 3') == '1'\n\n\"\"\""
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3 1\\n1 4 2\\n2 3 2\") == \"1\"\nassert solution(\"4 4\\n1 3 1\\n1 4 2\\n2 3 2\\n2 4 4\") == \"0\"\n\"\"\""
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('?2??5') == '768'\nassert solution('0??5') == '8'\nassert solution('??2??5') == '768'\nassert solution('??2??') == '0'\nassert solution('??') == '0'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"???5???\") == \"138\"\n\"\"\"\n"
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('?2??5') == '768'\n\"\"\""
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"??2??5\") == \"768\"\nprint('Hooray!')\n\n\"\"\"\nimport re\n\npattern = r'[0-9]|[?]'\nmatches = re.findall(pattern, stdin)\n\nans = len([i for i in matches if int(i) % 5 == 0]) % (10**9+7)\n\nprint(ans)\n"
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"??2??5\") == \"768\"\n\"\"\"\n"
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?2??5\") == \"768\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('??2??5') == '768'\n\"\"\"\n"
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"??2??5\") == \"768\"\n\"\"\"\n\nimport sys\nfrom functools import reduce\n\nS = sys.stdin.readline().strip()\nprint(sum(int(reduce(lambda x, y: x + y if y!= '?' else x * 10 + 0, S, '')) % 13 == 5 % 13))\n"
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('??2??5') == \"768\"\n\"\"\""
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1??5??8') == '8'\nassert solution('??2??5') == '8'\nassert solution('??0??0??0??5') == '8'\n\"\"\"\n\nimport re"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 -3\\n4 -2 3 2 -3') == 'YES'\nassert solution('7 2\\n5 3 -2 1 -1 5\\n3 -5 2 5') == 'NO'\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\") == \"YES\"\nassert solution(\"5 2\\n5 3 -2 1 -1 5\") == \"NO\"\nassert solution(\"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\") == \"YES\"\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\") == \"YES\"\nassert solution(\"5 2\\n5 3 -2 1 -1 5\") == \"NO\"\nassert solution(\"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\\n\") == 'YES'\nassert solution(\"5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\\n\") == 'NO'\nassert solution(\"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\\n\") == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\\n\") == \"YES\"\nassert solution(\"5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\\n\") == \"NO\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\\n\") == \"YES\"\nassert solution(\"5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\\n\") == \"NO\"\nassert solution(\"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\\n\") == \"YES\"\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\\n\") == \"YES\"\n\"\"\"\n\nfrom typing import Dict, List, Tuple\nimport sys\nimport math\n\nn, m = tuple(map(int, input().split()))\ngroups = []\nfor _ in range(m):\n    group = list(map(int, input().split()))\n    groups.append(group)\n\n\nclass Universe:\n    def __init__(self, m: int, universes: Dict[str, int], traitors: Dict[str, List[int]]) -> None:\n        self.traitors = traitors\n        self.universes = universes\n        self.traitor_count = 0\n        for universe, ricks in universes.items():\n            if ricks >= 0:\n                self.traitors[universe] = ricks\n            else:\n                self.traitor_count += ricks\n\n        self.traitor_group_count = 0\n        for group in groups:\n            if len(group) > 1:\n                self.traitor_group_count += 1\n\n    def is_valid(self) -> bool:\n        return self.traitor_group_count == self.traitor_count\n\n    def get_traitors_count(self) -> int:\n        return self.traitor_count\n\n    def get_universes_count(self) -> int:\n        return len(self.universes)\n\n    def get_traitor_groups_count(self) -> int:\n        return self.traitor_group_count\n"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 -3\\n4 -2 3 2 -3\") == \"YES\"\nassert solution(\"5 2\\n5 3 -2 1 -1 5\\n3 -5 2 5\") == \"NO\"\nassert solution(\"7 2\\n3 -1 6 7\\n7 -5 4 2 4 7 -3 4\") == \"YES\"\n\"\"\""
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\") == \"2\"\nassert solution(\"4 2\\n3 1 2 4\") == \"3\"\nassert solution(\"6 2\\n6 5 3 1 2 4\") == \"6\"\nassert solution(\"2 10000000000\\n2 1\") == \"2\"\nassert solution(\"1 1\\n1\") == \"1\"\n"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n1 2\n''') == '2'\n"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n3 1 2 4\") == \"3\"\nassert solution(\"4 2\\n3 1 2 4\") == \"3\"\nassert solution(\"2 2\\n1 2\") == \"2\"\nassert solution(\"2 10000000000\\n2 1\") == \"2\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn, k = list(map(int, input().split()))\n\nd = dict(zip(map(int, input().split()), range(n)))"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('1 1') == '1'\nassert solution('2 1') == '1'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"4\"\nassert solution(\"6 2\\n6 5 3 1 2 4\") == \"6\"\nassert solution(\"2 10000000000\\n2 1\") == \"2\"\nassert solution(\"4 2\\n6 5 3 1 2 4\") == \"6\"\nassert solution(\"4 2\\n1 2 3 4\") == \"4\"\n"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n3 1 2 4') == '3'\nassert solution('6 2\\n6 5 3 1 2 4') == '6'\nassert solution('2 1000000000\\n2 1') == '2'\n"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n3 1 2 4\") == \"2\"\nassert solution(\"6 2\\n6 5 3 1 2 4\") == \"6\"\n"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2\\n\") == \"2\"\nassert solution(\"4 2\\n3 1 2 4\\n\") == \"3\"\nassert solution(\"6 2\\n6 5 3 1 2 4\\n\") == \"6\"\n"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2\") == \"2\"\nassert solution(\"4 2\\n3 1 2 4\") == \"3\"\nassert solution(\"6 2\\n6 5 3 1 2 4\") == \"6\"\nassert solution(\"2 10000000000\\n2 1\") == \"2\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 2\\n1 3 5\"\n) == \"5\"\n\nassert solution(\n    \"5 5\\n1 2 1 1 1\"\n) == \"3\"\n\nassert solution(\n    \"7 7\\n4 1 2 4 3 4 4\"\n) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 3 5') == '5'\nassert solution('5 5\\n1 2 1 1 1') == '3'\nassert solution('7 7\\n4 1 2 4 3 4 4') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3 5\") == 5\n\"\"\"\n"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3 5\") == \"5\"\nassert solution(\"5 5\\n1 2 1 1 1\") == \"3\"\nassert solution(\"7 7\\n4 1 2 4 3 4 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == '3'\nassert solution('7 7') == '5'\nassert solution('1 2 1 1 1') == '3'\nassert solution('4 1 2 4 3 4 4') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 4 3 4 4\") == \"3\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"7 7\") == \"5\"\nassert solution(\"1 2 1 1 1\") == \"2\"\nassert solution(\"1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 3 5\") == \"5\"\nassert solution(\"5 5\\n1 2 1 1 1\") == \"3\"\nassert solution(\"7 7\\n4 1 2 4 3 4 4\") == \"5\"\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 2 4 3 4 4') == '3'\nassert solution('7 7') == '3'\nassert solution('7 7 1 2 1 1 1') == '5'"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2') == '5'\nassert solution('7 7') == '3'\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nNonZERO') == '5'\nassert solution('24\\nthis is zero answer text') == '0'\nassert solution('24\\nHarbour Space University') == '1'\n\n\n\"\"\""
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\nnonzero''') == '5'\nassert solution('''24\nharbour space university''') == '0'\nassert solution('''24\nthis is zero answer text''') == '0'\n\n'''\nFrom the solution:"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('nonZero') == '5'\nassert solution('zero answer text') == '0'\nassert solution('Harbour Space University') == '1'\nassert solution('the quick brown fox jumps over the lazy dog') == '27'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\nNonZERO') == '5'\nassert solution('24\\nthis is zero answer text') == '0'\nassert solution('24\\nHarbour Space University') == '1'\n\"\"\""
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"NonZERO\") == \"5\"\nassert solution(\"this is zero answer text\") == \"0\"\nassert solution(\"Harbour Space University\") == \"1\"\n\n\"\"\"\n\nimport re\nimport math\n\nn = int(input())\ntext = input()\npattern = r'\\b[a-z][A-Z]{2}\\b'\n\nwords = re.findall(pattern, text)\nvolume = 0\n\nfor word in words:\n    volume += len(word)\n\nprint(volume)\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\ntext\\nHarbour Space University\") == \"5\"\nassert solution(\"24\\ntext\\nHarbour Space University\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nNonZero\") == \"5\"\nassert solution(\"24\\nthis is zero answer text\") == \"0\"\nassert solution(\"24\\nHarbour Space University\") == \"1\"\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\nthis is zero answer text') == 5\nassert solution('24\\nHarbour Space University') == 0\n\"\"\"\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"NonZERO\") == 5\n\nassert solution(\"this is zero answer text\") == 0\n\nassert solution(\"Harbour Space University\") == 1\n\"\"\"\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 10\n3 90\n12 0\n9 70\n5 50\n7 0''') == '50'\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\nassert solution(\"5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\") == \"-1\"\n\n\n\"\"\"\n\n\nimport sys\n\nn, s = [int(i) for i in sys.stdin.readline().split()]\n\ncost = []\nfor i in range(n):\n    x, y = [int(i) for i in sys.stdin.readline().split()]\n    cost.append((x, y))\n\nsugar = cost[0][0]\nsweet = cost[0][1]\n\nfor i in range(1, n):\n    sugar = min(sugar, cost[i][0])\n    sweet = min(sweet, cost[i][1])\n    if sugar < cost[i][0]:\n        sweet = max(sweet, (sugar * 100) + cost[i][1])\n        sugar = cost[i][0]"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\n\n\"\"\"\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == 50\n\"\"\"\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10\\n1 1\\n2 2\\n3 3') == '5'\nassert solution('4 10\\n1 100\\n2 20\\n3 30') == '-1'\nassert solution('4 10\\n1 100\\n2 20\\n3 30\\n4 40\\n5 50') == '4'\n\n-----Solution-----\n\"\"\"\n\nn, s = map(int, stdin.readline().strip().split())\ndollars = s // 100\ns = s % 100\n"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\nassert solution(\"5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\") == -1\nassert solution(\"5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\\n7 0\") == \"50\"\n\n\"\"\"\n\nimport re\n\nn, s = map(int, input().split())\n\nnums = []\nfor _ in range(n):\n    nums.append(list(map(int, re.split(r'\\s+', input()))))"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0\") == \"50\"\nassert solution(\"5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0') == '50'\nassert solution('5 5\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50') == '-1'\nassert solution('5 10\\n3 90\\n12 0\\n9 70\\n5 50\\n7 0') == '50'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 -1\") == \"1\"\nassert solution(\"1 3 1\") == \"1\"\nassert solution(\"3 3 -1\") == \"16\"\n\n\n\n\n\"\"\""
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 -1\n''') == '1'\nassert solution('''\n1 3 1\n''') == '1'\nassert solution('''\n3 3 -1\n''') == '16'\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 -1\") == '1'\nassert solution(\"1 1 -1\") == '1'\nassert solution(\"3 3 -1\") == '16'\nassert solution(\"3 4 4\") == '2'\nassert solution(\"3 5 5\") == '15'\n\nimport math\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 -1\") == 1\nassert solution(\"1 3 1\") == 1\nassert solution(\"3 3 -1\") == 16\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('1 1 -1') == 1\nassert solution('1 3 1') == 1\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 -1') == 1\nassert solution('1 3 1') == 1\nassert solution('3 3 -1') == 16\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 -1\") == \"1\"\nassert solution(\"1 3 1\") == \"1\"\nassert solution(\"3 3 -1\") == \"16\"\n\"\"\""
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 -1\\n') == '1'\n\"\"\""
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 -1') == 1\nassert solution('1 3 1') == 1\nassert solution('3 3 -1') == 16\n\n\"\"\"\n\n\nfrom functools import reduce"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 -1\") == \"16\"\nassert solution(\"3 3 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"NO\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"YES\"\nassert solution(\"300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"YES\"\n"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"NO\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"YES\"\nassert solution(\"300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"YES\"\n"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2\\n2 3\") == \"YES\"\nassert solution(\"2 3\\n1 3\\n1 4\") == \"NO\""
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\"\n) == 'NO'\n\nassert solution(\n\"\"\"\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\"\n) == 'YES'\n\nassert solution(\n\"\"\"\n300000 5\n1 2\n1 2\n1 2\n1 2\n1 2\n\"\"\"\n) == 'YES'\n\nassert solution(\n\"\"\"\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\"\n) == 'NO'\n\"\"\"\n\n\n\"\"\""
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == 'NO'\nassert solution('5 4\\n1 2\\n2 3\\n3 4\\n4 5') == 'YES'\nassert solution('300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2') == 'YES'\n\na, b = map(int, stdin.split())\npairs = [list(map(int, stdin.split())) for _ in range(b)]\nprint(\"YES\") if not any(any(x == p[0] or x == p[1] for p in pairs) for x in range(1, a + 1)) else print(\"NO\")\n"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == 'NO'\nassert solution('5 4\\n1 2\\n2 3\\n3 4\\n4 5') == 'YES'\nassert solution('300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2') == 'YES'\n"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 2\\n1 3\\n1 4\") == \"NO\"\nassert solution(\"2 1\\n1 2\\n1 3\\n1 4\") == \"YES\"\nassert solution(\"5 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"YES\"\nassert solution(\"100 4\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == 'NO'\n\nassert solution('300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2') == 'YES'\n\nassert solution('5 4\\n1 2\\n2 3\\n3 4\\n4 5') == 'YES'\n\n\"\"\""
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"NO\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"YES\"\nassert solution(\"300000 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"YES\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"YES\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2\\n1 2\\n1 2\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\naaa\\nba\\n\") == 1\nassert solution(\"1 3 1\\aaa\\ba\\n\") == 1\nassert solution(\"1 3 1\\aaa\\ba\\n\") == 1\nassert solution(\"5 5\\aaa\\aaa\\ba\\n\") == -1\nassert solution(\"5 5\\aaa\\aaa\\ba\\n\") == -1\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaa\") == -1\nassert solution(\"ba\") == 1\nassert solution(\"bb\") == 1\nassert solution(\"abc\") == 3\nassert solution(\"abcba\") == 3\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 1') == '1', 'Test 1'\nassert solution('2 3 1') == '1', 'Test 2'\nassert solution('3 3 1') == '-1', 'Test 3'\nassert solution('2 3 5') == '-1', 'Test 4'\nassert solution('3 3 3') == '-1', 'Test 5'\n\n\"\"\"\n\nimport unittest\nfrom collections import deque\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('aa') == ''\nassert solution('aaa') == ''\nassert solution('aa') == ''\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 1\\nba\\nac\") == \"1\\n\"\nassert solution(\"3\\n1 3 1\\naa\\nba\\nac\") == \"-1\\n\"\nassert solution(\"2\\n5 5\\nbbb\\naaa\") == \"-1\\n\"\nassert solution(\"2\\n3 3\\naa\\nba\\nac\") == \"-1\\n\"\n\"\"\"\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\naaa\\nba\\nac\") == \"1\"\nassert solution(\"2 5\\nba\\nac\") == \"-1\"\nassert solution(\"2 3\\nba\\naa\") == \"1\"\nassert solution(\"1 3\\naa\") == \"-1\"\nassert solution(\"2 3\\nba\\nac\") == \"1\"\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 4\") == \"1\"\nassert solution(\"2 3 1\") == \"1\"\nassert solution(\"2 3 1\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 3') == '1'\nassert solution('1 3 1') == '1'\nassert solution('5 5') == '1'\nassert solution('3 3') == '-1'\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 3\\naaa\\naa\") == \"1\"\nassert solution(\"2\\n3 3\\nbbb\\naaa\") == \"1\"\nassert solution(\"2\\n3 3\\naaa\\naa\") == \"1\"\nassert solution(\"2\\n3 3\\naaa\\naa\") == \"1\"\nassert solution(\"1\\n3\\na\\nb\\na\") == \"0\"\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 3 1\\nba') == '1'\nassert solution('3\\n1 3 1\\naa') == '-1'\nassert solution('2\\n5 5\\nbbb\\naaa') == '-1'\n\n\"\"\"\n\nn = int(stdin.readline().strip())\nc = list(map(int, stdin.readline().strip().split()))\ns = [stdin.readline().strip() for i in range(n)]"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '9'\nassert solution('1 2 10 3') == '60'\nassert solution('1 10 3') == '60'\nassert solution('2 10 3') == '60'\nassert solution('3 10 3') == '60'\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"9\"\nassert solution(\"1 10 2\") == \"60\"\nassert solution(\"10 2 3\") == \"60\"\nassert solution(\"10 10 2\") == \"100\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"9\"\nassert solution(\"1 10 2\") == \"60\"\nassert solution(\"2 10 3\") == \"60\"\nassert solution(\"10 10 10\") == \"5050\"\nassert solution
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1+2*3=7') == '7'\nassert solution('1*(2+3)=5') == '5'\nassert solution('1*2*3=6') == '6'\nassert solution('1+2*3=9') == '9'\n\"\"\""
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"9\"\nassert solution(\"1\\n10\\n3\\n\") == \"60\"\nassert solution(\"1\\n2\\n3\\n\") == \"9\"\nassert solution(\"1\\n2\\n3\\n\") == \"9\"\nassert solution(\"1\\n2\\n3\\n\") == \"9\"\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n') == '9'\nassert solution('2 10 3\\n') == '60'\nassert solution('1 10 3\\n') == '5'\n\"\"\"\nimport sys\nimport os\nfrom io import StringIO\nimport unittest\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3') == '9'\nassert solution('1\\n3\\n2') == '9'\nassert solution('2\\n3\\n1') == '9'\nassert solution('3\\n1\\n2') == '9'\nassert solution('3\\n2\\n1') == '9'\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '9'\nassert solution('1 2 10 3') == '60'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '9'\n\"\"\"\n\n\nimport sys\na, b, c = [int(i) for i in input().split()]"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 2\") == \"0 3\"\nassert solution(\"8 4 3\") == \"7 8 3\"\nassert solution(\"10 2 2\") == \"0 1 4\"\nassert solution(\"8 4 1\") == \"-1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 2\\n') == '-1'\nassert solution('3 2 2\\n') == '0 3'\nassert solution('8 4 3\\n') == '7 8 3'\nassert solution('8 5 2\\n') == '0 0 1'\nassert solution('10 2 2\\n') == '-1'\n\"\"\"\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 2\\n\") == \"0 3\"\n\nassert solution(\"8 4 3\\n\") == \"7 8 3\\n0 1 4\\n6 0 5\\n0 2 0\\n\"\n\nassert solution(\"10 2 2\\n\") == \"-1\"\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 2') == '0 3'\nassert solution('8 4 3') == '7 8 3'\nassert solution('10 2 2') == '-1'\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 2\") == \"0 3\"\nassert solution(\"8 4 3\") == \"7 8 3\"\nassert solution(\"10 2 2\") == \"0 1 4\"\nassert solution(\"1 2\") == \"0 0\"\nassert solution(\"2 1\") == \"-1\"\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 2\") == \"0 3\"\n\"\"\"\n\nn,a,b = map(int, input().split())"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3 2 2) == \"0 3\"\nassert solution(8 4 3) == \"7 8 3\"\nassert solution(10 2 2) == \"-\"\nassert solution(8 5 3) == \"7 8 3\"\n\n'''"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 2\\n\") == \"0 3\"\n\nassert solution(\"8 4 3\\n\") == \"7 8 3\"\n\nassert solution(\"10 2 2\\n\") == \"-1\"\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 2\\n') == '0 3'\n\"\"\""
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == \"0 3\"\nassert solution(\"10 2 2\") == \"7 8 3\"\nassert solution(\"8 4 3\") == \"7 8 3\"\nassert solution(\"8 4 3\")!= \"0 1 4\"\nassert solution(\"8 4 3\")!= \"6 0 5\"\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n50 85 250\\n10 15 25') == \"Limak\"\nassert solution('3 6\\n50 85 250\\n10 15 25') == \"Radewoosh\"\nassert solution('8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76') == \"Tie\""
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 9\\n10 20 30 40 50 60 70 80\\n10 10 58 63 71 72 75 76\\n\") == 'Radewoosh'\nassert solution(\"6 3\\n10 20 30 40 50 60\\n10 10 58 63 71 72 75\\n\") == 'Radewoosh'\nassert solution(\"7 9\\n10 20 30 40 50 60 70 80\\n10 10 58 63 71 72 75 76\\n\") == 'Tie'\nassert solution(\"7 9\\n10 20 30 40 50 60 70 80\\n10 10 58 63 71 72 75 76\\n\") == 'Tie'\nassert solution(\"3 6\\n10 20 30 40 50\\n10 10 58 63 71 72 75\\n\") == 'Radewoosh'\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2\n50 85 250\n10 15 25''') == 'Limak'\nassert solution('''3 6\n50 85 250\n10 15 25''') == 'Radewoosh'\nassert solution('''8 1\n10 20 30 40 50 60 70 80\n8 10 58 63 71 72 75 76''') == 'Tie'\nassert solution('''8 1\n10 20 30 40 50 60 70 80\n8 10 58 63 71 72 75 76''') == 'Tie'\n\n----Test 2----\n\n3 2\n50 85 250\n10 15 25\n\n3 6\n50 85 250\n10 15 25\n\n8 1\n10 20 30 40 50 60 70 80\n8 10 58 63 71 72 75 76\n\n8 1\n10 20 30 40 50 60 70 80\n8 10 58 63 71 72 75 76\n\n2 2\n50 85 250\n10 15 25\n\n2 2\n50 85 250\n10 15 25\n\n4 2\n50 85 250\n10 15 25\n\n4 2\n50 85 250\n10 15 25\n\n7 2\n50 85 250\n10 15 25\n\n7 2\n50 85 250\n10 15 25\n\n11 2\n50 85 250\n10 15 25\n\n11 2\n50 85 250\n10 15 25\n\n9 2\n50 85 250\n10 15 25\n\n9 2\n50 85 250\n10 15 25\n\n12 2\n50 85 250\n10 15 25\n\n12 2\n50 85 250\n10 15 25\n\n15 2\n50 85 250\n10 15 25\n\n15 2\n50 85 250\n10 15 25\n\n16 2\n50 85 250\n10 15 25\n\n16 2\n50 85 250\n10 15 25\n\n18 2\n50 85 250\n10 15 25\n\n18 2\n50 85 250\n10 15 25\n\n19 2\n50 85 250\n10 15 25\n\n19 2\n50 85 250\n10 15 25\n\n21 2\n50 85 250\n10 15 25\n\n21 2\n50 85 250\n10 15 25\n\n22 2\n50 85 250\n10 15 25\n\n22 2\n50 85 250\n10 15 25\n\n24 2\n50 85 250\n10 15 25\n\n24 2\n50 85 250\n10 15 25\n\n25 2\n50 85 250\n10 15 25\n\n25 2\n50 85 250\n10 15 25\n\n26 2\n50 85 250\n10 15 25\n\n26 2\n50 85 250\n10 15 25\n\n28 2\n50 85 250\n10 15 25\n\n28 2\n50 85 250\n10 15 25\n\n29 2\n50 85 250\n10 15 25\n\n29 2\n50 85 250\n10 15 25\n\n30 2\n50 85 250\n10 15 25\n\n30 2\n50 85 250\n10 15 25\n\n31 2\n50 85 250\n10 15 25\n\n31 2\n50 85 250\n10 15 25\n\n33 2\n50 85 250\n10 15 25\n\n33 2\n50 85 250\n10 15 25\n\n35 2\n50 85 250\n10 15 25\n\n35 2\n50 85 250\n10 15 25\n\n36 2\n50 85 250\n10 15 25\n\n36 2\n50 85 250\n10 15 25\n\n37 2\n50 85 250\n10 15 25\n\n37 2\n50 85 250\n10 15 25\n\n38 2\n50 85 250\n10 15 25\n\n38 2\n50 85 250\n10 15 25\n\n39 2\n50 85 250\n10 15 25\n\n39 2\n50 85 250\n10 15 25\n\n41 2\n50 85 250\n10 15 25\n\n41 2\n50 85 250\n10 15 25\n\n42 2\n50 85 250\n10 15 25\n\n42 2\n50 85 250\n10 15 25\n\n43 2\n50 85 250\n10 15 25\n\n43 2\n50 85 250\n10 15 25\n\n44 2\n50 85 250\n10 15 25\n\n44 2\n50 85 250\n10 15 25\n\n46 2\n50 85 250\n10 15 25\n\n46 2\n50 85 250\n10 15 25\n\n47 2\n50 85 250\n10 15 25\n\n47 2\n50 85 250\n10 15 25\n\n49 2\n50 85 250\n10 15 25\n\n49 2\n50 85 250\n10 15 25\n\n50 2\n50 85 250"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3 2\n50 85 250\n10 15 25\n\"\"\") == 'Limak'\nassert solution(\n\"\"\"\n3 6\n50 85 250\n10 15 25\n\"\"\") == 'Radewoosh'\nassert solution(\n\"\"\"\n8 1\n10 20 30 40 50 60 70 80\n8 10 58 63 71 72 75 76\n\"\"\") == 'Tie'\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n50 85 250\\n10 15 25') == 'Radewoosh'\nassert solution('8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76') == 'Tie'\nassert solution('5 5\\n1 1 1 1 1\\n1 1 1 1 1') == 'Tie'\nassert solution('5 5\\n5 5 5 5 5\\n1 1 1 1 1') == 'Limak'\n\n\"\"\"\n\nimport itertools\nimport sys\n\nn, c = [int(i) for i in input().split()]\np = [int(i) for i in input().split()]\nt = [int(i) for i in input().split()]\n\np.sort()\nt.sort()\n\ndiff = [i - j for i, j in zip(p, t)]"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n50 85 250\n10 15 25\n''') == 'Limak'\n\nassert solution('''\n8 1\n10 20 30 40 50 60 70 80\n8 10 58 63 71 72 75 76\n''') == 'Tie'\n\nassert solution('''\n3 6\n50 85 250\n10 15 25\n''') == 'Radewoosh'\n\n\n\n\n-----Notes-----\n\nThe first sample should be interpreted as n = 3 and c = 2.\n\nThe first line contains two integers n and c (1 \u2264 n \u2264 50, 1 \u2264 c \u2264 1000) \u2014 the number of problems and the constant representing the speed of loosing points.\n\nThe second line contains n integers p_1, p_2,..., p_{n} (1 \u2264 p_{i} \u2264 1000, p_{i} < p_{i} + 1)\u00a0\u2014 initial scores.\n\nThe third line contains n integers t_1, t_2,..., t_{n} (1 \u2264 t_{i} \u2264 1000, t_{i} < t_{i} + 1) where t_{i} denotes the number of minutes one needs to solve the i-th problem.\n\nThe output should be either \"Limak\" (without quotes) or \"Radewoosh\" (without quotes).\n\n----\n\nInput\n3 2\n50 85 250\n10 15 25\n\nOutput\nLimak\n\nInput\n3 6\n50 85 250\n10 15 25\n\nOutput\nRadewoosh\n\nInput\n8 1\n10 20 30 40 50 60 70 80\n8 10 58 63 71 72 75 76\n\nOutput\nTie\n\n\n\n-----"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n50 85 250\\n10 15 25\") == \"Limak\"\nassert solution(\"8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76\") == \"Tie\"\nassert solution(\"8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76\") == \"Tie\"\nassert solution(\"8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76\") == \"Tie\"\n\n\"\"\"\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n50 85 250\\n10 15 25') == 'Limak'\nassert solution('3 6\\n50 85 250\\n10 15 25') == 'Radewoosh'\nassert solution('8 1\\n10 20 30 40 50 60 70 80\\n8 10 58 63 71 72 75 76') == 'Tie'\n"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"Tie\"\nassert solution(\"3 6\") == \"Radewoosh\"\nassert solution(\"8 1\") == \"Tie\"\n\"\"\""
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\") == \"Tie\"\nassert solution(\"6 1\") == \"Radewoosh\"\nassert solution(\"7 10\") == \"Limak\"\n\nassert solution(\"7 3\") == \"Radewoosh\"\nassert solution(\"7 9\") == \"Tie\"\n"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"2\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"0\"\n\"\"\"\n\nimport sys\n\nfrom collections import deque\nfrom itertools import combinations\nfrom typing import Tuple, List\n\nsys.setrecursionlimit(10 ** 8)\n"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\n\"\"\""
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\") == \"2\"\nassert solution(\"5 1 1\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\") == \"0\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\") == \"2\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\") == \"2\"\n\"\"\"\nimport sys\nimport os\nfrom typing import Tuple\n"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_case_1) == answer_1\nassert solution(test_case_2) == answer_2\nassert solution(test_case_3) == answer_3\n\"\"\"\nimport math\nfrom typing import List\n\nfrom solutions.util.main import Solution\n\n\"\"\"\nSakuzyo - Imprinting\n\nA.R.C. Markland-N is a tall building with n floors numbered from 1 to n. Between each two adjacent floors in the building, there is a staircase connecting them.\n\nIt's lunchtime for our sensei Colin \"ConneR\" Neumann Jr, and he's planning for a location to enjoy his meal.\n\nConneR's office is at floor s of the building. On each floor (including floor s, of course), there is a restaurant offering meals. However, due to renovations being in progress, k of the restaurants are currently closed, and as a result, ConneR can't enjoy his lunch there.\n\nCooneR wants to reach a restaurant as quickly as possible to save time. What is the minimum number of staircases he needs to walk to reach a closest currently open restaurant?\n\nPlease answer him quickly, and you might earn his praise and even enjoy the lunch with him in the elegant Neumanns' way!\n\n-----Input-----\n\nThe first line contains one integer t\u00a0\u2014 the number of test cases in the test. Then the descriptions of t test cases follow.\n\nThe first line of a test case contains three integers n, s, k\u00a0\u2014 respectively the number of floors of A.R.C. Markland-N, the floor where ConneR is in, and the number of closed restaurants.\n\nThe second line of a test case contains k distinct integers a1, a2,..., ak\u00a0\u2014 the floor numbers of the currently closed restaurants.\n\nIt is guaranteed that the sum of k over all test cases does not exceed 1000.\n\n\n-----Output-----\n\nFor each test case print a single integer\u00a0\u2014 the minimum number of staircases required for ConneR to walk from the floor s to a floor with an open restaurant.\n\n\n-----Example-----\nInput\n4\n3 2 1\n3 2\n2 1\n3\n3 1 2\n1\n2\n1\nOutput\n0\n2\n0\n\"\"\"\n"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\\n1 2 3 4 5 7\\n2 1 1\\n2\\n100 76 8\\n76 75 36 67 41 74 10 77\") == \"2\"\nassert solution(\"3 2 1\\n3 2 1\\n3 2 1\\n1 2 3\\n2 3 4\") == \"0\"\nassert solution(\"1 2 2\\n2 3 3\") == \"0\"\nassert solution(\"1 1 1\\n2 3 4\") == \"2\"\nassert solution(\"1 1 1\\n2 3 4\\n4 1 2\\n1 2 3\\n2 3 4\") == \"2\"\n"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"2\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"0\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"4\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"2\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"2\"\n"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\") == '2'\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\") == '0'\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\\n10 2 6\") == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"2\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"0\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"4\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"2\"\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"2\"\n"
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"2\"\n\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"2\"\n\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"2\"\n\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"2\"\n\nassert solution(\"5 2 3\\n1 2 3\\n4 3 3\\n4 1 2\") == \"2\""
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6''') == '2'\nassert solution('''5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6''') == '0'\nassert solution('''5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6''') == '4'\nassert solution('''5 2 3\n1 2 3\n4 3 3\n4 1 2\n10 2 6''') == '2'"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 1 0 0\\n0 1 1 1 1\") == \"3\"\nassert solution(\"3\\n0 0 0\\n0 0 0\") == \"-1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1\") == \"4\"\n\"\"\"\n\nimport sys\nimport itertools\n\nassert len(sys.argv) == 2\ndata = sys.argv[1]\n\ndata = data.split('\\n')\ndata = [int(n) for n in data]"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 0 0\\n0 1 1 1 1\\n\") == \"3\"\nassert solution(\"1 1 1 1\\n0 1 1 1 1\\n\") == \"-1\"\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 1 0 0\") == '3'\nassert solution(\"1 1 1 0 0\") == '3'\nassert solution(\"0 1 1 1 1\") == '-1'\nassert solution(\"0 0 0\") == '-1'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0 0\\n0 0 0\") == '-1'\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1\") == '-1'\nassert solution(\"9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\") == '4'\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 0 0 1 1 1 1\") == '4'\nassert solution(\"1 1 1 0 0\") == '3'\nassert solution(\"0 1 1 1 1\") == '-1'\nassert solution(\"1 0 1 1 1\") == '3'\nassert solution(\"0 0 0 1 1\") == '-1'"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 1 0 0\\n0 1 1 1 1\\n') == '3'\nassert solution('3\\n0 0 0\\n0 0 0\\n') == '-1'\nassert solution('4\\n1 1 1 1\\n1 1 1 1\\n') == '-1'\nassert solution('9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\\n') == '4'"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 1 0 0\\n0 1 1 1 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n0 0 0\\n\") == \"-1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1\\n\") == \"-1\"\nassert solution(\"9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\\n\") == \"4\"\n\nprint(\"The local tests are done. Try to solve the CTF from a distance!\")\n\"\"\"\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 1 0 0\\n0 1 1 1 1\") == \"3\"\nassert solution(\"3\\n0 0 0\\n0 0 0\") == \"-1\"\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1\") == \"4\"\nassert solution(\"9\\n1 0 0 0 0 0 0 0 1\\n0 1 1 0 1 1 1 1 0\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 0\") == -1\nassert solution(\"2 0 0 1 1\") == 3\nassert solution(\"2 1 1 1 1\") == -1\nassert solution(\"2 0 0 1 1 1\") == 4\nassert solution(\"2 1 1 1 1 1\") == 3\n"
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 0 0\") == \"3\"\nassert solution(\"0 1 1 1 1\") == \"3\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"0 0 0\") == \"-1\"\nassert solution(\"1 1 1 1\") == \"4\"\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"banana\") == \"2aba\"\nassert solution(\"ababa\") == \"2aba\"\nassert solution(\"banana\") == \"2aba\"\nassert solution(\"banana\") == \"2aba\"\nassert solution(\"a\") == \"1a\"\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"banana\") == \"2\"\n\nassert solution(\"banana\") == \"2\"\n\nassert solution(\"banana\") == \"2\"\n\nassert solution(\"banana\") == \"2\"\n\nassert solution(\"banana\") == \"2\""
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"banana\") == \"2aba\"\nassert solution(\"banana\") == \"2aba\"\n\"\"\"\n\ns = input()\nn = int(input())\n\ns_len = len(s)\ndp = [[0] * (s_len+1) for _ in range(n+1)]\ndp[0][0] = 1\n\nfor i in range(n):\n    for j in range(s_len):\n        dp[i+1][j+1] = dp[i][j] + dp[i][j+1]\n        if s[j] == 'a' and j+1 < s_len:\n            dp[i+1][j+2] += dp[i][j+1]"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"banana\") == 2\nassert solution(\"banana\") == 2\nassert solution(\"banana\") == 2\nassert solution(\"banana\") == 2\nassert solution(\"banana\") == 2\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"banana\") == \"2\"\nassert solution(\"aba\") == \"3\"\nassert solution(\"abc\") == \"1\"\nassert solution(\"abca\") == \"2\"\nassert solution(\"cab\") == \"1\"\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"banana\") == \"2\"\nassert solution(\"abracadabra\") == \"3\"\nassert solution(\"asdfadsfasdfasdfasdfasdf\") == \"-1\"\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"banana\") == \"2\", \"WA :(\"\nassert solution(\"nab\") == \"3\", \"WA :(\"\nassert solution(\"ab\") == \"-1\", \"WA :(\"\nassert solution(\"abcd\") == \"-1\", \"WA :(\"\nassert solution(\"abacaba\") == \"3\", \"WA :(\"\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"banana\") == '2'\nassert solution(\"aabaaba\") == '4'\nassert solution(\"aabaaba\") == '-1'\nassert solution(\"aaaaaaaa\") == '7'\nassert solution(\"aaaaaaaa\") == '-1'\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"banana\") == \"2\\nbaan\"\nassert solution(\"banana\") == \"3\\nnab\"\nassert solution(\"banana\") == \"3\\nnaa\"\nassert solution(\"banana\") == \"3\\naba\"\nassert solution(\"banana\") == \"3\\naba\"\n"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ab') == 'ab'\nassert solution('abcd') == 'bc'\nassert solution('abc') == 'abc'\nassert solution('abcd') == 'ab'\nassert solution('abcde') == 'ab'\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"codeforces\"\nassert solution(\"3\") == \"codeforcesss\"\nassert solution(\"10\") == \"codeforcesisawesome\"\nassert solution(\"16\") == \"codeforcesisawesomeisawesome\"\n\nprint(\"Passed!\")\n\n\"\"\"\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('codeforces') == 'codeforces'\nassert solution('codeforcesisawesome') == 'codeforcesisawesome'\nassert solution('codeforcesisawesomeisawesome') == 'codeforcesisawesome'\nassert solution('codeforcesisawesomeisawesomeisawesome') == 'codeforcesisawesome'\n\"\"\"\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"codeforcesss\"\nassert solution(\"1\") == \"codeforces\"\nassert solution(\"2\") == \"codeforcesisawesome\"\nassert solution(\"4\") == \"codeforcesisawesomeisawesome\"\nassert solution(\"5\") == \"codeforcesisawesomeisawesomeisawesome\"\n\n\"\"\"\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'codeforces'\n\"\"\"\n\n\nfrom typing import List\n\n\nclass CodeforcesSubsequenceFinder:\n    def __init__(self, k: int):\n        self.k = k\n\n    def find_substrings(self, string: str, k: int) -> List[str]:\n        # How to find codeforces subsequences? Well, the idea is to find all substrings of length `k`.\n        # For example, if `k` = 3, the resulting substrings are: 'codeforces', 'cofrc', 'forc', 'orc', 'cfor', 'cfo', 'fo', 'o', 'f', ''.\n        # The last one is actually not a subsequence, but it's fine.\n        # Now, we want to check whether all of these substrings are also codeforces subsequences.\n        # Well, what do we do? We can check them one by one. But it's too slow, because it takes O(n^3) to check them.\n        # Let's make a better algorithm.\n        # The first step is to find all substrings of length `k`.\n        # To do this, we can use the `k_substring_finder` function. It is not so efficient, but it works.\n        substrings = self.k_substring_finder(string, k)\n        # The second step is to check if all of the substrings are codeforces subsequences.\n        # This can be done using a hashset.\n        # First, we can create a set.\n        substrings_set = set()\n        # Then, we add each element from the `substrings` list to the set.\n        for substring in substrings:\n            substrings_set.add(substring)\n        # And finally, we can check whether all of the elements are in the set.\n        # To do this, we can use the `contains` function.\n        for substring in substrings_set:\n            if not self.contains(substring, substrings):\n                return []\n        # Well, everything went fine.\n        # At this point, we need to pick an element from the `substrings` list, that is the shortest.\n        # To do this, we can use the `length_find` function.\n        # This function returns a list of tuples, where each tuple contains two elements: the first is the length of the substring, and the second is the substring itself.\n        return self.length_find(substrings)\n\n    def k_substring_finder(self, string: str, k: int) -> List[str]:\n        substrings = []\n        for i in range(len(string) - k + 1):\n            substring = string[i:i+k]\n            substrings.append(substring)\n        return substrings\n\n    def length_find(self, substrings: List[str]) -> List[str]:\n        result = []\n        # First, we find the length of each substring.\n        # To do this, we use the `substring_length` function.\n        for substring in substrings:\n            length, _ = self.substring_length(substring)\n            result.append((length, substring))\n        # Then, we return only the shortest one.\n        # To do this, we use the `minimum_of_list` function.\n        return self.minimum_of_list(result)\n\n    def substring_length(self, substring: str) -> List[int]:\n        length = 0\n        for char in substring:\n            if char == 'codeforces':\n                length += 1\n        return length, substring\n\n    def contains(self, substring: str, substrings: List[str]) -> bool:\n        for element in substrings:\n            if substring == element:\n                return True\n        return False\n\n    def minimum_of_list(self, list: List[str]) -> List[str]:\n        # To do this, we can use the `minimum` function.\n        # This function takes in an iterable and returns the element with the smallest value.\n        return [list[0]]\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"codeforces\"\n\nassert solution(\"4\") == \"codeforcesisawesome\"\n\"\"\""
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stub) == \"codeforces\"\n\n\"\"\"\nimport sys\n\nk = int(sys.stdin.readline().strip())"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('codeforces') == 'codeforces', 'First'\nassert solution('codeforcesisawesome') == 'codeforcesisawesome', 'Second'\nassert solution('codeforcesisawesomeisawesome') == 'codeforcesisawesomeisawesome', 'Third'\nassert solution('codeforcesisawesomeisawesomeisawesome') == 'codeforcesisawesomeisawesome', 'Fourth'\n\"\"\"\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"codeforces\"\nassert solution(\"2\") == \"codeforcesisawesome\"\nassert solution(\"3\") == \"codeforcesisawesomeisawesome\"\nassert solution(\"4\") == \"codeforcesisawesomeisawesomeisawesome\"\nassert solution(\"5\") == \"codeforcesisawesomeisawesomeisawesomeisawesome\"\n\n\"\"\"\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 'codeforcesss'\n\"\"\"\n"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == 'codeforces'\nassert solution('1') == 'codeforces'\nassert solution('4') == 'codeforcesisawesome'\nassert solution('10') == 'codeforcesisawesome'\nassert solution('5') == 'codeforcesisawesome'\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 2 3\\n1 1\") == \"1\"\nassert solution(\"3\\n2 2 3\\n1 1\") == \"1\"\nassert solution(\"3\\n2 2 3\\n1 1\") == \"1\"\n\nassert solution(\"8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\") == \"4\"\nassert solution(\"8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\") == \"4\"\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 1 3\\n1 1') == '0'\nassert solution('8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6') == '4'\nassert solution('3\\n1 2 3\\n1 1') == '1'\nassert solution('5\\n2 1 4 2 5\\n1 1 4 1 3') == '1'\nassert solution('5\\n2 1 4 2 5\\n3 3 4 3 5') == '0'\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3\\n1 1') == '1'\nassert solution('3\\n2 2 3\\n1 1') == '0'\nassert solution('3\\n1 2 2\\n1 1') == '0'\nassert solution('3\\n2 1 2\\n1 1') == '1'\nassert solution('3\\n1 1 2\\n1 1') == '2'\n\nsolution(input())\n\n\"\"\""
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 2 3\\n1 1\\n\") == \"1\"\nassert solution(\"8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\\n\") == \"4\"\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\\n1 1\") == \"1\"\nassert solution(\"8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\") == \"4\"\nassert solution(\"3\\n1 2 3\\n1 1\") == \"0\"\nassert solution(\"3\\n1 2 3\\n1 3\") == \"2\"\nassert solution(\"3\\n1 2 3\\n2 1\") == \"1\"\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 3\\n1 1') == '1'\nassert solution('8 7 2 5 4 3 1 1\\n1 1 1 4 4 5 6') == '4'\n\"\"\"\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 2 3\\n1 1\") == \"1\"\nassert solution(\"3\\n1 2 3\\n1 1\") == \"0\"\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 2 3\\n1 1\\n\") == '1'\nassert solution(\"3\\n2 2 3\\n1 1\\n\") == '0'\nassert solution(\"8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\\n\") == '4'\n\n\n\n2. The numbers on each line of the input follow the same rules as for problem #1.\n\n3. The number of lines of the input is at least 2.\n\n4. The input will be guaranteed to be valid.\n\n5. For each test case, the input will be guaranteed to be a valid tree.\n\n6. For each test case, the input will be guaranteed to be a valid tree.\n\n7. For each test case, the input will be guaranteed to be a valid tree.\n\n8. For each test case, the input will be guaranteed to be a valid tree.\n\n9. For each test case, the input will be guaranteed to be a valid tree.\n\n10. For each test case, the input will be guaranteed to be a valid tree.\n\n11. For each test case, the input will be guaranteed to be a valid tree.\n\n12. For each test case, the input will be guaranteed to be a valid tree.\n\n13. For each test case, the input will be guaranteed to be a valid tree.\n\n14. For each test case, the input will be guaranteed to be a valid tree.\n\n15. For each test case, the input will be guaranteed to be a valid tree.\n\n16. For each test case, the input will be guaranteed to be a valid tree.\n\n17. For each test case, the input will be guaranteed to be a valid tree.\n\n18. For each test case, the input will be guaranteed to be a valid tree.\n\n19. For each test case, the input will be guaranteed to be a valid tree.\n\n20. For each test case, the input will be guaranteed to be a valid tree.\n\n21. For each test case, the input will be guaranteed to be a valid tree.\n\n22. For each test case, the input will be guaranteed to be a valid tree.\n\n23. For each test case, the input will be guaranteed to be a valid tree.\n\n24. For each test case, the input will be guaranteed to be a valid tree.\n\n25. For each test case, the input will be guaranteed to be a valid tree.\n\n26. For each test case, the input will be guaranteed to be a valid tree.\n\n27. For each test case, the input will be guaranteed to be a valid tree.\n\n28. For each test case, the input will be guaranteed to be a valid tree.\n\n29. For each test case, the input will be guaranteed to be a valid tree.\n\n30. For each test case, the input will be guaranteed to be a valid tree.\n\n31. For each test case, the input will be guaranteed to be a valid tree.\n\n32. For each test case, the input will be guaranteed to be a valid tree.\n\n33. For each test case, the input will be guaranteed to be a valid tree.\n\n34. For each test case, the input will be guaranteed to be a valid tree.\n\n35. For each test case, the input will be guaranteed to be a valid tree.\n\n36. For each test case, the input will be guaranteed to be a valid tree.\n\n37. For each test case, the input will be guaranteed to be a valid tree.\n\n38. For each test case, the input will be guaranteed to be a valid tree.\n\n39. For each test case, the input will be guaranteed to be a valid tree.\n\n40. For each test case, the input will be guaranteed to be a valid tree.\n\n41. For each test case, the input will be guaranteed to be a valid tree.\n\n42. For each test case, the input will be guaranteed to be a valid tree.\n\n43. For each test case, the input will be guaranteed to be a valid tree.\n\n44. For each test case, the input will be guaranteed to be a valid tree.\n\n45. For each test case, the input will be guaranteed to be a valid tree.\n\n46. For each test case, the input will be guaranteed to be a valid tree.\n\n47. For each test case, the input will be guaranteed to be a valid tree.\n\n48. For each test case, the input will be guaranteed to be a valid tree.\n\n49. For each test case, the input will be guaranteed to be a valid tree.\n\n50. For each test case, the input will be guaranteed to be a valid tree.\n\n51. For each test case, the input will be guaranteed to be a valid tree.\n\n52. For each test case, the input will be guaranteed to be a valid tree.\n\n53. For each test case, the input will be guaranteed to be a valid tree.\n\n54. For each test case, the input will be guaranteed to be a valid tree.\n\n55. For each test case, the input will be guaranteed to be a valid tree.\n\n56. For each test case, the input will be guaranteed to be a valid tree.\n\n57. For each test case, the input will be guaranteed to be a valid tree.\n\n58. For each test case, the input will be guaranteed to be a valid tree.\n\n59. For each test case, the input will be guaranteed to be a valid tree.\n\n60. For each test case, the input will be guaranteed to be a valid tree.\n\n61. For each test case, the input will be guaranteed to be a valid tree.\n\n62. For each test case, the input will be guaranteed"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 2 3\\n1 1') == '1'\nassert solution('3\\n2 2 3\\n1 1\\n1 1') == '0'\n\"\"\"\nimport sys\nimport time\n\n_TOTAL_TIME_ALLOWED = 3  # seconds\n\n\nclass Tree:\n    def __init__(self, input_line: str):\n        n, self.apples, parents = input_line.split()\n        self.n = int(n)\n        self.parents = list(map(int, parents.split()))\n\n        self.children = [[] for _ in range(self.n)]\n        self.parents_of_leafs = [0 for _ in range(self.n)]\n        self.leaves = set()\n        self.leafs_apples = {}\n        self.swap_parents = set()\n        self.swap_apples = {}\n        self.swap_count = 0\n        self.get_leafs()\n        self.get_swap_parents()\n        self.get_leaf_apples()\n        self.get_swap_apples()\n\n        # print(self.parents_of_leafs)\n        # print(self.leafs)\n        # print(self.swap_parents)\n        # print(self.swap_apples)\n\n    def get_leafs(self) -> None:\n        for i in range(self.n):\n            if self.parents[i] == -1:\n                self.parents_of_leafs[i] = 1\n                self.leaves.add(i)\n        self.parents_of_leafs[0] = 0\n        self.leaves.add(0)\n\n    def get_swap_parents(self) -> None:\n        for i in range(1, self.n):\n            if self.parents[i] in self.parents[:i]:\n                self.swap_parents.add(self.parents[i])\n                self.swap_parents.add(self.parents[i])\n\n    def get_leaf_apples(self) -> None:\n        for leaf in self.leaves:\n            if self.parents_of_leafs[leaf]:\n                self.leafs_apples[leaf] = self.apples[leaf]\n\n    def get_swap_apples(self) -> None:\n        for swap_parent in self.swap_parents:\n            for leaf in self.leafs:\n                if swap_parent in self.apples[leaf]:\n                    self.swap_apples[(swap_parent, leaf)] = self.apples[leaf]\n                    self.swap_apples[(leaf, swap_parent)] = self.apples[leaf]\n                    break\n\n    def play(self) -> str:\n        # print(self.swap_count)\n        if self.swap_count:\n            return '1'\n        for leaf in self.leaves:\n            if self.parents_of_leafs[leaf] == 1:\n                for swap_parent in self.swap_parents:\n                    if leaf in self.apples[swap_parent]:\n                        self.swap_count += 1\n                        return '1'\n        return '0'\n"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 2 3\\n1 1\") == '1'\nassert solution(\"8\\n7 2 2 5 4 3 1 1\\n1 1 1 4 4 5 6\") == '4'\nassert solution(\"3\\n1 2 3\\n1 1\") == '0'"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10 2\\n2 3 8\\n3 4 7\\n\") == \"262\"\nassert solution(\"4 10 2\\n2 3 8\\n3 4 7\\n1 1 1\\n\") == \"14\"\n"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\\n\") == 14\n\"\"\"\n\nimport sys"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 3\\n1 1 1\\n2 2 3\") == \"14\"\nassert solution(\"4 10 2\\n2 3 8\\n3 4 7\") == \"262\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\") == \"14\"\nassert solution(\"4 10 2\\n2 3 8\\n3 4 7\") == \"262\"\n\"\"\"\n\nimport sys\n\ninputs = [x.strip().split('\\n') for x in sys.stdin.readlines()][0]\n\nmax_heights = []\n\nfor line in inputs[2:]:\n    max_heights.append([int(x) for x in line[1].split(' ')])"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 10 2\\n2 3 8\\n3 4 7\") == \"262\"\nassert solution(\"3 3 3\\n1 1 1\\n2 2 3\") == \"14\"\nassert solution(\"5 7 3\\n1 1 1\\n2 2 3\\n4 4 5\") == \"63\"\nassert solution(\"5 5 5\\n1 2 3\\n4 4 5\") == \"0\"\nassert solution(\"1 1 1\\n5 5 10\") == \"5\"\n"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 3\\n1 1 1\\n2 2 3\") == \"14\"\nassert solution(\"4 10 2\\n2 3 8\\n3 4 7\") == \"262\"\n"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3\\n1 1 1\\n2 2 3\\n3 3 2\") == 14\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\n"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 3\\n1 1 1\\n2 2 3\\n3 3 2') == '14'\nassert solution('4 10 2\\n2 3 8\\n3 4 7') == '262'\nassert solution('5 9 4\\n1 2 3\\n1 3 3\\n1 4 1\\n1 5 8\\n2 2 8\\n3 3 5\\n4 4 5') == '2096'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2\\n2 3 8\\n3 4 7\\n\") == \"14\""
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10 2\\n2 3 8\\n3 4 7\") == \"262\"\nassert solution(\"3 3 3\\n1 1 1\\n2 2 3\") == \"14\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"Sidorov Ivanov\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 763\\nPetrov 1 763\\nSidorov 1 790\\nSemenov 2 790\") == \"?\\nIvanov Sidorov\"\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"Sidorov Ivanov\"\nassert solution(\"5 2\\nIvanov 1 800\\nAndreev 2 763\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503\") == \"?\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 763\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"?\"\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503\"\"\") == 'Sidorov Ivanov'\n\nassert solution(\"\"\"5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503\"\"\") == '?'\n\nassert solution(\"\"\"5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503\"\"\") == 'Sidorov Ivanov'\n\nassert solution(\"\"\"5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503\"\"\") == 'Sidorov Ivanov'\n\nassert solution(\"\"\"5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 763\nSidorov 1 790\nSemenov 2 503\"\"\") == '?'"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\\n\") == \"Sidorov Ivanov\\nAndreev Semenov\\n\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\\n\") == \"?\\nAndreev Semenov\\n\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\\n\") == \"?\\nAndreev Semenov\\n\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\\n\") == \"?\\nAndreev Semenov\\n\"\n\nassert solution(\"5 3\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\\n\") == \"?\\nAndreev Sidorov\\nAndreev Ivanov\\nAndreev Semenov\\n\""
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"Sidorov Ivanov\\nAndreev Semenov\"\n\"\"\"\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\\n\") == \"Sidorov Ivanov\"\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503'''\n) == '''Sidorov Ivanov\nAndreev Semenov'''\n\nassert solution(\n'''5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503'''\n) == '''?'''\n\nassert solution(\n'''5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503'''\n) == '''Sidorov Ivanov'''\n\nassert solution(\n'''5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503'''\n) == '''?'''\n\nassert solution(\n'''5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503'''\n) == '''Sidorov Ivanov'''"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"Sidorov Ivanov\\nAndreev Semenov\"\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503') == \"Sidorov Ivanov\\nAndreev Semenov\"\nassert solution('5 2\\nIvanov 1 800\\nAndreev 2 763\\nPetrov 1 800\\nSidorov 1 800\\nSemenov 2 503') == \"?\\nAndreev Semenov\"\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 595\\nSidorov 1 790\\nSemenov 2 503\") == \"Sidorov Ivanov\\nAndreev Semenov\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 895\\nSidorov 1 790\\nSemenov 2 503\") == \"?\\nAndreev Semenov\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 800\\nPetrov 1 795\\nSidorov 1 790\\nSemenov 2 503\") == \"?\\nAndreev Semenov\"\nassert solution(\"5 2\\nIvanov 1 763\\nAndreev 2 895\\nPetrov 1 795\\nSidorov 1 790\\nSemenov 2 503\") == \"?\\n?\\nAndreev Semenov\"\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xyabd\") == \"29\"\nassert solution(\"ab\") == \"1\"\nassert solution(\"ababbaaabbb\") == \"34\"\nassert solution(\"abaabbaaabbb\") == \"1\"\nassert solution(\"ab\") == \"1\"\n"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xyabd\") == \"29\"\n\nassert solution(\"ab\") == \"1\"\nassert solution(\"abaabbaaabbb\") == \"1\"\nassert solution(\"problem\") == \"34\"\nassert solution(\"belo\") == \"-1\"\n\nprint(solution(\"xyabd\"))\nprint(solution(\"ab\"))\nprint(solution(\"abaabbaaabbb\"))\nprint(solution(\"problem\"))\nprint(solution(\"belo\"))\n\nprint(solution(\"xyabd\"))\nprint(solution(\"ab\"))\nprint(solution(\"abaabbaaabbb\"))\nprint(solution(\"problem\"))\nprint(solution(\"belo\"))\n\nprint(solution(\"xyabd\"))\nprint(solution(\"ab\"))\nprint(solution(\"abaabbaaabbb\"))\nprint(solution(\"problem\"))\nprint(solution(\"belo\"))\n"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xyabd\") == \"29\"\nassert solution(\"abaabbaaabbb\") == \"1\"\nassert solution(\"problme\") == \"34\"\nassert solution(\"belo\") == \"-1\"\n\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('xyabd') == '29'\nassert solution('abbd') == '0'\nassert solution('aaaabbbb') == '0'\nassert solution('abba') == '0'\nassert solution('abab') == '0'\n"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xyabd\") == \"29\"\nassert solution(\"abaabbaaabbb\") == \"1\"\nassert solution(\"ab\") == \"-1\"\nassert solution(\"abaab\") == \"2\""
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xyabd\") == \"29\"\nassert solution(\"abaabbaaabbb\") == \"1\"\nassert solution(\"ab\") == \"-1\"\nassert solution(\"12\") == \"1\""
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xyabd\") == \"29\"\nassert solution(\"abaabbaaabbb\") == \"1\"\nassert solution(\"ab\") == \"-1\"\nassert solution(\"xz\") == \"1\"\n"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xyabd\") == \"29\"\nassert solution(\"abaabbaaabbb\") == \"1\"\n\"\"\"\nimport sys\n\nstdin = sys.stdin.read()"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('xyabd') == 29\nassert solution('ab') == -1\nassert solution('abaabbaaabbb') == 1\n"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xyabd\") == \"29\"\nassert solution(\"abaabbaaabbb\") == \"1\"\nassert solution(\"ab\") == \"-1\"\nassert solution(\"abab\") == \"2\"\nassert solution(\"\") == \"0\""
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n5 6 5 6\\n6 6 7 7\\n5 8 6 6\\n9 9 9 9\") == '1 5 5\\n'\nassert solution(\"5\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\") == '-1\\n'"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n5 6 5 6\\n6 6 7 7\\n5 8 6 6\\n9 9 9 9') == '1 5 5'\nassert solution('10\\n6 6 6 6\\n7 7 7 7\\n4 4 4 4\\n8 8 8 8') == '3 4 6'\nassert solution('5\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3') == '-1'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\na = []\n\nfor i in range(4):\n    a.append([int(s) for s in sys.stdin.readline().strip().split(' ')])\n\na.sort(key=lambda x: x[1])"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '-1'\nassert solution('5\\n5 6 5 6') == '1 5 5'\nassert solution('10\\n6 6 6 6\\n7 7 7 7\\n4 4 4 4\\n8 8 8 8') == '3 4 6'\nassert solution('3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3') == '-1'\nassert solution('10\\n6 6 6 6\\n7 7 7 7\\n4 4 4 4\\n8 8 8 8') == '3 4 6'\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\n\na, b, c, d = [], [], [], []\nfor i in range(4):\n    a_, b_, c_, d_ = list(map(int, stdin.readline().split()))\n    a.append(a_)\n    b.append(b_)\n    c.append(c_)\n    d.append(d_)"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n5 6 5 6\\n6 6 7 7\\n5 8 6 6\\n9 9 9 9\") == \"1 5 5\"\nassert solution(\"10\\n6 6 6 6\\n7 7 7 7\\n4 4 4 4\\n8 8 8 8\") == \"3 4 6\"\nassert solution(\"5\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\") == \"-1\"\nassert solution(\"3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\") == \"-1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n5 6 5 6\n6 6 7 7\n5 8 6 6\n9 9 9 9\n\"\"\") == \"1 5 5\"\n\nassert solution(\"\"\"\n10\n5 6 5 6\n6 6 7 7\n5 8 6 6\n9 9 9 9\n\"\"\") == \"1 5 5\"\n\nassert solution(\"\"\"\n10\n3 3 3 3\n3 3 3 3\n3 3 3 3\n3 3 3 3\n\"\"\") == \"3 4 6\"\n\nassert solution(\"\"\"\n10\n6 6 6 6\n7 7 7 7\n4 4 4 4\n8 8 8 8\n\"\"\") == \"3 4 6\"\n\nassert solution(\"\"\"\n5\n3 3 3 3\n3 3 3 3\n3 3 3 3\n3 3 3 3\n\"\"\") == \"-1\""
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 6 5 6\\n6 6 7 7\\n5 8 6 6\\n9 9 9 9') == '1 5 5'\nassert solution('5 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3') == '-1'\nassert solution('5\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3') == '1 4 6'\n\"\"\"\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 5 6\\n6 6 7 7\\n5 8 6 6\\n9 9 9 9') == '1 5 5'\n\n\"\"\"\n\n\nfrom itertools import combinations\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n5 6 5 6\\n6 6 7 7\\n5 8 6 6\\n9 9 9 9\") == \"1 5 5\"\nassert solution(\"10\\n6 6 6 6\\n7 7 7 7\\n4 4 4 4\\n8 8 8 8\") == \"3 4 6\"\nassert solution(\"10\\n6 6 6 6\\n7 7 7 7\\n4 4 4 4\\n8 8 8 8\") == \"3 4 6\"\n\"\"\"\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_0) == '1 5 5'\nassert solution(test_input_1) == '3 4 6'\nassert solution(test_input_2) == '-1'\n\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10\n5 6 5 6\n6 6 7 7\n5 8 6 6\n9 9 9 9''') == '1 5 5'\nassert solution('''5\n3 3 3 3\n3 3 3 3\n3 3 3 3\n3 3 3 3''') == '-1'\n\"\"\"\nimport sys"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 10\\n8 7') == '6 4'\nassert solution('4 4\\n1 1 1 1') == '1 1 1 1'\nassert solution('3 10\\n9 8 10') == '-1'\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10\") == \"6 4\"\nassert solution(\"4 4\") == \"1 1 1 1\"\nassert solution(\"3 10\") == \"-1\""
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10\") == \"6 4\"\nassert solution(\"4 4\") == \"1 1 1 1\"\nassert solution(\"3 10\") == \"-1\"\n\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\") == \"1 2 3 4\"\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10') == '6 4'\nassert solution('4 4') == '1 1 1 1'\nassert solution('3 10') == '-1'\n\n\n-----Hint-----\n\nThis task is a variant of the common \"tea party\" problem. Think about the sums that don't fit into the cup.\n\"\"\"\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10\") == \"6 4\"\n\n\"\"\"\n\nimport unittest\n\nclass TestFifteen(unittest.TestCase):\n\n    def test_solution_1(self):\n        self.assertEqual(solution(\"2 10\"), \"6 4\")\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10\") == \"6 4\"\nassert solution(\"4 4\") == \"1 1 1 1\"\nassert solution(\"3 10\") == \"-\"\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10\\n8 7\") == \"6 4\"\nassert solution(\"4 4\\n1 1 1 1\") == \"1 1 1 1\"\nassert solution(\"3 10\\n9 8 10\") == \"1 1 1 1\"\nassert solution(\"1 100\\n100\") == \"-1\"\nassert solution(\"3 10\\n8 10 10\") == \"-1\"\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 7\") == \"6 4\"\n"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10') == '6 4'\nassert solution('2 10') == '6 4'\nassert solution('3 10') == '-1'\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 8\\n4 4\") == \"3 3\"\nassert solution(\"1 3\\n5\") == \"4\"\nassert solution(\"2 3\\n2 3\") == \"0 1\""
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 8\\n4 4') == '3 3'\nassert solution('1 3\\n5') == '4'\nassert solution('2 3\\n2 3') == '0 1'\n\"\"\""
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8\") == '3 3'\nassert solution(\"1 3\") == '4'\nassert solution(\"2 3\") == '0 1'\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 8\\n4 4') == '3 3'\nassert solution('1 3\\n5') == '4'\nassert solution('2 3\\n2 3') == '0 1'\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"2 8\n4 4\"\"\") == \"3 3\"\n\nassert solution(\"\"\"1 3\n5\"\"\") == \"4\"\n\nassert solution(\"\"\"2 3\n2 3\"\"\") == \"0 1\"\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 8\\n4 4\\n\") == \"3 3\"\nassert solution(\"1 3\\n5\\n\") == \"4\"\nassert solution(\"2 3\\n2 3\\n\") == \"0 1\"\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 3\"\nassert solution(\"2 3\\n1 2\") == \"0 1\"\nassert solution(\"1 3\\n5\") == \"4\"\nassert solution(\"2 3\\n2 3\") == \"0 1\"\nassert solution(\"2 3\\n1 1\") == \"0 0\"\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 8\\n4 4\") == \"3 3\"\nassert solution(\"1 3\\n5\") == \"4\"\nassert solution(\"2 3\\n2 3\") == \"0 1\"\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 8\\n4 4\") == \"3 3\"\nassert solution(\"1 3\\n5\") == \"4\"\nassert solution(\"2 3\\n2 3\") == \"0 1\"\nassert solution(\"1 2\\n5\") == \"0\"\nassert solution(\"2 3\\n2 3\") == \"0 1\""
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 4\\n4 4') == '3 3'\nassert solution('1 3\\n5') == '0 1'\nassert solution('2 3\\n2 3') == '0 1'\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 0 0\\n\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\\n\") == \"Yes\"\nassert solution(\"4\\n0 2 3 1\\n\") == \"No\"\nprint('Hooray!')\n\n---\n\nthe first example shows the sequence of active teeth, where the second push makes the gear rotate clockwise, the third push makes it rotate counter-clockwise, then the fourth push makes it rotate clockwise again, and so on.\n\nthe second example shows the sequence of active teeth, which is always 0 2 3 1, no matter the number of the pushes.\n\nTo determine whether a puzzle is real or fake, you need to check whether the sequence of active teeth is always the same in all gears or not.\n\nTo achieve this, you need to find a pattern that repeats the same sequence of active teeth."
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(2) == \"Yes\"\nassert solution(3) == \"Yes\"\nassert solution(4) == \"Yes\"\nassert solution(5) == \"Yes\"\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 0 0\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\") == \"Yes\"\nassert solution(\"4\\n0 2 3 1\") == \"No\"\nassert solution(\"5\\n4 2 1 4 3\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 0 0\\n\") == \"Yes\"\nassert solution(\"4\\n4 2 1 4 3\\n\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\\n\") == \"Yes\"\nassert solution(\"4\\n0 2 3 1\\n\") == \"No\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 0 0\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\") == \"Yes\"\nassert solution(\"4\\n0 2 3 1\") == \"No\"\n\n\n\"\"\""
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1 4 3\") == 'Yes'\nassert solution(\"0 2 3 1\") == 'No'\nprint('Test passed')"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 0 0\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\") == \"Yes\"\nassert solution(\"4\\n0 2 3 1\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 0 0') == 'Yes'\nassert solution('5\\n4 2 1 4 3') == 'Yes'\nassert solution('4\\n0 2 3 1') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'Yes'\nassert solution('2 2 1') == 'No'\nassert solution('0 1 2') == 'Yes'\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 0 0\") == \"Yes\"\nassert solution(\"4\\n0 2 3 1\") == \"Yes\"\nassert solution(\"5\\n4 2 1 4 3\") == \"Yes\"\nassert solution(\"4\\n0 2 3 1\") == \"No\"\n"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 2 5\\n1 3 5') == 2\nassert solution('0 1 3\\n2 3 6') == 1\n\n\n\"\"\"\n"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 3\\n2 3 6\") == \"1\"\nassert solution(\"0 2 5\\n1 3 5\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 2 5\\n1 3 5\") == 2\nassert solution(\"0 1 3\\n2 3 6\") == 1\n\"\"\"\n\nimport itertools\nfrom typing import List\nimport matplotlib.pyplot as plt\nimport numpy as np"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 1 3\\n2 3 6') == 1\nassert solution('0 1 3\\n2 3 1') == 2\n\n---\n\nclass Solution:\n    def solve(self, alice, bob):\n        best_alice = 0\n        best_bob = 0\n        for i in range(len(alice)):\n            if alice[i] + bob[i] > alice[i+1] + bob[i+1]:\n                best_alice += 1\n            if alice[i] + bob[i] < alice[i+1] + bob[i+1]:\n                best_bob += 1\n        return max(best_alice, best_bob)\n\nsolution = Solution().solve\nassert solution('0 1 3\\n2 3 6') == 1\nassert solution('0 1 3\\n2 3 1') == 2\n"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 2 5\\n1 3 5') == 2\n\nassert solution('0 1 3\\n2 3 6') == 1\n\n\"\"\""
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n2 3 6') == '1'\nassert solution('0 1 3\\n2 3 6') == '1'\nassert solution('0 1 3\\n2 3 5') == '2'\n\n-----Test2-----\n\n1 2 5\n3 4 7\n\n-----Test3-----\n\n0 1 3\n2 3 6\n\n-----Test4-----\n\n0 1 3\n2 3 6\n\n-----Test5-----\n\n0 1 3\n2 3 6\n\n-----Test6-----\n\n0 1 3\n2 3 6\n\n-----Test7-----\n\n0 1 3\n2 3 6\n\"\"\""
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 3\\n2 3 6\") == \"1\"\nassert solution(\"0 1 3\\n2 2 6\") == \"0\"\nassert solution(\"0 1 3\\n0 2 6\") == \"0\"\n\n----\n\n\n\"\"\"\n"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 3\\n2 3 6\") == '1'\nassert solution(\"0 1 5\\n1 3 5\") == '2'\nassert solution(\"0 1 10\\n2 3 5\") == '3'\nassert solution(\"0 1 10\\n2 3 10\") == '3'\nassert solution(\"0 1 10\\n2 3 11\") == '3'\n"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 1 3\\n2 3 6') == '1'\nassert solution('0 1 3\\n2 3 6') == '1'\n\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 1 3\\n2 3 6') == '1'\nassert solution('0 1 3\\n1 3 6') == '2'\nassert solution('1 1 3\\n2 3 6') == '1'\nassert solution('1 2 5\\n3 4 6') == '1'\nassert solution('0 1 3\\n1 3 6') == '2'\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"89\") == 2\n\"\"\"\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('88') == '2'\nassert solution('00') == '4'\nassert solution('73') == '15'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"89\") == 2\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"89\") == 2\nassert solution(\"00\") == 4\nassert solution(\"73\") == 15\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('89') == 2\nassert solution('00') == 4\nassert solution('73') == 15\n\n\"\"\""
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"89\") == \"2\"\nassert solution(\"00\") == \"4\"\nassert solution(\"73\") == \"15\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('89') == 2\nassert solution('88') == 1\nassert solution('73') == 15\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"89\") == 2\nassert solution(\"00\") == 4\nassert solution(\"73\") == 15"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"89\") == 2\nassert solution(\"00\") == 4\nassert solution(\"73\") == 15\n\"\"\"\n"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('89') == 2\nassert solution('00') == 4\nassert solution('73') == 15\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 7\") == \"1 2\"\nassert solution(\"10 2 8\") == \"1 5\"\nassert solution(\"10 5 3\") == \"1 5\"\nassert solution(\"7 7 7\") == \"1\"\nassert solution(\"5 10 3\") == \"1 5\"\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\\n3 3 4\") == \"1\\n1\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\n\"\"\""
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\") == \"1\\n1\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\n\"\"\""
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\") == \"1\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2 1\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"1 5\"\n\"\"\"\n\nn = int(input())\nmax_volume = 0\ncurrent_volume = 0\ncandidates = set()\nfor _ in range(n):\n    size_a, size_b, size_c = map(int, input().split())\n    current_volume = 2 * size_a * size_b * size_c\n    if current_volume > max_volume:\n        max_volume = current_volume\n        candidates = set([size_a, size_b, size_c])\n\nprint(len(candidates))\nprint(\" \".join(map(str, candidates)))\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\\n3 3 4\") == \"1\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2 1\"\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\") == \"1\\n1\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 4\") == \"1 1\"\nassert solution(\"5 5 5\") == \"1 1\"\nassert solution(\"10 7 8\") == \"2 1\"\nassert solution(\"4 2 6\") == \"1 5\"\nassert solution(\"5 10 3\") == \"2 1\"\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5 5\") == \"1 5\"\nassert solution(\"3 2 4\") == \"1 2\"\nassert solution(\"1 4 1\") == \"2 1\"\nassert solution(\"2 1 3\") == \"2 1\"\nassert solution(\"3 2 4\") == \"2 1\"\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n5 5 5\\n2 1 3\\n3 2 4\\n4 2 1') == '1\\n1\\n'\nassert solution('3\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7') == '2\\n1 5\\n'\nassert solution('''5\n10 7 8\n5 10 3\n4 2 6\n5 5 5\n10 2 8\n4 2 1\n7 7 7''') == '2\\n1 5\\n'\nassert solution('''7\n10 7 8\n5 10 3\n4 2 6\n5 5 5\n10 2 8\n4 2 1\n7 7 7''') == '2\\n1 5\\n'"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n5 5 5\\n3 2 4\\n1 4 1\\n2 1 3\\n3 2 4\\n3 3 4\") == \"1\\n1\"\nassert solution(\"7\\n10 7 8\\n5 10 3\\n4 2 6\\n5 5 5\\n10 2 8\\n4 2 1\\n7 7 7\") == \"2\\n1 5\"\n\n\"\"\"\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4') == '63'\nassert solution('3 3') == '23'\nassert solution('20 10') == '777773'\n\n\"\"\"\n\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\narr = list(map(int, input().split()))\n\none_count = 0\ntwo_count = 0\nthree_count = 0\nfour_count = 0\nfive_count = 0\nsix_count = 0\nseven_count = 0\neight_count = 0\nnine_count = 0\n\nfor i in arr:\n    if i == 1:\n        one_count += 1\n    if i == 2:\n        two_count += 1\n    if i == 3:\n        three_count += 1\n    if i == 4:\n        four_count += 1\n    if i == 5:\n        five_count += 1\n    if i == 6:\n        six_count += 1\n    if i == 7:\n        seven_count += 1\n    if i == 8:\n        eight_count += 1\n    if i == 9:\n        nine_count += 1\n\nall_count = one_count + two_count + three_count + four_count + five_count + six_count + seven_count + eight_count + nine_count\n\nresult = ''\n\nwhile True:\n    if len(result) == N:\n        break\n    if one_count == 0:\n        result += '0'\n        one_count += 1\n        continue\n    if two_count == 0:\n        result += '1'\n        two_count += 1\n        continue\n    if three_count == 0:\n        result += '2'\n        three_count += 1\n        continue\n    if four_count == 0:\n        result += '3'\n        four_count += 1\n        continue\n    if five_count == 0:\n        result += '4'\n        five_count += 1\n        continue\n    if six_count == 0:\n        result += '5'\n        six_count += 1\n        continue\n    if seven_count == 0:\n        result += '6'\n        seven_count += 1\n        continue\n    if eight_count == 0:\n        result += '7'\n        eight_count += 1\n        continue\n    if nine_count == 0:\n        result += '8'\n        nine_count += 1\n        continue\n    if nine_count > one_count:\n        result += '9'\n        nine_count -= 1\n    else:\n        result += '1'\n        one_count -= 1\n    if one_count == 0:\n        result += '0'\n        one_count += 1\n\nprint(result)\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\") == \"124125\"\n\"\"\"\n\nn_matchsticks, n_digits = [int(i) for i in stdin.strip().split()]\ndigits = [int(i) for i in stdin.strip().split()]\ndigits.sort()\n\na = list(range(9))\nb = [i for i in a if i not in digits]\nb.sort(reverse=True)"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4') == '7'\nassert solution('20 4') == '777773'\n\n\"\"\"\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3 2 4 5\\n\") == \"9\"\n\"\"\"\n\nfrom collections import Counter\n\nstdin = \"4 2\\n1 3 2 4 5\\n\"\nN, M = [int(item) for item in stdin.split(' ')]\nnums = [int(item) for item in stdin.split('\\n')[1].split(' ')]\n\nmapping = Counter(nums)\n\nmax_int = 0\n\nfor a in range(1, 9):\n    for b in range(a + 1, 9):\n        for c in range(b + 1, 9):\n            for d in range(c + 1, 9):\n                for e in range(d + 1, 9):\n                    if (a * mapping[a]) + (b * mapping[b]) + (c * mapping[c]) + (d * mapping[d]) + (e * mapping[e]) == N:\n                        max_int = a * b * c * d * e\n                        break\n                    else:\n                        continue\n            else:\n                continue\n        else:\n            continue\n    else:\n        continue\n\nprint(max_int)\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7 8 4\") == \"77777\"\n\"\"\""
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 4') == '777773'\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 4\\n3 7 8 4\") == \"777773\"\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n3 7 8 4') == '7773'\nassert solution('1 1\\n1') == '1'\nassert solution('1 1\\n4') == '1'\n\"\"\"\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 4\\n3 7 8 4') == '777773'\n"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 4\") == \"777773\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10\\n6 1 2 7\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\\n6 1 2 7\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\\n6 1 2 7\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 10\n6 1 2 7''') == '2'\nassert solution('''4 10\n6 1 2 7\n9 2 3 8\n2 2 4 9\n5 2 3 7\n2 1 2 1\n2 2 4 8\n5 4 5 6\n3 3 4 7\n7 6 2 8\n6 2 3 3\n3 2 5 4\n4 3 6 5\n9 8 4 5\n3 9 1 9\n7 5 3 6\n2 3 4 8\n9 2 3 7\n5 1 6 2\n3 8 4 9\n3 4 7 9\n2 3 3 4\n4 9 7 9\n3 8 9 2\n4 9 9 9\n6 9 6 9\n5 9 9 4\n7 8 5 1\n2 6 3 7\n3 5 5 2\n5 4 3 3\n9 9 7 2\n6 7 6 6\n9 6 7 1\n5 6 8 3\n8 8 9 1\n4 9 4 3\n7 4 5 3\n6 5 7 2\n8 8 9 7\n7 6 6 2\n2 3 5 2\n6 6 1 1\n8 1 7 3\n4 9 3 9\n7 4 4 4\n6 3 4 6\n3 9 2 7\n7 3 1 5\n4 4 2 7\n4 6 5 9\n5 8 5 5\n5 4 9 9\n7 9 9 2\n5 9 3 1\n7 9 2 7\n9 6 1 8\n7 7 3 2\n6 7 6 8\n9 2 3 2\n9 7 1 9\n9 8 1 4\n4 4 2 1\n7 4 4 4\n9 3 8 7\n8 4 1 1\n2 2 2 2\n2 7 8 7\n9 4 7 6\n8 5 4 9\n3 6 4 1\n6 2 2 7\n1 6 8 6\n9 3 1 6\n6 9 3 1\n4 7 8 9\n9 9 8 2\n7 8 5 8\n4 4 5 1\n8 1 4 9\n9 2 2 1\n7 7 6 3\n8 1 1 1\n5 2 3 8\n5 2 2 1\n9 7 6 3\n8 1 1 1\n9 7 5 7\n6 8 5 8\n3 2 9 1\n3 8 2 1\n6 7 3 1\n4 8 7 7\n9 5 9 9\n9 2 1 5\n6 9 1 1\n4 5 8 7\n4 6 1 9\n3 7 3 3\n9 9 7 7\n6 8 3 8\n5 7 3 1\n8 2 3 5\n2 3 9 4\n8 3 5 7\n8 4 6 1\n8 3 2 8\n2 7 3 6\n6 1 4 1\n2 6 3 1\n8 1 3 3\n9 9 9 9''') == '2'\n"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10\\n6 1 2 7') == 2\n\"\"\""
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10\\n6 1 2 7') == '2'\n\n\"\"\"\nfrom utils import main\n\n\"\"\"\n(4,10)\n6 1 2 7\n\n\"\"\""
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '4 10\\n6 1 2 7'\n) == '2'\n\n\"\"\"\n"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 1 2 7') == '2'\nassert solution('4 10') == '2'\n"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\\n6 1 2 7\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10\\n6 1 2 7') == '2'\n\"\"\""
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n2 2 2 2 2\\n1 1 1 2 3') == '3\\n2 2 2 2 3\\n1 1 1 2 2\\n1 3 1 2 2'\nassert solution('2 3\\n1 1 2\\n0 1 1') == '1\\n0 1 1'\n\nSolution.py\n----------------------\n"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3\n1 2 3\n0 1 1''') == '3\nassert solution('''2 3\n0 0 1\n1 1 1''') == '3\nassert solution('''2 3\n1 2 3\n0 0 1''') == '3\nassert solution('''2 3\n0 1 1\n1 1 1''') == '1\nassert solution('''2 3\n1 2 3\n0 1 1''') == '2\n"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2 3\\n0 1 1\\n\") == \"3\\n2 2 2 3\\n1 1 1 2\\n1 3 1 2\"\nassert solution(\"2 2\\n1 1 1\\n1 2 1\\n\") == \"3\\n1 1 1 2\\n1 2 1 2\"\n\"\"\""
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2 3\\n0 1 1') == '3\\n2 2 2 3'\n\"\"\"\n\nh, w = [int(x) for x in stdin.split('\\n')[0].split(' ')]\nmat = [int(x) for x in stdin.split('\\n')[1:h+1]]"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n2 3\n1 2 3\n0 1 1\n\"\"\"\n) == \"\"\"\n3\n2 2 2 3\n1 1 1 2\n1 3 1 2\n\"\"\"\n"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n1 1 1') == '1 1 1 2'\nassert solution('2 3\\n1 2 3') == '2 2 2 3'\nassert solution('2 3\\n1 1 1') == '1 1 1 2'\n\n\"\"\"\n\n\"\"\"\nThe recursive solution below only works with a well-defined max recursion depth"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 3\n1 2 3\n0 1 1''') == '''3\n2 2 2 3\n1 1 1 2\n1 3 1 2'''\n\nassert solution('''3 3\n0 2 2\n1 1 1\n0 2 2''') == '''0\n1 1 1\n1 1 1\n0 2 2'''\n"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2 3\\n0 1 1\") == \"3\\n2 2 2 3\\n1 1 1 2\"\n\n'''\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 2 3\\n0 1 1\") == \"3\\n2 2 2 3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 3\n1 2 3\n0 1 1''') == '''3\n2 2 2 3\n1 1 1 2\n1 3 1 2'''\nassert solution('''3 3\n1 2 3\n0 1 1\n1 1 1''') == '''3\n2 2 2 3\n1 1 1 2\n1 3 1 2'''\nassert solution('''3 3\n2 1 2\n1 2 1\n0 1 1''') == '''3\n2 2 2 3\n1 1 1 2\n1 3 1 2'''\n"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"10\"\n\"\"\""
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2') == '10'\n\"\"\"\n\nfrom math import factorial\nfrom itertools import product"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2''') == '10'\nassert solution('''3 5''') == '121'\nassert solution('''5 1''') == '1'\nassert solution('''2 1''') == '1'\nassert solution('''3 3''') == '6'\n"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == 10\n\"\"\""
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"10\"\n\"\"\""
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == 10\n\"\"\"\n"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2') == '10'\n"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"10\"\n\n\"\"\"\n\n\nfrom collections import Counter\n\nMOD = 10**9 + 7"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2') == '10'\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3 1 1 9\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\nassert solution(\"4 3 4 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n4 1\\n4 2\\n4 3\") == \"1 4\\n1 3\\n1 2\\n1 1\\n2 4\\n2 3\\n2 2\\n2 1\\n3 4\\n3 3\\n3 2\\n3 1\"\nassert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n4 1\\n4 2\\n4 3\") == \"1 4\\n1 3\\n1 2\\n1 1\\n2 4\\n2 3\\n2 2\\n2 1\\n3 4\\n3 3\\n3 2\\n3 1\"\nassert solution(\"6 5 6 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n4 1\\n4 2\\n4 3\\n5 1\\n5 2\\n5 3\") == \"1 5\\n1 4\\n1 3\\n1 2\\n2 6\\n2 5\\n2 4\\n2 3\\n3 7\\n3 6\\n3 5\\n3 4\\n3 7\\n3 6\\n3 5\\n4 7\\n4 6\\n4 5\\n4 7\\n4 6\\n4 5\"\nassert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\\n4 1\\n4 2\\n4 3\\n5 1\\n5 2\\n5 3\") == \"1 5\\n1 4\\n1 3\\n1 2\\n2 6\\n2 5\\n2 4\\n2 3\\n3 7\\n3 6\\n3 5\\n3 4\\n3 7\\n3 6\\n3 5\\n4 7\\n4 6\\n4 5\\n4 7\\n4 6\\n4 5\"\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\n\"\"\""
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 3 1 1 9\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n3 3') == '1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1'\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 3 1 1 9\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3 1 1 9\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\n\nimport json\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 3 1 1 9') == '1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1'\nassert solution('2 2 2 1 1 9') == '1 2\\n1 1\\n2 2\\n2 1\\n2 1\\n2 2\\n1 2\\n2 1\\n2 1'\nassert solution('2 2 2 1 1 9') == '1 2\\n1 1\\n2 2\\n2 1\\n2 1\\n2 2\\n1 2\\n2 1\\n2 1'\nassert solution('2 2 2 1 1 9') == '1 2\\n1 1\\n2 2\\n2 1\\n2 1\\n2 2\\n1 2\\n2 1\\n2 1'\nassert solution('2 2 2 1 1 9') == '1 2\\n1 1\\n2 2\\n2 1\\n2 1\\n2 2\\n1 2\\n2 1\\n2 1'\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 3 1 1 9\") == \"1 3\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 3\") == \"1 1\"\nassert solution(\"2 1\") == \"2 1\"\n"
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 3 1 1 9\") == \"1 3\\n1 2\\n1 1\\n2 3\\n2 2\\n2 1\\n3 3\\n3 2\\n3 1\"\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 0\\n0 0') == 'NO'\nassert solution('2 3\\n1 1 1\\n1 1 1') == 'YES\\n1 1 1\\n1 1 1'\nassert solution('2 3\\n0 1 0\\n1 1 1') == 'YES\\n0 0 0'\nassert solution('3 3\\n1 0 1\\n0 1 1\\n1 1 1') == 'YES\\n1 0 1\\n1 0 1\\n1 1 1'\n\"\"\"\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 0\\n0 0') == 'NO'\nassert solution('2 3\\n1 1 1\\n1 1 1') == 'YES\\n1 1 1\\n1 1 1'\nassert solution('2 3\\n0 1 0\\n1 1 1') == 'YES\\n1 1 1'\nassert solution('2 3\\n1 1 1\\n0 0 0') == 'NO'\n\nsolution([int(x) for x in stdin.strip().split('\\n')])\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 0\\n0 0\") == \"NO\"\nassert solution(\"2 3\\n1 1 1\\n1 1 1\") == \"YES\\n1 1 1\\n1 1 1\"\nassert solution(\"2 3\\n0 1 0\\n1 1 1\") == \"YES\\n0 0 0\"\nassert solution(\"2 3\\n0 0 0\\n1 1 1\") == \"NO\"\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 0 0 0\\n0 1 0 0\\n0 0 1 0\\n0 0 0 1\\n1 1 1 1\\n\") == \"YES\\n0 1 0 1\\n0 0 0 0\\n1 1 1 1\"\nassert solution(\"2 4\\n0 0 0 0\\n1 1 1 1\\n\") == \"NO\"\nassert solution(\"1 4\\n0 0 0 0\\n0 0 0 0\\n1 1 1 1\\n\") == \"YES\\n1 0 0 1\"\nassert solution(\"3 3\\n0 0 0 0\\n0 0 0 0\\n1 1 1 1\\n\") == \"YES\\n0 0 0 0\\n1 0 1 1\\n1 0 1 1\"\n\nassert solution(\"2 2\\n0 1 0\\n1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 0\\n0 0') == 'NO'\nassert solution('2 3\\n1 1 1\\n1 1 1') == 'YES\\n1 1 1\\n1 1 1'\n\"\"\"\n\na = input()\nb = [int(i) for i in input().split()]"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 3\n1 1 1\n1 1 1''') == 'YES\\n1 1 1\\n1 1 1'\n\nassert solution('''3 3\n0 1 0\n1 1 1\n1 1 1''') == 'NO'\n\nassert solution('''4 4\n1 0 0 1\n0 0 1 1\n0 0 1 1\n0 1 1 1\n0 0 0 1\n''') == 'YES\\n0 1 1 1\\n0 1 1 1\\n0 1 1 1\\n0 0 0 1'\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 0\\n0 0\") == \"NO\"\nassert solution(\"2 3\\n1 1 1\\n1 1 1\") == \"YES\\n1 1 1\\n1 1 1\"\nassert solution(\"2 3\\n0 1 0\\n1 1 1\") == \"YES\\n0 0 0\"\nassert solution(\"2 3\\n0 0 0\\n1 1 1\") == \"YES\\n0 0 0\"\nassert solution(\"2 3\\n0 0 0\\n0 1 0\") == \"NO\"\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution([\"2 2\", \"1 0\", \"0 0\"]) == \"NO\"\nassert solution([\"2 3\", \"1 1 1\", \"1 1 1\"]) == \"YES\"\nassert solution([\"2 3\", \"1 0 0\", \"0 0 0\"]) == \"YES\"\nassert solution([\"2 3\", \"0 0 0\", \"1 1 1\"]) == \"YES\"\nassert solution([\"2 3\", \"0 0 0\", \"1 0 0\"]) == \"YES\"\n"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0\\n0 0\") == \"YES\\n1 1 1\"\nassert solution(\"1 1 1\\n1 1 1\") == \"YES\\n1 1 1\"\nassert solution(\"0 1 0\\n1 1 1\") == \"NO\"\nassert solution(\"1 0\\n1 1 1\") == \"NO\"\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\n\n\n\"\"\"\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('helloo') == 'hello'\nassert solution('woooooow') == 'woow'\nassert solution('helloo') == 'hello'\nassert solution('waaaaaaaw') == 'waaw'\nassert solution('szzs') =='sz'\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\nassert solution(\"woooow\") == \"woow\"\nassert solution(\"woow\") == \"woow\"\nassert solution(\"helloo\") == \"hello\"\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"helloo\") == \"hello\"\n\"\"\""
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\n\"\"\"\n\nfrom itertools import combinations\nfrom collections import Counter"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\n\n\n-----Solution-----"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"helloo\") == \"hello\"\n\n\"\"\""
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\nassert solution(\"sousa\") == \"sos\"\nassert solution(\"sousaa\") == \"sos\"\n\"\"\""
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"helloo\") == \"hello\"\nassert solution(\"woooooow\") == \"woow\"\n"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AS') == 'YES'\nassert solution('2H') == 'NO'\nassert solution('4D') == 'YES'\n\"\"\""
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4D') == 'YES'\nassert solution('2H') == 'NO'\nassert solution('2D') == 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AS') == 'YES'\nassert solution('2H') == 'NO'\n\"\"\""
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AS\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AS\") == \"YES\"\nassert solution(\"2H\") == \"YES\"\nassert solution(\"3D\") == \"NO\"\nassert solution(\"4D\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2H 4C TH JH AD\n''') == 'YES'\nassert solution('''\n2H\n3D 4C AC KD AS\n''') == 'NO'\nassert solution('''\n4D\nAS AC AD AH 5H\n''') == 'YES'\n\"\"\""
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AS\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\nassert solution(\"4D\") == \"YES\"\n\nprint('The local tests are done. Click on \"Check\" for more details about in-browser tests.')\n"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AS\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\nassert solution(\"4D\") == \"YES\"\n\"\"\""
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2H 4C TH JH AD\") == \"YES\"\nassert solution(\"2H\") == \"NO\"\nassert solution(\"4D\") == \"YES\"\nassert solution(\"AS AC AD AH 5H\") == \"YES\"\n\n\"\"\"\nimport unittest\n\n\nclass Test20(unittest.TestCase):\n    def test_20(self):\n        self.assertEqual(solution(\"2H 4C TH JH AD\"), \"YES\")\n        self."
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4D\") == \"YES\"\nassert solution(\"2S\") == \"NO\"\n"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == 'Malvika'\nassert solution('2 3') == 'Malvika'\nassert solution('3 3') == 'Akshat'\n"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'Malvika'\nassert solution('2 2') == 'Akshat'\nassert solution('3 3') == 'Akshat'\n"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"Malvika\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\n\"\"\""
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == 'Malvika'\nassert solution('2 3') == 'Malvika'\nassert solution('3 3') == 'Akshat'\n"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2') == \"Akshat\"\nassert solution('2 3') == \"Malvika\"\nassert solution('3 3') == \"Akshat\"\n\nprint('Success')"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\nassert solution(\"2 2\") == \"Malvika\"\nassert solution(\"3 2\") == \"Akshat\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\n\n\"\"\""
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"Malvika\"\nassert solution(\"2 3\") == \"Malvika\"\nassert solution(\"3 3\") == \"Akshat\"\n\n\"\"\"\n"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"Malvika\"\n\nassert solution(\"2 3\") == \"Malvika\"\n\nassert solution(\"3 3\") == \"Akshat\"\n\n\n-----Explanation-----\n\nThe grid has four intersection points, numbered from 1 to 4.\n\n[Image] \n\nIf Akshat chooses intersection point 1, then he will remove two sticks (1 - 2 and 1 - 3). The resulting grid will look like this.\n\n [Image] \n\nNow there is only one remaining intersection point (i.e. 4). Malvika must choose it and remove both remaining sticks. After her move the grid will be empty.\n\nIn the empty grid, Akshat cannot make any move, hence he will lose.\n\nSince all 4 intersection points of the grid are equivalent, Akshat will lose no matter which one he picks.\n\"\"\"\n"
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"Malvika\"\n\nassert solution(\"2 2\") == \"Akshat\"\n\n\"\"\"\n"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 2 2 1') == '2'\n\nassert solution('9\\n100 200 300 200 100 300 300 100 200') == '300'\n"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 2 2 1') == '2'"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 2 2 1\") == \"2\"\nassert solution(\"9\\n100 200 300 200 100 300 300 100 200\") == \"300\"\nassert solution(\"2\\n3 3\") == \"3\"\nassert solution(\"3\\n4 5 6\") == \"6\"\nassert solution(\"2\\n3 4\") == \"3\"\n"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 3 2 2 1') == '2'\nassert solution('9\\n100 200 300 200 100 300 300 100 200') == '300'"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3 2 2 1\") == \"2\"\nassert solution(\"9\\n100 200 300 200 100 300 300 100 200\") == \"300\"\n\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n3 4\") == \"3\"\nassert solution(\"5\\n1 2 1 2 1\\n3 4 5 4 3\") == \"3\"\nassert solution(\"5\\n1 2 1 2 1\\n3 4 5 4 3\") == \"1\"\nassert solution(\"5\\n1 2 1 2 1\\n3 4 5 4 3\") == \"3\"\nassert solution(\"5\\n100 2 1 2 1\\n3 4 5 4 3\") == \"2\"\n"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 2 2 1\") == \"2\"\nassert solution(\"9\\n100 200 300 200 100 300 300 100 200\") == \"300\"\n\nprint(\"Well done!\")"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 2 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 2 2 1\") == \"2\"\nassert solution(\"9\\n100 200 300 200 100 300 300 100 200\") == \"300\""
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3 2 2 1\") == \"2\"\nassert solution(\"9\\n100 200 300 200 100 300 300 100 200\") == \"300\""
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == 16\nassert solution(\"5 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == 13\nassert solution(\"5 2\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == 7\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == 16\nprint(\"test 1 OK\")\n\nassert solution(\"4 2\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == 16\nprint(\"test 2 OK\")\n\nassert solution(\"4 2\\n1 3 5 2 5 4\\n1 1 0 1 1 1\") == 16\nprint(\"test 3 OK\")\n\nassert solution(\"5 4\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == 16\nprint(\"test 4 OK\")\n\nassert solution(\"6 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0\\n1 1 0 1 0 0\") == 16\nprint(\"test 5 OK\")"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == \"16\"\nassert solution(\"8 6\\n5 6 1 7 3 9 2 8\\n0 1 1 0 1 0 1\") == \"20\"\nassert solution(\"7 3\\n5 3 2 1 1 1\\n0 0 1 1 1 1\") == \"10\"\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == \"16\"\n\"\"\"\n\n\nfrom math import floor\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0') == 16\nassert solution('5 5\\n1 3 5 2 5 4\\n1 1 0 1 0 0') == 9\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 3\n1 3 5 2 5 4\n1 1 0 1 0 0''') == 16\nassert solution('''6 3\n1 3 5 2 5 4\n1 1 1 1 1 1''') == 16\n'''\n\n'''\nfrom math import inf\nfrom collections import deque\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0') == 16\nassert solution('2 3\\n1 1 0\\n0 0 1') == 5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == \"16\"\n\"\"\"\n\nn, k = [int(c) for c in input().split()]\nt = [int(c) for c in input().split()]\na = [int(c) for c in input().split()]\n\nsum_t = sum(t)\nl = [[sum_t - t[i], i] for i in range(n)]\nl.sort()\n\nsum_t = 0\nfor i in range(k):\n    sum_t += l[i][0]\n    if sum_t > 0:\n        break\n\nans = i\nfor i in range(k, n):\n    if l[i][0] > 0:\n        sum_t += l[i][0]\n        if sum_t > 0:\n            ans += 1\n    else:\n        break\n\nprint(ans)\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 3 5 2 5 4\\n1 1 0 1 0 0\") == 16\n\"\"\""
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 3 5 2 5 4\\n0 0 1 0 0 1\") == 16\nassert solution(\"2 3\\n1 3 5 2 5 4\\n0 0 1 1 1 1\") == 16\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nsec = [int(x) for x in input().split()]\n\ncurr = 0\nfor i in range(len(arr)):\n    if sec[i] == 1:\n        curr += arr[i]\n    else:\n        curr = 0\n    if curr >= k:\n        print(i)\n        break\nelse:\n    print(len(arr))\n"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3') == '1'\nassert solution('9 12') == '2'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('3 3') == '1'\nassert solution('3 4') == '2'\nassert solution('9 12') == '2'\nassert solution('10 10') == '1'\n"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"9 12\") == \"2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3') == '1\\n3\\n2\\n2 1'\nassert solution('9 12') == '2\\n3 6\\n4\\n1 2 4 5'"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"9 12\") == \"2 3\""
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"9 12\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 4\") == \"4\"\n"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"9 12\") == \"2 3 6\"\n\"\"\"\n\nfrom typing import List\n\na, b = list(map(int, stdin.strip().split()))\n\nnotes = []\n\nfor i in range(1, a + 1):\n    notes.append(i)\n\nfor j in range(1, b + 1):\n    notes.append(j)\n\nnote = []\n\nfor i in notes:\n    if i < a:\n        note.append(i)\n    else:\n        break\n\nprint(len(note))\nprint(\" \".join(map(str, note)))\n\nnote = []\n\nfor i in notes:\n    if i < b:\n        note.append(i)\n    else:\n        break\n\nprint(len(note))\nprint(\" \".join(map(str, note)))\n"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"9 12\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"6 9\") == \"0\"\nassert solution(\"8 6\") == \"2\"\n"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"9 12\") == \"2\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"1 10\") == \"0\"\n"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1\\n3\\n2\\n2\\n1 1\"\nassert solution(\"9 12\") == \"2\\n3\\n6\\n4\\n1 2 4 5\"\nprint(solution(\"9 12\"))\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n7 3\n1 2 3\n1 4 5\n4 6 7\n''') == '1 2 3 3 2 2 1'\n\nassert solution('''\n9 3\n3 6 9\n2 5 8\n1 4 7\n''') == '1 1 1 2 2 2 3 3 3'\n\nassert solution('''\n5 2\n4 1 5\n3 1 2\n''') == '2 3 1 1 3'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n') == '1 2 3 3 2 2 1'\nassert solution('9 3\\n3 6 9\\n2 5 8\\n1 4 7\\n') == '1 1 1 2 2 2 3 3 3'\n\"\"\"\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n') == '1 2 3 3 2 2 1'\nassert solution('9 3\\n3 6 9\\n2 5 8\\n1 4 7\\n') == '1 1 1 2 2 2 3 3 3'\nassert solution('5 2\\n4 1 5\\n3 1 2\\n') == '2 3 1 1 3'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n\"\n) == \"1 2 3 3 2 2 1\"\nassert solution(\n    \"9 3\\n3 6 9\\n2 5 8\\n1 4 7\\n\"\n) == \"1 1 1 2 2 2 3 3 3\"\n\nprint(\"Ok!\")\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n') == '1 2 3 3 2 2 1'\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 5\\n3 1 2\\n\") == \"1 1 1 2 2 2 3 3\"\n\"\"\""
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n') == '1 2 3 3 2 2 1'\n\"\"\"\n\n\nfrom itertools import chain\nfrom collections import Counter"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n') == '1 2 3 3 2 2 1'\nassert solution('9 3\\n3 6 9\\n2 5 8\\n1 4 7\\n') == '1 1 1 2 2 2 3 3 3'\nassert solution('5 2\\n4 1 5\\n3 1 2\\n') == '2 3 1 1 3'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n1 2 3\\n1 4 5\\n4 6 7\\n\") == \"1 2 3 3 2 2 1 \"\n"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\\n1 2 3\\n1 4 5\\n4 6 7\") == \"1 2 3 3 2 2 1\"\n\nassert solution(\"9 3\\n3 6 9\\n2 5 8\\n1 4 7\") == \"1 1 1 2 2 2 3 3 3\"\n\nassert solution(\"5 2\\n4 1 5\\n3 1 2\") == \"2 3 1 1 3\"\n"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"0\"\nassert solution(\"2 5 3\") == \"1\"\nassert solution(\"100 10 10\") == \"81\"\nassert solution(\"10 10 10\") == \"8\"\nassert solution
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == '0'\nassert solution('2 5 3') == '1'\nassert solution('100 10 10') == '81'\n\"\"\"\n"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5 3\") == 1\nassert solution(\"100 10 10\") == 81\n\"\"\""
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 5\") == \"0\"\nassert solution(\"100 10 10\") == \"81\"\nassert solution(\"2 5 3\") == \"1\"\nassert solution(\"100 50 20\") == \"8\"\nassert solution(\"100 150 20\") == \"7\"\n"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 5\") == \"0\"\nassert solution(\"2 5 3\") == \"1\"\nassert solution(\"100 10 10\") == \"81\"\n\"\"\""
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == 0\nassert solution('2 5 3') == 1\nassert solution('100 10 10') == 81\n\"\"\"\n"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"0\"\nassert solution(\"2 5 3\") == \"1\"\nassert solution(\"100 10 10\") == \"81\"\nprint('all tests passed')\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 20 30\") == \"0\"\nassert solution(\"100 10 10\") == \"81\"\nassert solution(\"3 4 5\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == 0\nassert solution(\"2 5 3\") == 1\nassert solution(\"100 10 10\") == 81\n\"\"\"\n"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == \"0\"\nassert solution(\"2 5 3\") == \"1\"\nassert solution(\"100 10 10\") == \"81\""
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '13 3\\n3 2 7'\n) == 'even'\nassert solution(\n    '10 9\\n1 2 3 4 5 6 7 8 9'\n) == 'odd'\nassert solution(\n    '99 5\\n32 92 85 74 4'\n) == 'odd'\nassert solution(\n    '2 2\\n1 0'\n) == 'even'\n\"\"\"\n\nb, k = map(int, input().split())\na = list(map(int, input().split()))"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13 3') == 'even'\nassert solution('10 9') == 'odd'\n\"\"\"\n"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13 3\") == \"even\"\nassert solution(\"99 5\") == \"odd\"\nassert solution(\"99 9\") == \"even\"\nassert solution(\"2 2\") == \"even\"\n"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13 3\") == \"even\"\nassert solution(\"99 5\") == \"odd\"\nassert solution(\"10 9\") == \"odd\"\nassert solution(\"2 2\") == \"even\"\nassert solution(\"1 0\") == \"even\"\n"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 3\") == \"even\"\nassert solution(\"99 5\") == \"odd\"\nassert solution(\"10 9\") == \"odd\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"even\"\nassert solution(\"99 32 92 85 74 4\") == \"odd\"\n\nimport sys\nimport ast"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 3\") == \"even\"\nassert solution(\"10 9\") == \"odd\"\nassert solution(\"99 5\") == \"odd\"\nassert solution(\"2 2\") == \"even\"\n\n\n\n\n\n\n\n\nimport sys\nimport functools"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13 3') == 'even'\nassert solution('10 9') == 'odd'\nassert solution('99 5') == 'odd'\nassert solution('2 2') == 'even'\n\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13 3\\n3 2 7') == 'even'\nassert solution('10 9\\n1 2 3 4 5 6 7 8 9') == 'odd'\nassert solution('99 5\\n32 92 85 74 4') == 'odd'\nassert solution('2 2\\n1 0') == 'even'\n\n\"\"\"\n\nimport re\n\nfrom collections import deque\n"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13 3\\n3 2 7') == \"even\"\nassert solution('10 9\\n1 2 3 4 5 6 7 8 9') == \"odd\"\nassert solution('99 5\\n32 92 85 74 4') == \"odd\"\nassert solution('2 2\\n1 0') == \"even\"\n"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13 3\") == \"even\"\nassert solution(\"10 9\") == \"odd\"\nassert solution(\"99 5\") == \"odd\"\nassert solution(\"2 2\") == \"even\"\n\"\"\""
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 2 2 2\") == \"1 1 2 2 2\"\nassert solution(\"5 3 2 2 2\") == \"1 1 2 2 2\"\nassert solution(\"4 3 2 2 2\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 2 2 2') == 'Possible'\nassert solution('5 3 2 2 2') == 'Impossible'\n\nassert solution('4 3 2 2 2') == 'Impossible'\nassert solution('5 4 2 2 2') == 'Impossible'\n\nassert solution('5 5 2 2 2') == 'Impossible'\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2 2 2\") == \"Possible\\n1 1 2 2 2\"\nassert solution(\"5 3 2 2 2\") == \"Impossible\"\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"Possible\"\nassert solution(\"5 3 2 2 2\") == \"Possible\"\nassert solution(\"5 4 2 2 2\") == \"Impossible\"\nassert solution(\"7 4 2 2 2\") == \"Impossible\"\nassert solution(\"8 4 2 2 2\") == \"Impossible\"\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2 2 2\") == \"Possible\\n1 1 2 2 2 \"\nassert solution(\"5 3 2 2 2\") == \"Possible\\n1 1 2 2 2 \"\nassert solution(\"4 0 1 2 3\") == \"Impossible\"\n\n\n\n-----Test-----\n\nimport os\nimport sys\nimport unittest\n\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\nsys.path.append(os.path.dirname(BASE_DIR))\nfrom String import solution\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution_1(self):\n        ans = solution(\"3 3 2 2 2\")\n        self.assertEqual(ans, \"Possible\\n1 1 2 2 2 \")\n\n    def test_solution_2(self):\n        ans = solution(\"5 3 2 2 2\")\n        self.assertEqual(ans, \"Possible\\n1 1 2 2 2 \")\n\n    def test_solution_3(self):\n        ans = solution(\"4 0 1 2 3\")\n        self."
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == 'Possible\\n1 1 2 2'\nassert solution('5\\n3 3 2 2 2') == 'Impossible'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2 2 2\") == \"Possible\\n1 1 2 2 2\"\nassert solution(\"5 3 2 2 2\") == \"Impossible\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2 2 2\") == \"Possible\\n1 1 2 2 2\"\nassert solution(\"5 3 2 2 2\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2 2 2\") == \"Possible\\n1 1 2 2 2\"\nassert solution(\"5 3 2 2 2\") == \"Impossible\"\nassert solution(\"4 0 1 2 3\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0 0\") == \"Possible\\n1 1 1\"\nassert solution(\"5\\n3 3 2 2 2\") == \"Possible\\n1 1 2 2 2\"\nassert solution(\"4\\n0 1 2 3\") == \"Impossible\"\n\nassert solution(\"5\\n3 3 2 2 2\") == \"Possible\\n1 1 2 2 2\"\nassert solution(\"5\\n3 3 2 2 2\") == \"Possible\\n1 1 2 2 2\"\n"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n999999999 999999999 999999999 999999999 999999999') == '3999999996'\nassert solution('3\\n1 2 3') == '6'\nassert solution('1\\n1') == '0'\n\"\"\"\n\nimport sys\nfrom functools import reduce\n\nassert len(sys.argv) == 2\nlines = sys.argv[1].split(\"\\n\")\nn = int(lines[0])\nnums = list(map(int, lines[1].split()))\n"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '6'\nassert solution('5\\n999999999 999999999 999999999 999999999 999999999') == '3999999996'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == 6\n\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import combinations\n"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3\\n') == '6'\nassert solution('5\\n999999999 999999999 999999999 999999999 999999999\\n') == '3999999996'\n\n\"\"\""
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sample_input) == sample_output\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5') == '3999999996'\nassert solution('3\\n1 2 3') == '6'\nassert solution('7\\n999999999 999999999 999999999 999999999 999999999') == '3999999996'\n\"\"\"\n"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '10'\nassert solution('5\\n1 2 3 4 5') == '15'\nassert solution('6\\n1 2 3 4 5 6') == '18'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n999999999 999999999 999999999 999999999 999999999\") == \"999999999\"\nassert solution(\"3\\n1 2 3\") == \"6\""
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n999999999 999999999 999999999 999999999 999999999\") == \"3999999996\"\n\"\"\"\n"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == 6\nassert solution('5\\n999999999 999999999 999999999 999999999 999999999') == 3999999996\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2\\n3 4\\n3 2\") == \"2\\n2 2 1\"\nassert solution(\"6\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\") == \"3\\n1 1\\n2 2 3\"\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n3 4\") == \"2\\n2 2 1\"\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n3 4') == '2\\n2 2 1'\nassert solution('6\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6') == '3\\n1 1\\n2 2 3'"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n3 4\") == \"2\\n2 2 1\"\nassert solution(\"6\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\") == \"3\\n1 1\\n2 2 3\"\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n3 4\\n3 2\") == \"2\\n2 2 1\\n1 3\"\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2\\n3 4') == '2\\n2 2 1'\n\"\"\"\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"1 2\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nsys.setrecursionlimit(111111)\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n3 4\") == '2'\nassert solution(\"6\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\") == '3'\nassert solution(\"6\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\\n7 8\\n1 2\") == '2'\nassert solution(\"6\\n3 4\\n5 4\\n3 2\\n1 3\\n4 6\\n7 8\\n1 2\\n3 6\\n1 2\\n3 4\\n1 2\\n3 4\\n3 4\\n3 4\\n3 4\") == '3'\n\n\"\"\"\n\nfrom typing import List\nimport unittest\n\nclass Solution:\n    def solution(self, n: int) -> int:\n        # create a graph with all possible edges\n        g = [[] for _ in range(n)]\n        for u, v in self.input:\n            g[u - 1].append(v - 1)\n            g[v - 1].append(u - 1)\n\n        # compute components of the graph\n        components = []\n        for _ in range(n):\n            components.append(set())\n\n        for i in range(n):\n            if len(components[i]) == 0:\n                components[i] = {i}\n                queue = [i]\n                while len(queue) > 0:\n                    node = queue.pop()\n                    for neighbor in g[node]:\n                        if neighbor not in components[i]:\n                            components[i].add(neighbor)\n                            queue.append(neighbor)\n        return sum(len(c) for c in components)\n\n    def solution2(self, n: int) -> int:\n        # create a graph with all possible edges\n        g = [[] for _ in range(n)]\n        for u, v in self.input:\n            g[u - 1].append(v - 1)\n            g[v - 1].append(u - 1)\n\n        # compute components of the graph\n        components = []\n        for _ in range(n):\n            components.append(set())\n\n        for i in range(n):\n            if len(components[i]) == 0:\n                components[i] = {i}\n                queue = [i]\n                while len(queue) > 0:\n                    node = queue.pop()\n                    for neighbor in g[node]:\n                        if neighbor not in components[i]:\n                            components[i].add(neighbor)\n                            queue.append(neighbor)\n        return len(set.union(*components))\n\n    def solution3(self, n: int) -> int:\n        # create a graph with all possible edges\n        g = [[] for _ in range(n)]\n        for u, v in self.input:\n            g[u - 1].append(v - 1)\n            g[v - 1].append(u - 1)\n\n        # compute components of the graph\n        components = []\n        for _ in range(n):\n            components.append(set())\n\n        for i in range(n):\n            if len(components[i]) == 0:\n                components[i] = {i}\n                queue = [i]\n                while len(queue) > 0:\n                    node = queue.pop()\n                    for neighbor in g[node]:\n                        if neighbor not in components[i]:\n                            components[i].add(neighbor)\n                            queue.append(neighbor)\n        return len(set.union(*components))\n\n    def solution4(self, n: int) -> int:\n        # create a graph with all possible edges\n        g = [[] for _ in range(n)]\n        for u, v in self.input:\n            g[u - 1].append(v - 1)\n            g[v - 1].append(u - 1)\n\n        # compute components of the graph\n        components = []\n        for _ in range(n):\n            components.append(set())\n\n        for i in range(n):\n            if len(components[i]) == 0:\n                components[i] = {i}\n                queue = [i]\n                while len(queue) > 0:\n                    node = queue.pop()\n                    for neighbor in g[node]:\n                        if neighbor not in components[i]:\n                            components[i].add(neighbor)\n                            queue.append(neighbor)\n        return len(set.union(*components))\n\n    def solution5(self, n: int) -> int:\n        # create a graph with all possible edges\n        g = [[] for _ in range(n)]\n        for u, v in self.input:\n            g[u - 1].append(v - 1)\n            g[v - 1].append(u - 1)\n\n        # compute components of the graph\n        components = []\n        for _ in range(n):\n            components.append(set())\n\n        for i in range(n):\n            if len(components[i]) == 0:\n                components[i] = {i}\n                queue = [i]\n                while len(queue) > 0:\n                    node = queue.pop()\n                    for neighbor in g[node]:\n                        if neighbor not in components[i]:\n                            components[i].add(neighbor)\n                            queue.append(neighbor)\n        return len(set.union(*components))\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_solution1(self):\n        self.assertEqual(self.solution.solution(4), 2)\n\n    def test_solution2(self):\n        self."
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\\n3 4\") == \"2\\n2 2 1\\n1 3\"\nassert solution(\"3\\n1 2\\n3 4\") == \"3\\n1 1\\n2 2\\n2 4\\n1 3\"\nassert solution(\"4\\n1 2\\n3 4\") == \"4\\n1 1\\n2 2\\n2 4\\n1 3\"\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 15 5 10') == \"yes\"\nassert solution('4\\n0 10 5 15') == \"no\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 10 5 15\") == \"yes\"\nassert solution(\"4\\n0 15 5 10\") == \"no\"\n\n\n\n-----Explanation-----\nThe first test is on the picture to the left. The line passes through the first and the third point. The second point is above the abscissa, so it intersects with the semi-circle. The line passes through the first and the second point. The second point is above the abscissa, so it intersects with the semi-circle.\n\nThe second test is on the picture to the right. The line passes through the first and the second point. The second point is above the abscissa, so it intersects with the semi-circle. The line passes through the first point and the third point. The third point is above the abscissa, so it intersects with the semi-circle.\n\nA correct solution should print \"yes\" in the first and in the second case.\n\"\"\""
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 10 5 15\") == \"yes\"\nassert solution(\"4\\n0 15 5 10\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 10 5 15\\n\") == \"yes\\n\"\nassert solution(\"4\\n0 15 5 10\\n\") == \"no\\n\"\nassert solution(\"4\\n10 5 15 0\\n\") == \"yes\\n\"\nassert solution(\"4\\n15 5 10 0\\n\") == \"no\\n\"\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 15 5 10') == 'yes'\nassert solution('4\\n0 10 5 15') == 'no'\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 10 5 15\") == \"yes\\n\"\nassert solution(\"4\\n0 15 5 10\") == \"no\\n\"\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 15 5 10\") == \"yes\"\nassert solution(\"4\\n0 10 5 15\") == \"no\"\nassert solution(\"4\\n0 5 10 15\") == \"no\"\nassert solution(\"4\\n0 15 5 10\") == \"yes\"\nassert solution(\"4\\n0 5 10 15\") == \"yes\"\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 10 5 15\") == \"yes\"\nassert solution(\"4\\n0 15 5 10\") == \"no\"\nassert solution(\"4\\n0 10 20 15\") == \"yes\"\n\n\"\"\""
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 15 5 10') == 'yes'\nassert solution('4\\n0 10 5 15') == 'no'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 10 5 15') == 'yes'\nassert solution('4\\n0 15 5 10') == 'no'\nassert solution('4\\n0 10 10 10') == 'yes'\nassert solution('4\\n10 10 10 10') == 'yes'\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert solution('4\\n0 10 5 15') == 'yes'"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0 1\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\nassert solution(\"5\\n0 1 1 0 1\") == \"EASY\"\nassert solution(\"5\\n1 0 1 0 1\") == \"EASY\"\nassert solution(\"5\\n0 1 1 0 1\") == \"EASY\"\n"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0 1\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\n\"\"\"\nimport sys"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0 1\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\nassert solution(\"5\\n1 1 1 0 1\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\n\"\"\""
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0 1') == 'HARD'\nassert solution('1\\n0') == 'EASY'\n\"\"\"\n\nnum_of_people = int(stdin.readline().strip())\nresponses = list(map(int, stdin.readline().strip().split()))\n\nis_easy = False\n\nfor num in responses:\n    if num == 1:\n        is_easy = True\n\nprint('EASY' if is_easy else 'HARD')\n"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0 1\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\n\"\"\"\n"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0 1\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\n\"\"\"\n\n\"\"\"\nfrom collections import Counter\n\nn = int(stdin.readline())\nans = [0] * n\nfor i in range(n):\n    ans[i] = int(stdin.readline())\nc = Counter(ans)\n"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n0 0 1') == 'HARD'\nassert solution('1\\n0') == 'EASY'\n\n\"\"\""
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 0 1') == 'HARD'\nassert solution('1\\n0') == 'EASY'"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0 1\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\n\n\"\"\"\n"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0 1\") == \"HARD\"\nassert solution(\"1\\n0\") == \"EASY\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2 2\"\nassert solution(\"6\") == \"3 3\"\nassert solution(\"9\") == \"3 6\"\n\"\"\"\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == '2 2'\nassert solution(\"6\") == '3 3'\nassert solution(\"9\") == '3 6'\n\n\"\"\"\n\n\nclass LCM:\n\n    @staticmethod\n    def find_lcm(a: int, b: int) -> int:\n        \"\"\"\n        Finds the least common multiple of two integers.\n        :param a: First integer\n        :param b: Second integer\n        :return: Least common multiple of the two integers\n        \"\"\"\n        lcm = a * b // math.gcd(a, b)\n        return lcm\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n6') == '2 2'\nassert solution('9\\n') == '3 3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"2 2\"\nassert solution(\"6\") == \"3 3\"\nassert solution(\"9\") == \"3 6\"\n\"\"\"\n\nimport sys\n\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    a, b = 0, 0\n    lcm = 1\n    while a + b <= n:\n        if a + b == n:\n            break\n        if b == 0:\n            if lcm * 2 < a + b:\n                lcm = lcm * 2\n                break\n            a, b = a + lcm, lcm\n        if a == 0:\n            if lcm * 3 < a + b:\n                lcm = lcm * 3\n                break\n            a, b = a + lcm, lcm\n        if a + b < lcm * 2:\n            lcm = a + b\n            break\n        if a + b < lcm * 3:\n            lcm = a + b\n            break\n        a, b = a + lcm, lcm\n    print(lcm // 2, lcm // 3)\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n6\\n9') == '2 2\\n3 3\\n3 6'\n\n-----Time-----\n\n~~~1.5h~~~\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n6\\n9') == '2 2'\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6\") == \"3\\n3\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6\") == \"2 2\"\nassert solution(\"9\\n18\") == \"3 3\"\n"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2 2\"\nassert solution(\"6\") == \"3 3\"\nassert solution(\"9\") == \"3 6\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"2 2\"\nassert solution(\"6\") == \"3 3\"\nassert solution(\"9\") == \"3 6\"\n\n\"\"\"\n\nimport functools\nfrom typing import List"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\nxxxx\\nxfax\\nxcex\\nxxxx') == '1'\nassert solution('4 2\\nfac\\ncef') == '2'\nassert solution('1 4\\nface') == '0'\nassert solution('2 3\\nfac\\ncef') == '2'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n-----\nHow it is used: This is one of the challenges of the classical data structures. It is hard to automate the process of face detection in the image. In the face detection task you have to write a small program that automatically detects all faces on a picture and outputs the number of faces.\n\nPrecondition: m >= 1"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\nxxx\\nxfax\\nxcex\\nxxxx\") == '1'\nassert solution(\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\") == '1'\nassert solution(\"4 2\\nxx\\ncf\\nae\\nxx\") == '1'\nassert solution(\"4 2\\nfac\\ncef\\n\") == '2'\nassert solution(\"1 4\\nface\\n\") == '0'\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\nxxxx\\nxfax\\nxcex\\nxxxx') == '1'\nassert solution('4 2\\nfac\\ncef') == '2'\nassert solution('1 4\\nface') == '0'\n\n---"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('12 13\\n5 6\\n') == '2'\nassert solution('12 13\\n5 6\\nface') == '1'\nassert solution('12 13\\n5 6\\nfac') == '2'\nassert solution('12 13\\n5 6\\ncef') == '0'\n\n\"\"\""
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\") == 1\nassert solution(\"4 2\\nfac\\ncef\") == 2\nassert solution(\"1 4\\nface\") == 0\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\") == 1\n\"\"\"\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '0'\nassert solution('xface') == '1'\nassert solution('fxxcex') == '1'\nassert solution('facex') == '2'\nassert solution('fxxcexxxcex') == '2'\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\nxx\\ncf\\nae\\nxx\") == \"1\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\nxxxxxxxx\\nxfax\\nxcex\\nxxxxxx\\n\") == \"1\"\nassert solution(\"4 2\\nfac\\ncef\\n\") == \"2\"\nassert solution(\"1 4\\nface\\n\") == \"0\"\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\nxxxx\\nxfax\\nxcex\\nxxxx\") == \"1\"\nassert solution(\"4 2\\nfac\\ncef\") == \"2\"\nassert solution(\"1 4\\nface\") == \"0\""
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\nassert solution('61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576') == '61803398874989484820458683436563811772030917980576'\n"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\n\"\"\"\n\nnumbers = input().split(\" \")\na, b = int(numbers[0]), int(numbers[1])"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576') == '61803398874989484820458683436563811772030917980576'\nassert solution('100 99') == '99'\nassert solution('10 100') == '10'"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\") == \"61803398874989484820458683436563811772030917980576\"\n\"\"\""
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\") == \"61803398874989484820458683436563811772030917980576\"\n\nassert solution(\"1 1\") == \"1\"\n\nassert solution(\"1 10\") == \"1\"\n\nassert solution(\"10 10\") == \"1\""
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n\") == \"1\"\n\"\"\"\n\na, b = stdin.split()\na, b = int(a), int(b)\n\ngcd_list = []"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\") == \"61803398874989484820458683436563811772030917980576\"\nassert solution(\"1 1\") == \"1\""
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n1**2\\na3*0\\nc4**\\n') == '1\\n'\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n#*&#*\\n*a1c&\\n&q2w*\\n#a3c#\\n*&#*&\") == 3\n\"\"\"\n\nimport math\nfrom collections import deque\n"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\", \"1**2\", \"a3*0\", \"c4**\") == \"1\"\nassert solution(\"5 5\", \"#*&#*\", \"*a1c&\", \"&q2w*\", \"#a3c#\", \"*&#*&\") == \"3\"\n\"\"\""
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n#*&#*\\n*a1c&\\n&q2w*\\n#a3c#\\n*&#*&\\n') == 3\n\"\"\"\n"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n1**2\\na3*0\\nc4**') == '1'\nassert solution('5 5\\n#*&#*\\n*a1c&\\n&q2w*\\n#a3c#\\n*&#*&') == '3'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1*a\") == \"a1\"\nassert solution(\"a1*\") == \"a1\"\nassert solution(\"a1*1*\") == \"a1a1\"\nassert solution(\"a1*1#\") == \"a1a1\"\nassert solution(\"a1*1**\") == \"a1a1\"\n"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1**2\\na3*0\\nc4**\") == 1\nassert solution(\"#*&#*\\n*a1c&\\n&q2w*\\n#a3c#\\n*&#*&\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n1**2\\na3*0\\nc4**\\n\") == \"1\"\nassert solution(\"5 5\\n#*&#\\n*a1c&\\n&q2w*\\n#a3c#\\n*&#*&\\n\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1**2\\na3*0\\nc4**\") == \"1\"\nassert solution(\"#*&#*\\n*a1c&\\n&q2w*\\n#a3c#\\n*&#*&\") == \"3\"\n\"\"\""
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n99') == '0'\nassert solution('3\\n123') == '1'\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n11') == '1'\nassert solution('2\\n99') == '0'\nassert solution('3\\n11') == '1'\nassert solution('4\\n100100') == '2'\nassert solution('5\\n1101101') == '3'\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11\\n99') == '1'\nassert solution('1\\n99') == '0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n11') == '1'\nassert solution('1\\n99') == '0'\nassert solution('1\\n111') == '1'\n\"\"\""
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == '1'\nassert solution(\"99\") == '0'\n\"\"\"\n\nk = int(input())\nn = input()\n\nnum_sum = 0\nfor ch in n:\n    num_sum += int(ch)\n\nprint(num_sum)\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n11') == '1'\nassert solution('3\\n99') == '0'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n11\") == \"1\"\nassert solution(\"3\\n99\") == \"0\"\nassert solution(\"3\\n111\") == \"0\"\n\n\"\"\"\n\nk = int(stdin.readline().rstrip())\nn = int(stdin.readline().rstrip())\n\nn_s = str(n)"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2') == '0'\nassert solution('3\\n99') == '0'\nassert solution('3\\n55') == '1'\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n11\") == \"1\"\nassert solution(\"3\\n99\") == \"0\"\nprint(\"Test PASSED\")\n\n\"\"\"\n\nfrom typing import Any\nimport os\nimport sys"
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('12') == '1'\nassert solution('12345') == '1'\nassert solution('123456789') == '0'\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n3\\n2\\n5\\n4\\n3\") == \"3 3\"\nassert solution(\"1\\n2\\n3\\n2\\n3\\n1\\n1\") == \"3\"\nassert solution(\"1\\n2\\n3\\n1\\n2\\n1\\n3\") == \"1 3\"\n\"\"\"\n\nfrom collections import Counter, deque"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4\") == \"2 2\\n1 3\"\nassert solution(\"5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1\") == \"3 3\\n3 4 7\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4\") == \"2 2\\n1 3\"\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1\") == \"3 3\\n3 4 7\"\n\n\"\"\"\n\nfrom collections import deque, namedtuple\nimport heapq\nimport random\nimport sys\n\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 10**9 + 7\n\n\nclass UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [1] * n\n        self.size = [1] * n\n        self.n = n\n\n    def root(self, i):\n        if self.parent[i] == i:\n            return i\n        self.parent[i] = self.root(self.parent[i])\n        return self.parent[i]\n\n    def unite(self, i, j):\n        x, y = self.root(i), self.root(j)\n        if x == y:\n            return\n\n        if self.rank[x] < self.rank[y]:\n            x, y = y, x\n        if self.rank[x] == self.rank[y]:\n            self.rank[x] += 1\n        self.size[y] += self.size[x]\n        self.parent[x] = y\n        self.size[x] = 0\n\n    def same(self, i, j):\n        return self.root(i) == self.root(j)\n\n    def count(self, i):\n        return self.size[self.root(i)]\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4\") == \"2 2\\n1 3\"\nassert solution(\"5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1\") == \"3 3\\n3 4 7\"\n\"\"\"\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6\\n2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4') == '2 2\\n1 3\\n'\nassert solution('5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1') == '3 3\\n3 4 7\\n'\nassert solution('5 3\\n3 4 6\\n2 1 4\\n1 3 5\\n4 2 1') == '3 3\\n3 4\\n'\nassert solution('5 6\\n2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4') == '2 2\\n1 3\\n'\nassert solution('5 7\\n2 1 5\\n3 2 3\\n1 3 3\\n2 4 1\\n4 3 5\\n5 4 1') == '3 3\\n3 4 7\\n'\n\"\"\"\n\nimport sys\n\nnumber_of_crossroads, number_of_roads = map(int, input().split())\n\ncrossroads = []\n\nfor i in range(number_of_roads):\n    start, end, number_of_traffic_controllers = map(int, input().split())\n    crossroads.append([start, end, number_of_traffic_controllers])"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n2 1 1\\n5 2 6\\n2 3 2\\n3 4 3\\n4 5 5\\n1 5 4\") == \"2 2\\n1 3\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom itertools import permutations\n\nN, M = map(int, sys.stdin.readline().split())\nedges = defaultdict(list)\nrev = defaultdict(list)\nfor _ in range(M):\n    A, B, C = map(int, sys.stdin.readline().split())\n    edges[A].append([B, C])\n    rev[B].append([A, C])\n\nqueue = [[1]]\nwhile queue:\n    path = queue.pop()\n    for c, cost in edges[path[-1]]:\n        if c not in path:\n            queue.append(path + [c])\n            rev[c].remove([path[-1], cost])\n\nans = [0] * (N + 1)\nfor c, cost in rev.items():\n    ans[c] = cost[0][1]\n\nperm = list(permutations(ans[2:]))\nans = min(perm, key=lambda x: sum(x))\n\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 2\\n3 1 2\\n4 2 3\") == \"2 2\\n1 3\"\nassert solution(\"3 2 2\\n3 1 2\\n4 2 3\") == \"2 2\\n1 3\"\nassert solution(\"1 2 1\") == \"0 0\"\nassert solution(\"4 3 2\\n4 5 1\\n4 3 3\") == \"0 0\"\n\n\"\"\"\n\nfrom collections import deque, defaultdict"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 4 3 6 7 1\") == \"1 2 4 3 6 7 5\"\n\"\"\""
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 1 5 3') == '1 2 3 4 5'\n\n\"\"\"\n"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1000001\\n0000000\\n0010000\") == '1 2 4 3 6 7 5'\nassert solution(\"5\\n4 2 1 5 3\\n00100\\n00011\\n10010\\n01101\\n01010\") == '1 2 3 4'\nassert solution(\"6\\n3 2 1 6 5 4\\n10010\\n01010\\n10010\\n10010\\n01010\\n10110\") == '2 3 1 6 5 4'\nassert solution(\"7\\n2 1 3 5 6 4 7\\n10010\\n11110\\n10110\\n10010\\n11110\\n10110\") == '1 2 4 3 5 6 7'"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1000001\\n0000000\\n0010000\\n1001000\") == \"1 2 4 3 6 7 5\"\nassert solution(\"5\\n4 2 1 5 3\\n00100\\n00011\\n10010\\n01101\\n01010\") == \"1 2 3 4 5\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1000001\\n0000000\\n0010000\\n1001000\") == \"1 2 4 3 6 7 5\"\nassert solution(\"5\\n4 2 1 5 3\\n00100\\n00011\\n10010\\n01101\\n01010\") == \"1 2 3 4 5\"\n\"\"\"\n"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1000001\\n0000000\\n0010000') == '1 2 4 3 6 7 5'\nassert solution('5\\n4 2 1 5 3\\n00100\\n00011\\n10010\\n01101\\n01010') == '1 2 3 4'\n\"\"\"\n\nn = int(stdin.readline().strip())\np = [int(i) for i in stdin.readline().strip().split()]\nA = []\nfor i in range(n):\n    A.append(list(map(int, stdin.readline().strip())))\n\nout = []\nfor i in range(n):\n    for j in range(n):\n        if A[i][j] == 1:\n            out.append(p[i])\n            out.append(p[j])\nprint(' '.join(str(i) for i in out))\n"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n5 2 4 3 6 7 1\") == \"1 2 4 3 6 7 5\"\n\n-----Resources-----\n\n[1] https://www.youtube.com/watch?v=YwW6t96iYLU\n[2] https://en.wikipedia.org/wiki/Permutation#Permutation_rep_of_a_set\n[3] https://www.geeksforgeeks.org/find-the-prettiest-permutation-possible/\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1000001\\n0000000\\n0010000\") == \"1 2 4 3 6 7 5\""
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n4 2 1 5 3\\n00100\\n00011\\n10010\\n01101\\n01010\\n') == '1 2 3 4 5'\n\nassert solution('7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1000001\\n0000000\\n0010000\\n1001000\\n') == '1 2 4 3 6 7 5'\n\n\"\"\""
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 4 3 6 7 1') == '1 2 4 3 6 7 5'\nassert solution('4 2 1 5 3') == '1 2 3 4 5'\nassert solution('4 2 1 5 3') == '1 2 3 4 5'\n\n-----\n\n\"\"\""
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\n\"\"\""
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\n\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\nprint('Success')"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\n\"\"\"\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\nassert solution(\"hjkmn\") == 5\nassert solution(\"ejkko\") == 7\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bbb') == 1\nassert solution('abcd') == 4\nassert solution('yzyz') == 2\n\n\"\"\"\n"
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == 4\nassert solution(\"bbb\") == 1\nassert solution(\"yzyz\") == 2\n\"\"\"\n"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 C\\n6 B\\n16 BAC\") == \"15\"\nassert solution(\"10 A\\n9 BC\\n11 CA\\n4 A\\n5 B\") == \"16\"\nassert solution(\"5 BA\\n11 CB\") == \"-1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\n5 C\n6 B\n16 BAC\n4 A\"\"\") == \"15\"\nassert solution(\"\"\"2\n5 BA\n11 CB\"\"\") == \"16\"\nassert solution(\"\"\"5\n10 A\n9 BC\n11 CA\n4 A\n5 B\"\"\") == \"13\"\nassert solution(\"\"\"6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\"\"\") == \"250\"\nassert solution(\"\"\"2\n5 BA\n11 CB\"\"\") == \"16\"\n\n\"\"\""
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5 C\\n6 B\\n16 BAC\\n4 A\\n') == '15'\nassert solution('2\\n5 BA\\n11 CB\\n') == '16'\nassert solution('5\\n10 A\\n9 BC\\n11 CA\\n4 A\\n5 B\\n') == '-1'\nassert solution('6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA\\n') == '250'\nassert solution('2\\n5 BA\\n11 CB\\n') == '16'\n"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5 C\\n6 B\\n16 BAC\") == \"15\"\nassert solution(\"5\\n10 A\\n9 BC\\n11 CA\\n4 A\") == \"13\"\nassert solution(\"2\\n5 BA\\n11 CB\") == \"16\"\n\"\"\""
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5\\n6\\n16\\n4') == '15'\nassert solution('2\\n10\\n15\\n11\\n5\\n9') == '-1'\nassert solution('5\\n10\\n11\\n4\\n5') == '13'\nassert solution('6\\n100\\n355\\n150\\n160\\n180\\n190') == '250'\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5 C\\n6 B\\n16 BAC\\n4 A\") == \"15\"\nassert solution(\"2\\n10 AB\\n15 BA\\n\") == \"16\"\nassert solution(\"5\\n10 A\\n9 BC\\n11 CA\\n4 A\\n5 B\") == \"13\"\nassert solution(\"6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA\\n\") == \"250\"\nassert solution(\"2\\n5 BA\\n11 CB\\n\") == \"16\"\n"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5 C\\n6 B\\n16 BAC\\n4 A\") == 15\n\"\"\"\n"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4\n5 C\n6 B\n16 BAC\n4 A\"\"\") == \"15\"\nassert solution(\"\"\"2\n10 AB\n15 BA\"\"\") == \"16\"\nassert solution(\"\"\"5\n10 A\n9 BC\n11 CA\n4 A\n5 B\"\"\") == \"-1\"\nassert solution(\"\"\"6\n100 A\n355 BCA\n150 BC\n160 AC\n180 B\n190 CA\"\"\") == \"250\"\n"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n6\\n16\\n4\") == \"15\"\nassert solution(\"2\\n10\\n15\\n11\\n4\") == \"16\"\nassert solution(\"5\\n10\\n9\\n11\\n4\\n5\") == \"13\"\nassert solution(\"6\\n100\\n355\\n150\\n160\\n180\\n190\") == \"250\"\nassert solution(\"2\\n5\\n11\\n15\\n4\") == \"16\"\n"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5 C\\n6 B\\n16 BAC') == '15'\nassert solution('2\\n10 AB\\n15 BA') == '-1'\nassert solution('5\\n10 A\\n9 BC\\n11 CA\\n4 A') == '13'\nassert solution('6\\n100 A\\n355 BCA\\n150 BC\\n160 AC\\n180 B\\n190 CA') == '250'\n\"\"\"\n"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''10 25\n1 10\n1 20\n2 3\n2 5\n3 6\n3 10\n4 8\n4 9\n5 7\n5 10\n6 4\n6 13\n7 12\n7 20\n8 11\n8 15\n9 14\n9 23\n10 22\n10 25\n''') == '''1: 0\n2: 0\n3: 1 10\n4: 1 9\n5: 1 8\n6: 1 7\n7: 1 6\n8: 1 5\n9: 1 4\n10: 2 3'''\nassert solution('''9 8\n1 2\n1 3\n1"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n1') == '1: 0'\nassert solution('1\\n1\\n2') == '1: 0 2'\n\n-----\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430-----\n5 51\n10 23\n23 42\n39 42\n10 39\n39 58\n\n-----\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430-----\n10: 1 42\n23: 1 39\n39: 1 23\n42: 1 10\n58: 2 10 42\n\n-----\u0418\u0437\ufffd"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58') == '10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58\\n') == '10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42'\n\nassert solution('5 100\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '1: 0\\n2: 0\\n3: 1 4\\n4: 1 3'\n\n\"\"\"\n\n\"\"\"\n\u0421\u0442\u0440\u043e\u043a\u0438 \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 \ufffd"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58') == '10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42'\nassert solution('5 100\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '1: 0\\n2: 0\\n3: 1 4\\n4: 1 3'\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58') == '10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42'\n\"\"\"\n"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58\") == \"\"\"10: 1 42\n23: 1 39\n39: 1 23\n42: 1 10\n58: 2 10 42\n\"\"\"\n\nassert solution(\"5 100\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"\"\"1: 0\n2: 0\n3: 1 4\n4: 1 3\n\"\"\"\n\"\"\"\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5 51\n10 23\n23 42\n39 42\n10"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('10') == '1 10'\nassert solution('100') == '1 100'\nassert solution('1 2') == '1 2'\n"
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58\\n') == '10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42'\n\"\"\""
    },
    {
        "number": 956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 51\\n10 23\\n23 42\\n39 42\\n10 39\\n39 58\") == \"10: 1 42\\n23: 1 39\\n39: 1 23\\n42: 1 10\\n58: 2 10 42\"\n\n\"\"\"\n\nimport collections\n\nfriends = []\nf = set()\nfor line in open(0) :\n    l = [int(i) for i in line.split()]\n    friends.append(l)\n    for f_friend in l[1:] :\n        f.add(f_friend)\n\nans = []\nfor"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\nassert solution(\"hiedi\") == \"NO\"\n\"\"\"\nimport unittest\nimport itertools\nfrom collections import Counter"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcheaibcdi') == 'YES'\nassert solution('hiedi') == 'NO'\n\n\n\n--------\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('aba') == 'YES'\nassert solution('aaba') == 'YES'\nassert solution('aabaabb') == 'YES'\nassert solution('aabaabbb') == 'YES'\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcdabceaabcea\") == \"YES\"\nassert solution(\"abcea\") == \"NO\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\nassert solution(\"hiedi\") == \"NO\"\n\n\n---\n1. Find longest subsequence of given string which is a subsequence of given string\n2. Remove chars of longest subsequence from given string\n3. Check if string consists of same chars as the first one\n4. If yes, then we have found the original string\n5. If no, then the original string is not the subsequence\n\"\"\"\n\nimport time\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\nassert solution(\"hiedi\") == \"NO\"\n\n\n\"\"\"\n\n\nimport re\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\nassert solution(\"hiedi\") == \"NO\"\n\"\"\""
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcheaibcdi') == 'YES'\nassert solution('hiedi') == 'NO'\n\"\"\""
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcheaibcdi\") == \"YES\"\nassert solution(\"hiedi\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\ns = input()\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"af\") == \"db\"\nassert solution(\"abcd\") == \"bacd\"\nassert solution(\"argh\") == \"rhg\"\nassert solution(\"hjnjnmjnz\") == \"gjnznjh\"\n\nprint(\"All test cases passed.\")\n\n----"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"af\", 2) == \"db\"\nassert solution(\"bear\", 26) == \"roar\"\nassert solution(\"hey\", 1000) == \"-\"\nassert solution(\"\", 7) == \"-\"\nassert solution(\"\", 1000) == \"-\"\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"af\", 2) == \"b\"\nassert solution(\"bf\", 2) == \"b\"\nassert solution(\"ce\", 2) == \"c\"\nassert solution(\"cf\", 2) == \"c\"\nassert solution(\"cg\", 2) == \"d\"\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bear\", 7) == 'roar'\nassert solution(\"af\", 2) == 'db'\nassert solution('hey', 1000) == '-1'\nassert solution('a a a a a', 4) == '-1'\nassert solution('a b a b', 6) == 'ab'\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"af\") == \"db\"\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\ns = sys.stdin.readline().strip()\n\nd = {chr(i + 97): i for i in range(26)}\nt = [i for i in range(n)]\nans = [None] * n\n\nfor i in range(n):\n    dist = 0\n    for j in range(i, n):\n        if d[s[j]] < d[s[i]]:\n            dist += d[s[j]] + 1\n        else:\n            dist += d[s[i]] - d[s[j]] + 1\n        if dist == k:\n            ans[i] = s[j]\n            break\n    if ans[i] is None:\n        ans[i] = '-'\n\nsys.stdout.write(\"\".join(ans))\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('af', 7) == 'db'\nassert solution('bea', 26) == 'roar'\nassert solution('bea', 26) == 'roar'\nassert solution('hey', 1000) == '-1'\nassert solution('dbea', 26) == '-1'\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bear\") == \"roar\"\nassert solution(\"af\") == \"db\"\nassert solution(\"hey\") == \"-1\"\n\n########################################################################################################################################\n\nGiven the length of a string s, find the longest palindromic substring of s.\n\nFor example, if the input is s = \"babad\", then the longest palindromic substring is \"bab\". Note that \"aba\" is also a valid answer.\n\nInput Format:\n\nThe first and only line of input contains a string s, denoting the input string.\n\nConstraints:\n\n1 <= len(s) <= 1000\n\nOutput Format:\n\nPrint the longest palindromic substring of s. If no palindromic substring exists, print \"-1\".\n\nSample TestCase 1\nInput\n\naba\nOutput\n\naba\nSample TestCase 2\nInput\n\nabcbaba\nOutput\n\nbb\n\nSample TestCase 3\nInput\n\nabababa\nOutput\n\naba\n\n########################################################################################################################################\n\nInput:\n\nA string s.\n\nOutput:\n\nThe longest palindromic substring of s. If no palindromic substring exists, print \"-1\".\n\nSample Input 1:\n\naaabbbbaa\nSample Output 1:\n\nbbbb\nSample Input 2:\n\naab\nSample Output 2:\n\naa\n\n########################################################################################################################################\n\nInput:\n\nA string s.\n\nOutput:\n\nThe longest palindromic substring of s. If no palindromic substring exists, print \"-1\".\n\nSample Input 1:\n\naaabbbbaa\nSample Output 1:\n\nbbbb\nSample Input 2:\n\naab\nSample Output 2:\n\naa\n\n########################################################################################################################################"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"af\") == \"db\"\nassert solution(\"bear\") == \"roar\"\n\"\"\""
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bear', 26) == 'roar'\nassert solution('af', 7) == 'db'\nassert solution('hey', 1000) == '-1'\n\"\"\""
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('af') == 'db'\nassert solution('hey') == '-1'\nassert solution('bee') == '-1'\nassert solution('1337') == '-1'\nassert solution('qwerty') == '-1'\n"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 100') == '2'\nassert solution('4 4 100500') == '1'"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 1000\\n011\") == \"2\"\nassert solution(\"4 4 100500\\n0110\\n1010\\n0101\\n1001\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 1000\\n011\\n') == '2'\nassert solution('4 4 100500\\n0110\\n1010\\n0101\\n1001\\n') == '1'\n"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == expected_result\n\n\n\"\"\"\nimport re\n\nn, m, mod = [int(i) for i in input().split()]\nmatrix = [[int(j) for j in input().split()] for i in range(m)]\nmatrix = [[1 if matrix[i][j] == 1 else 0 for j in range(n)] for i in range(m)]\ncount = 0\nfor i in range(m):\n    ones = len([x for x in matrix[i] if x == 1])\n    if ones == 2:\n        count += 1\nprint(count % mod)"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1000\\n011\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1000\\n011\\n\") == \"2\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 1000') == '2'\nassert solution('4 4 100500') == '1'\n\n'''\n"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1000\") == \"2\"\nassert solution(\"4 4 100500\") == \"1\"\nprint(\"Passed\")\n"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 1000\") == \"2\"\nassert solution(\"4 4 100500\") == \"1\"\n"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\") == \"1\"\nassert solution(\"4 4 100500\") == \"1\"\nassert solution(\"5 4 10000\") == \"1\"\nassert solution(\"2 3 8\") == \"0\"\nassert solution(\"4 2 1000\") == \"2\""
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 3\n''') == '11'\n\nassert solution('''1 2\n''') == '3'\n\nassert solution('''4 6\n''') == '10'"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"9\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"4 6\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\") == \"11\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"4 6\") == \"10\"\n\n\"\"\"\n\nimport sys\n\nn, k = [int(s) for s in sys.stdin.readline().split()]"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\") == \"11\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"4 6\") == \"10\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\") == \"11\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"4 6\") == \"10\"\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\") == \"10\"\nprint('OK')\n\nassert solution(\"1 2\") == \"3\"\nprint('OK')\n\nassert solution(\"6 3\") == \"11\"\nprint('OK')\n\nassert solution(\"10 3\") == \"8\"\nprint('OK')\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6\") == \"10\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"6 3\") == \"11\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3\\n11') == '11'\nprint(solution(input()))\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\") == \"10\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\") == \"10\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 4 2 5 2 3''') == 14\nassert solution('''9 5 1 3 1 5 2 4 2 5''') == 9\n\nprint(\"Successfully solved\")\n'''\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n4 2 5 2 3') == '14'\nassert solution('9\\n5 1 3 1 5 2 4 2 5') == '9'\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 3 1 5 2 4 2 5\") == 9\nassert solution(\"9 1 3 1 5 2 4 2 5\") == 9\n\n\"\"\"\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n4 4 2 5 2 3\\n\") == \"14\"\nassert solution(\"9\\n5 1 3 1 5 2 4 2 5\\n\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n4 4 2 5 2 3\") == \"14\"\nassert solution(\"9\\n5 1 3 1 5 2 4 2 5\") == \"9\"\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 2 5 2 3\") == \"14\"\nassert solution(\"9 5 1 3 1 5 2 4 2 5\") == \"9\"\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n4 4 2 5 2 3') == '14'\nassert solution('9\\n5 1 3 1 5 2 4 2 5') == '9'\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 2 5 2 3\") == \"14\"\nassert solution(\"9 5 1 3 1 5 2 4 2 5\") == \"9\"\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 2 5 2 3') == '14'\nassert solution('9 5 1 3 1 5 2 4 2 5') == '9'\n\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 2 5 2 3\") == 14\nassert solution(\"9 5 1 3 1 5 2 4 2 5\") == 9\n\n\"\"\""
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n2 4\\n4 1') == '3\\n1\\n2\\n4'\nassert solution('4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3') == '-1'\n\"\"\"\n"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3\") == \"3\\n1\\n2\\n4\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\") == '3\\n1\\n2\\n4'\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n4 1\") == '-1'\nassert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3\") == '4\\n1\\n2\\n4'\n\"\"\""
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n2 4\\n4 1') == '3\\n1\\n2\\n4'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\nhttps://codeforces.com/gym/101576/editorial\n'''\n\n\nn, m = map(int, input().split())\na = []\nfor _ in range(m):\n    a.append(list(map(int, input().split())))\n    \n"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2') == '1\\n2\\n2\\n'\n"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3\\n') == '3\\n1\\n2\\n4\\n'\n\n\"\"\"\nimport sys\n\nimport collections\n\nN, M = map(int, sys.stdin.readline().split())\ngraph = collections.defaultdict(list)\nfor _ in range(M):\n    a, b = map(int, sys.stdin.readline().split())\n    graph[a].append(b)\n\nflag = 0\nfor k in range(1, N + 1):\n    in_degree = 0\n    out_degree = 0\n    for vertex in graph:\n        if k in graph[vertex]:\n            in_degree += 1\n        for u in graph[vertex]:\n            if u == k:\n                out_degree += 1\n    if in_degree!= 1 or out_degree!= 1:\n        flag = 1\n        break\n"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3') == '3\\n1\\n2\\n4\\n'\n\"\"\"\n"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n1 2\\n2 3\\n2 4\\n4 1\\n4 3\\n') == '3\\n1\\n2\\n4\\n'\nassert solution('5 5\\n1 2\\n2 3\\n3 4\\n4 1\\n4 3\\n') == '-1'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n2 4\\n4 1\") == \"3\\n1\\n2\\n4\"\n\n\"\"\"\nimport sys\n\nimport collections\n\nfrom itertools import chain\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n1 1\") == \"1\"\nassert solution(\"2 2\\n1 1\\n1 2\") == \"2\"\nassert solution(\"3 1\\n1 1\\n1 2\") == \"3\"\nassert solution(\"3 2\\n1 1\\n1 2\") == \"3\"\nassert solution(\"4 1\\n1 1\\n1 2\\n1 3\") == \"6\"\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\") == \"4\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 1\\n3 4') == '4'\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 1\\n3 4') == '4'\n\"\"\"\nfrom math import factorial as f\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 1\\n3 4') == '4'\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/59ab0c5a5ddeb02c40c00007a\n\nIn a company, the number of employees is normally distributed. You have to write a program to find the probability that at least one of the N employees has a salary more than S.\nThe company has N employees, the mean of the number of employees is denoted by \u03bc and the standard deviation by \u03c3.\nAll the N employees have salaries greater than or equal to S.\n\nFormula:\nProbability = \\frac{1}{\\sqrt{2\u03c0\u03c3^2}} e^\\frac{-(x-\\mu)^2}{2\u03c3^2}\n\"\"\"\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\") == \"4\"\n\"\"\"\nfrom typing import List, Set\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\") == \"4\"\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\") == \"4\"\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 1\\n3 4\") == \"4\"\nassert solution(\"4 2\\n1 1\\n1 2\") == \"2\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\n\nassert solution(\"4 4 2 6 4 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\nassert solution(\"1 1 1 1 1 1\") == \"-1\"\nassert solution(\"1 2 1 3 2 1\") == \"1\"\n"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\n"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 3 2 3\") == \"1\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\nassert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"10 1 2 10 10 2\") == \"10\"\nassert solution(\"1 1 1 1 1 1\") == \"-1\"\n"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\n\"\"\"\nimport sys"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 2 5 5 2') == '5'\nassert solution('4 4 2 6 4 2') == '6'\n\"\"\"\n"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\nassert solution(\"1 1 2 1 1 2\") == \"-1\"\nassert solution(\"1 1 2 1 3 2\") == \"1\"\nassert solution(\"1 1 1 1 1 1\") == \"1\"\n\"\"\"\n\n\nfrom collections import Counter, deque\n"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 5 5 2\") == \"5\"\nassert solution(\"4 4 2 6 4 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3AF\") == \"3\"\nassert solution(\"FFI\") == \"1\"\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AFFAAA') == '4'\nassert solution('AFI') == '1'\nassert solution('AFFF') == '0'\nassert solution('FFA') == '0'\nassert solution('FF') == '0'\n\"\"\"\nimport itertools\nimport math\nimport re\n\nINPUT_REGEX = r'\\d+A|\\d+I|\\d+F'\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AFI') == '1'\n\"\"\"\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3AFI\") == 1\nassert solution(\"6AFFI\") == 4\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AFFAAA') == '4'\nassert solution('AFI') == '1'\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AFFAAA\") == 4\nassert solution(\"AFI\") == 1\nassert solution(\"AFF\") == 0\nassert solution(\"FF\") == 0\nassert solution(\"A\") == 0\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\nAFF\nFIF\nFFF\nFFF\nFIF\nFFF\nAFF\nIF\nFFF\nFFF\nFFF\nFIF\nFFF\nFIF\nAFF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFFF\nFFF\nFIF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF\nFFF\nFIF\nFIF"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AFFAAA') == '4'\nassert solution('AFI') == '1'\nassert solution('AFFF') == '0'\nassert solution('AFFF') == '0'\nassert solution('AFFF') == '0'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\nAFFAAA\") == \"4\"\nassert solution(\"3\\nAFI\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AFFAAA\") == 4\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1987\") == \"2013\"\nassert solution(\"2013\") == \"2014\""
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1987\") == \"2013\"\nassert solution(\"2013\") == 2014\nassert solution(\"2018\") == 2020\nassert solution(\"2020\") == 2030\nassert solution(\"2100\") == 2110\n"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1987') == '2013'\nassert solution('2013') == '2014'\nassert solution('1000') == '1001'\nassert solution('999') == '1000'\n\n\"\"\"\n"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1987\") == \"2013\"\nassert solution(\"2013\") == \"2014\"\nassert solution(\"2009\") == \"2012\"\nassert solution(\"2018\") == \"2027\"\nassert solution(\"2015\") == \"2022\"\n\n\"\"\""
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1987') == '2013'\nassert solution('2013') == '2014'\nassert solution('2030') == '2031'\nassert solution('2031') == '2032'\nassert solution('2032') == '2033'\n"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1987\") == \"2013\"\nassert solution(\"2013\") == \"2014\"\n\"\"\"\n"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1987\") == \"2013\"\nassert solution(\"2013\") == \"2014\"\n"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1987) == 2013\nassert solution(2013) == 2014\n\"\"\"\n"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1987') == '2013'\nassert solution('2013') == '2014'\n"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1987\") == \"2013\"\nassert solution(\"2013\") == \"2014\"\n\n\"\"\"\n\n\nimport unittest"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '5\\n5 2 1 3 4'\n) == '2'\nassert solution(\n    '4\\n4 3 2 1'\n) == '3'\nassert solution(\n    '3\\n1 2 3'\n) == '0'\n"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1 3 4\") == \"2\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution(\"4 3 2 1\") == \"3\"\n"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 2 1\\n1 2 3') == '3'\nassert solution('1 2 3\\n4 5 6') == '0'\nassert solution('5 2 1 3 4\\n5 2 1 3 4') == '2'\nassert solution('5 2 1 3 4\\n5 2 1 3 4') == '2'\n\"\"\"\n\nimport sys\nimport itertools\n\nassert len(sys.argv) == 2\ninputs = [line.strip() for line in open(sys.argv[1], 'r').readlines()]\n\nn = int(inputs[0])\nnums = [int(num) for num in inputs[1].split(\" \")]"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1 3\") == 3\nassert solution(\"5 2 1 3 4\") == 2\n\"\"\""
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1 3 4\") == \"2\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution(\"4 3 2 1\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1 3 4\") == 2\n\nassert solution(\"3 1 2\") == 0\n\nassert solution(\"4 3 2 1\") == 3\n\n\n\n\n\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1 3 4\") == 2\nassert solution(\"3 1 2\") == 0\nassert solution(\"4 3 2 1\") == 3\n"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n5 2 1 3 4''') == '2'\nassert solution('''3\n1 2 3''') == '0'\nassert solution('''4\n4 3 2 1''') == '3'\n\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1 3 4\") == \"2\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution(\"4 3 2 1\") == \"3\"\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    \"\"\"O(n^2) / O(1)\"\"\"\n\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.split('\\n')[0])\n        a = list(map(int, stdin.split('\\n')[1].split()))\n        old = a[0]\n        ans = 0\n        for i in range(1, n):\n            if a[i] < old:\n                ans += 1\n                old = a[i]\n        return str(ans)\n\n\nassert Solution().solution(\n    \"5 2 1 3 4\"\n) == '2'\nassert Solution().solution(\n    \"3 1 2\"\n) == '0'\n"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n5 2 1 3 4') == '2'\nassert solution('3\\n1 2 3') == '0'\nassert solution('4\\n4 3 2 1') == '3'\n\"\"\""
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\") == \"NO\"\nassert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\") == \"NO\"\nassert solution(\"10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n1 2 3 4 5 6 7 8 9 10\") == \"NO\"\n\n\"\"\"\n\n\nfrom collections import defaultdict\nimport math\n\nstdin = '2\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen'\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\") == 'NO'\nassert solution(\"10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10\") == 'YES'\nassert solution(\"2\\ngalileo galilei\\nnicolaus copernicus\\n2 1\") == 'YES'\nprint('test passed')\n\n\"\"\""
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\") == \"NO\"\nassert solution(\"3\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n1 2 3\") == \"YES\"\nassert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\") == \"NO\"\nassert solution(\"10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10\") == \"YES\"\n\n\"\"\"\n\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\\n\") == 'NO'\nassert solution(\"2\\ngalileo galilei\\nnicolaus copernicus\\n2 1\\n\") == 'YES'\nassert solution(\"10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\nmachias regnitz\\nsara valestin\\nema millstein\\ngaius worzel\\n1 2 3 4 5 6 7 8 9 10\\n\") == 'NO'\nassert solution(\"10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\nmachias regnitz\\nsara valestin\\nema millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10\\n\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"gennady korotkevich\\n\"\n                \"petr mitrichev\\n\"\n                \"gaoyuan chen\\n\"\n                \"1 2 3\\n\") == \"NO\"\nassert solution(\"gennady korotkevich\\n\"\n                \"petr mitrichev\\n\"\n                \"gaoyuan chen\\n\"\n                \"3 1 2\\n\") == \"YES\"\nassert solution(\"rean schwarzer\\n\"\n                \"fei claussell\\n\"\n                \"alisa reinford\\n\"\n                \"eliot craig\\n\"\n                \"laura arseid\\n\"\n                \"jusis albarea\\n\"\n                \"machias regnitz\\n\"\n                \"sara valestin\\n\"\n                \"emma millstein\\n\"\n                \"gaius worzel\\n\"\n                \"2 4 9 6 5 7 1 3 8 10\\n\") == \"YES\"\nassert solution(\"rean schwarzer\\n\"\n                \"fei claussell\\n\"\n                \"alisa reinford\\n\"\n                \"eliot craig\\n\"\n                \"laura arseid\\n\"\n                \"jusis albarea\\n\"\n                \"machias regnitz\\n\"\n                \"sara valestin\\n\"\n                \"emma millstein\\n\"\n                \"gaius worzel\\n\"\n                \"1 2 3 4 5 6 7 8 9 10\\n\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\ngennady korotkevich\npetr mitrichev\ngaoyuan chen\n1 2 3\n\"\"\") == \"NO\"\nassert solution(\"\"\"3\ngennady korotkevich\npetr mitrichev\ngaoyuan chen\n3 1 2\n\"\"\") == \"YES\"\nassert solution(\"\"\"2\ngalileo galilei\nnicolaus copernicus\n2 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"10\nrean schwarzer\nfei claussell\nalisa reinford\neliot craig\nlaura arseid\njusis albarea\nmachias regnitz\nsara valestin\nemma millstein\ngaius worzel\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"NO\"\nassert solution(\"\"\"10\nrean schwarzer\nfei claussell\nalisa reinford\neliot craig\nlaura arseid\njusis albarea\nmachias regnitz\nsara valestin\nemma millstein\ngaius worzel\n2 4 9 6 5 7 1 3 8 10\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"gennady korotkevich\") == \"NO\"\nassert solution(\"petr mitrichev\") == \"YES\"\nassert solution(\"gaoyuan chen\") == \"YES\"\nassert solution(\"rean schwarzer\") == \"YES\"\nassert solution(\"fei claussell\") == \"YES\"\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n1 2 3\") == \"NO\"\nassert solution(\"3\\ngennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n3 1 2\") == \"YES\"\nassert solution(\"2\\ngalileo galilei\\nnicolaus copernicus\\n2 1\") == \"YES\"\nassert solution(\"10\\nrean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n1 2 3 4 5 6 7 8 9 10\") == \"NO\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"gennady korotkevich\\npetr mitrichev\\ngaoyuan chen\\n3 1 2\") == \"YES\"\nassert solution(\"rean schwarzer\\nfei claussell\\nalisa reinford\\neliot craig\\nlaura arseid\\njusis albarea\\nmachias regnitz\\nsara valestin\\nemma millstein\\ngaius worzel\\n2 4 9 6 5 7 1 3 8 10\") == \"YES\"\n\n\"\"\"\nfrom collections import defaultdict\nfrom typing import Tuple, Dict, List\n\n\nclass Handle:\n    def __init__(self, name: str):\n        self.name = name\n\n\nclass Person:\n    def __init__(self, first_name: str, last_name: str, handle: Handle):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.handle = handle\n\n    def __repr__(self):\n        return self.first_name + \" \" + self.last_name\n"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\ngennady korotkevich\npetr mitrichev\ngaoyuan chen\n1 2 3''') == 'NO'\nassert solution('''3\ngennady korotkevich\npetr mitrichev\ngaoyuan chen\n3 1 2''') == 'YES'\n\nassert solution('''2\ngalileo galilei\nnicolaus copernicus\n2 1''') == 'YES'\nassert solution('''10\nrean schwarzer\nfei claussell\nalisa reinford\neliot craig\nlaura arseid\njusis albarea\nmachias regnitz\nsara valestin\nemma millstein\ngaius worzel\n2 4 9 6 5 7 1 3 8 10''') == 'YES'\nassert solution('''10\nrean schwarzer\nfei claussell\nalisa reinford\neliot craig\nlaura arseid\njusis albarea\nmachias regnitz\nsara valestin\nemma millstein\ngaius worzel\n2 4 9 6 5 7 1 3 8 10''') == 'NO'\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ami\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ami\") == -1\nassert solution(\"no\") == -1\n\"\"\""
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"cba\") == \"cba\"\nassert solution(\"ami\") == -1\nassert solution(\"no\") == -1\nassert solution(\"yryr\") == \"yryr\"\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abc') == 'cba'\nassert solution('ayr') == 'yr'\nassert solution('ami') == '-1'\nassert solution('no') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cba\") == \"cba\"\nassert solution(\"abc\") == \"cba\"\nassert solution(\"ayrat\") == \"ayrat\"\nassert solution(\"a\") == \"a\"\nassert solution(\"no\") == \"no\"\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == \"cba\"\nassert solution(\"cba\") == \"cba\"\nassert solution(\"cbaabc\") == \"cba\" + \"abc\"\nassert solution(\"ayrat\") == \"a\" + \"yr\" + \"at\"\n\"\"\"\nimport sys\nimport re"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ami\") == \"3\"\nassert solution(\"no\") == \"-1\"\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ami') == '-1'\nassert solution('no') == '-1'\nassert solution('abrytaaa') == '3 1 1 6 5 8 7'\n\"\"\"\n\nimport sys\n\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\n\nprint(len(t) - len(s) + 1)\nfor i in range(len(t) - len(s) + 1):\n    print(len(t) - i, i)\n"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cba') == '2 1'\nassert solution('ayrat') == '3 1 1'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cbaabc\") == \"cba\"\nassert solution(\"ayrat\") == \"yrat\"\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 2 6') == '2'\nassert solution('10\\n1 2 3 4 5') == '10'\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 1') == '1'\nassert solution('1 2 3 4 5') == '10'\nassert solution('5 2 1') == '1'\nassert solution('1 2 6') == '2'\n\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"10\"\n\"\"\""
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6 1 2\") == \"5\"\nassert solution(\"4 6 1 3\") == \"3\"\nassert solution(\"4 6 1 4\") == \"3\"\nassert solution(\"4 6 1 5\") == \"4\"\nassert solution(\"4 6 1 6\") == \"3\"\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 6\") == \"2\"\nassert solution(\"10 1 2 3 4 5\") == \"10\"\nassert solution(\"10 1 2 3 4 5 6 7 8 9 10\") == \"4\"\n\"\"\""
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2 6\") == \"2\"\nassert solution(\"10\\n1 2 3 4 5\") == \"10\""
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n4\\n2') == '5'\nassert solution('4\\n3\\n1') == '5'\nassert solution('2\\n2\\n1') == '1'\nassert solution('5\\n2\\n6\\n7\\n1\\n8') == '3'\nassert solution('5\\n3\\n4\\n1\\n8') == '5'\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6') == '2'\nassert solution('10') == '10'\n\nprint(solution(stdin.strip()))\n\n\n-----Big O Notation-----\nTime complexity: O(n * log(n))\nSpace complexity: O(n)\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('4\\n1 2 3 4') == '4'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '8'\n"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n4 3 2 1 6') == '2'\nassert solution('10\\n1 2 3 4 5') == '10'\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 7 10\\n5 6') == '1'\nassert solution('1 5 10\\n7') == '0'\nassert solution('3 10 10\\n5 7 7') == '1'\nassert solution('1 1 1\\n1') == '0'\n\n\"\"\"\n\nn, b, d = map(int, stdin.readline().strip().split())\nsizes = list(map(int, stdin.readline().strip().split()))\njuice = 0\nfor size in sizes:\n    if size > b:\n        juice = 0\n    juice += size\n    if juice > d:\n        juice = 0\nprint(juice)\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 7 10') == 1\nassert solution('1 5 10') == 0\nassert solution('3 10 10') == 1\nassert solution('1 1 1') == 0\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 7 10\\n5 6\") == \"1\"\nassert solution(\"1 5 10\\n7\") == \"0\"\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 7 10\\n5 6\") == 1\n\"\"\"\n\nn, b, d = map(int, stdin.readline().split())\nsizes = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 7 10\") == '1'\nassert solution(\"1 5 10\") == '0'\nassert solution(\"3 10 10\") == '1'\nassert solution(\"1 1 1\") == '0'"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 7 10\") == \"1\"\nassert solution(\"1 5 10\") == \"0\"\nassert solution(\"3 10 10\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 10\") == \"1\"\nassert solution(\"1 5 10\") == \"0\"\nassert solution(\"3 10 10\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 7 10\\n5 6\") == \"1\"\nassert solution(\"1 5 10\\n7\") == \"0\"\nassert solution(\"3 10 10\\n5 7 7\") == \"1\"\nassert solution(\"1 1 1\\n1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 7 10\\n5 6\") == \"1\"\nassert solution(\"1 5 10\\n7\") == \"0\"\nassert solution(\"3 10 10\\n5 7 7\") == \"1\"\nassert solution(\"1 1 1\\n1\") == \"0\"\nassert solution(\"1 10 10\\n7\") == \"0\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 7 10\\n5 6\") == '1'\nassert solution(\"1 5 10\\n7\") == '0'\nassert solution(\"3 10 10\\n5 7 7\") == '1'\nassert solution(\"1 1 1\\n1\") == '0'\nprint(\"All cases passed\")"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\nWWBW\\nBWWW\\nWWWB') == 'NO'\n"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\nassert solution(\"3 1\\nB\") == \"YES\""
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\n\"\"\""
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 4\nWWBW\nBWWW\nWWWB''') == 'NO'\n\nassert solution('''3 1\nB\nB\nW''') == 'YES'\n\nassert solution('''3 1\nB\nB\nW\n''') == 'YES'\nassert solution('''3 1\nW\nB\nB\n''') == 'NO'\n\nassert solution('''3 2\nBB\nBW\nBW\n''') == 'NO'"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\nW\\nB\\nW\") == 'NO'\nassert solution(\"3 4\\nBWWB\\nBWWW\\nBWWB\") == 'YES'"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\n"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\n"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\nassert solution(\"3 1\\nB\") == \"YES\"\n\"\"\"\n\nn, m = list(map(int, stdin.readline().split()))\ngrid = []\nfor _ in range(n):\n    grid.append(list(map(str, stdin.readline()[:-1])))"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == 'NO'\nassert solution(\"3 1\\nB\") == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\nWWBW\\nBWWW\\nWWWB\") == \"NO\"\n\nassert solution(\"3 1\\nB\") == \"YES\"\nassert solution(\"2 2\\nBB\") == \"NO\"\nassert solution(\"2 1\\nBB\") == \"NO\"\nassert solution(\"2 1\\nBW\") == \"YES\"\n"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('.S..') == 'No'\nassert solution('...S.') == 'No'\nassert solution('S...') == 'Yes'\nassert solution('.S.S.') == 'No'\nassert solution('S....') == 'Yes'\n"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 6\\n..S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......') == 'Yes\\n..SD..\\n..SDW.\\n.SD...\\n.DW...\\nDD.W..\\n......'\nassert solution('5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...') == 'Yes\\n.S...\\n...S.\\nS.D..\\n...S.\\n.S...'\nassert solution('1 2\\nSW') == 'No'\nassert solution('5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...') == 'Yes\\n.S...\\n...S.\\nS.D..\\n...S.\\n.S...'\n\nassert solution('5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...') == 'Yes\\n.S...\\n...S.\\nS.D..\\n...S.\\n.S...'\n"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 6\\n..S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......\") == 'Yes\\n..SD..\\n..SDW.\\n.SD...\\n.DW...\\nDD.W..\\n......'\nassert solution(\"1 2\\nSW\") == 'No'\nassert solution(\"5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...\\n\") == 'Yes\\n.S...\\n...S.\\nS.D..\\n...S.\\n.S...'\n\"\"\"\n\n\n\nimport numpy as np"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 6\\n..S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......\") == \"Yes\\n..SD..\\n..SDW.\\n.SD...\\n.DW...\\nDD.W..\\n......\"\nassert solution(\"1 2\\nSW\") == \"No\"\nassert solution(\"5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...\\n\") == \"Yes\\n.S...\\n...S.\\nS.D..\\n...S.\\n.S...\\n\"\n\n\n\"\"\"\n\n\nfrom typing import List\nimport collections\nimport functools\n\n\n@functools.total_ordering\nclass Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n    \n    def __str__(self) -> str:\n        return f\"({self.x}, {self.y})\"\n    \n    def __repr__(self) -> str:\n        return str(self)\n    \n    def __eq__(self, other) -> bool:\n        return self.x == other.x and self.y == other.y\n    \n    def __lt__(self, other) -> bool:\n        return (self.y < other.y) if self.x == other.x else (self.x < other.x)\n"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 6\\n..S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......\") == \"Yes\\n..SD..\\n..SDW.\\n.SD...\\n.DW...\\nDD.W..\\n......\"\nassert solution(\"1 2\\nSW\") == \"No\"\nassert solution(\"5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...\") == \"Yes\\n.S...\\n...S.\\nS.D..\\n...S.\\n.S...\"\n\n\"\"\"\n\nimport unittest\nimport sys\nimport collections\nfrom collections import deque\nfrom typing import Deque\n"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n..S\\nS..\\n...\") == \"Yes\\n..S\\nS.S\\n...\"\nassert solution(\"2 2\\n..\\nS\") == \"No\\n\"\nassert solution(\"1 1\\nS\") == \"Yes\\nS\\n\"\nassert solution(\"3 3\\nS.\\n...\") == \"Yes\\nS.S\\n...\"\nassert solution(\"3 3\\n.S\\nS.\\n...\") == \"Yes\\nS.S\\n...\"\n"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n...S\\n.W..\\nS.W.\") == \"No\"\nassert solution(\"5 6\\n.S.S.S.\\n.S.S.S.\\n.S.S.S.\\n.S.S.S.\\n.S.S.S.\") == \"Yes\\n..S.S\\n.S..S\\n..S.S\\n.S.S.S\\n..S.S\"\nassert solution(\"4 4\\n..S\\n..S\\nS..\\nS..\") == \"Yes\\nS.S\\n.S.S\\nS.S\"\nassert solution(\"5 6\\n.S.S.S.\\n.S.S.S.\\n.S.S.S.\\n.S.S.S.\\n.S.S.S.\") == \"Yes\\n..S.S.S.\\n..S.S.S.\\n..S.S.S.\\n.S.S.S.S\\n..S.S.S.\"\nassert solution(\"1 2\\nS.\") == \"No\"\n"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 6\\n..S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......\") == \"Yes\\n..SD..\\n..SDW.\\n.SD...\\n.DW...\\nDD.W..\\n......\"\nassert solution(\"1 2\\nSW\") == \"No\"\nassert solution(\"5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...\\n\") == \"Yes\\n.S...\\n...S.\\nS.D..\\n...S.\\n.S...\\n\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 6\\n..S...\\n..S.W.\\n.S....\\n..W...\\n...W..\\n......\") == \"Yes\\n..SD..\\n..SDW.\\n.SD...\\n.DW...\\nDD.W..\\n......\"\nassert solution(\"1 2\\nSW\") == \"No\"\nassert solution(\"5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...\\n\") == \"Yes\\n.S...\\n...S.\\nS.D..\\n...S.\\n.S...\\n\""
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n.S.\\n..W\\n.W.\") == 'Yes'\nassert solution(\"1 2\\nSW\\n\") == 'No'\nassert solution(\"5 5\\n.S...\\n...S.\\nS....\\n...S.\\n.S...\\n\") == 'Yes'\n\"\"\""
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\n\") == \"1\"\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n\") == \"2\"\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\nadd 1\nremove\nadd 2\nadd 3\nremove\nremove''') == '1'\n\nassert solution('''7\nadd 3\nadd 2\nadd 1\nremove\nadd 4\nremove\nremove\nremove\nadd 6\nadd 7\nadd 5\nremove\nremove\nremove\n''') == '2'"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\") == \"1\"\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\") == \"2\"\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nadd 1\\nadd 3\\nremove\\nadd 2\\nremove') == '1'\nassert solution('7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove') == '2'\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nadd 1\\nadd 2\\nadd 3\\nremove\\nadd 4\\nremove\\nadd 5\\nremove\\nadd 6\\nadd 7\\nadd 8\\nremove\\nremove\\nremove\\nremove\\nadd 10\\nadd 1\\nadd 2\\nremove\\nremove\\nremove\\nremove\\nadd 12\\nremove\\nremove\\nremove\\nadd 13\\nadd 14\\nadd 15\\nadd 16\\nremove\\nremove\\nadd 17\\nremove\\nremove\\nremove\\nremove\\nadd 18\\nremove\\nremove\\nadd 19\\nadd 20\\nadd 21\\nadd 22\\nadd 23\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 24\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 25\\nadd 26\\nadd 27\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 28\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 29\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 30\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 31\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 32\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 33\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 34\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 35\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 36\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 37\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 38\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 39\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 40\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 41\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 42\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 43\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 44\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 45\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 46\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 47\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 48\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 49\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 50\n\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nadd 5\\nremove\\nadd 6\\nadd 7\\nadd 8\\nremove\\nremove\\nremove\\nremove\\nadd 10\\nadd 1\\nadd 2\\nremove\\nremove\\nremove\\nremove\\nadd 12\\nremove\\nremove\\nadd 13\\nadd 14\\nadd 15\\nadd 16\\nremove\\nremove\\nremove\\nremove\\nadd 18\\nremove\\nremove\\nadd 19\\nadd 20\\nadd 21\\nadd 22\\nadd 23\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 24\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 25\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 26\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 27\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 28\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 29\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 30\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 31\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nadd 32\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\nremove\\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\") == '1'\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\") == '2'"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\n') == '1'\nassert solution('7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n') == '2'\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\") == \"1\"\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\") == \"2\"\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nadd 1\\nremove\\nadd 2\\nadd 3\\nremove\\nremove\\n\") == '1'\nassert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n\") == '2'\nprint('test passed')\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nadd 3\\nadd 2\\nadd 1\\nremove\\nadd 4\\nremove\\nremove\\nadd 6\\nadd 7\\nadd 5\\nremove\\nremove\\nremove\\n\") == \"2\""
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n123\\n321') == '0\\n2'\n\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n123\\n321\") == '0\\n2'\nassert solution(\"2\\n88\\n00\") == '2\\n0'\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n123\\n321\") == \"0\\n2\"\nassert solution(\"2\\n88\\n00\") == \"2\\n0\"\n\"\"\"\n\nn = int(input())\ncard_sher = list(map(int, input()))\ncard_mor = list(map(int, input()))\n\nsher_list = card_sher.copy()\nmor_list = card_mor.copy()\n\nflicks = 0\n\nwhile len(sher_list)!= 0:\n    next_sher = sher_list.pop(0)\n    next_mor = mor_list.pop(0)\n    if next_sher == next_mor:\n        flicks += 1\n    elif next_sher < next_mor:\n        sher_list.append(next_sher)\n    else:\n        mor_list.append(next_mor)\n\nprint(flicks)\nprint(max(len(card_sher), len(card_mor)))\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n123\\n321') == '0\\n2'\nassert solution('2\\n88\\n00') == '2\\n0'\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n123\\n321\") == \"0\\n2\"\n\"\"\""
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123\\n321') == '0\\n2'\nassert solution('88\\n00') == '2\\n0'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n123\\n321') == '2 0'\nassert solution('2\\n88\\n00') == '2 0'\n\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n123\\n321\") == \"0 2\"\nassert solution(\"2\\n88\\n00\") == \"2 0\"\n\"\"\""
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n123\\n321\") == \"0\\n2\"\nassert solution(\"2\\n88\\n00\") == \"2\\n0\"\nassert solution(\"1\\n1\") == \"0\\n0\"\nassert solution(\"2\\n0\") == \"1\\n0\"\n\n\"\"\""
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n123\\n321\") == \"0\\n2\"\n\nassert solution(\"2\\n88\\n00\") == \"2\\n0\"\n\n\"\"\"\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 100000\") == \"100000\"\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1') == '6'\nassert solution('2 3') == '6'\nassert solution('1 1') == '100000'\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n5 6\\n10 12') == '6'\nassert solution('1 1\\n1 100000') == '100000'\n\"\"\"\nimport sys\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n5 6\\n10 12') == 6\n\"\"\"\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == '6'\nassert solution('1 1') == '100000'\nassert solution('1 100000') == '100000'\n\n\"\"\"\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n5 6\\n10 12\") == \"6\"\nassert solution(\"1 1\\n1 100000\") == \"100000\"\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 10\") == \"10\"\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\"\nfrom __future__ import annotations\nfrom collections import deque\nfrom typing import Deque, List\n\nfrom math import inf"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n5 6\\n10 12') == '6'\nassert solution('1 1\\n1 100000') == '100000'\nassert solution('4 6\\n7 10\\n12 18\\n17 25\\n30 30') == '27'\nassert solution('1 1\\n1 100000') == '100000'\nassert solution('1 1\\n1 100100') == '100100'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n5 6\\n10 12\") == '6'\nassert solution(\"1 1\\n1 100000\") == '100000'\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n3 4 5\") == \"1\\n3\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\\n\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\\n\"\n\n\n\n'''\n\n\n\n\n\n\n\nimport sys\nimport math"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n9 1 1 1\\n\") == \"0\"\nassert solution(\"4 3\\n2 3 5 6\\n\") == \"2\"\nassert solution(\"4 3\\n1 1 1 1\\n\") == \"6\"\nassert solution(\"4 3\\n9 1 1 1\\n\") == \"0\"\nassert solution(\"4 3\\n9 1 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n9 1 1 1\") == '0'\nassert solution(\"4 3\\n2 3 5 6\") == '2'\nassert solution(\"4 3\\n9 1 1 1\") == '0'\nassert solution(\"3 3\\n9 1 1 1\") == '0'\nassert solution(\"3 3\\n2 3 5 6\") == '2'\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n3 4 5') == '1\\n3\\n'\nassert solution('4 3\\n9 1 1 1') == '0\\n'\nassert solution('4 3\\n9 1 1 1') == '0\\n'\nassert solution('5 4\\n9 1 1 1') == '2\\n3 4'\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n3 4 5\") == '1\\n3'\nassert solution(\"4 3\\n9 1 1 1\") == '0'\nassert solution(\"4 3\\n9 1 1 1\") == '0'\nassert solution(\"4 3\\n9 1 1 1\") == '0'\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n9 1 1 1\") == \"0\"\nassert solution(\"2 3 5 6\") == \"2\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\"\n\n\n-----Explanation-----\n\nIn the first test, the number of good permutations are $0$, $0$, $0$, $0$, $0$, $0$.\n\nIn the second test, the number of good permutations are $1$, $3$, $4$, $6$.\n\nIn the third test, all good permutations are $0$ because all integers $x$ have value $f(x) \\div p = 0$.\n\"\"\"\n\n\nfrom math import sqrt\nfrom collections import Counter\nfrom typing import Tuple, Dict, Set, List, Optional, Iterable\n\nfrom icontract import require, ensure, DBC\n\n\nclass Difficulty(DBC):\n    \"\"\"Represent the difficulty level of a problem.\"\"\"\n\n    # fmt: off\n    @require(lambda n: 1 <= n <= 2000)\n    @require(lambda a: all(1 <= a_i <= 2000 for a_i in a))\n    @require(lambda p: 2 <= p <= n)\n    @require(lambda p: p <= n)\n    def __init__(self, n: int, a: Tuple[int,...], p: int) -> None:\n        \"\"\"Initialize with the difficulty level.\"\"\"\n        self.n = n\n        self.a = a\n        self.p = p\n    # fmt: on\n\n    def __eq__(self, other: \"Difficulty\") -> bool:\n        return self.n == other.n and self.a == other.a and self.p == other.p\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4 3\n9 1 1 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 3\n2 3 5 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 3\n9 1 1 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 3\n9 1 1 1\n\"\"\") == \"0\"\n\n-----Problem-----\nAoi is a girl who collecting candies. Originally, she has $x$ candies. There are also $n$ enemies numbered with integers from $1$ to $n$. Enemy $i$ has $a_i$ candies.\n\nAoi is going to determine a permutation $P$. A permutation is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $\\{2,3,1,5,4\\}$ is a permutation, but $\\{1,2,2\\}$ is not a permutation ($2$ appears twice in the array) and $\\{1,3,4\\}$ is also not a permutation (because $n=3$ but there is the number $4$ in the array).\n\nAfter that, Aoi will do $n$ duels with the enemies with the following rules:\nIf Yuzu has equal or more number of candies than enemy $P_i$, she wins the duel and gets $1$ candy. Otherwise, she loses the duel and gets nothing.\n\nYuzu wants to win all duels. How many valid permutations $P$ exist?\n\nThis problem was made by Akari, and it's the same as the problem in the first section of the challenge.\n\nLet's define $f(x)$ as the number of valid permutations for the integer $x$.\n\nYou are given $n$, $a$ and a prime number $p \\le n$. Let's call a positive integer $x$ good, if the value $f(x)$ is not divisible by $p$. Find all good integers $x$.\n\nYour task is to solve this problem made by Akari.\n\n-----Input-----\n\nThe first line contains two integers $n$, $p$ $(2 \\le p \\le n \\le 2000)$. It is guaranteed, that the number $p$ is prime (it has exactly two divisors $1$ and $p$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ $(1 \\le a_i \\le 2000)$.\n\n\n-----Output-----\n\nIn the first line, print the number of good integers $x$.\n\nIn the second line, output all good integers $x$ in the ascending order.\n\nIt is guaranteed that the number of good integers $x$ does not exceed $10^5$.\n\n\n-----Examples-----\nInput\n3 2\n3 4 5\n\nOutput\n1\n3\n\nInput\n4 3\n9 1 1 1\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first test, $p=2$.  If $x \\le 2$, there are no valid permutations for Yuzu. So $f(x)=0$ for all $x \\le 2$. The number $0$ is divisible by $2$, so all integers $x \\leq 2$ are not good.  If $x = 3$, $\\{1,2,3\\}$ is the only valid permutation for Yuzu. So $f(3)=1$, so the number $3$ is good.  If $x = 4$, $\\{1,2,3\\}, \\{1,3,2\\}, \\{2,1,3\\}, \\{2,3,1\\}$ are all valid permutations for Yuzu. So $f(4)=4$, so the number $4$ is not good.  If $x \\ge 5$, all $6$ permutations are valid for Yuzu. So $f(x)=6$ for all $x \\ge 5$, so all integers $x \\ge 5$ are not good. \n\nSo, the only good number is $3$.\n\nIn the third test, for all positive integers $x$ the value $f(x)$ is divisible by $p = 3$.\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n9 1 1 1\") == \"0\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\"\n\"\"\"\n\nimport math\nimport numpy as np\nimport time"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n3 4 5') == '1\\n3'\nassert solution('4 3\\n9 1 1 1') == '0'\nassert solution('4 3\\n1 1 1 1') == '0'\n\n---Problem_description---\nAt the entrance of the office, the boss introduces you to the new system of currency.\n\nThe system is based on the binary system. The maximum value for the money is $10^5$, and on each transaction a bill will be issued with the value of $10^5$. On the other hand, the employee has to pay the boss's salary with $100$ bills, so the maximum possible value of the money he can carry is $100$.\n\nThe boss wants to know how many bills he should give to the employee to get the required amount of money.\n\nInput\nThe first line contains two integers $N$, $P$ (1 \\le N, P \\le 10^5), separated by a space. They represent the maximum possible amount of money that the employee can carry and the required amount of money for the boss, respectively.\n\nThe second line contains $N$ integers $A_1, A_2, \\ldots, A_N$, each of them being the value of the bill.\n\nThe numbers should be in the ascending order.\n\nOutput\nIn the first line print the required number of bills that the boss should give to the employee. In the second line, print the bills in the ascending order.\n\nIt is guaranteed that the number of bills in the first line is at least as big as the number of bills in the second line.\n\nExamples\nInput\n10 100\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n5\n1 2 3 5 6\n\nInput\n6 100\n100 100 100 100 100 100\n\nOutput\n6\n1 100\n\nInput\n11 100\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n8\n1 2 3 4 5 6 7 8\n\nSolution\nimport math\nimport sys\nfrom bisect import bisect_left"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n\"\"\"\n\nimport math\n\nn, p = map(int, input().split())"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n.135\\n1247\\n3468\\n5789\") == \"YES\"\nassert solution(\"1\\n....\\n12.1\\n.2..\\n.2..\") == \"YES\"\nassert solution(\"1\\n....\\n12.1\\n.2..\\n.2..\") == \"NO\"\nassert solution(\"5\\n.135\\n1247\\n3468\\n5789\") == \"YES\"\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('.12345678912') == 'YES'\nassert solution('.123456789') == 'NO'\nassert solution('.1.2.3.4.5.6.7.8.9.123') == 'YES'\nassert solution('.1.2.3.4.5.6.7.8.9.12') == 'NO'\nassert solution('.123456789.1.2.3.4.5.6.7.8.9.12') == 'NO'\n\n\"\"\"\n\nk = int(stdin.readline())\n\nlast = {1: {'left': True, 'right': True},\n      2: {'left': True, 'right': True},\n      3: {'left': True, 'right': True},\n      4: {'left': True, 'right': True}}\n\nfor line in stdin.readlines():\n    for n, l in enumerate(line):\n        if l!= '.':\n            last[n + 1] = {'left': l == '1', 'right': l == '9'}\n\nfor n in range(1, 5):\n    if last[n]['left'] and last[n]['right'] and last[n + 1]['left'] and last[n + 1]['right']:\n        print('YES')\n        break\nelse:\n    print('NO')"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n..1.\\n1111\\n..1.\\n..1.\\n\") == \"YES\"\nassert solution(\"1\\n...\\n12.1\\n.2..\\n.2..\\n\") == \"NO\"\n\n\"\"\"\nimport re\nfrom collections import deque\nfrom collections import Counter\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(\"5\\n..1.\\n1111\\n..1.\\n..1.\\n\"), \"YES\")\n        self.assertEqual(solution(\"1\\n...\\n12.1\\n.2..\\n.2..\\n\"), \"NO\")"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n.135\\n1247\\n3468\\n5789') == 'YES'\nassert solution('1\\n1111\\n.1.\\n.1.\\n.1.') == 'YES'\nassert solution('1\\n1111\\n11.1\\n11.1\\n11.1') == 'NO'\nassert solution('1\\n.2.\\n2.2\\n2.2\\n2.2') == 'NO'\nassert solution('1\\n.2.\\n11.1\\n11.1\\n11.1') == 'NO'\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"1\\n..1.\\n1111\\n..1.\\n.2..\\n.2..\") == \"YES\"\nassert solution(\"1\\n..1.\\n1111\\n..1.\\n.2..\\n.2..\") == \"NO\"\nassert solution(\"1\\n..1.\\n1111\\n.2..\\n.2..\\n.2..\\n.2..\") == \"NO\"\nassert solution(\"1\\n.2..\\n.2..\\n.2..\\n.2..\\n.2..\\n.2..\") == \"YES\"\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n..1\\n1111\\n..1\\n..1\\n') == 'YES'\nassert solution('5\\n....\\n12.1\\n.2..\\n.2..\\n') == 'YES'\nassert solution('1\\n..1\\n1111\\n..1\\n..1\\n') == 'YES'\nassert solution('5\\n....\\n12.1\\n.2..\\n.2..\\n') == 'YES'\nassert solution('1\\n..1\\n1111\\n..1\\n..1\\n') == 'NO'\n\n'''\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".1.\") == \"YES\"\nassert solution(\".12.\") == \"NO\"\nassert solution(\"..1.1.1.1.\") == \"YES\"\nassert solution(\"11111111.11111111.\") == \"YES\"\nassert solution(\"12.1..12.1..12.1..12.1..\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n..1.\\n11.1\\n..1.\\n11.1\") == \"YES\"\nassert solution(\"1\\n.1.\\n11.1\\n..1.\\n11.1\") == \"NO\"\nassert solution(\"1\\n.12.\\n11.2\\n..2.\\n11.2\") == \"NO\"\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n.135\\n1247\\n3468\\n5789\") == \"YES\"\nassert solution(\"1\\n1111\\n.1.\\n1111\\n.1.\") == \"YES\"\nassert solution(\"1\\n1111\\n.1.\\n1111\\n.1.\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".135\") == \"YES\"\nassert solution(\"1247\") == \"YES\"\nassert solution(\"3468\") == \"YES\"\nassert solution(\"5789\") == \"YES\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2 3\\n8 5') == '3'\nassert solution('2 10\\n8 5') == '3'\nassert solution('3 12\\n1 4 5') == '0'\nassert solution('3 7\\n1 4 9') == '1'"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10\\n8 5\") == \"3\"\nassert solution(\"3 12\\n1 4 5\") == \"0\"\nassert solution(\"3 7\\n1 4 9\") == \"1\"\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10') == '0'\nassert solution('1 2') == '0'\nassert solution('1 5') == '1'\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\n\"\"\"\n\n\"\"\"\n3 10\n1 4 5\n\"\"\"\n\n\"\"\"\n3 10\n1 4 9\n\"\"\"\n\n\"\"\"\n3 10\n1 4 5\n\"\"\"\n\nn, m = [int(e) for e in input().split()]\na = [int(e) for e in input().split()]\n\nprod = 0\nfor i in range(n):\n    for j in range(i, n):\n        prod += abs(a[i] - a[j]) % m\n\nprint(prod % m)\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10') == '1'\nassert solution('7 10') == '0'\nassert solution('10 5') == '3'\nassert solution('10 6') == '0'\n\"\"\"\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10\\n8 5\") == \"3\"\nassert solution(\"3 12\\n1 4 5\") == \"0\"\nassert solution(\"3 7\\n1 4 9\") == \"1\"\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10\\n8 5\") == \"3\"\nassert solution(\"3 12\\n1 4 5\") == \"0\"\nassert solution(\"3 7\\n1 4 9\") == \"1\"\n\"\"\"\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10\\n8 5') == '3'\nassert solution('3 12\\n1 4 5') == '0'\nassert solution('3 7\\n1 4 9') == '1'\n"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 10\\n8 5') == '3'\nassert solution('3 12\\n1 4 5') == '0'\nassert solution('3 7\\n1 4 9') == '1'"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 10\n8 5\n''') == '3'\nassert solution('''3 12\n1 4 5\n''') == '0'\nassert solution('''3 7\n1 4 9\n''') == '1'\nassert solution('''3 7\n1 2 3\n''') == '0'\n\nprint('Test Success!')"
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10\\n8 5\") == \"3\"\nassert solution(\"3 12\\n1 4 5\") == \"0\"\nassert solution(\"3 7\\n1 4 9\") == \"1\"\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\np = 1\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        p *= abs(a[i] - a[j])\n        p %= m\nprint(p)\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abac') == 'acab'\nassert solution('caab') == 'acab'\nassert solution('acba') == 'acab'\n\nassert solution('kbbu') == 'kbub'\nassert solution('kbub') == 'kbub'\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcd') == 'acbd'\nassert solution('dcba') == 'dcba'\nassert solution('acbd') == 'acbd'\nassert solution('dbca') == 'dbca'\nassert solution('zzzz') == '-1'\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 4\nabac\ncaab\nacba''') == 'acab'\nassert solution('''3 4\nkbbu\nkbub\nubkb''') == 'kbub'\nassert solution('''5 4\nabcd\ndcba\nacbd\ndbca\nzzzz''') == '-1'\nassert solution('''1 1\nc\nd''') == '-1'\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('acab') == 'acab'\nassert solution('caab') == 'acab'\nassert solution('acb') == 'acb'\nassert solution('bac') == 'acb'\nassert solution('abc') == 'abc'\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abac') == 'acab'\nassert solution('caab') == 'acab'\nassert solution('acba') == 'acab'\n\nassert solution('kbbu') == 'kbub'\nassert solution('kbub') == 'kbub'\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abac\") == \"acab\"\nassert solution(\"caab\") == \"acab\"\nassert solution(\"acba\") == \"acab\"\nassert solution(\"kbbu\") == \"kbub\"\nassert solution(\"kbub\") == \"kbub\"\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 4\nabac\ncaab\nacba''') == 'acab'\nassert solution('''3 4\nkbbu\nkbub\nubkb''') == 'kbub'\nassert solution('''5 4\nabcd\ndcba\nacbd\ndbca\nzzzz''') == '-1'\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abac\") == \"acab\"\nassert solution(\"caab\") == \"acab\"\nassert solution(\"acba\") == \"acab\"\n\nassert solution(\"kbbu\") == \"kbub\"\nassert solution(\"kbub\") == \"kbub\"\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == \"dcba\"\nassert solution(\"dcba\") == \"abcd\"\nassert solution(\"zxcv\") == \"zxcv\"\nassert solution(\"aaaa\") == \"aaaa\"\nassert solution(\"kkkk\") == \"kkkk\"\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"acab\"\nassert solution(\"caab\") == \"acab\"\nassert solution(\"acba\") == \"acab\"\n\nassert solution(\"kbbu\") == \"kbub\"\nassert solution(\"kbub\") == \"kbub\"\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n4 3 2 1 2 3 4 5') == '55555'\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4 3 2 1 2 3 4 5\") == \"55555\"\nassert solution(\"9 11 1 12 5 8 9 10 6\") == \"33\"\nassert solution(\"0 1 1 1 1 1 1 1 1\") == \"-1\"\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5 4 3 2 1 2 3 4 5\\n\") == \"55555\"\nassert solution(\"2\\n9 11 1 12 5 8 9 10 6\\n\") == \"33\"\n\"\"\"\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3 2 1 2 3 4 5\") == \"55555\"\nassert solution(\"9 11 1 12 5 8 9 10 6\") == \"33\"\nassert solution(\"0 1 1 1 1 1 1 1 1\") == \"-1\"\nassert solution(\"5 4 3 2 1 1 1 1 1\") == \"55555\"\n\n\"\"\"\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 3 2 1 2 3 4 5\") == \"55555\"\nassert solution(\"9 11 1 12 5 8 9 10 6\") == \"33\"\nassert solution(\"0\\n1 1 1 1 1 1 1 1 1\") == \"-1\"\n\n\"\"\"\n\nfrom math import floor\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n5 4 3 2 1 2 3 4 5\\n') == '55555'\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n4 3 2 1 2 3 4 5') == '55555'\nassert solution('2\\n9 11 1 12 5 8 9 10 6') == '33'\nassert solution('0\\n1 1 1 1 1 1 1 1 1') == '-1'\nassert solution('0\\n0') == '0'\nassert solution('0\\n0 0 0 0 0 0 0 0 0') == '0'\n\n\"\"\""
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '5\\n'\n    '5 4 3 2 1 2 3 4 5'\n) == '55555'\n\nassert solution(\n    '2\\n'\n    '9 11 1 12 5 8 9 10 6'\n) == '33'\n\nassert solution(\n    '0\\n'\n    '1 1 1 1 1 1 1 1 1'\n) == '-1'\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4 3 2 1 2 3 4 5\") == \"55555\"\nassert solution(\"9 11 1 12 5 8 9 10 6\") == \"33\"\nassert solution(\"0 1 1 1 1 1 1 1 1\") == \"-1\"\nassert solution(\"0 1 1 1 1 1 1 1 1\") == \"11\""
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n4 3 2 1 2 3 4 5') == '55555'\nassert solution('9\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('0\\n1 1 1 1 1 1 1 1 1') == '-1'\n\n'''\n\nv = int(stdin.readline())\nnums = list(map(int, stdin.readline().split()))\n\nnums.sort()\n\nlst = []\n\nfor n in nums:\n    lst.append(int(str(v // n) * n))"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n1 2\\n1 10\\n2 10\\n3 10\") == \"YES\"\nassert solution(\"4 1\\n1 2\\n1 10\\n2 10\\n3 10\") == \"YES\"\n\"\"\""
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('120 150') == 'YES'\n\n\"\"\""
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"120 150\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2\n120 150''') == 'YES'\nassert solution('''3\n3 4\n1 2\n120 150''') == 'NO'\nassert solution('''3\n3 4\n1 2\n120 150''') == 'YES'\nassert solution('''2\n1 10\n2 3''') == 'YES'\nassert solution('''2\n1 10\n2 13''') == 'NO'\n"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('3 2') == 'NO'\nassert solution('3 4') == 'NO'\nassert solution('3 5') == 'YES'\n'''\n\nt = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    print('YES' if (l * r) % (l - 1) > (l + r - 1) // 2 else 'NO')"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n120 150\") == \"YES\"\nassert solution(\"3\\n1 2\\n120 150\") == \"YES\"\nassert solution(\"3\\n1 2\\n120 150\") == \"YES\""
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"120 150\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == 'YES'\nassert solution(\"1 2\") == 'NO'\nassert solution(\"120 150\") == 'YES'\n\"\"\"\nimport math\n"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n120 150\") == \"YES\"\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n120 150''') == 'YES'\nassert solution('''3\n3 4\n1 2\n120 150''') == 'NO'\nassert solution('''3\n3 4\n1 2\n150 120''') == 'YES'\nassert solution('''2\n3 4\n1 2\n120 150''') == 'YES'\nassert solution('''1\n1 1\n1 1''') == 'YES'\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 3\") == \"30\"\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 2 3\\n1 2 3 4 5') == '30'\nassert solution('5 1 2 -3\\n-1 -2 -3 -4 -5') == '12'\n\"\"\""
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 3\") == \"30\"\nassert solution(\"5 1 2 -3\") == \"12\"\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 3\") == \"30\"\nassert solution(\"5 1 2 -3\") == \"12\"\n\nprint(\"Well Done!\")\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 3\\n1 2 3 4 5\") == \"30\"\nassert solution(\"5 1 2 -3\\n-1 -2 -3 -4 -5\") == \"12\"\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 2 3\\n1 2 3 4 5\") == \"30\"\nassert solution(\"5 1 2 -3\\n-1 -2 -3 -4 -5\") == \"12\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 3\\n1 2 3 4 5\") == \"30\"\nassert solution(\"5 1 2 -3\\n-1 -2 -3 -4 -5\") == \"12\"\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1 2 3') == '30'"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 3\\n1 2 3 4 5\") == \"30\"\nassert solution(\"5 1 2 -3\\n-1 -2 -3 -4 -5\") == \"12\"\n"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 3\") == \"30\"\nassert solution(\"5 1 2 -3\") == \"12\"\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\\n\") == \"2\"\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\\n\") == \"2\"\nassert solution(\"8\\n6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\\n\") == \"1\"\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n15 -1 -1\\n10 1 3\\n5 -1 -1') == '2'\n\"\"\"\n\nfrom collections import deque\nfrom typing import Deque, Dict, List, Optional, Set\n\nimport sys\n\nsys.setrecursionlimit(15_000)\n\n\nclass TreeNode:\n    def __init__(self, value: int):\n        self.value = value\n        self.left = None\n        self.right = None\n        self.parent = None\n\n\nclass Tree:\n    def __init__(self):\n        self.tree_dict: Dict[int, TreeNode] = dict()\n        self.root_node: Optional[TreeNode] = None\n\n    def insert(self, value: int):\n        if value in self.tree_dict:\n            return\n\n        self.tree_dict[value] = TreeNode(value)\n\n        if self.root_node is None:\n            self.root_node = self.tree_dict[value]\n            self.root_node.parent = None\n\n    def find_leaf_node(self, node: TreeNode, value: int) -> Optional[TreeNode]:\n        if node is None:\n            return None\n\n        if node.value == value:\n            return node\n\n        result = self.find_leaf_node(node.left, value)\n        if result is None:\n            result = self.find_leaf_node(node.right, value)\n        return result\n\n    def find_node(self, value: int) -> Optional[TreeNode]:\n        return self.find_leaf_node(self.root_node, value)\n\n    def get_children(self, node: TreeNode) -> Set[TreeNode]:\n        if node is None:\n            return set()\n\n        return {node.left, node.right}\n\n    def check_children(self, node: TreeNode) -> bool:\n        if node is None:\n            return False\n\n        return len(self.get_children(node)) == 0 or len(self.get_children(node)) == 1\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n15 -1 -1\n10 1 3\n5 -1 -1\n\"\"\") == \"2\"\nassert solution(\"\"\"8\n6 2 3\n3 4 5\n12 6 7\n1 -1 8\n4 -1 -1\n5 -1 -1\n14 -1 -1\n2 -1 -1\n\"\"\") == \"1\"\n\"\"\"\n[1]\n[2]\n[3]\n[1, 2]\n[1, 3]\n[2, 3]\n[1, 2, 3]\n[1, 1, 2]\n[1, 1, 3]\n[2, 1, 3]\n[1, 2, 2]\n[1, 2, 3]\n[2, 2, 3]\n[1, 1, 1, 3]\n[1, 1, 2, 2]\n[1, 1, 2, 3]\n[1, 1, 3, 3]\n[1, 2, 1, 3]\n[1, 2, 2, 3]\n[1, 1, 1, 1, 3]\n[1, 1, 1, 2, 2]\n[1, 1, 1, 2, 3]\n[1, 1, 1, 3, 3]\n[1, 1, 2, 1, 3]\n[1, 1, 2, 2, 3]\n[1, 1, 3, 1, 3]\n[1, 1, 3, 2, 3]\n[1, 2, 1, 1, 3]\n[1, 2, 1, 2, 3]\n[1, 2, 1, 3, 3]\n[1, 2, 2, 1, 3]\n[1, 2, 2, 2, 3]\n[1, 2, 3, 1, 3]\n[1, 2, 3, 2, 3]\n[1, 3, 1, 1, 3]\n[1, 3, 1, 2, 3]\n[1, 3, 2, 1, 3]\n[1, 3, 2, 2, 3]\n[1, 3, 3, 1, 3]\n[1, 3, 3, 2, 3]\n[2, 1, 1, 1, 3]\n[2, 1, 1, 2, 2]\n[2, 1, 1, 2, 3]\n[2, 1, 1, 3, 3]\n[2, 1, 2, 1, 3]\n[2, 1, 2, 2, 3]\n[2, 1, 3, 1, 3]\n[2, 1, 3, 2, 3]\n[2, 2, 1, 1, 3]\n[2, 2, 1, 2, 3]\n[2, 2, 1, 3, 3]\n[2, 2, 2, 1, 3]\n[2, 2, 2, 2, 3]\n[2, 2, 3, 1, 3]\n[2, 2, 3, 2, 3]\n[2, 3, 1, 1, 3]\n[2, 3, 1, 2, 3]\n[2, 3, 2, 1, 3]\n[2, 3, 2, 2, 3]\n[2, 3, 3, 1, 3]\n[2, 3, 3, 2, 3]\n[3, 1, 1, 1, 3]\n[3, 1, 1, 2, 2]\n[3, 1, 1, 2, 3]\n[3, 1, 1, 3, 3]\n[3, 1, 2, 1, 3]\n[3, 1, 2, 2, 3]\n[3, 1, 3, 1, 3]\n[3, 1, 3, 2, 3]\n[3, 2, 1, 1, 3]\n[3, 2, 1, 2, 3]\n[3, 2, 1, 3, 3]\n[3, 2, 2, 1, 3]\n[3, 2, 2, 2, 3]\n[3, 2, 3, 1, 3]\n[3, 2, 3, 2, 3]\n[3, 3, 1, 1, 3]\n[3, 3, 1, 2, 3]\n[3, 3, 2, 1, 3]\n[3, 3, 2, 2, 3]\n[3, 3, 3, 1, 3]\n[3, 3, 3, 2, 3]\n\n\"\"\"\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\\n\") == \"2\"\nassert solution(\"8\\n6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\\n\") == \"1\"\n\n'''\nfrom collections import deque\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\") == \"1\"\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n15 -1 -1\n10 1 3\n5 -1 -1\n''') == '2'\n\nassert solution('''8\n6 2 3\n3 4 5\n12 6 7\n1 -1 8\n4 -1 -1\n5 -1 -1\n14 -1 -1\n2 -1 -1\n''') == '1'\n\n\"\"\"\n\n\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n15 -1 -1\\n10 1 3\\n5 -1 -1\\n\") == \"2\"\nassert solution(\"8\\n6 2 3\\n3 4 5\\n12 6 7\\n1 -1 8\\n4 -1 -1\\n5 -1 -1\\n14 -1 -1\\n2 -1 -1\\n\") == \"1\"\n\"\"\"\n\nfrom typing import List\n\n\nclass TreeNode:\n    def __init__(self, value: int, left: 'TreeNode' = None, right: 'TreeNode' = None):\n        self.value = value\n        self.left = left\n        self.right = right\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n15 -1 -1\n10 1 3\n5 -1 -1\n\"\"\") == \"2\"\nassert solution(\"\"\"8\n6 2 3\n3 4 5\n12 6 7\n1 -1 8\n4 -1 -1\n5 -1 -1\n14 -1 -1\n2 -1 -1\n\"\"\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1\\n1 5\\n3 3\\n5 1\\n5 5\") == 6\nassert solution(\"3\\n1 1\\n2 3\\n3 5\") == 0\n\n\"\"\"\n\n\nfrom sys import stdin"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1\\n1 5\\n3 3\\n5 1\\n5 5\") == \"6\"\nassert solution(\"3\\n1 1\\n2 3\\n3 5\") == \"0\""
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n1 5\\n3 3\\n5 1\\n5 5\") == '6'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1\\n2 3\\n3 5\\n4 7\") == \"0\"\nassert solution(\"5\\n1 1\\n1 5\\n3 3\\n5 1\\n5 5\") == \"6\"\nassert solution(\"3\\n1 1\\n2 3\\n3 5\") == \"0\"\n"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1\\n1 5\\n3 3\\n5 1\\n5 5\") == 6\n\nassert solution(\"3\\n1 1\\n2 3\\n3 5\") == 0\n\nprint(\"Check passed.\")\n"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1\\n1 5\\n3 3\\n5 1\\n5 5\") == 6\n\n\"\"\"\n\nfrom typing import Dict\nfrom collections import defaultdict\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # Your code here\n        bishops: Dict[int, Dict[int, int]] = defaultdict(dict)\n\n        n = int(stdin.splitlines()[0])\n        for i in range(n):\n            row, col = [int(x) for x in stdin.splitlines()[1+i].split()]\n            bishops[row][col] = i\n            bishops[col][row] = i\n\n        ans = 0\n        for i in range(1, n):\n            for j in range(1, n):\n                if i!= j:\n                    if abs(i-j) in bishops[i] and abs(i-j) in bishops[j]:\n                        ans += 1\n        return str(ans)"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 1\\n1 5\\n3 3\\n5 1\\n5 5\\n') == '6'\nassert solution('3\\n1 1\\n2 3\\n3 5\\n') == '0'\nassert solution('1\\n1 1\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n1 5\\n3 3\\n5 1\\n5 5') == '6'\n\"\"\""
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n5 3\") == \"1\"\nassert solution(\"1 1\\n1 5\") == \"6\"\nassert solution(\"3 3\\n5 1\\n5 5\") == \"0\"\nassert solution(\"1 1\\n2 3\\n3 5\") == \"1\"\nassert solution(\"1 1\\n1 2\\n3 3\\n5 1\\n5 5\") == \"1\"\n"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1\\n2 3\\n3 5\") == \"0\"\nassert solution(\"5\\n1 1\\n1 5\\n3 3\\n5 1\\n5 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n1 2 2 1\") == \"3\"\nassert solution(\"4 2\\n1 2 3 1\") == \"3\"\nassert solution(\"4 1\\n1 2 2 1\") == \"2\"\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 3 1\\n\") == \"3\"\n\nassert solution(\"4 1\\n1 2 2 1\\n\") == \"3\"\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n1 2 2 1\") == \"3\"\nassert solution(\"4 2\\n1 2 3 1\") == \"3\"\nassert solution(\"4 2\\n1 2 2 1\") == \"2\"\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n1 2 2 1') == '3'\nassert solution('4 2\\n1 2 3 1') == '3'\nassert solution('4 2\\n1 2 1 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 80\\n1 2 2 1\") == \"2\"\nassert solution(\"4 1\\n1 2 2 1\") == \"3\"\nassert solution(\"4 2\\n1 2 3 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_expected\n\"\"\"\n\nn, k = map(int, input().split())\nbooks = list(map(int, input().split()))\n\ncnt_books = 0\ncost = 0\n\nwhile books:\n    cnt_books += 1\n    i = books.index(min(books))\n    if cnt_books > k:\n        cost += 1\n        cnt_books = 0\n        i = books.index(min(books))\n    books[i] = n + 1\nprint(cost)\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 80\\n1 2 2 1\\n') == '2'\nassert solution('4 1\\n1 2 2 1\\n') == '3'\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 2 2 1\") == \"3\"\nassert solution(\"4 2\\n1 2 3 1\") == \"3\"\nassert solution(\"4 3\\n1 2 3 1\") == \"3\"\nassert solution(\"4 3\\n1 2 3 1\") == \"3\"\n\"\"\"\n\nk, books = map(int, input().split())\nnums = list(map(int, input().split()))"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 80\\n1 2 2 1\\n') == '2'\nassert solution('4 1\\n1 2 2 1\\n') == '3'\nassert solution('4 2\\n1 2 3 1\\n') == '3'\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n1 4\\n4 7\\n2 5\\n5 8\\n3 6\\n6 9\") == \"7 8 9 4 5 6 1 2 3\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import List, Dict\n\nfrom collections import defaultdict\nfrom functools import reduce\nimport operator\n\nclass Solution:\n    def __init__(self, n: int, m: int, p: List[int], pairs: List[List[int]]):\n        self.n = n\n        self.m = m\n        self.p = p\n        self.pairs = pairs\n        self.mapping: Dict[int, int] = {p[i]: i + 1 for i in range(n)}\n        self.p_indices: Dict[int, int] = {v: k for k, v in self.mapping.items()}\n        self.rev_mapping: Dict[int, int] = {i + 1: p[i] for i in range(n)}\n        self.rev_p_indices: Dict[int, int] = {v: k for k, v in self.rev_mapping.items()}\n    \n    def get_rev_mapping(self) -> Dict[int, int]:\n        return self.rev_mapping\n\n    def get_rev_p_indices(self) -> Dict[int, int]:\n        return self.rev_p_indices\n\n    def get_mapping(self) -> Dict[int, int]:\n        return self.mapping\n\n    def get_p_indices(self) -> Dict[int, int]:\n        return self.p_indices\n\n    def swap(self, x: int, y: int) -> Dict[int, int]:\n        if x == y:\n            return self.mapping\n        i, j = self.p_indices[x], self.p_indices[y]\n        self.rev_mapping[i], self.rev_mapping[j] = self.rev_mapping[j], self.rev_mapping[i]\n        self.rev_p_indices[i], self.rev_p_indices[j] = self.rev_p_indices[j], self.rev_p_indices[i]\n        self.mapping[i], self.mapping[j] = self.mapping[j], self.mapping[i]\n        self.p_indices[i], self.p_indices[j] = self.p_indices[j], self.p_indices[i]\n        return self.mapping\n\n    def solve(self) -> Dict[int, int]:\n        for a, b in self.pairs:\n            self.swap(a, b)\n        return self.mapping\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\") == \"1 3 2 4\"\n\"\"\""
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 3\\n') == '1 2 3 4'\n\"\"\"\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''9 6\n1 2 3 4 5 6 7 8 9\n1 4\n4 7\n2 5\n5 8\n3 6\n6 9''') == '7 8 9 4 5 6 1 2 3'\n\n\"\"\"\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\\n1 4\\n4 7\\n2 5\\n5 8\\n3 6\\n6 9\") == '7 8 9 4 5 6 1 2 3'\nprint(\"Test passed.\")\n\n-----Notes-----\n\nThe given arrays of positions are 0-indexed.\n\nYou can swap any two elements of the array.\n\n\"\"\""
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 4\\n2 3\") == \"1 4 2 3\"\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 4\\n2 5\\n3 6\\n4 7') == '7 8 9 4 5 6 1 2 3'\n\n\"\"\"\n\nfrom tools import timing"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\n1 4\\n4 7\\n2 5\\n5 8\\n3 6\") == \"7 8 9 4 5 6 1 2 3\"\nassert solution(\"9 6\\n1 2 3 4 5 6 7 8 9\\n1 4\\n4 7\\n2 5\\n5 8\\n3 6\") == \"7 8 9 4 5 6 1 2 3\"\n\"\"\"\n\nfrom itertools import permutations\n\nn, m = map(int, stdin.readline().split())\np = list(map(int, stdin.readline().split()))\n\nfor _ in range(m):\n    pos = list(map(int, stdin.readline().split()))\n    p[pos[0] - 1], p[pos[1] - 1] = p[pos[1] - 1], p[pos[0] - 1]\n\nprint(*p)\n"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7 8 9\\n1 4\\n4 7\\n2 5\\n5 8\\n3 6\\n6 9\\n') == '7 8 9 4 5 6 1 2 3'\n\"\"\"\n\n\"\"\"\nN, M = map(int, input().split(' '))\np = list(map(int, input().split()))\nfor i in range(M):\n    a, b = map(int, input().split())\n    # p[b], p[a] = p[a], p[b]\n\"\"\""
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n..-**-..\") == \"**-**-**\\n**-**-**\\n..-P-**\\n**-**-**\\n..-**-..\\n..-**-..\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\"\n\n\"\"\""
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\") == \"**-**-**\\n**-P-**\\n**-**-**\\n**-**-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-*-**-\\n**-**-**\\n..-**-.*\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-*-*-**\\n**-**-**\\n..-**-.*\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-*-*-**\\n**-**-**\\n**-*-*-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-*-*-**\\n**-**-**\\n**-*-*-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\\n**-**-**\"\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"*-**-*\\n**-*-**\\n-**-**-\\n*-**-**\\n-**-**-\\n*-**-**\") == \"**-*-**\"\n\"\"\""
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n..-**-..\") == \"**-**-**\\n**-**-**\\n..-P-..\\n**-**-**\\n..-**-..\"\nassert solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n..-**-..\") == \"**-**-**\\n**-**-**\\n..-P-**\\n**-**-**\\n..-**-..\"\nassert solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n..-**-..\") == \"**-**-**\\n**-**-**\\n..-P-*-\\n**-**-**\\n..-**-..\"\nassert solution(\"**-**-*.\\n*-*-**\\n**-**-**\\n**-**-**\\n..-**-..\\n..-**-..\") == \"**-**-*.\\n*-*P-**\\n**-**-**\\n**-**-**\\n..-P-*-\\n..-**-..\"\nassert solution(\"**-**-*.\\n*-**-**\\n**-**-**\\n**-**-**\\n..-**-..\\n..-**-..\") == \"**-**-*.\\n*-**-**\\n**-P-**\\n**-**-**\\n..-P-*-\\n..-**-..\"\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n**-**-**\n*-*-*-**\n**-**-**\n**-**-**\n..-**-**\n..-**-**\n''') == '**-**-**\\n**-**-**\\n**-**-**\\n*-*-**\\n**-P-**\\n**-**-**\\n'\n\nassert solution('''\n**-**-**\n*-*-*-**\n**-**-**\n**-**-**\n..-**-**\n..-**-**\n''') == '**-**-**\\n**-**-**\\n**-**-**\\n*-*-**\\n**-P-**\\n**-**-**\\n'\n\nassert solution('''\n**-**-*.\n*-*-*-**\n**-**-**\n**-**-**\n..-**-**\n..-**-**\n''') == '**-**-*.\\n**-**-**\\n*-*-*-**\\n**-**-**\\n**-P-**\\n**-**-**\\n'\n\nassert solution('''\n**-**-**\n*-*-*-**\n**-**-**\n**-**-**\n..-**-**\n..-**-**\n''') == '**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\\n**-**-**\\n'\n\nassert solution('''\n**-**-**\n*-*-*-**\n**-**-**\n**-**-**\n..-**-**\n..-**-**\n''') == '**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\\n**-**-**\\n'"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\"\nassert solution(\"**-**-*\\n**-**-**\\n**-*-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-*-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-*-**\\n**-P-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\"\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\"\nassert solution(\"**-**-*.\\n*-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-*.\\n*-**-**\\n**-**-**\\n**-P-**\\n**-**-**\"\nassert solution(\"**-**-*.\\n*-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-*.\\n*-**-**\\n**-P-**\\n**-**-**\\n**-**-**\"\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"*-**-*.\\n**-**-**\\n**-*-**.*\\n**-**-**\\n**-**-**\") == \"**-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-*-**.*\\n**-**-**\\n**-**-**\") == \"*-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-*-**.*\\n**-**-**\\n**-**-**\") == \"*-**-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-*-**.*\\n**-**-**\\n**-*-**.*\") == \"*-*-**\"\nassert solution(\"**-**-**\\n**-**-**\\n**-*-**.*\\n**-**-**\\n**-*-**.*\") == \"**-*-**\"\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n..-**-..\") == \"**-**-**\\n**-**-**\\n..-P-..\\n**-**-**\\n..-**-..\", solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n..-**-..\")\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\", solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\")\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-P-**\\n**-**-**\", solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\")\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-P-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\", solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\")\nassert solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\") == \"**-**-**\\n**-P-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\", solution(\"**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\\n**-**-**\")\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 5\n3 1 7 5''') == '2'\n\nassert solution('''10 9\n4 5 5 7 5 4 5 2 4 3''') == '1'\n\nassert solution('''10 10\n100 100 100''') == '0'\n\nassert solution('''4 3\n1 2 3 4''') == '1'\n\nassert solution('''1 1\n1''') == '0'"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n3 1 7 5\") == 2\nassert solution(\"3 10\\n100 100 100\") == 0\nassert solution(\"10 9\\n4 5 5 7 5 4 5 2 4 3\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n3 1 7 5\") == \"2\"\nassert solution(\"3 10\\n100 100 100\") == \"0\"\nassert solution(\"10 9\\n4 5 5 7 5 4 5 2 4 3\") == \"1\""
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n3 1 7 5\") == \"2\"\nassert solution(\"3 10\\n100 100 100\") == \"0\"\nassert solution(\"10 9\\n4 5 5 7 5 4 5 2 4 3\") == \"1\"\n\n\"\"\"\n\nn, k = input().split()\nn, k = int(n), int(k)\nnums = list(map(int, input().split()))\nnums.sort()\nm = k + 1\nans = float('inf')\nfor i in range(n):\n    ans = min(ans, abs(nums[i] - nums[i + m - 1]))\nprint(ans)\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n3 1 7 5\") == 2\nassert solution(\"10 9\\n4 5 5 7 5 4 5 2 4 3\") == 1\nassert solution(\"7 9\\n9 8 3 4 5 6 7 1\") == 0\n\"\"\"\nimport sys"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n3 1 7 5') == '2'\nassert solution('3 10\\n100 100 100') == '0'\nassert solution('10 9\\n4 5 5 7 5 4 5 2 4 3') == '1'\n\nassert solution('10 9\\n4 5 5 7 5 4 5 2 4 3') == '1'\nassert solution('10 9\\n4 5 5 7 5 4 5 2 4 3') == '1'\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n3 1 7 5\") == \"2\"\nassert solution(\"10 9\\n4 5 5 7 5 4 5 2 4 3\") == \"1\"\nassert solution(\"10 10\\n100 100 100\") == \"0\"\n"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n3 1 7 5\") == \"2\"\nassert solution(\"10 9\\n4 5 5 7 5 4 5 2 4 3\") == \"1\"\nassert solution(\"3 10\\n100 100 100\") == \"0\"\nassert solution(\"10 10\\n4 5 5 7 5 4 5 2 4 3\") == \"1\""
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n3 1 7 5\") == '2'\nassert solution(\"3 10\\n100 100 100\") == '0'\nassert solution(\"10 9\\n4 5 5 7 5 4 5 2 4 3\") == '1'\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3 1 7 5\") == \"2\"\nassert solution(\"3 10 100 100\") == \"0\"\nassert solution(\"10 9 4 5 5 7 5 4 5 2 4 3\") == \"1\""
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n1 2\\n2 3\\n1\\n1 3\\n4 5\\n4 5') == '3'\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n1\\n1 3\") == \"3\"\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2\\n\") == \"3\"\nassert solution(\"2 3\\n1 2\\n1 3\\n\") == \"0\"\nassert solution(\"1 2\\n1 3\\n\") == \"0\"\nassert solution(\"1 2\\n2 3\\n\") == \"0\"\nassert solution(\"1 2\\n1 2\\n\") == \"1\"\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2\n2 3\n1\n1 3''') == 3\n\nassert solution('''4\n1 2\n2 3\n3 4\n1\n1 3\n2 4\n3 4''') == 5\n\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n1\n1 3\n2 4\n3 5\n4 5''') == 11\n\nassert solution('''6\n1 2\n2 3\n3 4\n4 5\n5 6\n1\n1 3\n2 4\n3 5\n4 6\n5 6''') == 14\n\nassert solution('''7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 7''') == 24"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n2 3\\n1\\n1 3') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2\n1 2\n2 3\n1\n1 3\n\"\"\"\n) == '3'\nassert solution(\n\"\"\"\n3\n1 2\n2 3\n1\n1 3\n\"\"\"\n) == '3'\nassert solution(\n\"\"\"\n3\n1 2\n2 3\n1\n1 3\n\"\"\"\n) == '2'\nassert solution(\n\"\"\"\n3\n1 2\n2 3\n1\n2 3\n\"\"\"\n) == '3'\nassert solution(\n\"\"\"\n3\n1 2\n2 3\n1\n1 3\n\"\"\"\n) == '6'\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2\n2 3\n1\n1 3\n''') == '3'\nassert solution('''\n4\n1 2\n2 3\n1\n1 3\n''') == '6'\nassert solution('''\n5\n1 2\n2 3\n1\n1 3\n''') == '12'\nassert solution('''\n6\n1 2\n2 3\n1\n1 3\n''') == '12'"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == '9'\nassert solution(\"3\\n1 2\\n1 3\\n2 3\") == '5'\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2\\n2 3\\n1\\n1 3') == '3'\nassert solution('3\\n1 2\\n2 3\\n1\\n2 3') == '0'\n"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n3 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\\n') == '2\\n14\\n'\n\n\"\"\"\n\nimport math\nimport re"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\") == '2\\n14'\n\"\"\"\n\n\nfrom typing import Dict, List, Set\n\n\nclass Graph(object):\n    def __init__(self, vertices: int):\n        self.V = vertices\n        self.graph: Dict[int, Set] = dict()\n\n    def addEdge(self, src: int, dest: int):\n        if src not in self.graph:\n            self.graph[src] = set()\n\n        if dest not in self.graph:\n            self.graph[dest] = set()\n\n        self.graph[src].add(dest)\n        self.graph[dest].add(src)\n\n    def removeEdge(self, src: int, dest: int):\n        if src not in self.graph:\n            return\n\n        self.graph[src].remove(dest)\n        self.graph[dest].remove(src)\n\n        if not self.graph[src]:\n            self.graph.pop(src)\n\n        if not self.graph[dest]:\n            self.graph.pop(dest)\n\n    def DFSUtil(self, v: int, visited: Dict[int, int]):\n        visited[v] = True\n\n        for vertex in self.graph[v]:\n            if not visited[vertex]:\n                self.DFSUtil(vertex, visited)\n\n    def getTransportCost(self, src: int, dest: int) -> int:\n        visited = dict()\n        for vertex in self.graph:\n            visited[vertex] = False\n\n        self.DFSUtil(src, visited)\n\n        count: int = 0\n        for vertex in visited:\n            if not visited[vertex]:\n                count += 1\n\n        return count\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\"\n) == \"2\\n14\"\n\"\"\"\n\nimport re\n\nstdin = \"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\"\n\nN, M, S = [int(x) for x in re.findall(r\"\\d+\", stdin)]\n\nG = [[0] * (N+1) for _ in range(N+1)]\nS_G = [[0] * (N+1) for _ in range(N+1)]\n\nfor _ in range(M):\n    u, v, a, b = [int(x) for x in re.findall(r\"\\d+\", stdin)]\n    G[u][v] = G[v][u] = a\n    S_G[u][v] = S_G[v][u] = b\n\nT = [int(x) for x in re.findall(r\"\\d+\", stdin)]\n\nfor t in range(2, N+1):\n    for v in range(1, N+1):\n        for u in range(1, N+1):\n            if G[u][v] == 0 or G[u][v] > T[t-2]:\n                continue\n            S_G[u][v] = min(S_G[u][v], S_G[u][t-1] + S_G[t-1][v] + G[u][t-1] * T[t-2])\n            G[u][v] = G[v][u] = 0\n\nprint(S_G[1][N])\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\") == \"2\\n14\"\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m, s, *lines = stdin.split()\n        n, m, s = int(n), int(m), int(s)\n\n        routes = [list(map(int, line.split())) for line in lines]\n        paths = [{} for _ in range(n)]\n\n        for route in routes:\n            start, end, money, time = route\n            paths[start - 1][end - 1] = (money, time)\n\n        result = [float(\"inf\") for _ in range(n)]\n        result[0] = 0\n        for _ in range(m):\n            for i in range(n):\n                for j in range(n):\n                    money, time = paths[i][j]\n                    result[j] = min(result[j], result[i] + money + time)\n\n        return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\\n') == '2\\n14\\n'\n\"\"\"\nimport math\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\\n\") == \"2\\n14\"\nassert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\\n\") == \"2\\n14\"\n\nstdin = \"\"\"3 2 1\n1 2 1 2\n1 3 2 4\n1 11\n1 2\n2 5\"\"\"\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5') == '2\\n14'\n\"\"\"\n\nimport sys\n\nfrom collections import deque, namedtuple\n\nfrom data_structures import Graph\nfrom data_structures.union_find import UnionFind\n\nEdge = namedtuple('Edge', ['u', 'v', 'cost'])\n\nN, M, S, R = map(int, sys.stdin.readline().split(' '))\n\ng = Graph(directed=True)\nfor i in range(1, N + 1):\n    g.add_vertex(i)\n\nfor _ in range(M):\n    u, v, a, b = map(int, sys.stdin.readline().split(' '))\n    g.add_edge(u, v, Edge(u, v, a))\n    g.add_edge(v, u, Edge(v, u, b))\n\nexchange = {int(x) for x in sys.stdin}\n\ndist = [0] + [-1 for _ in range(N)]\np = [[] for _ in range(N)]\nq = deque()\nq.append(1)\n\nwhile q:\n    u = q.popleft()\n\n    if dist[u] == -1:\n        dist[u] = dist[p[u][0]] + 1\n        q.append(p[u][0])\n\n    for e in g.adj[u]:\n        if e.u == e.v:\n            continue\n\n        v = e.v\n\n        if e.cost % 2 == 0 and v not in exchange:\n            continue\n\n        if dist[v] == -1 or dist[v] > dist[u] + e.cost:\n            dist[v] = dist[u] + e.cost\n            p[v] = p[u] + [v]\n            q.append(v)\n\nans = 0\nfor u, v in zip(dist[2:], dist[2:] + [S]):\n    ans += u * v\n\nprint(ans)\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\") == \"2\\n14\"\n\"\"\"\nfrom typing import List, Dict, Tuple\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\\n1 2 1 2\\n1 3 2 4\\n1 11\\n1 2\\n2 5\") == \"2\\n14\"\n"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3 2 1\\n'\n    '1 2 1 2\\n'\n    ':\\n'\n    '1 3 2 4\\n'\n    ':\\n'\n    '1 11\\n'\n    '1 2\\n'\n    '2 5\\n'\n) == '2\\n14'\nprint('Test 1 passed')\n\nassert solution(\n    '4 4 3\\n'\n    '1 2 1 2\\n'\n    ':\\n'\n    '1 3 2 4\\n'\n    ':\\n'\n    '1 4 2 3\\n'\n    ':\\n'\n    '1 11\\n'\n    '1 2\\n'\n    '2 5\\n'\n) == '2\\n14'\nprint('Test 2 passed')\n\nassert solution(\n    '4 4 5\\n'\n    '1 2 1 2\\n'\n    ':\\n'\n    '1 3 2 4\\n'\n    ':\\n'\n    '1 4 2 3\\n'\n    ':\\n'\n    '1 11\\n'\n    '1 2\\n'\n    '2 5\\n'\n) == '2\\n14'\nprint('Test 3 passed')"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n\nfrom math import factorial\nfrom decimal import Decimal, getcontext\n\nclass Main:\n    def __init__(self) -> None:\n        self.stdin = stdin\n        self.n, self.s = [int(i) for i in stdin.split()]\n        getcontext().prec = 3000\n\n    def exec(self) -> None:\n        return self.f()\n\n    def f(self) -> int:\n        # 3 3\n        # 2 2 4\n        # 3\n        # 3 + 2 + 1 = 6\n        # 2 2 + 4 = 6\n        # 1 2 + 4 = 6\n        # 1 3 = 6\n        # 2 3 = 6\n        # 1 2 3 = 6\n\n        # 2 3\n        # 2 2 + 3 = 6\n        # 2 2 + 4 = 6\n        # 2 3 = 6\n        # 2 2 + 4 + 3 = 6\n\n        # 3 4\n        # 2 2 + 3 = 6\n        # 2 2 + 4 = 6\n        # 3 = 6\n        # 2 2 + 4 + 3 = 6\n\n        # all combinations of length N - 1, that sum up to S\n        # https://stackoverflow.com/questions/35267922/python-code-to-generate-all-subsets-of-a-given-set-of-size-n\n\n        total = 0\n\n        for subset in combinations(self.n, self.n - 1):\n            if sum(subset) == self.s:\n                total += 1\n\n        return total\n\n\nclass Test:\n    def __init__(self) -> None:\n        self.solution = solution\n\n    def test(self) -> None:\n        # given, answer\n        test_cases = [\n            (\"3 4\", \"6\"),\n        ]\n\n        for i, (stdin, answer) in enumerate(test_cases):\n            print(f'Test Case: #{i+1}')\n            print(f'  Input:  \\t{stdin}')\n            print(f'  Expected:\\t{answer}')\n            print(f'  Output: \\t{self.solution(stdin)}')\n            print()\n"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n2 2 4') == '6'\n\"\"\"\nimport re"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4') == '6'\n\"\"\""
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == '6'\n\"\"\"\n\n\"\"\"\nn, s = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nprint((s * (s + 1) // 2) % 1000000007 - sum(i * (i + 1) // 2 for i in a))\n\"\"\"\n\n\"\"\"\nn, s = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nprint((s * (s + 1) // 2) % 1000000007 - sum(i * (i + 1) // 2 for i in a))\n\"\"\"\n\n\"\"\"\nn, s = map(int, input().split())\na = list(map(int, input().split()))\n\nprint((s * (s + 1) // 2) % 1000000007 - sum(i * (i + 1) // 2 for i in a))\n\"\"\""
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4') == '6'\nprint(solution('2 2 4'), '6')\nprint(solution('4 4'), '12')\n\"\"\""
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"2 2 4\") == \"0\"\n\"\"\""
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == '6'\n\"\"\"\n"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"14\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('3 4') == '6'\nassert solution('2 2 4') == '3'\nassert solution('3 4 2 2 2 2') == '7'\n"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2 3 4\\n') == 9\n\"\"\""
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 5') == '3'\n"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 5\") == \"3\"\nassert solution(\"10 1 10 10 10\") == \"7\"\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\n"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 5') == 3\n\"\"\"\n"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"3 2\n4 1 5\n\"\"\") == '3'\nassert solution(\n\"\"\"4 3\n1 1 1 1\n\"\"\") == '0'\nassert solution(\n\"\"\"3 2\n4 1 5\n\"\"\") == '3'\nassert solution(\n\"\"\"1 1\n1\n\"\"\") == '0'\nassert solution(\n\"\"\"3 2\n4 1 5\n\"\"\") == '3'\n\"\"\"\n"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 5\") == \"3\"\n\"\"\""
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n4 1 5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 5\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 5') == '3'\nassert solution('6 3 9') == '4'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\"\"\"\n\nimport math"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3 2\n4 1 5\n\"\"\"\n) == '3'\n\"\"\"\n-----"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 2\\n2 0\\n7 0\") == \"2\"\nassert solution(\"8 3\\n2 0\\n7 0\\n8 3\") == \"IMPOSSIBLE\"\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 0\\n2 0\\n3 0\\n4 0\\n\") == \"2\"\nassert solution(\"10 6\\n2 0\\n6 0\\n8 3\\n6 3\\n4 4\\n1 4\\n5 4\\n3 6\\n4 5\\n5 1\\n3 5\\n7 5\\n7 3\\n4 7\\n\") == \"IMPOSSIBLE\"\nassert solution(\"4 2\\n2 0\\n2 0\\n3 0\\n4 0\\n\") == \"1\"\nassert solution(\"4 4\\n1 0\\n2 0\\n3 0\\n4 0\\n\") == \"IMPOSSIBLE\"\nassert solution(\"4 3\\n1 0\\n2 0\\n3 0\\n4 0\\n\") == \"2\"\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '8 2\\n'\n    '2 0\\n'\n    '7 0\\n'\n    '8 3\\n'\n) == '2'\n\nassert solution(\n    '8 2\\n'\n    '2 0\\n'\n    '7 0\\n'\n    '8 1\\n'\n) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 2\\n2 0\\n7 0\\n8 3\\n\") == \"2\"\nassert solution(\"8 3\\n2 0\\n7 0\\n8 3\\n\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 2\\n2 0\\n7 0\") == 2\nassert solution(\"8 3\\n2 0\\n7 0\\n8 3\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 2\\n2 0\\n7 0\\n8 3\\n\") == \"2\"\nassert solution(\"8 3\\n2 0\\n7 0\\n8 3\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 0\\n7 0\\n8 3\") == \"IMPOSSIBLE\"\n\nassert solution(\"8 2\\n2 0\\n7 0\\n8 3\") == \"2\""
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 2\\n2 0\\n7 0\") == \"2\"\nassert solution(\"8 3\\n2 0\\n7 0\\n8 3\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 2\\n2 0\\n7 0\") == '2'\nassert solution(\"8 3\\n2 0\\n7 0\\n8 3\") == 'IMPOSSIBLE'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 2\\n2 0\\n7 0\") == \"2\"\nassert solution(\"8 3\\n2 0\\n7 0\\n8 3\") == \"IMPOSSIBLE\"\n\"\"\"\n\nfrom typing import List, Dict, Union, Tuple\n\nimport re"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"3 0\"\nassert solution(\"5 -4 2 1 8\") == \"5 5 3 2 0\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(expected_output(int(input())))\nprint(solution(str(input())))"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5 -4 2 1 8\") == '3 0'\n\"\"\"\n"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 -2 4') == '2 2 1 2 1'\nassert solution('5 5') == '3 0'\nassert solution('5 -4 2 1 8') == '5 5 3 2 0'\nassert solution('5 5 3 2 0') == '5 5 3 2 0'\n\nimport math\n"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n') == '3 0'\nassert solution('5 -4 2 1 8\\n') == '5 5 3 2 0'\n"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n\") == \"3 0\"\n"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 5 5\") == \"1 1 2 1\"\n\"\"\"\n\nimport math\nimport collections"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('4\\n') == '4'\nassert solution('2 1\\n') == '0'\n"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"3 0\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3\\n111\\n111\\n111\\n\\n111\\n111\\n111\\n\") == \"19\"\nassert solution(\"3 3 3\\n111\\n111\\n111\\n\\n111\\n111\\n111\\n\") == \"0\""
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"./example_0.in\") == \"2\"\nassert solution(\"./example_1.in\") == \"19\"\nassert solution(\"./example_2.in\") == \"0\"\nassert solution(\"./example_3.in\") == \"6\"\nassert solution(\"./example_4.in\") == \"11\"\n"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3\\n000\\n000\\n111\\n111\\n\") == 2\nassert solution(\"3 3 3\\n111\\n111\\n111\\n111\\n111\\n111\\n\") == 19\nassert solution(\"1 1 10\\n01010101010\\n\") == 0\n"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 3\\n111\\n111') == 2\nassert solution('3 3 3\\n111\\n111\\n111') == 19\nassert solution('1 1 10\\n0101010101') == 0\n"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 3\\n111\\n111') == 2\nassert solution('3 3 3\\n111\\n111\\n111\\n\\n111\\n111\\n111\\n') == 19\nassert solution('1 1 10\\n01010101010') == 0\n\"\"\""
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 3\\n000\\n000') == 2\nassert solution('3 3 3\\n111\\n111\\n111\\n') == 19\nassert solution('1 1 10\\n01010101\\n') == 0\n\n\n\nimport numpy as np\n\nn, m, k = map(int, input().split())\n\nmatrix = np.array([list(map(int, input().split())) for _ in range(n)])\n\nnumber_of_critical_processors = 0\n\nfor _ in range(m):\n    for _ in range(k):\n        matrix[:, :, _] = matrix[:, :, _] ^ matrix[:, :, _ - 1]\n        matrix[:, :, _] = matrix[:, :, _] ^ matrix[:, :, _ - 1]\n        matrix[:, :, _] = matrix[:, :, _] ^ matrix[:, :, _ - 1]\n\n    for i in range(n):\n        matrix[i, :, :] = np.logical_xor(matrix[i, :, :], matrix[i, :, : - 1])\n        matrix[i, :, :] = np.logical_xor(matrix[i, :, :], matrix[i, :, : - 1])\n        matrix[i, :, :] = np.logical_xor(matrix[i, :, :], matrix[i, :, : - 1])\n\n    number_of_critical_processors += int(np.sum(matrix))\n\nprint(number_of_critical_processors)"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3\") == 2\n\"\"\""
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 3\\n111\\n111\\n111\") == 2\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Matrix:\n    def __init__(self):\n        self.matrix = defaultdict(dict)\n        self.indexes = defaultdict(set)\n    \n    def add(self, i, j, val):\n        self.matrix[i][j] = val\n        self.indexes[i].add(j)\n    \n    def __str__(self):\n        return str(self.matrix)\n    \n    def __repr__(self):\n        return str(self.matrix)"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 3 3\n111\n111\n111\n\n111\n111\n111\n\n111\n111\n111\n''') == '19'\nassert solution('''1 1 10\n0101010101\n''') == '0'\n"
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 3\\n000\\n000\") == \"2\"\nassert solution(\"3 3 3\\n111\\n111\\n111\\n\\n111\\n111\\n111\") == \"19\"\nassert solution(\"1 1 10\\n01010101010\") == \"0\"\n\n\"\"\"\n\nimport sys\n\n\"\"\"\n\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: https://stepik.org/lesson/24461/step/1?adaptive=true&unit=6785\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435: https://stepik.org/lesson/24461/step/2?adaptive=true&unit=6785\n\"\"\"\n\nprint(int(sys.stdin.readline().split()[2]) - int(sys.stdin.readline().split()[0]) - 1)\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"a\") == \"a\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba,123;1a;0') == '123,0'\nassert solution('1;;01,a0,') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba,123;1a;0\") == '123,0'\nassert solution(\"1;;01,a0,\") == '1'\nassert solution(\"1\") == '1'\nassert solution(\"a\") == 'a'\nassert solution(\"\") == ''\n\"\"\""
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,0\") == \"1\"\nassert solution(\"1\") == \"1\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"a\") == \"a\""
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"101;0\") == \"101\"\nassert solution(\"1;;01,a0,\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1,2,3,4\") == \"1,2,3,4\"\nassert solution(\"1;2,3,4;5\") == \"1,2,3,4,5\"\nassert solution(\"1;2;3,4\") == \"1,2,3,4\"\nassert solution(\"1;2,3,4;5\") == \"1,2,3,4,5\"\nassert solution(\"1,2,3,4;5\") == \"1,2,3,4,5\"\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba,123;1a;0') == '123,0'\nassert solution('1;;01,a0,') == '1'\nassert solution('1') == '1'\nassert solution('a') == 'a'\n\n\n\"\"\"\n"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba,123;1a;0\") == \"123,0\"\nassert solution(\"1;;01,a0,;1\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1;\") == \"1;1\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5') == '3\\n6 1 3'\nassert solution('2 4') == '3\\n1 3 1'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n\") == \"3\"\nassert solution(\"2 4\\n\") == \"3\"\nassert solution(\"1 1\\n\") == \"0\"\nassert solution(\"5 2\\n\") == \"2\"\nassert solution(\"1 8\\n\") == \"5\"\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"3 1 3\"\n\n\"\"\"\n\nfrom typing import List, Set, Tuple\n\nn, x = map(int, input().split())"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"3\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"2\"\n\n\n\n\n\"\"\"\n\n\nimport sys\nimport collections\nfrom typing import List"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"1 1\") == \"0\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5') == '3'\nassert solution('2 4') == '3'\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0'\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n') == '3'\nassert solution('2 4\\n') == '3'\nassert solution('1 1\\n') == '0'\nassert solution('1 3\\n') == '3'\nassert solution('2 3\\n') == '3'\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 5\n2 6\n2 3\n2\n2 4\n6 8\n''') == '3'\n\nassert solution('''\n3\n1 5\n2 6\n3 7\n2\n2 4\n1 4\n''') == '0'\n\n\"\"\""
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\\n') == 3\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8') == 3\n\"\"\""
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\") == 3\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\") == 3\nassert solution(\"3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4\") == 0\n\"\"\"\n\nn = int(input())\n\nchess = []\nprogramming = []\nfor i in range(n):\n    chess.append(list(map(int, input().split())))\n\nm = int(input())\n\nfor i in range(m):\n    programming.append(list(map(int, input().split())))\n\nchess.sort()\nprogramming.sort()\nchess = list(set(chess))\nprogramming = list(set(programming))\n\nd = [0]\nl = [0]\nfor i in range(len(chess)):\n    l.append(abs(chess[i][0] - chess[i][1]))\n\nfor i in range(len(programming)):\n    d.append(abs(programming[i][0] - programming[i][1]))\n\nd = list(set(d))\n\nfor i in range(len(d)):\n    for j in range(len(chess)):\n        if d[i] == abs(chess[j][0] - chess[j][1]):\n            chess[j][0] = d[i]\n            chess[j][1] = d[i]\n            break\n    for k in range(len(programming)):\n        if d[i] == abs(programming[k][0] - programming[k][1]):\n            programming[k][0] = d[i]\n            programming[k][1] = d[i]\n            break\n\nc = []\np = []\nfor i in range(len(chess)):\n    c.append(chess[i][0])\n    c.append(chess[i][1])\n\nfor i in range(len(programming)):\n    p.append(programming[i][0])\n    p.append(programming[i][1])\n\nc = list(set(c))\np = list(set(p))\n\nc = list(map(int, c))\np = list(map(int, p))\n\nc = sorted(c)\np = sorted(p)\n\ncount = 0\nfor i in range(len(c)):\n    if c[i] in p:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\\n\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\") == 3\nassert solution(\"3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4\") == 0\n\"\"\""
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8') == '3'\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\\n') == '3'\nassert solution('3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4\\n') == '0'\n\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 5\\n2 6\\n2 3\\n2\\n2 4\\n6 8\") == 3\nassert solution(\"3\\n1 5\\n2 6\\n3 7\\n2\\n2 4\\n1 4\") == 0\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"7 6\") == \"6\"\nassert solution(\"1 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n') == '4'\n\nassert solution('7 6\\n') == '6'\n\n\n\"\"\"\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2') == '4'\nassert solution('7 6') == '6'\nassert solution('10 10') == '10'\nassert solution('10 100') == '100'\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2') == '4'\nassert solution('7 6') == '6'\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"7 6\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 2\n''') == '4'\n\nassert solution('''7 6\n''') == '6'\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"7 6\") == \"6\"\nassert solution(\"15 3\") == \"9\"\n\"\"\"\n\nn, v = [int(i) for i in input().split()]\nn = v = [i for i in range(n+1)]"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"7 6\") == \"6\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"4\"\nassert solution(\"7 6\") == \"6\"\nassert solution(\"7 4\") == \"4\"\nassert solution(\"7 5\") == \"5\"\nassert solution(\"8 2\") == \"2\""
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 4 8\") == 14\nassert solution(\"4\\n1 -7 -2 3\") == -3\n\"\"\"\n\n\"\"\"\nTaken solution from https://www.codewars.com/kata/54ff2d9d4c8832ad8e0000fc/train/python\n\"\"\""
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 4 8') == '14'\nassert solution('4\\n1 -7 -2 3') == '-3'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 4 8\") == '14'\nassert solution('4\\n1 -7 -2 3') == '-3'\n"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 4 8\") == \"14\"\nassert solution(\"4\\n1 -7 -2 3\") == \"-3\"\n\"\"\""
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 4\") == \"8\"\nassert solution(\"4 1 -7 -2 3\") == \"-3\"\nprint(\"All cases passed!\")\n"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 4 8') == '14'\nassert solution('4\\n1 -7 -2 3') == '-3'\nassert solution('5\\n-3 -2 5 2 2') == '-2'\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 4 8') == '14'\nassert solution('4\\n1 -7 -2 3') == '-3'\n\"\"\"\n"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 4 8') == '14'\nassert solution('4\\n1 -7 -2 3') == '-3'\nassert solution('4\\n-2 -4 2 1') == '0'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 4 8\") == 14\n\"\"\""
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 4 8\") == 14\n\"\"\""
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 30\\n2 2 1') == 5\nassert solution('3 20\\n2 1 1') == -1"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 30\\n2 2 1\") == \"5\"\nassert solution(\"3 20\\n2 1 1\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 30\\n2 2 1\") == \"5\"\n\nassert solution(\"3 20\\n2 1 1\") == \"-1\"\n\n\n\"\"\"\n\nfrom typing import List\nimport unittest\n\n\nclass Solution:\n    def optimal_time_events(self, n: int, d: int, arr: List[int]) -> int:\n        events: List[tuple] = [(arr[i], i, \"song\") for i in range(n)]\n        events.sort(reverse=True)\n        time: int = 0\n        jokes: int = 0\n        for event in events:\n            if event[2] == \"song\":\n                time += event[0]\n                jokes += 1\n            else:\n                time -= event[0]\n            if time > d:\n                break\n        return jokes if time <= d else -1\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n        return super().setUp()\n\n    def test_optimal_time_events(self) -> None:\n        self.assertEqual(self.solution.optimal_time_events(3, 30, [2, 2, 1]), 5)\n        self.assertEqual(self.solution.optimal_time_events(3, 20, [2, 1, 1]), -1)\n"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 30\\n2 2 1') == '5'\nassert solution('3 20\\n2 1 1') == '-1'\n"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 30\\n2 1 1\") == \"5\"\nassert solution(\"3 20\\n2 1 1\") == \"-1\"\n\n\"\"\"\n\nn, d = input().split()\nn = int(n)\nd = int(d)\nt = [int(i) for i in input().split()]\n\nmaxi = n\nfor i in range(n):\n    if t[i] >= d:\n        break\n    maxi = min(maxi, i)"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 30\\n2 1 1\") == \"5\"\nassert solution(\"3 20\\n2 1 1\") == \"-1\"\n\"\"\"\n\nimport math\nimport sys\nimport numpy as np\n\n\nclass Event:\n    def __init__(self, n_songs: int, songs_time: list):\n        self.n_songs = n_songs\n        self.songs_time = songs_time\n        self.n_slots = math.ceil(sum(songs_time) / 10)\n        self.max_jokes = math.ceil(n_songs / 2)\n\n        self.pref_arr = np.zeros((self.n_slots, self.n_songs))\n\n    def solve(self):\n        for i in range(self.n_songs):\n            for j in range(self.n_slots):\n                if j * 10 - self.songs_time[i] > 0:\n                    self.pref_arr[j][i] = self.pref_arr[j - 1][i]\n                else:\n                    self.pref_arr[j][i] = max(\n                        self.pref_arr[j][i], self.pref_arr[j - 1][i - 1])\n\n    def get_jokes_amount(self):\n        self.solve()\n        max_jokes = 0\n        for i in range(self.n_slots):\n            max_jokes = max(max_jokes, self.max_jokes - self.pref_arr[i].sum())\n        return max_jokes\n"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\") == \"2\"\nassert solution(\"5 20\") == \"-1\"\n\"\"\""
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 30\") == \"5\"\nassert solution(\"3 20\") == \"0\"\nassert solution(\"3 10\") == \"1\"\n\nimport time\n"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 30\\n2 2 1') == '5'\nassert solution('3 20\\n2 1 1') == '-1'"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 30\") == \"5\"\nassert solution(\"3 20\") == \"-\"\n\nimport unittest\nimport io\nimport sys\nimport contextlib\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = io.StringIO(), io.StringIO(input)\n        with contextlib.redirect_stdout(io.StringIO()) as f:\n            try:\n                solution()\n            finally:\n                sys.stdout.seek(0)\n                out = f.getvalue()\n                sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 30\n2 1 1\"\"\"\n        output = \"\"\"5\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"3 20\n2 1 1\"\"\"\n        output = \"\"\"-1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"100 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == 3\nassert solution('9 3') == 13\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"9 3\") == \"13\"\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == 3\nassert solution(\"9 3\") == 13\nassert solution(\"1 10\") == 9\nassert solution(\"5 7\") == 6\n\"\"\"\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == 3\nassert solution('9 3') == 13\n\"\"\"\n\nn, m = [int(i) for i in input().split()]"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2') == '3'\nassert solution('9 3') == '13'\nassert solution('7 3') == '10'\nassert solution('100 99') == '99'\n\"\"\""
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 9') == '13'\nassert solution('1 2') == '4'\nassert solution('100 2') == '101'\nassert solution('1 1') == '3'\nassert solution('2 3') == '7'\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('9 3') == '13'\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 3\") == 13\n\"\"\""
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == '3'\nassert solution('9 3') == '13'\nassert solution('1 100') == '101'\nassert solution('2 1000000000') == '1000000001'\n\"\"\"\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"9 3\") == \"13\"\n\"\"\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 7 -7 3 -1 -3\") == \"1\\n6\"\nassert solution(\"8\\n1 -1 1 2 -1 -2 3 -3\") == \"2\\n2 6\"\nassert solution(\"6\\n2 5 -5 5 -5 -2\") == \"-1\"\nassert solution(\"3\\n-8 1 1\") == \"-1\"\n\n\n----- Python3 -----\nimport sys"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-8 1 1\") == '-1'\nassert solution(\"6\\n2 5 -5 5 -5 -2\") == '-1'\nassert solution(\"7\\n1 7 -7 3 -1 -3\") == '1'\n\"\"\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5 -5 5 -5 -2') == '-1'\nassert solution('1 7 -7 3 -1 -3') == '1'\nassert solution('1 1 1 1 1 1 1 1 1') == '1'\n\nassert solution('8 1 1') == '-1'\nassert solution('8 1 1 1 1 1 1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 -5 5 -5 -2\") == \"-1\"\nassert solution(\"1 7 -7 3 -1 -3\") == \"1\"\nassert solution(\"8 1 1\") == \"-1\"\nassert solution(\"6 2 5 -5 5 -5 -2\") == \"-1\"\nassert solution(\"3 -8 1 1\") == \"-1\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 7 -7 3 -1 -3\") == \"1\"\nassert solution(\"8\\n1 -1 1 2 -1 -2 3 -3\") == \"2\"\nassert solution(\"6\\n2 5 -5 5 -5 -2\") == \"-\"\nassert solution(\"3\\n-8 1 1\") == \"-\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 7 -7 3 -1 -3\") == \"1\"\nassert solution(\"6\\n1 7 -7 3 -1 -3\") == \"1\"\nassert solution(\"8\\n1 -1 1 2 -1 -2 3 -3\") == \"2\"\nassert solution(\"6\\n2 5 -5 5 -5 -2\") == \"-1\"\nassert solution(\"3\\n-8 1 1\") == \"-1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 7 -7 3 -1 -3\") == '1\\n6\\n'\nassert solution(\"8\\n1 -1 1 2 -1 -2 3 -3\") == '2\\n2 6\\n'\nassert solution(\"6\\n2 5 -5 5 -5 -2\") == '-1'\nassert solution(\"3\\n-8 1 1\") == '-1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 7 -7 3 -1 -3\") == '1\\n2\\n2\\n6'\nassert solution(\"2 5 -5 5 -5 -2\") == '-1'\nassert solution(\"-8 1 1\") == '-1'\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 7 -7 3 -1 -3\") == \"1\"\nassert solution(\"8\\n1 -1 1 2 -1 -2 3 -3\") == \"2\"\nassert solution(\"6\\n2 5 -5 5 -5 -2\") == \"1\"\nassert solution(\"3\\n-8 1 1\") == \"1\"\n\nassert solution(\"3\\n2 5 -5 5 -5 -2\") == \"1\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 7 -7 3 -1 -3\") == \"2\\n2 6\"\nassert solution(\"6\\n2 5 -5 5 -5 -2\") == \"1\\n-1\"\nassert solution(\"3\\n-8 1 1\") == \"1\\n-1\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nd = []\n\nfor i in range(n):\n    if a[i] > 0:\n        d.append(1)\n    elif a[i] < 0:\n        d.append(-1)\n    else:\n        d.append(0)\n\nm = len(d)"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 2\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1\") == '2\\n1\\n4\\n5'\n\nassert solution(\"4 10 4\\n10 8 6 4\\n16 9 8\\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\") == '5'\n\n\"\"\"\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 2\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1\") == \"2\\n1\\n4\\n5\"\nassert solution(\"4 10 4\\n10 8 6 4\") == \"1\\n4\\n5\"\nassert solution(\"3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\") == \"5\\n1\\n4\\n5\"\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 9 5\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1\") == '2\\n1\\n4\\n5'\n\"\"\""
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\n\"\"\"\nN, K, D = [int(x) for x in stdin.readline().split()]\narr = [int(stdin.readline()) for _ in range(N)]\n\ndp = [[0] * (K + 1) for _ in range(D + 1)]\n\ndp[0][0] = 1\n\nfor day in range(D + 1):\n    for num in range(K + 1):\n        dp[day][num] = dp[day][num - 1] + (dp[day - 1][num] if day > 0 else 0)\n\nprint(sum(dp[-1]))\n\"\"\""
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 2\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1\") == \"2\\n1\\n4\\n5\"\n\"\"\"\n\nfrom math import ceil, sqrt"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\") == \"2\"\nassert solution(\"5 2 2\") == \"2\"\nassert solution(\"9 3 3\") == \"1\"\nassert solution(\"16 9 8\") == \"5\"\nassert solution(\"10 8 6 4\") == \"5\""
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('0\\n') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n1\\n1\\n1\\n') == ''\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n') == ''\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1''') == '2\nassert solution('''5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1''') == '1\nassert solution('''5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1''') == '4\nassert solution('''5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1''') == '5\n'''\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 2\\n1 2 1 2 1\\n9 3 3\\n3 3 3 2 2 2 1 1 1') == '2\\n1\\n4\\n5'\nassert solution('9 8 5\\n3 2 2\\n1 2 1 1 1\\n2 2 1 1\\n2 1 1 1\\n1 1 1 1\\n9 9 9\\n1 9 7 5 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3 5 8 9 7 9 3"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".#....\") == \"YES\"\nassert solution(\".#....\") == \"YES\"\nassert solution(\".#....\") == \"YES\"\nassert solution(\".#....\") == \"NO\"\nassert solution(\".#....\") == \"NO\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n.#...\\n####.\\n....#\\n...#.\\n#....\\n....#\\n#...#\\n.....\") == 'YES'\nassert solution(\"4\\n#....\\n#....\\n#....\\n#....\\n\") == 'YES'\nassert solution(\"6\\n.#..#\\n####.\\n.#..#\\n#....\\n####.\\n....#\\n....#\\n\") == 'YES'\nassert solution(\"3\\n.#..#\\n#....\\n#....\\n\") == 'YES'\nassert solution(\"5\\n...#.\\n....#\\n....#\\n....#\\n....#\\n\") == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n.#..#\\n####.\\n...#.\\n#....\\n####.\") == 'YES'\nassert solution(\"4\\n###.\\n#.#.\\n#.##\\n###.\") == 'YES'\nassert solution(\"6\\n###.\\n#.#.\\n#.##\\n###.\\n#..#\\n###.\") == 'YES'\nassert solution(\"4\\n####\\n#...\\n####\\n#....\\n####.\") == 'YES'\nassert solution(\"7\\n...#.\\n#....\\n#####\\n....#\\n...##\\n..#.#\\n.....\") == 'YES'\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n#...\\n####.\\n.####\\n...#.\\n.....\") == \"YES\"\nassert solution(\"4\\n####\\n####\\n####\\n####\") == \"NO\"\nassert solution(\"6\\n#....\\n######\\n.####.\\n.#.##.\\n######\\n#.....\") == \"YES\"\nassert solution(\"6\\n#....\\n######\\n.####.\\n.#.##.\\n######\\n#.....\") == \"YES\"\nassert solution(\"3\\n...\\n...\\n...\\n\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n...\\n####\\n...\\n####\\n\") == 'YES'\nassert solution(\"4\\n####\\n####\\n####\\n####\\n\") == 'NO'\nassert solution(\"5\\n.#...\\n####.\\n...#.\\n####.\\n\") == 'YES'\nassert solution(\"5\\n.....\\n####.\\n..#.\\n####.\\n\") == 'YES'\nassert solution(\"6\\n.#...\\n#####\\n...#.\\n#####\\n....#\\n\") == 'NO'\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n.#...\\n#####\\n....#\\n#####\\n....#\") == \"YES\"\nassert solution(\"4\\n####\\n###\\n####\\n\") == \"YES\"\nassert solution(\"6\\n.#..#\\n######\\n....#\\n######\\n....#\\n\") == \"NO\"\nassert solution(\"3\\n.\\n.\\n.\\n\") == \"YES\"\nassert solution(\"5\\n.#.#.\\n#.#.#\\n###.#\\n.##.#\\n.###.\") == \"YES\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n.\\n#.#\\n#.\\n.#.') == 'YES'\nassert solution('5\\n.\\n#.#\\n#.\\n.#.') == 'YES'\nassert solution('5\\n.#\\n#.#\\n#.\\n.#.') == 'NO'\nassert solution('6\\n.\\n..\\n..\\n...\\n#..\\n#..\\n#.#') == 'YES'\nassert solution('6\\n.\\n..\\n..\\n...\\n#..\\n#..\\n#.#') == 'YES'\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n.#...\\n####.\\n.####\\n...#.\\n.....\") == 'YES'\nassert solution(\"4\\n####\\n####\\n####\\n####\") == 'NO'\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n.####\\n#####\\n.####\\n.##.\\n#####\\n\") == \"YES\"\nassert solution(\"4\\n####\\n####\\n####\\n####\\n\") == \"YES\"\nassert solution(\"6\\n.####\\n#####\\n.####\\n.####\\n######\\n.#..#\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n...\\n...\\n...') == 'YES'\nassert solution('4\\n####\\n####\\n####\\n####') == 'NO'\n\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 100\\n') == '33'\nassert solution('5 30\\n') == '15'\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 100\\n5 30') == '15'\nassert solution('5 30\\n') == '15'\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 100') == '33'\nassert solution('5 30') == '15'\n\n'''\n\n\n\n'''\n\nGiven an integer n, find the sum of all numbers of length n that are palindromic in base 10 and base 2.\n\n(Recall that an integer\u00a0is\u00a0palindromic\u00a0when it reads the same backward as forward, such as\u00a01221.)\n\nExample\n\nFor n = 2, the output should be\nsolution(n) = 8.\n\nThe only values of length 2 are 11 and 22.\n11 is 1011\u00a0in binary and its binary\u00a0representation\u00a0101101 is palindromic.\n22 is\u00a010110\u00a0in binary and its binary\u00a0representation\u00a010110\u00a0is palindromic.\nSo the answer is 11 + 22 = 33.\n\nFor n = 3, the output should be\nsolution(n) = 22.\n\nThere are only two values of length 3:\u00a011, 22.\n11 is 10111 in binary and its binary\u00a0representation\u00a010111 is palindromic.\n22 is\u00a010110\u00a0in binary and its binary\u00a0representation\u00a010110\u00a0is palindromic.\nSo the answer is 11 + 22 = 33.\n\nFor n = 4, the output should be\nsolution(n) = 44.\n\nThere are only two values of length 4: 22 and 44.\n22 is\u00a010110\u00a0in binary and its binary\u00a0representation\u00a010110\u00a0is palindromic.\n44 is\u00a01011011100\u00a0in binary and its binary\u00a0representation\u00a01011011100\u00a0is palindromic.\nSo the answer is 22 + 44 = 66.\n\nFor n = 5, the output should be\nsolution(n) = 88.\n\nThere are no values of length 5, so the answer is 0.\n\nFor n = 50, the output should be\nsolution(n) = 23103250.\n\n\n-----\n\nThe hardest part of this problem is calculating all numbers of length n that are palindromic in both binary and decimal.\n\nFor this problem, I'll explain how this works:\n\n1.  The base 10 number you need to divide by is:\n        2^n - 1.\n\n2.  The binary representation of this number is all ones.\n        2^(n-1) - 1 = (1111...1)\n\n3.  Let's see what we get if we divide this number by 11.\n        (1111...1) / 11 = (1111...0)\n\n4.  The decimal value of (1111...0) is 0.\n        0 modulo 11 is 10.\n        10 is not palindromic.\n\n5.  If you want to check if a number is palindromic, you can do this recursively.\n        We only need to check if the last digit is the same as the first digit.\n        We can then cut the number in half.\n        We'll call this new number (11...11), where the first and last digit are the same.\n\n6.  If we cut this number in half again, we'll get (11...10) and (11...10).\n        Both these numbers are palindromes.\n\n7.  So we can keep dividing by 11 and check if the number is palindromic.\n        Now we're at a single digit number.\n\n8.  To check whether the number is palindromic, we can check if the last digit is the same as the first digit.\n        If it is, we'll add the number to the palindromic sum.\n        If not, we'll divide by 10 and check again.\n\n9.  This process continues until we reach a number that is a single digit.\n\n10. The answer is the palindromic sum.\n\nI'll also explain how I calculate the palindromic sum using the concept of binary numbers:\n\n1.  The base 10 number you need to divide by is:\n        2^n - 1.\n\n2.  The binary representation of this number is all ones.\n        2^(n-1) - 1 = (1111...1)\n\n3.  If you divide this number by 11, you'll get a number that is one less than the original one.\n        (1111...1) / 11 = (1111...0)\n\n4.  Let's see what we get if we divide this number by 10:\n        (1111...0) / 10 = (1110...1)\n\n5.  The decimal value of (1110...1) is 1.\n        1 modulo 10 is 1.\n        1 is palindromic.\n\n6.  If you want to check if a number is palindromic, you can do this recursively.\n        We only need to check if the last digit is the same as the first digit.\n        We can then cut the number in half.\n        We'll call this new number (11...11), where the first and last digit are the same.\n\n7.  If we cut this number in half again, we'll get (11...10) and (11...10).\n        Both these numbers are palindromes.\n\n8.  So we can keep dividing by 10 and check if the number is palindromic.\n        Now we're at a single digit number.\n\n9.  To check whether the number is palindromic, we can check if the last digit is the same as the first digit.\n        If it is, we'll add the number to the palindromic sum.\n        If not, we'll divide by 10 and check again.\n\n10. This process continues until we reach a number that is a single digit.\n\n11. The answer is the palindromic sum.\n\nSome examples:\nn = 2, answer = 8\nn = 3, answer = 22\nn = 4, answer = 44\nn = 5, answer = 88\nn = 6, answer = 132\nn = 7, answer = 176\nn = 8, answer = 308\nn = 9, answer = 462\nn = 10, answer = 944\nn = 11, answer = 1190\nn = 12, answer = 2322\nn = 13, answer = 36696\nn = 14, answer = 554444\nn = 15, answer = 949920\nn = 16, answer = 16888888\nn = 17, answer = 328097034\n\n\n-----\n\nThe hardest part of this problem is to find all possible palindromes of length n.\n\nHere's a nice explanation:\n\nhttps://math.stackexchange.com/questions/307969/comprehensive-list-of-palindromic-integers-in-base-b-where-b-is-power-of-10\n\nn = 2, we have two options: 0 and 1, which are palindromes.\n\nn = 3, we have two options: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, which are palindromes.\n\nn = 4, we have four options: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, which are palindromes.\n\nn = 5, we have five options: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, which are"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 100') == '33'\n\"\"\""
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 100\") == \"33\"\nassert solution(\"5 30\") == \"15\"\n\n\n-----\n\nfrom typing import List\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 100') == '33'\nassert solution('5 30') == '15'\nassert solution('1 1') == '0'\nassert solution('10 2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 100\") == \"33\"\nassert solution(\"5 30\") == \"15\"\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 100\") == \"33\"\nassert solution(\"5 30\") == \"15\"\nprint(solution(\"2 100\"))\nprint(solution(\"5 30\"))\n\"\"\"\n\n\"\"\"\n-----2nd Method-----\n\n---Time limit exceeded\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 100') == 33\nassert solution('5 30') == 15\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n2 1\\n2 2\\n3 3\\n4 4\\n5 5') == '15'\nassert solution('5 4\\n2 2\\n3 2\\n4 3\\n5 4') == '11'\n\"\"\"\n\nfrom sys import stdin\n\nk, p = map(int, stdin.readline().split())\n\ncount = 0\n\nfor i in range(1, k + 1):\n    curr_decimal = i\n    while curr_decimal > 0:\n        if curr_decimal % 10 == curr_decimal:\n            count += 1\n            break\n        curr_decimal //= 10\n\nprint(count * (count + 1) // 2 % p)\n"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"saba\") == \"NO\"\nassert solution(\"saddastavvat\") == \"YES\"\nassert solution(\"a\") == \"NO\"\nassert solution(\"aaa\") == \"NO\"\n\"\"\""
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abba') == 'YES'\nassert solution('ababa') == 'NO'\nassert solution('saddastavvat') == 'YES'\n\nassert solution('saddastavvat') == 'YES'\nassert solution('saddas') == 'NO'\n"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sada\") == \"NO\"\nassert solution(\"saddastavvat\") == \"YES\"\n"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abac\") == \"NO\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"bb\") == \"NO\"\nassert solution(\"tattarrattat\") == \"YES\"\n"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaabbbccc\") == \"NO\"\nassert solution(\"ababa\") == \"YES\"\nassert solution(\"abab\") == \"NO\"\nassert solution(\"abcdcba\") == \"YES\"\nassert solution(\"abcddcba\") == \"NO\"\n"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'YES'\nassert solution('saddastavvat') == 'YES'\nassert solution('tavaa') == 'NO'\nassert solution('tavat') == 'NO'\nassert solution('saktos') == 'NO'\n"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"saddastavvat\") == \"YES\"\nassert solution(\"sad\") == \"NO\"\nassert solution(\"asd\") == \"YES\"\nassert solution(\"asdf\") == \"NO\"\nassert solution(\"asdfadsfdsa\") == \"YES\"\n\"\"\""
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'YES'\nassert solution('ababa') == 'NO'\nassert solution('a') == 'YES'\nassert solution('aabbbbbb') == 'NO'\nassert solution('ababababa') == 'NO'\n"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"saba\") == 'NO'\nassert solution(\"saddastavvat\") == 'YES'\n\"\"\""
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"aabbaa\") == \"NO\"\nassert solution(\"ababa\") == \"YES\"\n\"\"\""
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n2 5\\n') == '7'\nassert solution('3 2\\n3 5 7\\n') == '8'\n\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n2 5') == '7'\nassert solution('3 2\\n3 5 7') == '9'\nassert solution('4 3\\n2 3 5 9') == '8'"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n3 5 7\") == \"9\"\nassert solution(\"2 1\\n2 5\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n2 3 5 9') == '9'\nassert solution('3 2\\n3 5 7') == '8'\nassert solution('3 3\\n3 5 7') == '8'\nassert solution('4 5\\n2 3 5 9') == '9'\n"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n2 5\") == \"7\"\nassert solution(\"4 3\\n2 3 5 9\") == \"9\"\nassert solution(\"3 2\\n3 5 7\") == \"8\"\n\"\"\""
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n2 5\") == \"7\"\nassert solution(\"3 2\\n3 5 7\") == \"9\"\nassert solution(\"4 3\\n2 3 5 9\") == \"9\"\n"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n2 5\") == \"7\"\nassert solution(\"4 3\\n2 3 5 9\") == \"9\"\n\"\"\""
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n2 5\") == \"7\"\nassert solution(\"4 3\\n2 3 5 9\") == \"9\"\nassert solution(\"3 2\\n3 5 7\") == \"8\"\n\"\"\""
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n2 3 5 9\\n\") == \"9\"\nassert solution(\"3 2\\n3 5 7\\n\") == \"8\"\nassert solution(\"2 1\\n2 5\\n\") == \"7\"\n\n\n\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n2 5\") == \"7\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n0 1 0\n''') == '1'\nassert solution('''5\n1 0 1 0 1\n''') == '4'\nassert solution('''5\n1 1 1 1 1\n''') == '0'\nassert solution('''5\n1 1 1 1 1\n''') == '1'\nprint('test passed')"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n0 1 0') == '1'\nassert solution('5\\n1 0 1 0 1') == '4'\nassert solution('10\\n1 0 1 0 1') == '4'\nassert solution('8\\n0 0 1 0 1 0 0 1') == '0'\n\"\"\"\nimport math\nimport itertools\n"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 1 0\") == \"1\"\nassert solution(\"5\\n1 0 1 0 1\") == \"4\"\n"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 0 1 0 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0 1 0') == '1'\n\nassert solution('5\\n1 0 1 0 1') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n0 1 0') == '1'\nassert solution('5\\n1 0 1 0 1') == '4'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n0 1 0') == '1'\nassert solution('5\\n1 0 1 0 1') == '4'"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1 0\\n\") == \"1\"\nassert solution(\"5\\n1 0 1 0 1\\n\") == \"4\"\n\n'''\n\nimport math"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"4\"\n\nassert solution(\"3\\n1 0 1\") == \"1\"\n"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 1 0\") == \"1\"\nassert solution(\"5\\n1 0 1 0 1\") == \"4\"\n"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\\n2\\n5 6\") == \"9:6\"\nassert solution(\"5\\n6 7 8 9 10\\n5\\n1 2 3 4 5\") == \"15:10\"\n\"\"\"\n"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1:2'\nassert solution('1 2 3') == '1:3'\nassert solution('1 2 3 4') == '1:4'\n"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\\n2\\n5 6\") == \"9:6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 3\n2\n5 6\n''') == '9:6'\n\nassert solution('''5\n6 7 8 9 10\n5\n1 2 3 4 5\n''') == '15:10'\n\nassert solution('''3\n1 2 3\n2\n5 6\n''') == '9:6'\n\nassert solution('''5\n6 7 8 9 10\n5\n1 2 3 4 5\n''') == '15:10'\n\nassert solution('''5\n6 7 8 9 10\n5\n1 2 3 4 5\n''') == '15:10'"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n5 6 7 8 9 10\") == \"15:10\"\nprint(solution(stdin))\n"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3\\n2\\n5 6') == '9:6'\n"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\\n2\\n5 6\") == '9:6'\nassert solution(\"5\\n6 7 8 9 10\\n5\\n1 2 3 4 5\") == '15:10'\n\"\"\""
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\\n2\\n5 6\") == \"9:6\"\n\"\"\"\n"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n2\\n5 6\") == '9:6'\nassert solution(\"1 2 3 4\\n5\\n6 7 8 9 10\") == '15:10'\n\"\"\""
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2\\n1\\n\") == \"6:1\"\n\"\"\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\naa\nabacaba\nxdd\n''') == '''-1\nabaacba\nxdd'''\n\nassert solution('''2\nab\nab\n''') == '''-1\nab'''\n\nassert solution('''1\na\n''') == '''-1'''\n\nassert solution('''1\nx\n''') == '''-1'''\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aa\") == \"abaacba\"\nassert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"xdd\") == \"xdd\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"xdd\") == \"xdd\"\nassert solution(\"xddxdd\") == \"xddxdd\"\n\n\"\"\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aa\") == -1\nassert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"xdd\") == \"xdd\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aa') == '-1'\nassert solution('abacaba') == 'abaacba'\nassert solution('xdd') == 'xdd'\n\n\"\"\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aa\") == -1\nassert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"xdd\") == \"xdd\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aa\") == -1\nassert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"xdd\") == \"xdd\"\n\nimport string\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"aa\") == -1\nassert solution(\"bba\") == -1\nassert solution(\"xd\") == -1\nassert solution(\"abacaba\") == \"abaacba\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aa\") == -1\nassert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"xdd\") == \"xdd\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aa\") == \"abaacba\"\nassert solution(\"abacaba\") == \"abaacba\"\nassert solution(\"xdd\") == \"xdd\"\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nn, m = list(map(int, stdin.readline().split(' ')))\n\ngood = set()\ncorners = set()\n\nfor y in range(n):\n    for x, val in enumerate(map(int, stdin.readline().split(' '))):\n        if val == 1:\n            good.add((x + 1, y + 1))\n        if (x + 1, y + 1) in corners:\n            corners.remove((x + 1, y + 1))\n        if val == 1 and x == 0 or x == m:\n            corners.add((x + 1, y + 1))\n\nprint(len(good) - 4 + len(corners))\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n0 0 0\\n0 0 1\\n0 0 0\\n\") == 4\nassert solution(\"4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\\n\") == 2\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\") == '2'\nassert solution(\"4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\") == '0'\nassert solution(\"5 4\\n0 0 0 0\\n0 0 1 0\\n0 0 0 0\\n0 0 0 0\") == '1'"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n0 0 0\\n0 0 1\\n0 0 0\\n\") == \"4\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n0 0 0\\n0 0 1\\n0 0 0\\n\") == \"4\"\nassert solution(\"4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\\n\") == \"2\"\nassert solution(\"4 2\\n0 0 1\\n0 0 0\\n1 0 0\\n0 0 0\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\") == \"4\"\nassert solution(\"3 3\\n0 0 0\\n0 0 1\\n0 0 0\") == \"2\"\nassert solution(\"4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 3\n0 0 0\n0 0 1\n0 0 0\n\"\"\") == '4'\n\nassert solution(\"\"\"4 3\n0 0 0\n0 0 1\n1 0 0\n0 0 0\n\"\"\") == '2'\n\"\"\"\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n0 0 0\\n0 1 0\\n0 0 0\") == '4'\nassert solution(\"4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\") == '2'\n\"\"\"\nimport sys\n\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n0 0 0\\n0 0 1\\n0 0 0\") == \"4\"\nassert solution(\"4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\") == \"2\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\ntable = []\nfor _ in range(n):\n    row = list(map(int, sys.stdin.readline().split()))\n    table.append(row)\n\ncorners = []\nfor i in range(n):\n    for j in range(m):\n        if table[i][j] == 1:\n            corners.append((i, j))\n\nimport itertools\nimport functools\n\n@functools.lru_cache(None)\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n0 0 0\\n0 0 1\\n0 0 0\\n\") == \"4\"\nassert solution(\"4 3\\n0 0 0\\n0 0 1\\n1 0 0\\n0 0 0\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"black\"\nassert solution(\"2\") == \"white\""
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 'white'\nassert solution('3') == 'black'"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"white\"\nassert solution(\"2\") == \"black\"\n\"\"\""
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"white\"\nassert solution(\"3\") == \"black\""
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"white\"\nassert solution(\"7\") == \"black\"\nassert solution(\"3\") == \"white\"\n\n\"\"\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"black\"\nassert solution(\"2\") == \"white\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == \"black\"\n\"\"\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == \"black\"\n\nassert solution(2) == \"white\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"white\"\nassert solution(\"3\") == \"black\"\nassert solution(\"4\") == \"white\"\nassert solution(\"5\") == \"white\"\nassert solution(\"6\") == \"black\"\n"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"white\"\nassert solution(\"2 3\") == \"black\"\nassert solution(\"3 4\") == \"black\"\nassert solution(\"4 1\") == \"white\"\nassert solution(\"5 6\") == \"white\"\n"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 0 0 0 1\\n\") == \"0 2 3 3 3 3 3 3 3 3 3 3\"\nassert solution(\"12\\n0 0 0 0 1 1 1 1 0 1 1 0\\n
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 0 0 0 1\") == \"0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 0 0 0 1\n''') == '0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 0 0 0 1\\n') == '0 2 3 3 3 3 3 3 3 3 3 3'\nassert solution('12\\n0 0 0 0 1 1 1 1 0 1 1 0\\n') == '9 12 13 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15'\nprint(solution(input()))\n"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 0 0 0 1') == '0 2 3 3 3 3 3 3 3 3 3 3'\nassert solution('12\\n0 0 0 0 1 1 1 1 0 1 1 0') == '9 12 13 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15'\n"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 0 0 0 1\\n') == '0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 0 0 0 1\") == \"0 2 3 3 3 3 3 3 3 3 3 3\"\nassert solution(\"12\\n0 0 0 0 1 1 1 1 0 1 1 0\") == \"9 12 13 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15\"\n"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 0 0 0 1\\n') == '0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 0 0 0 1\\n\") == \"0 2 3 3 3 3 3 3 3 3 3\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 0 0 0 1 1\\n\") == \"0 2 3 3 3 3 3 3 3 3 3 3 3\"\nassert solution(\"12\\n0 0 0 0 1 1 1 1 0 1 1 0\\n
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 0\") == \"1\"\n\nassert solution(\"2 1\\n1 2\") == \"2\"\n\nassert solution(\"3 2\\n1 2\\n2 3\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 2\") == 2\n\"\"\"\n\nn, m = map(int, input().split())\nchemicals = []\n\nfor _ in range(m):\n    chemicals.append(list(map(int, input().split())))\n\nimport itertools\n\ndanger = 1\nfor x, y in itertools.combinations(chemicals, 2):\n    if (x[1] == y[0]):\n        danger *= 2\n    elif (y[1] == x[0]):\n        danger *= 2\n\nprint(danger)\n"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 1\n1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 2\n1 2\n2 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3 2\n1 2\n3 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3 2\n1 2\n2 3\n\"\"\") == \"4\"\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 2\") == 2\nassert solution(\"3 2\\n1 2\\n2 3\") == 4\n"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == 4\nassert solution(\"5 6\\n2 3\\n4 5\\n2 4\") == 16\nassert solution(\"1 0\\n1 1\") == 1\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == '4'\n\"\"\""
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 1') == '2'\nassert solution('3 2') == '4'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 2') == 2\nassert solution('3 2\\n1 2\\n2 3') == 4\n\"\"\"\nimport sys\nfrom functools import lru_cache\n"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 2\") == 2\n\nassert solution(\"3 2\\n1 2\\n2 3\") == 4\n\n\"\"\""
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 2') == 2\nassert solution('3 2\\n1 2\\n2 3') == 4\nassert solution('3 2\\n2 3\\n1 2') == 2\n"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"2\") == 1\nassert solution(\"4\") == 3\nassert solution(\"1\") == 1\n\"\"\"\n"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\""
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\""
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == '1'\nassert solution(\"3\") == '2'\nassert solution(\"4\") == '3'\n\n\"\"\"\n\nn = int(stdin.readline())\n\n\nprint((n - 1) // 3 + 1)"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\""
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 3') == '2'\nassert solution('5 4 5 4 4') == '5'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '10'\nassert solution('3 1 3 1 1 1') == '0'\nassert solution('3 1 2 1 1 1') == '0'\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '2'\nassert solution('1 1 2') == '3'\nassert solution('1 1 2 2') == '1'\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 3\\n') == '2'\nassert solution('5 4 5 4 4\\n') == '5'\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5 4 3 2\\n') == '5'\n\n\"\"\""
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 3\") == \"2\"\nassert solution(\"5 4 5 4 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 3') == '2'\nassert solution('5 4 5 4 4') == '5'\n\"\"\"\n\nfrom typing import Iterator, List\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 3 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 3') == '2'\nassert solution('5 4 5 4 4') == '5'\n\n\"\"\""
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3 3 3\") == \"2\"\nassert solution(\"5\\n5 4 5 4 4\") == \"5\"\nassert solution(\"6\\n6 6 6 6 6\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2') == '1 2'\nassert solution('4\\n1 3') == '1 3'\nassert solution('12\\n5 7') == '5 7'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1 3'\nassert solution('5 10') == '5 7'"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1 2'\nassert solution('12') == '1 3'"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1 2'"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '1 2'\nassert solution('4') == '1 3'\nassert solution('12') == '5 7'\n\nprint(solution(input()))\n"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1 2\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2') == '1 2'\nassert solution('4\\n1 3') == '1 3'\nassert solution('12\\n5 7') == '5 7'\n\nimport os, io, time, sets, functools, itertools, operator, collections\n"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1 2\"\nassert solution(\"4\") == \"1 3\"\nassert solution(\"12\") == \"5 7\"\n"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1 2\"\nassert solution(\"4\") == \"1 3\"\nassert solution(\"12\") == \"5 7\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '1 3'\n\"\"\"\n\nn = int(input())\n\nfor i in range(1, n + 1):\n    for j in range(i, n + 1):\n        if i * j == n:\n            print(i, j)\n            break\n    else:\n        continue\n    break\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1\") == 8\nassert solution(\"7 9 1\") == 28\nassert solution(\"7 9 2\") == 40\n\"\"\"\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 3 1''') == '8'\nassert solution('''7 9 1''') == '28'\nassert solution('''7 9 2''') == '40'\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 9 1''') == '28'\nassert solution('''7 9 2''') == '40'\nassert solution('''7 9 3''') == '56'\nassert solution('''7 9 4''') == '80'\nassert solution('''7 9 5''') == '110'\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(3) + \"\\n\" + str(3) + \"\\n\" + str(1)) == \"8\"\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1\") == 8\nassert solution(\"7 9 1\") == 28\nassert solution(\"7 9 2\") == 40\n\n\"\"\""
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 3 1''') == '8'\nassert solution('''7 9 1''') == '28'\nassert solution('''7 9 2''') == '40'\nassert solution('''4 4 2''') == '16'\nassert solution('''4 5 2''') == '24'\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 1') == '8'\nassert solution('7 9 1') == '28'\nassert solution('7 9 2') == '40'\n\"\"\"\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 9 1\") == \"28\"\nassert solution(\"7 9 2\") == \"40\"\nassert solution(\"7 9 3\") == \"52\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 1 1\") == \"1\"\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3 3 1) == 8\nassert solution(7 9 1) == 28\nassert solution(7 9 2) == 40\n"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 9 1') == '28'\nassert solution('3 3 1') == '8'\nassert solution('7 9 2') == '40'\nassert solution('7 9 2') == '40'\n\"\"\"\n\nw, h, k = input().split(' ')\nw = int(w)\nh = int(h)\nk = int(k)\n\nm = w if w < h else h\nrings = (m + 1) // 4\n\ncount = 0\n\nfor i in range(rings):\n    count += ((w - 4 * i) * (h - 4 * i))\n\nfor i in range(k):\n    count += (w - 4 * i) * (h - 4 * i)\n\nprint(count)\n"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4\n7 2 4 12\n7 15 10 12\n''') == \"Yes\"\n\nassert solution('''\n3\n4 4 4\n1 2 3\n''') == \"No\"\nassert solution('''\n2\n4 4\n4 4\n''') == \"Yes\"\nassert solution('''\n5\n3 2 5 1\n3 2 5 1\n''') == \"No\"\nassert solution('''\n4\n5 5 1 1\n5 5 5 1\n''') == \"Yes\""
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 4\\n1 2 3\") == \"No\"\nassert solution(\"7 2 4 12\\n7 15 10 12\") == \"Yes\""
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2 4 12\") == \"Yes\"\nassert solution(\"7 15 10 12\") == \"No\"\nassert solution(\"4 4 4\") == \"Yes\"\nassert solution(\"1 2 3\") == \"No\"\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 4\") == \"Yes\"\nassert solution(\"7 2 4 12\") == \"Yes\"\nassert solution(\"7 15 10 12\") == \"Yes\"\nassert solution(\"1 2 3\") == \"No\"\nassert solution(\"1 2 2\") == \"No\"\n"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 4\") == \"Yes\"\nassert solution(\"1 2 3\") == \"No\"\n\"\"\""
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2 4 12\") == \"Yes\"\nassert solution(\"7 15 10 12\") == \"Yes\"\nassert solution(\"7 2 4 12\") == \"Yes\"\nassert solution(\"7 2 4 12\") == \"Yes\"\n\nassert solution(\"4 4 4\") == \"No\"\n"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n\n\"\"\""
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 4 4\") == \"No\"\nassert solution(\"4\\n1 2 3\") == \"Yes\"\nassert solution(\"7\\n7 15 10 12\") == \"No\"\n"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2 4 12\") == \"Yes\"\nassert solution(\"7 15 10 12\") == \"No\"\nassert solution(\"3 4 4\") == \"No\"\n"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 4\\n1 2 3') == 'No'\nassert solution('7 2 4 12\\n7 15 10 12') == 'Yes'\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 0 1 1 2\\n2 0 1 0 0\\n\") == \"YES\\n1 3 1 2 1\"\nassert solution(\"4\\n0 0 2 0\\n1 1 1 1\\n\") == \"NO\\n\"\nassert solution(\"3\\n0 0 0\\n0 0 0\\n\") == \"YES\\n1 1 1\"\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0 1 0 0\\n1 1 1 1 1\") == \"YES\\n1 3 1 2 1\"\nassert solution(\"5\\n2 0 1 0 0\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"4\\n0 0 2 0\\n1 1 1 1\") == \"YES\\n1 1 1\"\nassert solution(\"3\\n0 0 0\\n0 0 0\") == \"YES\\n1 1 1\""
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == \"NO\"\nassert solution('2 0 1 0 0') == \"YES\"\nassert solution(\"0 0 2 0\") == \"YES\"\nassert solution('0 0 0') == \"NO\"\nassert solution(\"1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 0 1 1 2\\n2 0 1 0 0\") == 'YES\\n1 3 1 2 1'\nassert solution(\"4\\n0 0 2 0\\n1 1 1 1\") == 'NO'\nassert solution(\"3\\n0 0 0\") == 'YES\\n1 1 1'\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n0 0 1 1 2\\n2 0 1 0 0\\n\") == 'YES\\n1 3 1 2 1'\nassert solution(\"4\\n0 0 2 0\\n1 1 1 1\\n\") == 'NO'\nassert solution(\"3\\n0 0 0\\n0 0 0\\n\") == 'YES\\n1 1 1'"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 0 1 1 2\\n2 0 1 0 0\\n\") == 'YES\\n1 3 1 2 1\\n'\nassert solution(\"4\\n0 0 2 0\\n1 1 1 1\\n\") == 'NO\\n'\nassert solution(\"3\\n0 0 0\\n0 0 0\\n\") == 'YES\\n1 1 1\\n'\nassert solution(\"1\\n0 0 0\\n0 0 0\\n\") == 'YES\\n1 1 1\\n'\nassert solution(\"5\\n0 0 1 1 2\\n2 0 1 0 0\\n\") == 'YES\\n1 3 1 2 1\\n'\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0 1 1 2\\n2 0 1 0 0\") == \"YES\\n1 3 1 2 1\"\nassert solution(\"5\\n0 0 1 1 2\\n2 0 1 0 0\") == \"NO\"\nassert solution(\"3\\n0 0 0\\n0 0 0\") == \"YES\\n1 1 1\"\nassert solution(\"1\\n0 0\") == \"YES\\n1 1 1\"\nassert solution(\"3\\n1 1 1\\n1 1 1\") == \"YES\\n1 1 1\"\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 0 1 1 2\\n2 0 1 0 0\\n\") == 'YES\\n1 3 1 2 1'\nassert solution(\"4\\n0 0 2 0\\n1 1 1 1\\n\") == 'NO'\nassert solution(\"3\\n0 0 0\\n0 0 0\\n\") == 'YES\\n1 1 1'\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0 0 1 1 2\\n2 0 1 0 0\") == \"YES\\n1 3 1 2 1\"\n\"\"\"\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 0 1 1 2\\n2 0 1 0 0\") == \"YES\\n1 3 1 2 1\"\nassert solution(\"4\\n0 0 2 0\\n1 1 1 1\") == \"NO\"\nassert solution(\"3\\n0 0 0\") == \"YES\\n1 1 1\"\nassert solution(\"3\\n1 1 1\") == \"YES\\n1 1 1\"\n\"\"\"\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1 1 2\\\\n1 3 5 7\\\\n1 2 3 9 10\\\\n\") == \"11\"\nassert solution(\"2 2 4 4 2\\\\n1 10\\\\n10 20\\\\n\") == \"-1\"\nassert solution(\"4 3 2 3 1\\\\n1 999999998 999999999 1000000000\\\\n3 4 1000000000\\\\n\") == \"1000000003\"\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 5 1 1 2\n1 3 5 7\n1 2 3 9 10''') == '11'\nassert solution('''2 2 4 4 2\n1 10\n10 20''') == '-1'\nassert solution('''4 3 2 3 1\n1 999999998 999999999 1000000000\n3 4 1000000000''') == '1000000003'\n\nimport collections"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 2 4 6 8\"\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10\") == \"11\"\nassert solution(\"2 2 4 4 2\\n1 10\\n10 20\") == \"-1\"\nassert solution(\"4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000\") == \"1000000003\""
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10\") == \"11\"\n\"\"\""
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10\\n\") == \"11\"\n\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom _pytest.outcomes import Skipped\n\nfrom utils import timed\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10\") == \"11\"\n\"\"\""
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10') == '11'\nassert solution('2 2 4 4 2\\n1 10\\n10 20') == '-1'\nassert solution('4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000') == '1000000003'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import List\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 1 1 2\\n1 3 5 7\\n1 2 3 9 10\") == \"11\"\nassert solution(\"2 2 4 4 2\\n1 10\\n10 20\") == \"-1\"\nassert solution(\"4 3 2 3 1\\n1 999999998 999999999 1000000000\\n3 4 1000000000\") == \"1000000003\"\n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 5 1 1 2\n1 3 5 7\n1 2 3 9 10''') == '11'\n\nassert solution('''2 2 4 4 2\n1 10\n10 20''') == '-1'\n\nassert solution('''4 3 2 3 1\n1 999999998 999999999 1000000000\n3 4 1000000000''') == '1000000003'\n\n\"\"\""
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3 1\") == \"1.916666666666666666666666666667\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 1') == '1.916666666666666666666666666667'\n\n\"\"\""
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3 1\") == \"1.916666666666666666666666666667\"\n\n\"\"\"\n\n\n\nimport math"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == '1.916666666666666666666666666667'\n"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3 1\") == \"1.916666666666666666666666666667\"\n\"\"\"\n"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 1\") == \"1.916666666666666666666666666667\"\n\"\"\"\nfrom math import factorial"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 3 1') == '1.916666666666666666666666666667'\n\nassert solution('2\\n2 3 1') == '1.6666666666666666666666666667'\nassert solution('2\\n3 1 2') == '0.3333333333333333333333333333'\nassert solution('3\\n2 3 1') == '1.916666666666666666666666666667'\nassert solution('3\\n3 1 2') == '0.3333333333333333333333333333'\n"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 1\") == \"1.916666666666666666666666666667\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0.9047619047619047\""
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 1') == 1.916666666666666666666666666667\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n1 1\\n2 0\\n2 2') == '3'\nassert solution('3\\n0 0\\n1 1\\n2 0') == '1'\nassert solution('1\\n1 1') == '0'"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 1\\n2 2') == '3'\nassert solution('2\\n0 0\\n2 2') == '1'\nassert solution('2\\n1 1\\n2 0') == '0'\nassert solution('3\\n0 0\\n1 1\\n2 0') == '0'\nassert solution('3\\n2 2\\n0 0\\n0 0') == '0'\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == \"3\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"1\"\nassert solution(\"1\\n1 1\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == 3\n\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == 1\n\n\nassert solution(\"1\\n1 1\") == 0\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == \"3\"\n\n\"\"\"\n\nimport sys\n\nn = int(input())\n\npoints = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    points.append([x, y])\n\ntriangle = 0\nfor i in range(n - 2):\n    for j in range(i + 1, n - 1):\n        for k in range(j + 1, n):\n            if abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]) \\\n                    + abs(points[j][0] - points[k][0]) + abs(points[j][1] - points[k][1]) \\\n                    > abs(points[i][0] - points[k][0]) + abs(points[i][1] - points[k][1]):\n                triangle += 1\nprint(triangle)\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == \"3\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"1\"\nassert solution(\"1\\n1 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == '3'\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == '1'\nassert solution(\"1\\n1 1\") == '0'\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 0\\n1 1\\n2 0\\n2 2') == '3'\nassert solution('3\\n0 0\\n1 1\\n2 0') == '1'\nassert solution('1\\n1 1') == '0'\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\\n\") == 3\nassert solution(\"3\\n0 0\\n1 1\\n2 0\\n\") == 1\nassert solution(\"1\\n1 1\\n\") == 0\n"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n2 0\\n2 2\") == \"3\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"1\"\nassert solution(\"1\\n1 1\") == \"0\"\nassert solution(\"1\\n0 0\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n10 7 1 9 10 15') == '26'\nassert solution('1\\n400000') == '400000'\nassert solution('7\\n8 9 26 11 12 29 14') == '55'\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n8 9 26 11 12 29 14\") == \"55\"\nassert solution(\"1\\n400000\") == \"400000\"\nassert solution(\"6\\n10 7 1 9 10 15\") == \"26\""
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 7 1 9 10 15\") == \"26\"\n\"\"\"\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n10 7 1 9 10 15') == '26'\nassert solution('1\\n400000') == '400000'\nassert solution('7\\n8 9 26 11 12 29 14') == '55'\nassert solution('1\\n1') == '1'\nassert solution('1\\n2') == '2'\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n10 7 1 9 10 15\") == \"26\"\nassert solution(\"7\\n8 9 26 11 12 29 14\") == \"55\"\nassert solution(\"1\\n400000\") == \"400000\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n10 7 1 9 10 15\") == \"26\"\nassert solution(\"1\\n400000\") == \"400000\"\nassert solution(\"7\\n8 9 26 11 12 29 14\") == \"55\"\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n10 7 1 9 10 15\") == \"26\"\nassert solution(\"1\\n400000\") == \"400000\"\nassert solution(\"7\\n8 9 26 11 12 29 14\") == \"55\"\n\"\"\"\n\nimport sys\n\nlines = [line.strip() for line in sys.stdin]\nn = int(lines[0])\n\nbeauty = list(map(int, lines[1].split()))\n\ndp = [0 for _ in range(n + 1)]\n\ndp[1] = beauty[0]\n\nfor i in range(2, n + 1):\n    if i < len(beauty):\n        dp[i] = max(dp[i - 1], dp[i - 2] + beauty[i - 1])\n    else:\n        dp[i] = max(dp[i - 1], dp[i - 2] + beauty[i - 1])\n\nprint(dp[n])"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n10 7 1 9 10 15\") == \"26\"\nassert solution(\"1\\n400000\") == \"400000\"\nassert solution(\"7\\n8 9 26 11 12 29 14\") == \"55\"\n\"\"\""
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n10 7 1 9 10 15\") == \"26\"\nassert solution(\"1\\n400000\") == \"400000\"\nassert solution(\"7\\n8 9 26 11 12 29 14\") == \"55\"\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n10 7 1 9 10 15\") == \"26\"\nassert solution(\"1\\n400000\") == \"400000\"\nassert solution(\"7\\n8 9 26 11 12 29 14\") == \"55\"\n"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 1 1 0 0 0 0 0 0 7 0 0 0 0') == '4'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\n\"\"\""
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"0 1 1 0 0 0 0 0 0 7 0 0 0 0\"\n) == 4"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == \"4\"\nassert solution(\"5 1 1 1 1 0 0 0 0 0 0 0 0 0\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 1 1 0 0 0 0 0 7 0 0 0 0 0') == '4'\nassert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\n\n\"\"\""
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == k\na, k = stdin.splitlines()\na = list(map(int, a.split()))\nk = int(k)"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == \"4\"\nassert solution(\"5 1 1 1 1 0 0 0 0 0 0 0 0 0\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == \"4\"\nassert solution(\"5 1 1 1 1 0 0 0 0 0 0 0 0 0\") == \"8\"\n\"\"\""
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\n\"\"\"\n\nimport sys\n\nA = list(map(int, sys.stdin.readline().strip().split(' ')))\n\nN = len(A)\n\n\"\"\"\nScore = score after making a move\nmax_score = max score possible after a move\n\n\"\"\""
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 1 1 1 0 0 0 0 0 0 0 0 0') == '8'\n\"\"\""
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 1 0 0 0 0 0 0 7 0 0 0 0\") == \"4\"\nassert solution(\"5 1 1 1 1 0 0 0 0 0 0 0 0 0\") == \"8\"\n"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == \"10 10\"\nassert solution(\"3 2\") == \"1 1\"\nassert solution(\"6 3\") == \"3 6\""
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n\") == \"10 10\"\nassert solution(\"3 2\\n\") == \"1 1\"\nassert solution(\"6 3\\n\") == \"3 6\"\n"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1') == '10 10'\nassert solution('3 2') == '1 1'\nassert solution('6 3') == '3 6'\n\n\"\"\"\n\n\nfrom collections import defaultdict, Counter"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1') == '10 10'\nassert solution('3 2') == '1 1'\nassert solution('6 3') == '3 6'\n\nprint('Passed!')\n\n\n\n\"\"\""
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1') == '10 10'\n\"\"\"\n"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\") == \"10 10\"\nassert solution(\"3 2\") == \"1 1\"\nassert solution(\"6 3\") == \"3 6\"\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\") == \"10 10\"\nassert solution(\"3 2\") == \"1 1\"\nassert solution(\"6 3\") == \"3 6\"\n"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"1 1\"\nassert solution(\"5 1\") == \"10 10\"\nassert solution(\"6 3\") == \"3 6\"\n"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 1''') == '10 10'\nassert solution('''3 2''') == '1 1'\nassert solution('''6 3''') == '3 6'\n\n-----\nn, m = map(int, stdin.readline().split())"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9555\") == 4\nassert solution(\"1000000000000001223300003342220044555\") == 17\nassert solution(\"800101\") == 1\nassert solution(\"310200\") == 2\nassert solution(\"45\") == 1\n\"\"\"\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == 1\nassert solution('100000000005') == 2\nassert solution('800101') == 3\nassert solution('310200') == 2\nassert solution('45') == 1"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"95\") == 1\nassert solution(\"9999999\") == 1\nassert solution(\"800101\") == 2\nassert solution(\"45\") == 1\nassert solution(\"19992000\") == 1\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9555\") == \"4\"\nassert solution(\"10000000005\") == \"2\"\nassert solution(\"800101\") == \"3\"\nassert solution(\"45\") == \"1\"\nassert solution(\"19992000\") == \"1\"\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9555\") == '4'\nassert solution(\"10000000005\") == '2'\nassert solution(\"800101\") == '3'\nassert solution(\"45\") == '1'\nassert solution(\"1000000000000001223300003342220044555\") == '17'\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9555') == '4'\nassert solution('10000000005') == '2'\nassert solution('800101') == '3'\nassert solution('45') == '1'\nassert solution('19992000') == '1'\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9555\") == 4\nassert solution(\"10000000005\") == 2\nassert solution(\"800101\") == 3\nassert solution(\"45\") == 1\nassert solution(\"1000000000000001223300003342220044555\") == 17"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9555\") == \"4\"\nassert solution(\"10000000005\") == \"2\"\nassert solution(\"800101\") == \"3\"\nassert solution(\"45\") == \"1\"\nassert solution(\"19992000\") == \"1\"\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9555\") == '4'\nassert solution(\"10000000005\") == '2'\nassert solution(\"800101\") == '3'\nassert solution(\"45\") == '1'\nassert solution(\"19992000\") == '1'\n"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9555\") == \"4\"\nassert solution(\"10000000005\") == \"2\"\nassert solution(\"800101\") == \"3\"\nassert solution(\"45\") == \"1\"\nassert solution(\"19992000\") == \"1\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 13 2\") == \"<< 1 2 3 >>\"\nassert solution(\"13 14 3\") == \"<< 1 2 3 4 5 >>\"\nassert solution(\"6 9 5\") == \"<< 1 2 3 >>\"\nassert solution(\"4 5 6\") == \"<< 1 2 3 4 >>\"\nassert solution(\"7 8 9 10 11 12\") == \"<< 1 2 3 4 5 6 7 8 9 >>\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 6 3') == '<< 3 4 5 (6) 7 8 9'\nassert solution('10 6 3') == '<< 3 4 5 (6) 7 8 9 >>'\nassert solution('8 5 4') == '1 2 3 4 (5) 6 7 8'\n\"\"\""
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n7 6 3\n\"\"\"\n    ) == \"\"\"<< 3 4 (5) 6 7 >>\"\"\"\n\nassert solution(\n\"\"\"\n7 6 3\n\"\"\"\n    ) == \"\"\"<< 3 4 (5) 6 7 >>\"\"\"\n\nassert solution(\n\"\"\"\n7 6 3\n\"\"\"\n    ) == \"\"\"<< 3 4 (5) 6 7 >>\"\"\"\n\nassert solution(\n\"\"\"\n6 1 2\n\"\"\"\n    ) == \"\"\"<< 3 4 (5) 6 >>\"\"\"\n\nassert solution(\n\"\"\"\n6 2 2\n\"\"\"\n    ) == \"\"\"<< 1 2 >>\"\"\""
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('17 5 2') == '<< 3 4 (5) 6 7 >>'\nassert solution('6 5 2') == '<< 3 4 (5) 6 >>'\nassert solution('6 1 2') == '(1) 2 3 >>'\nassert solution('6 2 2') == '1 (2) 3 4 >>'\nassert solution('8 5 4') == '1 2 3 4 (5) 6 7 8'\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 5 4\\n6 1 2\\n6 2 2\\n9 6 3\\n10 6 3') == '<< 3 4 5 (6) 7 8 9\\n'\n\n\"\"\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('17 5 2') == '<< 3 4 (5) 6 7 >>'\nassert solution('6 5 2') == '<< 3 4 (5) 6 >>'\nassert solution('6 1 2') == '(1) 2 3 >>'\nassert solution('6 2 2') == '1 (2) 3 4 >>'\nassert solution('9 6 3') == '<< 3 4 5 (6) 7 8 9'\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 5 2') == '<< 3 4 (5) 6 7 >>'\nassert solution('6 1 2') == '<< 3 4 (5) 6 >>'\nassert solution('6 2 2') == '<< 1 2 3 >>'\nassert solution('9 6 3') == '<< 3 4 5 (6) 7 8 9 >>'\nassert solution('10 6 3') == '<< 3 4 5 (6) 7 8 9 >>'\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 2\") == \"<< 3 4 (5) 6 7 >>\"\nassert solution(\"6 1 2\") == \"<< 3 4 (5) 6 >>\"\nassert solution(\"6 2 2\") == \"1 (2) 3 4 >>\"\nassert solution(\"9 6 3\") == \"<< 3 4 5 (6) 7 8 9\"\nassert solution(\"10 6 3\") == \"<< 3 4 5 (6) 7 8 9 >>\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 6 3') == '<< 3 4 5 (6) 7 8 9'\nassert solution('10 6 3') == '<< 3 4 5 (6) 7 8 9'\nassert solution('8 5 4') == '1 2 3 4 (5) 6 7 8'\n"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin='6 5 2') == '<< 3 4 (5) 6 >>'\nassert solution(stdin='6 1 2') == '(1) 2 3 >>'\nassert solution(stdin='6 2 2') == '1 (2) 3 >>'\nassert solution(stdin='9 6 3') == '<< 3 4 5 (6) 7 8 9 >>'\nassert solution(stdin='10 6 3') == '<< 3 4 5 (6) 7 8 9 >>'\n"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\nassert solution('foo bar') == 'foo bar'\nassert solution('foo\\nbar') == 'foo\\nbar'\nassert solution('foo bar\\n') == 'foo bar\\n'\n\n-----Tests-----\nimport sys\nimport unittest\nclass Test_Solution(unittest.TestCase):\n    def test_solution(self):\n        pass"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 5 1\") == \" / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution([\"3\", \"1\", \"2\", \"5\", \"1\"]) == \\\n
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2 5 1') == '/ \\\\ \\\\\\\\ / / \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ / \\\\'\nassert solution('3 1 2 5 1') == '\\\\ / \\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ / \\\\'\nassert solution('7 1 5 3 1') =='\\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ / '\nassert solution('1 5 1') == '\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ \\\\\\\\ / '\n\nprint(solution(stdin.readline().split()))\n\n-----Test case-----\n\nInput:\n6\n2 1 2 3 4 5\n\nOutput:\n      / \\     \n   / \\ /   \\    \n  / \\ / \\ /  \\    \n / \\ / \\ / \\ / \\    \n/   / \\ / \\ / \\ / \\    \n \\ / \\ / \\ / \\ / \\ /\n  \\ / \\ / \\ / \\ / \\\n   \\ / \\ / \\ / \\ / \\\n    \\ / \\ / \\ / \\ /\n     \\ / \\ / \\ / \\\n\n\"\"\"\n"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2 5 1\") == \"\"\"/ \\\n  / \\     \n / \\ /   \n/       \\ \n\\\\ /         \\\n  \\\\ /         \\\n   \\ /         \\\n     \\\\ /         \\\n      \\\\ /         \\\n       \\\\ /         \\\n        \\\\         \\\n          \\\\   \n           \\\\   \n            \\\\  \n             \\\\ \n              \\\\ /\n               / \\\\\n              /   \\\\\n             /     \\\\\n            /       \\\\\n           /         \\\\\n          /           \\\\\n         /             \\\\\n        /               \\\\\n       /                 \\\\\n      /                   \\\\\n     /                     \\\\\n    /                        \\\\\n    /                         \\\\\n    /                           \\\\\n    /                             \\\\\n    /\"\"\"\n"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2 5 1\") == \"     / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / "
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 2 5 1\\n') == '      / \\     \n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2 5 1\\n') == \"\"\" / \\     \n  \\    \n   \\   \n    \\  \n     \\ /\n     \\\n     /\"\"\"\nassert solution('1 5 1\\n') == \"\"\" /\n \\\n  \\\n   \\   \n    \\  \n     \\ /\n     \\\n     /\"\"\"\nassert solution('1\\n') == \"\"\" /\n \\\n  \\\n   \\   \n    \\  \n     \\ /\n     \\\n     /\"\"\"\nassert solution('2 2\\n') == \"\"\" \\\n /\n \\\n /\n /\n \\\n /\"\"\"\n"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2 5 1\") == '''      / \\\n   / \\ /   \\    \n  /       \\   \n /         \\  \n          \\ / \n'''\n\"\"\""
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1000000000 1 999999999\") == '1\\n999999998'\nassert solution(\"4 3\\n2 3 5 6\") == '2\\n3 4'\nassert solution(\"4 3\\n9 1 1 1\") == '0'\nassert solution(\"4 3\\n9 1 1 1\") == '0'\n\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n3 4 5') == '1\\n3'\nassert solution('4 3\\n2 3 5 6') == '2\\n3 4'\n\na, p = map(int, stdin.split(' '))\n\nans = 0\np = prime(p)\n\nfor i in range(a):\n    if f(i) % p:\n        ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '3 2\\n3 4 5'\n) == '1\\n3\\n'\nassert solution(\n    '4 3\\n9 1 1 1'\n) == '0\\n'\nassert solution(\n    '4 3\\n1 1 1 1'\n) == '2\\n3 4\\n'\nassert solution(\n    '4 3\\n1 1000000000 1'\n) == '0\\n'\nassert solution(\n    '4 3\\n999999999 1 1'\n) == '1\\n999999998\\n'\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"1\\n3\\n4\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\"\nassert solution(\"4 3\\n1 2 3 4\") == \"2\\n3\\n4\"\nassert solution(\"3 2\\n1 1000000000 1 999999999\") == \"1\\n999999998\"\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 3 5 6\") == \"2\\n3 4\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\"\n\"\"\"\n\nimport sys\nimport math\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 3 5\\n\") == \"1\\n3\"\n\nassert solution(\"4 3\\n9 1 1 1\\n\") == \"0\\n\"\n\nassert solution(\"3 2\\n1000000000 1 999999999\\n\") == \"1\\n999999998\"\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3 1\") == \"2\\n3\\n4\\n\"\n\n------\n\n'''\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1000000000 1 999999999\") == \"1\\n999999998\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\"\nassert solution(\"3 2\\n1 1000000000 1 999999999\") == \"1\\n999999998\"\nassert solution(\"4 3\\n9 1 1 1\") == \"0\"\n\n\n\n-----Problem-----\n\nAoi is writing a poem using English alphabet, but at the beginning he forgot to put a space between each letter of the text. He asked his friend Gao to help him to fix the mistakes.\n\nGao said that he could put a space between the letters in the following way:\n\nIf two letters can be arranged in order, then we can put a space between them.\n\nGao knows that if the letters $A$ and $B$ can be arranged in order then one of them must be less than or equal to $A$ and one of them must be less than or equal to $B$. He gives you a poem in English language, and you should help him fix the mistakes.\n\nFirst line of input contains a number of lines, $n \\ge 1$. The next $n$ lines contain the text of the poem.\n\nAfter that, there are $n$ lines, each contains one word. Each word contains only letters from English alphabet.\n\nOutput the text, containing the new spaces.\n\nInput\n\n3\n\ncodewars\n\nacademy\n\nadvert\n\n2\n\ncccc\n\naaccc\n\n4\n\ncodewars\n\nacademy\n\nadvert\n\ncodewars\n\naaccc\n\n4\n\ncodewars\n\nacademy\n\nadvert\n\ncodewars\n\naaccc\n\nOutput\n\ncodewars\n\nacademy\n\nadvert\n\ncodewars\n\nacademy\n\nadvert\n\ncodewars\n\naaccc\n\n\n-----Solution-----\n\n\nimport sys"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1000000000 1 999999999\") == \"1\\n999999998\"\n"
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n3 4 5') == '1\\n3'\nassert solution('4 3\\n2 3 5 6') == '2\\n3 4'\nassert solution('4 3\\n9 1 1 1') == '0'\nassert solution('4 3\\n9 1 1 1') == '0'\nassert solution('4 3\\n9 1 1 1') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 8\") == \"3\"\n\n---"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 8') == '3'\n\"\"\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n') == '3'\nassert solution('6 8\\n') == '3'\nassert solution('5 3\\n') == '1'\nassert solution('6 10\\n') == '1'\nassert solution('10 7\\n') == '0'\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 8\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 8') == '3'\n\"\"\""
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 8') == '3'\n\"\"\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 8\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"6 8\") == \"3\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 8') == '3'\n\"\"\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 8') == '3'\n"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == '4'\nassert solution('2 2 2 8') == '19'\nassert solution('3 3 3 8') == '18'\n\nprint('PASSED')\n"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2 8\\n4 6\\n1 5\\n3 8\") == \"19 17 15 14 13 12 10 8\"\n\"\"\""
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 2 8\\n4 6\\n1 5\\n3 8') == '19\\n17\\n15\\n14\\n13\\n12\\n10\\n8'\nprint('Test success.')"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 10\") == \"10\"\nassert solution(\"1 1 1 100\") == \"100\"\nassert solution(\"2 2 2 100\") == \"100\"\nassert solution(\"2 1 1 100\") == \"10\"\nassert solution(\"1 1 1 100\") == \"100\"\n"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2 8\\n4 6\\n1 5\\n3 8\") == \"19\\n17\\n15\\n14\\n13\\n12\\n10\\n8\"\n\"\"\"\n\nX, Y, Z, K = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\ncakes = [0] * (X * Y * Z)\nfor x in range(0, X):\n    for y in range(0, Y):\n        for z in range(0, Z):\n            cakes[a[x] + b[y] + c[z]] = x + y + z\n\nfor i in range(K, -1, -1):\n    cakes.sort(reverse=True)\n    print(cakes[i])\n"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2 8\\n4 6\\n1 5\\n3 8\") == '191715141312010'\nprint(\"PASSED\")\n"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2 8\\n4 6\\n1 5\\n3 8\") == \"19171514131210\"\n\"\"\"\n\n\n\"\"\"\n\u78ba\u304b\u306b\u89e3\u3051\u305f\u3089\u96e3\u3057\u304f\u306a\u304b\u3063\u305f\n\u7d50\u5c40\u89e3\u8aac\u3092\u307f\u308b\u3053\u3068\u304c\u591a\u3044\n\"\"\""
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 2 8\\n4 6\\n1 5\\n3 8') == '19 17 15 14 13 12 10 8'\n\"\"\"\n\nimport sys\nimport math\n\nX, Y, Z, K = list(map(int, sys.stdin.readline().strip().split(' ')))\nA = list(map(int, sys.stdin.readline().strip().split(' ')))\nB = list(map(int, sys.stdin.readline().strip().split(' ')))\nC = list(map(int, sys.stdin.readline().strip().split(' ')))\n\nA.sort(reverse=True)\nB.sort(reverse=True)\nC.sort(reverse=True)\n\nm = [A, B, C]"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2 8\\n4 6\\n1 5\\n3 8\") == \"19\\n17\\n15\\n14\\n13\\n12\\n10\\n8\"\n"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 4 2') == '14 13 12 10 8'\n\"\"\"\n\nimport sys\n\n_, x, y, z, k = [int(i) for i in sys.stdin.readline().split()]\n\ncount_ways = [0 for i in range(k + 1)]\n\nfor a in range(1, x + 1):\n    for b in range(1, y + 1):\n        for c in range(1, z + 1):\n            ways = a * b * c\n            for i in range(1, k + 1):\n                if i >= ways:\n                    count_ways[i] += count_ways[i - ways]\n                else:\n                    count_ways[i] += 1\n\nfor i in range(1, k + 1):\n    print(count_ways[i])\n"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"15 17\") == \"1\"\nassert solution(\"10 100\") == \"4\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12 18') == '3'\n\"\"\"\n"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 18\") == \"3\"\n\"\"\"\n\nA, B = stdin.split()\nA, B = int(A), int(B)\nc = 1\nfor i in range(2, min(A, B) + 1):\n    while A % i == 0 and B % i == 0:\n        A /= i\n        B /= i\n        c += 1\nprint(c)\n"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 18') == '3'\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 18') == '3'\nassert solution('21 144') == '0'\n\"\"\""
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 18\") == \"3\"\n\"\"\"\n\nA, B = [int(i) for i in stdin.split(\" \")]"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 18\") == \"3\"\n"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 18\") == \"3\"\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 18\") == \"3\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 18') == '3'\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def coprime_num_counter(self, number):\n        for i in range(2, int(number**0.5)+1):\n            if number % i == 0:\n                for j in range(2, int(number**0.5)+1):\n                    if i*j == number:\n                        return 0\n                return 1\n        return 1\n    \n    def solution(self, stdin: str) -> str:\n        A, B = [int(x) for x in stdin.split(' ')]\n        divisor_count = 0\n        for i in range(2, int(A**0.5)+1):\n            if A % i == 0 and B % i == 0:\n                divisor_count += 1\n        for i in range(2, int(B**0.5)+1):\n            if A % i == 0 and B % i == 0:\n                divisor_count += 1\n        divisor_count += self.coprime_num_counter(A)\n        divisor_count += self.coprime_num_counter(B)\n        return str(divisor_count)\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution().solution\n\n    def test_solution(self):\n        assert self.solution('12 18') == '3'"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RPS') == 'R'\n\nassert solution('RPS' * (1 << 1)) == 'P'\nassert solution('RPS' * (1 << 2)) == 'R'\nassert solution('RPS' * (1 << 3)) == 'P'\n\nassert solution('RPS' * (1 << 3) + 'PPS') == 'R'\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RPS') == 'P'\nassert solution('RPSP') == 'R'\nassert solution('RPSRPSRPS') == 'S'\nassert solution('RPSRPSRPSS') == 'P'\nassert solution('RPSRPSRPSS') == 'P'"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2\nRPS''') == 'P'\nassert solution('''1 1\nRPS''') == 'R'\nassert solution('''2 2\nRPS''') == 'P'\nassert solution('''1 1\nRPS''') == 'R'\nassert solution('''3 2\nRRR''') == 'R'\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RPS\") == 'P'\nassert solution(\"RPS\" + \"RPS\" + \"RPS\") == 'R'\nassert solution(\"RPS\" + \"RPS\" + \"RPS\" + \"RPS\") == 'P'\n\nassert solution(\"RPS\" + \"RPS\" + \"RPS\" + \"RPS\" + \"RPS\") == 'S'\nassert solution(\"RPS\" + \"RPS\" + \"RPS\" + \"RPS\" + \"RPS\" + \"RPS\") == 'R'\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RPS\") == \"P\"\nassert solution(\"RPSLS\") == \"R\"\nassert solution(\"RPSLLS\") == \"R\"\nassert solution(\"RPSLLSL\") == \"S\"\nassert solution(\"RPSLLSLS\") == \"S\"\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'R'\nassert solution('RR') == 'R'\nassert solution('PS') == 'P'\nassert solution('RPS') == 'R'\nassert solution('RPSRPSRPS') == 'S'\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 2\\nRPS\"\n) == \"P\"\n\nassert solution(\n    \"3 2\\nPPP\"\n) == \"R\"\n\nassert solution(\n    \"3 2\\nSSP\"\n) == \"S\"\n\nassert solution(\n    \"3 2\\nRPS\"\n) == \"P\"\n\nassert solution(\n    \"3 2\\nPPP\"\n) == \"R\""
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RPS') == 'P'\nassert solution('SPS') == 'R'\nassert solution('SPR') == 'S'\nassert solution('RPSR') == 'R'\n\nassert solution('SPSS') == 'S'\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\nRPS\n''') == \"P\"\nassert solution('''\n3 2\nRPS\n''') == \"P\"\nassert solution('''\n3 2\nRPS\n''') == \"P\"\n"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RPS\") == \"R\"\nassert solution(\"RPSRPSRPS\") == \"R\"\nassert solution(\"RPSRPSRPSRPS\") == \"R\""
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 4 2\") == \"20\"\n\"\"\"\nimport sys"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 3 4 2') == '20'\nassert solution('2 2 4 4') == '8'\nassert solution('8 6 4 1 3') == '26'\n\"\"\"\n\nimport collections\nimport itertools\nimport sys"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 4 2\") == \"20\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 4 2\") == 20\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\nThe naive approach is to enumerate all possible subsets of length N of the array and compute the happiness points of the subset.\nA better solution is to use dynamic programming.\n\nFor each child, we can choose to go to the left or to the right.\nIf we choose to go to the left, the child will move to the leftmost position in the array, and the happiness points for the current child will be A_i + h(0, i).\nIf we choose to go to the right, the child will move to the rightmost position in the array, and the happiness points for the current child will be A_i + h(i, N).\nWe can store the maximum happiness points for each child by storing the max of the two possible choices for each child.\nThe maximum happiness points for a set of children is the maximum happiness points for each child, plus the maximum happiness points of the set minus the happiness points of the child.\n\nclass Solution:\n    def max_happiness(self, A: list) -> int:\n        # Time Complexity: O(N^2)\n        # Space Complexity: O(N)\n        n = len(A)\n        H = [[0] * n for _ in range(n)]\n        for d in range(n):\n            for i in range(n - d):\n                j = i + d\n                H[i][j] = H[i + 1][j] + A[i] * A[i + 1] * (n - j - 1)\n                for k in range(i, j):\n                    H[i][j] = max(H[i][j], H[i][k] + H[k + 1][j] + A[i] * A[k + 1] * (j - k - 1))\n        return H[0][n - 1]\n\nassert Solution().max_happiness([1, 3, 4, 2]) == 20\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\nThe naive approach is to enumerate all possible subsets of length N of the array and compute the happiness points of the subset.\nA better solution is to use dynamic programming.\n\nFor each child, we can choose to go to the left or to the right.\nIf we choose to go to the left, the child will move to the leftmost position in the array, and the happiness points for the current child will be A_i + h(0, i).\nIf we choose to go to the right, the child will move to the rightmost position in the array, and the happiness points for the current child will be A_i + h(i, N).\nWe can store the maximum happiness points for each child by storing the max of the two possible choices for each child.\nThe maximum happiness points for a set of children is the maximum happiness points for each child, plus the maximum happiness points of the set minus the happiness points of the child.\n\nclass Solution:\n    def max_happiness(self, A: list) -> int:\n        # Time Complexity: O(N^2)\n        # Space Complexity: O(N)\n        n = len(A)\n        H = [0] * n\n        for d in range(n):\n            for i in range(n - d):\n                j = i + d\n                H[i] = max(H[i], H[i + 1] + A[i] * A[i + 1] * (n - j - 1))\n                for k in range(i, j):\n                    H[i] = max(H[i], H[i] + H[k + 1] + A[i] * A[k + 1] * (j - k - 1))\n        return H[0]\n\nassert Solution().max_happiness([1, 3, 4, 2]) == 20\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\nThe naive approach is to enumerate all possible subsets of length N of the array and compute the happiness points of the subset.\nA better solution is to use dynamic programming.\n\nFor each child, we can choose to go to the left or to the right.\nIf we choose to go to the left, the child will move to the leftmost position in the array, and the happiness points for the current child will be A_i + h(0, i).\nIf we choose to go to the right, the child will move to the rightmost position in the array, and the happiness points for the current child will be A_i + h(i, N).\nWe can store the maximum happiness points for each child by storing the max of the two possible choices for each child.\nThe maximum happiness points for a set of children is the maximum happiness points for each child, plus the maximum happiness points of the set minus the happiness points of the child.\n\nclass Solution:\n    def max_happiness(self, A: list) -> int:\n        # Time Complexity: O(N^2)\n        # Space Complexity: O(N)\n        n = len(A)\n        H = [0] * n\n        for d in range(n):\n            for i in range(n - d):\n                j = i + d\n                H[i] = max(H[i], H[i + 1] + A[i] * A[i + 1] * (n - j - 1))\n                for k in range(i, j):\n                    H[i] = max(H[i], H[i] + H[k + 1] + A[i] * A[k + 1] * (j - k - 1))\n        return H[0]\n\nassert Solution().max_happiness([1, 3, 4, 2]) == 20\n\"\"\""
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n1 3 4 2''') == 20\nassert solution('''4\n2 4 1 3''') == 0\nassert solution('''4\n3 4 2 1''') == 20\nassert solution('''3\n2 1 3''') == 6\nassert solution('''3\n3 1 2''') == 2\n"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 4 2\") == 20\nprint('test passed')\n"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 2\") == \"13\"\nassert solution(\"4 3 2 1\") == \"23\"\nassert solution(\"4 3 2 2\") == \"22\"\n\"\"\"\n\nfrom math import gcd\nfrom collections import Counter"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 4 2') == '20'\n\"\"\"\nimport sys"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 4 2\") == 20\n"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 4 2\") == 20\n\"\"\"\n\nN = int(input())\nA = [int(i) for i in input().split()]\n\nhappiness = 0\n\nfor i in range(N):\n    for j in range(i+1, N):\n        happiness += abs(A[i] - A[j])\n\nprint(happiness)\n"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 5\n''') == '5'"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"5\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\n\na, b = map(int, sys.stdin.readline().split())\n"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test1) == 5\nassert solution(test2) == 15\n\"\"\"\n"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == '5'\n\"\"\""
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\") == \"5\""
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == \"5\"\n\"\"\"\n\nimport sys\n\nnums = [int(i) for i in sys.stdin.readline().split()]\n\nnum = nums[0] ^ nums[1]\nprint(num)\n"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 4''') == '5'\n\"\"\""
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"5\"\n\"\"\"\n\n\"\"\"\n\"B\"\n\"A\"\n\"C\"\n\"D\"\n\"E\"\n\"F\"\n\"G\"\n\"H\"\n\"I\"\n\"J\"\n\"K\"\n\"L\"\n\"M\"\n\"N\"\n\"O\"\n\"P\"\n\"Q\"\n\"R\"\n\"S\"\n\"T\"\n\"U\"\n\"V\"\n\"W\"\n\"X\"\n\"Y\"\n\"Z\"\n\"a\"\n\"b\"\n\"c\"\n\"d\"\n\"e\"\n\"f\"\n\"g\"\n\"h\"\n\"i\"\n\"j\"\n\"k\"\n\"l\"\n\"m\"\n\"n\"\n\"o\"\n\"p\"\n\"q\"\n\"r\"\n\"s\"\n\"t\"\n\"u\"\n\"v\"\n\"w\"\n\"x\"\n\"y\"\n\"z\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4') == '5'\nprint(solution(stdin.strip()))"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\\n\") == \"3\\n2\\n4\\n\"\n\n\"\"\""
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 1') == '3'\nassert solution('1 3 1') == '2'\nassert solution('2 4 1') == '2'\nassert solution('3 5 1') == '4'\n"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n''') == '3\\n2\\n4\\n'\n\nassert solution('''\n5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n''') == '3\\n2\\n4\\n'\n\nassert solution('''\n4\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n''') == '2\\n1\\n2\\n'\n\nassert solution('''\n5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n''') == '3\\n2\\n4\\n'\n\nassert solution('''\n5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n''') == '2\\n1\\n2\\n'"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\") == \"3\\n2\\n4\\n\"\nassert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\") == \"3\\n2\\n4\\n\"\nassert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\") == \"2\\n4\\n\"\n\n\"\"\"\n\n\"\"\"\n\u9898\u76ee\u5927\u610f\uff1a\n\u7ed9\u5b9a\u4e00\u4e2a\u6709N\u4e2a\u9876\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u9876\u70b9\u6709a,b,c\u4e09\u4e2a\u5c5e\u6027\uff0c\u5176\u4e2da\uff0cb\u662f\u4e24\u4e2a\u9876\u70b9\u7684\u8fb9\uff0cc\u662f\u4e24\u4e2a\u9876\u70b9\u95f4\u7684\u8fb9\u3002\n\n\u7ed9\u5b9a\u6709Q\u4e2a\u67e5\u8be2\uff0c\u6bcf\u4e2a\u67e5\u8be2\u6709\u4e24\u4e2a\u503c\uff1a\n\n1\uff0c\u8981\u4ece\u9876\u70b9x\u67e5\u8be2y\uff0c\u67e5\u8be2\u7684\u8def\u5f84\u7684\u6700\u77ed\u957f\u5ea6\n\n2\uff0c\u8981\u4ece\u9876\u70b9x\u67e5\u8be2y\uff0c\u67e5\u8be2\u7684\u8def\u5f84\u7684\u6700\u77ed\u957f\u5ea6\n\n\u672c\u9898\u8981\u6c42\u7ed9\u51faQ\u4e2a\u67e5\u8be2\uff0c\u6bcf\u4e2a\u67e5\u8be2\u6709\u4e24\u4e2a\u503c\uff1a\n\n1\uff0c\u8981\u4ece\u9876\u70b9x\u67e5\u8be2y\uff0c\u67e5\u8be2\u7684\u8def\u5f84\u7684\u6700\u77ed\u957f\u5ea6\n\n2\uff0c\u8981\u4ece\u9876\u70b9x\u67e5\u8be2y\uff0c\u67e5\u8be2\u7684\u8def\u5f84\u7684\u6700\u77ed\u957f\u5ea6\n\n\u672c\u9898\u8981\u6c42\u7ed9\u51faQ\u4e2a\u67e5\u8be2\uff0c\u6bcf\u4e2a\u67e5\u8be2\u6709\u4e24\u4e2a\u503c\uff1a\n\n1\uff0c\u8981\u4ece\u9876\u70b9x\u67e5\u8be2y\uff0c\u67e5\u8be2\u7684\u8def\u5f84\u7684\u6700\u77ed\u957f\u5ea6\n\n2\uff0c\u8981\u4ece\u9876\u70b9x\u67e5\u8be2y\uff0c\u67e5\u8be2\u7684\u8def\u5f84\u7684\u6700\u77ed\u957f\u5ea6\n\n-----Constraints-----\n3\u2264N\u226410^5 \n1\u2264a_i,b_i\u2264N (1\u2264i\u2264N-1) \n1\u2264c_i\u226410^9 (1\u2264i\u2264N-1) \nThe given graph is a tree.\n1\u2264Q\u226410^5 \n1\u2264K\u2264N \n1\u2264x_j,y_j\u2264N (1\u2264j\u2264Q) \nx_j\u2260y_j (1\u2264j\u2264Q) \nx_j\u2260K,y_j\u2260K (1\u2264j\u2264Q)\n-----Input-----\nInput is given from Standard Input in the following format:  \nN  \na_1 b_1 c_1  \n:  \na_{N-1} b_{N-1} c_{N-1}\nQ K\nx_1 y_1\n:  \nx_{Q} y_{Q}\n\n-----Output-----\nPrint the responses to the queries in Q lines.\n\nIn the j-th line j(1\u2264j\u2264Q), print the response to the j-th query.\n\n-----Sample Input-----\n5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n\n-----Sample Output-----\n3\n2\n4\n\nThe shortest paths for the three queries are as follows:\n - Query 1: Vertex 2 \u2192 Vertex 1 \u2192 Vertex 2 \u2192 Vertex 4 : Length 1+1+1=3 \n - Query 2: Vertex 2 \u2192 Vertex 1 \u2192 Vertex 3 : Length 1+1=2 \n - Query 3: Vertex 4 \u2192 Vertex 2 \u2192 Vertex 1 \u2192 Vertex 3 \u2192 Vertex 5 : Length 1+1+1+1=4\n"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\") == \"3\\n2\\n4\\n\"\n\"\"\""
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5') == '3\\n2\\n4\\n'\nassert solution('5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5') == '3\\n2\\n4\\n'\nassert solution('5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5') == '3\\n2\\n4\\n'\nassert solution('5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5') == '3\\n2\\n4\\n'\nassert solution('5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5') == '3\\n2\\n4\\n'\n"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5''') == '''3\n2\n4\n'''\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\") == \"3\\n2\\n4\\n\""
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\") == '3\\n2\\n4\\n'\n\n\"\"\""
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 1\\n1 3 1\\n2 4 1\\n3 5 1\\n3 1\\n2 4\\n2 3\\n4 5\\n\") == \"3\\n2\\n4\\n\"\n"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcdef') == 'abd'\nassert solution('abcde') == 'abcd'\nassert solution('abcdef') == 'abcd'\nassert solution('abcdef') == 'abcd'\nassert solution('abcd') == 'abcd'\n"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"icefox\") == \"ice\"\n\"\"\""
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"icefox\") == \"ice\"\n\n------------\n\nGiven is a string S of length N consisting of lowercase English letters. Snuke can do this operation any number of times: remove fox occurring as a substring from s and concatenate the remaining parts of s.\nWhat is the minimum possible length of s after some number of operations by Snuke?\n\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^{5}\n - s is a string of length N consisting of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\ns\n\n-----Print-----\nPrint the minimum possible length of s after some number of operations by Snuke.\n\n-----Sample Input-----\n6\nicefox\n\n-----Sample Output-----\n3\n\n - By removing the fox at the end of icefox, we can turn s into ice.\n"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('icefox') == 'ice'\nassert solution('snuke') == 'kuse'\nassert solution('rhythms') == 'hths'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"icefox\") == \"ic\"\n\n\"\"\""
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('icefox') == 'ice'\nassert solution('abcdef') == 'abcd'\nassert solution('abcdefghij') == 'abcdefghi'\nassert solution('abcdefghijk') == 'abcdefghij'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('icefox') == 'ice'\nassert solution('bbbb') == ''\n\"\"\""
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('icefox') == 'ice'\n\"\"\"\n"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"icefox\") == 3\n\n\"\"\""
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"icefox\") == \"ice\"\n\"\"\""
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"314159\") == \"NO\"\nassert solution(\"10001\") == \"YES\"\nassert solution(\"101110\") == \"NO\"\nassert solution(\"11101010\") == \"YES\"\nassert solution(\"11111101101101110\") == \"YES\"\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"314159\") == \"YES\"\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('314159') == 'YES'\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_cases[0]) == test_cases[1]\n\"\"\"\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('314159') == 'NO'\nassert solution('31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679') == 'YES'\n\nassert solution('31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679') == 'YES'\n\n\"\"\"\n\n\nimport sys\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n\nclass Polygon:\n    def __init__(self, n):\n        self.n = n\n        self.points = []\n\n    def add_point(self, point):\n        self.points.append(point)\n\n    def remove_point(self):\n        self.points.pop()\n\n    def get_edges(self, edge_points):\n        edges = []\n        edges.append(self.points[0])\n        edges.append(self.points[self.n - 1])\n        return edges\n\n\nclass Graph:\n    def __init__(self, vertices, edges):\n        self.vertices = vertices\n        self.edges = edges\n        self.num_vertices = len(vertices)\n        self.adj_list = [set() for _ in range(self.num_vertices)]\n        for start, end in edges:\n            self.adj_list[start].add(end)\n\n    def find_path(self, start, end):\n        queue = [start]\n        visited = [False] * self.num_vertices\n        visited[start] = True\n        while len(queue) > 0:\n            curr = queue.pop(0)\n            if curr == end:\n                return True\n            for neighbor in self.adj_list[curr]:\n                if not visited[neighbor]:\n                    queue.append(neighbor)\n                    visited[neighbor] = True\n\n        return False\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n314159\") == \"YES\"\nassert solution(\"6\\n314159\") == \"NO\"\nassert solution(\"7\\n100000\") == \"YES\"\nassert solution(\"1000\\n100000\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"314159\") == \"NO\""
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"314159\") == \"NO\"\nassert solution(\"414213\") == \"YES\"\nassert solution(\"6174\") == \"YES\"\nassert solution(\"13141592\") == \"YES\"\n\"\"\"\n\nfrom collections import deque\n\nclass Solution:\n    def isCircle(self, s):\n        n = len(s)\n        if n == 1:\n            return False\n        if n == 2:\n            return s[0] == s[1]\n        t = s[0]\n        for i in range(1, n):\n            if s[i]!= t:\n                return False\n        return True\n\n    def getK(self, s):\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return 1\n            else:\n                return 2\n        k = 1\n        q = deque()\n        q.append(0)\n        while q:\n            i = q.popleft()\n            if i + k == len(s):\n                break\n            if self.isCircle(s[i: i + k]):\n                q.append(i + k)\n                k += 1\n        return k\n\n    def solve(self, s):\n        k = self.getK(s)\n        if k == 1:\n            return \"YES\"\n        return \"NO\"\n\nimport sys\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\nsolution = Solution()\n\nT = int(input())\nfor case_id in range(T):\n    n = int(input())\n    s = list(input())\n    ans = solution.solve(s)\n    print(ans)\n\nsys.stdout = sys.__stdout__\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('314159') == 'NO'\n"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('314159') == 'NO'\nassert solution('121000110110110111111') == 'NO'\nassert solution('101101111011011110111') == 'YES'\nassert solution('10111011011110111101') == 'YES'\nassert solution('10111111011111101111') == 'YES'\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 9\\n') == '3'\nassert solution('5 8\\n') == '0'\nassert solution('2 4\\n') == '1'\nassert solution('7 15\\n') == '2'\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 9\") == \"3\"\n\"\"\"\n\nx, y = [int(i) for i in input().split()]"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 9\\n\") == \"3\"\nassert solution(\"5 8\\n\") == \"0\"\nassert solution(\"1 8\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 9\") == \"3\"\nassert solution(\"5 8\") == \"0\"\n\"\"\"\n\n\nfrom math import gcd\nimport functools"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 9\\n\") == \"3\"\nassert solution(\"5 8\\n\") == \"0\"\nassert solution(\"3 2\\n\") == \"0\""
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 9\\n') == '3'\nassert solution('5 8\\n') == '0'\n\n'''\n\nimport math\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 9\\n\") == \"3\"\nassert solution(\"5 8\\n\") == \"0\"\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 9') == 3\nassert solution('5 8') == 0\n"
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 9') == 3\nassert solution('5 8') == 0\n\n\"\"\"\n\n\nfrom math import gcd\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 9 1 -1\") == \"0\"\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 9 1 -1') == '0'\nassert solution('8\\n11 -1 13 19 24 7 17 5') == '12'\nassert solution('8\\n11 -1 13 19 24 7 17 5\\n') == '12'\nassert solution('8\\n11 -1 13 19 24 7 17 5\\n1') == '8'\nassert solution('8\\n11 -1 13 19 24 7 17 5\\n1 1') == '8'\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9 1 -1') == '0'\nassert solution('8 11 13 19 24 7 17 5') == '12'\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nx = []\nx.append(a[0])\nx.append(a[1])\n\ni = 2\nwhile i <= n:\n    if a[i] == -1:\n        x.append(x[-2])\n        i += 1\n    else:\n        x.append(a[i])\n        i += 1\n\nt = 0\nfor i in range(len(x)):\n    t += (i + 1) * x[i]\n\nprint(t)\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 9 1 -1\") == \"0\"\nassert solution(\"8\\n11 -1 13 19 24 7 17 5\") == \"12\"\nassert solution(\"8\\n11 13 19 24 7 17 5\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 9 1 -1') == '0'\nassert solution('8\\n11 -1 13 19 24 7 17 5') == '12'\n\n\n-----Problem-----\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0438\u0437 \u043d\u0435\u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0446\u0438\u0444\u0440. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0446\u0438\u0444\u0440, \u0441\u0443\u043c\u043c\u0430 \u0446\u0438\u0444\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0432\u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443. \u041f\u0430\u0440\u044b \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c\u0441\u044f, \u0442\u043e \u0435\u0441\u0442\u044c \u0434\u0432\u0435 \u0446\u0438\u0444\u0440\u044b \u0441\u0442\u043e\u044f\u0442\u044c \u043d\u0430 \u043c\u0435\u0441\u0442\u0430\u0445 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0430\u0440.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e N, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435. \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 N \u0438 M, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c \u2014 \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0446\u0438\u0444\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 N \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432\u0432\u043e\u0434 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0447\u0438\u0441\u0435\u043b. \u041a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 1 \u0434\u043e 9, \u0447\u0442\u043e \u0438 \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u0446\u0438\u0444\u0440 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u0447\u0438\u0441\u0435\u043b, \u0441\u0443\u043c\u043c\u0430 \u0446\u0438\u0444\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0432\u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 N. \u041f\u0430\u0440\u044b \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c\u0441\u044f, \u0442\u043e \u0435\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0442\u0438\u043f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u0430\u044f. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u0430\u0440 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0430\u0436\u0435\u043d, \u0442\u043e \u0435\u0441\u0442\u044c \u043f\u0430\u0440\u044b 1 \u0438 9, \u043f\u0430\u0440\u0430 2 \u0438 8 \u0438 \u0442.\u0434. \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u0430\u044f \u043f\u0430\u0440\u0430. \u0415\u0441\u043b\u0438 \u043f\u0430\u0440 \u043d\u0435\u0442 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 \"No solution\".\n\n\n-----Code-----"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 9 1 -1\") == \"0\"\nassert solution(\"8\\n11 -1 13 19 24 7 17 5\") == \"12\"\n\n\"\"\"\n\nimport sys\n\nDEBUG = False\ndata = sys.stdin.read()\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 9 1 -1\") == \"0\"\nassert solution(\"8\\n11 -1 13 19 24 7 17 5\") == \"12\"\n\n\"\"\"\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 9 1 -1\") == '0'\nassert solution(\"8 11 -1 13 19 24 7 17 5\") == '12'\n\n\n---\n\n## Recommended: Please solve it on \u201cPRACTICE\u201d first, before moving on to the solution.\n\n### Brute-force solution\n\n> DFS with memorization\n\n### Memoization\n\n> DFS\n\n## Coding\n\n### Brute-force solution\n\n```python3\nclass Solution:\n    def solve(self, stdin):\n        pass"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 9 1 -1\") == '0'\nassert solution(\"8\\n11 -1 13 19 24 7 17 5\") == '12'\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(example_input) == expected_result\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == '2'\nassert solution(\"5\\n1 1 5 1 1\") == '2'\nassert solution(\"5\\n1 1 5 1 1\") == '2'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 5 1 1\") == \"2\"\nassert solution(\"1 1 5 1 1\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"3 3 1\") == \"1\"\nassert solution(\"1 3 1\") == \"1\"\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 5 1 1\") == \"2\"\nassert solution(\"5 5 1 5 1\") == \"1\"\n\n'''"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3\\n1 1 5 1 1') == '2'\nassert solution('1 1 5 1 1\\n1 1 5 1 1') == '2'\nassert solution('1 1 5 1 1\\n2 2 3 4 5') == '2'\nassert solution('2 2 3 4 5') == '1'\nassert solution('1 1 1 1 1\\n2 2 3 4 5') == '2'\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 1 5') == '1'\nassert solution('1 1 5 1 1') == '2'\nassert solution('2 1 3') == '1'\nassert solution('5 1 3 4 1') == '2'\nassert solution('7 1 3 6 1 1') == '2'\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 1\\n') == '1'\nassert solution('2\\n1 1\\n') == '2'\nassert solution('1\\n1\\n') == '2'\nassert solution('2\\n2\\n') == '2'\nassert solution('2\\n1\\n') == '2'\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('5\\n1 1 5 1 1') == '2'\nassert solution('5\\n1 1 1 1 1') == '1'\nassert solution('5\\n1 5 5 1 1') == '1'\nassert solution('5\\n1 1 1 1 5') == '2'\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 1 5 1 1\") == \"2\"\nassert solution(\"5 5 5 5 5\") == \"2\"\nassert solution(\"1 1 5 1 1\") == \"2\"\nassert solution(\"5 5 5 5 5\") == \"2\""
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 5 1 1\") == \"2\"\nassert solution(\"5\\n1 1 5 1 1\") == \"2\"\nassert solution(\"5\\n1 1 5 1 1\") == \"2\"\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == '2'\nassert solution(\"5\\n1 1 5 1 1\") == '2'\nassert solution(\"5\\n1 1 5 1 1\") == '2'\n"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"25\") == \"4\"\nassert solution(\"50\") == \"5\"\nassert solution(\"100\") == \"5\"\nassert solution(\"1000\") == \"10\"\n"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 1\nassert solution('1') == 1\nassert solution('3') == 2\nassert solution('25') == 4\n\n\"\"\""
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"25\") == 4\n\"\"\"\n\nfrom collections import deque\n\nnum = int(input())\n\nqueue = deque()\n\nqueue.append(1)\n\nfor i in range(1, num + 1):\n    queue.append(i + 1)\n\nqueue.popleft()\n\nmax_num = 1\n\nfor i in range(1, num + 1):\n    queue.append(queue[0])\n    queue.popleft()\n    queue.popleft()\n    max_num += i\n\nprint(max_num)\n"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5) == 2\nassert solution(10) == 3\nassert solution(15) == 4\nassert solution(1) == 1\n\"\"\"\nimport math"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"25\") == \"4\"\n\"\"\""
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"4\"\n\"\"\""
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('25') == '4'\nassert solution('5') == '5'\nassert solution('10') == '5'\nassert solution('15') == '5'\n"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_cases[0]) == test_cases[1]\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('25') == '4'\n\"\"\""
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n0 1 7 1 7 10\") == 2\nassert solution(\"3\\n1 1 1\") == -1\nassert solution(\"1\\n0\") == 0\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n0 1 7 1 7 10\") == 2\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1 1\\n') == '-1'\nassert solution('6\\n0 1 7 1 7 10\\n') == '2'\n\n\n\"\"\"\n\n\n\"\"\"\n\u041e\u0442\u0432\u0435\u0442 \u043f\u043e \u0437\u0430\u0434\u0430\u0447\u0435 \u21163:\n\u0414\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 n-\u0443\u044e \u0441\u0442\u0435\u043f\u0435\u043d\u044c 2.\n\nInput:\n4\n\nOutput:\n16\n\n-----\n\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u043d\u0438\u044f \u043f\u043e \u0437\u0430\u0434\u0430\u0447\u0435 \u21163:\n1. \u041d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0435\u0441\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u0442\u0435\u043f\u0435\u043d\u0438.\n\u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 n-\u0443\u044e \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043f\u0440\u0438 n = 1 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u0442\u0432\u0435\u0442\u0430. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c 2^n = 1.\n\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 2^n = 1, \u0442\u043e \u043e\u043d\u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0443 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0431\u0435\u0437 \u0441\u043f\u0438\u0441\u043a\u0430.\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0447\u0438\u0441\u043b\u043e 1.\n\n2. \u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u043f\u0440\u0438 n = 0 \u0432\u0435\u0440\u043d\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e 1.\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 2^0 = 1, \u0442\u043e \u043e\u043d\u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0443 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0431\u0435\u0437 \u0441\u043f\u0438\u0441\u043a\u0430.\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0447\u0438\u0441\u043b\u043e 0.\n\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a, \u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0430\u0441\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0438 \u0446\u0438\u043a\u043b\u043e\u0432.\n\n\u0412\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0440\u0435\u0448\u0430\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0432 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0431\u0435\u0437 \u0441\u043f\u0438\u0441\u043a\u0430, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u043c.\n\u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0442\u044c \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0432 \u0446\u0438\u043a\u043b\u0435 \u0438 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0435\u0435 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e.\n\n3. \u041f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0447\u0438\u0441\u043b\u0430, \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0446\u0438\u043a\u043b \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u043c \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u043e\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f.\n\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0438\u043a\u043b\u0430 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043f\u0440\u043e\u0449\u0435, \u0447\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431.\n\n\u0422\u0440\u0435\u0442\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0440\u0435\u0448\u0430\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0441 \u0441\u0442\u0435\u043f\u0435\u043d\u044c\u044e \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432, \u0431\u0443\u0434\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u043c.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043d\u0430\u043c \u043d\u0430\u0434\u043e \u043d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0442\u043e \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u0435 \u043e\u043f\u044f\u0442\u044c \u0437\u0430 \u0441\u0442\u0435\u043f\u0435\u043d\u044c\u044e, \u0430 \u043e\u0442 \u043d\u0438\u0445 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u043f\u043e\ufffd"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n0 1 7 1 7 10\") == 2\nassert solution(\"3\\n1 1 1\") == -1\nassert solution(\"1\\n0\") == 0\n\"\"\""
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 2 3\\n\") == \"0 2\\n\", \"The first sample test failed.\"\nassert solution(\"5\\n0 1 2 3 4\\n\") == \"-1\\n\", \"The second sample test failed.\""
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 1 2 3 4\\n1 2 0 3 0\\n2 3 0 3 1\\n3 4 0 0 4\\n4 0 1 0 0\") == \"2\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"1\\n0 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n0 1 7 1 7 10\") == 2\nassert solution(\"3\\n1 1 1\") == -1\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n0 1 7 1 7 10\") == 2\nassert solution(\"3\\n1 1 1\") == -1\nassert solution(\"1\\n0\") == 0\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n0 1 7 1 7 10') == '2'\n\n\"\"\""
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n0 1 7 1 7 10\\n') == 2\nassert solution('3\\n1 1 1\\n') == -1\nassert solution('1\\n0\\n') == 0\n"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\") == \"9\"\nassert solution(\"32\") == \"3 10 11\"\n\"\"\""
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9') == '9'\nassert solution('11') == '10 1 1'\nassert solution('15') == '15'\nassert solution('32') == '32'\n\"\"\""
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\") == \"9\"\nassert solution(\"10\") == \"1 1 1 1 1 1 1 1 1\"\nassert solution(\"32\") == \"3 10 11 11\"\n\n---"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\") == \"9\"\nassert solution(\"32\") == \"3 10 11\"\nassert solution(\"1234567890\") == \"1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"10000000001\") == \"1 1 1 1 1 1 1 1 1 1 1 1\"\n\nprint(\"Passed all tests.\")\n"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9') == '1 1 1 1 1 1 1 1 1'\nassert solution('32') == '10 11 11'\n\"\"\""
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9') == '9'\nassert solution('1') == '1'\nassert solution
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\") == \"1 1 1 1 1 1 1 1 1\"\n\"\"\""
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\") == \"9\"\nassert solution(\"32\") == \"3 10 11\"\nassert solution(\"1000\") == \"14 4 4 4 4 4 4 4 4\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"1 2 1\"\n"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1 1 1 1 1\"\nassert solution(\"12\") == \"11 11\"\n\"\"\""
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('101') == '101'\nassert solution('101010') == '101010'\n\nassert solution('10') == '10'\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"LDUR\") == \"4\"\nassert solution(\"LLR\") == \"0\"\n\"\"\""
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RRRUU') == 0\nassert solution('LLRRRR') == 4\n\"\"\""
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"LDUR\") == \"4\"\nassert solution(\"RRRUU\") == \"0\"\nassert solution(\"LLRRRR\") == \"4\"\nprint(\"Well done!\")\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"LDDRUDRD\") == '4'\nassert solution
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('LDUR') == '4'\nassert solution('RRRUU') == '0'\nassert solution('LLRRRR') == '4'\nprint('All tests passed.')\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('LDUR') == '4'\nassert solution('RRRUU') == '0'\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('LDUR') == '4'\nassert solution('RRRUU') == '0'\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LDUR\") == 4\nassert solution(\"LLRUUUDD\") == 4\nassert solution(\"RRRUU\") == 0\nassert solution(\"RRRUUU\") == 3\nassert solution(\"LLRRUU\") == 3\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"LDRL\"\n) == \"4\"\nassert solution(\n    \"LDRRLDRL\"\n) == \"0\"\nassert solution(\n    \"LDDU\"\n) == \"2\"\nassert solution(\n    \"LDLLU\"\n) == \"0\"\nassert solution(\n    \"LDLDRLDRDRUDDRDRDR\"\n) == \"4\"\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('LDUR') == 4\nassert solution('RRRUU') == 0\nassert solution('LLRRRR') == 4"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1110\") == \"2\"\nassert solution(\"10\\n1101\") == \"2\"\nassert solution(\"10\\n1101\\n1011\\n1111\\n1110\") == \"1\"\n\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n1100\\n1110\\n1110\\n1110\") == \"2\"\nassert solution(\"4 2\\n1110\\n1110\\n1110\\n1110\") == \"2\"\nassert solution(\"4 5\\n1100\\n1110\\n1110\\n1110\\n1111\") == \"2\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3\n10011\n11010\n11010\n11010\n11010''') == 2\nassert solution('''5 5\n10011\n11010\n11010\n11010\n11010''') == 2\nassert solution('''5 4\n10011\n11010\n11010\n11010\n11010''') == 2\nassert solution('''5 3\n10011\n11010\n11010\n11010\n11010''') == 1\nassert solution('''5 3\n10011\n11010\n11010\n11010\n11010''') == 1"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1101\\n1111\\n0110\\n1011\\n1111\") == \"2\"\n\"\"\""
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1101\\n1111\\n0110\\n1011\\n1111\") == \"2\"\n"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n10\\n00') == 2\nassert solution('4 1\\n1101\\n1111\\n0110\\n1011\\n1111') == 2\nassert solution('4 5\\n1101\\n1111\\n0110\\n1011\\n1111') == 2\n"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n10\\n00') == '2'\nassert solution('4 1\\n0100\\n1011') == '1'\nassert solution('4 5\\n1101\\n1111\\n0110\\n1011\\n1111') == '2'\n"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1101\\n1111\\n0110\\n1011\\n1111\") == 2\n"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"4 5\"\n) == \"2\"\nassert solution(\n\"4 1\"\n) == \"1\"\nassert solution(\n\"2 2\"\n) == \"1\"\nassert solution(\n\"10\"\n) == \"2\"\nassert solution(\n\"0110\"\n) == \"2\"\n"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n0') == 1\nassert solution('11\\n1111\\n0110\\n1011\\n1111') == 2\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8 6\") == \"Yes\"\nassert solution(\"3 9 3\") == \"Yes\"\nassert solution(\"8 5 20\") == \"No\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 1 10\") == \"No\"\n"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8 6\") == \"Yes\"\nassert solution(\"3 9 3\") == \"Yes\"\nassert solution(\"8 5 20\") == \"No\"\n\nprint(solution(\"8 5 20\"))\n"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8 6\") == 'Yes'\nassert solution(\"3 9 3\") == 'Yes'\nassert solution(\"8 5 20\") == 'No'\nassert solution(\"1 1 1\") == 'Yes'\nassert solution(\"1 1 5\") == 'No'\n"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\nassert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\n"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8 6\") == \"Yes\"\nassert solution(\"3 9 3\") == \"Yes\"\nassert solution(\"8 5 20\") == \"No\"\n\"\"\""
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5,8,6) == \"Yes\"\nassert solution(3,9,3) == \"Yes\"\nassert solution(8,5,20) == \"No\"\n\na = 5\nb = 8\nc = 6\nn = 3\nm = 9\nk = 3\n\nminP = min(a, b)\nminN = min(c, n)"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 9 3\\n8 5 20') == 'No'\nassert solution('5 8 6\\n3 9 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 8 6') == 'Yes'\nassert solution('3 9 3') == 'Yes'\nassert solution('8 5 20') == 'No'\nassert solution('10 1 1') == 'Yes'\nassert solution('1 10 10') == 'No'\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 27\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\") == '3'\nassert solution(\"5\\n16 23 8 15 4\") == '0'\nassert solution(\"3\\n14 15 92\") == '67'\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\") == \"3\"\nassert solution(\"5\\n16 23 8 15 4\") == \"0\"\nassert solution(\"3\\n14 15 92\") == \"67\"\n\n\"\"\""
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28') == '3'\nassert solution('5\\n16 23 8 15 4') == '0'\n\"\"\"\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\") == \"3\"\nassert solution(\"5\\n16 23 8 15 4\") == \"0\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\") == \"3\"\n\"\"\""
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28') == '3'\nassert solution('5\\n16 23 8 15 4') == '0'\nassert solution('3\\n14 15 92') == '67'\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\\n\") == 3\n\"\"\""
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"25\\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\") == \"3\"\nassert solution(\"5\\n16 23 8 15 4\") == \"0\"\nassert solution(\"3\\n14 15 92\") == \"67\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == 1\nassert solution(\"4 2\") == 7\nassert solution(\"5 3\") == 31\nassert solution(\"5 4\") == 76\nassert solution(\"7 2\") == 113\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(4 1) == 1\nassert solution(4 2) == 7\nassert solution(5 3) == 31\nassert solution(5 4) == 76\nassert solution(5 5) == 308\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"4 2\") == \"7\"\nassert solution(\"5 3\") == \"31\"\nassert solution(\"5 4\") == \"76\""
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1') == 1\nassert solution('4 2') == 7\nassert solution('5 3') == 31\nassert solution('5 4') == 76\nprint('test passed')\n\n-----Notes-----\n\nNotice that k < n in the description.\n\nsource: https://leetcode.com/problems/permutations-ii/\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1') == '1'\nassert solution('4 2') == '7'\nassert solution('5 3') == '31'\nassert solution('5 4') == '76'\n\n\"\"\"\nimport sys\nfrom typing import Tuple\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == 1\n\nassert solution(\"4 2\") == 7\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1') == '1'\nassert solution('4 2') == '7'\nassert solution('5 3') == '31'\nassert solution('5 4') == '76'\n\nprint('Test PASSED')"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1') == '1'\nassert solution('4 2') == '7'\nassert solution('5 3') == '31'\nassert solution('5 4') == '76'"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"4 2\") == \"7\"\nassert solution(\"5 3\") == \"31\"\nassert solution(\"5 4\") == \"76\"\n\nprint(solution(\"4 1\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 3\"))\nprint(solution(\"5 4\"))\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1') == '1'\nassert solution('4 2') == '7'\nassert solution('5 3') == '31'\nassert solution('5 4') == '76'\n\"\"\"\nimport sys"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '4'\n\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n\") == \"4\"\nassert solution(\"6\\n\") == \"8\"\nassert solution(\"7\\n\") == \"10\"\nassert solution(\"12\\n\") == \"14\"\n\n\"\"\"\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == 4\nassert solution('4' * 10 ** 2) == 4 * 10 ** 2 - 1\nassert solution('4' * 10 ** 3) == 4 * 10 ** 3 - 1\n\"\"\"\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '4'\nassert solution('8') == '32'\n\"\"\"\nfrom math import inf\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '4'\n\"\"\"\nimport sys\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n\") == \"4\"\nassert solution(\"8\\n\") == \"8\"\nassert solution(\"12\\n\") == \"12\"\nassert solution(\"20\\n\") == \"20\"\nassert solution(\"50\\n\") == \"50\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '4'\nassert solution('5') == '5'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"8\") == \"10\"\nassert solution(\"10000\") == \"100010\"\nassert solution(\"100010\") == \"10\"\nassert solution(\"100100\") == \"100010\"\n\"\"\"\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == 4\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == 4\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint(2**(n-1))\n"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 0\\n0 3\") == \"9\"\nprint(solution(\"2\\n0 0\\n0 3\"))\n"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0 0\\n0 3') == '9'\n'''\n"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2\n0 0\n2 2\n''') == '4'\n\nassert solution('''\n2\n0 0\n0 3\n''') == '9'\n\nassert solution('''\n4\n0 0\n2 2\n1 1\n3 3\n''') == '0'\n\nassert solution('''\n4\n0 0\n2 2\n1 1\n3 3\n''') == '2'\n\nassert solution('''\n4\n0 0\n0 3\n1 1\n3 3\n''') == '6'"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\\\n0 0\\\\n2 2\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n0 0\\n0 3') == '9'\n\"\"\"\nimport collections"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 2 0\\n4 4 -1\") == \"9\"\n\"\"\"\n\nfrom math import sqrt\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0\\n0 3\") == \"9\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '4'\nassert solution('0 0') == '9'\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n'''"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n0 3') == '9'\n\"\"\""
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 2 4') == '4'\nassert solution('8\\n11 12 1 2 13 14 3 4') == '2'\nassert solution('4\\n7 6 5 4') == '1'\n"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n7 6 5 4\") == \"1\"\n\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\n\nassert solution(\"4\\n7 6 5 4\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n7 6 5 4') == '2'\nassert solution('8\\n11 12 1 2 13 14 3 4') == '1'\nassert solution('4\\n7 6 5 4') == '1'\n\"\"\"\n\nfrom math import log2, ceil\n"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6 5 4\") == \"1\"\nassert solution(\"8 11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4 7 6 5 4\") == \"1\"\nassert solution(\"4 6 5 4\") == \"1\"\nassert solution(\"7 6 5 4\") == \"1\"\n"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"4\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4\\n7 6 5 4\") == \"1\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"4\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4\\n7 6 5 4\") == \"1\"\n"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n7 6 5 4') == '1'\nassert solution('8\\n11 12 1 2 13 14 3 4') == '2'\nassert solution('4\\n7 6 5 4') == '1'\n\"\"\""
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 2 4') == '4'\nassert solution('8\\n11 12 1 2 13 14 3 4') == '2'\nassert solution('4\\n7 6 5 4') == '1'\n\n----\n\n1 1 1 2 2 2 2 2 3 3 3 3 4 4 4 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 1 2 2 3 3 3 4 4 4 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 2 2 3 3 3 3 4 4 4 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 3 3 3 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6\n\n0 1 2 3 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6\n\n0 1 2 3 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6\n\n0 1 2 3 4 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"4\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4\\n7 6 5 4\") == \"1\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4\\n7 6 5 4\") == \"1\""
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 2 4\") == \"4\"\nassert solution(\"8\\n11 12 1 2 13 14 3 4\") == \"2\"\nassert solution(\"4\\n7 6 5 4\") == \"1\"\n"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 6 6 6 6 6 6 0 0 0\\n1 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n') == '15.9047592939'\n\"\"\"\n\nfrom collections import deque\nfrom itertools import permutations\n\nINF = float('inf')\n"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 3 0 0 4 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 4 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 4 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 9 0\\n\") == \"33.0476190476\"\n"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 3 0 0 4 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\n\n\"\"\"\n"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"33.04761904754\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"20.25914059230\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"15.90475939965\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"15.90475939965\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"15.90475939965\"\n"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"20.2591405923\"\n\n\"\"\"\n"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0') == '33.0476190476'\n\n\"\"\""
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\n\nassert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"20.2591405923\"\n\nassert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"15.9047592939\"\n\nassert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 3 0 0 4 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 4 0 0 0\\n0 0 3 0 0 0 0 0 0 0\\n0 0 4 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 9 0\") == \"33.0476190476\"\n\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport sys\n\nsys.stdin = open('test_4864.txt', 'r')\nsys.setrecursionlimit(100_000)\n\ninp = []\nfor line in sys.stdin:\n    inp.append([int(i) for i in line.strip().split(' ')])"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"20.2591405923\"\n\"\"\"\n\nfrom math import ceil\nfrom collections import deque, defaultdict"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 6 6 6 6 6 6 0 0 0\\n1 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\n\nassert solution(\"0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n0 6 6 6 6 6 6 0 0 0\\n1 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"20.2591405923\"\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"aacdeee\") == 6\nassert solution(\"az\") == 3\nassert solution(\"a\") == 1\n\n\n-----Test Case-----\nSample Input 1:\n\n4\nabaa\n\nSample Output 1:\n\n6\n\nSample Input 2:\n\n7\naacdeee\n\nSample Output 2:\n\n6\n\nSample Input 3:\n\n2\naz\n\nSample Output 3:\n\n3\n\n'''"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"aacdeee\") == 6\nassert solution(\"az\") == 3\nassert solution(\"aaaaa\") == 0\n\nassert solution(\"aacdeee\") == 6\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaa') == 6\nassert solution('aacdeee') == 6\nassert solution('az') == 3\n\nassert solution('aa') == 0\nassert solution('aaa') == 0\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaa') == 6\nassert solution('aacdeee') == 6\nassert solution('az') == 3\n\"\"\""
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 1\nassert solution('codeforces') == 1\nassert solution('codeforcescodeforces') == 1\nassert solution('codeforcescodeforcescodeforcescodeforces') == 1\nassert solution('codeforcescodeforcescodeforcescodeforcescodeforcescodeforces') == 6\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abaa\") == 6\nassert solution(\"az\") == 3\nassert solution(\"aacdeee\") == 6\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    # @return an integer\n    def solve(self, s):\n        n = len(s)\n        MOD = 10 ** 9 + 7\n        if n < 3:\n            return 0\n        f = [0 for i in range(n)]\n        for i in range(1, n):\n            for j in range(i):\n                if s[i] == s[j]:\n                    if i - j < 2:\n                        f[i] += 1\n                    else:\n                        f[i] += f[j]\n                        f[i] %= MOD\n        return f[-1]\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abaa') == 6\nassert solution('aacdeee') == 6\nassert solution('az') == 3\nassert solution('aa') == 1\n\n\n\"\"\""
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abaa') == 6\nassert solution('aacdeee') == 6\nassert solution('az') == 3\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abaa') == 6\nassert solution('aacdeee') == 6\nassert solution('az') == 3\n\n\"\"\""
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 4\\n1 2 4\\n3 4 4\\n2 8 3\\n3 16 3\\n1 32 2\") == \"63\"\nassert solution(\"1 100000 1\\n1 100000 2\\n1 100000 2\\n4 50000 3\\n3 50000 4\\n4 50000 4\\n3 50000 3\") == \"300000\"\nassert solution(\"1 1000 1\\n2 500 2\\n3 250 3\\n4 125 4\") == \"1000\"\n\nprint(solution(stdin))"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 2 1 3 2 3 4\") == \"5\"\nassert solution(\"1 1000 1 1 1\") == \"1001\"\nassert solution(\"1 2 2 3\") == \"3\"\nassert solution(\"4 2 5 4 2\") == \"7\"\nassert solution(\"1 1 2 2 1 3 2 3 4\") == \"63\"\n\"\"\"\n\nimport sys\nsys.path.append('../')\nimport heapq"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n2 1 4\\n1 2 4\\n3 4 4\\n2 8 3\\n3 16 3\\n1 32 2\") == \"63\"\nassert solution(\"7\\n1 100000 1\\n1 100000 2\\n1 100000 2\\n4 50000 3\\n3 50000 4\\n4 50000 4\\n3 50000 3\") == \"300000\"\nassert solution(\"4\\n1 1000 1\\n2 500 2\\n3 250 3\\n4 125 4\") == \"1000\"\n"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 4\\n1 2 4\\n3 4 4\\n2 8 3\\n3 16 3\\n1 32 2\\n\") == \"63\"\nassert solution(\"1 1000 1\\n1 100000 2\\n1 100000 2\\n4 50000 3\\n3 50000 4\\n4 50000 4\\n3 50000 3\\n\") == \"300000\"\nassert solution(\"1 1000 1\\n2 500 2\\n3 250 3\\n4 125 4\\n\") == \"1000\"\n"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 4\\n1 2 4\\n3 4 4\\n2 8 3\\n3 16 3\\n1 32 2\") == \"63\"\nassert solution(\"1 100000 1\\n1 100000 2\\n1 100000 2\\n4 50000 3\\n3 50000 4\\n4 50000 4\\n3 50000 3\") == \"300000\"\nassert solution(\"1 1000 1\\n2 500 2\\n3 250 3\\n4 125 4\") == \"1000\"\n\n\"\"\"\n\n\"\"\"\nSOLUTION\n\"\"\"\n"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 4\\n1 2 4\\n3 4 4\\n2 8 3\\n3 16 3\\n1 32 2\\n\") == \"63\"\nassert solution(\"1 1000 1\\n1 100000 2\\n1 100000 2\\n4 50000 3\\n3 50000 4\\n4 50000 4\\n3 50000 3\\n\") == \"300000\"\nassert solution(\"1 1000 1\\n1 100000 2\\n1 100000 2\\n4 50000 3\\n3 50000 4\\n4 50000 4\\n3 50000 3\\n\") == \"1000\"\nassert solution(\"4 50000 4\\n3 50000 4\\n4 50000 4\\n3 50000 3\\n\") == \"500000\"\nassert solution(\"4 50000 4\\n3 50000 4\\n4 50000 4\\n3 50000 3\\n\") == \"500000\"\n\nimport math\n\nclass Blocks(object):\n    def __init__(self, input):\n        self.n = int(input)\n        self.sequence = []\n\n    def input(self):\n        self.sequence = []\n        for i in range(self.n):\n            self.sequence.append([int(i) for i in input().split(' ')])\n\n    def answer(self):\n        self.sequence.sort()\n        n = self.n\n        blocks = self.sequence\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(1, n):\n            for j in range(i + 1):\n                if blocks[i][0] == blocks[j][0]:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + blocks[i][1])\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1])\n\n        print(dp[n - 1][n - 1])"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 1 4\") == \"6\"\nassert solution(\"1 2 4\") == \"6\"\nassert solution(\"3 4 4\") == \"9\"\nassert solution(\"2 8 3\") == \"18\"\n"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n2 1 4\\n1 2 4\\n3 4 4\\n2 8 3\\n3 16 3\\n1 32 2') == '63'\nassert solution('7\\n1 100000 1\\n1 100000 2\\n1 100000 2\\n4 50000 3\\n3 50000 4\\n4 50000 4\\n3 50000 3') == '300000'\nassert solution('4\\n1 1000 1\\n2 500 2\\n3 250 3\\n4 125 4') == '1000'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1 1') == '5'\nassert solution('2 1 4\\n1 2 4') == '8'\nassert solution('3 4 4\\n2 8 3\\n3 16 3') == '16'\nassert solution('1 32 2\\n3 4 5') == '5'\n"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n6\n2 1 4\n1 2 4\n3 4 4\n2 8 3\n3 16 3\n1 32 2\n\"\"\") == '63'\n\nassert solution(\"\"\"\n7\n1 100000 1\n1 100000 2\n1 100000 2\n4 50000 3\n3 50000 4\n4 50000 4\n3 50000 3\n\"\"\") == '300000'\n\nassert solution(\"\"\"\n4\n1 1000 1\n2 500 2\n3 250 3\n4 125 4\n\"\"\") == '1000'\n\n\"\"\"\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c\u044b\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438. \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0432\u044b\u044f\u0441\u043d\u0438\u0442\u044c \u043a\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043d\u0435\u0439 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e n \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\"\"\"\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"-1\"\nassert solution(\"36\") == \"agoeuioaeiruuimaeoieauoweouoiaouimae\"\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"-1\"\nassert solution(\"36\") == \"agoeuioaeiruuimaeoieauoweouoiaouimae\"\n\"\"\"\n\n\nimport string\n\nalphabet = string.ascii_lowercase\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"36\") == \"agoeuioaeiruuimaeoieauoweouoiaouimae\"\nassert solution(\"7\") == \"-\"\nassert solution(\"10\") == \"aeiouaeiouaeioua\"\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7') == '-1'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\n\"\"\"\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\n\"\"\"\n\nfrom collections import Counter\nfrom math import gcd"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"-1\"\nassert solution(\"36\") == \"agoeuioaeiruuimaeoieauoweouoiaouimae\"\nassert solution(\"3\") == \"ae\"\nassert solution(\"4\") == \"ea\"\nassert solution(\"5\") == \"ea\"\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\n\"\"\""
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\nassert solution('7') == '-1'\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"36\") == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == '-1'\nassert solution('36') == 'agoeuioaeiruuimaeoieauoweouoiaouimae'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_one) == 3\n\n---"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n3 4 6 8 10 18 21 24') == '3'\n\"\"\"\nimport sys\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 6 8 10 18 21 24') == '3'"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 6 8 10 18 21 24\") == \"3\"\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8\n3 4 6 8 10 18 21 24''') == '3'\n\"\"\"\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 6 8 10 18 21 24\") == 3\n\"\"\"\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n3 4 6 8 10 18 21 24\") == \"3\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 3 2 4\\n2 4 6') == '3'\n\"\"\""
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 10 16\") == '3'\nassert solution(\"8\") == '1'\nassert solution(\"1\") == '1'\nassert solution(\"2 4\") == '2'\n\"\"\"\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n3 4 6 8 10 18 21 24\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0''') == '1'\n\nassert solution('''0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0''') == '0'\n"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 0 0\\\\n0 0 0 0 1\\\\n0 0 0 0 0\\\\n0 0 0 0 0\\\\n0 0 0 0 0\\\\n0 0 0 0 0\") == \"3\"\nassert solution(\"0 0 0 0 0\\\\n0 0 0 0 1\\\\n0 0 0 0 0\\\\n0 0 0 0 0\\\\n0 0 0 0 0\\\\n0 0 0 0 0\") == \"1\"\n\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def __init__(self):\n        self.m = 5\n        self.n = 5\n\n    def solution(self, matrix):\n        assert len(matrix) == self.m\n        assert len(matrix[0]) == self.n\n        # print(matrix)\n        x, y = 1, 1\n        for i in range(self.m*self.n):\n            if matrix[x][y]!= 0:\n                break\n            x = x + 1\n            y = y + 1\n        x, y = self.m - x, self.n - y\n        # print(x, y)\n        s = []\n        for i in range(1, x+1):\n            if matrix[i][0] == 1 and matrix[i][1] == 0:\n                s.append((1, 2))\n                matrix[i][2], matrix[i+1][2] = 1, 1\n            elif matrix[i][1] == 1 and matrix[i][2] == 0:\n                s.append((2, 1))\n                matrix[i][1], matrix[i+1][1] = 1, 1\n            elif matrix[i][2] == 1 and matrix[i][3] == 0:\n                s.append((3, 2))\n                matrix[i][2], matrix[i+1][2] = 1, 1\n            elif matrix[i][3] == 1 and matrix[i][4] == 0:\n                s.append((4, 3))\n                matrix[i][3], matrix[i+1][3] = 1, 1\n        for i in range(1, y+1):\n            if matrix[0][i] == 1 and matrix[1][i] == 0:\n                s.append((1, 1))\n                matrix[1][i], matrix[2][i] = 1, 1\n            elif matrix[1][i] == 1 and matrix[2][i] == 0:\n                s.append((2, 1))\n                matrix[1][i], matrix[2][i] = 1, 1\n            elif matrix[2][i] == 1 and matrix[3][i] == 0:\n                s.append((3, 2))\n                matrix[2][i], matrix[2][i+1] = 1, 1\n            elif matrix[3][i] == 1 and matrix[4][i] == 0:\n                s.append((4, 3))\n                matrix[3][i], matrix[4][i] = 1, 1\n        for i in range(1, x+1):\n            if matrix[i][4] == 1 and matrix[i][3] == 0:\n                s.append((3, 4))\n                matrix[i][4], matrix[i+1][4] = 1, 1\n            elif matrix[i][3] == 1 and matrix[i][4] == 0:\n                s.append((4, 3))\n                matrix[i][3], matrix[i+1][3] = 1, 1\n        for i in range(1, y+1):\n            if matrix[4][i] == 1 and matrix[3][i] == 0:\n                s.append((3, 4))\n                matrix[4][i], matrix[4][i+1] = 1, 1\n            elif matrix[3][i] == 1 and matrix[4][i] == 0:\n                s.append((4, 3))\n                matrix[3][i], matrix[4][i] = 1, 1\n        print(s)\n        # print(matrix)\n        for i, j in s:\n            if matrix[i][j] == 0:\n                return -1\n        return len(s)\n\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        matrix = [\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 1],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0]\n        ]\n        self.assertEqual(solution(matrix), 3)"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"3\"\n\"\"\"\n\n\n\"\"\"\nSolution 3\n\nI dont know how to do it on my own\n\nfrom collections import deque"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"3\"\n\"\"\"\n\nfrom typing import List\nimport sys\nfrom collections import deque"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '1'\nassert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '2'\nassert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '3'\nassert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '4'\nassert solution('0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == '5'\n\"\"\""
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\") == '3'\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\") == '1'\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\") == '0'\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\") == '0'\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\") == '0'\n\nprint(solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\"))\nprint(solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\"))\nprint(solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\"))\nprint(solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\"))\n\"\"\"\n\na = \"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\"\nprint(a.split(\"\\n\"))\nprint(a.split(\"\\n\")[0].split(\" \"))"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 0 0\") == 3\nassert solution(\"0 0 0 0 0\") == 1\nassert solution(\"0 0 0 0 0\") == 3\n\nassert solution(\"0 0 0 0 0\") == 3\nassert solution(\"0 0 0 0 0\") == 1\n"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"3\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"1\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"3\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"1\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 1 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"1\"\nassert solution(\"0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 1 0 0 0\\n0 0 0 0 0\") == \"1\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"pergament\") == \"1 4 6\"\nassert solution(\"petr\") == \"2 1\"\nassert solution(\"wookie\") == \"1 2\"\nassert solution(\"double\") == \"2 4 1\"\nassert solution(\"bundle\") == \"2 4 1\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"pergament\", \"permanent\") == \"1\", \"Wrong answer\"\nassert solution(\"wookie\", \"cookie\") == \"1\", \"Wrong answer\"\nassert solution(\"petr\", \"egor\") == \"2\", \"Wrong answer\"\nassert solution(\"double\", \"bundle\") == \"2\", \"Wrong answer\"\n\nassert solution(\"permanent\", \"pergament\") == \"1\", \"Wrong answer\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"pergament\") == \"1\", \"Try again!\"\nassert solution(\"cookie\") == \"4 6\", \"Try again!\"\nassert solution(\"wookie\") == \"1 2\", \"Try again!\"\nassert solution(\"double\") == \"2 4\", \"Try again!\"\nassert solution(\"bundle\") == \"2 1\", \"Try again!\"\n\nprint(\"You are awesome!\")\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"permanent\") == '1 4'\nassert solution(\"petr\") == '2 1'\nassert solution(\"egor\") == '1 2'\nassert solution(\"double\") == '2 4'\nassert solution(\"bundle\") == '2 4'\n\n\"\"\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"pergament\") == '1\\n4 6'\nassert solution(\"wookie\") == '1\\n-1 -1'\nassert solution(\"petr\") == '2\\n1 2'\nassert solution(\"double\") == '2\\n4 1'\nassert solution(\"bundle\") == '2\\n4 1'\n\n\"\"\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"pergament\") == \"1\"\nassert solution(\"petr\") == \"2\"\nassert solution(\"egor\") == \"1\"\nassert solution(\"wookie\") == \"1\"\nassert solution(\"cookie\") == \"2\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"9\\npergament\\npermanent\\n\"\n) == \"1\\n4 6\\n\"\nassert solution(\n    \"6\\nwookie\\ncookie\\n\"\n) == \"1\\n-1 -1\\n\"\nassert solution(\n    \"4\\npetr\\ngeor\\n\"\n) == \"2\\n1 2\\n\"\nassert solution(\n    \"6\\ndouble\\nbundle\\n\"\n) == \"2\\n4 1\\n\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('permanent') == '1'\nassert solution('cookie') == '4 6'\nassert solution('wookie') == '1 2'\nassert solution('petr') == '2 1'\nassert solution('egor') == '2 1'\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\npergament\\npermanent\") == \"1\\n4 6\"\nassert solution(\"5\\npergament\\npermanent\") == \"1\\n4 6\"\nassert solution(\"5\\npergament\\npergament\") == \"1\\n4 5\"\nassert solution(\"6\\nwookie\\ncookie\") == \"1\\n-1 -1\"\nassert solution(\"6\\npetr\\negor\") == \"2\\n1 2\"\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"pergament\") == '4 6'\nassert solution(\"cookie\") == '1 2'\nassert solution(\"double\") == '2 4'\nassert solution(\"bundle\") == '4 1'\n\"\"\"\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n12224\\n12??5\\n12226\\n?0000\\n?00000\") == \"YES\\n12224\\n12225\\n12226\\n20000\\n100000\"\n\"\"\""
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n18\\n1?\\n\") == 'YES\\n1\\n18\\n19'\nassert solution(\"2\\n??\\n?\\n\") == 'NO'\nassert solution(\"5\\n12224\\n12?5\\n12226\\n?0000\\n?00000\\n\") == 'YES\\n12224\\n12225\\n12226\\n20000\\n100000'\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1?2\\n?0?\\n?0?\\n?0?\\n?0?\") == \"YES\\n1\\n2\\n3\\n4\\n5\"\nassert solution(\"3\\n1?2\\n?0?\\n?0?\\n?0?\") == \"NO\"\nassert solution(\"3\\n11?2\\n?0?\\n?0?\\n?0?\") == \"YES\\n11\\n12\\n13\"\nassert solution(\"2\\n??\\n?0?\") == \"NO\"\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n?\\n18\\n1?\\n\") == \"YES\\n1\\n18\\n19\"\nassert solution(\"2\\n??\\n?\\n\") == \"NO\"\nassert solution(\"5\\n12224\\n12??5\\n12226\\n?0000\\n?00000\\n\") == \"YES\\n12224\\n12225\\n12226\\n20000\\n100000\"\n\n\"\"\"\nfrom typing import List, Dict"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n?\\n18\\n1?\\n\") == 'YES\\n1\\n18\\n19'\nassert solution(\"2\\n??\\n?\\n\") == 'NO'\nassert solution(\"5\\n12224\\n12??5\\n12226\\n?0000\\n?00000\\n\") == 'YES\\n12224\\n12225\\n12226\\n20000\\n100000'\n\n\"\"\"\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n5\\n?\") == \"YES\\n1\\n5\\n2\"\nassert solution(\"5\\n12224\\n12??5\\n12226\\n?0000\\n?00000\") == \"YES\\n12224\\n12225\\n12226\\n20000\\n100000\"\n\nprint('Hooray!')\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n18\\n1?\\n\") == 'YES\\n1\\n18\\n19'\nassert solution(\"5\\n12224\\n12??5\\n12226\\n?0000\\n?00000\\n\") == 'YES\\n12224\\n12225\\n12226\\n20000\\n100000'"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2?12?123?4?34??\") == \"NO\"\nassert solution(\"1222?5?34??\") == \"NO\"\nassert solution(\"1222?5?34??\") == \"NO\"\nassert solution(\"12?34??\") == \"NO\"\nassert solution(\"12?3?4??\") == \"NO\"\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n?\\n18\\n1?\\n\") == \"YES\\n1\\n18\\n19\"\nassert solution(\"2\\n??\\n?\\n\") == \"NO\\n\"\nassert solution(\"5\\n12224\\n12??5\\n12226\\n?0000\\n?00000\\n\") == \"YES\\n12224\\n12225\\n12226\\n20000\\n100000\"\n"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"? 2???\") == \"YES\"\nassert solution(\"? 2???\") == \"YES\"\nassert solution(\"? 2???\") == \"YES\"\nassert solution(\"? 2???\") == \"YES\"\nassert solution(\"? 2???\") == \"YES\"\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 3\\n1 3\\n1 2 3\") == \"6\"\n\"\"\""
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 4\\n1 2 3\\n1 10 100 1000') == '1000'\nassert solution('6 2 3\\n1 3\\n1 2 3') == '6'\nassert solution('6 1 2\\n0\\n2 3') == '-1'\nassert solution('6 4 3\\n1 2\\n1 3\\n1 4\\n1 5') == '-1'\nassert solution('7 4 3\\n2 4\\n3 4\\n4 4\\n5 4') == '-1'\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3\") == 6\nassert solution(\"5 1 5\") == -1\n\"\"\"\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 3\") == \"5\"\n\"\"\"\n\n\n\"\"\"\nhttps://codeforces.com/contest/1543/problem/A\n\"\"\"\nimport math\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 5\\n0\\n3 3 3 3 3\") == \"1000\"\nassert solution(\"3 4\\n0\\n3 4\") == \"5\"\nassert solution(\"4 3\\n0\\n4 1\") == \"0\"\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 2 3\n1 3\n1 2 3''') == '6'\n\nassert solution('''4 3 4\n1 2 3\n1 10 100 1000''') == '1000'\n\nassert solution('''5 1 5\n0\n3 3 3 3 3''') == '-1'\n\nassert solution('''7 4 3\n2 4 5 6\n3 14 15''') == '-1'\n\nprint('The code ran successfully')"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 3\\n1 3\\n1 2 3\") == 6\n\n\"\"\"\n\nfrom typing import List, Optional, Union\n\nfrom utils import read_input\n\n\"\"\"\nhttps://www.geeksforgeeks.org/min-cost-to-install-post-lamps/\n\"\"\"\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 3\\n1 3\\n1 2 3\") == \"6\"\nassert solution(\"4 3 4\\n1 2 3\\n1 10 100 1000\") == \"1000\"\nassert solution(\"5 1 5\\n0\\n3 3 3 3 3\") == \"-\"\nassert solution(\"7 4 3\\n2 4 5 6\\n3 14 15\") == \"-\""
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 5\\n0\\n3 3 3 3 3\") == \"1000\"\nassert solution(\"6 2 3\\n1 3\\n1 2 3\") == \"6\"\nassert solution(\"6 2 3\\n1 3\\n1 2 3\") == \"6\"\nassert solution(\"6 2 3\\n1 3\\n1 2 3\") == \"6\"\n\nprint(solution(stdin))\n\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4 5') == '7'\n\"\"\"\n\nfrom collections import Counter\n\ninput_data = open(\"input.txt\").read().splitlines()\nn, m, k = [int(i) for i in input_data[0].split(' ')]\nblocked = Counter([int(i) for i in input_data[1].split(' ')])\ncost = Counter([int(i) for i in input_data[2].split(' ')])\n\ncost_min = -1\n\nfor l in range(1, k + 1):\n    if l > m:\n        break\n    cost_current = 0\n    for i in range(n - l + 1):\n        if blocked[i] == 0:\n            continue\n        cost_current += cost[l]\n    cost_min = min(cost_min, cost_current)\n\nprint(cost_min)\n"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 4 5 2\") == 8\nassert solution(\"30 9 4 1\") == 4\n\"\"\"\n\nimport collections"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 5 2\") == '8'\nassert solution(\"30 9 4 1\") == '4'\n"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 4 5 2\") == \"8\"\nassert solution(\"30 9 4 1\") == \"4\"\nassert solution(\"100 1000 1000 100\") == \"1000\"\n\"\"\"\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 4 5 2\") == \"8\"\nassert solution(\"30 9 4 1\") == \"4\"\n"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 4 5 2') == '8'\nassert solution('30 9 4 1') == '4'\n\"\"\""
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 4 5 2') == '8'\nassert solution('30 9 4 1') == '4'\n\"\"\""
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 4 5 2\") == 8\n\"\"\"\n\nn, k, m, d = list(map(int, input().strip().split(\" \")))\n\nmodulo = 10 ** 9 + 7"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 4 5 2\") == 8\nassert solution(\"30 9 4 1\") == 4\n\n\"\"\""
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 4 5 2\") == 8\nassert solution(\"30 9 4 1\") == 4\n\"\"\"\n\nn, k, m, d = [int(x) for x in input().split()]\n\nresult = 0\n\nfor x in range(1, n // m + 1):\n    result += k * x"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 4 5 2\") == \"8\"\nassert solution(\"30 9 4 1\") == \"4\""
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\") == \"5\"\nassert solution(\"7 7\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\") == \"5\"\nassert solution(\"7 7\") == \"6\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 3') == '5'\n\nassert solution('7 7') == '6'\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\") == \"5\"\nassert solution(\"7 7\") == \"6\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 4\") == \"3\"\n\nassert solution(\"10000000 2\") == \"10000000 2\"\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == '1'\nassert solution(\"5 3\") == '1'\nassert solution(\"3 3\") == '2'\nassert solution(\"7 7\") == '6'\nassert solution(\"10 10\") == '10'\n"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\") == \"5\"\nassert solution(\"7 7\") == \"6\"\n\"\"\"\nimport math"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(10 3) == \"5\"\nassert solution(7 7) == \"6\"\n\n\n\n---\n\nThere are some people who like to rearrange the natural numbers. They call these people nonconformists.\n\nYour task is to arrange the first n numbers of the sequence below. The sequence consists of the first n numbers of the sequence where n is a positive integer, which is passed as the parameter of the function."
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3\") == \"5\"\nassert solution(\"7 7\") == \"6\""
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"-1 1\") == \"0\"\nassert solution(\"0 1\") == \"0\"\nassert solution(\"-1 -1\") == \"0\"\nassert solution(\"5 -3 5 3 0\") == \"13\"\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('-1 1\\n') == 2\nassert solution('0 0 0 0\\n') == 4\nassert solution('-5 -3 5 3 0\\n') == 13\nassert solution('5 -3 5 3 0\\n') == 13\n\"\"\"\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 -1') == '2'\nassert solution('1 1') == '0'\nassert solution('1 -1 1') == '1'\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n-1 1\") == \"2\"\nassert solution(\"4\\n0 0 0 0\") == \"4\"\nassert solution(\"5\\n-5 -3 5 3 0\") == \"13\"\n\"\"\"\n\n\"\"\"\nIntuition:\n\nFor each index i in range(len(A) - 1), try to make A[i] = 1.\n\nYou can do this by subtracting 1 from A[i]. \n\nIf A[i] is already 1, subtracting 1 from A[i] does not change anything and does not require any coins. \n\nIf A[i] is already -1, then subtracting 1 from A[i] would make it equal to 1. \n\nSo, we need to subtract 1 from every A[i]. \n\nWe can maintain a count of all those subtractions and the total count of coins used. \n\nNow, let's try to find an index where A[i] = 1. \n\nTo do this, we iterate over all indices from i to 0. \n\nFor each index j, we try to find a subarray of indices [i, j] such that A[i] +... + A[j] is 1. \n\nIf A[j] is already 1, then we do not need to check the indices from j + 1. \n\nIf A[j] is already -1, then we can only have j in the subarray. \n\nSo, if we can find a subarray of indices [i, j] such that A[i] +... + A[j] is 1, we add j - i + 1 to our count of used coins. \n\nFinally, we return the minimum of all the used coins. \n\nComplexity:\n\nTime: O(N^2), where N is the length of A.\n\nSpace: O(N), the space used to store the array A.\n\"\"\"\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n-1 1\") == \"2\\n-1 1\"\nassert solution(\"4\\n0 0 0 0\") == \"4\\n0 0 0 0\"\nassert solution(\"5\\n-5 -3 5 3 0\") == \"13\"\nprint('The solution is correct!')\n\n\"\"\"\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n-1 1') == '2'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('5\\n-5 -3 5 3 0') == '13'\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 2 3\") == \"4\"\nassert solution(\"3\\n-1 1 3\") == \"2\"\nassert solution(\"5\\n-5 -3 5 3 0\") == \"13\"\n\"\"\"\n\nn = int(input())\nA = list(map(int, input().split()))\n\nmin_coins = 0\nA_sum = 0\nfor i in A:\n    A_sum += abs(i)"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n-1 1') == '2'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('5\\n-5 -3 5 3 0') == '13'\n\"\"\""
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0 0\") == 4\nassert solution(\"4\\n-5 -3 5 3 0\") == 13\nassert solution(\"5\\n-5 -3 5 3 0\") == 13\n\"\"\""
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n-1 1 0 0 -2 2\\n\") == \"4\"\nassert solution(\"2\\n-1 1\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n\") == \"4\"\nassert solution(\"5\\n-5 -3 5 3 0\\n\") == \"13\"\n\n\"\"\"\n\nn = int(input())\nstdin = input().split()\nstdin = [int(i) for i in stdin]"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123+456=7\") == \"123+45=7\"\nassert solution(\"12+34=56\") == \"12+3=9\"\nassert solution(\"123+789=456\") == \"123+78=45\"\nassert solution(\"123+456=789\") == \"123+45=89\"\nassert solution(\"123+789=456\") == \"123+78=45\"\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123123123456456456456579579579\") == \"123123123+456456456=579579579\"\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('1+2') == '1+2'\nassert solution('1+2=2') == '1+2=2'\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123123123456456456579579579') == '123123123+456456456=579579579'\nassert solution('199100') == '1+99=100'\nassert solution('123') == '123'\nassert solution('199100') == '1+99=100'\nassert solution('123123123456456456579579579') == '123123123+456456456=579579579'\n\nprint(solution(\"123123123456456456579579579\"))\nprint(solution(\"199100\"))\nprint(solution(\"123\"))\nprint(solution(\"123123123456456456579579579\"))\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12345168\") == \"123+45=168\"\n\"\"\""
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12345168\") == \"123+45=168\"\nassert solution(\"099\") == \"0+9=9\"\nassert solution(\"199100\") == \"1+99=100\"\nassert solution(\"123123123456456456579579579\") == \"123123123+456456456=579579579\"\n\n\"\"\""
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12345168\") == \"123+45=168\"\nassert solution(\"099\") == \"0+9=9\"\nassert solution(\"199100\") == \"1+99=100\"\nassert solution(\"123123123456456456579579579\") == \"123123123+456456456=579579579\"\n\"\"\"\n\ns = input()\nwhile len(s) > 0 and s[0] == '0':\n    s = s[1:]\nprint(s)\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123+45=168') == '123+45=168'\nassert solution('0+9=9') == '0+9=9'\nassert solution('199100') == '1+99=100'\nassert solution('123123123+456456456=579579579') == '123123123+456456456=579579579'\n\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12345168') == '123+45=168'\n\"\"\"\n"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12345168\") == \"123+45=168\"\nassert solution(\"099\") == \"0+9=9\"\nassert solution(\"199100\") == \"1+99=100\"\nassert solution(\"123123123456456456579579579\") == \"123123123+456456456=579579579\"\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '4'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '4'\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234\") == \"0\"\nassert solution(\"9999\") == \"4\"\nassert solution(\"10010010110110\") == \"0\"\nassert solution(\"11\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"12\") == \"3\"\nassert solution(\"123\") == \"6\"\nassert solution(\"125\") == \"5\"\nassert solution(\"124356983594583453458888889\") == \"0\"\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"10\") == \"0\"\nassert solution(\"1234567890\") == \"8\"\nassert solution(\"1234567891011\") == \"0\"\n\"\"\""
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '4'\nassert solution('124356983594583453458888889') == '0'\n\"\"\"\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"12345\") == \"12345\"\nassert solution(\"9\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '4'\n) == '4'\nassert solution(\n    '124356983594583453458888889'\n) == '0'\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(4)) == '4'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"124356983594583453458888889\") == \"0\"\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3\\n1 2 3 3 2 1 2 2') == 4\nprint('Test PASSED')\n"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\n1 2 3 3 2 1 2 2\") == \"4\"\nassert solution(\"5 5\\n1 2 3 2 1 1\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n1 2 3 3 2 1 2 2\") == 4\nassert solution(\"2 2\\n1 1\") == 0\nassert solution(\"4 4\\n1 2 3 4\") == 4\nassert solution(\"8 5\\n1 2 3 4 5 6 7 8\") == 6\nassert solution(\"6 5\\n1 3 5 1 2 4 6\") == 4\n"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"8 3\n1 2 3 3 2 1 2 2\"\"\"\n) == 4\n\"\"\""
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 2 3 3 2 1 2 2\\n') == '4'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n') == ''\nassert solution('1 2 1 1 1 2 1 1 2 2\\n') == '3'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3\\n1 2 3 3 2 1 2 2') == 4\n\n-----\n1.  \u041d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u0442\u0440\u043e\u043a.\n2.  \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0435\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043d\u0430 \"Yes\"\n\n3. \u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u0442\u0440\u043e\u043a.\n4. \u041d\u0430\u0439\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n5. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0435\u0442\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u0442\u0440\u043e\u043a.\n6. \u041d\u0430\u0439\u0442\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n7. \u041d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u0442\u0440\u043e\u043a.\n8. \u041d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n9. \u041d\u0430\u0439\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u043f\u043e\u0441\u043b\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n10. \u041f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n11. \u041f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n12. \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0435\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u0442\u0440\u043e\u043a \u043d\u0430 \"Yes\"\n13. \u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u0442\u0440\u043e\u043a.\n14. \u041d\u0430\u0439\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n15. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0435\u0442\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u0442\u0440\u043e\u043a.\n16. \u041d\u0430\u0439\u0442\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n17. \u041d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u0442\u0440\u043e\u043a.\n18. \u041d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n19. \u041d\u0430\u0439\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u043f\u043e\u0441\u043b\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n20. \u041f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n21. \u041f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n22. \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0435\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u0442\u0440\u043e\u043a \u043d\u0430 \"Yes\"\n23. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 for, \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\n24. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 while, \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\n25. \u041f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n26. \u041f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.\n27. \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0438 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\n28. \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0430 \u043d\u043e\u0432\u044b\u0445 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0442\u0440\u043e\u043a, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0438 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n29. \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e "
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3\\n1 2 3 3 2 1 2 2') == '4'\n\"\"\""
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    8 3\n    1 2 3 3 2 1 2 2\n    \"\"\") == '4'\n\"\"\""
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1\\n1 1 1\\n4\\n') == 'YES'\nassert solution('1 1 3\\n2 3 4\\n2\\n') == 'YES'\nassert solution('1 0 0\\n1 0 0\\n1\\n') == 'NO'\nassert solution('1 1 1\\n1 1 3\\n4\\n') == 'NO'\nassert solution('1 1 0\\n1 1 0\\n1\\n') == 'YES'\n"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\") == \"YES\"\nassert solution(\"1 1 3\\n2 3 4\\n2\") == \"YES\"\nassert solution(\"1 1 1\\n1 1 1\\n4\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0\") == \"YES\"\n\"\"\"\n\n\na_1, a_2, a_3 = map(int, input().split())\nb_1, b_2, b_3 = map(int, input().split())\nn = int(input())\nc = 0\n"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\") == \"YES\"\nassert solution(\"1 1 3\\n2 3 4\\n2\") == \"YES\"\nassert solution(\"1 0 0\\n1 0 0\\n1\") == \"NO\"\nassert solution(\"1 1 3\\n2 3 4\\n2\\n\") == \"NO\"\n\nprint(\"The local tests are done. The global test is in progress...\")"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 1\\n1 1 1\\n4\\n') == 'YES'\nassert solution('1 1 3\\n2 3 4\\n2\\n') == 'YES'\nassert solution('1 0 0\\n1 0 0\\n1\\n') == 'NO'\nassert solution('1 0 0\\n1 0 0\\n5\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\\n\") == \"YES\"\nassert solution(\"1 1 3\\n2 3 4\\n2\\n\") == \"YES\"\nassert solution(\"1 0 0\\n1 0 0\\n1\\n\") == \"NO\"\nassert solution(\"0 1 0\\n1 0 0\\n1\\n\") == \"NO\"\n\nprint('Hooray, the solution is working')"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\\n\") == \"YES\"\nassert solution(\"1 1 3\\n2 3 4\\n2\\n\") == \"YES\"\nassert solution(\"1 1 1\\n1 1 3\\n1\\n\") == \"NO\"\nassert solution(\"1 0 0\\n1 0 0\\n1\\n\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\\n\") == \"YES\"\nassert solution(\"1 1 3\\n2 3 4\\n2\\n\") == \"YES\"\nassert solution(\"1 1 1\\n1 1 1\\n4\\n\") == \"NO\"\n"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\\n1 1 1\\n4\\n\") == \"YES\"\nassert solution(\"1 1 3\\n2 3 4\\n2\\n\") == \"YES\"\nassert solution(\"1 0 0\\n1 0 0\\n1\\n\") == \"NO\""
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1\\n1 1 1\\n4') == 'YES'\nassert solution('1 1 3\\n2 3 4\\n2') == 'YES'\nassert solution('1 0 0\\n1 0 0\\n1') == 'NO'\nassert solution('1 1 1\\n0 1 1\\n1') == 'YES'\nassert solution('1 1 3\\n2 3 4\\n2') == 'YES'\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 4\ncode\nforc\nesco\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == 0\nassert solution(\"case\") == 2\nassert solution(\"test\") == 4"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == 0\nassert solution(\"case\") == 2\nassert solution(\"forc\") == 4\n\"\"\"\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') == 0\nassert solution('case') == 2\nassert solution('code') == 4\nassert solution('forc') == 2\nassert solution('esco') == 4\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == 0\nassert solution('case') == 2\nassert solution('care') == 2\nassert solution('test') == 4\nassert solution('code') == 4\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcd\\nefg\\nhijk\") == 0\nassert solution(\"codeforces\\ncode\\nforc\\nesco\\ndefo\\nrces\") == 4\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('codeforces') == 0\nassert solution('care') == 2\nassert solution('test') == 4\nassert solution('code') == 4\n\nprint(solution('codeforces'))\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('codeforces') == 0\nassert solution('case') == 2\nassert solution('test') == 4\nassert solution('code') == 0\nassert solution('defo') == 4\n"
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == 0\nassert solution(\"case\") == 0\nassert solution(\"test\") == 1\nassert solution(\"code\") == 4\n\n\n\"\"\""
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == 0\nassert solution(\"care\") == 2\nassert solution(\"test\") == 4\nassert solution(\"code\") == 4"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RRLLRRRL') == 0\nassert solution('RRLLRRLL') == 1\nassert solution('UUUUUUUUU') == 0\nassert solution('LLLRRLLRLU') == 1\nassert solution('LLUURRLLR') == 3\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"URLLDR\") == 2\nassert solution(\"DLUU\") == 0\nassert solution(\"RLRLRLR\") == 12\n\nprint(solution(stdin))"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('URLLDR') == 2\nassert solution('DLUU') == 0\nassert solution('RLRLRLR') == 12\n\nprint('The local tests are done. Click on \"Check\" for more details on\u00a0online\u00a0tests.')\n\"\"\"\nfrom itertools import groupby\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"LRUUDRDDDD\") == 7\nassert solution(\"UDDDUDRDDR\") == 1\nassert solution(\"UDUUUUDUDUDRRRD\") == 3\nassert solution(\"LLLLLLLUUUUU\") == 1\nassert solution(\"RRUUUDRLLRDRRLRDRLLRULDL\") == 3\n\"\"\"\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('URLLDR') == 2\nassert solution('DLUU') == 0\nassert solution('RLRLRLR') == 12\nprint('test passed')\n\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 1\nassert solution('RRURDR') == 2\nassert solution('UDU') == 1\nassert solution('U') == 1\nassert solution('UUUUU') == 1\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"URLLDR\") == \"2\"\nassert solution(\"DLUU\") == \"0\"\nassert solution(\"RLRLRLR\") == \"12\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ncode = sys.stdin.readline().rstrip()\n\ncode_dict = {\"U\": 0, \"R\": 1, \"D\": 2, \"L\": 3}\n\ncount = [0, 0, 0, 0]\n\ncurr = 0\nfor c in code:\n    if c == \"L\":\n        count[0] += 1\n    elif c == \"U\":\n        count[1] += 1\n    elif c == \"R\":\n        count[2] += 1\n    elif c == \"D\":\n        count[3] += 1\n    if curr == 0 and count[0] == count[2]:\n        count[0] += 1\n    elif curr == 1 and count[1] == count[3]:\n        count[1] += 1\n    elif curr == 2 and count[2] == count[0]:\n        count[2] += 1\n    elif curr == 3 and count[3] == count[1]:\n        count[3] += 1\n    curr = code_dict[c]\n\nprint(sum(count))\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    'DRDR'\n) == 2\nassert solution(\n    'DRDRDR'\n) == 4\nassert solution(\n    'LULLLLLLLLLLLL'\n) == 3\nassert solution(\n    'LLLLRRLLRRLLLL'\n) == 4\nassert solution(\n    'RRLLLLRRLLLLLL'\n) == 7\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"URLLDR\") == 2\nassert solution(\"DLUU\") == 0\nassert solution(\"RLRLRLR\") == 12\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"129\") == \"1\"\n\nassert solution(\"0\") == \"0\"\n\nassert solution(\"1111\") == \"2\"\n\nassert solution(\"10000000\") == \"9\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('129') == 1\nassert solution('1') == 1\nassert solution('10') == 1\nassert solution('20') == 1\nassert solution('30') == 1\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('129') == '1'\n\"\"\"\n\na = int(input())\nprint(a // (10 ** 9) % 10)\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"129\") == \"1\"\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"129\") == 1\n\"\"\"\nimport math"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"129\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('129') == 1\n\n\"\"\"\n\na = int(input())\nprint((a + 1) // 2)\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"129\") == 1\n\"\"\"\n\nfrom re import sub\n"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('129') == 1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"0 1 2\"\n\"\"\""
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '0 1 0'\nassert solution('3\\n') == '-1'\nassert solution('4\\n') == '0 1 3 2 0'\nassert solution('16\\n') == '0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\nassert solution('6\\n') == '5 4 2 3 0 1'\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"0 1 0\"\nassert solution(\"3\") == \"1 0 2\"\nassert solution(\"4\") == \"3 1 0\"\nassert solution(\"16\") == \"0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0\"\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '0 1 0'\nassert solution('3') == '-1'\nassert solution('4') == '0 1 3 2 0'\nassert solution('16') == '0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\nassert solution('1') == '0 1'\n\"\"\""
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('0') == '0'\nassert solution('1') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0 1 0\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"0 1 0\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"4\") == \"0 1 3 2 0\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n\") == \"0 1 0\"\nassert solution(\"3\\n\") == \"-1\"\nassert solution(\"4\\n\") == \"0 1 3 2 0\"\nassert solution(\"16\\n\") == \"0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0\"\n\n------END-------\"\"\""
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '0 1 0'\nassert solution('3') == '-1'\nassert solution('4') == '0 1 3 2 0'\nassert solution('16') == '0 1 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"0 1 3 2 0\"\nassert solution(\"2\") == \"-1\"\n\"\"\""
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"3 2\") == \"332748127\"\nassert solution(\"14 9\") == \"969862773\"\n\nsolution(\"2 1\")"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1') == '5'\nassert solution('3 2') == '332748127'\nassert solution('14 9') == '969862773'\nassert solution('100 50') == '724152736'\nassert solution('100 100') == '4922360'\n"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1') == '5'\nassert solution('3 2') == '332748127'\nassert solution('14 9') == '969862773'\n"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == expected\n"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('2 1') == 5\nassert solution('3 2') == 332748127\nassert solution('14 9') == 969862773\n"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"3 2\") == \"332748127\"\nassert solution(\"14 9\") == \"969862773\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"3 2\") == \"332748127\"\nassert solution(\"14 9\") == \"969862773\"\n"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"3 2\") == \"332748127\"\nassert solution(\"14 9\") == \"969862773\"\n\"\"\""
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 1''') == '5'\nassert solution('''3 2''') == '332748127'\nassert solution('''14 9''') == '969862773'\nassert solution('''5 5''') == '0'\nassert solution('''1 1''') == '1'\n'''\n"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"3 2\") == \"332748127\"\nassert solution(\"14 9\") == \"969862773\"\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 3 2\") == '2 1\\n1 2 1 2 \nassert solution(\"7 3\\n1 3 2 2 2 2 1\") == '2 1\\n1 3 3 2 2 2 1 \n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"2 1\"\nassert solution(\"7 3\\n1 3 2 2 2 2 1\\n\") == \"2 1\"\nassert solution(\"4 4\\n1000000000 100 7 1000000000\\n\") == \"1 4\""
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"2 1\\n1 2 1 2\"\nassert solution(\"4 4\\n1000000000 100 7 1000000000\\n\") == \"1 4\\n1 2 3 4\"\n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4 2\n1 2 3 2\n    \"\"\") == \"2 1\"\nassert solution(\"\"\"7 3\n1 3 2 2 2 2 1\n    \"\"\") == \"2 1\"\nassert solution(\"\"\"4 4\n1000000000 100 7 1000000000\n    \"\"\") == \"1 4\"\nassert solution(\"\"\"7 4\n1000000000 100 7 1000000000\n    \"\"\") == \"1 2 3 4\""
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"2 1\"\nassert solution(\"7 3\\n1 3 2 2 2 2 1\\n\") == \"2 1\"\nassert solution(\"4 4\\n1000000000 100 7 1000000000\\n\") == \"1 4\"\n\"\"\"\n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2 3 2\\n') == '2 1\\n1 2 1 2'\n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"2 1\\n1 2 1 2\"\n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2 3 2\\n') == '2 1'\nassert solution('7 3\\n1 3 2 2 2 2 1\\n') == '2 1'\nassert solution('4 4\\n1000000000 100 7 1000000000\\n') == '1 4'\n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 3 2\") == '2 1'\nassert solution(\"7 3\\n1 3 2 2 2 2 1\") == '2 1'\n\"\"\""
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"2 1\"\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nassert solution('\\n1') == '1'\n\nassert solution('\\n10') == '5'\n\nassert solution('\\n10\\n-5\\n-5') == '-2\\n-3'\n\nassert solution('\\n10\\n-5\\n-5\\n0\\n3\\n24\\n-29\\n38') in ('-2\\n-3', '0\\n2\\n12')\n'''\nimport ast"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10\\n-5\\n-5\") == \"5\\n-2\\n-3\"\nassert solution(\"7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\") == \"-3\\n-15\\n0\\n2\\n12\\n-15\\n19\""
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n10\\n-5\\n-5\\n') == '5\\n-2\\n-3'\nassert solution('7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\\n') == '-3\\n-15\\n0\\n2\\n12\\n-15\\n19'\n\n\"\"\"\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n-3\\n-2\") == \"5\\n-2\"\n\"\"\""
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10\\n-5\\n-5\") == \"5\\n-2\\n-3\"\nassert solution(\"7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\") == \"-3\\n-15\\n0\\n2\\n12\\n-15\\n19\"\n\"\"\"\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n-3\\n-2\") == '5 -3 -2'\nassert solution(\"7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\") == '-3 -15 0 2 12 -15 19'\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\") == \"-3\\n-15\\n0\\n2\\n12\\n-15\\n19\"\nassert solution(\"7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\") == \"-3\\n-15\\n0\\n2\\n12\\n-15\\n19\"\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n10\\n-5\\n-5\\n\") == \"5\\n-2\\n-3\\n\"\nassert solution(\"7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\\n\") == \"-3\\n-15\\n0\\n2\\n12\\n-15\\n19\\n\"\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n10\\n-5\\n-5\") == \"5\\n-2\\n-3\"\nassert solution(\"7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\") == \"-3\\n-15\\n0\\n2\\n12\\n-15\\n19\"\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n10\\n-5\\n-5\") == \"5\\n-2\\n-3\"\nassert solution(\"7\\n-7\\n-29\\n0\\n3\\n24\\n-29\\n38\") == \"-3\\n-15\\n0\\n2\\n12\\n-15\\n19\""
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"111\") == \"2\"\nassert solution(\"1101101\") == \"4\"\n\"\"\""
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1101101') == 4\nassert solution('10') == 1\nassert solution('111') == 2\nassert solution('1101010') == 3\n\"\"\"\n"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == 1\nassert solution(\"111\") == 2\nassert solution(\"1101101\") == 4\n\"\"\"\n"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '1'\nassert solution('111') == '2'\nassert solution('1101101') == '4'\nassert solution('12345') == '5'\nassert solution('111111') == '6'\n"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1101101') == 4\n"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1101101') == '4'\n\"\"\"\n"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"1101101\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == 1\nassert solution('111') == 2\nassert solution('1101101') == 4\n\n---\n\nclass Solution:\n    def solution(self, s):\n        # write your code in Python 3.6\n        s = int(s, 2)\n        \n        count = 0\n        while s!= 0:\n            if s > 0:\n                s -= pow(2, count)\n                count += 1\n            else:\n                s += pow(2, count)\n                count += 1\n\n        return count - 1\n"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == 1\nassert solution('111') == 2\nassert solution('1101101') == 4\nassert solution('110110') == 2\n\"\"\""
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == 1\nassert solution('111') == 2\nassert solution('1101101') == 4\n\n\"\"\"\n"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 2 2\\n') == 'YES'\nassert solution('6\\n1 2 3 4 5 6\\n') == 'NO'\n\n\"\"\""
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 2 2') == 'YES'\nassert solution('6\\n1 2 3 4 5 6') == 'NO'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 2\") == \"YES\"\nassert solution(\"6 1 2 3 4 5 6\") == \"NO\"\nassert solution(\"1 2 3 4 5 6\") == \"NO\"\n\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n\nn = int(sys.stdin.readline())\na = [int(i) for i in sys.stdin.readline().split()]\nq = deque(a)\n\nwhile q:\n    x = q.popleft()\n    if x == 0:\n        break\n    q.append(x - 1)"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 2 2\") == \"YES\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a1, a2, a3, a4) == output\n\"\"\""
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2 2\\n') == 'YES'\nassert solution('6 1 2 3 4 5 6\\n') == 'NO'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 2 2\") == \"YES\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 3 4\") == \"YES\"\nassert solution(\"6 1 2 3 4 5\") == \"NO\"\nassert solution(\"1 1 2 2\") == \"YES\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 2\") == \"YES\"\nassert solution(\"6 1 2 3 4 5 6\") == \"NO\"\n\n-----Solution-----"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 2 2') == 'YES'\nassert solution('6 1 2 3 4 5 6') == 'NO'\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == 'YES'\nassert solution('13') == 'NO'\nassert solution('24') == 'NO'\nassert solution('46') == 'YES'"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"13\") == \"NO\"\nassert solution(\"24\") == \"NO\"\nassert solution(\"46\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == 'YES'\nassert solution('13') == 'NO'\nassert solution('24') == 'NO'\nassert solution('46') == 'YES'\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == \"YES\"\nassert solution('13') == \"NO\"\nassert solution('24') == \"NO\"\nassert solution('46') == \"YES\"\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5) == \"YES\"\nassert solution(13) == \"NO\"\nassert solution(24) == \"NO\"\nassert solution(46) == \"YES\"\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"13\") == \"NO\"\nassert solution(\"24\") == \"NO\"\nassert solution(\"46\") == \"YES\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 'YES'\nassert solution('13') == 'NO'\nassert solution('24') == 'NO'\nassert solution('46') == 'YES'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == 'YES'\nassert solution('13') == 'NO'\nassert solution('24') == 'NO'\nassert solution('46') == 'YES'\n\"\"\""
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == 'YES'\nassert solution('13') == 'NO'\nassert solution('24') == 'NO'\nassert solution('46') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"13\") == \"NO\"\nassert solution(\"24\") == \"NO\"\nassert solution(\"46\") == \"YES\"\nassert solution(\"1\") == \"YES\"\n"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"15\"\nassert solution(\"5\\n1 2 4 5 8\") == \"7\"\n"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 1 1\") == \"15\"\nassert solution(\"4 2 2 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"15\"\nassert solution(\"5\\n1 2 4 5 8\") == \"7\"\nassert solution(\"4\\n2 2 2 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"15\"\nassert solution(\"5\\n2 2 2 2\") == \"7\"\nassert solution(\"5\\n1 2 4 5 8\") == \"7\"\n\nprint(\"Success!\")\n\n\"\"\""
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"15\"\nassert solution(\"5\\n1 2 4 5 8\") == \"7\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"15\"\nassert solution(\"4\\n2 2 2 2\") == \"7\""
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"15\"\nassert solution(\"5\\n2 2 2 2\") == \"7\""
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 1 1') == '15'\nassert solution('5\\n1 2 4 5 8') == '7'\n\n-----\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n1 1 1 1''') == '15'\nassert solution('''5\n1 2 4 5 8''') == '7'\n"
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"15\\n\"\nassert solution(\"5\\n1 2 4 5 8\") == \"7\\n\"\nassert solution(\"2\\n2 2\") == \"0\\n\"\n\"\"\""
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 1 4\\n') == '0'\nassert solution('2\\n1 1') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 4\\n\") == \"0\\n2 1 4\"\nassert solution(\"2\\n1 1\\n\") == \"1\\n1 1\"\n"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 1') == '0\\n2 1 4'\nassert solution('3\\n1 1 2') == '0\\n3 1 2'\nassert solution('4\\n1 1 2 3') == '1\\n1 2 3'\nassert solution('5\\n1 1 2 3 4') == '0\\n3 1 2 4'\nassert solution('6\\n1 1 2 3 4 5') == '0\\n3 1 2 5'\n"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 1 4\") == \"0\\n2 1 4\"\nassert solution(\"2\\n1 1\") == \"1\\n1 1\"\n\"\"\""
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 1 4\\n3 1') == '0\\n2 1 4'\nassert solution('2\\n1 1') == '1\\n1 1'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"0\\n2 1 4\"\nassert solution(\"2\") == \"1\\n1 1\"\n\"\"\"\n\nn = int(input())\nnums = [int(i) for i in input().split()]\n\nmin_sum = max(nums)\nleft = 0\nright = n-1"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 1 4\\n\") == \"0\\n2 1 4\"\nassert solution(\"2\\n1 1\") == \"1\\n1 1\""
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 1 4') == '0\\n2 1 4'\nassert solution('2\\n1 1') == '1\\n1 1'"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1 4\") == \"0\"\nassert solution(\"2\\n1 1\") == \"1\"\n"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 2 3 3') == '0'\nassert solution('1 1 1 1 1') == '0'\nassert solution('2 1 3 4 1') == '1'\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\") == \"Yes\"\nassert solution(\"5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\") == \"No\"\n\n\"\"\"\n\nimport sys\nimport typing as t\n\nsys.setrecursionlimit(100)\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\\n\") == 'Yes'\nassert solution(\"5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\\n\") == 'No'\n\"\"\""
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\\n\") == \"Yes\"\nassert solution(\"5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\\n\") == \"No\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\\n\") == \"Yes\"\nassert solution(\"5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\\n\") == \"No\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 8\n.#.#..#.\n.....#..\n.#.#..#.\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\") == \"Yes\"\nassert solution(\"5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\") == \"No\"\nassert solution(\"5 9\\n........#\\n#........\\n..##.#...\\n.......#.\\n....#.#..\") == \"No\"\nassert solution(\"5 9\\n........#\\n#....#..#\\n..##....#\\n......#..\\n....#.#..\") == \"Yes\"\n\n'''\n\nimport sys\nimport re"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\\n\") == \"Yes\"\nassert solution(\"5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\\n\") == \"No\"\nassert solution(\"5 9\\n........#\\n#........\\n..##.#...\\n.......#.\\n....#.#.#\\n\") == \"No\"\n\n\"\"\"\n\n\nclass Solution:\n    def solve(self, stdin):\n        rows, cols = map(int, stdin.readline().split())\n        if rows > 50 or cols > 50:\n            return \"No\"\n        table = [stdin.readline() for _ in range(rows)]\n        table = [list(row) for row in table]\n        # print(table)\n        # we have to consider each pair of rows and columns\n        # for each pair, we have two sets of rows and cols\n        # the sets are represented by bool array, True for black and False for white\n        # we want to find out whether the intersection of the sets is empty\n        # then we try to apply the second set of rows and cols\n        # if they have non-empty intersection, we return False\n        # if after the operation all pairs return True, we return True\n        # if after the operation one or more pairs return False, we return False\n        for i in range(rows):\n            for j in range(cols):\n                if table[i][j] == \"#\":\n                    table[i][j] = True\n                else:\n                    table[i][j] = False\n        for i in range(rows):\n            for j in range(cols):\n                for k in range(rows):\n                    for l in range(cols):\n                        if i!= k or j!= l:\n                            if table[i][j] and table[k][l]:\n                                return \"No\"\n        return \"Yes\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('.#.#..#.') == 'Yes'\nassert solution('.....#..') == 'Yes'\nassert solution('.#.#..#.') == 'Yes'\nassert solution('.....#..') == 'Yes'\nassert solution('#.#....#.') == 'Yes'\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\\n') == 'Yes'\nassert solution('5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..') == 'No'\n\n\"\"\""
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_data) == answer\nprint(solution(stdin))\n"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"3\"\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') == 3\n\"\"\"\n\nfrom __future__ import annotations\nfrom math import sqrt\n"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6') == 3\nprint(solution('6'), end=' ')\n\n\"\"\""
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6') == '3'\n\"\"\""
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '3'\n\"\"\""
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6') == '3'\n\"\"\"\nfrom math import gcd\nfrom typing import Dict, Tuple"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"10\") == \"2\"\nassert solution(\"100\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\"\n\nfrom unittest.mock import patch\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_case_1(self):\n        with patch('builtins.input', side_effect = [\"6\"]):\n            with patch('sys.stdout', new = StringIO()) as fake_stdout:\n                solution()\n                self.assertEqual(fake_stdout.getvalue(), \"3\\n\")\n\n    def test_case_2(self):\n        with patch('builtins.input', side_effect = [\"9\"]):\n            with patch('sys.stdout', new = StringIO()) as fake_stdout:\n                solution()\n                self.assertEqual(fake_stdout.getvalue(), \"3\\n\")\n\n    def test_case_3(self):\n        with patch('builtins.input', side_effect = [\"10\"]):\n            with patch('sys.stdout', new = StringIO()) as fake_stdout:\n                solution()\n                self.assertEqual(fake_stdout.getvalue(), \"2\\n\")"
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(6) == 3\n\"\"\"\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 2\\n3 4\\n3 4\\n2 1') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\\n3 4\\n2 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4\\n3 4\\n2 1\\n') == '0'\n\n'''\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\\n3 4\\n2 1\") == \"0\"\n\"\"\"\nfrom sys import stdin\n\nH, W = map(int, stdin.readline().split())\nA = [stdin.readline().split() for _ in range(H)]\nB = [stdin.readline().split() for _ in range(H)]\n\ndp = [[0] * (W + 1) for _ in range(H + 1)]\ndp[1][1] = int(A[0][0]) + int(B[0][0])\nfor i in range(1, H + 1):\n    for j in range(1, W + 1):\n        dp[i][j] = max(dp[i][j - 1] + int(A[i - 1][j - 1]), dp[i - 1][j] + int(B[i - 1][j - 1]))\n\nprint(abs(dp[H][W] - dp[1][1]))\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\\n3 4\\n2 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\\n3 4\\n2 1\") == '0'\n\"\"\"\nfrom collections import namedtuple\n\nRectangle = namedtuple(\"Rectangle\", [\"row\", \"col\"])\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 2\n1 2\n3 4\n3 4\n2 1\"\"\") == \"0\"\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\\n3 4\\n2 1\") == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\\n3 4\\n2 1\") == '0'\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2\\n3 4\\n3 4\\n2 1\\n\") == \"0\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 7\\n1 6 3') == '14'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\\n1 6 3\") == 14\n\"\"\"\n"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\") == \"14\"\n\"\"\"\n\nimport sys\n\na = list(map(int, sys.stdin.readline().split()))\n\nN, K = a"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\\n1 6 3\") == 14\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 7\\n1 6 3') == 14\n\"\"\"\nfrom typing import List\n\nclass Solution:\n    def solve(self, stdin: str) -> None:\n        inputs: List[str] = stdin.splitlines()\n        N, K = map(int, inputs[0].split())\n        A = [int(x) for x in inputs[1].split()]\n\n        max_f = 0\n\n        for X in range(0, K + 1):\n            f = 0\n            for i in range(N):\n                f += (X ^ A[i])\n            max_f = max(max_f, f)\n\n        print(max_f)"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 7') == 14\n\"\"\""
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\\n1 6 3\") == \"14\"\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def solution(self, input: str) -> str:\n        N, K = input.split(\" \")\n        A = list(map(int, input.split()))\n        # print(N, K)\n        # print(A)\n\n        maximum = 0\n        for X in range(K):\n            XOR = 0\n            for Ai in A:\n                XOR ^= Ai\n            if XOR > maximum:\n                maximum = XOR\n        return str(maximum)\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self, input: str) -> str:\n        N, K = map(int, input.split())\n        A = list(map(int, input.split()))\n        maximum = 0\n        for X in range(K):\n            XOR = 0\n            for Ai in A:\n                XOR ^= Ai\n            if XOR > maximum:\n                maximum = XOR\n        return str(maximum)\n\nsolution = Solution().solution(sys.stdin.read())\nprint(solution)\n\n\"\"\"\n3 7\n1 6 3\n14\n\"\"\""
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7\\n1 6 3') == '14'\n\"\"\""
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7\\n1 6 3') == '14'\n\n------Solution------\n\nn, k = [int(i) for i in stdin.split(' ')]\na = [int(i) for i in stdin.split(' ')]\nf = 0\nfor x in range(1, 2 ** (k + 1)):\n    y = 0\n    for i in range(0, n):\n        if (x >> i) & 1:\n            y ^= a[i]\n    f = max(f, y)\n\nprint(f)\n"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7\\n1 6 3') == '14'\n\"\"\"\nimport sys"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 13\n3 2 7\n4 8 9\n1 6 5\n''') == 12\n\n'''\nThe key insight is that you only need to consider the 2^n number of matrices.\n\nIt is possible to check if an array is a permutation of a subset of {0,1,...,n-1} by sorting the array and then checking if it matches the sorted array.\n\nLet's look at the 0th index of the given array, a_0. The sum of the elements of a_0 can be computed by taking the sum of the values that are less than a_0, and subtracting the values that are greater than a_0.\n\nThus, a_0 is the largest value of a_0 and a_0 + a_1 is the largest value of a_1, and so on.\n\nThis observation implies that a_0 can be as large as K. If a_0 + a_1 +... + a_(n-1) <= K, then all other a_i must be less than a_0.\n\nIf we have a_i < a_j for all i < j, then the elements a_0,..., a_i-1,..., a_j-1, a_j,..., a_(n-1) form a permutation of the set of all values {0,..., n-1}.\n\nIf we have a_i > a_j for all i < j, then the elements a_0,..., a_j-1, a_j,..., a_(n-1) form a permutation of the set of all values {0,..., n-1}.\n\nNote that a_0 is the largest value in the matrix. The sum of all values in the matrix is always less than or equal to K.\n\nTherefore, the number of matrices having elements less than or equal to K is equal to the number of permutations of {0,..., n-1} that contain a_0.\n\nNote that the permutations we have in mind are always sorted in increasing order.\n\nThus, we can simply count the number of permutations having a_0 as the maximum value.\n\nIf the matrix has no a_0, then the matrix is simply a permutation of {0,..., n-1}, which is one permutation of {0,..., n-1} for each of the n elements.\n\nSo we can simply count the number of permutations in the matrix.\n\nFor the algorithm, we simply need to keep a running counter of the number of permutations we've encountered. When a_0 is encountered, we simply increment the counter. Then we compute the number of permutations in the matrix by adding the number of permutations of the matrix without the a_0 and multiply it by the factorial of n.\n\nFor the following example, we have n = 3, K = 13. There are three permutations of the set {0, 1, 2} without a_0. They are:\n{0, 1, 2}\n{0, 2, 1}\n{1, 0, 2}\n\nThere are six permutations of the set {0, 1, 2} with a_0. They are:\n{0, 1, 2}\n{0, 2, 1}\n{1, 0, 2}\n{1, 2, 0}\n{2, 0, 1}\n{2, 1, 0}\n\nSo the number of permutations is the number of permutations of {0, 1, 2} with a_0, which is six.\n\nFinally, the number of permutations of the matrix is equal to the product of the number of permutations of the matrix without a_0 and the factorial of n.\n\nFor the above example, the product is (1! * 2! * 3!) = 6! = 720.\n\nThe number of matrices is simply the sum of the number of matrices of the matrix with a_0 and the number of matrices of the matrix without a_0.\n\nFor the above example, the number of matrices is equal to (1! * 2! * 3! * 720) + (720).\n\nFor the following example, we have n = 3, K = 3. There are no permutations of the set {0, 1, 2} without a_0.\n\nSo the number of matrices is the number of permutations of the set {0, 1, 2} with a_0, which is 3.\n\nFinally, the number of matrices is equal to the number of permutations of the matrix with a_0, which is 3.\n\nFor the following example, we have n = 4, K = 5. There are five permutations of the set {0, 1, 2, 3} without a_0.\n\nSo the number of matrices is the number of permutations of the set {0, 1, 2, 3} with a_0, which is 5.\n\nFinally, the number of matrices is equal to the number of permutations of the matrix with a_0, which is 5.\n\nFor the following example, we have n = 5, K = 3. There are no permutations of the set {0, 1, 2, 3, 4} without a_0.\n\nSo the number of matrices is the number of permutations of the set {0, 1, 2, 3, 4} with a_0, which is 0.\n\nFinally, the number of matrices is equal to the number of permutations of the matrix with a_0, which is 0.\n\nThus, the number of matrices is the sum of the number of permutations of the matrix with a_0 and the number of permutations of the matrix without a_0.\n\nSo the number of matrices is equal to the sum of the number of permutations of the matrix with a_0 and the number of permutations of the matrix without a_0.\n'''"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 13\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 13\\n3 2 7\\n4 8 9\\n1 6 5') == '12'\n\"\"\"\n\nfrom typing import Callable, List, Set, Tuple"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 13\\n3 2 7\\n4 8 9\\n1 6 5') == '12'\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\"\n\"\"\"\n\nimport itertools\n\nN, K = [int(x) for x in stdin.split('\\n')[0].split(' ')]\na = [list(map(int, x.split(' '))) for x in stdin.split('\\n')[1:]]\n\nmat = list(itertools.chain.from_iterable(a))\n\ncount = 0\n\nfor perm in itertools.permutations(mat):\n    if sum(perm[0:N]) <= K and sum(perm[N:2 * N]) <= K:\n        count += 1\n\nprint(count % 998244353)\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\"\n\"\"\"\n\nfrom typing import Callable\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\"\n\"\"\""
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 13\\n3 2 7\\n4 8 9\\n1 6 5\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 13\") == \"12\"\n\"\"\""
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\\n1 1 1\\n2 3 2\") == \"8\"\nassert solution(\"3 2 3\\n1 1 2\\n2 3 2\") == \"4\"\nassert solution(\"4 3 4\\n1 2 1\\n2 3 3\\n3 2 3\\n4 1 4\") == \"14\"\nassert solution(\"4 4 4\\n2 2 2\\n3 2 3\\n4 1 4\") == \"6\"\nassert solution(\"2 2 2\\n1 2 2\\n1 1 1\") == \"4\"\n"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 2\\n') == '8'\n\"\"\""
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0'\nassert solution('2 2 2') == '8'\n'''\n\nimport math\n"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\\n\") == \"8\"\nassert solution(\"4 4 4\\n\") == \"24\"\nassert solution(\"2 2 2\\n\") == \"8\"\nassert solution(\"5 5 3\\n\") == \"31\"\nassert solution(\"3 3 3\\n\") == \"27\"\n"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\\n\") == \"8\"\nassert solution(\"4 4 2\\n\") == \"80\"\nassert solution(\"100 100 100\\n\") == \"77777\"\n"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1') == '8'\nassert solution('4 2 3') == '11'\nassert solution('6 4 2') == '23'\n\n-----\nIf we change N and M into two different values, we have\n\n(N-1) x (M-1) + (N-1) x (M-1)\n= (N-1) x (M-1) + (N-1) x (M)\n= (N-1) x (M-1) + N x (M-1)\n= N(M-1) + (N-1) x (M)\n\n(N-1) x (M-1) + N x (M-1)\n= (N-1)(M-1) + N x (M-1)\n= (N-1)(M-1) + N x (M-1) + N x (M)\n= (N-1)(M-1) + N x (M-1) + N x (M-1) + N x (M)\n= (N-1)(M-1) + N x (M-1) + N x (M-1) + (N x M)\n= (N-1)(M-1) + N x (M-1) + (N-1) x (M-1) + N x (M)\n= N(M-1)(M) + (N-1) x (M-1) + N x (M)\n= N(M-1) x (M)\n\"\"\"\n"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\") == 8\n\n\"\"\"\n\nimport sys\nimport time"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\") == 8\n\"\"\""
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 2 2''') == '8'\n\n----\n\"\"\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == 8\n\"\"\""
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"LLLLRRRL\") == 3\n\"\"\""
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"LRLRRL\") == 3\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6 1\nLR''') == '3'\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == output\n\n----------------------"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"LRLRRL\") == \"3\"\n\"\"\"\n\nimport itertools\n\nN, K = map(int, input().split())\nsequence = list(input())\n\ncount = 0\n\nfor iter in itertools.combinations(sequence, K + 1):\n    if iter[0] == 'R':\n        iter = iter[::-1]\n    if iter[:-1] == iter[1:]:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('LLLRRR') == '2'\nassert solution('LLLLRRR') == '1'\n\"\"\""
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"LRLRRL\") == 3\n\"\"\"\n\nfrom math import ceil\nfrom typing import List, Tuple"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRLRRL\") == 3\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    'LRLRRL') == '3'\nassert solution(\n    'LLLLRR') == '5'\n\n\"\"\""
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n    3\n    1\n    4\n    7\n    8\n''') == \"1 4\"\n\nprint('Hooray!')\n"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 2 9 4 14\") == \"1 8\"\nassert solution(\"5 7\") == \"2 5\"\n"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7\") == \"2 5\"\nassert solution(\"3 8 2 9 4 14\") == \"1 8\"\nassert solution(\"6 3 8 2 9 4 14\") == \"6 9\"\n"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7') == '2 5'\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5 7\\n\") == \"2 5\"\nassert solution(\"3\\n10 2 8\\n\") == \"1 8\"\nassert solution(\"6\\n3 8 2 9 4 14\\n\") == \"6 9\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 2 9 4 14\") == \"6 9\"\nassert solution(\"6 2 8 9 4 14\") == \"1 8\"\n\"\"\"\n\nimport sys\n\nprices = [int(x) for x in sys.stdin.readline().split()]\nmax_price = max(prices)\n\nwinners = []\nfor i, x in enumerate(prices):\n    if x == max_price:\n        winners.append(i + 1)"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7\\n\") == \"2 5\"\n\"\"\"\n"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7\") == \"2 5\"\nassert solution(\"3 8 2 9 4 14\") == \"1 8\"\nassert solution(\"6 10 8 9 4 14\") == \"6 9\"\nassert solution(\"3 10 7 9 4 14\") == \"1 8\"\n\nprint(\"Passed all tests\")\n\n\"\"\""
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n5 7') == '2 5', 'Test 1 Failed'\nassert solution('3\\n10 2 8') == '1 8', 'Test 2 Failed'\nassert solution('6\\n3 8 2 9 4 14') == '6 9', 'Test 3 Failed'\n\"\"\"\n"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n3 8\") == \"2 5\"\nassert solution(\"3 8 2 9 4 14\\n\") == \"6 9\"\nassert solution(\"5 8 4 6 2\") == \"1 8\"\nassert solution(\"7 10 6 1 2 5\\n\") == \"4 10\"\nassert solution(\"7 10 9 1 2 5\\n\") == \"5 10\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1') == '1'\nassert solution('4 2') == '2'\nassert solution('4 3') == '5'\nassert solution('4 4') == '10'\nassert solution('4 5') == '18'\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n1') == '1'\nassert solution('4 2\\n1 4') == '2'\nassert solution('11 2\\n4 8') == '6720'\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n1\\n\") == \"1\"\nassert solution(\"4 2\\n1 4\\n\") == \"2\"\nassert solution(\"11 2\\n4 8\\n\") == \"6720\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == '1'\nassert solution('4 2') == '2'\nassert solution('11 2') == '6720'"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1\\n1') == '1'\nassert solution('4 2\\n4 8') == '2'\nassert solution('11 2\\n4 8') == '6720'\n\"\"\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == 1\nassert solution(\"4 2\") == 2\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 0') == '0'\nassert solution('2 3') == '2'\nassert solution('2 1') == '0'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n1\") == \"1\"\nassert solution(\"4 2\\n1 4\") == \"2\"\nassert solution(\"11 2\\n4 8\") == \"6720\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solve(self, a, b):\n        # Your code here\n        pass\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(Solution().solve(\"3 1\\n1\"), \"1\")\n        self.assertEqual(Solution().solve(\"4 2\\n1 4\"), \"2\")\n        self."
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n1') == '1'\nassert solution('4 2\\n1 4') == '2'\nassert solution('11 2\\n4 8') == '6720'\n\"\"\""
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nalex\\nivan\\nroman\\nivan\") == \"ivan\\nroman\\nalex\"\nassert solution(\"8\\nalina\\nmaria\\nekaterina\\ndarya\\ndarya\\nekaterina\\nmaria\\nalina\") == \"alina\\nmaria\\nekaterina\\ndarya\"\n"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nalex\\nivan\\nroman\\nivan\") == \"ivan\\nroman\\nalex\"\nassert solution(\"8\\nalina\\nmaria\\nekaterina\\ndarya\\nedkaterina\\nmaria\\nalina\") == \"alina\\nmaria\\nekaterina\\ndarya\"\n"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('alex') == 'alex'\nassert solution('alexivan') == 'alexivan'\nassert solution('alexivanroman') == 'alexivanroman'\nassert solution('alexivanroman') == 'alexivanroman'\n\"\"\"\n"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nalex\\nivan\\nroman\\nivan\") == \"ivan\\nroman\\nalex\\n\"\nassert solution(\"8\\nalina\\nmaria\\nekaterina\\ndarya\\ndarya\\nekaterina\\nmaria\\nalina\") == \"alina\\nmaria\\nekaterina\\ndarya\\n\"\n"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nalex\\nivan\\nroman\\nivan\") == \"ivan\\nroman\\nalex\"\nassert solution(\"8\\nalina\\nmaria\\nekaterina\\ndarya\\ndarya\\nekaterina\\nmaria\\nalina\") == \"alina\\nmaria\\nekaterina\\ndarya\\ndarya\\nekaterina\\nmaria\\nalina\"\n\n\"\"\""
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nalex\\nivan\\nroman\\nivan\\n\") == \"ivan\\nroman\\nalex\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nalex\\nivan\\nroman\\nivan\") == \"alex\\nroman\\nivan\"\n\n\"\"\"\n"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('alex\\nivan\\nroman\\nivan\\n') == 'ivan\\nroman\\nalex'\nassert solution('alina\\nmaria\\nekaterina\\ndarya\\n\\ndarya\\nekaterina\\nmaria\\nalina\\n') == 'alina\\nmaria\\nekaterina\\ndarya'\n\n\n\"\"\""
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''\n3 1\n1 5 6\n1 3\n3\n'''\n) == '3'\nassert solution(\n'''\n3 1\n1 5 6\n1 3\n2\n'''\n) == '2'\nassert solution(\n'''\n3 1\n1 5 6\n1 3\n3\n2\n'''\n) == '1'\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n1 5 6\\n1 3\\n3\\n') == 3\nassert solution('2 1\\n1 5 6\\n1 3\\n') == 2\nassert solution('3 1\\n1 5 6\\n1 2\\n3\\n') == 3\nassert solution('2 1\\n1 5 6\\n1 2\\n') == 2\nassert solution('1 10\\n1 2\\n') == 1\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\\n\") == 3\n\"\"\"\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n1 5 6\\n1 3\\n3\\n') == '3'\nassert solution('3 1\\n1 5 6\\n1 3\\n2\\n') == '3'\n\"\"\""
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\\n\") == 3\n\"\"\"\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\\n\") == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1 5 6\\n1 3\\n3\\n\") == \"3\"\nassert solution(\"4 1\\n1 2 3 4\\n1 1\\n3\\n\") == \"2\"\nassert solution(\"4 2\\n1 2 3 4\\n1 1\\n3\\n\") == \"2\"\nassert solution(\"4 2\\n1 1\\n1 2 3 4\\n1 1\\n3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n1 5 6\\n1 3\\n3\\n') == '3'\nassert solution('6 5\\n1 3 2 7 5\\n1 2\\n6\\n') == '2'\nassert solution('3 1\\n1 5 6\\n1 3\\n3\\n') == '2'\nassert solution('3 1\\n1 5 6\\n1 3\\n3\\n') == '2'\nassert solution('3 1\\n1 5 6\\n1 3\\n3\\n') == '2'\n"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n1 5 6\\n1 3\\n3\") == '3', \"Wrong answer\"\nassert solution(\"4 1\\n1 5 6 7\\n1 3\\n3\") == '3', \"Wrong answer\"\n\"\"\"\n"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a1') == 0\nassert solution('b8') == 0\nassert solution('c1') == 3\nassert solution('d2') == 2\nassert solution('e3') == 1\n"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('e4') == 8\nassert solution('e2e4') == 6\nassert solution('e7e5') == 14\n\"\"\"\n\nfrom unittest import TestCase\n\nimport re\nimport io\n\nclass Solution:\n\n    def solution(self, stdin: str) -> str:\n        # parse input\n        # find position\n        # split into columns and rows\n        # convert rows and columns into integers\n        # find horizontal distance\n        # find vertical distance\n        # return the sum\n        return 0\n\nclass TestSolution(TestCase):\n\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_example1(self) -> None:\n        self.assertEqual(\n            self.solution.solution(\"e4\"),\n            8\n        )\n\n    def test_example2(self) -> None:\n        self.assertEqual(\n            self.solution.solution(\"e2e4\"),\n            6\n        )\n\n    def test_example3(self) -> None:\n        self."
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin\n\n\"\"\""
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"e4\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''e4''') == 8\n"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"e4\") == 8\nassert solution(\"c2\") == 1\n\"\"\""
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"e4\") == 8\n\"\"\"\n"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"e4\") == 8\n\"\"\""
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"e4\") == 8\n\"\"\"\n"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"e4\") == 8\nassert solution(\"c6\") == 0\nassert solution(\"a1\") == 0\n\nprint(solution(stdin.readline()))\n\"\"\"\n"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 3\\n2 3 1\") == \"7\\n1 3\\n2 1\\n2 6\\n2 4\\n7 4\\n3 5\"\nassert solution(\"14 5 6\\n4 4 2 2 1\") == \"14\\n3 1\\n1 4\\n11 6\\n1 2\\n10 13\\n6 10\\n10 12\\n14 12\\n8 4\\n5 1\\n3 7\\n2 6\\n5 9\"\nassert solution(\"3 1 1\\n2\") == \"-1\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n2\") == \"1\\n2\"\n"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1\") == \"1 2\"\nassert solution(\"10 4 1\") == \"2 4\"\nassert solution(\"7 3 2\") == \"7\"\nassert solution(\"7 5 6\") == \"7\"\nassert solution(\"7 3 1\") == \"-1\"\n"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 1\\n2\") == \"7\\n1 3\"\n\n\"\"\"\n"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 3\\n2 3 1\\n\") == \"7\\n1 3\\n2 1\\n2 6\\n2 4\\n7 4\\n3 5\\n\"\nassert solution(\"14 5 6\\n4 4 2 2 1\\n\") == \"14\\n3 1\\n1 4\\n11 6\\n1 2\\n10 13\\n6 10\\n10 12\\n14 12\\n8 4\\n5 1\\n3 7\\n2 6\\n5 9\\n\"\nassert solution(\"3 1 1\\n2\\n\") == \"-1\\n\"\nassert solution(\"7 2 2\\n2 3 1\\n\") == \"7\\n1 3\\n\"\n\nprint(\"Successfully tested.\")\n\n-----\nN is the number of cities. There are exactly n - 1 roads.\nT is the maximum number of cities.\nK is the number of dead ends.\nThere are exactly K cities with exactly one road.\nThere are exactly n - K cities with no road.\n-----\n\n\"\"\""
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 3\\n2 3 1\\n') == '7\\n1 3\\n2 1\\n2 6\\n2 4\\n7 4\\n3 5'\n\nassert solution('14 5 6\\n4 4 2 2 1\\n') == '14\\n3 1\\n1 4\\n11 6\\n1 2\\n10 13\\n6 10\\n10 12\\n14 12\\n8 4\\n5 1\\n3 7\\n2 6\\n5 9'\n\nassert solution('3 1 1\\n2\\n') == '-1'\n\nassert solution('7 3 3\\n4 4 2 2 1\\n') == '7\\n1 3\\n2 1\\n2 6\\n2 4\\n7 4\\n3 5'\n\nassert solution('3 1 1\\n1\\n') == '-1'"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 3\\n2 3 1\\n\") == \"7\\n1 3\\n2 1\\n2 6\\n2 4\\n7 4\\n3 5\"\n\nprint(solution(\"7 3 3\\n2 3 1\\n\"))"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 3\\n2 3 1\\n\") == \"7\"\nassert solution(\"14 5 6\\n4 4 2 2 1\\n\") == \"14\"\n\n\"\"\"\n\nimport sys\nimport collections\n\nclass Solution:\n    def solve(self, stdin):\n        n, t, k = [int(x) for x in stdin.readline().split()]\n        a = [int(x) for x in stdin.readline().split()]\n        if sum(a) - 1!= n - 1:\n            return \"-\"\n        count = collections.Counter(a)\n        if sum(count.values()) < n - 1:\n            return \"-1\"\n        routes = list(range(2, n))\n        for i in range(1, n):\n            if count[i] == 1:\n                routes = [1] + routes\n        routes = set(routes)\n        if len(routes)!= k:\n            return \"-1\"\n        return len(routes)"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3 3\\n2 3 1\\n') == '7'\nassert solution('14 5 6\\n4 4 2 2 1\\n') == '14'\nassert solution('3 1 1\\n2\\n') == '-1'\n"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''7 3 3\n2 3 1\n''') == '7\n1 3\n2 1\n2 6\n2 4\n7 4\n3 5'''\n\nassert solution('''14 5 6\n4 4 2 2 1\n''') == '14\n3 1\n1 4\n11 6\n1 2\n10 13\n6 10\n10 12\n14 12\n8 4\n5 1\n3 7\n2 6\n5 9'''\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0\\n05:43\") == \"23:59\"\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n22:00\\n03:21\\n16:03\\n09:59\") == \"06:37\"\n\"\"\"\nimport sys\nimport os\nfrom datetime import datetime, timedelta\nfrom itertools import combinations"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('04:11\\n09:30\\n04:00\\n16:23\\n16:02\\n16:10\\n16:29') == '12:02'\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n05:43\") == \"23:59\"\nassert solution(\"4\\n22:00\\n03:21\\n16:03\\n09:59\") == \"06:37\"\n\n\"\"\"\n\n\n\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n22:00\\n03:21\\n16:03\\n09:59') == '06:37'\nassert solution('2\\n00:05\\n23:00') == '00:01'\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n05:43\") == \"23:59\"\nassert solution(\"4\\n22:00\\n03:21\\n16:03\\n09:59\") == \"06:37\"\nassert solution(\"1\\n05:44\") == \"23:58\"\nassert solution(\"4\\n22:00\\n03:21\\n16:03\\n09:59\\n16:09\") == \"06:35\"\nassert solution(\"4\\n22:00\\n03:21\\n16:03\\n10:58\") == \"06:37\"\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"05:43\") == \"23:59\"\nassert solution(\"22:00\") == \"06:37\"\nassert solution(\"03:21\") == \"16:03\"\nassert solution(\"16:03\") == \"09:59\"\nassert solution(\"09:59\") == \"22:00\"\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"05:43\") == \"23:59\"\nassert solution(\"22:00 03:21 16:03 09:59\") == \"06:37\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"01:00\\n08:00\\n09:00\\n16:00\\n16:01\\n17:00\\n17:01\\n18:00\") == \"18:01\"\nassert solution(\"22:00\\n23:00\\n23:59\\n23:59\") == \"01:00\"\nassert solution(\"22:00\\n23:00\\n23:59\\n22:00\") == \"23:59\"\n\"\"\"\n\nfrom typing import List\n\nfrom datetime import datetime\n\n\nclass Alarm:\n    def __init__(self, time: str):\n        self.time = time\n"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0:0'\nassert solution('05:43') == '23:59'\nassert solution('22:00 03:21 16:03 09:59') == '06:37'\nassert solution('22:00 22:03 22:04 22:05 22:06 22:07 22:08 22:09') == '22:00'\nassert solution('22:00 22:03 22:04 22:05 22:06 22:07 22:08 22:09 22:10') == '22:00'\n"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4 5\n2 6\n3 2\n1 2\n2 4\n''') == '1'\n\nassert solution('''\n4 5\n4 1\n3 4\n''') == '0'\nassert solution('''\n5 6\n3 6\n3 2\n1 2\n2 4\n''') == '2'\nassert solution('''\n7 6\n5 2\n3 4\n5 4\n5 3\n5 5\n''') == '1'\n"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n6\n4 5\n2 6\n3 2\n1 2\n2 4\n''') == '1'\nassert solution('''\n4\n2 4\n4 1\n3 4\n''') == '0'\nassert solution('''\n4\n2 4\n4 1\n3 4\n''') == '0'\n"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2\\n4 5\") == \"1\"\nassert solution(\"4 5\\n2 6\\n3 2\\n1 2\") == \"0\""
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == \"1\"\nassert solution(\"4 1\\n3 4\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n2 6\\n3 2\\n1 2\\n2 4') == '1'\nassert solution('4 5\\n4 1\\n3 4') == '0'"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == '1'\nassert solution(\"2 3\\n3 2\") == '0'\n"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == '1'\nassert solution(\"4 2\\n3 4\\n1 2\\n2 4\") == '0'"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == \"1\"\nassert solution(\"4 1\\n3 4\") == \"0\"\n"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    [\n        [2, 4],\n        [4, 1],\n        [3, 4],\n    ]\n) == '1'\nassert solution(\n    [\n        [1, 2],\n        [2, 4],\n        [4, 3],\n    ]\n) == '0'\n\"\"\"\n\nimport sys\nfrom collections import deque, defaultdict\nfrom pprint import pprint\n"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n4 5\\n2 6\\n3 2\\n1 2\\n2 4\") == \"1\"\nassert solution(\"4\\n2 4\\n4 1\\n3 4\") == \"0\"\n"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '9'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"9\"\nassert solution(\"3\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\nassert solution('5\\n') == '9'\n\nassert solution('3\\n') == '1'\n\nassert solution('6\\n') == '7'\n\nassert solution('54321\\n') == '1110'"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '8'\nassert solution('3') == '1'\nassert solution('5') == '9'\n"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"0\"\n\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"3\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"9\"\nassert solution(\"3\") == \"1\"\n\n'''\n\nfrom math import sqrt"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 1\nassert solution(\"5\") == 3\nassert solution(\"100\") == 20\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_expected_result_1\nassert solution(test_input_2) == test_expected_result_2\n\"\"\"\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"011\") == \"1\"\nassert solution(\"1101\") == \"1\"\nassert solution(\"101\") == \"1\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"10111\") == \"3\"\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"101010\") == \"1\"\nassert solution(\"0101010\") == \"2\"\n\nassert solution(\"11 1010\") == \"2\"\nassert solution(\"111010\") == \"2\""
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0100100') == '2'\nassert solution('101010') == '1'\nassert solution('101100') == '2'\n\"\"\"\nimport sys\nfrom typing import List\nfrom collections import deque"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0100100') == 2\nassert solution('010') == 1\nassert solution('1000') == 0\n\n\"\"\""
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('01010') == '2'\nassert solution('0100100') == '2'\nassert solution('01101100') == '3'\nassert solution('101100010') == '5'\nassert solution('111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0100100') == 2\nassert solution('0101010') == 2\nassert solution('100110') == 2\nassert solution('1110010') == 1\nassert solution('0111010') == 1\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\", \"0100100\") == \"2\"\nassert solution(\"5 1\", \"01010\") == \"2\"\nassert solution(\"3 2\", \"000\") == \"1\""
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0100100\") == \"2\"\nassert solution(\"0101010\") == \"1\"\nassert solution(\"1110111\") == \"4\"\nassert solution(\"1110111010\") == \"5\"\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0100100\") == 2\nassert solution(\"01010\") == 1\nassert solution(\"00011100\") == 4\nassert solution(\"11100111\") == 3\nassert solution(\"11100110\") == 3\n"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10101010') == '2'\nassert solution('11111111') == '4'\nassert solution('11101111') == '1'\nassert solution('11101110') == '3'\nassert solution('11101110') == '3'\n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n0 0 0 1 0\\n\") == \"1\"\n\"\"\"\n\n\nn,a = input().split()\nl = list(map(int,input().split()))\nl.insert(int(a), 0)\nl.sort()\nfor i in range(1,int(n)+1):\n    if l.count(i) > 1:\n        print(l.count(i))\n    else:\n        print(l.count(i))\n    \n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3\\n1 1 1 0 1 0\") == \"3\"\nassert solution(\"5 2\\n0 0 0 1 0\") == \"1\"\n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n0 0 0 1 0') == '1'\nassert solution('6 3\\n1 1 1 0 1 0') == '3'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\\n1 1 1 0 1 0\\n\") == \"3\"\nassert solution(\"5 2\\n0 0 0 1 0\\n\") == \"1\"\n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n0 0 0 1 0\") == \"1\"\n\"\"\"\n\n\nn, a = [int(x) for x in input().split()]\nt = [int(x) for x in input().split()]"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3\\n1 1 1 0 1 0\\n') == '3'\nassert solution('5 2\\n0 0 0 1 0\\n') == '1'\nassert solution('5 2\\n0 0 0 0 0\\n') == '0'\nassert solution('5 2\\n0 1 1 0 1\\n') == '0'\nassert solution('5 2\\n0 1 1 1 1\\n') == '0'\n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 0 1 0\") == \"1\"\nassert solution(\"6 3 1 1 0 1 0\") == \"3\"\nassert solution(\"5 2 0 0 0\") == \"1\"\nassert solution(\"5 2 1 0 1 0\") == \"2\"\nassert solution(\"5 2 1 0 0 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6 3\n1 1 1 0 1 0\n''') == '3'\nassert solution('''5 2\n0 0 0 1 0\n''') == '1'\nassert solution('''8 3\n0 0 0 0 0 0 1 1\n''') == '0'\nassert solution('''4 4\n0 1 1 0 0\n''') == '0'\nassert solution('''4 4\n0 0 0 0 0\n''') == '4'\n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n0 0 0 1 0 1') == '3'\nassert solution('6 3\\n0 0 0 1 0 1') == '1'\nassert solution('5 2\\n0 0 0 1 0') == '1'\n\n\"\"\"\nfrom itertools import count\n\nn, a = map(int, input().split())\ncriminals = list(map(int, input().split()))\n\ndistances = list(zip(count(1), filter(lambda x: x == 1, criminals)))\n\ndistances.sort()\n\nprint(distances)\n\nprint(len(distances))\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 1') == '1'\nassert solution('8 7 6 5 4 3 2 1') == '8'\nassert solution('24 8 7 6 5 4 3 2 1') == '17'\n\n\"\"\"\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n') == '1'\nassert solution('1\\n1\\n1\\n1\\n') == '1'\nassert solution('1\\n2\\n2\\n2\\n') == '2'\nassert solution('1\\n2\\n2\\n2\\n2\\n') == '2'\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '1'\nassert solution('1 1 2') == '1'\nassert solution('1 1 2 2 3 3 4') == '4'\nassert solution('1 1 1 2 2 3 3 4') == '4'\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1 1') == '1'\nassert solution('8\\n8 7 6 5 4 3 2 1') == '8'\nassert solution('24\\n1 8 1 2 8 2 3 8 3 4 8 4 5 8 5 6 8 6 7 8 7 8 8') == '17'\n\n\"\"\"\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1\") == \"1\"\nassert solution(\"8 7 6 5 4 3 2 1\") == \"8\"\nassert solution(\"24 1 8 1 2 8 2 3 8 3 4 8 4 5 8 5 6 8 6 7 8 7 8 8 8\") == \"17\"\nassert solution(\"9 9 8 7 6 5 4 3 2 1\") == \"9\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == \"100\"\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == \"8\"\nassert solution(\"24\\n1 8 1 2 8 2 3 8 3 4 8 4 5 8 5 6 8 6 7 8 7 8 8\") == \"17\"\n\n\"\"\"\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1 1') == '1'\nassert solution('8\\n8 7 6 5 4 3 2 1') == '8'\nassert solution('24\\n1 8 1 2 8 2 3 8 3 4 8 4 5 8 5 6 8 6 7 8 7 8 8') == '17'"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == \"8\"\nassert solution(\"24\\n1 8 1 2 8 2 3 8 3 4 8 4 5 8 5 6 8 6 7 8 7 8 8\") == \"17\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\") == 1\nassert solution(\"1 1 2\") == 2\nassert solution(\"1 1 1\") == 1\nassert solution(\"8 7 6 5 4 3 2 1\") == 8\nassert solution(\"8 7 6 5 4 3 2 1\") == 8\n"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == \"8\"\nassert solution(\"24\\n1 8 1 2 8 2 3 8 3 4 8 4 5 8 5 6 8 6 7 8 7 8 8\") == \"17\"\n\"\"\""
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3 3 2\\n1 2 0') == 'YES\\n1 3 2 0'\nassert solution('4\\n1 3\\n3 2') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\\n1 2 0\") == \"YES\\n1 3 2 0\"\nassert solution(\"4 3 2\\n1 2 0\") == \"NO\"\n\n\n\"\"\"\n\n\nfrom typing import List, Dict"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('4 3 2') == 'YES\\n1 3 2 0'\nassert solution('3 3 2') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3\\n3 2\") == \"NO\"\nassert solution(\"3\\n1 3\\n3 2\") == \"YES\"\nassert solution(\"2\\n1 3\\n3 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'NO'\nassert solution('1 3') == 'YES'\nassert solution('3 3 2') == 'YES'\nassert solution('1 3 2') == 'YES'\nassert solution('2 3') == 'NO'\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == \"YES\\n1 3 2 0 \"\nassert solution(\"3 3 2\") == \"NO\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0434\u043e 10000 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $N$ (2 \u2264 N \u2264 10000).\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0434\u043e $N$ \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e.\n\nSample Input 1:\n\n6\nSample Output 1:\n\n10\n\"\"\"\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\\n1 2 0\") == \"YES\\n1 3 2 0\"\nassert solution(\"3 3 2\\n1 3\\n3 2\") == \"NO\"\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 3 2\") == 'YES'\nassert solution(\"3\\n1 3\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3\\n3 2\") == 'NO'\nassert solution(\"4\\n3 3 2\") == 'YES\\n1 3 2 0'\nassert solution(\"5\\n1 1 1 1 1\") == 'YES\\n1 1 1 1 1'\nassert solution(\"4\\n1 1 1 1\") == 'NO'\nassert solution(\"7\\n2 1 1 1 1 2 2\") == 'YES\\n1 1 1 2 2 2 2'\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3\\n3 2\") == \"YES\"\nassert solution(\"3\\n1 3\\n3 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 1\") == \"YES\"\nassert solution(\"4\\n0 1\\n1 1\\n0 1\\n0 2\") == \"NO\"\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1\\n1 1\\n0 1\\n0 2\") == \"YES\"\nassert solution(\"5\\n0 1\\n1 1\\n0 1\\n0 2\\n1 3\") == \"NO\"\nassert solution(\"5\\n0 1\\n1 1\\n0 2\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"5\\n0 1\\n1 2\\n0 2\\n1 2\\n2 3\") == \"YES\"\nassert solution(\"7\\n0 1\\n1 2\\n0 2\\n1 3\\n2 3\\n0 4\\n1 4\\n0 4\\n1 5\") == \"YES\"\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n1 2\\n0 2\\n0 1\") == \"YES\"\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1\\n1 1\\n0 1\\n0 2') == 'YES'\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1\\n1 1\\n0 1\\n0 2\\n\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1\\n1 1\\n0 1\\n0 2\") == \"YES\"\n\nassert solution(\"4\\n0 1\\n1 1\\n0 2\\n0 1\") == \"NO\"\n\nassert solution(\"4\\n0 1\\n1 1\\n0 2\\n1 1\") == \"NO\"\n\nassert solution(\"4\\n0 1\\n1 1\\n0 2\\n0 3\") == \"NO\"\n\nassert solution(\"4\\n0 1\\n1 1\\n0 2\\n1 2\") == \"NO\""
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1\\n1 1\\n0 1\\n0 2\") == \"YES\"\nassert solution(\"1\\n0 1\") == \"YES\"\nassert solution(\"0 1\") == \"NO\""
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == \"YES\"\nassert solution('1 1\\n1 1') == \"NO\"\nassert solution('0 1\\n1 1\\n0 1\\n0 2') == \"YES\"\n\"\"\""
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(None) == \"YES\"\nassert solution(\"\") == \"YES\"\nassert solution(\"0 0\") == \"YES\"\nassert solution(\"0 1\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\n"
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 1\\n1 1\\n0 1\\n0 2') == \"YES\"\nassert solution('4\\n0 1\\n1 2\\n1 1\\n0 2') == \"NO\"\nassert solution('4\\n0 1\\n1 1\\n0 1\\n0 2') == \"NO\"\nassert solution('4\\n0 1\\n1 2\\n0 1\\n0 1') == \"YES\"\nassert solution('4\\n0 1\\n1 2\\n0 1\\n0 1') == \"YES\"\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5 6') == '5'\n\n\"\"\""
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4') == '3'\nassert solution('8\\n4 7 1 2 9 4 7 2 9') == '8'\nassert solution('6\\n6 5 2 4 5') == '3'\nassert solution('7\\n2 4 1 8 1 4') == '3'\nassert solution('4\\n1 2 3 4') == '2'\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2 3 4 5 6\") == \"5\"\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2 3 4 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2 3 4 5 6\") == \"5\"\nassert solution(\"3\\n1 2 3 4 5 6 7 8 9 10 11\") == \"8\"\nassert solution(\"4\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\") == \"10\"\nassert solution(\"5\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == \"9\"\nassert solution(\"6\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299\") == \"26\"\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 2 2 3 3 2 1 2 2 3 2\") == \"3\"\nassert solution(\"3 2 3 3 2 3 2 3 3 2 1\") == \"3\"\nassert solution(\"1 1 1 1 1\") == \"0\"\nassert solution
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2 3 4 5 6\") == \"5\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2 3 4 5 6\") == \"5\"\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 5 6') == '5'\nassert solution('1 2 3 4 5 6') == '1'\nassert solution('3 5 7 9') == '2'\nassert solution('1 1 2 2') == '1'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4') == '5'\n\"\"\"\n\nn = int(input())\n\nlights = [int(i) for i in input().split()]\n\nlights.sort()\n\nlights.insert(0, 0)\nlights.append(0)"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aabbb') == 'a'\nassert solution('abbbb') == ''\nassert solution('aaaaa') == 'a'\n\nimport unittest\nimport io\nimport sys\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass\n    \n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nabbba') == 1\nassert solution('4\\nabbab') == 0\nassert solution('6\\nabbaaaaabbbabbbb') == 3\nassert solution('8\\nabbaaaaabbbabbbbabbb') == 3\nassert solution('6\\nbbbb') == 1\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\nabbba''') == 1\n\nassert solution('''4\nabbab''') == 0\n\n\"\"\"\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbba\") == 1\nassert solution(\"abbbb\") == 0\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nabbba') == '1'\nassert solution('4\\nabbab') == '0'\n\"\"\""
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nabbba') == '1'\nassert solution('4\\nabbab') == '0'\n\nprint(solution(input()))\n\n\n---- \n\nclass Node:\n    def __init__(self, name: str, left: int, right: int):\n        self.name = name\n        self.left = left\n        self.right = right\n        self.parent = None\n        self.children = None\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nabbba') == '1'\nassert solution('4\\nabbab') == '0'\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbba\") == 1\nassert solution(\"abbab\") == 0\n"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbba\") == 1\nassert solution(\"abbab\") == 0\n\"\"\""
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nabbba\") == '1'\nassert solution(\"4\\nabbab\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('1\\n0\\n0') == '0'\nassert solution('1\\n0\\n0\\n1') == '0'\nassert solution('2\\n1\\n1') == '1'\n"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3, 1, 1, 2, 2, 3, 3) == 0\n"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == 0\n\"\"\"\n\n\nn = int(input())\n\nq = []\nfor i in range(n):\n    l = input().split()\n    p, q = int(l[0]), int(l[1])\n    q.append(q)\n\nprint(q)"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == open(\"output.txt\", \"r\").read()\n"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n1 1\n2 2\n3 3\"\"\") == \"0\"\n\"\"\""
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == '0'\nassert solution(\"1 10\\n0 10\\n10 10\") == '2'\n"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"2\"\nassert solution(\"1 10\\n0 10\\n10 10\") == \"1\""
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"0\"\nassert solution(\"3 10\\n1 10\\n10 10\") == \"2\"\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n0 10\\n10 10\") == 2\n\n-----\n1\n2\n3\n\n1\n2\n3\n\n2\n3\n4\n\n3\n4\n5\n6\n\n4\n5\n6\n7\n\n5\n6\n7\n8\n\n6\n7\n8\n9\n\n7\n8\n9\n10\n\n8\n9\n10\n11\n\n9\n10\n11\n12\n\n10\n11\n12\n13\n\n11\n12\n13\n14\n\n12\n13\n14\n15\n\n13\n14\n15\n16\n\n14\n15\n16\n17\n\n15\n16\n17\n18\n\n16\n17\n18\n19\n\n17\n18\n19\n20\n\n18\n19\n20\n21\n\n19\n20\n21\n22\n\n20\n21\n22\n23\n\n21\n22\n23\n24\n\n22\n23\n24\n25\n\n23\n24\n25\n26\n\n24\n25\n26\n27\n\n25\n26\n27\n28\n\n26\n27\n28\n29\n\n27\n28\n29\n30\n\n28\n29\n30\n31\n\n29\n30\n31\n32\n\n30\n31\n32\n33\n\n31\n32\n33\n34\n\n32\n33\n34\n35\n\n33\n34\n35\n36\n\n34\n35\n36\n37\n\n35\n36\n37\n38\n\n36\n37\n38\n39\n\n37\n38\n39\n40\n\n38\n39\n40\n41\n\n39\n40\n41\n42\n\n40\n41\n42\n43\n\n41\n42\n43\n44\n\n42\n43\n44\n45\n\n43\n44\n45\n46\n\n44\n45\n46\n47\n\n45\n46\n47\n48\n\n46\n47\n48\n49\n\n47\n48\n49\n50\n\n48\n49\n50\n51\n\n49\n50\n51\n52\n\n50\n51\n52\n53\n\n51\n52\n53\n54\n\n52\n53\n54\n55\n\n53\n54\n55\n56\n\n54\n55\n56\n57\n\n55\n56\n57\n58\n\n56\n57\n58\n59\n\n57\n58\n59\n60\n\n58\n59\n60\n61\n\n59\n60\n61\n62\n\n60\n61\n62\n63\n\n61\n62\n63\n64\n\n62\n63\n64\n65\n\n63\n64\n65\n66\n\n64\n65\n66\n67\n\n65\n66\n67\n68\n\n66\n67\n68\n69\n\n67\n68\n69\n70\n\n68\n69\n70\n71\n\n69\n70\n71\n72\n\n70\n71\n72\n73\n\n71\n72\n73\n74\n\n72\n73\n74\n75\n\n73\n74\n75\n76\n\n74\n75\n76\n77\n\n75\n76\n77\n78\n\n76\n77\n78\n79\n\n77\n78\n79\n80\n\n78\n79\n80\n81\n\n79\n80\n81\n82\n\n80\n81\n82\n83\n\n81\n82\n83\n84\n\n82\n83\n84\n85\n\n83\n84\n85\n86\n\n84\n85\n86\n87\n\n85\n86\n87\n88\n\n86\n87\n88\n89\n\n87\n88\n89\n90\n\n88\n89\n90\n91\n\n89\n90\n91\n92\n\n90\n91\n92\n93\n\n91\n92\n93\n94\n\n92\n93\n94\n95\n\n93\n94\n95\n96\n\n94\n95\n96\n97\n\n95\n96\n97\n98\n\n96\n97\n98\n99\n\n97\n98\n99\n100\n\n98\n99\n100\n101\n\n99\n100\n101\n102\n\n100\n101\n102\n103\n\n101\n102\n103\n104\n\n102\n103\n104\n105\n\n103\n104\n105\n106\n\n104\n105\n106\n107\n\n105\n106\n107\n108\n\n106\n107\n108\n109\n\n107\n108\n109\n110\n\n108\n109\n110\n111\n\n109\n110\n111\n112\n\n110\n111\n112\n113\n\n111\n112\n113\n114\n\n112\n113\n114\n115\n\n113\n114\n115\n116\n\n114\n115\n116\n117\n\n115\n116\n117\n118\n\n116\n117\n118\n119\n\n117\n118\n119\n120\n\n118\n119\n120\n121\n\n119\n120\n121\n122\n\n120\n121\n122\n123\n\n121\n122\n123\n124\n\n122\n123\n124\n125\n\n123\n124\n125\n126\n\n124\n125\n126\n127\n\n125\n126\n127\n128\n\n126\n127\n128\n129\n\n127\n128\n129\n130\n\n128\n129\n130\n131\n\n129\n130\n131\n132\n\n130\n131\n132\n133\n\n131\n132\n133\n134\n\n132\n133\n134\n135\n\n133\n134\n135\n136\n\n134\n135\n136\n137\n\n135\n136\n137\n138\n\n136\n137\n138\n139\n\n137\n138\n139\n140\n\n138\n139\n140\n141\n\n139\n140\n141\n142\n\n140\n141\n142\n143\n\n141\n142\n143\n144\n\n142\n143\n144\n145\n\n143\n144\n145\n146\n\n144\n145\n146\n147\n\n145\n146\n147\n148\n\n146\n147\n148\n149\n\n147\n148\n149\n150\n\n148\n149\n150\n151\n\n149\n150\n151\n152\n\n150\n151\n152\n153\n\n151\n152\n153\n154\n\n152\n153\n154\n155\n\n153\n154\n155\n156\n\n154\n155\n156\n157\n\n155\n156\n157\n158\n\n156\n157\n158\n159\n\n157\n158\n159\n160\n\n158\n159\n160\n161\n\n159\n160\n161\n162\n\n160\n161\n162\n163\n\n161\n162\n163\n164\n\n162\n163\n164\n165\n\n163\n164\n165\n166\n\n164\n165\n166\n167\n\n165\n166\n167\n168\n\n166\n167\n168\n169\n\n167\n168\n169\n170\n\n168\n169\n170\n171\n\n169\n170\n171\n172\n\n170\n171\n172\n173\n\n171\n172\n173\n174\n\n172\n173\n174\n175\n\n173\n174\n175\n176\n\n174\n175\n176\n177\n\n175\n176\n177\n178\n\n176\n177\n178\n179\n\n177\n178\n179\n180\n\n178\n179\n180\n181\n\n179\n180\n181\n182\n\n180\n181\n182\n183\n\n181\n182\n183\n184\n\n182\n183\n184\n185\n\n183\n184\n185\n186\n\n184\n185\n186\n187\n\n185\n186\n187\n188\n\n186\n187\n188\n189\n\n187\n188\n189\n190\n\n188\n189\n190\n191\n\n189\n190\n191\n192\n\n190\n191\n192\n193\n\n191\n192\n193\n194\n\n192\n"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3\\n') == '0'\nassert solution('3\\n0 10\\n10 10\\n10 10\\n') == '2'"
    }
]